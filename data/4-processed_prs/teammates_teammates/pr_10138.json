{"pr_number": 10138, "pr_title": "[#10109] Add response comment CRUD operations", "pr_createdAt": "2020-05-30T02:24:24Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10138", "timeline": [{"oid": "c08575d94c36528a3e6fae809290d2a16aa33475", "url": "https://github.com/TEAMMATES/teammates/commit/c08575d94c36528a3e6fae809290d2a16aa33475", "message": "Add response comment CRUD operations", "committedDate": "2020-05-30T02:20:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMjI3MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432802270", "bodyText": "Are you copying from the result page? I think most of the comment related features are the same. Can we extract to a common parent class?", "author": "xpdavid", "createdAt": "2020-05-30T02:31:24Z", "path": "src/web/app/pages-instructor/instructor-student-records-page/instructor-student-records-page.component.ts", "diffHunk": "@@ -188,4 +201,89 @@ export class InstructorStudentRecordsPageComponent implements OnInit {\n       isEditing: false,\n     };\n   }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {", "originalCommit": "c08575d94c36528a3e6fae809290d2a16aa33475", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMzQxOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432803418", "bodyText": "Are you copying from the result page?\n\nYeap\n\nCan we extract to a common parent class?\n\nSounds good, I'll put it in the root of pages-instructor?", "author": "madanalogy", "createdAt": "2020-05-30T02:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMjI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNDIxMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432804212", "bodyText": "Actually, I will hold off on this until #10136 is resolved since there's quite an extensive refactoring going on there that would affect how we extract the methods here", "author": "madanalogy", "createdAt": "2020-05-30T03:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwMjI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMzkyMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432903921", "bodyText": "We can be consistent with subscribe taking its own line?", "author": "Derek-Hardy", "createdAt": "2020-05-31T02:40:14Z", "path": "src/web/app/pages-instructor/instructor-student-records-page/instructor-student-records-page.component.ts", "diffHunk": "@@ -188,4 +201,89 @@ export class InstructorStudentRecordsPageComponent implements OnInit {\n       isEditing: false,\n     };\n   }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+        // tslint:disable-next-line:no-non-null-assertion\n+        this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+    // tslint:disable-next-line:no-non-null-assertion\n+    const commentToUpdate: FeedbackResponseComment = commentRowToUpdate.originalComment!;\n+\n+    this.commentService.updateComment({\n+      commentText: commentRowToUpdate.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToUpdate.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToUpdate.commentEditFormModel.showGiverNameTo,\n+    }, commentToUpdate.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows[data.index] = this.getCommentRowModel({\n+            ...commentResponse,\n+            commentGiverName: commentRowToUpdate.commentGiverName,\n+            // the current instructor will become the last editor\n+            lastEditorName: this.currInstructorName,\n+          });\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Saves an instructor comment.\n+   */\n+  saveNewComment(responseId: string): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[responseId];\n+    const commentRowToAdd: CommentRowModel = commentTableModel.newCommentRow;\n+\n+    this.commentService.createComment({\n+      commentText: commentRowToAdd.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToAdd.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToAdd.commentEditFormModel.showGiverNameTo,\n+    }, responseId, Intent.INSTRUCTOR_RESULT).subscribe((commentResponse: FeedbackResponseComment) => {", "originalCommit": "c08575d94c36528a3e6fae809290d2a16aa33475", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a9a8cff56821f84154dcac0f7b0ca2ade2d1b80", "url": "https://github.com/TEAMMATES/teammates/commit/6a9a8cff56821f84154dcac0f7b0ca2ade2d1b80", "message": "Merge branch 'master' into 10109-comments\n\n# Conflicts:\n#\tsrc/web/app/pages-instructor/instructor-student-records-page/__snapshots__/instructor-student-records-page.component.spec.ts.snap\n#\tsrc/web/app/pages-instructor/instructor-student-records-page/instructor-student-records-page.component.ts", "committedDate": "2020-05-31T12:23:41Z", "type": "commit"}, {"oid": "fc9ca4ef8b84b38eb3c1b1de330bf26dbc66c679", "url": "https://github.com/TEAMMATES/teammates/commit/fc9ca4ef8b84b38eb3c1b1de330bf26dbc66c679", "message": "Extract duplicate functions into common parent class", "committedDate": "2020-05-31T13:25:15Z", "type": "commit"}, {"oid": "662bc5f5679357b298f1129a4109fb7627faca4c", "url": "https://github.com/TEAMMATES/teammates/commit/662bc5f5679357b298f1129a4109fb7627faca4c", "message": "Fix typo in preprocessComments", "committedDate": "2020-05-31T13:31:17Z", "type": "commit"}, {"oid": "8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd", "url": "https://github.com/TEAMMATES/teammates/commit/8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd", "message": "Fix method documentation alignment", "committedDate": "2020-05-31T13:37:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MTg2NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432951865", "bodyText": "Since the class is abstract, the keyword protected for constructor is optional.", "author": "Derek-Hardy", "createdAt": "2020-05-31T14:19:01Z", "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(", "originalCommit": "8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2NjA0OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432966048", "bodyText": "I'm gonna leave it there then if that's alright, cause otherwise my IDE shows a red squiggly line :P", "author": "madanalogy", "createdAt": "2020-05-31T17:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MTg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MjE4MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432952181", "bodyText": "I think services can be all private here, since there is no more class extends from InstructorSessionResultPageComponent .\nhttps://stackoverflow.com/a/48571668/9421552", "author": "Derek-Hardy", "createdAt": "2020-05-31T14:22:36Z", "path": "src/web/app/pages-instructor/instructor-session-result-page/instructor-session-result-page.component.ts", "diffHunk": "@@ -139,12 +113,15 @@ export class InstructorSessionResultPageComponent implements OnInit {\n               private courseService: CourseService,\n               private studentService: StudentService,\n               private instructorService: InstructorService,\n-              private commentService: FeedbackResponseCommentService,\n               private route: ActivatedRoute,\n-      private timezoneService: TimezoneService, private statusMessageService: StatusMessageService,\n-      private modalService: NgbModal, private router: Router,\n-      private commentsToCommentTableModel: CommentsToCommentTableModelPipe,\n-      private commentToCommentRowModel: CommentToCommentRowModelPipe) {\n+              private timezoneService: TimezoneService,\n+              private modalService: NgbModal,\n+              private router: Router,\n+              private commentsToCommentTableModel: CommentsToCommentTableModelPipe,\n+              protected statusMessageService: StatusMessageService,\n+              protected commentService: FeedbackResponseCommentService,\n+              protected commentToCommentRowModel: CommentToCommentRowModelPipe) {", "originalCommit": "8307b4d4a5e3b4f776cc6e53e3a88b7f2b91ecfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2NjQ1MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r432966451", "bodyText": "I can't make these private, only protected or no access modifier, otherwise I get error TS6138: Property 'commentToCommentRowModel' is declared but its value is never read. when running the front end test suite.\nAlso, I think the link you shared explains the difference between having an access modifier vs not having one, not about the difference between levels of access modifiers. So it matches up here since the distinction is between protected vs no access modifier and not protected vs private (if that makes sense).", "author": "madanalogy", "createdAt": "2020-05-31T17:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MjE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMTc2Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r433001763", "bodyText": "My mistake. I think no access modifier is right here to inherit from base class?\nhttps://stackoverflow.com/a/49520067/9421552", "author": "Derek-Hardy", "createdAt": "2020-06-01T00:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk1MjE4MQ=="}], "type": "inlineReview"}, {"oid": "f6b510ae016430eee17a492d9124a312c3b6b2ec", "url": "https://github.com/TEAMMATES/teammates/commit/f6b510ae016430eee17a492d9124a312c3b6b2ec", "message": "Remove access modifiers for inherited services", "committedDate": "2020-06-01T01:54:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMzE3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r433023179", "bodyText": "The indentation is not correct?", "author": "xpdavid", "createdAt": "2020-06-01T03:02:35Z", "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(\n+        protected commentToCommentRowModel: CommentToCommentRowModelPipe,\n+        protected commentService: FeedbackResponseCommentService,\n+        protected statusMessageService: StatusMessageService) { }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+            // tslint:disable-next-line:no-non-null-assertion\n+            this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+        // tslint:disable-next-line:no-non-null-assertion", "originalCommit": "f6b510ae016430eee17a492d9124a312c3b6b2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMzM0OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r433023348", "bodyText": "Same here?", "author": "xpdavid", "createdAt": "2020-06-01T03:03:33Z", "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(\n+        protected commentToCommentRowModel: CommentToCommentRowModelPipe,\n+        protected commentService: FeedbackResponseCommentService,\n+        protected statusMessageService: StatusMessageService) { }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+            // tslint:disable-next-line:no-non-null-assertion\n+            this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+        // tslint:disable-next-line:no-non-null-assertion\n+    const commentToUpdate: FeedbackResponseComment = commentRowToUpdate.originalComment!;\n+\n+    this.commentService.updateComment({\n+      commentText: commentRowToUpdate.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToUpdate.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToUpdate.commentEditFormModel.showGiverNameTo,\n+    }, commentToUpdate.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows[data.index] = this.commentToCommentRowModel.transform({\n+            ...commentResponse,\n+            commentGiverName: commentRowToUpdate.commentGiverName,\n+                    // the current instructor will become the last editor", "originalCommit": "f6b510ae016430eee17a492d9124a312c3b6b2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMzUxNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10138#discussion_r433023515", "bodyText": "And here", "author": "xpdavid", "createdAt": "2020-06-01T03:04:39Z", "path": "src/web/app/pages-instructor/instructor-comments.component.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+import { FeedbackResponseCommentService } from '../../services/feedback-response-comment.service';\n+import { StatusMessageService } from '../../services/status-message.service';\n+import {\n+    FeedbackResponseComment,\n+    FeedbackSession, FeedbackSessionPublishStatus, FeedbackSessionSubmissionStatus,\n+    ResponseVisibleSetting,\n+    SessionVisibleSetting,\n+} from '../../types/api-output';\n+import { Intent } from '../../types/api-request';\n+import { CommentRowModel } from '../components/comment-box/comment-row/comment-row.component';\n+import { CommentTableModel } from '../components/comment-box/comment-table/comment-table.component';\n+import { CommentToCommentRowModelPipe } from '../components/comment-box/comment-to-comment-row-model.pipe';\n+import { ErrorMessageOutput } from '../error-message-output';\n+\n+/**\n+ * Base class for instructor comment CRUD operations.\n+ */\n+export abstract class InstructorCommentsComponent {\n+\n+  session: FeedbackSession = {\n+    courseId: '',\n+    timeZone: '',\n+    feedbackSessionName: '',\n+    instructions: '',\n+    submissionStartTimestamp: 0,\n+    submissionEndTimestamp: 0,\n+    gracePeriod: 0,\n+    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,\n+    responseVisibleSetting: ResponseVisibleSetting.AT_VISIBLE,\n+    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,\n+    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,\n+    isClosingEmailEnabled: true,\n+    isPublishedEmailEnabled: true,\n+    createdAtTimestamp: 0,\n+  };\n+  currInstructorName?: string;\n+\n+  // this is a separate model for instructor comments\n+  // from responseID to comment table model\n+  instructorCommentTableModel: Record<string, CommentTableModel> = {};\n+\n+  protected constructor(\n+        protected commentToCommentRowModel: CommentToCommentRowModelPipe,\n+        protected commentService: FeedbackResponseCommentService,\n+        protected statusMessageService: StatusMessageService) { }\n+\n+  /**\n+   * Deletes an instructor comment.\n+   */\n+  deleteComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentToDelete: FeedbackResponseComment =\n+            // tslint:disable-next-line:no-non-null-assertion\n+            this.instructorCommentTableModel[data.responseId].commentRows[data.index].originalComment!;\n+\n+    this.commentService.deleteComment(commentToDelete.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe(() => {\n+          commentTableModel.commentRows.splice(data.index, 1);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Updates an instructor comment.\n+   */\n+  updateComment(data: { responseId: string, index: number}): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[data.responseId];\n+    const commentRowToUpdate: CommentRowModel = commentTableModel.commentRows[data.index];\n+        // tslint:disable-next-line:no-non-null-assertion\n+    const commentToUpdate: FeedbackResponseComment = commentRowToUpdate.originalComment!;\n+\n+    this.commentService.updateComment({\n+      commentText: commentRowToUpdate.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToUpdate.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToUpdate.commentEditFormModel.showGiverNameTo,\n+    }, commentToUpdate.feedbackResponseCommentId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows[data.index] = this.commentToCommentRowModel.transform({\n+            ...commentResponse,\n+            commentGiverName: commentRowToUpdate.commentGiverName,\n+                    // the current instructor will become the last editor\n+            lastEditorName: this.currInstructorName,\n+          }, this.session.timeZone);\n+          this.instructorCommentTableModel[data.responseId] = {\n+            ...commentTableModel,\n+          };\n+        }, (resp: ErrorMessageOutput) => {\n+          this.statusMessageService.showErrorMessage(resp.error.message);\n+        });\n+  }\n+\n+  /**\n+   * Saves an instructor comment.\n+   */\n+  saveNewComment(responseId: string): void {\n+    const commentTableModel: CommentTableModel = this.instructorCommentTableModel[responseId];\n+    const commentRowToAdd: CommentRowModel = commentTableModel.newCommentRow;\n+\n+    this.commentService.createComment({\n+      commentText: commentRowToAdd.commentEditFormModel.commentText,\n+      showCommentTo: commentRowToAdd.commentEditFormModel.showCommentTo,\n+      showGiverNameTo: commentRowToAdd.commentEditFormModel.showGiverNameTo,\n+    }, responseId, Intent.INSTRUCTOR_RESULT)\n+        .subscribe((commentResponse: FeedbackResponseComment) => {\n+          commentTableModel.commentRows.push(this.commentToCommentRowModel.transform({\n+            ...commentResponse,\n+                // the giver and editor name will be the current login instructor", "originalCommit": "f6b510ae016430eee17a492d9124a312c3b6b2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ada6fbe9d1dbf45d15131f1cb8610cacb6dee000", "url": "https://github.com/TEAMMATES/teammates/commit/ada6fbe9d1dbf45d15131f1cb8610cacb6dee000", "message": "Fix tslint comment indentations", "committedDate": "2020-06-01T03:09:12Z", "type": "commit"}]}