{"pr_number": 10555, "pr_title": "[#10544] Add feedback session copy to multiple courses", "pr_createdAt": "2020-08-05T16:10:22Z", "pr_url": "https://github.com/TEAMMATES/teammates/pull/10555", "timeline": [{"oid": "14de3d1e2a884448a32a3fe8fd91f89972a3963c", "url": "https://github.com/TEAMMATES/teammates/commit/14de3d1e2a884448a32a3fe8fd91f89972a3963c", "message": "Implement feedback session copy to multiple courses", "committedDate": "2020-08-05T16:06:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzQ4OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466033489", "bodyText": "More proper way is to use forkJoin to send the request concurrently (need more code changes and a sample can come from submission related code). I am ok with the current implementation also.", "author": "xpdavid", "createdAt": "2020-08-05T22:12:41Z", "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {", "originalCommit": "14de3d1e2a884448a32a3fe8fd91f89972a3963c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNTI4Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466105282", "bodyText": "Yes I didn't know how to implement forkJoin for this and I thought that the current approach would be simpler and more straightforward", "author": "madanalogy", "createdAt": "2020-08-06T02:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3MDEyNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466970126", "bodyText": "I am ok with the current implementation also.\n\nI am not; we need to either forkJoin the requests or change the back-end to accept list of course IDs.\n\nI thought that the current approach would be simpler and more straightforward\n\nThere is one problem with that argument: you're trading off with accuracy (in some sense).", "author": "wkurniawan07", "createdAt": "2020-08-07T10:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwMTQwNQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467001405", "bodyText": "Okay I'll go see how forkJoin is done in other places and implement it here", "author": "madanalogy", "createdAt": "2020-08-07T12:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466033922", "bodyText": "You should also bind the [checked] property?", "author": "xpdavid", "createdAt": "2020-08-05T22:14:06Z", "path": "src/web/app/components/copy-session-modal/copy-session-modal.component.html", "diffHunk": "@@ -17,8 +17,8 @@ <h5 class=\"modal-title\">\n       </div>\n       <div class=\"form-check\" *ngFor=\"let course of courseCandidates\">\n         <label class=\"form-check-label\">\n-          <input type=\"radio\" name=\"copySessionChooseCourse\" class=\"form-check-input\"\n-                 [(ngModel)]=\"copyToCourseId\" [value]=\"course.courseId\">\n+          <input type=\"checkbox\" name=\"copySessionChooseCourse\" class=\"form-check-input\"", "originalCommit": "14de3d1e2a884448a32a3fe8fd91f89972a3963c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwNDY0Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466104643", "bodyText": "I'm not sure what the purpose of the binding would be? Or how to implement it with the current design approach even haha", "author": "madanalogy", "createdAt": "2020-08-06T02:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNDE2Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466124166", "bodyText": "If not bind, what will control the status of the checkbox?\nHint: It is implicitly controlled by the browser.", "author": "xpdavid", "createdAt": "2020-08-06T03:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNTA3MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466125071", "bodyText": "Hmm I thought that controlling the status of the checkbox wouldn't be necessary, since it's initialised to unchecked? Then when someone clicks it for the first time and triggers the change that's when the set logic takes over", "author": "madanalogy", "createdAt": "2020-08-06T03:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyODM1Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466128356", "bodyText": "Let me ask you another way around: Where should I make the change if I want to programmatically control whether the checkbox is checked or not?", "author": "xpdavid", "createdAt": "2020-08-06T03:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMDgyNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466130827", "bodyText": "Let me ask you another way around: Where should I make the change if I want to programmatically control whether the checkbox is checked or not?\n\n[checked]=\"copyToCourseSet.has(course.courseId)\"?", "author": "madanalogy", "createdAt": "2020-08-06T03:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0ODc2MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466148761", "bodyText": "That's why I ask to add the bind.", "author": "xpdavid", "createdAt": "2020-08-06T05:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzkyMg=="}], "type": "inlineReview"}, {"oid": "78e71362eda37f9e9873d4e4d526aab346c01986", "url": "https://github.com/TEAMMATES/teammates/commit/78e71362eda37f9e9873d4e4d526aab346c01986", "message": "Bind input property to copyToCourseSet", "committedDate": "2020-08-06T05:56:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NjMzMw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466776333", "bodyText": "Though I don't like the idea of refreshing page. If you want reload the sessions, just call the corresponding method.", "author": "xpdavid", "createdAt": "2020-08-07T01:49:43Z", "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {\n+          this.feedbackSessionsService.getFeedbackSession({\n+            courseId: this.courseId,\n+            feedbackSessionName: this.feedbackSessionName,\n+            intent: Intent.FULL_DETAIL,\n+          }).pipe(\n+              switchMap((feedbackSession: FeedbackSession) =>\n+                  this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)),\n+          ).subscribe((createdSession: FeedbackSession) => {\n+            if (result.copyToCourseList.length > 1) { return; }\n+            this.navigationService.navigateWithSuccessMessage(this.router,\n+                '/web/instructor/sessions/edit',\n+                'The feedback session has been copied. Please modify settings/questions as necessary.',\n+                { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+          }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        }, () => {});\n+        if (result.copyToCourseList.length > 1) { window.location.reload(); }\n+      }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });", "originalCommit": "78e71362eda37f9e9873d4e4d526aab346c01986", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NjU4MQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466776581", "bodyText": "Another question here is why we cannot reuse copySession in the base page?", "author": "xpdavid", "createdAt": "2020-08-07T01:50:44Z", "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {", "originalCommit": "78e71362eda37f9e9873d4e4d526aab346c01986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwNDUzOA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467004538", "bodyText": "That copySession requires a SessionsTableRowModel but this page uses a SessionEditFormModel.", "author": "madanalogy", "createdAt": "2020-08-07T12:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3NjU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2OTY1OA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466969658", "bodyText": "Putting this outside of the subscribe function means that this will not wait for the subscription result. This is not exactly what we want because if any of the API calls fail, we need to know.", "author": "wkurniawan07", "createdAt": "2020-08-07T10:57:53Z", "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {\n+          this.feedbackSessionsService.getFeedbackSession({\n+            courseId: this.courseId,\n+            feedbackSessionName: this.feedbackSessionName,\n+            intent: Intent.FULL_DETAIL,\n+          }).pipe(\n+              switchMap((feedbackSession: FeedbackSession) =>\n+                  this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)),\n+          ).subscribe((createdSession: FeedbackSession) => {\n+            if (result.copyToCourseList.length > 1) { return; }\n+            this.navigationService.navigateWithSuccessMessage(this.router,\n+                '/web/instructor/sessions/edit',\n+                'The feedback session has been copied. Please modify settings/questions as necessary.',\n+                { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+          }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        }, () => {});\n+        if (result.copyToCourseList.length > 1) { window.location.reload(); }", "originalCommit": "78e71362eda37f9e9873d4e4d526aab346c01986", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3MjQ4Ng==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r466972486", "bodyText": "If there are multiple course IDs, we still need to show toast mentioning that the operation is successful (and if any are failing).", "author": "wkurniawan07", "createdAt": "2020-08-07T11:04:34Z", "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,25 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        result.copyToCourseList.forEach((copyToCourseId: string) => {\n+          this.feedbackSessionsService.getFeedbackSession({\n+            courseId: this.courseId,\n+            feedbackSessionName: this.feedbackSessionName,\n+            intent: Intent.FULL_DETAIL,\n+          }).pipe(\n+              switchMap((feedbackSession: FeedbackSession) =>\n+                  this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)),\n+          ).subscribe((createdSession: FeedbackSession) => {\n+            if (result.copyToCourseList.length > 1) { return; }", "originalCommit": "78e71362eda37f9e9873d4e4d526aab346c01986", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "url": "https://github.com/TEAMMATES/teammates/commit/d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "message": "Change copy session requests to use forkJoin", "committedDate": "2020-08-07T13:18:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1MjE1Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467052152", "bodyText": "This is not going to work. Subscriptions in Observable are asynchronous, so this line would have been executed before the Observables finish.\nEven if this works, this is essentially reloading the page (just less explicit than window.location.reload). Ideally, it should only append the new sessions for the courses that are already pre-fetched.", "author": "wkurniawan07", "createdAt": "2020-08-07T13:48:49Z", "path": "src/web/app/pages-instructor/instructor-home-page/instructor-home-page.component.ts", "diffHunk": "@@ -360,6 +360,8 @@ export class InstructorHomePageComponent extends InstructorSessionModalPageCompo\n    */\n   copySessionEventHandler(tabIndex: number, result: CopySessionResult): void {\n     this.copySession(this.courseTabModels[tabIndex].sessionsTableRowModels[result.sessionToCopyRowIndex], result);\n+    this.courseTabModels = [];\n+    this.loadCourses();", "originalCommit": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTI4MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467351280", "bodyText": "Appending new sessions to the model doesn't update the view for me so I didn't see any other way than to reload the page. I've pushed my previous implementation (of updating the model).", "author": "madanalogy", "createdAt": "2020-08-08T02:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1MjE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1MzU1NQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467053555", "bodyText": "This is where the actual copying takes place, so this really is not a helper method. It was the previous method that becomes an event handler of some sort.", "author": "wkurniawan07", "createdAt": "2020-08-07T13:51:07Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -195,14 +195,33 @@ export abstract class InstructorSessionBasePageComponent {\n    * Copies the feedback session.\n    */\n   copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));\n+    });\n+    this.copySessionHelper(copySessionRequests);\n+  }\n+\n+  /**\n+   * Submits the copy session requests.\n+   */\n+  copySessionHelper(copySessionRequests: Observable<FeedbackSession>[]): void {", "originalCommit": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1ODg1Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467058857", "bodyText": "This is not sufficient. forkJoin-ing these requests verbatim will cause everything to be wasted if any of the API calls are errored. Reference: https://medium.com/better-programming/rxjs-error-handling-with-forkjoin-3d4027df70fc\nSee this, particularly on the functions passed to pipe:\n\n  \n    \n      teammates/src/web/app/pages-session/session-submission-page/session-submission-page.component.ts\n    \n    \n        Lines 608 to 628\n      in\n      748cc55\n    \n    \n    \n    \n\n        \n          \n           savingRequests.push( \n        \n\n        \n          \n               this.feedbackResponsesService.createFeedbackResponse(questionSubmissionFormModel.feedbackQuestionId, { \n        \n\n        \n          \n                 intent: this.intent, \n        \n\n        \n          \n                 key: this.regKey, \n        \n\n        \n          \n                 moderatedperson: this.moderatedPerson, \n        \n\n        \n          \n               }, { \n        \n\n        \n          \n                 recipientIdentifier: recipientSubmissionFormModel.recipientIdentifier, \n        \n\n        \n          \n                 questionType: questionSubmissionFormModel.questionType, \n        \n\n        \n          \n                 responseDetails: recipientSubmissionFormModel.responseDetails, \n        \n\n        \n          \n               }).pipe( \n        \n\n        \n          \n                   tap((resp: FeedbackResponse) => { \n        \n\n        \n          \n                     recipientSubmissionFormModel.responseId = resp.feedbackResponseId; \n        \n\n        \n          \n                     recipientSubmissionFormModel.responseDetails = resp.responseDetails; \n        \n\n        \n          \n                     recipientSubmissionFormModel.recipientIdentifier = resp.recipientIdentifier; \n        \n\n        \n          \n                   }), \n        \n\n        \n          \n                   switchMap(() => this.createCommentRequest(recipientSubmissionFormModel)), \n        \n\n        \n          \n                   catchError((error: ErrorMessageOutput) => { \n        \n\n        \n          \n                     failToSaveQuestions[questionSubmissionFormModel.questionNumber] = error.error.message; \n        \n\n        \n          \n                     return of(error); \n        \n\n        \n          \n                   }), \n        \n\n        \n          \n               ));", "author": "wkurniawan07", "createdAt": "2020-08-07T13:59:48Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -195,14 +195,33 @@ export abstract class InstructorSessionBasePageComponent {\n    * Copies the feedback session.\n    */\n   copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));", "originalCommit": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2MjkwOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467062909", "bodyText": "Use the actual typing instead of any?", "author": "wkurniawan07", "createdAt": "2020-08-07T14:06:55Z", "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,18 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        const copySessionRequests: Observable<any>[] = [];", "originalCommit": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2MzMxNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467063316", "bodyText": "Same comments here as the one in instructor home page", "author": "wkurniawan07", "createdAt": "2020-08-07T14:07:36Z", "path": "src/web/app/pages-instructor/instructor-sessions-page/instructor-sessions-page.component.ts", "diffHunk": "@@ -482,6 +482,8 @@ export class InstructorSessionsPageComponent extends InstructorSessionModalPageC\n    */\n   copySessionEventHandler(result: CopySessionResult): void {\n     this.copySession(this.sessionsTableRowModels[result.sessionToCopyRowIndex], result);\n+    this.sessionsTableRowModels = [];\n+    this.loadFeedbackSessions();", "originalCommit": "d6260d3ebeecfac6fb2dbbbd462c1ce61636abc1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3", "url": "https://github.com/TEAMMATES/teammates/commit/9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3", "message": "Add forkJoin error handling and update by model", "committedDate": "2020-08-08T02:37:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjEwOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467496109", "bodyText": "This is not going to work. This will almost always return empty list because the list is populated inside the subscribe block, but this method doesn't wait for that.", "author": "wkurniawan07", "createdAt": "2020-08-08T19:23:35Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +192,50 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Combines a {@link SessionsTableRowModel} and {@link CopySessionResult} to submit the copy session requests.\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionTransformer(model: SessionsTableRowModel, result: CopySessionResult): FeedbackSession[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));\n+    });\n+    return this.copySession(copySessionRequests);\n+  }\n+\n+  /**\n+   * Submits the copy session requests.\n+   */\n+  copySession(copySessionRequests: Observable<FeedbackSession>[]): FeedbackSession[] {\n+    const successMessage: string =\n+        'The feedback session has been copied. Please modify settings/questions as necessary.';\n+    const sessionList: FeedbackSession[] = [];\n+    if (copySessionRequests.length === 1) {\n+      copySessionRequests[0].subscribe((createdSession: FeedbackSession) => {\n+        sessionList.push(createdSession);\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit', successMessage,\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    } else if (copySessionRequests.length > 1) {\n+      let isAnyFailed: boolean = false;\n+      forkJoin(copySessionRequests).pipe(\n+          tap((sessions: FeedbackSession[]) => {\n+            sessionList.concat(sessions);\n+          }),\n+          catchError((error: any) => {\n+            isAnyFailed = true;\n+            return of(error);\n+          }),\n+      ).subscribe(() => {\n+        if (isAnyFailed) {\n+          this.statusMessageService.showErrorToast('The session could not be copied into some courses.');\n+        } else {\n+          this.statusMessageService.showSuccessToast(successMessage);\n+        }\n+      });\n+    }\n+    return sessionList;", "originalCommit": "9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNDk1Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r468624952", "bodyText": "Do you have any suggestions on how to overcome this problem? The only solution I can think of is busy waiting", "author": "madanalogy", "createdAt": "2020-08-11T14:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MjM1Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r469242353", "bodyText": "Whatever needs to be done afterwards have to be inside the subscribe block.", "author": "wkurniawan07", "createdAt": "2020-08-12T13:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMDk4Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r470030983", "bodyText": "What do you mean? Return a Observable<FeedbackSession>[] instead of an FeedbackSession[]?", "author": "madanalogy", "createdAt": "2020-08-13T15:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM5MzQ0MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r470393440", "bodyText": "By returning sessionList, you are saying the method is synced (i.e., I can immediately get the copied sessionList), but is it true in the case?", "author": "xpdavid", "createdAt": "2020-08-14T03:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjIzNA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r467496234", "bodyText": "Knowing isAnyFailed is good, but will be better if we know exactly which ones fail. Submission page does that.", "author": "wkurniawan07", "createdAt": "2020-08-08T19:25:04Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +192,50 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Combines a {@link SessionsTableRowModel} and {@link CopySessionResult} to submit the copy session requests.\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionTransformer(model: SessionsTableRowModel, result: CopySessionResult): FeedbackSession[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId));\n+    });\n+    return this.copySession(copySessionRequests);\n+  }\n+\n+  /**\n+   * Submits the copy session requests.\n+   */\n+  copySession(copySessionRequests: Observable<FeedbackSession>[]): FeedbackSession[] {\n+    const successMessage: string =\n+        'The feedback session has been copied. Please modify settings/questions as necessary.';\n+    const sessionList: FeedbackSession[] = [];\n+    if (copySessionRequests.length === 1) {\n+      copySessionRequests[0].subscribe((createdSession: FeedbackSession) => {\n+        sessionList.push(createdSession);\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit', successMessage,\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+    } else if (copySessionRequests.length > 1) {\n+      let isAnyFailed: boolean = false;\n+      forkJoin(copySessionRequests).pipe(\n+          tap((sessions: FeedbackSession[]) => {\n+            sessionList.concat(sessions);\n+          }),\n+          catchError((error: any) => {\n+            isAnyFailed = true;\n+            return of(error);\n+          }),\n+      ).subscribe(() => {\n+        if (isAnyFailed) {", "originalCommit": "9a76eae7ac2e27b119598d9ccbb0658bbf4d91b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNTkyNg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r468625926", "bodyText": "How can I retrieve the courseId from the request array?", "author": "madanalogy", "createdAt": "2020-08-11T14:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDMxOQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r469244319", "bodyText": "Take a look at how the submission page does it.", "author": "wkurniawan07", "createdAt": "2020-08-12T13:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyNDcyMQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r470024721", "bodyText": "The submission page has the luxury of having the request array creation and forkJoin submission happen within the same method scope, so the catchError block is constructed as part of the request. For me to do something similar here would require extensive code refactoring so this might take some time", "author": "madanalogy", "createdAt": "2020-08-13T15:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM5Mjc3Mg==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r470392772", "bodyText": "You can have this.copyFeedbackSession to construct the error message and just display here. There is no need to know which one is failing here.", "author": "xpdavid", "createdAt": "2020-08-14T03:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ5NjIzNA=="}], "type": "inlineReview"}, {"oid": "ee8d4adc97560ba8d6a29d0dda593cfb2e5ccc33", "url": "https://github.com/TEAMMATES/teammates/commit/ee8d4adc97560ba8d6a29d0dda593cfb2e5ccc33", "message": "Merge branch 'master' into 10544-copy-sessions\n\n# Conflicts:\n#\tsrc/web/app/components/copy-session-modal/copy-session-modal.component.html", "committedDate": "2020-08-15T10:23:03Z", "type": "commit"}, {"oid": "d00fd34b2121e8f45dc63906c07347cf32ab70e2", "url": "https://github.com/TEAMMATES/teammates/commit/d00fd34b2121e8f45dc63906c07347cf32ab70e2", "message": "Refactor copy session methods for modularity", "committedDate": "2020-08-16T14:25:54Z", "type": "commit"}, {"oid": "c6ea0d5389fc6bd68716673c57c68e360519e1d3", "url": "https://github.com/TEAMMATES/teammates/commit/c6ea0d5389fc6bd68716673c57c68e360519e1d3", "message": "Merge branch 'master' into 10544-copy-sessions", "committedDate": "2020-08-16T16:07:59Z", "type": "commit"}, {"oid": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "url": "https://github.com/TEAMMATES/teammates/commit/6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "message": "Fix accidental regression", "committedDate": "2020-08-16T16:22:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5MTYyNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473491627", "bodyText": "The method name doesn't represent what it does. The method returns a list of requests, but the method name implies that it does the copying.", "author": "wkurniawan07", "createdAt": "2020-08-20T00:58:59Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {", "originalCommit": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5Mjc1Nw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473492757", "bodyText": "This method (building the requests) should not be concerned with resetting this field. The field needs to be reset when there is a fresh request to copy sessions, not when there is a need to build the HTTP requests.", "author": "wkurniawan07", "createdAt": "2020-08-20T01:00:34Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};", "originalCommit": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5NTI3OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473495279", "bodyText": "This is already inside a pipe block, so you shouldn't need to define another .pipe here. Just make the catchError the second argument.", "author": "wkurniawan07", "createdAt": "2020-08-20T01:04:33Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(this.feedbackSessionsService.getFeedbackSession({\n+        courseId,\n+        feedbackSessionName,\n+        intent: Intent.FULL_DETAIL,\n+      }).pipe(switchMap((feedbackSession: FeedbackSession) =>\n+              this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+          .pipe(catchError((err: any) => {", "originalCommit": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ5ODQ3Mw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473498473", "bodyText": "There's too many unnecessary concat here. You can simplify the process:\n\nUse map to map each session to the message Error copying to ${key}: ${this.failedToCopySessions[key]}\nEnd with join(' ')", "author": "wkurniawan07", "createdAt": "2020-08-20T01:09:37Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(this.feedbackSessionsService.getFeedbackSession({\n+        courseId,\n+        feedbackSessionName,\n+        intent: Intent.FULL_DETAIL,\n+      }).pipe(switchMap((feedbackSession: FeedbackSession) =>\n+              this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+          .pipe(catchError((err: any) => {\n+            this.failedToCopySessions[copyToCourseId] = err.error.message;\n+            return of(err);\n+          })),\n+      )));\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Submits a single copy session request.\n+   */\n+  copySingleSession(copySessionRequest: Observable<FeedbackSession>): void {\n+    copySessionRequest.subscribe((createdSession: FeedbackSession) => {\n+      if (Object.keys(this.failedToCopySessions).length === 0) {\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit',\n+            'The feedback session has been copied. Please modify settings/questions as necessary.',\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      } else {\n+        this.statusMessageService.showErrorToast(this.getCopyErrorMessage());\n+      }\n+    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  }\n+\n+  resolveCopyRequest(): void {\n+    if (Object.keys(this.failedToCopySessions).length > 0) {\n+      this.statusMessageService.showErrorToast(this.getCopyErrorMessage());\n+    } else {\n+      this.statusMessageService.showSuccessToast('Feedback session copied successfully to all courses.');\n+    }\n+  }\n+\n+  getCopyErrorMessage(): string {\n+    let errorMessage: string = '';\n+    Object.keys(this.failedToCopySessions).forEach((key: string) => {\n+      errorMessage = errorMessage.concat(`Error copying to ${key}:`).concat(' ')\n+          .concat(this.failedToCopySessions[key]).concat(' ');", "originalCommit": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwMDE3NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473500174", "bodyText": "This is not exactly resolving the request; this is merely showing status message.", "author": "wkurniawan07", "createdAt": "2020-08-20T01:12:12Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(this.feedbackSessionsService.getFeedbackSession({\n+        courseId,\n+        feedbackSessionName,\n+        intent: Intent.FULL_DETAIL,\n+      }).pipe(switchMap((feedbackSession: FeedbackSession) =>\n+              this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+          .pipe(catchError((err: any) => {\n+            this.failedToCopySessions[copyToCourseId] = err.error.message;\n+            return of(err);\n+          })),\n+      )));\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Submits a single copy session request.\n+   */\n+  copySingleSession(copySessionRequest: Observable<FeedbackSession>): void {\n+    copySessionRequest.subscribe((createdSession: FeedbackSession) => {\n+      if (Object.keys(this.failedToCopySessions).length === 0) {\n+        this.navigationService.navigateWithSuccessMessage(this.router,\n+            '/web/instructor/sessions/edit',\n+            'The feedback session has been copied. Please modify settings/questions as necessary.',\n+            { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n+      } else {\n+        this.statusMessageService.showErrorToast(this.getCopyErrorMessage());\n+      }\n+    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  }\n+\n+  resolveCopyRequest(): void {", "originalCommit": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUwMjE4MA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r473502180", "bodyText": "Similar comment here as copySessionFromRowModel", "author": "wkurniawan07", "createdAt": "2020-08-20T01:15:28Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -192,17 +195,84 @@ export abstract class InstructorSessionBasePageComponent {\n   }\n \n   /**\n-   * Copies the feedback session.\n+   * Creates list of copy session requests from params\n+   * @param model the source session model\n+   * @param result the result of the copy session modal\n+   * @returns the list of copy session requests\n    */\n-  copySession(model: SessionsTableRowModel, result: CopySessionResult): void {\n-    this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)\n-        .subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(\n-              this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+  copySessionFromRowModel(model: SessionsTableRowModel, result: CopySessionResult): Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};\n+    result.copyToCourseList.forEach((copyToCourseId: string) => {\n+      copySessionRequests.push(\n+          this.copyFeedbackSession(model.feedbackSession, result.newFeedbackSessionName, copyToCourseId)\n+              .pipe(catchError((err: any) => {\n+                this.failedToCopySessions[copyToCourseId] = err.error.message;\n+                return of(err);\n+              })),\n+      );\n+    });\n+    return copySessionRequests;\n+  }\n+\n+  /**\n+   * Creates list of copy session requests from params\n+   * @param result the result of the copy session modal\n+   * @param courseId the source courseId\n+   * @param feedbackSessionName the source feedback session name\n+   * @returns the list of copy session requests\n+   */\n+  copySessionFromModal(result: CopySessionModalResult, courseId: string, feedbackSessionName: string)\n+      : Observable<FeedbackSession>[] {\n+    const copySessionRequests: Observable<FeedbackSession>[] = [];\n+    this.failedToCopySessions = {};", "originalCommit": "6c6e269fded5cde0acf19160125c2f0ffc7f4c17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "913bbd0c3524fb25563fe1145bf34d3bdb0b8116", "url": "https://github.com/TEAMMATES/teammates/commit/913bbd0c3524fb25563fe1145bf34d3bdb0b8116", "message": "Merge branch 'master' into 10544-copy-sessions", "committedDate": "2020-09-06T16:55:07Z", "type": "commit"}, {"oid": "e8294131451762dc5f069c20f7dfe89ba527b600", "url": "https://github.com/TEAMMATES/teammates/commit/e8294131451762dc5f069c20f7dfe89ba527b600", "message": "Refactor for code quality", "committedDate": "2020-09-06T17:19:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExMjcxNw==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r489112717", "bodyText": "Single session is just a special case for copying multiple session, is it necessary to have a separate method to handle it?", "author": "xpdavid", "createdAt": "2020-09-16T01:47:04Z", "path": "src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts", "diffHunk": "@@ -250,21 +250,19 @@ export class InstructorSessionEditPageComponent extends InstructorSessionBasePag\n       modalRef.componentInstance.sessionToCopyCourseId = this.courseId;\n \n       modalRef.result.then((result: CopySessionModalResult) => {\n-        this.feedbackSessionsService.getFeedbackSession({\n-          courseId: this.courseId,\n-          feedbackSessionName: this.feedbackSessionName,\n-          intent: Intent.FULL_DETAIL,\n-        }).pipe(\n-            switchMap((feedbackSession: FeedbackSession) =>\n-                this.copyFeedbackSession(feedbackSession, result.newFeedbackSessionName, result.copyToCourseId)),\n-        ).subscribe((createdSession: FeedbackSession) => {\n-          this.navigationService.navigateWithSuccessMessage(this.router,\n-              '/web/instructor/sessions/edit',\n-              'The feedback session has been copied. Please modify settings/questions as necessary.',\n-              { courseid: createdSession.courseId, fsname: createdSession.feedbackSessionName });\n-        }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n-      }, () => {});\n-    }, (resp: ErrorMessageOutput) => { this.statusMessageService.showErrorToast(resp.error.message); });\n+        this.failedToCopySessions = {};\n+        const requestList: Observable<FeedbackSession>[] = this.createSessionCopyRequestsFromModal(\n+            result, this.courseId, this.feedbackSessionName);\n+        if (requestList.length === 1) {\n+          this.copySingleSession(requestList[0]);", "originalCommit": "e8294131451762dc5f069c20f7dfe89ba527b600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExNjI1NA==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r489116254", "bodyText": "The flow for single session is completely different because the user gets redirected to edit the session, and since this happens at more than one place I figured having a separate method would be cleaner.", "author": "madanalogy", "createdAt": "2020-09-16T02:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTExMjcxNw=="}], "type": "inlineReview"}, {"oid": "c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8", "url": "https://github.com/TEAMMATES/teammates/commit/c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8", "message": "Merge branch 'master' into 10544-copy-sessions", "committedDate": "2020-09-28T15:33:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3MzM5OQ==", "url": "https://github.com/TEAMMATES/teammates/pull/10555#discussion_r498373399", "bodyText": "This should not be part of the component, but admittedly I can't really think of a better way to put this that still achieves what we want.", "author": "wkurniawan07", "createdAt": "2020-10-01T16:29:29Z", "path": "src/web/app/pages-instructor/instructor-session-base-page.component.ts", "diffHunk": "@@ -2,35 +2,35 @@ import { Router } from '@angular/router';\n import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n import { saveAs } from 'file-saver';\n import { from, Observable, of } from 'rxjs';\n-import { concatMap, finalize, last, switchMap } from 'rxjs/operators';\n+import { catchError, concatMap, finalize, last, switchMap } from 'rxjs/operators';\n import { FeedbackQuestionsService } from '../../services/feedback-questions.service';\n import { FeedbackSessionsService } from '../../services/feedback-sessions.service';\n import { InstructorService } from '../../services/instructor.service';\n import { NavigationService } from '../../services/navigation.service';\n import { StatusMessageService } from '../../services/status-message.service';\n import { TableComparatorService } from '../../services/table-comparator.service';\n import {\n-    FeedbackQuestion,\n-    FeedbackQuestions,\n-    FeedbackSession,\n-    FeedbackSessionStats,\n-    InstructorPrivilege,\n+  FeedbackQuestion,\n+  FeedbackQuestions,\n+  FeedbackSession,\n+  FeedbackSessionStats,\n+  InstructorPrivilege,\n } from '../../types/api-output';\n import { Intent } from '../../types/api-request';\n import { DEFAULT_NUMBER_OF_RETRY_ATTEMPTS } from '../../types/default-retry-attempts';\n import { SortBy, SortOrder } from '../../types/sort-properties';\n+import { CopySessionModalResult } from '../components/copy-session-modal/copy-session-modal-model';\n import { ErrorReportComponent } from '../components/error-report/error-report.component';\n-import {\n-    CopySessionResult,\n-    SessionsTableRowModel,\n-} from '../components/sessions-table/sessions-table-model';\n+import { CopySessionResult, SessionsTableRowModel } from '../components/sessions-table/sessions-table-model';\n import { ErrorMessageOutput } from '../error-message-output';\n \n /**\n  * The base page for session related page.\n  */\n export abstract class InstructorSessionBasePageComponent {\n \n+  protected failedToCopySessions: Record<string, string> = {}; // Map of failed session copy to error message", "originalCommit": "c9d6eb8e04833ffe1bb161e2ddb05fada50b14d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d693ba838f8d6743cf830b61d80c59c0f1b2dae", "url": "https://github.com/TEAMMATES/teammates/commit/6d693ba838f8d6743cf830b61d80c59c0f1b2dae", "message": "Merge branch 'master' into 10544-copy-sessions", "committedDate": "2020-10-11T02:10:39Z", "type": "commit"}]}