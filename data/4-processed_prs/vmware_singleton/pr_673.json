{"pr_number": 673, "pr_title": "Fix for issues 661, 662, 664 and 686", "pr_createdAt": "2020-07-15T23:29:06Z", "pr_url": "https://github.com/vmware/singleton/pull/673", "timeline": [{"oid": "06b60bbeead5438944a301ac10507610654f5d71", "url": "https://github.com/vmware/singleton/commit/06b60bbeead5438944a301ac10507610654f5d71", "message": "code clean up", "committedDate": "2020-05-12T23:55:53Z", "type": "commit"}, {"oid": "51b4dfa4d673a96f003757fe2b2692576bdfd92c", "url": "https://github.com/vmware/singleton/commit/51b4dfa4d673a96f003757fe2b2692576bdfd92c", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-05-13T00:09:46Z", "type": "commit"}, {"oid": "778a7a1ef4cdc9251c8e1db2501e1fe8f9440223", "url": "https://github.com/vmware/singleton/commit/778a7a1ef4cdc9251c8e1db2501e1fe8f9440223", "message": "Commenting out a test", "committedDate": "2020-05-13T02:35:06Z", "type": "commit"}, {"oid": "077f19b3a3ecf74662b7df27a2062d376b64d9a7", "url": "https://github.com/vmware/singleton/commit/077f19b3a3ecf74662b7df27a2062d376b64d9a7", "message": "code clean up", "committedDate": "2020-05-13T02:49:13Z", "type": "commit"}, {"oid": "9424346a07fa645376b7711cdd936573804b3192", "url": "https://github.com/vmware/singleton/commit/9424346a07fa645376b7711cdd936573804b3192", "message": "code clean up", "committedDate": "2020-05-13T18:23:03Z", "type": "commit"}, {"oid": "c25a676dd876b503b1b7738ab22edf262e836458", "url": "https://github.com/vmware/singleton/commit/c25a676dd876b503b1b7738ab22edf262e836458", "message": "Error logging when fetch failed", "committedDate": "2020-05-13T18:57:59Z", "type": "commit"}, {"oid": "db641b9ea0816671a56600c1651632a5f62b7cef", "url": "https://github.com/vmware/singleton/commit/db641b9ea0816671a56600c1651632a5f62b7cef", "message": "bug fix", "committedDate": "2020-05-13T23:31:12Z", "type": "commit"}, {"oid": "5cd06d60a04a85e57a1fe4f5aeb9d8537d2e2ed7", "url": "https://github.com/vmware/singleton/commit/5cd06d60a04a85e57a1fe4f5aeb9d8537d2e2ed7", "message": "code clean up", "committedDate": "2020-05-14T18:53:40Z", "type": "commit"}, {"oid": "6915f11ed80e515e7d24777a8c1f21cb4eb02e24", "url": "https://github.com/vmware/singleton/commit/6915f11ed80e515e7d24777a8c1f21cb4eb02e24", "message": "Updating sample application", "committedDate": "2020-05-15T02:53:42Z", "type": "commit"}, {"oid": "a64be3f7aae480fcf13d943b8e703c4deb58ffac", "url": "https://github.com/vmware/singleton/commit/a64be3f7aae480fcf13d943b8e703c4deb58ffac", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-05-17T18:54:06Z", "type": "commit"}, {"oid": "71281946f39629abfa181ab13536b4510c087184", "url": "https://github.com/vmware/singleton/commit/71281946f39629abfa181ab13536b4510c087184", "message": "fixing failing smoke test", "committedDate": "2020-05-19T03:05:45Z", "type": "commit"}, {"oid": "c4a388c17543e5197481497cdbc38c92da291ae6", "url": "https://github.com/vmware/singleton/commit/c4a388c17543e5197481497cdbc38c92da291ae6", "message": "Merge branch 'g11n-java-client' of https://github.com/jessiejuachon/singleton into g11n-java-client", "committedDate": "2020-05-19T03:06:24Z", "type": "commit"}, {"oid": "5ecea939edab6ca083db4fafaddd9b721632dad8", "url": "https://github.com/vmware/singleton/commit/5ecea939edab6ca083db4fafaddd9b721632dad8", "message": "code clean up", "committedDate": "2020-05-19T04:20:20Z", "type": "commit"}, {"oid": "4c5b0a12142b092519391c128f31f69d1fdc5c7c", "url": "https://github.com/vmware/singleton/commit/4c5b0a12142b092519391c128f31f69d1fdc5c7c", "message": "fixing code scan", "committedDate": "2020-05-19T05:05:43Z", "type": "commit"}, {"oid": "067d19d4bbd130bd36fd43d9c686fe8e1f22ef33", "url": "https://github.com/vmware/singleton/commit/067d19d4bbd130bd36fd43d9c686fe8e1f22ef33", "message": "Fixing code scan", "committedDate": "2020-05-19T05:31:41Z", "type": "commit"}, {"oid": "711ce808a4225af2d0e0330711b46442841c9af4", "url": "https://github.com/vmware/singleton/commit/711ce808a4225af2d0e0330711b46442841c9af4", "message": "Adding prodMode configuration", "committedDate": "2020-05-19T22:32:44Z", "type": "commit"}, {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4", "url": "https://github.com/vmware/singleton/commit/b7dabdba91d395294a9c4ee497cde547b1c1b5a4", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-05-19T22:36:01Z", "type": "commit"}, {"oid": "d8543ecc66657e97b222be404632503193a37b91", "url": "https://github.com/vmware/singleton/commit/d8543ecc66657e97b222be404632503193a37b91", "message": "code clean up", "committedDate": "2020-05-20T23:27:19Z", "type": "commit"}, {"oid": "e8094f40d6ea7c7e196d310238080f228a050e36", "url": "https://github.com/vmware/singleton/commit/e8094f40d6ea7c7e196d310238080f228a050e36", "message": "Setting default prodMode to true", "committedDate": "2020-05-21T04:26:40Z", "type": "commit"}, {"oid": "9a5ef77f77349a48b15851181fc41146b2128878", "url": "https://github.com/vmware/singleton/commit/9a5ef77f77349a48b15851181fc41146b2128878", "message": "Removing prodMode configuration and logic. Throwing exception if source key not found. Returning default locale message if locale not supported.", "committedDate": "2020-06-17T01:14:24Z", "type": "commit"}, {"oid": "5011c382379eef35d44c9c6c7f2b2ac9be18f10c", "url": "https://github.com/vmware/singleton/commit/5011c382379eef35d44c9c6c7f2b2ac9be18f10c", "message": "Updating javadoc", "committedDate": "2020-06-17T02:45:16Z", "type": "commit"}, {"oid": "33432b1673cbc2956cd91f2e5a9186e1d0c8bc58", "url": "https://github.com/vmware/singleton/commit/33432b1673cbc2956cd91f2e5a9186e1d0c8bc58", "message": "Fixing bug: Fallback shall apply to both TranslationMessage.getMessage and TranslationMessage.getMessages", "committedDate": "2020-06-17T06:38:14Z", "type": "commit"}, {"oid": "c9d3cae952a2a5d2957b6c9b008dc4dd0ea53ba4", "url": "https://github.com/vmware/singleton/commit/c9d3cae952a2a5d2957b6c9b008dc4dd0ea53ba4", "message": "Adding test for Translateion.getMessages, locale not supported", "committedDate": "2020-06-17T06:51:06Z", "type": "commit"}, {"oid": "adb40eca02003a216df29187d4688206dfed5268", "url": "https://github.com/vmware/singleton/commit/adb40eca02003a216df29187d4688206dfed5268", "message": "code comments", "committedDate": "2020-06-17T07:02:50Z", "type": "commit"}, {"oid": "7ab5c59fb1c97e8b2a826f669b4ca096f34632ca", "url": "https://github.com/vmware/singleton/commit/7ab5c59fb1c97e8b2a826f669b4ca096f34632ca", "message": "code clean up", "committedDate": "2020-06-19T08:28:28Z", "type": "commit"}, {"oid": "3c100893aa6e53535cf703ecfd6bef8f03f12009", "url": "https://github.com/vmware/singleton/commit/3c100893aa6e53535cf703ecfd6bef8f03f12009", "message": "Fix issue: https://github.com/vmware/singleton/issues/622", "committedDate": "2020-06-19T09:48:51Z", "type": "commit"}, {"oid": "76105b7fc941321e7522e429b330b02aab6fb4f9", "url": "https://github.com/vmware/singleton/commit/76105b7fc941321e7522e429b330b02aab6fb4f9", "message": "code clean up", "committedDate": "2020-06-29T20:05:15Z", "type": "commit"}, {"oid": "49c564894f62214104a7d62aa6fe65a33f6c450e", "url": "https://github.com/vmware/singleton/commit/49c564894f62214104a7d62aa6fe65a33f6c450e", "message": "code clean up", "committedDate": "2020-06-29T20:20:06Z", "type": "commit"}, {"oid": "d543e99fa6589c8dff25446f23b381e14bdc293e", "url": "https://github.com/vmware/singleton/commit/d543e99fa6589c8dff25446f23b381e14bdc293e", "message": "code clean up", "committedDate": "2020-06-29T20:26:41Z", "type": "commit"}, {"oid": "3ecf958b199a67032fcc42cec63f5cff8813732f", "url": "https://github.com/vmware/singleton/commit/3ecf958b199a67032fcc42cec63f5cff8813732f", "message": "code clean up", "committedDate": "2020-06-29T20:28:09Z", "type": "commit"}, {"oid": "e6a07a1ce6589b8768f30097bee0c90761cfffc2", "url": "https://github.com/vmware/singleton/commit/e6a07a1ce6589b8768f30097bee0c90761cfffc2", "message": "code clean up", "committedDate": "2020-06-29T20:30:38Z", "type": "commit"}, {"oid": "89ff0889154a93f9069124033acc18e5f1179e48", "url": "https://github.com/vmware/singleton/commit/89ff0889154a93f9069124033acc18e5f1179e48", "message": "code clean up", "committedDate": "2020-06-29T20:31:46Z", "type": "commit"}, {"oid": "f1356abf4b930f054da32a7722f9e4d0d3ff1cb1", "url": "https://github.com/vmware/singleton/commit/f1356abf4b930f054da32a7722f9e4d0d3ff1cb1", "message": "code clean up", "committedDate": "2020-06-29T20:32:47Z", "type": "commit"}, {"oid": "c63bc2d3318e40775f0d10e888226f73a8055180", "url": "https://github.com/vmware/singleton/commit/c63bc2d3318e40775f0d10e888226f73a8055180", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-07-15T23:19:28Z", "type": "commit"}, {"oid": "beab1483a10b248c243fe2c3c6dc63107d8204f2", "url": "https://github.com/vmware/singleton/commit/beab1483a10b248c243fe2c3c6dc63107d8204f2", "message": "Fix for https://github.com/vmware/singleton/issues/661", "committedDate": "2020-07-15T23:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3Njg0NQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r455476845", "bodyText": "Don't need to pass msgSourceQueueIter because the invoked methods can get it from config.", "author": "Xiaochao8", "createdAt": "2020-07-16T02:45:29Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -44,23 +51,39 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n \n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        Map<String, String> locales = this.getLanguages(VIPCfg.getInstance().getMsgOriginsQueue().iterator());", "originalCommit": "beab1483a10b248c243fe2c3c6dc63107d8204f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExODIyMg==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456118222", "bodyText": "The iterator needs to be a parameter so that it can be used in the recursive method call (which I forgot to include -- I have just added it now)", "author": "jessiejuachon", "createdAt": "2020-07-16T22:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3Njg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3NzEyNg==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r455477126", "bodyText": "If the map is empty, still need to get from the next iter in the queue.", "author": "Xiaochao8", "createdAt": "2020-07-16T02:46:38Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -44,23 +51,39 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n \n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        Map<String, String> locales = this.getLanguages(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        List<String> components = this.getComponents(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        if (locales != null) {\n+            for (String languageTag : locales.keySet()) {\n+                for (Object component : components) {\n+                    dto.setComponent(((String) component).trim());\n+                    dto.setLocale(LocaleUtility.fmtToMappedLocale(Locale.forLanguageTag(languageTag)).toString().trim());\n+                    Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n+                    if (retMap != null) {\n+                        list.add(retMap);\n+                    }\n                 }\n             }\n         }\n         return list;\n     }\n+\n+    private Map<String, String> getLanguages(Iterator<DataSourceEnum> msgSourceQueueIter) {\n+        if (!msgSourceQueueIter.hasNext())\n+            return null;\n+\n+        DataSourceEnum dataSource = msgSourceQueueIter.next();\n+        LocaleOpt opt = dataSource.createLocaleOpt();\n+        return opt.getLanguages(LocaleUtility.getDefaultLocale().toLanguageTag());", "originalCommit": "beab1483a10b248c243fe2c3c6dc63107d8204f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExODU5OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456118599", "bodyText": "Fixed.", "author": "jessiejuachon", "createdAt": "2020-07-16T22:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3NzEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3NzI0MA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r455477240", "bodyText": "If the return value is empty, still need to get from the next iter in the queue.", "author": "Xiaochao8", "createdAt": "2020-07-16T02:47:00Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -44,23 +51,39 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n \n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        Map<String, String> locales = this.getLanguages(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        List<String> components = this.getComponents(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        if (locales != null) {\n+            for (String languageTag : locales.keySet()) {\n+                for (Object component : components) {\n+                    dto.setComponent(((String) component).trim());\n+                    dto.setLocale(LocaleUtility.fmtToMappedLocale(Locale.forLanguageTag(languageTag)).toString().trim());\n+                    Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n+                    if (retMap != null) {\n+                        list.add(retMap);\n+                    }\n                 }\n             }\n         }\n         return list;\n     }\n+\n+    private Map<String, String> getLanguages(Iterator<DataSourceEnum> msgSourceQueueIter) {\n+        if (!msgSourceQueueIter.hasNext())\n+            return null;\n+\n+        DataSourceEnum dataSource = msgSourceQueueIter.next();\n+        LocaleOpt opt = dataSource.createLocaleOpt();\n+        return opt.getLanguages(LocaleUtility.getDefaultLocale().toLanguageTag());\n+    }\n+\n+    private List<String> getComponents (Iterator<DataSourceEnum> msgSourceQueueIter) {\n+        if (!msgSourceQueueIter.hasNext())\n+            return null;\n+\n+        DataSourceEnum dataSource = msgSourceQueueIter.next();\n+        ComponentOpt opt = dataSource.createComponentOpt(dto);\n+        return opt.getComponents();", "originalCommit": "beab1483a10b248c243fe2c3c6dc63107d8204f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjExODY0OA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456118648", "bodyText": "Fixed.", "author": "jessiejuachon", "createdAt": "2020-07-16T22:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3NzI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3OTExNQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r455479115", "bodyText": "It seems all the folder under the root are added rather the components belong to the product and version. Please check.", "author": "Xiaochao8", "createdAt": "2020-07-16T02:54:35Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalComponentOpt.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.*;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.ComponentOpt;\n+import com.vmware.vipclient.i18n.messages.dto.BaseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalComponentOpt implements ComponentOpt {\n+    private Logger logger = LoggerFactory.getLogger(LocalComponentOpt.class);\n+    private BaseDTO dto;\n+    public LocalComponentOpt(BaseDTO dto) {\n+        this.dto = dto;\n+    }\n+\n+    @Override\n+    public List<String> getComponents() {\n+        List<String> components = new LinkedList<String>();\n+        try {\n+\n+            Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n+\n+            URI uri = Thread.currentThread().getContextClassLoader().\n+                    getResource(path.toString()).toURI();\n+\n+            if (uri.getScheme().equals(\"jar\")) {\n+                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                    path = fileSystem.getPath(path.toString());\n+                    getComponents(path, components);\n+                }\n+            } else {\n+                path = Paths.get(uri);\n+                getComponents(path, components);\n+            }\n+\n+        } catch (Exception e) {\n+            logger.debug(e.getMessage());\n+        }\n+        return components;\n+    }\n+\n+    private void getComponents(Path path, List<String> components) throws IOException {\n+        try (Stream<Path> listOfFiles = Files.walk(path).filter(p -> !Files.isRegularFile(p))) {", "originalCommit": "beab1483a10b248c243fe2c3c6dc63107d8204f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMzI1OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456033259", "bodyText": "There is no \"product\" or \"version\" in offline mode. Directly under the offlineResourcesBaseUrl are the component folders.\nIt was incorrectly including the offlineResourcesBaseUrl in the result. I have just fixed that. I have also added tests.", "author": "jessiejuachon", "createdAt": "2020-07-16T19:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ3OTExNQ=="}], "type": "inlineReview"}, {"oid": "2cd77135f8bf23ee5c002cb61b62c5233f7e8700", "url": "https://github.com/vmware/singleton/commit/2cd77135f8bf23ee5c002cb61b62c5233f7e8700", "message": "adding license header", "committedDate": "2020-07-16T16:53:06Z", "type": "commit"}, {"oid": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "url": "https://github.com/vmware/singleton/commit/e13b694a1a12048760e0a8dd3980ddb585c71a9a", "message": "changes after code review", "committedDate": "2020-07-16T22:43:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTE1OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r457131159", "bodyText": "What's the reason for setting these properties again?", "author": "huihuiw01", "createdAt": "2020-07-20T07:30:35Z", "path": "src/test/java/com/vmware/vip/i18n/TranslationMessageTest.java", "diffHunk": "@@ -261,6 +256,23 @@ public void testGetAllComponentTranslation() {\n         Assert.assertTrue(list.size() > 0);\n     }\n \n+    @Test\n+    public void testGetAllComponentTranslationMixedMode() {\n+        String offlineResourcesBaseUrlOrig = vipCfg.getOfflineResourcesBaseUrl();\n+        vipCfg.setOfflineResourcesBaseUrl(\"offlineBundles/\");\n+        List<DataSourceEnum> msgOriginsQueueOrig = vipCfg.getMsgOriginsQueue();\n+        vipCfg.setMsgOriginsQueue(new LinkedList<DataSourceEnum>(Arrays.asList(DataSourceEnum.VIP, DataSourceEnum.Bundle)));\n+        String vipServerOrig = vipCfg.getVipServer();\n+        vipCfg.setVipServer(\"http://1.1.1.1:80\");\n+\n+        List<Map> list = new ProductService(dto).getAllComponentTranslation();\n+        Assert.assertTrue(list.size() > 0);\n+\n+        vipCfg.setOfflineResourcesBaseUrl(offlineResourcesBaseUrlOrig);\n+        vipCfg.setMsgOriginsQueue(msgOriginsQueueOrig);\n+        vipCfg.setVipServer(vipServerOrig);", "originalCommit": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4NjYwNA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r457486604", "bodyText": "@huihuiw01 , for the next tests. Tests share the same configurations, unless modified inside the test.", "author": "jessiejuachon", "createdAt": "2020-07-20T15:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3MzE2MA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456173160", "bodyText": "Internally, client use English.\nLike in CLDR, all the characters are English.\nSo don't need to provide locale as a parameter. Just get English locale names  from bundles.", "author": "Xiaochao8", "createdAt": "2020-07-17T01:48:54Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -44,23 +56,63 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n \n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        Map<String, String> locales = this.getLanguages(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        List<String> components = this.getComponents(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        if (locales != null) {\n+            for (String languageTag : locales.keySet()) {\n+                for (Object component : components) {\n+                    dto.setComponent(((String) component).trim());\n+                    dto.setLocale(LocaleUtility.fmtToMappedLocale(Locale.forLanguageTag(languageTag)).toString().trim());\n+                    dto.setProductID(VIPCfg.getInstance().getProductName());\n+                    dto.setVersion(VIPCfg.getInstance().getVersion());\n+                    Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n+                    if (retMap != null) {\n+                        list.add(retMap);\n+                    }\n                 }\n             }\n         }\n         return list;\n     }\n+\n+    private Map<String, String> getLanguages(Iterator<DataSourceEnum> msgSourceQueueIter) {\n+        if (!msgSourceQueueIter.hasNext())\n+            return null;\n+\n+        DataSourceEnum dataSource = msgSourceQueueIter.next();\n+        LocaleOpt opt = dataSource.createLocaleOpt();\n+        Map<String, String> languages =  opt.getLanguages(LocaleUtility.getDefaultLocale().toLanguageTag());", "originalCommit": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NDEzOA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r457544138", "bodyText": "@Xiaochao8 , what do you mean by \"get English locale names from bundles\"? We do not even have the English display name inside the bundle.\nI use Java's Locale.forLanguageTag to get the display name in case of offline mode: Locale inLocale = Locale.forLanguageTag(displayLanguage); \nAs much as possible, I do not want to hardcode English (or any language) anywhere in the client library. Anyway, only the language tags (keys) are used for now. The display names (values) are not used, but can potentially be used later if the result has to be displayed to the user.", "author": "jessiejuachon", "createdAt": "2020-07-20T16:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3MzE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwMDc5Ng==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r458600796", "bodyText": "We get supported locales from bundle file names trimmed prefix 'messages_' and suffix '.json'. This has nothing to do with display language. It's pure English and must be consistent with bundle file names.\nThese locale names are used to query translation.", "author": "Xiaochao8", "createdAt": "2020-07-22T07:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3MzE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MzQ5NQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r459543495", "bodyText": "I think you may be confused between locale's \"name\" (display name) and locale's \"language tag\".\nIn a bundle named messages_en.json, the suffix 'en' is the \"language tag\", not the \"display name\". The display name would be \"English\" if the display language is \"en\". If the display language is \"es\", the display name would be \"Ingles\".\nSo where in the bundle file can we get the word \"English\"/ \"Ingles\" ?\nWhat is \"pure English\" that you are talking about? The bundle file name only has language tags, not display names. The language tag \"en\" can be displayed in many languages as \"English\", \"Ingles\", \"Anglais\", etc. which all refer to the same \"en\" language.\nLocale names are not used to query translation. Language tags are used to query translation. However, locale names (display names) can be used later on if in the future, the list of supported locales has to be displayed to the user.", "author": "jessiejuachon", "createdAt": "2020-07-23T15:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3MzE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0ODExMg==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r459548112", "bodyText": "To further explain \"display names\" to you, here is part of the getSupportedLocales response from the service with display language = es.\n\"languages\": [\n{\n\"languageTag\": \"en\",\n\"displayName\": \"ingl\u00e9s\",\n\"displayName_sentenceBeginning\": \"Ingl\u00e9s\",\n\"displayName_uiListOrMenu\": \"Ingl\u00e9s\",\n\"displayName_standalone\": \"Ingl\u00e9s\"\n},\n{\n\"languageTag\": \"de\",\n\"displayName\": \"alem\u00e1n\",\n\"displayName_sentenceBeginning\": \"Alem\u00e1n\",\n\"displayName_uiListOrMenu\": \"Alem\u00e1n\",\n\"displayName_standalone\": \"Alem\u00e1n\"\n},\n{\n\"languageTag\": \"zh-Hans\",\n\"displayName\": \"chino simplificado\",\n\"displayName_sentenceBeginning\": \"Chino simplificado\",\n\"displayName_uiListOrMenu\": \"Chino simplificado\",\n\"displayName_standalone\": \"Chino simplificado\"\n},\n{\n\"languageTag\": \"ja\",\n\"displayName\": \"japon\u00e9s\",\n\"displayName_sentenceBeginning\": \"Japon\u00e9s\",\n\"displayName_uiListOrMenu\": \"Japon\u00e9s\",\n\"displayName_standalone\": \"Japon\u00e9s\"\n},\n{\n\"languageTag\": \"zh-Hant\",\n\"displayName\": \"chino tradicional\",\n\"displayName_sentenceBeginning\": \"Chino tradicional\",\n\"displayName_uiListOrMenu\": \"Chino tradicional\",\n\"displayName_standalone\": \"Chino tradicional\"\n},\n{\n\"languageTag\": \"es\",\n\"displayName\": \"espa\u00f1ol\",\n\"displayName_sentenceBeginning\": \"Espa\u00f1ol\",\n\"displayName_uiListOrMenu\": \"Espa\u00f1ol\",\n\"displayName_standalone\": \"Espa\u00f1ol\"\n},\n{\n\"languageTag\": \"ko\",\n\"displayName\": \"coreano\",\n\"displayName_sentenceBeginning\": \"Coreano\",\n\"displayName_uiListOrMenu\": \"Coreano\",\n\"displayName_standalone\": \"Coreano\"\n},\n{\n\"languageTag\": \"fr\",\n\"displayName\": \"franc\u00e9s\",\n\"displayName_sentenceBeginning\": \"Franc\u00e9s\",\n\"displayName_uiListOrMenu\": \"Franc\u00e9s\",\n\"displayName_standalone\": \"Franc\u00e9s\"\n},\n{\n\"languageTag\": \"fr-CA\",\n\"displayName\": \"franc\u00e9s canadiense\",\n\"displayName_sentenceBeginning\": \"Franc\u00e9s canadiense\",\n\"displayName_uiListOrMenu\": \"Franc\u00e9s canadiense\",\n\"displayName_standalone\": \"Franc\u00e9s canadiense\"\n}\n],\nIn a similar fashion, the offline mode code also gives a \"display name\", only it is simplified by what we get using Locale inLocale = Locale.forLanguageTag(displayLanguage)", "author": "jessiejuachon", "createdAt": "2020-07-23T15:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3MzE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDAyNg==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r459880026", "bodyText": "I think you are totally lost. In this interface, the only needed is the locale names from bundle file names. That's what I said: bundle file names trim prefix 'messages_' and suffix '.json'. This has nothing to do with display language.  Don't mix different things together to make things become complex. Forget display language here.", "author": "Xiaochao8", "createdAt": "2020-07-24T06:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3MzE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTgyMA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r460231820", "bodyText": "Oh, I am not lost at all. :)\nI think you do not get my point. I KNOW that we are not using display names here. I said it up there in my comment.\nThe point is that we can USE THE SAME METHOD that L2 uses to get the list of supported locales. That method requires display language, yes -- which is no problem because we can use the fallback locale as display language too. Then ignore the display names. Do you get it now? No need to write new code. Avoid redundant like the redundant endpoints mentioned above in the service API.\nAnyway, this part of the code is outdated, it will also be updated once Huihui merge her PR.", "author": "jessiejuachon", "createdAt": "2020-07-24T18:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3MzE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NjQwOA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456186408", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     try (Stream<Path> listOfFiles = Files.walk(path).filter(\n          \n          \n            \n                             p -> !Files.isRegularFile(p) && !p.equals(path))) {\n          \n          \n            \n                         listOfFiles.map(dir -> dir.getFileName().toString()).forEach(s->components.add(s));\n          \n          \n            \n                    try (Stream<Path> listOfFiles = Files.list(path).filter(p -> !p.toFile().isFile())) {\n          \n          \n            \n                        listOfFiles.forEach(s -> components.add(s.getFileName().toString()));\n          \n          \n            \n                    }", "author": "Xiaochao8", "createdAt": "2020-07-17T02:40:08Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalComponentOpt.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.*;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.ComponentOpt;\n+import com.vmware.vipclient.i18n.messages.dto.BaseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalComponentOpt implements ComponentOpt {\n+    private Logger logger = LoggerFactory.getLogger(LocalComponentOpt.class);\n+    private BaseDTO dto;\n+    public LocalComponentOpt(BaseDTO dto) {\n+        this.dto = dto;\n+    }\n+\n+    @Override\n+    public List<String> getComponents() {\n+        List<String> components = new LinkedList<String>();\n+        try {\n+\n+            Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n+\n+            URI uri = Thread.currentThread().getContextClassLoader().\n+                    getResource(path.toString()).toURI();\n+\n+            if (uri.getScheme().equals(\"jar\")) {\n+                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                    path = fileSystem.getPath(path.toString());\n+                    getComponents(path, components);\n+                }\n+            } else {\n+                path = Paths.get(uri);\n+                getComponents(path, components);\n+            }\n+\n+        } catch (Exception e) {\n+            logger.debug(e.getMessage());\n+        }\n+        return components;\n+    }\n+\n+    private void getComponents(Path path, List<String> components) throws IOException {\n+         try (Stream<Path> listOfFiles = Files.walk(path).filter(\n+                 p -> !Files.isRegularFile(p) && !p.equals(path))) {\n+             listOfFiles.map(dir -> dir.getFileName().toString()).forEach(s->components.add(s));", "originalCommit": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NzY3Nw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456377677", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!msgSourceQueueIter.hasNext())\n          \n          \n            \n                        return null;\n          \n          \n            \n            \n          \n          \n            \n                    DataSourceEnum dataSource = msgSourceQueueIter.next();\n          \n          \n            \n                    LocaleOpt opt = dataSource.createLocaleOpt();\n          \n          \n            \n                    Map<String, String> languages =  opt.getLanguages(LocaleUtility.getDefaultLocale().toLanguageTag());\n          \n          \n            \n                    // If failed to get languages from the data source\n          \n          \n            \n                    if (languages == null) {\n          \n          \n            \n                        // Try the next dataSource in the queue\n          \n          \n            \n                        if (msgSourceQueueIter.hasNext()) {\n          \n          \n            \n                            languages = getLanguages(msgSourceQueueIter);\n          \n          \n            \n                            // If no more data source in queue, log the error. This means that neither online nor offline fetch succeeded.\n          \n          \n            \n                        } else {\n          \n          \n            \n                            logger.error(FormatUtils.format(ConstantsMsg.GET_LANGUAGES_FAILED, dataSource.toString()));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return languages;\n          \n          \n            \n                    if (!msgSourceQueueIter.hasNext()) {\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    DataSourceEnum dataSource = msgSourceQueueIter.next();\n          \n          \n            \n                    LocaleOpt opt = dataSource.createLocaleOpt();\n          \n          \n            \n                    Map<String, String> languages =  opt.getLanguages(LocaleUtility.getDefaultLocale().toLanguageTag());\n          \n          \n            \n                    // If failed to get languages from the data source\n          \n          \n            \n                    if (languages == null) {                \n          \n          \n            \n                    logger.error(FormatUtils.format(ConstantsMsg.GET_LANGUAGES_FAILED, dataSource.toString()));\n          \n          \n            \n                languages = getLanguages(msgSourceQueueIter);\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                        return languages;", "author": "Xiaochao8", "createdAt": "2020-07-17T11:11:40Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -44,23 +56,63 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n \n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        Map<String, String> locales = this.getLanguages(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        List<String> components = this.getComponents(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        if (locales != null) {\n+            for (String languageTag : locales.keySet()) {\n+                for (Object component : components) {\n+                    dto.setComponent(((String) component).trim());\n+                    dto.setLocale(LocaleUtility.fmtToMappedLocale(Locale.forLanguageTag(languageTag)).toString().trim());\n+                    dto.setProductID(VIPCfg.getInstance().getProductName());\n+                    dto.setVersion(VIPCfg.getInstance().getVersion());\n+                    Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n+                    if (retMap != null) {\n+                        list.add(retMap);\n+                    }\n                 }\n             }\n         }\n         return list;\n     }\n+\n+    private Map<String, String> getLanguages(Iterator<DataSourceEnum> msgSourceQueueIter) {\n+        if (!msgSourceQueueIter.hasNext())\n+            return null;\n+\n+        DataSourceEnum dataSource = msgSourceQueueIter.next();\n+        LocaleOpt opt = dataSource.createLocaleOpt();\n+        Map<String, String> languages =  opt.getLanguages(LocaleUtility.getDefaultLocale().toLanguageTag());\n+        // If failed to get languages from the data source\n+        if (languages == null) {\n+            // Try the next dataSource in the queue\n+            if (msgSourceQueueIter.hasNext()) {\n+                languages = getLanguages(msgSourceQueueIter);\n+                // If no more data source in queue, log the error. This means that neither online nor offline fetch succeeded.\n+            } else {\n+                logger.error(FormatUtils.format(ConstantsMsg.GET_LANGUAGES_FAILED, dataSource.toString()));\n+            }\n+        }\n+        return languages;", "originalCommit": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3NzI4OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r456477289", "bodyText": "Now client supports multiple configurations, VIPCfg.getInstance() gets only one product. It isn't correct.", "author": "Xiaochao8", "createdAt": "2020-07-17T14:27:22Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -44,23 +56,63 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n \n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        Map<String, String> locales = this.getLanguages(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        List<String> components = this.getComponents(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        if (locales != null) {\n+            for (String languageTag : locales.keySet()) {\n+                for (Object component : components) {\n+                    dto.setComponent(((String) component).trim());\n+                    dto.setLocale(LocaleUtility.fmtToMappedLocale(Locale.forLanguageTag(languageTag)).toString().trim());\n+                    dto.setProductID(VIPCfg.getInstance().getProductName());\n+                    dto.setVersion(VIPCfg.getInstance().getVersion());", "originalCommit": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NzA3NA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r457667074", "bodyText": "Fixed.", "author": "jessiejuachon", "createdAt": "2020-07-20T20:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ3NzI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxOTM3OA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r457219378", "bodyText": "Need to add an interface to get supported locales. supported locales have nothing to do with displayLanguage. They are from names of bundle files.", "author": "Xiaochao8", "createdAt": "2020-07-20T09:30:17Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/DataSourceEnum.java", "diffHunk": "@@ -34,7 +43,13 @@ public MessageOpt createMessageOpt(MessagesDTO dto) {\n \t\tpublic LocaleOpt createLocaleOpt() {\n \t\t\treturn new RemoteLocaleOpt();\n \t\t}\n+\n+        @Override\n+        public ComponentOpt createComponentOpt(BaseDTO dto) {\n+            return new RemoteComponentOpt(dto);\n+        }\n     };\n     public abstract MessageOpt createMessageOpt(MessagesDTO dto);\n     public abstract LocaleOpt createLocaleOpt();\n+    public abstract ComponentOpt createComponentOpt(BaseDTO dto);", "originalCommit": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MzgyNw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r457653827", "bodyText": "Why do you say \"supported locales have nothing to do with displayLanguage\"? A locale is composed of language tag and display name. The display name can be translated in multiple languages, and that is the use of \"display language\". The client is not using the display name here, but it can potentially be used later on if the result needs to be displayed. The default language can be used in the request, and the display names can be ignored for now.\nFor offline mode, the client library uses Java's Locale.forLanguageTag to get the display name: Locale.forLanguageTag(displayLanguage). See LocalLocaleOpt.getSupportedLocales.\nOn the service side, we do not need 2 separate endpoints:\n\nGET /i18n/api/v2/translation/products/{productName}/versions/{version}/localelist\nGET /i18n/api/v2/locale/supportedLanguageList\nEndpoint 1 returns the language tags.\nEndpoint 2 returns language tags AND display names. It uses the \"locale\" in the path, which is a language tag to determine the \"display language\".\nWe do not need endpoint 1. It is redundant.", "author": "jessiejuachon", "createdAt": "2020-07-20T19:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxOTM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1MTU0OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r459551549", "bodyText": "@Xiaochao8 , may I close this now, or do you not agree?\nWe do not need to 2 separate interfaces (one with and one without the display language parameter). Keep the parameter, we can always pass the configured default language as the display language. That way, the display language won't be hardcoded. It is also okay that the display name is not used in here.\nThat is why we have the default language configured in the config file.  I do not want to see anything hardcoded\nto English (or any other language) in the code.", "author": "jessiejuachon", "createdAt": "2020-07-23T15:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxOTM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MDc5MQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r459880791", "bodyText": "In level 3, we only need the names from bundle file names. Please forget display names. It's unnecessary.", "author": "Xiaochao8", "createdAt": "2020-07-24T06:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxOTM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzNjk4MA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r460236980", "bodyText": "I think you do not get my point. I KNOW that we are not using display names here. I said it up there in my comment : \"The client is not using the display name here, but it can potentially be used later on if the result needs to be displayed.\"\nThe point is that we can USE THE SAME METHOD that L2 uses to get the list of supported locales. That method requires display language, yes -- which is no problem here because we can use the fallback locale as display language as well. Then just ignore the display names. Do you get it now? No need to write new code. Avoid redundant code like the redundant endpoints mentioned above in the service API.", "author": "jessiejuachon", "createdAt": "2020-07-24T19:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxOTM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI2MTg1Nw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r460261857", "bodyText": "Since you do not want to see a parameter in the method, I have created a parameterless LocaleService.getSupportedLanguages.", "author": "jessiejuachon", "createdAt": "2020-07-24T20:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxOTM3OA=="}], "type": "inlineReview"}, {"oid": "f1f70b37b1a34a89d9550dd1fc270d2c63d9ad79", "url": "https://github.com/vmware/singleton/commit/f1f70b37b1a34a89d9550dd1fc270d2c63d9ad79", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalComponentOpt.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-07-20T16:49:34Z", "type": "commit"}, {"oid": "fe535dc2d54452de5ff4b9278eee82c517d296eb", "url": "https://github.com/vmware/singleton/commit/fe535dc2d54452de5ff4b9278eee82c517d296eb", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-07-20T16:57:53Z", "type": "commit"}, {"oid": "0d22b9ff0cee55c40c0e264da3e8d57b959aedf3", "url": "https://github.com/vmware/singleton/commit/0d22b9ff0cee55c40c0e264da3e8d57b959aedf3", "message": "changes after code review", "committedDate": "2020-07-20T17:04:33Z", "type": "commit"}, {"oid": "48707824a91ca35fd409f77bc866da11257100dc", "url": "https://github.com/vmware/singleton/commit/48707824a91ca35fd409f77bc866da11257100dc", "message": "changes after code review", "committedDate": "2020-07-20T20:26:01Z", "type": "commit"}, {"oid": "f451436e3ba3b202fff3c53eab23f9bb82b57eeb", "url": "https://github.com/vmware/singleton/commit/f451436e3ba3b202fff3c53eab23f9bb82b57eeb", "message": "fix for issues: 664, 662, 686", "committedDate": "2020-07-22T22:39:34Z", "type": "commit"}, {"oid": "89d7b0d9e8e8f90037bf46d09ef705ad7cb9389c", "url": "https://github.com/vmware/singleton/commit/89d7b0d9e8e8f90037bf46d09ef705ad7cb9389c", "message": "code clean up", "committedDate": "2020-07-23T21:22:32Z", "type": "commit"}, {"oid": "ec6e6932a4b8770af6030f604dcc32f2b1a619c3", "url": "https://github.com/vmware/singleton/commit/ec6e6932a4b8770af6030f604dcc32f2b1a619c3", "message": "code clean up", "committedDate": "2020-07-24T01:12:24Z", "type": "commit"}, {"oid": "65f1d08c41daa07b08508b98274d86b49f3dc766", "url": "https://github.com/vmware/singleton/commit/65f1d08c41daa07b08508b98274d86b49f3dc766", "message": "Adding LocaleDTO", "committedDate": "2020-07-24T01:16:46Z", "type": "commit"}, {"oid": "60fb3b3e00b77c5f4147709e93fa798f7c0f8961", "url": "https://github.com/vmware/singleton/commit/60fb3b3e00b77c5f4147709e93fa798f7c0f8961", "message": "code clean up", "committedDate": "2020-07-24T19:51:46Z", "type": "commit"}, {"oid": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "url": "https://github.com/vmware/singleton/commit/a698f202047d29cd793d87cd5718b4cb691ed2ec", "message": "code clean up", "committedDate": "2020-07-24T19:55:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MjY0MA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461382640", "bodyText": "As an interface, users don't need to know msgSourceQueueIter.", "author": "Xiaochao8", "createdAt": "2020-07-28T07:43:34Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -42,25 +55,56 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n         return dao.getSupportedLocalesFromRemoteVIP();\n     }\n \n+    /**\n+     * Retrieves translated messages of all components of a product in the requested locale (See the dto object).\n+     *\n+     * @return translated messages of all components of a product locale specified in the dto object\n+     */\n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        LocaleDTO localeDTO = new LocaleDTO(dto.getProductID(), dto.getVersion());\n+        Map<String, String> locales = new LocaleService(localeDTO).getSupportedLanguages();\n+        List<String> components = this.getComponents(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        if (locales != null) {\n+            for (String languageTag : locales.keySet()) {\n+                for (Object component : components) {\n+                    MessagesDTO msgDTO = new MessagesDTO(((String) component).trim(), LocaleUtility.fmtToMappedLocale(Locale.forLanguageTag(languageTag)).toString().trim(),\n+                            dto.getProductID(), dto.getVersion());\n+                    Iterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+                    Map<String, String> retMap = new ComponentService(msgDTO).getMessages(fallbackLocalesIter).getCachedData();\n+                    if (retMap != null) {\n+                        list.add(retMap);\n+                    }\n                 }\n             }\n         }\n         return list;\n     }\n+\n+    /**\n+     * Retrieves the list of components of a product. It recursively applies data source fallback mechanism in case of failure.\n+     *\n+     * @param msgSourceQueueIter Iterator of DataSourceEnum sources\n+     * @return list of components of the product specified in the dto object\n+     */\n+    public List<String> getComponents (Iterator<DataSourceEnum> msgSourceQueueIter) {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3ODAyNA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461878024", "bodyText": "ProductService is service layer. This should not be exposed to users! Only *Message.java should contain user-exposed APIs", "author": "jessiejuachon", "createdAt": "2020-07-28T21:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDAxOQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461970019", "bodyText": "Different layers have their own interfaces even client internally. Here, message layer is the user of service layer.", "author": "Xiaochao8", "createdAt": "2020-07-29T00:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NzU3Mg==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463297572", "bodyText": "Ahh, I get what you are saying. Your use of the word \"user\" confused me.", "author": "jessiejuachon", "createdAt": "2020-07-30T22:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MjY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MzQ4Mg==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461383482", "bodyText": "This interface should belong to productService. Does a locale support any languages?", "author": "Xiaochao8", "createdAt": "2020-07-28T07:45:02Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -4,28 +4,115 @@\n  */\n package com.vmware.vipclient.i18n.messages.service;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.ListIterator;\n-import java.util.Map;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import java.util.*;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.FutureTask;\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.common.ConstantsMsg;\n import com.vmware.vipclient.i18n.messages.api.opt.server.RemoteLocaleOpt;\n+import com.vmware.vipclient.i18n.messages.dto.LocaleDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class LocaleService {\n-\n-    Logger                      logger        = LoggerFactory.getLogger(LocaleService.class.getName());\n+    Logger logger = LoggerFactory.getLogger(LocaleService.class.getName());\n     private static final String REGION_PREFIX = \"region_\";\n     public static final String DISPN_PREFIX  = \"dispn_\";\n+    private LocaleDTO dto;\n \n     public LocaleService() {\n+\n+    }\n+    public LocaleService(LocaleDTO dto) {\n+        this.dto = dto;\n+    }\n+\n+    public Map<String, String> getSupportedLanguages() {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3MjIyNQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461872225", "bodyText": "Yes, I actually put the exact same code as suggestion in Huihui's PR, so the transfer to \"ProductService\" should be taken care of there.", "author": "jessiejuachon", "createdAt": "2020-07-28T20:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MzQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NTA1NQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461385055", "bodyText": "This interface should belong to productService. Does a locale support any languages?", "author": "Xiaochao8", "createdAt": "2020-07-28T07:47:50Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -4,28 +4,115 @@\n  */\n package com.vmware.vipclient.i18n.messages.service;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.ListIterator;\n-import java.util.Map;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import java.util.*;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.FutureTask;\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.common.ConstantsMsg;\n import com.vmware.vipclient.i18n.messages.api.opt.server.RemoteLocaleOpt;\n+import com.vmware.vipclient.i18n.messages.dto.LocaleDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class LocaleService {\n-\n-    Logger                      logger        = LoggerFactory.getLogger(LocaleService.class.getName());\n+    Logger logger = LoggerFactory.getLogger(LocaleService.class.getName());\n     private static final String REGION_PREFIX = \"region_\";\n     public static final String DISPN_PREFIX  = \"dispn_\";\n+    private LocaleDTO dto;\n \n     public LocaleService() {\n+\n+    }\n+    public LocaleService(LocaleDTO dto) {\n+        this.dto = dto;\n+    }\n+\n+    public Map<String, String> getSupportedLanguages() {\n+        return getSupportedLanguages(null, LocaleUtility.getFallbackLocales().iterator());\n+    }\n+\n+    public Map<String, String> getSupportedLanguages(Iterator<Locale> fallbackLocalesIter) {\n+        return getSupportedLanguages(null, fallbackLocalesIter);", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3Mjk1NA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461872954", "bodyText": "AS I said above,  I actually put the exact same code as suggestion in Huihui's PR, so the transfer to \"ProductService\" should be taken care of there.\nUsers won't directly use this method because this is Service layer so fallbackLocalesIter belong here.", "author": "jessiejuachon", "createdAt": "2020-07-28T20:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NTA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NTMwNA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461385304", "bodyText": "This interface should belong to productService. Does a locale support any languages?\nAlso, fallbackLoclesIter should be remove from parameters.\nUsers don't need to know fallbackLoclesIter, please handle it in the method.", "author": "Xiaochao8", "createdAt": "2020-07-28T07:48:18Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -4,28 +4,115 @@\n  */\n package com.vmware.vipclient.i18n.messages.service;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.ListIterator;\n-import java.util.Map;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import java.util.*;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.FutureTask;\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.common.ConstantsMsg;\n import com.vmware.vipclient.i18n.messages.api.opt.server.RemoteLocaleOpt;\n+import com.vmware.vipclient.i18n.messages.dto.LocaleDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class LocaleService {\n-\n-    Logger                      logger        = LoggerFactory.getLogger(LocaleService.class.getName());\n+    Logger logger = LoggerFactory.getLogger(LocaleService.class.getName());\n     private static final String REGION_PREFIX = \"region_\";\n     public static final String DISPN_PREFIX  = \"dispn_\";\n+    private LocaleDTO dto;\n \n     public LocaleService() {\n+\n+    }\n+    public LocaleService(LocaleDTO dto) {\n+        this.dto = dto;\n+    }\n+\n+    public Map<String, String> getSupportedLanguages() {\n+        return getSupportedLanguages(null, LocaleUtility.getFallbackLocales().iterator());\n+    }\n+\n+    public Map<String, String> getSupportedLanguages(Iterator<Locale> fallbackLocalesIter) {\n+        return getSupportedLanguages(null, fallbackLocalesIter);\n+    }\n+\n+    public Map<String, String> getSupportedLanguages(String displayLanguageTag, Iterator<Locale> fallbackLocalesIter) {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3MzE5NA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461873194", "bodyText": "Same comment as above.", "author": "jessiejuachon", "createdAt": "2020-07-28T20:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4NTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTgwNw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461389807", "bodyText": "LocaleDTO should have a locale name as its attribute.\nShouldn't have product name and version. They are about translation.\nLocale related data include pattern data, locale data, doesn't include translation.", "author": "Xiaochao8", "createdAt": "2020-07-28T07:55:58Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/dto/LocaleDTO.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.dto;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocaleDTO extends BaseDTO {\n+    Logger logger = LoggerFactory.getLogger(LocaleDTO.class);\n+\n+    public LocaleDTO() {\n+        super.setProductID(VIPCfg.getInstance().getProductName());\n+        super.setVersion(VIPCfg.getInstance().getVersion());\n+    }\n+    public LocaleDTO(String productName, String version) {\n+        this.setProductID(productName);\n+        this.setVersion(version);\n+    }", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NDY2OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461864669", "bodyText": "You already know that I disagree that product name and version are for \"translations only\". As I had expressed in the past, I view L2 resources as just another \"type\" of localized resource used by any product version. So product version applies here too. This is the same discussion we had for service API endpoints V3.\nFor example, an offline mode product version may only support 4 locales (only a subset of CLDR data) in the jar file, while the next version may have added one more locale, so 5 locales are supported in that version.\nWe are planning to use the same jar file for both online and offline mode bundles, but the jar file may be different per product version.\nLet's park this conversation.", "author": "jessiejuachon", "createdAt": "2020-07-28T20:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTgwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MzM4MA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461883380", "bodyText": "What do you by locale name? Do you mean the language tag?\nLet's use the same terminologies:\n\nA \"Locale\" has a \"language tag\" and 1 or more \"display names\".\nA full \"language tag\" is in the following format : language-extlang-script-region-variant-extension-privateuse. The minimum is just a language (e.g.  \"en\")\n\nI agree that the language tag and a list of display names (0 or more) should be part of the LocaleDTO.", "author": "jessiejuachon", "createdAt": "2020-07-28T21:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTgwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDUyNg==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461970526", "bodyText": "Only a product has its supported locales. A locale never has any data about a product.", "author": "Xiaochao8", "createdAt": "2020-07-29T00:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTgwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NTk2OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463295969", "bodyText": "I disagree with this as I said over slack. Let's park this discussion to later.", "author": "jessiejuachon", "createdAt": "2020-07-30T22:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4OTgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MTE4Nw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461461187", "bodyText": "I see you write new method to get componet list, this method isn't exposed to user, why not remove it?", "author": "huihuiw01", "createdAt": "2020-07-28T09:52:57Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.messages.service;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.json.simple.JSONArray;\n+import java.util.*;\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.common.ConstantsMsg;\n+import com.vmware.vipclient.i18n.messages.api.opt.ComponentOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ProductBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.BaseDTO;\n+import com.vmware.vipclient.i18n.messages.dto.LocaleDTO;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n+import org.json.simple.JSONArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class ProductService {\n-    private MessagesDTO dto = null;\n+    private BaseDTO dto = null;\n+    Logger logger = LoggerFactory.getLogger(ProductService.class);\n \n-    public ProductService(MessagesDTO dto) {\n+    public ProductService(BaseDTO dto) {\n         this.dto = dto;\n     }\n \n-    // get supported components defined in vip service\n+    /**\n+     * get supported components defined in vip service\n+     * @return JSONArray\n+     * @deprecated Replaced by {@link #getComponents(Iterator<>)}\n+     */\n+    @Deprecated", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NzQ4OA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461877488", "bodyText": "I'll do it in the next PR, or you can actually remove it in your PR.", "author": "jessiejuachon", "createdAt": "2020-07-28T21:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NzgwMA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463297800", "bodyText": "I'll do it in this PR", "author": "jessiejuachon", "createdAt": "2020-07-30T22:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MTE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjA5OA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461462098", "bodyText": "This method isn't exposed to user, why not remove it?", "author": "huihuiw01", "createdAt": "2020-07-28T09:54:34Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -33,7 +42,11 @@ public JSONArray getComponentsFromRemoteVIP() {\n         return dao.getComponentsFromRemoteVIP();\n     }\n \n-    // get supported locales defined in vip service\n+    /**\n+     * get supported locales defined in vip service\n+     * @deprecated Replaced by {@link com.vmware.vipclient.i18n.messages.service.LocaleService#getSupportedLanguages(Iterator<>)}\n+     */\n+    @Deprecated\n     public JSONArray getSupportedLocalesFromRemoteVIP() {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NzU3Ng==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461877576", "bodyText": "I'll do it in the next PR, or you can actually remove it in your PR.", "author": "jessiejuachon", "createdAt": "2020-07-28T21:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5ODA4Mw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463298083", "bodyText": "I'll do it in this PR", "author": "jessiejuachon", "createdAt": "2020-07-30T22:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2MjA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3MDcxMQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461470711", "bodyText": "Refer to the comments xiaochao added to my PR, the fallback logic should move to a new method, thus one method is for getting exact translation(without fallback),  another is for getting translation with fallback.", "author": "huihuiw01", "createdAt": "2020-07-28T10:10:15Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -43,57 +43,65 @@ private void fetchMessages(final MessageCacheItem cacheItem, Iterator<DataSource\n     \t\treturn;\n     \t\n     \tlong timestampOld = cacheItem.getTimestamp();\n-    \tDataSourceEnum dataSource = (DataSourceEnum) msgSourceQueueIter.next();\n+    \tDataSourceEnum dataSource = msgSourceQueueIter.next();\n     \tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-    \tlong timestampNew = cacheItem.getTimestamp();\n+    \tlong timestamp = cacheItem.getTimestamp();\n+    \tif (timestampOld == timestamp) {\n+    \t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+    \t}\n     \t\n-    \t// If failed to get messages from the data source\n-    \tif (timestampNew == timestampOld) {\n+    \t// Skip this block if timestamp is not 0 (which means cacheItem is in the cache) regardless if cacheItem is expired or not.\n+    \t// Otherwise, try the next dataSource in the queue.\n+    \tif (timestamp == 0) {\n     \t\t// Try the next dataSource in the queue\n     \t\tif (msgSourceQueueIter.hasNext()) {\n     \t\t\tfetchMessages(cacheItem, msgSourceQueueIter);\n     \t\t// If no more data source in queue, log the error. This means that neither online nor offline fetch succeeded.\n     \t\t} else {\n-    \t\t\tlogger.error(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+    \t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED_ALL, dto.getComponent(), dto.getLocale()));\n     \t\t}\n     \t}\n     }\n     \n     /**\n      * Get messages from cache\n      */\n-    public MessageCacheItem getMessages() {\n+    public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tCacheService cacheService = new CacheService(dto);\n-    \tMap<String, String> cacheOfComponent = null;\n     \tMessageCacheItem cacheItem = null;\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n-    \t\tcacheOfComponent = cacheItem.getCachedData();\n     \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n     \t\t\t// Update the cache in a separate thread\n-    \t\t\tpopulateCacheTask(cacheItem); \t\t\n+    \t\t\tpopulateCacheTask(cacheItem);\n     \t\t}\n     \t} else { // Item is not in cache\n     \t\t// Create a new cacheItem object to be stored in cache\n-    \t\tcacheItem = new MessageCacheItem();  \n+    \t\tcacheItem = new MessageCacheItem();\n     \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n-    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tlong timestamp = cacheItem.getTimestamp();\n     \t\t\n-    \t\tif (cacheOfComponent != null && !cacheOfComponent.isEmpty()) {\n-    \t\t\tcacheService.addCacheOfComponent(cacheItem);\n-    \t\t}\n-    \t} \n+    \t\tif(!dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+    \t\t\t// If failed to fetch message, use MessageCacheItem of the next fallback locale.\n+    \t\t\tif (timestamp == 0 && fallbackLocalesIter.hasNext()) {\n+    \t\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\n+    \t\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\n+    \t\t\t}\n+\t\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n+\t\t\t\t}\n+\t\t\t}", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NjkwMA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461866900", "bodyText": "I agree. Let's merge this PR and your PR first then I'd make the change in my next PR (so we finish this sooner)", "author": "jessiejuachon", "createdAt": "2020-07-28T20:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3MDcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5Njk0Nw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463296947", "bodyText": "Okay will do this now in this PR", "author": "jessiejuachon", "createdAt": "2020-07-30T22:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3MDcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4NzUzOQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461487539", "bodyText": "I see you re-implement getComponents in new classes RemoteComponentOpt and LocalComponentOpt, why not re-implement in this class directly, since this method is not exposed to user, you can change it freely; and in Singleton service side, componentlist API is put under product.\nIn my PR\uff0cI put it this method in ProductOpt, so we need reach agreement about this, or there will be duplicate/conflict code.", "author": "huihuiw01", "createdAt": "2020-07-28T10:43:47Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ProductBasedOpt.java", "diffHunk": "@@ -6,29 +6,30 @@\n \n import java.util.Map;\n \n-import org.json.simple.JSONArray;\n-\n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.messages.api.opt.BaseOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n import com.vmware.vipclient.i18n.messages.api.url.V2URL;\n import com.vmware.vipclient.i18n.messages.dto.BaseDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n+import org.json.simple.JSONArray;\n \n+@Deprecated\n public class ProductBasedOpt extends BaseOpt implements Opt {\n     private BaseDTO dto = null;\n \n     public ProductBasedOpt(BaseDTO dto) {\n         this.dto = dto;\n     }\n \n-    /*\n+    /**\n      * get supported components from vip(non-Javadoc)\n      * \n      * @see com.vmware.vipclient.i18n.messages.dao.IComponentDao#getComponents()\n+     * @Deprecated Replaced by {@link com.vmware.vipclient.i18n.messages.api.opt.server.RemoteComponentOpt#getComponents()}\n      */\n-    public JSONArray getComponentsFromRemoteVIP() {\n+    @Deprecated public JSONArray getComponentsFromRemoteVIP() {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2Mjc2Ng==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461862766", "bodyText": "I saw ProductOpt in your PR and I am okay with it. I did not change the code here because you already have the code (and more) in your PR.  I would like to merge this PR first to g11n-java-client branch, so I do not repeat your code. Then could you take care of changing this when you merge your PR?", "author": "jessiejuachon", "createdAt": "2020-07-28T20:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4NzUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzA5OQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461493099", "bodyText": "on Singleton service side, componentlist API is put under product, so is it better rename the class name as 'ProductOpt'?", "author": "huihuiw01", "createdAt": "2020-07-28T10:54:57Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/ComponentOpt.java", "diffHunk": "@@ -0,0 +1,11 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt;\n+\n+import java.util.List;\n+\n+public interface ComponentOpt {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2MDExNA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r461860114", "bodyText": "Yes, you already have ProductOpt in your PR so did not bother to change here. Let's approve this PR then please merge it in your PR so that we can move forward?", "author": "jessiejuachon", "createdAt": "2020-07-28T20:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzMjQzOA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r462032438", "bodyText": "Please don't fallback locale. Don't change the behavior of an existing interface", "author": "Xiaochao8", "createdAt": "2020-07-29T04:35:07Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -303,7 +275,8 @@ public boolean postString(final Locale locale, final String component,\n             dto.setVersion(this.cfg.getVersion());\n         }\n         ComponentService cs = new ComponentService(dto);\n-        return cs.getMessages().getCachedData();\n+        Iterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+        return cs.getMessages(fallbackLocalesIter).getCachedData();", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NjY4Ng==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463296686", "bodyText": "Okay, I understood from Huihui's comment!\nNext time, please be more specific with the comment. When you said \"don't fallback locale\", it means to me that there should be no fallback behavior at all, which is incorrect. However, what you actually want (based on Huihui's comment)  is to move the fallback logic to another method.", "author": "jessiejuachon", "createdAt": "2020-07-30T22:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzMjQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1NTI0Nw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463355247", "bodyText": "You understand me correctly. There is no need to do locale fallback anywhere because there is no locale fallback at the beginning.", "author": "Xiaochao8", "createdAt": "2020-07-31T01:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzMjQzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzODkwOQ==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r462038909", "bodyText": "Move this into the below if block because it's only used there.", "author": "Xiaochao8", "createdAt": "2020-07-29T04:59:40Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -43,57 +43,65 @@ private void fetchMessages(final MessageCacheItem cacheItem, Iterator<DataSource\n     \t\treturn;\n     \t\n     \tlong timestampOld = cacheItem.getTimestamp();\n-    \tDataSourceEnum dataSource = (DataSourceEnum) msgSourceQueueIter.next();\n+    \tDataSourceEnum dataSource = msgSourceQueueIter.next();\n     \tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-    \tlong timestampNew = cacheItem.getTimestamp();\n+    \tlong timestamp = cacheItem.getTimestamp();\n+    \tif (timestampOld == timestamp) {\n+    \t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+    \t}\n     \t\n-    \t// If failed to get messages from the data source\n-    \tif (timestampNew == timestampOld) {\n+    \t// Skip this block if timestamp is not 0 (which means cacheItem is in the cache) regardless if cacheItem is expired or not.\n+    \t// Otherwise, try the next dataSource in the queue.\n+    \tif (timestamp == 0) {\n     \t\t// Try the next dataSource in the queue\n     \t\tif (msgSourceQueueIter.hasNext()) {\n     \t\t\tfetchMessages(cacheItem, msgSourceQueueIter);\n     \t\t// If no more data source in queue, log the error. This means that neither online nor offline fetch succeeded.\n     \t\t} else {\n-    \t\t\tlogger.error(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+    \t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED_ALL, dto.getComponent(), dto.getLocale()));\n     \t\t}\n     \t}\n     }\n     \n     /**\n      * Get messages from cache\n      */\n-    public MessageCacheItem getMessages() {\n+    public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tCacheService cacheService = new CacheService(dto);\n-    \tMap<String, String> cacheOfComponent = null;\n     \tMessageCacheItem cacheItem = null;\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n-    \t\tcacheOfComponent = cacheItem.getCachedData();\n     \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n     \t\t\t// Update the cache in a separate thread\n-    \t\t\tpopulateCacheTask(cacheItem); \t\t\n+    \t\t\tpopulateCacheTask(cacheItem);\n     \t\t}\n     \t} else { // Item is not in cache\n     \t\t// Create a new cacheItem object to be stored in cache\n-    \t\tcacheItem = new MessageCacheItem();  \n+    \t\tcacheItem = new MessageCacheItem();\n     \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n-    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tlong timestamp = cacheItem.getTimestamp();", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwMjUyNA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r463302524", "bodyText": "Okay", "author": "jessiejuachon", "createdAt": "2020-07-30T22:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzODkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzOTM4NA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r462039384", "bodyText": "If cacheItem.getCachedData().isEmpty() is false, should it return directly?", "author": "Xiaochao8", "createdAt": "2020-07-29T05:01:22Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -43,57 +43,65 @@ private void fetchMessages(final MessageCacheItem cacheItem, Iterator<DataSource\n     \t\treturn;\n     \t\n     \tlong timestampOld = cacheItem.getTimestamp();\n-    \tDataSourceEnum dataSource = (DataSourceEnum) msgSourceQueueIter.next();\n+    \tDataSourceEnum dataSource = msgSourceQueueIter.next();\n     \tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-    \tlong timestampNew = cacheItem.getTimestamp();\n+    \tlong timestamp = cacheItem.getTimestamp();\n+    \tif (timestampOld == timestamp) {\n+    \t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+    \t}\n     \t\n-    \t// If failed to get messages from the data source\n-    \tif (timestampNew == timestampOld) {\n+    \t// Skip this block if timestamp is not 0 (which means cacheItem is in the cache) regardless if cacheItem is expired or not.\n+    \t// Otherwise, try the next dataSource in the queue.\n+    \tif (timestamp == 0) {\n     \t\t// Try the next dataSource in the queue\n     \t\tif (msgSourceQueueIter.hasNext()) {\n     \t\t\tfetchMessages(cacheItem, msgSourceQueueIter);\n     \t\t// If no more data source in queue, log the error. This means that neither online nor offline fetch succeeded.\n     \t\t} else {\n-    \t\t\tlogger.error(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+    \t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED_ALL, dto.getComponent(), dto.getLocale()));\n     \t\t}\n     \t}\n     }\n     \n     /**\n      * Get messages from cache\n      */\n-    public MessageCacheItem getMessages() {\n+    public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tCacheService cacheService = new CacheService(dto);\n-    \tMap<String, String> cacheOfComponent = null;\n     \tMessageCacheItem cacheItem = null;\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n-    \t\tcacheOfComponent = cacheItem.getCachedData();\n     \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n     \t\t\t// Update the cache in a separate thread\n-    \t\t\tpopulateCacheTask(cacheItem); \t\t\n+    \t\t\tpopulateCacheTask(cacheItem);\n     \t\t}\n     \t} else { // Item is not in cache\n     \t\t// Create a new cacheItem object to be stored in cache\n-    \t\tcacheItem = new MessageCacheItem();  \n+    \t\tcacheItem = new MessageCacheItem();\n     \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n-    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tlong timestamp = cacheItem.getTimestamp();\n     \t\t\n-    \t\tif (cacheOfComponent != null && !cacheOfComponent.isEmpty()) {\n-    \t\t\tcacheService.addCacheOfComponent(cacheItem);\n-    \t\t}\n-    \t} \n+    \t\tif(!dto.getLocale().equals(ConstantsKeys.SOURCE)) {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MDM3Nw==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r462040377", "bodyText": "It's unnecessary to do local fallback here because the locales used here are supported no doubt.", "author": "Xiaochao8", "createdAt": "2020-07-29T05:05:09Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -42,25 +55,56 @@ public JSONArray getSupportedLocalesFromRemoteVIP() {\n         return dao.getSupportedLocalesFromRemoteVIP();\n     }\n \n+    /**\n+     * Retrieves translated messages of all components of a product in the requested locale (See the dto object).\n+     *\n+     * @return translated messages of all components of a product locale specified in the dto object\n+     */\n     public List<Map> getAllComponentTranslation() {\n         List<Map> list = new ArrayList<Map>();\n-        Object[] locales = {};\n-        Object[] components = {};\n-        if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            locales = this.getSupportedLocalesFromRemoteVIP().toArray();\n-            components = this.getComponentsFromRemoteVIP()\n-                    .toArray();\n-        }\n-        for (Object locale : locales) {\n-            for (Object component : components) {\n-                dto.setComponent(((String) component).trim());\n-                dto.setLocale(LocaleUtility.fmtToMappedLocale((String) locale).toString().trim());\n-                Map<String, String> retMap = new ComponentService(dto).getMessages().getCachedData();\n-                if (retMap != null) {\n-                    list.add(retMap);\n+        LocaleDTO localeDTO = new LocaleDTO(dto.getProductID(), dto.getVersion());\n+        Map<String, String> locales = new LocaleService(localeDTO).getSupportedLanguages();\n+        List<String> components = this.getComponents(VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+        if (locales != null) {\n+            for (String languageTag : locales.keySet()) {\n+                for (Object component : components) {\n+                    MessagesDTO msgDTO = new MessagesDTO(((String) component).trim(), LocaleUtility.fmtToMappedLocale(Locale.forLanguageTag(languageTag)).toString().trim(),\n+                            dto.getProductID(), dto.getVersion());\n+                    Iterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+                    Map<String, String> retMap = new ComponentService(msgDTO).getMessages(fallbackLocalesIter).getCachedData();", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0MTcwOA==", "url": "https://github.com/vmware/singleton/pull/673#discussion_r462041708", "bodyText": "Please don't do locale fallback in this method because this will change behavior of existing interface.", "author": "Xiaochao8", "createdAt": "2020-07-29T05:10:01Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -33,27 +33,10 @@\n     @SuppressWarnings(\"unchecked\")\n     @Deprecated\n     public String getString(MessagesDTO dto) {", "originalCommit": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eede3b59f72dcf1733a243545f9b3ed189f0911e", "url": "https://github.com/vmware/singleton/commit/eede3b59f72dcf1733a243545f9b3ed189f0911e", "message": "changes after code review", "committedDate": "2020-07-31T02:33:48Z", "type": "commit"}, {"oid": "f4c12147f958c5014b8e47959cf216a9db1d380d", "url": "https://github.com/vmware/singleton/commit/f4c12147f958c5014b8e47959cf216a9db1d380d", "message": "Loading configuration from the JSON configuration file", "committedDate": "2020-03-11T00:00:20Z", "type": "commit"}, {"oid": "1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "url": "https://github.com/vmware/singleton/commit/1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "message": "Removing code that is not yet ready to be used from the sample application", "committedDate": "2020-03-11T00:54:17Z", "type": "commit"}, {"oid": "5e72b73b497563607e5031d5afa322caffd03fca", "url": "https://github.com/vmware/singleton/commit/5e72b73b497563607e5031d5afa322caffd03fca", "message": "fixing failing code scan\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68NFL24bPpi-pS5s&open=AXDG68NFL24bPpi-pS5s\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68IGL24bPpi-pS2r&open=AXDG68IGL24bPpi-pS2r\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-03-11T22:01:24Z", "type": "commit"}, {"oid": "73d85ca7fca1290a93558fd937afd18dc27e92d6", "url": "https://github.com/vmware/singleton/commit/73d85ca7fca1290a93558fd937afd18dc27e92d6", "message": "Adding a cache properties map to hold cache details such as etag and cache control", "committedDate": "2020-03-12T07:58:55Z", "type": "commit"}, {"oid": "2a381070ef1e057fda0b08ca5d65323482273a86", "url": "https://github.com/vmware/singleton/commit/2a381070ef1e057fda0b08ca5d65323482273a86", "message": "Removing white space\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-03-12T08:09:09Z", "type": "commit"}, {"oid": "c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "url": "https://github.com/vmware/singleton/commit/c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "message": "Fixing failing unit test", "committedDate": "2020-03-12T09:09:08Z", "type": "commit"}, {"oid": "056891a79856058bf9af28c44110f588e61eeefc", "url": "https://github.com/vmware/singleton/commit/056891a79856058bf9af28c44110f588e61eeefc", "message": "Parse headers, response code, response message from an HTTP response and return them upstream.", "committedDate": "2020-03-12T22:59:17Z", "type": "commit"}, {"oid": "a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "url": "https://github.com/vmware/singleton/commit/a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "message": "Storing response headers in Map of cache properties", "committedDate": "2020-03-17T19:30:18Z", "type": "commit"}, {"oid": "17978bd621bc7ee7de27205534568fee986b1d0b", "url": "https://github.com/vmware/singleton/commit/17978bd621bc7ee7de27205534568fee986b1d0b", "message": "Fixing failing unit test due to NullPointerException when doing Map.putAll(null)", "committedDate": "2020-03-17T22:50:12Z", "type": "commit"}, {"oid": "6c691708a3b9b0a891622a7a96d3d979ff3cb807", "url": "https://github.com/vmware/singleton/commit/6c691708a3b9b0a891622a7a96d3d979ff3cb807", "message": "Changes after code review.", "committedDate": "2020-03-17T23:41:27Z", "type": "commit"}, {"oid": "41a8aa1c4afd56cc1042939892a22dbca64adc1d", "url": "https://github.com/vmware/singleton/commit/41a8aa1c4afd56cc1042939892a22dbca64adc1d", "message": "Removing exception handling for now", "committedDate": "2020-03-18T22:09:37Z", "type": "commit"}, {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85", "url": "https://github.com/vmware/singleton/commit/dd2455d5e68187dd4061b9c71ccd2799480d3d85", "message": "Deprecating VIPCfg.initialize; cleaning up code", "committedDate": "2020-03-19T16:43:36Z", "type": "commit"}, {"oid": "e26d372496ced19785a48b187e3bcdb1c1442ba1", "url": "https://github.com/vmware/singleton/commit/e26d372496ced19785a48b187e3bcdb1c1442ba1", "message": "Storing the http response code in the cache", "committedDate": "2020-03-20T15:45:46Z", "type": "commit"}, {"oid": "01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "url": "https://github.com/vmware/singleton/commit/01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "message": "Using cached etag as if-none-match request header value in the request in order to get a 304 NOT MODIFIED http response", "committedDate": "2020-03-25T20:11:07Z", "type": "commit"}, {"oid": "750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "url": "https://github.com/vmware/singleton/commit/750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "message": "Handling 404 response from Singleton service", "committedDate": "2020-03-26T04:04:49Z", "type": "commit"}, {"oid": "529e5cc756460c5314a09a015caad7f4d26482d9", "url": "https://github.com/vmware/singleton/commit/529e5cc756460c5314a09a015caad7f4d26482d9", "message": "Using HTTP repsonse's Cache-Control max-age and timestamp to dertermine if component locale's cache has expired", "committedDate": "2020-03-26T23:38:04Z", "type": "commit"}, {"oid": "b40fcf9dc23a01cc336b67e7eddea16d85be9817", "url": "https://github.com/vmware/singleton/commit/b40fcf9dc23a01cc336b67e7eddea16d85be9817", "message": "Moving constants to URLUtils", "committedDate": "2020-03-26T23:49:56Z", "type": "commit"}, {"oid": "fa123f9a1bee0d349ab6c36384288c99e865fb99", "url": "https://github.com/vmware/singleton/commit/fa123f9a1bee0d349ab6c36384288c99e865fb99", "message": "Fixing failing test", "committedDate": "2020-03-27T00:07:11Z", "type": "commit"}, {"oid": "30b2054bc21a61ecdcecbb74f5a97b7af714682f", "url": "https://github.com/vmware/singleton/commit/30b2054bc21a61ecdcecbb74f5a97b7af714682f", "message": "Fixing failing code scan", "committedDate": "2020-03-27T02:47:23Z", "type": "commit"}, {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "url": "https://github.com/vmware/singleton/commit/0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-03-27T06:47:07Z", "type": "commit"}, {"oid": "ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "url": "https://github.com/vmware/singleton/commit/ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "message": "Cleaning up import in ComponentService,java", "committedDate": "2020-03-30T00:29:34Z", "type": "commit"}, {"oid": "d8450e444632e849f020704d65106fed11417b0a", "url": "https://github.com/vmware/singleton/commit/d8450e444632e849f020704d65106fed11417b0a", "message": "Cleaning up code - caching/expiry", "committedDate": "2020-03-30T03:03:20Z", "type": "commit"}, {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "url": "https://github.com/vmware/singleton/commit/d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "message": "Merge branch 'g11n-java-client' of https://github.com/jessiejuachon/singleton into g11n-java-client", "committedDate": "2020-03-30T03:04:44Z", "type": "commit"}, {"oid": "0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "url": "https://github.com/vmware/singleton/commit/0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "message": "Adding tests for new caching workflow; enabling old caching workflow using cacheExpiredTime config", "committedDate": "2020-03-31T02:51:56Z", "type": "commit"}, {"oid": "d06adb3ac3d456f897882ee1af237d29c7f03967", "url": "https://github.com/vmware/singleton/commit/d06adb3ac3d456f897882ee1af237d29c7f03967", "message": "Fixing a failing test", "committedDate": "2020-03-31T03:16:31Z", "type": "commit"}, {"oid": "48c855873e5585f19152290738e4dbf6f0180b06", "url": "https://github.com/vmware/singleton/commit/48c855873e5585f19152290738e4dbf6f0180b06", "message": "Adding mock server response", "committedDate": "2020-03-31T05:37:28Z", "type": "commit"}, {"oid": "4e45bedd128d76023c8089f9194069ea0bf30f6a", "url": "https://github.com/vmware/singleton/commit/4e45bedd128d76023c8089f9194069ea0bf30f6a", "message": "Removing unused file sampleconfig.json", "committedDate": "2020-03-31T18:55:50Z", "type": "commit"}, {"oid": "6a40dc87413ed76788fc60332b91741137d5e829", "url": "https://github.com/vmware/singleton/commit/6a40dc87413ed76788fc60332b91741137d5e829", "message": "Changes from code review", "committedDate": "2020-03-31T21:46:03Z", "type": "commit"}, {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c", "url": "https://github.com/vmware/singleton/commit/4c3c12d4549eac93be3481db3309dea80c6a9e6c", "message": "Value of VIPCfg.cacheExpiredTime is -1 when value is not set in config file. This means max age from server will be used. Setting VIPCfg.cacheExpiredTime to 0 disables caching.", "committedDate": "2020-03-31T23:34:51Z", "type": "commit"}, {"oid": "7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "url": "https://github.com/vmware/singleton/commit/7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "message": "Changing a LinkedHashMap to a HashMap because insertion order does not need to be maintained.", "committedDate": "2020-04-02T17:10:51Z", "type": "commit"}, {"oid": "baef0d06f0facd4fe2383185dc1b7979bba186a7", "url": "https://github.com/vmware/singleton/commit/baef0d06f0facd4fe2383185dc1b7979bba186a7", "message": "Adding CacheItem object to contain map of data and a another map for any other cache properties", "committedDate": "2020-04-03T05:54:04Z", "type": "commit"}, {"oid": "02a96e9a7dbec8e912f29439334792d7b51069d6", "url": "https://github.com/vmware/singleton/commit/02a96e9a7dbec8e912f29439334792d7b51069d6", "message": "Fixing failing unit test", "committedDate": "2020-04-03T05:59:48Z", "type": "commit"}, {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05", "url": "https://github.com/vmware/singleton/commit/78d88f796cb3bd3f015bb1d589717fe6897abc05", "message": "Fixing code scan issues", "committedDate": "2020-04-03T06:14:21Z", "type": "commit"}, {"oid": "655c223992bf244c4136a52c636119c9edf605fe", "url": "https://github.com/vmware/singleton/commit/655c223992bf244c4136a52c636119c9edf605fe", "message": "Code cleanup", "committedDate": "2020-04-03T08:36:12Z", "type": "commit"}, {"oid": "8746915f5015f497b6956e8f8b743806330cc51c", "url": "https://github.com/vmware/singleton/commit/8746915f5015f497b6956e8f8b743806330cc51c", "message": "Lazily instantiating cacheProps; code clean up and comments", "committedDate": "2020-04-05T17:28:09Z", "type": "commit"}, {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "url": "https://github.com/vmware/singleton/commit/897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "message": "Changes after code review", "committedDate": "2020-04-07T03:26:44Z", "type": "commit"}, {"oid": "3a4e18358f37c29502cfdeb60c44b94e63653601", "url": "https://github.com/vmware/singleton/commit/3a4e18358f37c29502cfdeb60c44b94e63653601", "message": "Adding header to CacheItem.java", "committedDate": "2020-04-07T03:36:56Z", "type": "commit"}, {"oid": "b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "url": "https://github.com/vmware/singleton/commit/b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "message": "Fixing code san issue. Synchronize on a final field", "committedDate": "2020-04-07T03:49:29Z", "type": "commit"}, {"oid": "8f57e243ed1f450349392e990b4502dd74543f91", "url": "https://github.com/vmware/singleton/commit/8f57e243ed1f450349392e990b4502dd74543f91", "message": "Fixing code scan bug", "committedDate": "2020-04-07T04:07:44Z", "type": "commit"}, {"oid": "72c8799ffbbb23dc61115375cbee52573e792ec9", "url": "https://github.com/vmware/singleton/commit/72c8799ffbbb23dc61115375cbee52573e792ec9", "message": "Changes after code review", "committedDate": "2020-04-07T17:15:34Z", "type": "commit"}, {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90", "url": "https://github.com/vmware/singleton/commit/92edfc88a64c21470fc06c37b65503a6d9042f90", "message": "Updating CasheService.isContainComponent to return false if cache key is stored but has a null value", "committedDate": "2020-04-07T19:15:13Z", "type": "commit"}, {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0", "url": "https://github.com/vmware/singleton/commit/2042554b861d0b97b04a8d29c3a051106e24d8f0", "message": "HttpRequester if-none-match header and other customized headers are added to each specific request locally.", "committedDate": "2020-04-08T04:57:56Z", "type": "commit"}, {"oid": "ae707fface7ade445bc391f9f0e4125734eeddb1", "url": "https://github.com/vmware/singleton/commit/ae707fface7ade445bc391f9f0e4125734eeddb1", "message": "Code clean up; keep old caching expiration logic", "committedDate": "2020-04-08T17:09:39Z", "type": "commit"}, {"oid": "82818d5909f1b1e2117f7599993ea50777bd982a", "url": "https://github.com/vmware/singleton/commit/82818d5909f1b1e2117f7599993ea50777bd982a", "message": "Fixing code scan bug", "committedDate": "2020-04-08T21:12:57Z", "type": "commit"}, {"oid": "31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "url": "https://github.com/vmware/singleton/commit/31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-04-08T21:50:07Z", "type": "commit"}, {"oid": "c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "url": "https://github.com/vmware/singleton/commit/c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "message": "code clean up", "committedDate": "2020-04-09T00:13:02Z", "type": "commit"}, {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26", "url": "https://github.com/vmware/singleton/commit/78dcc1cc7de1700d332c4901ec3f09e546befd26", "message": "Removing response code and response msg from cache; Passing cacheItem object to be updated down the line.", "committedDate": "2020-04-09T07:14:14Z", "type": "commit"}, {"oid": "9281c640b3b78d987e1fd865b01f16e4edbfd768", "url": "https://github.com/vmware/singleton/commit/9281c640b3b78d987e1fd865b01f16e4edbfd768", "message": "Changes after code review", "committedDate": "2020-04-10T04:03:05Z", "type": "commit"}, {"oid": "26577625b3eb13f1f9367f313dd94d47c9113749", "url": "https://github.com/vmware/singleton/commit/26577625b3eb13f1f9367f313dd94d47c9113749", "message": "Adding header to CacheItem.java file", "committedDate": "2020-04-10T04:08:23Z", "type": "commit"}, {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0", "url": "https://github.com/vmware/singleton/commit/9e80f09d4838f9de33bf9dce100744f4832630a0", "message": "Fixing failing unit test", "committedDate": "2020-04-10T04:35:16Z", "type": "commit"}, {"oid": "68467f34882da413ed852f2ed4b1394e88bf64b1", "url": "https://github.com/vmware/singleton/commit/68467f34882da413ed852f2ed4b1394e88bf64b1", "message": "Changes after code review", "committedDate": "2020-04-10T23:14:41Z", "type": "commit"}, {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006", "url": "https://github.com/vmware/singleton/commit/d67c72ee939034deb58b99d4fdf0fcc38857c006", "message": "Fixing code scan bugs", "committedDate": "2020-04-10T23:28:38Z", "type": "commit"}, {"oid": "85919738596847c3cd42fd2397226fb498cf6e28", "url": "https://github.com/vmware/singleton/commit/85919738596847c3cd42fd2397226fb498cf6e28", "message": "Not storing anything in cache if response is neither 200 nor 304", "committedDate": "2020-04-13T21:22:27Z", "type": "commit"}, {"oid": "22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "url": "https://github.com/vmware/singleton/commit/22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "message": "Loading messages from specified offline resource bundles", "committedDate": "2020-04-15T00:36:42Z", "type": "commit"}, {"oid": "ce2488b8af539a1456959b97e482435b11d5aeff", "url": "https://github.com/vmware/singleton/commit/ce2488b8af539a1456959b97e482435b11d5aeff", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-04-15T00:43:12Z", "type": "commit"}, {"oid": "109296301af054a8def120b98fd7e877acdb465f", "url": "https://github.com/vmware/singleton/commit/109296301af054a8def120b98fd7e877acdb465f", "message": "Adding header", "committedDate": "2020-04-15T00:48:03Z", "type": "commit"}, {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "url": "https://github.com/vmware/singleton/commit/35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "message": "Fixing failing unie test", "committedDate": "2020-04-15T01:14:11Z", "type": "commit"}, {"oid": "ada17f19d4e56d283ae65886b08e0d6a71031ba7", "url": "https://github.com/vmware/singleton/commit/ada17f19d4e56d283ae65886b08e0d6a71031ba7", "message": "Code changes after review; code clean up", "committedDate": "2020-04-16T17:06:32Z", "type": "commit"}, {"oid": "fc60eeffd82dc8e8214207524bda4864edd05add", "url": "https://github.com/vmware/singleton/commit/fc60eeffd82dc8e8214207524bda4864edd05add", "message": "Using java.nio.file.Paths", "committedDate": "2020-04-17T16:14:41Z", "type": "commit"}, {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b", "url": "https://github.com/vmware/singleton/commit/3e70449176a975fa30985714d2c9f03795c72d6b", "message": "Offline mode as fallback when service fetch fails", "committedDate": "2020-04-17T17:07:36Z", "type": "commit"}, {"oid": "609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "url": "https://github.com/vmware/singleton/commit/609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "message": "Resetting VIPCfg and I18nFactory instances for each test", "committedDate": "2020-04-17T17:56:53Z", "type": "commit"}, {"oid": "dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "url": "https://github.com/vmware/singleton/commit/dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "message": "Resetting VIPCfg and I18nFactory after test", "committedDate": "2020-04-17T17:59:27Z", "type": "commit"}, {"oid": "7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "url": "https://github.com/vmware/singleton/commit/7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "message": "Fixing tests", "committedDate": "2020-04-17T22:31:30Z", "type": "commit"}, {"oid": "5b92e4480ca25d122c7f98dc389d7e4884a59a25", "url": "https://github.com/vmware/singleton/commit/5b92e4480ca25d122c7f98dc389d7e4884a59a25", "message": "Limit to wiremock test logging", "committedDate": "2020-04-20T17:42:50Z", "type": "commit"}, {"oid": "dfb41b5042e733f21f5cda4428faab6e0a95e19a", "url": "https://github.com/vmware/singleton/commit/dfb41b5042e733f21f5cda4428faab6e0a95e19a", "message": "Decreasing unit test log", "committedDate": "2020-04-20T21:47:47Z", "type": "commit"}, {"oid": "21a7105c4fdc5d88d8db80340b3b00d947622cc7", "url": "https://github.com/vmware/singleton/commit/21a7105c4fdc5d88d8db80340b3b00d947622cc7", "message": "this test is timing out and trying to connect 70+ times", "committedDate": "2020-04-21T00:43:23Z", "type": "commit"}, {"oid": "84343d506461aea4976a86fa25e7bb1b06703150", "url": "https://github.com/vmware/singleton/commit/84343d506461aea4976a86fa25e7bb1b06703150", "message": "Adding comments to code", "committedDate": "2020-04-21T00:56:15Z", "type": "commit"}, {"oid": "be8e443e6de5070baf91c76e1f4001188e8be0d5", "url": "https://github.com/vmware/singleton/commit/be8e443e6de5070baf91c76e1f4001188e8be0d5", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-04-21T18:26:20Z", "type": "commit"}, {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4", "url": "https://github.com/vmware/singleton/commit/b805d3672e0b286648b612dd48d3fabe73f92fd4", "message": "Adding timestamp to cache fromn local bundle", "committedDate": "2020-04-21T19:14:03Z", "type": "commit"}, {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96", "url": "https://github.com/vmware/singleton/commit/17bc16cd019c4d40ad82df7590869f82a76b0a96", "message": "Deprecating methods in TranslationMessage; adding new method getMessage", "committedDate": "2020-04-23T04:26:42Z", "type": "commit"}, {"oid": "15da01004363a3441944149c106b79908ba4cde6", "url": "https://github.com/vmware/singleton/commit/15da01004363a3441944149c106b79908ba4cde6", "message": "Added tests for TranslationMessage.getMessage", "committedDate": "2020-04-24T08:58:03Z", "type": "commit"}, {"oid": "631de868cb3b40899ace35017268bdb65b236091", "url": "https://github.com/vmware/singleton/commit/631de868cb3b40899ace35017268bdb65b236091", "message": "Fixing test", "committedDate": "2020-04-24T09:15:35Z", "type": "commit"}, {"oid": "ffd9adb09499997921630426e9a8327bf615ee50", "url": "https://github.com/vmware/singleton/commit/ffd9adb09499997921630426e9a8327bf615ee50", "message": "Fixing test", "committedDate": "2020-04-24T09:28:59Z", "type": "commit"}, {"oid": "c00f7ae3cacc0e17ab59a776b02c3be04a106252", "url": "https://github.com/vmware/singleton/commit/c00f7ae3cacc0e17ab59a776b02c3be04a106252", "message": "Fixing test", "committedDate": "2020-04-24T20:29:27Z", "type": "commit"}, {"oid": "d0504c49a179166868cbae84874647925d88c2a3", "url": "https://github.com/vmware/singleton/commit/d0504c49a179166868cbae84874647925d88c2a3", "message": "Removing comment field because source collection is not supported anymore; cleaning up tests; adding comments for javadoc", "committedDate": "2020-04-24T22:28:00Z", "type": "commit"}, {"oid": "79b18d0035a35a23fb26fe76cae4868e848a11b8", "url": "https://github.com/vmware/singleton/commit/79b18d0035a35a23fb26fe76cae4868e848a11b8", "message": "Code clean up", "committedDate": "2020-04-24T22:44:30Z", "type": "commit"}, {"oid": "ec9f5db8cd6110c5b714bc098d54680308c63d9a", "url": "https://github.com/vmware/singleton/commit/ec9f5db8cd6110c5b714bc098d54680308c63d9a", "message": "Changes from code review", "committedDate": "2020-04-24T22:58:26Z", "type": "commit"}, {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "url": "https://github.com/vmware/singleton/commit/2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "message": "Code clean up", "committedDate": "2020-04-24T23:25:19Z", "type": "commit"}, {"oid": "4e44a8c46fd2856ca97cf71158cb9804880e3e17", "url": "https://github.com/vmware/singleton/commit/4e44a8c46fd2856ca97cf71158cb9804880e3e17", "message": "Optional SourceOpt in initialization\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-04-26T22:36:42Z", "type": "commit"}, {"oid": "de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "url": "https://github.com/vmware/singleton/commit/de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "message": "Fixing test", "committedDate": "2020-04-27T00:58:16Z", "type": "commit"}, {"oid": "406cb2a268cd5e18eee310577137c8f364bc8309", "url": "https://github.com/vmware/singleton/commit/406cb2a268cd5e18eee310577137c8f364bc8309", "message": "Adding comments to code", "committedDate": "2020-04-28T03:14:02Z", "type": "commit"}, {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "url": "https://github.com/vmware/singleton/commit/c80696ab2f0bdfcc80ba268705ed147aed423b07", "message": "Adding comment for javadoc", "committedDate": "2020-04-28T04:33:36Z", "type": "commit"}, {"oid": "79d111e4404a4f171dcdfb001228afcbad996753", "url": "https://github.com/vmware/singleton/commit/79d111e4404a4f171dcdfb001228afcbad996753", "message": "Cleaning up code", "committedDate": "2020-04-28T21:54:07Z", "type": "commit"}, {"oid": "24d8d5d7ee9e667c88187761c5332d3c9485cf26", "url": "https://github.com/vmware/singleton/commit/24d8d5d7ee9e667c88187761c5332d3c9485cf26", "message": "Code clean up", "committedDate": "2020-04-28T22:02:21Z", "type": "commit"}, {"oid": "23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "url": "https://github.com/vmware/singleton/commit/23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "message": "Fixing test", "committedDate": "2020-04-28T23:28:49Z", "type": "commit"}, {"oid": "369643f588359e1ceb430768ab473566c503da3c", "url": "https://github.com/vmware/singleton/commit/369643f588359e1ceb430768ab473566c503da3c", "message": "Removing source message fallback from this PR", "committedDate": "2020-04-29T03:17:37Z", "type": "commit"}, {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "url": "https://github.com/vmware/singleton/commit/4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-04-29T04:09:00Z", "type": "commit"}, {"oid": "636b5b4cf56f121cf871e07911dcb4d763a16c64", "url": "https://github.com/vmware/singleton/commit/636b5b4cf56f121cf871e07911dcb4d763a16c64", "message": "Default locale in config file instead of hardcoded; get supported locales for offline mode; fixing some bugs in getting supported locales", "committedDate": "2020-05-05T01:10:59Z", "type": "commit"}, {"oid": "71a87e52447b0fede8230e7f8f7e5c65ce034546", "url": "https://github.com/vmware/singleton/commit/71a87e52447b0fede8230e7f8f7e5c65ce034546", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-05-05T01:20:57Z", "type": "commit"}, {"oid": "b9a90e3e2190e8dec158f1e62e4bc2f3ccc1b21e", "url": "https://github.com/vmware/singleton/commit/b9a90e3e2190e8dec158f1e62e4bc2f3ccc1b21e", "message": "Fixing test", "committedDate": "2020-05-05T01:25:06Z", "type": "commit"}, {"oid": "060666d54ddfa7156433209ad06c959b4af649da", "url": "https://github.com/vmware/singleton/commit/060666d54ddfa7156433209ad06c959b4af649da", "message": "Fixing tests", "committedDate": "2020-05-05T01:56:26Z", "type": "commit"}, {"oid": "52e3695951a48d21de82180c140beead3924cf75", "url": "https://github.com/vmware/singleton/commit/52e3695951a48d21de82180c140beead3924cf75", "message": "Default locale to Locale.ENGLISH if not set in config file", "committedDate": "2020-05-05T03:04:12Z", "type": "commit"}, {"oid": "2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9", "url": "https://github.com/vmware/singleton/commit/2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9", "message": "Changed after code review: code clean up, bug fix", "committedDate": "2020-05-06T21:58:32Z", "type": "commit"}, {"oid": "bbe3047d43e1170f7cef6e69e51cc7d2ae7ff48e", "url": "https://github.com/vmware/singleton/commit/bbe3047d43e1170f7cef6e69e51cc7d2ae7ff48e", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-05-08T02:49:19Z", "type": "commit"}, {"oid": "fa56388fa66f56bce4c746ff4c662591246908f4", "url": "https://github.com/vmware/singleton/commit/fa56388fa66f56bce4c746ff4c662591246908f4", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-05-08T02:50:00Z", "type": "commit"}, {"oid": "08cd96d71656e546810805466962d82b4ab623ab", "url": "https://github.com/vmware/singleton/commit/08cd96d71656e546810805466962d82b4ab623ab", "message": "code clean up, error logging, bug fix", "committedDate": "2020-05-08T07:42:06Z", "type": "commit"}, {"oid": "e89ff56539cbf52e2819b70b28138356a0a6dd11", "url": "https://github.com/vmware/singleton/commit/e89ff56539cbf52e2819b70b28138356a0a6dd11", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-05-08T07:48:46Z", "type": "commit"}, {"oid": "119aebde51e1777a164c914bbd7d132d41ece371", "url": "https://github.com/vmware/singleton/commit/119aebde51e1777a164c914bbd7d132d41ece371", "message": "code clean up", "committedDate": "2020-05-08T07:52:57Z", "type": "commit"}, {"oid": "e8a937d79fb0a7b48b85ca5ac8623aa459d9c8a2", "url": "https://github.com/vmware/singleton/commit/e8a937d79fb0a7b48b85ca5ac8623aa459d9c8a2", "message": "code clean up", "committedDate": "2020-05-11T21:00:45Z", "type": "commit"}, {"oid": "9d95cd1379ac1e8cd3d30f8c085cbfc0a68d8ab2", "url": "https://github.com/vmware/singleton/commit/9d95cd1379ac1e8cd3d30f8c085cbfc0a68d8ab2", "message": "Using messages_source.json for source locale messages.", "committedDate": "2020-05-12T23:35:30Z", "type": "commit"}]}