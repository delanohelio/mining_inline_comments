{"pr_number": 800, "pr_title": "update the timezone name list data format", "pr_createdAt": "2020-09-22T07:04:51Z", "pr_url": "https://github.com/vmware/singleton/pull/800", "timeline": [{"oid": "a4dca3457d4546eb63fb57c187d5894b689f167d", "url": "https://github.com/vmware/singleton/commit/a4dca3457d4546eb63fb57c187d5894b689f167d", "message": "fixed the Config file copyright files", "committedDate": "2020-08-31T07:15:05Z", "type": "commit"}, {"oid": "5d2b5e93e84ba71a26f265ffb651da03d6669d4b", "url": "https://github.com/vmware/singleton/commit/5d2b5e93e84ba71a26f265ffb651da03d6669d4b", "message": "fixed the Config file copyright files", "committedDate": "2020-08-31T08:42:43Z", "type": "commit"}, {"oid": "35a52bbaccc6abc1078279a23320c7e3fc553d61", "url": "https://github.com/vmware/singleton/commit/35a52bbaccc6abc1078279a23320c7e3fc553d61", "message": "fixed the Config file copyright files", "committedDate": "2020-08-31T08:47:37Z", "type": "commit"}, {"oid": "f86a41e2bc16238da4bcce01fd993d112a9d640a", "url": "https://github.com/vmware/singleton/commit/f86a41e2bc16238da4bcce01fd993d112a9d640a", "message": "fixed the timezone name data bug", "committedDate": "2020-09-10T06:13:51Z", "type": "commit"}, {"oid": "6d134b7fe444bcb47e0e2233784afbe469db71d8", "url": "https://github.com/vmware/singleton/commit/6d134b7fe444bcb47e0e2233784afbe469db71d8", "message": "Merge branch 'master' into master", "committedDate": "2020-09-10T06:19:18Z", "type": "commit"}, {"oid": "c7f8f81752b09757362d28fd95295c1d758da62d", "url": "https://github.com/vmware/singleton/commit/c7f8f81752b09757362d28fd95295c1d758da62d", "message": "Merge branch 'master' into master", "committedDate": "2020-09-14T09:16:35Z", "type": "commit"}, {"oid": "79e5bed73ba34c7309b3b0765f606ad0e4607213", "url": "https://github.com/vmware/singleton/commit/79e5bed73ba34c7309b3b0765f606ad0e4607213", "message": "Merge branch 'master' into master", "committedDate": "2020-09-15T00:01:53Z", "type": "commit"}, {"oid": "e606f065c5c83516776c6b1ec008e6c62536f683", "url": "https://github.com/vmware/singleton/commit/e606f065c5c83516776c6b1ec008e6c62536f683", "message": "change the timezone name format", "committedDate": "2020-09-15T03:11:11Z", "type": "commit"}, {"oid": "13dc86c8f218c3b6568d206072327f4d1e367aeb", "url": "https://github.com/vmware/singleton/commit/13dc86c8f218c3b6568d206072327f4d1e367aeb", "message": "change the timezone name format", "committedDate": "2020-09-15T04:11:58Z", "type": "commit"}, {"oid": "d44349bd8d1afb53d0f7200930d7e4772d891e52", "url": "https://github.com/vmware/singleton/commit/d44349bd8d1afb53d0f7200930d7e4772d891e52", "message": "Merge branch 'master' into master", "committedDate": "2020-09-15T05:06:10Z", "type": "commit"}, {"oid": "09e359a9388fe491a957bc116b411b850c60ba12", "url": "https://github.com/vmware/singleton/commit/09e359a9388fe491a957bc116b411b850c60ba12", "message": "change the timezone name format", "committedDate": "2020-09-15T05:23:08Z", "type": "commit"}, {"oid": "d10d71d9ce9e8581f96a6820f2b67f1b895c37e7", "url": "https://github.com/vmware/singleton/commit/d10d71d9ce9e8581f96a6820f2b67f1b895c37e7", "message": "change the timezone name format", "committedDate": "2020-09-15T06:13:10Z", "type": "commit"}, {"oid": "5f6290256d1cab810dad7e166cbc1b820ca4288e", "url": "https://github.com/vmware/singleton/commit/5f6290256d1cab810dad7e166cbc1b820ca4288e", "message": "change the timezone name format", "committedDate": "2020-09-15T06:36:08Z", "type": "commit"}, {"oid": "eb51a5c91f8416e26a6f54443044c43f83c37ea3", "url": "https://github.com/vmware/singleton/commit/eb51a5c91f8416e26a6f54443044c43f83c37ea3", "message": "fixed the comment", "committedDate": "2020-09-15T08:38:39Z", "type": "commit"}, {"oid": "b94ebdca0aae30370ee6736ca1a8947c001cedfa", "url": "https://github.com/vmware/singleton/commit/b94ebdca0aae30370ee6736ca1a8947c001cedfa", "message": "update the l2 jar content", "committedDate": "2020-09-16T01:15:19Z", "type": "commit"}, {"oid": "20d159dcd9455a01a13044f324418317ce95cb83", "url": "https://github.com/vmware/singleton/commit/20d159dcd9455a01a13044f324418317ce95cb83", "message": "Merge branch 'master' into master", "committedDate": "2020-09-16T01:30:23Z", "type": "commit"}, {"oid": "7368f78e4e0895e3f921ac976021bc9c3e157451", "url": "https://github.com/vmware/singleton/commit/7368f78e4e0895e3f921ac976021bc9c3e157451", "message": "Merge branch 'master' into master", "committedDate": "2020-09-16T05:34:48Z", "type": "commit"}, {"oid": "491d0a9ffb0e62e0166123c83c40c67d8b139a5e", "url": "https://github.com/vmware/singleton/commit/491d0a9ffb0e62e0166123c83c40c67d8b139a5e", "message": "Load formatting pattern lib from Maven instead of locally", "committedDate": "2020-09-16T05:41:19Z", "type": "commit"}, {"oid": "b424c27439236e77804e2de9d62be12b18c078bd", "url": "https://github.com/vmware/singleton/commit/b424c27439236e77804e2de9d62be12b18c078bd", "message": "update the timezonename list format", "committedDate": "2020-09-22T08:50:21Z", "type": "commit"}, {"oid": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc", "url": "https://github.com/vmware/singleton/commit/f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc", "message": "Merge branch 'master' into master", "committedDate": "2020-09-22T08:57:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0NDg4NQ==", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493144885", "bodyText": "This one is not used,Remove this line?", "author": "chaoq0318", "createdAt": "2020-09-23T01:59:50Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/CLDRUtils.java", "diffHunk": "@@ -19,6 +19,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;", "originalCommit": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0NzkxMA==", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493147910", "bodyText": "Remove this line?", "author": "chaoq0318", "createdAt": "2020-09-23T02:04:41Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "diffHunk": "@@ -9,142 +9,224 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n import java.util.TimeZone;\n import java.util.TreeMap;\n \n import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.vmware.i18n.common.Constants;\n import com.vmware.i18n.utils.JSONUtil;\n \n public class CldrTimeZoneUtils {\n-    \n-  \n-    \n-    @SuppressWarnings(\"unchecked\")\n-    public static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n-            String language) {\n-        JSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n-        JSONObject dates = (JSONObject) select(timeZoneNamesPath,\"main.\" + language + \".dates\");\n-        String gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n-        String gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n-        String hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n-        String regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n-        String regionFormatTypeDaylight = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-daylight\");\n-        String regionFormatTypeStandard = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-standard\");\n-        String fallbackFormat = (String) select(dates, \"timeZoneNames.fallbackFormat\");\n-        Iterator<JSONObject> iterator = arry.iterator();\n-        List<CldrMetaZone> metaZones = new ArrayList<>();\n-        while (iterator.hasNext()) {\n-            JSONObject objZone = iterator.next();\n-            String zoneKey = (String) select(objZone, \"mapZone._type\");\n-            String territory = (String) select(objZone, \"mapZone._territory\");\n-            String metazoneKey = (String) select(objZone, \"mapZone._other\");\n-            JSONObject metazoneValue = (JSONObject) select(dates,\n-                    \"timeZoneNames.metazone.\" + metazoneKey);\n-            String timeZone = findTimeZone(zoneKey, gmtFormat, gmtZeroFormat, hourFormat);\n-            String exemplarCity = null;\n-            try {\n-                exemplarCity = (String) select(dates,\n-                        \"timeZoneNames.zone.\" + zoneKey.replace(\"/\", \".\") + \".exemplarCity\");\n-\n-            } catch (Exception e) {\n-                // TODO Auto-generated catch block\n-                exemplarCity = \"\";\n-                e.printStackTrace();\n-            }\n-\n-            Map<String, TimeZoneDisplayName> metaZonePerperties = new TreeMap<String, TimeZoneDisplayName>();\n-           \n-            if (metazoneValue == null) {\n-                TimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                String standard = MessageFormat.format(regionFormatTypeStandard, exemplarCity);\n-                longPerp.setStandard(standard);\n-                metaZonePerperties.put(Constants.LONG, longPerp);\n-            } else {\n-                String longStandard = (String) select(metazoneValue, \"long.standard\");\n-                String longDaylight = (String) select(metazoneValue, \"long.daylight\");\n-                String longGeneric = (String) select(metazoneValue, \"long.generic\");\n-                String shortStandard = (String) select(metazoneValue, \"short.standard\");\n-                String shortDaylight = (String) select(metazoneValue, \"short.daylight\");\n-                String shortGeneric = (String) select(metazoneValue, \"short.generic\");\n-                if(longStandard != null || longDaylight != null || longGeneric != null) {\n-                \tTimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                \tlongPerp.setDaylight(longDaylight);\n-                \tlongPerp.setGeneric(longGeneric);\n-                \tlongPerp.setStandard(longStandard);\n-                \tmetaZonePerperties.put(Constants.LONG, longPerp);\n-                }\n-                if(shortStandard != null || shortDaylight != null || shortGeneric != null) {\n-                \tTimeZoneDisplayName shortPerp = new TimeZoneDisplayName();\n-                \tshortPerp.setDaylight(shortDaylight);\n-                \tshortPerp.setGeneric(shortGeneric);\n-                \tshortPerp.setStandard(shortStandard);\n-                \tmetaZonePerperties.put(Constants.SHORT, shortPerp);\n-                }\n-               \n-            }\n-            metaZones.add(new CldrMetaZone(zoneKey, exemplarCity, metazoneKey, timeZone, metaZonePerperties,\n-                    territory));\n-        }\n-\n-        TimeZoneName zone = new TimeZoneName(language, gmtZeroFormat, gmtFormat, hourFormat,\n-                regionFormat, regionFormatTypeDaylight, regionFormatTypeStandard, fallbackFormat,\n-                metaZones);\n-        String result = null;\n-        try {\n-            result = new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(zone);\n-        } catch (JsonProcessingException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-        return result;\n-    }\n \n-    private static String findTimeZone(String targetId, String gmtFormat, String gmtZeroFormat,\n-            String hourFormat) {\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static Map<String, JSONArray> findTimezoneKeys(JSONObject metaZonesJson) {\n+\t\tJSONObject timzone = (JSONObject) select(metaZonesJson, \"supplemental.metaZones.metazoneInfo.timezone\");\n+\t\tMap<String, JSONArray> result = new TreeMap<String, JSONArray>();\n+\t\tfor (Entry<String, Object> entry : (Set<Map.Entry<String, Object>>) timzone.entrySet()) {\n+\t\t\tString zoneKeystr1 = entry.getKey();\n+\t\t\tObject obj1 = entry.getValue();\n+\t\t\tif (obj1 instanceof List) {\n+\t\t\t\tJSONArray objArry = (JSONArray) obj1;\n+\t\t\t\tJSONObject usesMetazones = (JSONObject) objArry.get(0);\n+\t\t\t\tJSONObject usesMetazoneObj = (JSONObject) usesMetazones.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\tif (usesMetazoneObj != null) {\n+\t\t\t\t\tresult.put(zoneKeystr1, objArry);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tJSONObject jsonObj1 = (JSONObject) obj1;\n+\t\t\tfor (Entry<String, Object> entry1 : (Set<Map.Entry<String, Object>>) jsonObj1.entrySet()) {\n+\t\t\t\tString zoneKeystr2 = entry1.getKey();\n+\t\t\t\tObject obj2 = entry1.getValue();\n+\t\t\t\tif (obj2 instanceof List) {\n+\t\t\t\t\tJSONArray objArry2 = (JSONArray) obj2;\n+\t\t\t\t\tJSONObject usesMetazones2 = (JSONObject) objArry2.get(0);\n+\t\t\t\t\tJSONObject usesMetazoneObj2 = (JSONObject) usesMetazones2.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\t\tif (usesMetazoneObj2 != null) {\n+\t\t\t\t\t\tzoneKeystr2 = zoneKeystr1 + \"/\" + zoneKeystr2;\n+\t\t\t\t\t\tresult.put(zoneKeystr2, objArry2);\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tJSONObject jsonObj2 = (JSONObject) obj2;\n+\t\t\t\tfor (Entry<String, Object> entry2 : (Set<Map.Entry<String, Object>>) jsonObj2.entrySet()) {\n+\t\t\t\t\tString zoneKeystr3 = entry2.getKey();\n+\t\t\t\t\tObject obj3 = entry2.getValue();\n+\t\t\t\t\tif (obj3 instanceof List) {\n+\t\t\t\t\t\tJSONArray objArry3 = (JSONArray) obj3;\n+\t\t\t\t\t\tJSONObject usesMetazones3 = (JSONObject) objArry3.get(0);\n+\t\t\t\t\t\tJSONObject usesMetazoneObj3 = (JSONObject) usesMetazones3\n+\t\t\t\t\t\t\t\t.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\t\t\tif (usesMetazoneObj3 != null) {\n+\t\t\t\t\t\t\tzoneKeystr3 = zoneKeystr1 + \"/\" + zoneKeystr2 + \"/\" + zoneKeystr3;\n+\t\t\t\t\t\t\tresult.put(zoneKeystr3, objArry3);\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tJSONObject jsonObj3 = (JSONObject) obj3;\n+\t\t\t\t\tfor (Entry<String, Object> entry3 : (Set<Map.Entry<String, Object>>) jsonObj3.entrySet()) {\n+\t\t\t\t\t\tString zoneKeystr4 = entry3.getKey();\n+\t\t\t\t\t\tObject obj4 = entry3.getValue();\n+\t\t\t\t\t\tif (obj4 instanceof List) {\n+\t\t\t\t\t\t\tJSONArray objArry4 = (JSONArray) obj4;\n+\t\t\t\t\t\t\tJSONObject usesMetazones4 = (JSONObject) objArry4.get(0);\n+\t\t\t\t\t\t\tJSONObject usesMetazoneObj4 = (JSONObject) usesMetazones4\n+\t\t\t\t\t\t\t\t\t.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\t\t\t\tif (usesMetazoneObj4 != null) {\n+\t\t\t\t\t\t\t\tzoneKeystr4 = zoneKeystr1 + \"/\" + zoneKeystr2 + \"/\" + zoneKeystr3 + \"/\" + zoneKeystr4;\n+\t\t\t\t\t\t\t\tresult.put(zoneKeystr4, objArry4);\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tSystem.out.println(\"###############there have 5 level timezone key####################\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n \n-        TimeZone timeZone = TimeZone.getTimeZone(targetId);\n-        \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n+\t\t\tString language) {\n+\t\tJSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n+\t\tJSONObject dates = (JSONObject) select(timeZoneNamesPath, \"main.\" + language + \".dates\");\n+\t\tString gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n+\t\tString gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n+\t\tString hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n+\t\tString regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n+\t\tString regionFormatTypeDaylight = (String) select(dates, \"timeZoneNames.regionFormat-type-daylight\");\n+\t\tString regionFormatTypeStandard = (String) select(dates, \"timeZoneNames.regionFormat-type-standard\");\n+\t\tString fallbackFormat = (String) select(dates, \"timeZoneNames.fallbackFormat\");\n+\t\t//List<CldrMetaZone> metaZones = new ArrayList<>();", "originalCommit": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MDA5Mw==", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493160093", "bodyText": "Most of the code here is the same, are there other ways to optimize it? Like iteration.", "author": "chaoq0318", "createdAt": "2020-09-23T02:28:27Z", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "diffHunk": "@@ -9,142 +9,224 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n import java.util.TimeZone;\n import java.util.TreeMap;\n \n import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.vmware.i18n.common.Constants;\n import com.vmware.i18n.utils.JSONUtil;\n \n public class CldrTimeZoneUtils {\n-    \n-  \n-    \n-    @SuppressWarnings(\"unchecked\")\n-    public static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n-            String language) {\n-        JSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n-        JSONObject dates = (JSONObject) select(timeZoneNamesPath,\"main.\" + language + \".dates\");\n-        String gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n-        String gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n-        String hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n-        String regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n-        String regionFormatTypeDaylight = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-daylight\");\n-        String regionFormatTypeStandard = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-standard\");\n-        String fallbackFormat = (String) select(dates, \"timeZoneNames.fallbackFormat\");\n-        Iterator<JSONObject> iterator = arry.iterator();\n-        List<CldrMetaZone> metaZones = new ArrayList<>();\n-        while (iterator.hasNext()) {\n-            JSONObject objZone = iterator.next();\n-            String zoneKey = (String) select(objZone, \"mapZone._type\");\n-            String territory = (String) select(objZone, \"mapZone._territory\");\n-            String metazoneKey = (String) select(objZone, \"mapZone._other\");\n-            JSONObject metazoneValue = (JSONObject) select(dates,\n-                    \"timeZoneNames.metazone.\" + metazoneKey);\n-            String timeZone = findTimeZone(zoneKey, gmtFormat, gmtZeroFormat, hourFormat);\n-            String exemplarCity = null;\n-            try {\n-                exemplarCity = (String) select(dates,\n-                        \"timeZoneNames.zone.\" + zoneKey.replace(\"/\", \".\") + \".exemplarCity\");\n-\n-            } catch (Exception e) {\n-                // TODO Auto-generated catch block\n-                exemplarCity = \"\";\n-                e.printStackTrace();\n-            }\n-\n-            Map<String, TimeZoneDisplayName> metaZonePerperties = new TreeMap<String, TimeZoneDisplayName>();\n-           \n-            if (metazoneValue == null) {\n-                TimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                String standard = MessageFormat.format(regionFormatTypeStandard, exemplarCity);\n-                longPerp.setStandard(standard);\n-                metaZonePerperties.put(Constants.LONG, longPerp);\n-            } else {\n-                String longStandard = (String) select(metazoneValue, \"long.standard\");\n-                String longDaylight = (String) select(metazoneValue, \"long.daylight\");\n-                String longGeneric = (String) select(metazoneValue, \"long.generic\");\n-                String shortStandard = (String) select(metazoneValue, \"short.standard\");\n-                String shortDaylight = (String) select(metazoneValue, \"short.daylight\");\n-                String shortGeneric = (String) select(metazoneValue, \"short.generic\");\n-                if(longStandard != null || longDaylight != null || longGeneric != null) {\n-                \tTimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                \tlongPerp.setDaylight(longDaylight);\n-                \tlongPerp.setGeneric(longGeneric);\n-                \tlongPerp.setStandard(longStandard);\n-                \tmetaZonePerperties.put(Constants.LONG, longPerp);\n-                }\n-                if(shortStandard != null || shortDaylight != null || shortGeneric != null) {\n-                \tTimeZoneDisplayName shortPerp = new TimeZoneDisplayName();\n-                \tshortPerp.setDaylight(shortDaylight);\n-                \tshortPerp.setGeneric(shortGeneric);\n-                \tshortPerp.setStandard(shortStandard);\n-                \tmetaZonePerperties.put(Constants.SHORT, shortPerp);\n-                }\n-               \n-            }\n-            metaZones.add(new CldrMetaZone(zoneKey, exemplarCity, metazoneKey, timeZone, metaZonePerperties,\n-                    territory));\n-        }\n-\n-        TimeZoneName zone = new TimeZoneName(language, gmtZeroFormat, gmtFormat, hourFormat,\n-                regionFormat, regionFormatTypeDaylight, regionFormatTypeStandard, fallbackFormat,\n-                metaZones);\n-        String result = null;\n-        try {\n-            result = new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(zone);\n-        } catch (JsonProcessingException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-        return result;\n-    }\n \n-    private static String findTimeZone(String targetId, String gmtFormat, String gmtZeroFormat,\n-            String hourFormat) {\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static Map<String, JSONArray> findTimezoneKeys(JSONObject metaZonesJson) {\n+\t\tJSONObject timzone = (JSONObject) select(metaZonesJson, \"supplemental.metaZones.metazoneInfo.timezone\");\n+\t\tMap<String, JSONArray> result = new TreeMap<String, JSONArray>();\n+\t\tfor (Entry<String, Object> entry : (Set<Map.Entry<String, Object>>) timzone.entrySet()) {", "originalCommit": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIxMTk2MA==", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493211960", "bodyText": "this is the business required", "author": "tigershi", "createdAt": "2020-09-23T05:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MDA5Mw=="}], "type": "inlineReview"}, {"oid": "c5afe2a26bac5536ea9e92b93219704db2fe7938", "url": "https://github.com/vmware/singleton/commit/c5afe2a26bac5536ea9e92b93219704db2fe7938", "message": "fixed the comment", "committedDate": "2020-09-23T05:51:23Z", "type": "commit"}]}