{"pr_number": 886, "pr_title": "save L10n resources to Amazon S3", "pr_createdAt": "2020-11-27T05:39:11Z", "pr_url": "https://github.com/vmware/singleton/pull/886", "timeline": [{"oid": "45172333f2dcfe296ec19886772e62935b014103", "url": "https://github.com/vmware/singleton/commit/45172333f2dcfe296ec19886772e62935b014103", "message": "Support saving resources to Amazon S3", "committedDate": "2020-11-27T03:29:47Z", "type": "commit"}, {"oid": "0339560900d079a93efd0febd40c845ee601cd57", "url": "https://github.com/vmware/singleton/commit/0339560900d079a93efd0febd40c845ee601cd57", "message": "minor change", "committedDate": "2020-11-27T05:36:45Z", "type": "commit"}, {"oid": "9c9b1c654106c6c7f45052c5ad0b610ebd504ef8", "url": "https://github.com/vmware/singleton/commit/9c9b1c654106c6c7f45052c5ad0b610ebd504ef8", "message": "Add test cases & minor change", "committedDate": "2020-11-27T06:06:25Z", "type": "commit"}, {"oid": "04ff6163b69679e90d9b9dcff228be9dd3f58ab6", "url": "https://github.com/vmware/singleton/commit/04ff6163b69679e90d9b9dcff228be9dd3f58ab6", "message": "exclude S3 test cases", "committedDate": "2020-11-27T07:17:51Z", "type": "commit"}, {"oid": "72e041fedd180e6490d0e241995369f37e737962", "url": "https://github.com/vmware/singleton/commit/72e041fedd180e6490d0e241995369f37e737962", "message": "Merge branch 'master' into l10ns3", "committedDate": "2020-11-27T07:18:43Z", "type": "commit"}, {"oid": "82625adecc65219acc1a5ff9faf7b73b40524bcd", "url": "https://github.com/vmware/singleton/commit/82625adecc65219acc1a5ff9faf7b73b40524bcd", "message": "Improve test coverage", "committedDate": "2020-11-27T11:35:20Z", "type": "commit"}, {"oid": "a91326df94d65b5aea66473f719fffcddc4efaf7", "url": "https://github.com/vmware/singleton/commit/a91326df94d65b5aea66473f719fffcddc4efaf7", "message": "sonar issues", "committedDate": "2020-11-27T11:58:36Z", "type": "commit"}, {"oid": "49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "url": "https://github.com/vmware/singleton/commit/49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "message": "sonar issues", "committedDate": "2020-11-27T14:37:54Z", "type": "commit"}, {"oid": "c773d86d8f217bdd1c2e3f9cb53dd021e74fe33c", "url": "https://github.com/vmware/singleton/commit/c773d86d8f217bdd1c2e3f9cb53dd021e74fe33c", "message": "Select DAO by profile", "committedDate": "2020-11-29T10:51:47Z", "type": "commit"}, {"oid": "659af7f26afabd77dfacca1a5112a013415a0846", "url": "https://github.com/vmware/singleton/commit/659af7f26afabd77dfacca1a5112a013415a0846", "message": "cccccc", "committedDate": "2020-11-29T11:11:22Z", "type": "commit"}, {"oid": "b2832b2b6f68fa4ba74f5203fedac984f0b83b84", "url": "https://github.com/vmware/singleton/commit/b2832b2b6f68fa4ba74f5203fedac984f0b83b84", "message": "cccc", "committedDate": "2020-11-29T12:35:07Z", "type": "commit"}, {"oid": "49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "url": "https://github.com/vmware/singleton/commit/49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "message": "sonar issues", "committedDate": "2020-11-27T14:37:54Z", "type": "forcePushed"}, {"oid": "1a9302a2974301b9c0d5384dd9a1ecbe9c7ae098", "url": "https://github.com/vmware/singleton/commit/1a9302a2974301b9c0d5384dd9a1ecbe9c7ae098", "message": "ccc", "committedDate": "2020-11-29T14:53:25Z", "type": "commit"}, {"oid": "05e2fe2ac08acf53aa6c02e74f482c44f859a5cd", "url": "https://github.com/vmware/singleton/commit/05e2fe2ac08acf53aa6c02e74f482c44f859a5cd", "message": "cccccc", "committedDate": "2020-11-29T15:02:04Z", "type": "commit"}, {"oid": "980788fe3334eeb173a8e33fe4b3a998abf2f022", "url": "https://github.com/vmware/singleton/commit/980788fe3334eeb173a8e33fe4b3a998abf2f022", "message": "cccccccc", "committedDate": "2020-11-29T23:36:39Z", "type": "commit"}, {"oid": "9310b9b84ea890137940ef68f66d9494f2d7e326", "url": "https://github.com/vmware/singleton/commit/9310b9b84ea890137940ef68f66d9494f2d7e326", "message": "Sonar issues", "committedDate": "2020-11-30T00:12:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwOTI0NA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532309244", "bodyText": "why change the i18n codes", "author": "tigershi", "createdAt": "2020-11-30T01:56:20Z", "path": "g11n-ws/modules/md-data-api-s3impl/build.gradle", "diffHunk": "@@ -35,7 +35,8 @@ repositories {\n \n dependencies {\n     compile project(\":md-data-api\")\n-\tcompile project(\":vip-common\")\n+    compile project(\":vip-common\")\n+    compile project(\":md-data-s3util\")", "originalCommit": "9310b9b84ea890137940ef68f66d9494f2d7e326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMjk4NQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532322985", "bodyText": "Here added a new project 'md-data-s3util' for common use among I18N and L10N.\nI18n code wasn't changed in fact.", "author": "Xiaochao8", "createdAt": "2020-11-30T02:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwOTI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMjYzOQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532322639", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static Logger logger = LoggerFactory.getLogger(SourceService.class);\n          \n          \n            \n            \tprivate static Logger logger = LoggerFactory.getLogger(RemoteSyncServicempl.class);", "author": "Xiaochao8", "createdAt": "2020-11-30T02:58:00Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/RemoteSyncServicempl.java", "diffHunk": "@@ -17,13 +29,19 @@\n import com.vmware.vip.common.constants.ConstantsKeys;\n import com.vmware.vip.common.constants.ConstantsUnicode;\n import com.vmware.vip.common.l10n.source.dto.ComponentSourceDTO;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n  * This implementation of interface SourceService.\n  */\n @Service\n public class RemoteSyncServicempl implements RemoteSyncService {\n \n+\tprivate static Logger logger = LoggerFactory.getLogger(SourceService.class);", "originalCommit": "9310b9b84ea890137940ef68f66d9494f2d7e326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe899ae638847668ca4d3dc4115d3fd4842194d1", "url": "https://github.com/vmware/singleton/commit/fe899ae638847668ca4d3dc4115d3fd4842194d1", "message": "Update g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/RemoteSyncServicempl.java", "committedDate": "2020-11-30T02:58:08Z", "type": "commit"}, {"oid": "24fda5387a1d5c5647e54cd5699955feb4107c21", "url": "https://github.com/vmware/singleton/commit/24fda5387a1d5c5647e54cd5699955feb4107c21", "message": "Remove project md-data-s3util", "committedDate": "2020-11-30T05:17:19Z", "type": "commit"}, {"oid": "e368d11e2e2526689842d20f8ff6901d50e401e7", "url": "https://github.com/vmware/singleton/commit/e368d11e2e2526689842d20f8ff6901d50e401e7", "message": "minor change", "committedDate": "2020-11-30T05:22:17Z", "type": "commit"}, {"oid": "f063ec845828495e6570f37e2d0cc9243677ca65", "url": "https://github.com/vmware/singleton/commit/f063ec845828495e6570f37e2d0cc9243677ca65", "message": "ccccc", "committedDate": "2020-11-30T05:27:16Z", "type": "commit"}, {"oid": "d99df6f0d316676d2fdb1ada9338ba509ed94fa3", "url": "https://github.com/vmware/singleton/commit/d99df6f0d316676d2fdb1ada9338ba509ed94fa3", "message": "Merge branch 'master' into l10ns3", "committedDate": "2020-11-30T05:36:04Z", "type": "commit"}, {"oid": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e", "url": "https://github.com/vmware/singleton/commit/a7b90090fe5c1c4dcdfdf68b2573554fa846821e", "message": "Add encryption to l10n s3", "committedDate": "2020-11-30T05:57:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA3OQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532364079", "bodyText": "why remove the return\uff1f", "author": "tigershi", "createdAt": "2020-11-30T06:03:03Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/conf/CollectSourceValidationInterceptor.java", "diffHunk": "@@ -237,7 +237,6 @@ private static void validateAllowList(HttpServletRequest request, Map<String, Li\n \t\t}\n \t\tif(!allowList.isEmpty() && allowList.containsKey(productName)\n \t\t\t\t&& allowList.get(productName).contains(version)) {\n-\t\t\treturn;\n \t\t}else {", "originalCommit": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM3Mzg5Ng==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532373896", "bodyText": "It's unnecessary.", "author": "Xiaochao8", "createdAt": "2020-11-30T06:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MTc5OA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533081798", "bodyText": "Add return can save CPU resources", "author": "tigershi", "createdAt": "2020-12-01T05:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE0NjY3MA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533146670", "bodyText": "There is no other code after that. right?", "author": "Xiaochao8", "createdAt": "2020-12-01T08:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDUzNQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532364535", "bodyText": "I recommend change a other name for this class. because the same class name have defined in i18n manager", "author": "tigershi", "createdAt": "2020-11-30T06:04:44Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.l10n.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key\n+ *\n+ */\n+public class RsaCryptUtils {", "originalCommit": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NjIxNw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532366217", "bodyText": "Done", "author": "Xiaochao8", "createdAt": "2020-11-30T06:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDUzNQ=="}], "type": "inlineReview"}, {"oid": "8b1ea58ccc9caee679bdfdccedb6f8fcb382eda3", "url": "https://github.com/vmware/singleton/commit/8b1ea58ccc9caee679bdfdccedb6f8fcb382eda3", "message": "Minor change - modify build.gradle", "committedDate": "2020-11-30T06:07:35Z", "type": "commit"}, {"oid": "231bb10f00debe2a341e7203e661ed3ea30a5129", "url": "https://github.com/vmware/singleton/commit/231bb10f00debe2a341e7203e661ed3ea30a5129", "message": "fix according to commments", "committedDate": "2020-11-30T06:10:13Z", "type": "commit"}, {"oid": "fbeac2c7323d1baa3c2bf30bf72850b09f45368f", "url": "https://github.com/vmware/singleton/commit/fbeac2c7323d1baa3c2bf30bf72850b09f45368f", "message": "Add a delay to wait for S3 operation complete", "committedDate": "2020-11-30T09:27:10Z", "type": "commit"}, {"oid": "5f967369c78e0f6e373573e04c11afd317680dce", "url": "https://github.com/vmware/singleton/commit/5f967369c78e0f6e373573e04c11afd317680dce", "message": "Merge branch 'master' into l10ns3", "committedDate": "2020-11-30T09:30:04Z", "type": "commit"}, {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6", "url": "https://github.com/vmware/singleton/commit/c88cfe922c2c7411f0dc89325263177b396d2da6", "message": "Use content instead of version to check file", "committedDate": "2020-11-30T10:07:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4OTcyOA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532589728", "bodyText": "What if s3util is null?\nAlso, double check it in other methods or classes.", "author": "linr211", "createdAt": "2020-11-30T13:18:44Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMTExOQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533021119", "bodyText": "s3util won't be null because Spring boot will throw an exception when it can't intialize s3util.", "author": "Xiaochao8", "createdAt": "2020-12-01T01:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4OTcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzOTcwOA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533039708", "bodyText": "I see.\nHowever, from codes point of view, it's better to check it before use it, in case in the future the project won't rely on the Springboot.", "author": "linr211", "createdAt": "2020-12-01T02:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4OTcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MDI2Nw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533090267", "bodyText": "In this case, an exception should be thrown during initialization phrase. right?", "author": "Xiaochao8", "createdAt": "2020-12-01T05:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4OTcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MTU0OA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532591548", "bodyText": "Should add sync for this method?", "author": "linr211", "createdAt": "2020-11-30T13:21:41Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);\n+\t}\n+\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO compDTO) {", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMTg1NA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533021854", "bodyText": "It's unnecessary because there is no shared data. sqlLite and s3util are singletons.", "author": "Xiaochao8", "createdAt": "2020-12-01T01:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0MDM2Ng==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533040366", "bodyText": "For safe, we should sync for data operation.", "author": "linr211", "createdAt": "2020-12-01T02:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MTU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MDYwNA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533090604", "bodyText": "This should be safe because the file will be locked before update.", "author": "Xiaochao8", "createdAt": "2020-12-01T05:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MTU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTIxMw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532595213", "bodyText": "To make the code more simple, you could throw the exception to upper layer and handle it.\nFor the failure of file update, I think we should add a mark for Logz to track and alert it?", "author": "linr211", "createdAt": "2020-11-30T13:27:29Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);\n+\t}\n+\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO compDTO) {\n+\t\tlogger.info(\"[Save sources to storage]: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tboolean bExist = false;\n+\t\ttry {", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNTQwMg==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533025402", "bodyText": "Here is already the entrance of DAO layer. If throw the exception, it will propagate to service layer.\n2.\nHow to add a mark for Logz? Do you mean add a log message when failure?", "author": "Xiaochao8", "createdAt": "2020-12-01T02:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0MTA3MQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533041071", "bodyText": "We can throw it upper than controller, you can refer to the manager project on how to handle it.\nPlease check with Devops side, i think we just add a mark as part of the error message so that the Logz can recognize it.", "author": "linr211", "createdAt": "2020-12-01T02:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MTMzNw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533091337", "bodyText": "I'm afraid that it needs to change the overall flow and is out of scope of this PR. This PR only focus on the DAO layer.", "author": "Xiaochao8", "createdAt": "2020-12-01T06:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE0MDE0OQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533140149", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T08:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTg1MQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532595851", "bodyText": "should use logger.error?", "author": "linr211", "createdAt": "2020-11-30T13:28:33Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);\n+\t}\n+\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO compDTO) {\n+\t\tlogger.info(\"[Save sources to storage]: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tboolean bExist = false;\n+\t\ttry {\n+\t\t\tbExist = s3util.isBundleExist(basePath, compDTO);\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (!s3util.lockBundleFile(basePath, compDTO, 10000)) {\n+\t\t\tlogger.info(\"failed to lock bundle file, return.\");", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNTg0MQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533025841", "bodyText": "I think warning is enough. This is normal during concurrency. But in our cases, there should be no this failure at most time. How do you think?", "author": "Xiaochao8", "createdAt": "2020-12-01T02:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0MTUxOA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533041518", "bodyText": "agree.\nIf there's unexpected reason to cause the failure, we should error it.", "author": "linr211", "createdAt": "2020-12-01T02:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5OTM0Nw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532599347", "bodyText": "add sync for the method and final for the parameters.", "author": "linr211", "createdAt": "2020-11-30T13:33:57Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/SourceUtils.java", "diffHunk": "@@ -36,6 +52,54 @@ public static SourceAPIResponseDTO handleSourceResponse(boolean isSourceCached){\n \t\t}\n \t\treturn sourceAPIResponseDTO;\n \t}\n+\n+\t/*\n+\t * merge the cache content with JSON bundle by component, the structure of\n+\t * componentJSON is same with the bundle file.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static SingleComponentDTO mergeCacheWithBundle(", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNzM4Mw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533027383", "bodyText": "It's a static method. Don't need synchronized keyword.\nAdded final to parameters.", "author": "Xiaochao8", "createdAt": "2020-12-01T02:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5OTM0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwMTA2MA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532601060", "bodyText": "duplicated check for null with StringUtils.isEmpty?", "author": "linr211", "createdAt": "2020-11-30T13:36:40Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/SourceUtils.java", "diffHunk": "@@ -36,6 +52,54 @@ public static SourceAPIResponseDTO handleSourceResponse(boolean isSourceCached){\n \t\t}\n \t\treturn sourceAPIResponseDTO;\n \t}\n+\n+\t/*\n+\t * merge the cache content with JSON bundle by component, the structure of\n+\t * componentJSON is same with the bundle file.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static SingleComponentDTO mergeCacheWithBundle(\n+\t\t\tSingleComponentDTO cachedComponentSourceDTO, String componentJSON) {\n+\t\tComponentMessagesDTO componentMessagesDTO = new ComponentMessagesDTO();\n+\t\tBeanUtils.copyProperties(cachedComponentSourceDTO, componentMessagesDTO);\n+\t\tif (!StringUtils.isEmpty(componentJSON)) {\n+\t\t\tJSONParser parser = new JSONParser();\n+\t\t\tContainerFactory containerFactory = MapUtil.getContainerFactory();\n+\t\t\tMap<String, Object> messages;\n+\t\t\tMap<String, Object> bundle = null;\n+\t\t\ttry {\n+\t\t\t\tbundle = (Map<String, Object>) parser.parse(componentJSON,\n+\t\t\t\t\t\tcontainerFactory);\n+\t\t\t} catch (ParseException e) {\n+\t\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\t\t\n+\t\t\t}\n+\t\t\tif ( (bundle != null) && !StringUtils.isEmpty(bundle)) {", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyODEyMg==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533028122", "bodyText": "fixed.", "author": "Xiaochao8", "createdAt": "2020-12-01T02:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwMTA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDA3OA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532604078", "bodyText": "In this PR, there are too many try-catch, please throw it to a central place and handle it.", "author": "linr211", "createdAt": "2020-11-30T13:41:31Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3Util.class);\n+\n+\tprivate AmazonS3 s3Inst;\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate boolean encryption;\n+\n+\t/**\n+\t * the s3 password public key used to decrypt data\n+\t */\n+\t@Value(\"${s3.password.publicKey}\")\n+\tprivate String publicKey;\n+\n+\t/**\n+\t * the s3 access Key\n+\t */\n+\t@Value(\"${s3.password.accessKey}\")\n+\tprivate String accessKey;\n+\n+\t/**\n+\t * the s3 secret key\n+\t */\n+\t@Value(\"${s3.password.secretkey}\")\n+\tprivate String secretkey;\n+\n+\t/**\n+\t * the s3 region name\n+\t */\n+\t@Value(\"${s3.region}\")\n+\tprivate String s3Region;\n+\n+\t/**\n+\t * the s3 bucket Name\n+\t */\n+\t@Value(\"${s3.bucketName}\")\n+\tprivate String bucketName;\n+\n+\tprivate Random random = new Random(System.currentTimeMillis());\n+\n+\tprivate static long retryInterval = 500; // milliseconds\n+\tprivate static long deadlockInterval = 10 * 60 * 1000L; // 10 minutes\n+\tprivate static long waitS3Operation = 100; // milliseconds\n+\t\n+\t/**\n+\t * initialize the the S3 client environment\n+\t */\n+\t@PostConstruct\n+\tprivate void init() {\n+\t\ts3Inst = AmazonS3ClientBuilder.standard()\n+\t\t\t\t.withCredentials(new AWSStaticCredentialsProvider(\n+\t\t\t\t\t\tnew BasicAWSCredentials(this.getAccessKey(), this.getSecretkey())))\n+\t\t\t\t.withRegion(s3Region).enablePathStyleAccess().build();\n+\t\tif (!s3Inst.doesBucketExistV2(bucketName)) {\n+\t\t\ts3Inst.createBucket(bucketName);\n+\t\t\t// Verify that the bucket was created by retrieving it and checking its\n+\t\t\t// location.\n+\t\t\tString bucketLocation = s3Inst.getBucketLocation(new GetBucketLocationRequest(bucketName));\n+\t\t\tlogger.info(\"Bucket location: {}\", bucketLocation);\n+\t\t}\n+\t}\n+\n+\tpublic String readBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"read bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tString bundlePath = getBundleFilePath(basePath, compDTO);\n+\t\tString result = null;\n+\t\ttry {", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0MDcwMg==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533040702", "bodyText": "If throw them all out, need to change existing code.", "author": "Xiaochao8", "createdAt": "2020-12-01T02:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0NTg3Ng==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533045876", "bodyText": "It's not a good practice to catch the business exception on the lower layer, the exceptions should be put on the place upper than business layer. Otherwise, the upper layer can't get what happen inside and handle it, e.g. if the upper layer wants to put the exception in the API response, there's no way to do it.", "author": "linr211", "createdAt": "2020-12-01T03:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE0MDM4NA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533140384", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T08:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTA2OQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532605069", "bodyText": "In this PR, to reduce the log file size, please try to use logger.debug, not logger.info.", "author": "linr211", "createdAt": "2020-11-30T13:43:02Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3Util.class);\n+\n+\tprivate AmazonS3 s3Inst;\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate boolean encryption;\n+\n+\t/**\n+\t * the s3 password public key used to decrypt data\n+\t */\n+\t@Value(\"${s3.password.publicKey}\")\n+\tprivate String publicKey;\n+\n+\t/**\n+\t * the s3 access Key\n+\t */\n+\t@Value(\"${s3.password.accessKey}\")\n+\tprivate String accessKey;\n+\n+\t/**\n+\t * the s3 secret key\n+\t */\n+\t@Value(\"${s3.password.secretkey}\")\n+\tprivate String secretkey;\n+\n+\t/**\n+\t * the s3 region name\n+\t */\n+\t@Value(\"${s3.region}\")\n+\tprivate String s3Region;\n+\n+\t/**\n+\t * the s3 bucket Name\n+\t */\n+\t@Value(\"${s3.bucketName}\")\n+\tprivate String bucketName;\n+\n+\tprivate Random random = new Random(System.currentTimeMillis());\n+\n+\tprivate static long retryInterval = 500; // milliseconds\n+\tprivate static long deadlockInterval = 10 * 60 * 1000L; // 10 minutes\n+\tprivate static long waitS3Operation = 100; // milliseconds\n+\t\n+\t/**\n+\t * initialize the the S3 client environment\n+\t */\n+\t@PostConstruct\n+\tprivate void init() {\n+\t\ts3Inst = AmazonS3ClientBuilder.standard()\n+\t\t\t\t.withCredentials(new AWSStaticCredentialsProvider(\n+\t\t\t\t\t\tnew BasicAWSCredentials(this.getAccessKey(), this.getSecretkey())))\n+\t\t\t\t.withRegion(s3Region).enablePathStyleAccess().build();\n+\t\tif (!s3Inst.doesBucketExistV2(bucketName)) {\n+\t\t\ts3Inst.createBucket(bucketName);\n+\t\t\t// Verify that the bucket was created by retrieving it and checking its\n+\t\t\t// location.\n+\t\t\tString bucketLocation = s3Inst.getBucketLocation(new GetBucketLocationRequest(bucketName));\n+\t\t\tlogger.info(\"Bucket location: {}\", bucketLocation);\n+\t\t}\n+\t}\n+\n+\tpublic String readBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"read bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0MTQ1Mw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533041453", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T02:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNzI3Mw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532607273", "bodyText": "add sync for this method.", "author": "linr211", "createdAt": "2020-11-30T13:46:19Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3Util.class);\n+\n+\tprivate AmazonS3 s3Inst;\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate boolean encryption;\n+\n+\t/**\n+\t * the s3 password public key used to decrypt data\n+\t */\n+\t@Value(\"${s3.password.publicKey}\")\n+\tprivate String publicKey;\n+\n+\t/**\n+\t * the s3 access Key\n+\t */\n+\t@Value(\"${s3.password.accessKey}\")\n+\tprivate String accessKey;\n+\n+\t/**\n+\t * the s3 secret key\n+\t */\n+\t@Value(\"${s3.password.secretkey}\")\n+\tprivate String secretkey;\n+\n+\t/**\n+\t * the s3 region name\n+\t */\n+\t@Value(\"${s3.region}\")\n+\tprivate String s3Region;\n+\n+\t/**\n+\t * the s3 bucket Name\n+\t */\n+\t@Value(\"${s3.bucketName}\")\n+\tprivate String bucketName;\n+\n+\tprivate Random random = new Random(System.currentTimeMillis());\n+\n+\tprivate static long retryInterval = 500; // milliseconds\n+\tprivate static long deadlockInterval = 10 * 60 * 1000L; // 10 minutes\n+\tprivate static long waitS3Operation = 100; // milliseconds\n+\t\n+\t/**\n+\t * initialize the the S3 client environment\n+\t */\n+\t@PostConstruct\n+\tprivate void init() {\n+\t\ts3Inst = AmazonS3ClientBuilder.standard()\n+\t\t\t\t.withCredentials(new AWSStaticCredentialsProvider(\n+\t\t\t\t\t\tnew BasicAWSCredentials(this.getAccessKey(), this.getSecretkey())))\n+\t\t\t\t.withRegion(s3Region).enablePathStyleAccess().build();\n+\t\tif (!s3Inst.doesBucketExistV2(bucketName)) {\n+\t\t\ts3Inst.createBucket(bucketName);\n+\t\t\t// Verify that the bucket was created by retrieving it and checking its\n+\t\t\t// location.\n+\t\t\tString bucketLocation = s3Inst.getBucketLocation(new GetBucketLocationRequest(bucketName));\n+\t\t\tlogger.info(\"Bucket location: {}\", bucketLocation);\n+\t\t}\n+\t}\n+\n+\tpublic String readBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"read bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tString bundlePath = getBundleFilePath(basePath, compDTO);\n+\t\tString result = null;\n+\t\ttry {\n+\t\t\tresult = s3Inst.getObjectAsString(bucketName, bundlePath);\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(e.getMessage(), e);\n+\t\t}\n+\n+\t\tlogger.info(\"end reading bundle file\");\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean writeBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"write bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\ttry {\n+\t\t\tString bundlePath = getBundleFilePath(basePath, compDTO);\n+\t\t\ts3Inst.putObject(bucketName, bundlePath, convertComponentToString(compDTO));\n+\t\t\treturn true;\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\treturn false;\n+\t\t} finally {\n+\t\t\tlogger.info(\"end writing bundle file\");\n+\t\t}\n+\t}\n+\n+\tpublic boolean isBundleExist(String basePath, SingleComponentDTO singleComponentDTO) {\n+\t\tString bundlePath = getBundleFilePath(basePath, singleComponentDTO);\n+\t\treturn s3Inst.doesObjectExist(bucketName, bundlePath);\n+\t}\n+\n+\tpublic String convertComponentToString(SingleComponentDTO compDTO) throws JsonProcessingException {\n+\t\tMap<String, Object> json = new HashMap<>();\n+\t\tjson.put(ConstantsKeys.COMPONENT, compDTO.getComponent());\n+\t\tjson.put(ConstantsKeys.lOCALE, compDTO.getLocale());\n+\t\tjson.put(ConstantsKeys.MESSAGES, compDTO.getMessages());\n+\t\tjson.put(ConstantsKeys.ID, compDTO.getId());\n+\t\treturn new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(json);\n+\t}\n+\n+\tpublic boolean lockBundleFile(String basePath, SingleComponentDTO compDTO, long waittime) {", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyOTMyNg==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533029326", "bodyText": "This class is a singleton and no shared data between threads. I think keyword 'synchronized' is unnecessary. How do you think?", "author": "Xiaochao8", "createdAt": "2020-12-01T02:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNzI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0MjI1MA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533042250", "bodyText": "For security reason, i think we should add it, since from this method we are not sure how the caller create the class instance and call the method.", "author": "linr211", "createdAt": "2020-12-01T03:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNzI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MjA1NA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533092054", "bodyText": "This instance is created by Spring and is a singleton. This class can be a static class, but to make use of Spring autowired feature to make it a Spring 'Component.'", "author": "Xiaochao8", "createdAt": "2020-12-01T06:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNzI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE0MDU3NQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533140575", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T08:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNzI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjczMg==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532612732", "bodyText": "This class is too complicated, it mix business logic(read, write, update, ect.) with string handling and lock, so:\n\nMove string handling to a common class which can handle the string;\nConsider use an internal class for lock", "author": "linr211", "createdAt": "2020-11-30T13:54:41Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MjEwOA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533092108", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T06:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNjA3NA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532616074", "bodyText": "add description of this method, it's not easy to understand what happen in it.", "author": "linr211", "createdAt": "2020-11-30T13:59:33Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/translation/dao/impl/S3SingleComponentDaoImpl.java", "diffHunk": "@@ -0,0 +1,92 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.translation.dao.impl;\n+\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.vmware.l10n.translation.dao.SingleComponentDao;\n+import com.vmware.l10n.translation.dto.ComponentMessagesDTO;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.vip.common.constants.ConstantsUnicode;\n+import com.vmware.vip.common.constants.TranslationQueryStatusType;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.exception.L10nAPIException;\n+\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SingleComponentDaoImpl implements SingleComponentDao {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SingleComponentDaoImpl.class);\n+\n+\t@Value(\"${translation.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Override\n+\tpublic ComponentMessagesDTO getLocalTranslationFromFile(ComponentMessagesDTO componentMessagesDTO)", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyOTAwMA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533029000", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T02:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNjA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjQwOA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533082408", "bodyText": "should change the method name to getTranslationFromS3? From the logic it does not read from local.", "author": "linr211", "createdAt": "2020-12-01T05:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNjA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE0MDk1Nw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533140957", "bodyText": "This is an interface method for both local bundle and S3. Changed it to getTranslationFromFile", "author": "Xiaochao8", "createdAt": "2020-12-01T08:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNjA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxOTcyOQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532619729", "bodyText": "Remove any unnecessary comment lines.", "author": "linr211", "createdAt": "2020-11-30T14:04:44Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/SourceServiceImpl.java", "diffHunk": "@@ -203,90 +202,90 @@ private static boolean catcheMapDTO(Map<String, ComponentSourceDTO> sources) thr\n \t\n \t\n \t\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic static void updateKeyValue( ComponentSourceDTO cacheComSourceDTO,  Map<String, Object> messages,  Map<String, Object> comments, String ehcacheKey) throws VIPCacheException {\n-\t\tfor(Entry<String, Object> entry: messages.entrySet()) {\n-\t\t\tString key = entry.getKey();\n-\t\t\tObject source= entry.getValue();\n-\t\t\tObject comment = comments.get(key);\n-\t\t\t\n-\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getMessages(), key, source);\n-\t\t\tif (!StringUtils.isEmpty(comment)) {\n-\t\t\t\t\n-\t\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getComments(), key, comment);\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\tSourceCacheUtils.updateSourceCache(ehcacheKey, cacheComSourceDTO);\n-\t\tLOGGER.info(\"Update cache: {}\", ehcacheKey);\n-\t\t\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate static boolean catcheStrDTO(StringSourceDTO stringSourceDTO) throws L10nAPIException {\n-\n-\t\tstringSourceDTO.setLocale(ConstantsKeys.LATEST);\n-\t\tString key = getKey(stringSourceDTO);\n-\t\tString source = stringSourceDTO.getSource();\n-\t\tString comment = stringSourceDTO.getComment();\n-\t\tString ehcacheKey = PathUtil.generateCacheKey(stringSourceDTO);\n-\t\tComponentSourceDTO cacheComSourceDTO = null;\n-\t\ttry {\n-\t\t\tcacheComSourceDTO = TranslationCache3.getCachedObject(CacheName.SOURCE, ehcacheKey);\n-\n-\t\t\tif (StringUtils.isEmpty(cacheComSourceDTO)) {\n-\t\t\t\tcacheComSourceDTO = new ComponentSourceDTO();\n-\t\t\t\tBeanUtils.copyProperties(stringSourceDTO, cacheComSourceDTO);\n-\t\t\t\tcacheComSourceDTO.setMessages(key, source);\n-\t\t\t\tif (!StringUtils.isEmpty(comment)) {\n-\t\t\t\t\tcacheComSourceDTO.setComments(key, comment);\n-\t\t\t\t}\n-\n-\t\t\t\tTranslationCache3.addCachedObject(CacheName.SOURCE, ehcacheKey, cacheComSourceDTO);\n-\n-\t\t\t} else {\n-\t\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getMessages(), key, source);\n-\t\t\t\t\n-\t\t\t\tcacheComSourceDTO.setMessages(key, source);\n-\n-\t\t\t\tif (!StringUtils.isEmpty(comment)) {\n-\n-\t\t\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getComments(), key, comment);\n-\n-\t\t\t\t\tcacheComSourceDTO.setComments(key, comment);\n-\t\t\t\t}\n-\t\t\t\tTranslationCache3.updateCachedObject(CacheName.SOURCE, ehcacheKey, cacheComSourceDTO);\n-\t\t\t\tLOGGER.info(\"Update cache: {}\", ehcacheKey);\n-\t\t\t}\n-\t\t} catch (VIPCacheException e) {\n-\t\t\tLOGGER.error(e.getMessage(), e);\n-\t\t\tthrow new L10nAPIException(\"Error occurs in cache when perform cacheSource function.\", e);\n-\t\t}\n-\t\treturn true;\n-\t}\n+//\t@SuppressWarnings(\"unchecked\")", "originalCommit": "c88cfe922c2c7411f0dc89325263177b396d2da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0Mjc3Mw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533042773", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T03:03:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxOTcyOQ=="}], "type": "inlineReview"}, {"oid": "e2a6e0e23b193ae1c66a2507924e6344d0bba68b", "url": "https://github.com/vmware/singleton/commit/e2a6e0e23b193ae1c66a2507924e6344d0bba68b", "message": "change after review.\nChange S3 encryption keys.", "committedDate": "2020-12-01T03:05:06Z", "type": "commit"}, {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "url": "https://github.com/vmware/singleton/commit/f144b7eccf1f659fef11875d0daa7e957cc5de68", "message": "Create an internal Locker class to lock S3 file.\nMove String operation out of S3Util", "committedDate": "2020-12-01T04:57:07Z", "type": "commit"}, {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "url": "https://github.com/vmware/singleton/commit/f144b7eccf1f659fef11875d0daa7e957cc5de68", "message": "Create an internal Locker class to lock S3 file.\nMove String operation out of S3Util", "committedDate": "2020-12-01T04:57:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NjcwOQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533076709", "bodyText": "all info log in dao layer should be changed to debug log, to avoid frequently log update and large log file;\nall error log should be thrown to upper layer to handle.\nplease have a global check.", "author": "linr211", "createdAt": "2020-12-01T05:10:21Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/LocalSourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.l10n.source.dao.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.exceptions.VIPResourceOperationException;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.LocalJSONReader;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+import com.vmware.vip.common.utils.SortJSONUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@Repository\n+@Profile(value=\"bundle\")\n+public class LocalSourceDaoImpl implements SourceDao {\n+    private static Logger LOGGER = LoggerFactory.getLogger(LocalSourceDaoImpl.class);\n+\n+    @Autowired\n+    private SqlLiteDao sqlLite;\n+\n+    /**\n+     * the path of local resource file,can be configed in spring config file\n+     **/\n+    @Value(\"${source.bundle.file.basepath}\")\n+    private String basepath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO singleComponentDTO) {\n+\t\tString result = \"\";\n+\t\tString component = singleComponentDTO.getComponent();\n+\t\tif (StringUtils.isEmpty(component)) {\n+\t\t\tcomponent = ConstantsFile.DEFAULT_COMPONENT;\n+\t\t\tsingleComponentDTO.setComponent(component);\n+\t\t}\n+\t\tString filepath = ConstantsFile.L10N_BUNDLES_PATH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getProductVersionConcatName(singleComponentDTO)\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ component\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getLocalizedJSONFileName(ConstantsKeys.LATEST);\n+\t\tLOGGER.info(\"Read content from file: {}{}\",  basepath, filepath);", "originalCommit": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MjQzMg==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533092432", "bodyText": "Same as above. This is out of scope of this PR. This PR only focus on DAO layer.", "author": "Xiaochao8", "createdAt": "2020-12-01T06:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NjcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NTQyOA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533095428", "bodyText": "This file is existing before this PR. It's renamed from SourceDaoImpl.java", "author": "Xiaochao8", "createdAt": "2020-12-01T06:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NjcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE0MTE1NA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533141154", "bodyText": "changed to debug level.", "author": "Xiaochao8", "createdAt": "2020-12-01T08:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NjcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NzUxOQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533077519", "bodyText": "change it to updateOrAddBundle?", "author": "linr211", "createdAt": "2020-12-01T05:13:24Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/LocalSourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.l10n.source.dao.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.exceptions.VIPResourceOperationException;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.LocalJSONReader;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+import com.vmware.vip.common.utils.SortJSONUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@Repository\n+@Profile(value=\"bundle\")\n+public class LocalSourceDaoImpl implements SourceDao {\n+    private static Logger LOGGER = LoggerFactory.getLogger(LocalSourceDaoImpl.class);\n+\n+    @Autowired\n+    private SqlLiteDao sqlLite;\n+\n+    /**\n+     * the path of local resource file,can be configed in spring config file\n+     **/\n+    @Value(\"${source.bundle.file.basepath}\")\n+    private String basepath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO singleComponentDTO) {\n+\t\tString result = \"\";\n+\t\tString component = singleComponentDTO.getComponent();\n+\t\tif (StringUtils.isEmpty(component)) {\n+\t\t\tcomponent = ConstantsFile.DEFAULT_COMPONENT;\n+\t\t\tsingleComponentDTO.setComponent(component);\n+\t\t}\n+\t\tString filepath = ConstantsFile.L10N_BUNDLES_PATH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getProductVersionConcatName(singleComponentDTO)\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ component\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getLocalizedJSONFileName(ConstantsKeys.LATEST);\n+\t\tLOGGER.info(\"Read content from file: {}{}\",  basepath, filepath);\n+\n+\t\tif (new File(basepath + filepath).exists()) {\n+\t\t\tresult = new LocalJSONReader().readLocalJSONFile(basepath\n+\t\t\t\t\t+ filepath);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\t\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO componentMessagesDTO) {", "originalCommit": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5MjkxNA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533092914", "bodyText": "This is an override interface method. Its name is from the interface.", "author": "Xiaochao8", "createdAt": "2020-12-01T06:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3ODc1MA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533078750", "bodyText": "should be logger.error?", "author": "linr211", "createdAt": "2020-12-01T05:17:56Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/RemoteSyncServicempl.java", "diffHunk": "@@ -63,12 +81,54 @@ public void send(ComponentSourceDTO componentSourceDTO, String remoteURL)\n \t\t\t\t\tcomponentSourceDTO.getMessages());\n \t\t\trequestParam.put(ConstantsKeys.COMMENTS,\n \t\t\t\t\tcomponentSourceDTO.getComments());\n-\t\t\tpushFlag = sourceDao.sendToRemote(url.toString(), requestParam);\n+\t\t\tpushFlag = sendToRemote(url.toString(), requestParam);\n \t\t}\n \t\tif (!pushFlag) {\n \t\t\tthrow new L10nAPIException(\"Error occur when send to remote [\"\n \t\t\t\t\t+ remoteURL + \"].\");\n \t\t}\n \t}\n \n+\t/**\n+\t * Send source strings to GRM by component.\n+\t *\n+\t * @param url          the URL of register strings API provided by GRM\n+\t * @param requestParam the request body, it includes 'messages' and 'comments',\n+\t *                     the former represents source strings and the latter\n+\t *                     represents comments for source strings\n+\t * @return send result, true represents success, false represents failure.\n+\t */\n+\tpublic boolean sendToRemote(String url, Map<String, Object> requestParam) {\n+\t\tlogger.info(\"Send data to remote server [{}] ...\", url);\n+\t\tlogger.info(\"The request body is: {}\", requestParam);\n+\t\tboolean result = false;\n+\t\tRestTemplate restTemplate = new RestTemplate();\n+\t\tHttpHeaders headers = new HttpHeaders();\n+\t\tMediaType type = MediaType.parseMediaType(\"application/json; charset=UTF-8\");\n+\t\theaders.setContentType(type);\n+\t\theaders.add(\"Accept\", MediaType.APPLICATION_JSON.toString());\n+\t\tJSONObject jsonObj = new JSONObject(requestParam);\n+\t\tHttpEntity<String> formEntity = new HttpEntity<String>(jsonObj.toString(), headers);\n+\t\ttry {\n+\t\t\tResponseEntity<GRMResponseDTO> responseEntity = restTemplate.postForEntity(url, formEntity,\n+\t\t\t\t\tGRMResponseDTO.class);\n+\t\t\tGRMResponseDTO gRMResponseDTO = responseEntity.getBody();\n+\t\t\tif (gRMResponseDTO == null) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (gRMResponseDTO.getStatus() == GRMAPIResponseStatus.CREATED.getCode()) {\n+\t\t\t\tresult = true;\n+\t\t\t\tlogger.info(\"The request has succeeded, the result: {} {}\", gRMResponseDTO.getStatus(),\n+\t\t\t\t\t\tgRMResponseDTO.getResult());\n+\t\t\t} else {\n+\t\t\t\tlogger.info(\"The request has failed, the response code: {} reason: {}\", +gRMResponseDTO.getStatus(),", "originalCommit": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NDI3MA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533094270", "bodyText": "done", "author": "Xiaochao8", "createdAt": "2020-12-01T06:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3ODc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjAxNw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533082017", "bodyText": "componentMessagesDTO does not need to be converted to linked DTO by code line 68 ~ 80 do it?", "author": "linr211", "createdAt": "2020-12-01T05:29:50Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/translation/dao/impl/S3SingleComponentDaoImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.translation.dao.impl;\n+\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.vmware.l10n.translation.dao.SingleComponentDao;\n+import com.vmware.l10n.translation.dto.ComponentMessagesDTO;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.vip.common.constants.ConstantsUnicode;\n+import com.vmware.vip.common.constants.TranslationQueryStatusType;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.exception.L10nAPIException;\n+\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SingleComponentDaoImpl implements SingleComponentDao {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SingleComponentDaoImpl.class);\n+\n+\t@Value(\"${translation.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+    /**\n+     * Get translation data from local file\n+     *\n+     * @param componentMessagesDTO Specify the bundle file to get.\n+     * @return componentMessagesDTO\n+     */\n+\t@Override\n+\tpublic ComponentMessagesDTO getLocalTranslationFromFile(ComponentMessagesDTO componentMessagesDTO)\n+\t\t\tthrows L10nAPIException {\n+\t\tlogger.info(\"[get Translation from S3]\");\n+\n+\t\t\n+\t\tString bunldeString;\n+\t\ttry {\n+\t\t\tif (s3util.isBundleExist(basePath, componentMessagesDTO)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileFound.toString());\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, componentMessagesDTO);\n+\t\t\t} else {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileNotFound.toString());\n+\t\t\t\tComponentMessagesDTO tempDTO = new ComponentMessagesDTO();\n+\t\t\t\tBeanUtils.copyProperties(componentMessagesDTO, tempDTO);\n+\t\t\t\ttempDTO.setLocale(ConstantsUnicode.EN);\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, tempDTO);\n+\t\t\t}\n+\t\t\tif (StringUtils.isEmpty(bunldeString)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(TranslationQueryStatusType.ComponentNotFound.toString());\n+\t\t\t\treturn componentMessagesDTO;", "originalCommit": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzOTUzMw==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533139533", "bodyText": "I don't know. This is legacy code.", "author": "Xiaochao8", "createdAt": "2020-12-01T08:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjYzMA==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533082630", "bodyText": "change it to writeTranslationToS3?", "author": "linr211", "createdAt": "2020-12-01T05:31:53Z", "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/translation/dao/impl/S3SingleComponentDaoImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.translation.dao.impl;\n+\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.vmware.l10n.translation.dao.SingleComponentDao;\n+import com.vmware.l10n.translation.dto.ComponentMessagesDTO;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.vip.common.constants.ConstantsUnicode;\n+import com.vmware.vip.common.constants.TranslationQueryStatusType;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.exception.L10nAPIException;\n+\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SingleComponentDaoImpl implements SingleComponentDao {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SingleComponentDaoImpl.class);\n+\n+\t@Value(\"${translation.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+    /**\n+     * Get translation data from local file\n+     *\n+     * @param componentMessagesDTO Specify the bundle file to get.\n+     * @return componentMessagesDTO\n+     */\n+\t@Override\n+\tpublic ComponentMessagesDTO getLocalTranslationFromFile(ComponentMessagesDTO componentMessagesDTO)\n+\t\t\tthrows L10nAPIException {\n+\t\tlogger.info(\"[get Translation from S3]\");\n+\n+\t\t\n+\t\tString bunldeString;\n+\t\ttry {\n+\t\t\tif (s3util.isBundleExist(basePath, componentMessagesDTO)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileFound.toString());\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, componentMessagesDTO);\n+\t\t\t} else {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileNotFound.toString());\n+\t\t\t\tComponentMessagesDTO tempDTO = new ComponentMessagesDTO();\n+\t\t\t\tBeanUtils.copyProperties(componentMessagesDTO, tempDTO);\n+\t\t\t\ttempDTO.setLocale(ConstantsUnicode.EN);\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, tempDTO);\n+\t\t\t}\n+\t\t\tif (StringUtils.isEmpty(bunldeString)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(TranslationQueryStatusType.ComponentNotFound.toString());\n+\t\t\t\treturn componentMessagesDTO;\n+\t\t\t}\n+\t\t} catch (SdkClientException e) {\n+\t\t\tthrow new L10nAPIException(\"Connecting S3 failed.\", e);\n+\t\t}\n+\n+\t\tSingleComponentDTO caseComponentMessagesDTO;\n+\t\ttry {\n+\t\t\tcaseComponentMessagesDTO = SingleComponentDTO.getSingleComponentDTOWithLinkedMessages(bunldeString);\n+\t\t\tcaseComponentMessagesDTO.setProductName(componentMessagesDTO.getProductName());\n+\t\t\tcaseComponentMessagesDTO.setVersion(componentMessagesDTO.getVersion());\n+\t\t\tcaseComponentMessagesDTO.setStatus(componentMessagesDTO.getStatus());\n+\t\t} catch (ParseException e) {\n+\t\t\tthrow new L10nAPIException(\"Parsing json failed.\", e);\n+\t\t}\n+\n+\t\tComponentMessagesDTO msgDTO = new ComponentMessagesDTO();\n+\t\tBeanUtils.copyProperties(caseComponentMessagesDTO, msgDTO);\n+\t\treturn msgDTO;\n+\n+\t}\n+\n+\t@Override\n+\tpublic boolean writeLocalTranslationToFile(ComponentMessagesDTO componentMessagesDTO) {", "originalCommit": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5NTA3OQ==", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533095079", "bodyText": "Changed to writeTranslationToFile because this is an interface method for both local and S3.", "author": "Xiaochao8", "createdAt": "2020-12-01T06:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjYzMA=="}], "type": "inlineReview"}, {"oid": "7e26a170669b5089c1f107c3f51b865d6a5cd116", "url": "https://github.com/vmware/singleton/commit/7e26a170669b5089c1f107c3f51b865d6a5cd116", "message": "Change after review", "committedDate": "2020-12-01T06:19:57Z", "type": "commit"}, {"oid": "5c7ec10c72d392e1402b5f7d6ed579a3c9dd1561", "url": "https://github.com/vmware/singleton/commit/5c7ec10c72d392e1402b5f7d6ed579a3c9dd1561", "message": "remove extra log", "committedDate": "2020-12-01T07:08:28Z", "type": "commit"}, {"oid": "8a5a7562da2786afbfcd3d954bb3fd8b99be3406", "url": "https://github.com/vmware/singleton/commit/8a5a7562da2786afbfcd3d954bb3fd8b99be3406", "message": "Lower log level\nThrow exceptions", "committedDate": "2020-12-01T08:04:07Z", "type": "commit"}, {"oid": "7078045b1c985beabbd76b0a82696872ed9cf4d5", "url": "https://github.com/vmware/singleton/commit/7078045b1c985beabbd76b0a82696872ed9cf4d5", "message": "Fix test errors", "committedDate": "2020-12-01T08:15:29Z", "type": "commit"}]}