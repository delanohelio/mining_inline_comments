{"pr_number": 11190, "pr_title": "Add Parquet Compression option", "pr_createdAt": "2020-03-18T21:33:11Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11190", "timeline": [{"oid": "108d9b124d2a99a429a28154627acb3a10720bd3", "url": "https://github.com/Alluxio/alluxio/commit/108d9b124d2a99a429a28154627acb3a10720bd3", "message": "Add Parquet Compression option", "committedDate": "2020-03-18T21:31:51Z", "type": "commit"}, {"oid": "ce40b64ad3e95fba4687e0aa5f376f1a8059381b", "url": "https://github.com/Alluxio/alluxio/commit/ce40b64ad3e95fba4687e0aa5f376f1a8059381b", "message": "checkstyle", "committedDate": "2020-03-19T01:14:47Z", "type": "commit"}, {"oid": "76b16745ee9ed8a4d1f3c2c6f0e9df8f2c43a003", "url": "https://github.com/Alluxio/alluxio/commit/76b16745ee9ed8a4d1f3c2c6f0e9df8f2c43a003", "message": "add test", "committedDate": "2020-03-19T22:07:48Z", "type": "commit"}, {"oid": "cb37f5446bb01f12cec035bfc3a59fa61a2ca25f", "url": "https://github.com/Alluxio/alluxio/commit/cb37f5446bb01f12cec035bfc3a59fa61a2ca25f", "message": "Merge remote-tracking branch 'upstream/master' into parquet_compression", "committedDate": "2020-03-19T22:19:27Z", "type": "commit"}, {"oid": "af121548dc660cf95c176e338552a927841da30e", "url": "https://github.com/Alluxio/alluxio/commit/af121548dc660cf95c176e338552a927841da30e", "message": "checkstyle", "committedDate": "2020-03-19T22:30:14Z", "type": "commit"}, {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "url": "https://github.com/Alluxio/alluxio/commit/490ee32be25be2222ebfd840c9c4445d1dc848e4", "message": "undo this", "committedDate": "2020-03-19T22:30:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTE4OA==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397969188", "bodyText": "Should this have output partition too?", "author": "gpang", "createdAt": "2020-03-25T15:56:53Z", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -119,7 +131,7 @@ public boolean equals(Object obj) {\n       return false;\n     }\n     CompactConfig that = (CompactConfig) obj;\n-    return mPartitionInfo.equals(that.mPartitionInfo)\n+    return mInputPartitionInfo.equals(that.mInputPartitionInfo)", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTI2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397969262", "bodyText": "Should this have output partition too?", "author": "gpang", "createdAt": "2020-03-25T15:56:59Z", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -128,7 +140,7 @@ public boolean equals(Object obj) {\n \n   @Override\n   public int hashCode() {\n-    return Objects.hashCode(mPartitionInfo, mInput, mOutput, mMaxNumFiles, mMinFileSize);\n+    return Objects.hashCode(mInputPartitionInfo, mInput, mOutput, mMaxNumFiles, mMinFileSize);", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTMxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397969315", "bodyText": "Should this have output partition too?", "author": "gpang", "createdAt": "2020-03-25T15:57:04Z", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -138,7 +150,7 @@ public String toString() {\n         .add(\"output\", mOutput)\n         .add(\"maxNumFiles\", mMaxNumFiles)\n         .add(\"minFileSize\", mMinFileSize)\n-        .add(\"partitionInfo\", mPartitionInfo)\n+        .add(\"partitionInfo\", mInputPartitionInfo)", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MDcyNA==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397970724", "bodyText": "Why does this not look like other transform config properties, like \"file.count.max\"?", "author": "gpang", "createdAt": "2020-03-25T15:58:48Z", "path": "job/common/src/main/java/alluxio/job/plan/transform/PartitionInfo.java", "diffHunk": "@@ -27,6 +27,11 @@\n public class PartitionInfo implements Serializable {\n   private static final long serialVersionUID = 6905153658064056381L;\n \n+  /**\n+   * Key in Serde Properties to denote parquet compression method.\n+   */\n+  public static final String PARQUET_COMPRESSION = \"parquet.compression\";", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2OTU1Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r398069557", "bodyText": "Ah. Let me make it file.parquet.compression.", "author": "bradyoo", "createdAt": "2020-03-25T18:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MDcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MTQyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397971425", "bodyText": "if this is null, what does it do/mean?", "author": "gpang", "createdAt": "2020-03-25T15:59:39Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/TableWriter.java", "diffHunk": "@@ -25,11 +27,21 @@\n    * @param schema the table schema\n    * @param uri the URI to the output\n    * @return the writer for the output\n-   * @throws IOException when failed to create the writer\n    */\n   static TableWriter create(TableSchema schema, AlluxioURI uri) throws IOException {\n+    return create(schema, uri, null);\n+  }\n+\n+  /**\n+   * @param schema the table schema\n+   * @param uri the URI to the output\n+   * @param partitionInfo the writer for the output", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MTkyNg==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397971926", "bodyText": "can we add @Nullable?", "author": "gpang", "createdAt": "2020-03-25T16:00:18Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/parquet/ParquetWriter.java", "diffHunk": "@@ -55,11 +57,43 @@ private ParquetWriter(org.apache.parquet.hadoop.ParquetWriter<Record> writer) {\n    * @param schema the schema\n    * @param uri the URI to the output\n    * @return the writer\n-   * @throws IOException when failed to create the writer\n    */\n   public static ParquetWriter create(TableSchema schema, AlluxioURI uri)\n       throws IOException {\n-    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true);\n+    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true, DEFAULT_COMPRESSION_CODEC);\n+  }\n+\n+  /**\n+   * Creates a parquet writer based on the partitionInfo.\n+   *\n+   * @param schema the schema\n+   * @param uri the URI to the output\n+   * @param partitionInfo the partitionInfo\n+   * @return the writer\n+   */\n+  public static ParquetWriter create(TableSchema schema, AlluxioURI uri,\n+                                     PartitionInfo partitionInfo) throws IOException {", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MjEwMw==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397972103", "bodyText": "can we add that this could be null?", "author": "gpang", "createdAt": "2020-03-25T16:00:30Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/parquet/ParquetWriter.java", "diffHunk": "@@ -55,11 +57,43 @@ private ParquetWriter(org.apache.parquet.hadoop.ParquetWriter<Record> writer) {\n    * @param schema the schema\n    * @param uri the URI to the output\n    * @return the writer\n-   * @throws IOException when failed to create the writer\n    */\n   public static ParquetWriter create(TableSchema schema, AlluxioURI uri)\n       throws IOException {\n-    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true);\n+    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true, DEFAULT_COMPRESSION_CODEC);\n+  }\n+\n+  /**\n+   * Creates a parquet writer based on the partitionInfo.\n+   *\n+   * @param schema the schema\n+   * @param uri the URI to the output\n+   * @param partitionInfo the partitionInfo", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwODE4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r398008187", "bodyText": "the properties and the definition represent the same transformation, right? Then, can we just pass in one of them, and derive the other?", "author": "gpang", "createdAt": "2020-03-25T16:47:43Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformDefinition.java", "diffHunk": "@@ -26,18 +26,21 @@\n public class TransformDefinition {\n   private final String mDefinition;\n   private final List<TransformAction> mActions;\n+  private final Properties mProperties;\n \n   /**\n    * The user-provided definition is normalized by:\n    * 1. trimming whitespaces and semicolon from the beginning and end;\n    * 2. normalize to lower case.\n-   *\n-   * @param definition the string definition\n+   *  @param definition the string definition\n    * @param actions the list of actions\n+   * @param properties the list of properties extracted from definition\n    */\n-  private TransformDefinition(String definition, List<TransformAction> actions) {\n+  private TransformDefinition(String definition, List<TransformAction> actions,\n+                              Properties properties) {", "originalCommit": "490ee32be25be2222ebfd840c9c4445d1dc848e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwNDI5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r398104296", "bodyText": "We can. But I would like to do that later. This constructor is also not public and the way this constructor gets called is by taking a definition and getting the properties.", "author": "bradyoo", "createdAt": "2020-03-25T19:10:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwODE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MjcyNA==", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r400482724", "bodyText": "Does doing it later mean refactoring it later? I am fine with that. If so, can you leave a TODO?", "author": "gpang", "createdAt": "2020-03-30T20:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwODE4Nw=="}], "type": "inlineReview"}, {"oid": "7b1f58edfa9d00dcbfd8b6079b0eef4c7c4e5282", "url": "https://github.com/Alluxio/alluxio/commit/7b1f58edfa9d00dcbfd8b6079b0eef4c7c4e5282", "message": "feedback", "committedDate": "2020-03-25T19:10:37Z", "type": "commit"}, {"oid": "41729cce10b6cc99fe1851f0cb0dabec41f91f7e", "url": "https://github.com/Alluxio/alluxio/commit/41729cce10b6cc99fe1851f0cb0dabec41f91f7e", "message": "checkstyle", "committedDate": "2020-03-25T19:39:18Z", "type": "commit"}, {"oid": "978f11ad8f9def40dc54ab6b03d7c2376f0184e5", "url": "https://github.com/Alluxio/alluxio/commit/978f11ad8f9def40dc54ab6b03d7c2376f0184e5", "message": "fix test", "committedDate": "2020-03-25T22:22:49Z", "type": "commit"}, {"oid": "4e773b3301f19c608684dd2236ebfc7c483fb308", "url": "https://github.com/Alluxio/alluxio/commit/4e773b3301f19c608684dd2236ebfc7c483fb308", "message": "feedback", "committedDate": "2020-03-31T16:27:36Z", "type": "commit"}]}