{"pr_number": 11112, "pr_title": "Turn transform definition into configuration style", "pr_createdAt": "2020-03-03T22:46:21Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11112", "timeline": [{"oid": "2ebf580e23b40e1c68d3cf36dd587bb5ffebf3b6", "url": "https://github.com/Alluxio/alluxio/commit/2ebf580e23b40e1c68d3cf36dd587bb5ffebf3b6", "message": "[DO NOT MERGE] Turn transform definition into configuration style", "committedDate": "2020-03-03T22:45:10Z", "type": "commit"}, {"oid": "7bba6068f60fd36909fac8b6c86a2e2ff2a38f29", "url": "https://github.com/Alluxio/alluxio/commit/7bba6068f60fd36909fac8b6c86a2e2ff2a38f29", "message": "checkstyle and changed TransformPlan", "committedDate": "2020-03-04T17:57:58Z", "type": "commit"}, {"oid": "5cbacf348cd2ba22a5a9e4af273c6db0039b35bb", "url": "https://github.com/Alluxio/alluxio/commit/5cbacf348cd2ba22a5a9e4af273c6db0039b35bb", "message": "findbugs", "committedDate": "2020-03-04T18:00:06Z", "type": "commit"}, {"oid": "32a3eed0481964c6ad09f4fb73e874d9f341fd9a", "url": "https://github.com/Alluxio/alluxio/commit/32a3eed0481964c6ad09f4fb73e874d9f341fd9a", "message": "checkstyle, default transformation, and rename some CompactAction properties", "committedDate": "2020-03-04T18:57:38Z", "type": "commit"}, {"oid": "6a7de414ea9189893e95cb762e53c2433b7cb02d", "url": "https://github.com/Alluxio/alluxio/commit/6a7de414ea9189893e95cb762e53c2433b7cb02d", "message": "fix test", "committedDate": "2020-03-04T22:24:41Z", "type": "commit"}, {"oid": "d9d3219085048f4f5c284cb39c6616f494c52064", "url": "https://github.com/Alluxio/alluxio/commit/d9d3219085048f4f5c284cb39c6616f494c52064", "message": "fix test. Remove unnecessary exception messages", "committedDate": "2020-03-04T22:51:37Z", "type": "commit"}, {"oid": "0f4ceae326afc7cc26a385f146bdc9edb58b0b09", "url": "https://github.com/Alluxio/alluxio/commit/0f4ceae326afc7cc26a385f146bdc9edb58b0b09", "message": "Merge remote-tracking branch 'upstream/master' into transform_definition", "committedDate": "2020-03-04T23:02:02Z", "type": "commit"}, {"oid": "76023d466e6324849965032646f2a16e09114c54", "url": "https://github.com/Alluxio/alluxio/commit/76023d466e6324849965032646f2a16e09114c54", "message": "Delete unnecessary test", "committedDate": "2020-03-04T23:12:58Z", "type": "commit"}, {"oid": "9fe124eaa9e76a2e5e56e692881f4ab422060992", "url": "https://github.com/Alluxio/alluxio/commit/9fe124eaa9e76a2e5e56e692881f4ab422060992", "message": "fix test", "committedDate": "2020-03-04T23:46:49Z", "type": "commit"}, {"oid": "941d240b112c33c5b9e7f1a73607717e5a12caf3", "url": "https://github.com/Alluxio/alluxio/commit/941d240b112c33c5b9e7f1a73607717e5a12caf3", "message": "fix tests", "committedDate": "2020-03-05T16:58:05Z", "type": "commit"}, {"oid": "41747ec06ea276c3c1e71f4f43f6a3f6d3567d87", "url": "https://github.com/Alluxio/alluxio/commit/41747ec06ea276c3c1e71f4f43f6a3f6d3567d87", "message": "remove redundant trim", "committedDate": "2020-03-05T16:59:41Z", "type": "commit"}, {"oid": "672579f5de85adc4bc63e9f6712cd94c8b0e4c62", "url": "https://github.com/Alluxio/alluxio/commit/672579f5de85adc4bc63e9f6712cd94c8b0e4c62", "message": "Merge remote-tracking branch 'upstream/master' into transform_definition", "committedDate": "2020-03-05T17:11:07Z", "type": "commit"}, {"oid": "74f7cc97ce1c65a059174c224280b288bcf09613", "url": "https://github.com/Alluxio/alluxio/commit/74f7cc97ce1c65a059174c224280b288bcf09613", "message": "resolve the rest properly", "committedDate": "2020-03-05T17:50:17Z", "type": "commit"}, {"oid": "20afb96836623c70554766778150420945230f2a", "url": "https://github.com/Alluxio/alluxio/commit/20afb96836623c70554766778150420945230f2a", "message": "checkstyle", "committedDate": "2020-03-05T18:06:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTE0MA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389099140", "bodyText": "Do we have to get rid of this?", "author": "gpang", "createdAt": "2020-03-06T19:31:34Z", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -44,10 +44,6 @@\n    * Compacted files are stored under this directory.\n    */\n   private final String mOutput;\n-  /**\n-   * The type of database to write the compacted table to.\n-   */\n-  private final String mDatabaseType;", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MzI5MA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389173290", "bodyText": "not necessarily. But it's really odd because it's basically unused.", "author": "bradyoo", "createdAt": "2020-03-06T22:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDA0NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389100045", "bodyText": "NIT: update the javadoc", "author": "gpang", "createdAt": "2020-03-06T19:33:32Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java", "diffHunk": "@@ -18,24 +18,20 @@\n \n import com.google.common.base.Preconditions;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n \n-import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n \n /**\n  * The definition of the write action.", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDk1NA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389100954", "bodyText": "what happens with actions with the same number?", "author": "gpang", "createdAt": "2020-03-06T19:35:33Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MzUxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389173519", "bodyText": "current behavior is undefined. Would we prefer to define it?", "author": "bradyoo", "createdAt": "2020-03-06T22:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDk1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNDI2Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390424267", "bodyText": "it doesnt have to be defined now, but at least the javadoc should state that the behavior is undefined.", "author": "gpang", "createdAt": "2020-03-10T15:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMzQyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389103425", "bodyText": "Could name still be useful? Or does class name provide the same functionality as name?", "author": "gpang", "createdAt": "2020-03-06T19:39:16Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MzkxNA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389173914", "bodyText": "name was previously used to determine the name of the function which doesn't have a use anymore. We could do something that warrants reintroduction but nothing yet.", "author": "bradyoo", "createdAt": "2020-03-06T22:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMzQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwNzQxNw==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389107417", "bodyText": "do we have a test for ordering?", "author": "gpang", "createdAt": "2020-03-06T19:43:49Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();\n+  default int getOrder() {\n+    return 100;", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDA1NA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174054", "bodyText": "Nothing here because there are no other TransformActions.", "author": "bradyoo", "createdAt": "2020-03-06T22:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwNzQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjgzMw==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389126833", "bodyText": "is there a way to avoid this traversal, and look it up somehow?", "author": "gpang", "createdAt": "2020-03-06T20:25:54Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {\n+    final ArrayList<TransformAction> actions = new ArrayList<>();\n+    for (TransformActionFactory factory : FACTORIES) {", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDM0MA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174340", "bodyText": "It may be worth it when FACTORIES is a longer list, but it's just so short right now..", "author": "bradyoo", "createdAt": "2020-03-06T22:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTA1NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390425055", "bodyText": "I see, then can we add a TODO mentioning that possible improvement for the future?", "author": "gpang", "createdAt": "2020-03-10T15:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzA0NA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389127044", "bodyText": "if it is null, how does the error handling work?", "author": "gpang", "createdAt": "2020-03-06T20:26:21Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {\n+    final ArrayList<TransformAction> actions = new ArrayList<>();\n+    for (TransformActionFactory factory : FACTORIES) {\n+      final TransformAction transformAction = factory.create(definition);\n+      if (transformAction != null) {", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDQ2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174469", "bodyText": "it's not an error for it be to null. It means that the action is unnecessary.", "author": "bradyoo", "createdAt": "2020-03-06T22:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzM5NA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389127394", "bodyText": "Why does this return a list of actions? Can you update javadoc description and return comment.", "author": "gpang", "createdAt": "2020-03-06T20:27:10Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNjM2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390426362", "bodyText": "Can you update the javadoc with the return description and method description? (why is it a list?)", "author": "gpang", "createdAt": "2020-03-10T16:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzcyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389127725", "bodyText": "Do you have an example of this string? What does it print if it no longer has a name?", "author": "gpang", "createdAt": "2020-03-06T20:27:53Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -59,14 +59,9 @@ private static void refresh() {\n     FACTORIES.clear();\n     for (TransformActionFactory factory : ServiceLoader\n         .load(TransformActionFactory.class, TransformActionFactory.class.getClassLoader())) {\n-      TransformActionFactory existingFactory = FACTORIES.get(factory.getName());\n-      if (existingFactory != null) {\n-        LOG.warn(\n-            \"Ignoring duplicate transform action '{}' found in factory {}. Existing factory: {}\",\n-            factory.getName(), factory.getClass(), existingFactory.getClass());\n-      }\n-      FACTORIES.put(factory.getName(), factory);\n+      FACTORIES.add(factory);\n     }\n-    LOG.info(\"Registered Transform actions: \" + String.join(\",\", FACTORIES.keySet()));\n+    FACTORIES.sort(Comparator.comparingInt((factory) -> factory.getOrder()));\n+    LOG.info(\"Registered Transform actions: \" + StringUtils.join(FACTORIES, \",\"));", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNzExOA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390427118", "bodyText": "Can you comment on what this would look like?", "author": "gpang", "createdAt": "2020-03-10T16:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NzMzOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390477339", "bodyText": "Registered Transform actions: alluxio.table.common.transform.action.EarlyActionFactory@4909b8da,CompactActionFactory,alluxio.table.common.transform.action.LateActionFactory@3a03464\nCompactActionFactory has a toString implementation, the other 2 don't.", "author": "bradyoo", "createdAt": "2020-03-10T17:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTI4OA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389155288", "bodyText": "What is this for?", "author": "gpang", "createdAt": "2020-03-06T21:34:22Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformPlan.java", "diffHunk": "@@ -44,23 +42,29 @@\n    * @param definition the transformation definition\n    */\n   public TransformPlan(Layout baseLayout, Layout transformedLayout,\n-      TransformDefinition definition) {\n+                       TransformDefinition definition) {\n     mBaseLayout = baseLayout;\n     mTransformedLayout = transformedLayout;\n     mJobConfigs = computeJobConfigs(definition);\n   }\n \n   private ArrayList<JobConfig> computeJobConfigs(TransformDefinition definition) {\n-    final List<TransformAction> actions = definition.getActions();\n+    ArrayList<JobConfig> actions = new ArrayList<>();\n+    Layout baseLayout = mBaseLayout;\n+    boolean deleteSrc = false;", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDkwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174909", "bodyText": "It's for the case when transformations need to be chained and therefore, for every transformation after the first, you need to deleteSrc.", "author": "bradyoo", "createdAt": "2020-03-06T22:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTY1NA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389155654", "bodyText": "is this allowed to return null as a return value?", "author": "gpang", "createdAt": "2020-03-06T21:35:20Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java", "diffHunk": "@@ -48,42 +44,49 @@\n   /**\n    * Factory to create an instance.\n    */\n-  public static class WriteActionFactory implements TransformActionFactory {\n+  public static class CompactActionFactory implements TransformActionFactory {\n+\n     @Override\n-    public String getName() {\n-      return NAME;\n+    public int getOrder() {\n+      return 0;\n     }\n \n     @Override\n-    public TransformAction create(String definition, List<String> args,\n-        Map<String, String> options) {\n-      Preconditions.checkArgument(args.size() == 1,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_ARGS.toString());\n-      String type = args.get(0);\n-      int numFiles = options.containsKey(NUM_FILES_OPTION)\n-          ? Integer.parseInt(options.get(NUM_FILES_OPTION))\n-          : DEFAULT_NUM_FILES;\n-      long fileSize = options.containsKey(FILE_SIZE_OPTION)\n-          ? Long.parseLong(options.get(FILE_SIZE_OPTION))\n-          : DEFAULT_FILE_SIZE;\n-      Preconditions.checkArgument(numFiles >= 0,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES);\n-      return new WriteAction(type, numFiles, fileSize);\n+    public TransformAction create(Properties properties) {\n+      final String numFilesString = properties.getProperty(NUM_FILES_OPTION);\n+\n+      final String fileSizeString = properties.getProperty(FILE_SIZE_OPTION);\n+\n+      if (StringUtils.isEmpty(numFilesString) && StringUtils.isEmpty(fileSizeString)) {\n+        return null;", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDk5MA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174990", "bodyText": "Yes. That means Compact is unnecessary.", "author": "bradyoo", "createdAt": "2020-03-06T22:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NjM1MA==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389156350", "bodyText": "Is there a test that tests for normalization of transformation definitions?", "author": "gpang", "createdAt": "2020-03-06T21:37:03Z", "path": "table/server/common/src/test/java/alluxio/table/common/transform/TransformDefinitionTest.java", "diffHunk": "@@ -24,44 +25,46 @@\n   @Test\n   public void parse() {", "originalCommit": "20afb96836623c70554766778150420945230f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e35109743181ee97851853d1564a77a562a546d2", "url": "https://github.com/Alluxio/alluxio/commit/e35109743181ee97851853d1564a77a562a546d2", "message": "Feedback", "committedDate": "2020-03-09T21:14:27Z", "type": "commit"}, {"oid": "029bb90f5d9678d73d32522da82fa62ae8ed3994", "url": "https://github.com/Alluxio/alluxio/commit/029bb90f5d9678d73d32522da82fa62ae8ed3994", "message": "checkstyle", "committedDate": "2020-03-09T22:42:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTYyMg==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390425622", "bodyText": "can you add to the javadoc on what a null return value is supposed to represent?", "author": "gpang", "createdAt": "2020-03-10T16:00:33Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();\n+  default int getOrder() {\n+    return 100;\n+  }\n \n   /**\n    * @param definition the raw definition of the action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  TransformAction create(String definition, List<String> args, Map<String, String> options);\n+  @Nullable", "originalCommit": "029bb90f5d9678d73d32522da82fa62ae8ed3994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNzAwMw==", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390427003", "bodyText": "please add a newline at the end of the file", "author": "gpang", "createdAt": "2020-03-10T16:02:22Z", "path": "table/server/common/src/test/resources/META-INF/services/alluxio.table.common.transform.action.TransformActionFactory", "diffHunk": "@@ -0,0 +1,2 @@\n+alluxio.table.common.transform.action.EarlyActionFactory\n+alluxio.table.common.transform.action.LateActionFactory", "originalCommit": "029bb90f5d9678d73d32522da82fa62ae8ed3994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1bd1fac4862eb9d3f15610e8fb2a6ba6860e95b5", "url": "https://github.com/Alluxio/alluxio/commit/1bd1fac4862eb9d3f15610e8fb2a6ba6860e95b5", "message": "review", "committedDate": "2020-03-10T17:19:40Z", "type": "commit"}, {"oid": "f557ee89f64bf8a1349b1251250f250ec5ace94f", "url": "https://github.com/Alluxio/alluxio/commit/f557ee89f64bf8a1349b1251250f250ec5ace94f", "message": "fix test", "committedDate": "2020-03-10T17:35:44Z", "type": "commit"}]}