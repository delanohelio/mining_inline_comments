{"pr_number": 11458, "pr_title": "Refactor and fix block-transfer partitioner", "pr_createdAt": "2020-05-21T01:14:00Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11458", "timeline": [{"oid": "1cb1ced342ec0e621ab33fe37d7680c39a9989ae", "url": "https://github.com/Alluxio/alluxio/commit/1cb1ced342ec0e621ab33fe37d7680c39a9989ae", "message": "Improve and fix block transfer partitioner", "committedDate": "2020-05-20T09:23:16Z", "type": "commit"}, {"oid": "f2d22331a34758bff4ff54d0872dd358461f0d51", "url": "https://github.com/Alluxio/alluxio/commit/f2d22331a34758bff4ff54d0872dd358461f0d51", "message": "Rename disk-parallelism property as concurrency-limit", "committedDate": "2020-05-20T09:50:20Z", "type": "commit"}, {"oid": "cab476fcfc9f5f5556f4b896660a496b30260c76", "url": "https://github.com/Alluxio/alluxio/commit/cab476fcfc9f5f5556f4b896660a496b30260c76", "message": "Carve out block-transfer partitioner and add a unit-test", "committedDate": "2020-05-21T01:12:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5ODkyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11458#discussion_r428398921", "bodyText": "Remove this.", "author": "ggezer", "createdAt": "2020-05-21T01:38:27Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/management/ManagementTaskCoordinator.java", "diffHunk": "@@ -187,6 +187,7 @@ private void runManagement() {\n               e);\n         }\n         LOG.debug(\"Management task finished: {}\", currentTask.getClass().getSimpleName());\n+        Thread.sleep(mLoadDetectionCoolDownMs);", "originalCommit": "1cb1ced342ec0e621ab33fe37d7680c39a9989ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0894d6c397b77db722ca4aef6865c0de16ee124", "url": "https://github.com/Alluxio/alluxio/commit/a0894d6c397b77db722ca4aef6865c0de16ee124", "message": "Remove left-over sleep directive", "committedDate": "2020-05-21T01:41:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyOTA5NA==", "url": "https://github.com/Alluxio/alluxio/pull/11458#discussion_r430729094", "bodyText": "Prefer Hashmap over Hashtable, unless there is a reason we need the concurrency guarantees for Hashtable?", "author": "calvinjia", "createdAt": "2020-05-26T21:53:49Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/management/BlockTransferPartitioner.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.management;\n+\n+import alluxio.worker.block.BlockStoreLocation;\n+import alluxio.worker.block.evictor.BlockTransferInfo;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Used to partition transfers for concurrent execution.\n+ */\n+public class BlockTransferPartitioner {\n+  private static final Logger LOG = LoggerFactory.getLogger(BlockTransferPartitioner.class);\n+\n+  /**\n+   * It greedily partitions given transfers into sub-lists.\n+   *\n+   * @param transferInfos list of transfers to partition\n+   * @param maxPartitionCount max partition count\n+   * @return transfers partitioned into sub-lists\n+   */\n+  public List<List<BlockTransferInfo>> partitionTransfers(List<BlockTransferInfo> transferInfos,\n+      int maxPartitionCount) {\n+    // Bucketing is possible if source or destination has exact location.\n+    // Those allocated locations will be bucket key[s].\n+    TransferPartitionKey key = findTransferBucketKey(transferInfos);\n+    // Can't bucketize transfers.\n+    if (key == TransferPartitionKey.NONE) {\n+      LOG.debug(\"Un-optimizable transfer list encountered.\");\n+      return new ArrayList<List<BlockTransferInfo>>() {\n+        {\n+          add(transferInfos);\n+        }\n+      };\n+    }\n+\n+    Hashtable<BlockStoreLocation, List<BlockTransferInfo>> transferBuckets = new Hashtable<>();", "originalCommit": "a0894d6c397b77db722ca4aef6865c0de16ee124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyOTQ2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11458#discussion_r430729469", "bodyText": "Do we want to count ANY_DIRs?", "author": "calvinjia", "createdAt": "2020-05-26T21:54:49Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/management/BlockTransferPartitioner.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.management;\n+\n+import alluxio.worker.block.BlockStoreLocation;\n+import alluxio.worker.block.evictor.BlockTransferInfo;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Used to partition transfers for concurrent execution.\n+ */\n+public class BlockTransferPartitioner {\n+  private static final Logger LOG = LoggerFactory.getLogger(BlockTransferPartitioner.class);\n+\n+  /**\n+   * It greedily partitions given transfers into sub-lists.\n+   *\n+   * @param transferInfos list of transfers to partition\n+   * @param maxPartitionCount max partition count\n+   * @return transfers partitioned into sub-lists\n+   */\n+  public List<List<BlockTransferInfo>> partitionTransfers(List<BlockTransferInfo> transferInfos,\n+      int maxPartitionCount) {\n+    // Bucketing is possible if source or destination has exact location.\n+    // Those allocated locations will be bucket key[s].\n+    TransferPartitionKey key = findTransferBucketKey(transferInfos);\n+    // Can't bucketize transfers.\n+    if (key == TransferPartitionKey.NONE) {\n+      LOG.debug(\"Un-optimizable transfer list encountered.\");\n+      return new ArrayList<List<BlockTransferInfo>>() {\n+        {\n+          add(transferInfos);\n+        }\n+      };\n+    }\n+\n+    Hashtable<BlockStoreLocation, List<BlockTransferInfo>> transferBuckets = new Hashtable<>();\n+    for (BlockTransferInfo transferInfo : transferInfos) {\n+      BlockStoreLocation keyLoc;\n+      switch (key) {\n+        case SRC:\n+          keyLoc = transferInfo.getSrcLocation();\n+          break;\n+        case DST:\n+          keyLoc = transferInfo.getDstLocation();\n+          break;\n+        default:\n+          throw new IllegalStateException(\n+              String.format(\"Unsupported key type for bucketing transfer infos: %s\", key.name()));\n+      }\n+\n+      if (!transferBuckets.containsKey(keyLoc)) {\n+        transferBuckets.put(keyLoc, new LinkedList<>());\n+      }\n+\n+      transferBuckets.get(keyLoc).add(transferInfo);\n+    }\n+\n+    List<List<BlockTransferInfo>> balancedPartitions = balancePartitions(\n+        transferBuckets.values().stream().collect(Collectors.toList()), maxPartitionCount);\n+\n+    // Log partition details.\n+    if (LOG.isDebugEnabled()) {\n+      StringBuilder partitionDbgStr = new StringBuilder();\n+      partitionDbgStr\n+          .append(String.format(\"Bucketed %d transfers into %d partitions using key:%s.%n\",\n+              transferInfos.size(), balancedPartitions.size(), key.name()));\n+      // List each partition content.\n+      for (int i = 0; i < balancedPartitions.size(); i++) {\n+        partitionDbgStr.append(String.format(\"Partition-%d:%n ->%s%n\", i, balancedPartitions.get(i)\n+            .stream().map(Objects::toString).collect(Collectors.joining(\"\\n ->\"))));\n+      }\n+      LOG.debug(partitionDbgStr.toString());\n+    }\n+    return balancedPartitions;\n+  }\n+\n+  /**\n+   * Used to balance partitions into given bucket count. It greedily tries to achieve each bucket\n+   * having close count of tasks.\n+   */\n+  private List<List<BlockTransferInfo>> balancePartitions(\n+      List<List<BlockTransferInfo>> transferPartitions, int partitionLimit) {\n+    // Return as is if less than requested bucket count.\n+    if (transferPartitions.size() <= partitionLimit) {\n+      return transferPartitions;\n+    }\n+\n+    // TODO(ggezer): Support partitioning that considers block sizes.\n+    // Greedily build a balanced partitions by transfer count.\n+    Collections.sort(transferPartitions, Comparator.comparingInt(List::size));\n+\n+    // Initialize balanced partitions.\n+    List<List<BlockTransferInfo>> balancedPartitions = new ArrayList<>(partitionLimit);\n+    for (int i = 0; i < partitionLimit; i++) {\n+      balancedPartitions.add(new LinkedList<>());\n+    }\n+    // Greedily place transfer partitions into balanced partitions.\n+    for (List<BlockTransferInfo> transferPartition : transferPartitions) {\n+      // Find the balanced partition with the least element size.\n+      int selectedPartitionIdx = Integer.MAX_VALUE;\n+      int selectedPartitionCount = Integer.MAX_VALUE;\n+      for (int i = 0; i < partitionLimit; i++) {\n+        if (balancedPartitions.get(i).size() < selectedPartitionCount) {\n+          selectedPartitionIdx = i;\n+          selectedPartitionCount = balancedPartitions.get(i).size();\n+        }\n+      }\n+      balancedPartitions.get(selectedPartitionIdx).addAll(transferPartition);\n+    }\n+\n+    return balancedPartitions;\n+  }\n+\n+  /**\n+   * Used to determine right partitioning key by inspecting list of transfers.\n+   */\n+  private TransferPartitionKey findTransferBucketKey(List<BlockTransferInfo> transferInfos) {\n+    // How many src/dst locations are fully identified.\n+    int srcAllocatedCount = 0;\n+    int dstAllocatedCount = 0;\n+    // How many unique src/dst locations are seen.\n+    Set<BlockStoreLocation> srcLocations = new HashSet<>();\n+    Set<BlockStoreLocation> dstLocations = new HashSet<>();\n+    // Iterate and process all transfers.\n+    for (BlockTransferInfo transferInfo : transferInfos) {\n+      if (transferInfo.getSrcLocation().dir() != BlockStoreLocation.ANY_DIR) {\n+        srcAllocatedCount++;\n+      }\n+      if (transferInfo.getDstLocation().dir() != BlockStoreLocation.ANY_DIR) {\n+        dstAllocatedCount++;\n+      }\n+      srcLocations.add(transferInfo.getSrcLocation());", "originalCommit": "a0894d6c397b77db722ca4aef6865c0de16ee124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczNzc5NA==", "url": "https://github.com/Alluxio/alluxio/pull/11458#discussion_r430737794", "bodyText": "No, ANY_DIR means unallocated in this context, directory being the allocation unit. If a directory is not known, then it's not right to account it for dir level optimizations.", "author": "ggezer", "createdAt": "2020-05-26T22:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyOTQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjgzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11458#discussion_r431316831", "bodyText": "I meant if we should be adding ANY_DIR to src/dstLocations?", "author": "calvinjia", "createdAt": "2020-05-27T17:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyOTQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyOTgxNw==", "url": "https://github.com/Alluxio/alluxio/pull/11458#discussion_r430729817", "bodyText": "This comment is not always true right? Since we don't check == transferInfo.size?", "author": "calvinjia", "createdAt": "2020-05-26T21:55:40Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/management/BlockTransferPartitioner.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.management;\n+\n+import alluxio.worker.block.BlockStoreLocation;\n+import alluxio.worker.block.evictor.BlockTransferInfo;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Used to partition transfers for concurrent execution.\n+ */\n+public class BlockTransferPartitioner {\n+  private static final Logger LOG = LoggerFactory.getLogger(BlockTransferPartitioner.class);\n+\n+  /**\n+   * It greedily partitions given transfers into sub-lists.\n+   *\n+   * @param transferInfos list of transfers to partition\n+   * @param maxPartitionCount max partition count\n+   * @return transfers partitioned into sub-lists\n+   */\n+  public List<List<BlockTransferInfo>> partitionTransfers(List<BlockTransferInfo> transferInfos,\n+      int maxPartitionCount) {\n+    // Bucketing is possible if source or destination has exact location.\n+    // Those allocated locations will be bucket key[s].\n+    TransferPartitionKey key = findTransferBucketKey(transferInfos);\n+    // Can't bucketize transfers.\n+    if (key == TransferPartitionKey.NONE) {\n+      LOG.debug(\"Un-optimizable transfer list encountered.\");\n+      return new ArrayList<List<BlockTransferInfo>>() {\n+        {\n+          add(transferInfos);\n+        }\n+      };\n+    }\n+\n+    Hashtable<BlockStoreLocation, List<BlockTransferInfo>> transferBuckets = new Hashtable<>();\n+    for (BlockTransferInfo transferInfo : transferInfos) {\n+      BlockStoreLocation keyLoc;\n+      switch (key) {\n+        case SRC:\n+          keyLoc = transferInfo.getSrcLocation();\n+          break;\n+        case DST:\n+          keyLoc = transferInfo.getDstLocation();\n+          break;\n+        default:\n+          throw new IllegalStateException(\n+              String.format(\"Unsupported key type for bucketing transfer infos: %s\", key.name()));\n+      }\n+\n+      if (!transferBuckets.containsKey(keyLoc)) {\n+        transferBuckets.put(keyLoc, new LinkedList<>());\n+      }\n+\n+      transferBuckets.get(keyLoc).add(transferInfo);\n+    }\n+\n+    List<List<BlockTransferInfo>> balancedPartitions = balancePartitions(\n+        transferBuckets.values().stream().collect(Collectors.toList()), maxPartitionCount);\n+\n+    // Log partition details.\n+    if (LOG.isDebugEnabled()) {\n+      StringBuilder partitionDbgStr = new StringBuilder();\n+      partitionDbgStr\n+          .append(String.format(\"Bucketed %d transfers into %d partitions using key:%s.%n\",\n+              transferInfos.size(), balancedPartitions.size(), key.name()));\n+      // List each partition content.\n+      for (int i = 0; i < balancedPartitions.size(); i++) {\n+        partitionDbgStr.append(String.format(\"Partition-%d:%n ->%s%n\", i, balancedPartitions.get(i)\n+            .stream().map(Objects::toString).collect(Collectors.joining(\"\\n ->\"))));\n+      }\n+      LOG.debug(partitionDbgStr.toString());\n+    }\n+    return balancedPartitions;\n+  }\n+\n+  /**\n+   * Used to balance partitions into given bucket count. It greedily tries to achieve each bucket\n+   * having close count of tasks.\n+   */\n+  private List<List<BlockTransferInfo>> balancePartitions(\n+      List<List<BlockTransferInfo>> transferPartitions, int partitionLimit) {\n+    // Return as is if less than requested bucket count.\n+    if (transferPartitions.size() <= partitionLimit) {\n+      return transferPartitions;\n+    }\n+\n+    // TODO(ggezer): Support partitioning that considers block sizes.\n+    // Greedily build a balanced partitions by transfer count.\n+    Collections.sort(transferPartitions, Comparator.comparingInt(List::size));\n+\n+    // Initialize balanced partitions.\n+    List<List<BlockTransferInfo>> balancedPartitions = new ArrayList<>(partitionLimit);\n+    for (int i = 0; i < partitionLimit; i++) {\n+      balancedPartitions.add(new LinkedList<>());\n+    }\n+    // Greedily place transfer partitions into balanced partitions.\n+    for (List<BlockTransferInfo> transferPartition : transferPartitions) {\n+      // Find the balanced partition with the least element size.\n+      int selectedPartitionIdx = Integer.MAX_VALUE;\n+      int selectedPartitionCount = Integer.MAX_VALUE;\n+      for (int i = 0; i < partitionLimit; i++) {\n+        if (balancedPartitions.get(i).size() < selectedPartitionCount) {\n+          selectedPartitionIdx = i;\n+          selectedPartitionCount = balancedPartitions.get(i).size();\n+        }\n+      }\n+      balancedPartitions.get(selectedPartitionIdx).addAll(transferPartition);\n+    }\n+\n+    return balancedPartitions;\n+  }\n+\n+  /**\n+   * Used to determine right partitioning key by inspecting list of transfers.\n+   */\n+  private TransferPartitionKey findTransferBucketKey(List<BlockTransferInfo> transferInfos) {\n+    // How many src/dst locations are fully identified.\n+    int srcAllocatedCount = 0;\n+    int dstAllocatedCount = 0;\n+    // How many unique src/dst locations are seen.\n+    Set<BlockStoreLocation> srcLocations = new HashSet<>();\n+    Set<BlockStoreLocation> dstLocations = new HashSet<>();\n+    // Iterate and process all transfers.\n+    for (BlockTransferInfo transferInfo : transferInfos) {\n+      if (transferInfo.getSrcLocation().dir() != BlockStoreLocation.ANY_DIR) {\n+        srcAllocatedCount++;\n+      }\n+      if (transferInfo.getDstLocation().dir() != BlockStoreLocation.ANY_DIR) {\n+        dstAllocatedCount++;\n+      }\n+      srcLocations.add(transferInfo.getSrcLocation());\n+      dstLocations.add(transferInfo.getDstLocation());\n+    }\n+\n+    // Find the desired partitioning key.\n+    if (srcAllocatedCount == dstAllocatedCount) { // All locations are fully identified.", "originalCommit": "a0894d6c397b77db722ca4aef6865c0de16ee124", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0MDgzNA==", "url": "https://github.com/Alluxio/alluxio/pull/11458#discussion_r430740834", "bodyText": "Refactored the whole flow.", "author": "ggezer", "createdAt": "2020-05-26T22:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyOTgxNw=="}], "type": "inlineReview"}, {"oid": "d9b6700b9992780dc5bd8a0bea049a972e5346fe", "url": "https://github.com/Alluxio/alluxio/commit/d9b6700b9992780dc5bd8a0bea049a972e5346fe", "message": "Refactor partitioning decision flow", "committedDate": "2020-05-26T22:26:12Z", "type": "commit"}, {"oid": "f68c61a0e1791fccbed5ef043fe68d617f96ffef", "url": "https://github.com/Alluxio/alluxio/commit/f68c61a0e1791fccbed5ef043fe68d617f96ffef", "message": "Fix faulty test case", "committedDate": "2020-05-26T23:39:05Z", "type": "commit"}, {"oid": "49f4e702ee4fae5553c6af1e4670cb90b74644ff", "url": "https://github.com/Alluxio/alluxio/commit/49f4e702ee4fae5553c6af1e4670cb90b74644ff", "message": "Merge remote-tracking branch 'upstream/master' into refactor-partitioner", "committedDate": "2020-05-27T19:03:24Z", "type": "commit"}, {"oid": "1d9bf2b649a6e77f67f016a3cd175eb4e8bf0e40", "url": "https://github.com/Alluxio/alluxio/commit/1d9bf2b649a6e77f67f016a3cd175eb4e8bf0e40", "message": "Resolve conflicts", "committedDate": "2020-05-27T19:03:43Z", "type": "commit"}]}