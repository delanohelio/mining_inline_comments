{"pr_number": 10845, "pr_title": "Choose HDFS read API based on Client buffer size", "pr_createdAt": "2020-02-05T00:07:11Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10845", "timeline": [{"oid": "715344b6ab4e78a7fca108ca5a465cfd6e225fe6", "url": "https://github.com/Alluxio/alluxio/commit/715344b6ab4e78a7fca108ca5a465cfd6e225fe6", "message": "Switch to read instead of pread for large client buffer sizes", "committedDate": "2020-02-05T00:01:15Z", "type": "commit"}, {"oid": "b525a715cb450c4b0c950830464b420bb1c2e6c1", "url": "https://github.com/Alluxio/alluxio/commit/b525a715cb450c4b0c950830464b420bb1c2e6c1", "message": "Fix build", "committedDate": "2020-02-05T00:14:07Z", "type": "commit"}, {"oid": "28f92fda3774533ee9b2d5a6dfa4b8f2faecb1eb", "url": "https://github.com/Alluxio/alluxio/commit/28f92fda3774533ee9b2d5a6dfa4b8f2faecb1eb", "message": "Fix implementation", "committedDate": "2020-02-05T19:34:07Z", "type": "commit"}, {"oid": "49cbff932b2ef8379896a6c9b0df669109c5f1f4", "url": "https://github.com/Alluxio/alluxio/commit/49cbff932b2ef8379896a6c9b0df669109c5f1f4", "message": "Refactor option", "committedDate": "2020-02-07T04:05:06Z", "type": "commit"}, {"oid": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172", "url": "https://github.com/Alluxio/alluxio/commit/0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172", "message": "Switch option usage", "committedDate": "2020-02-07T04:08:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MjU0OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377852549", "bodyText": "Does this option only apply to positioned reads or also reads through the read API?", "author": "calvinjia", "createdAt": "2020-02-11T19:33:02Z", "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "diffHunk": "@@ -233,6 +234,11 @@ private int positionedReadInternal(long pos, byte[] b, int off, int len) throws\n       return -1;\n     }\n \n+    LOG.info(\"AMDEBUG pread len {} \", len);\n+    if (len < 2 * Constants.MB) {\n+      LOG.info(\"AMDEBUG set for pread len {} \", len);\n+      mOptions.setPositionShort(true);", "originalCommit": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4ODc2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377888769", "bodyText": "only applies to pread. reads through the read API always are assumed to be sequential by this heuristic", "author": "madanadit", "createdAt": "2020-02-11T20:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MjU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MzEyNg==", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377853126", "bodyText": "I think it is good to have our heuristic to cover the typical case, but should we check if it has been set to allow the user to override?", "author": "calvinjia", "createdAt": "2020-02-11T19:34:12Z", "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "diffHunk": "@@ -233,6 +234,11 @@ private int positionedReadInternal(long pos, byte[] b, int off, int len) throws\n       return -1;\n     }\n \n+    LOG.info(\"AMDEBUG pread len {} \", len);\n+    if (len < 2 * Constants.MB) {", "originalCommit": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4OTI4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377889289", "bodyText": "yep, i'll make this a client config which can be overridden by the user", "author": "madanadit", "createdAt": "2020-02-11T20:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MzEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDY1MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377854651", "bodyText": "Do we end up caching this stream anywhere, if so would it be a problem if it is a certain type?", "author": "calvinjia", "createdAt": "2020-02-11T19:37:13Z", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "diffHunk": "@@ -563,10 +563,21 @@ public InputStream open(String path, OpenOptions options) throws IOException {\n     while (retryPolicy.attempt()) {\n       try {\n         FSDataInputStream inputStream = hdfs.open(new Path(path));\n-        // pread API instead of seek is more efficient for FSDataInputStream.\n-        // A seek on FSDataInputStream uses a skip op which is implemented as read + discard\n-        // and hence ends up reading extra data from the datanode.\n-        return new HdfsPositionedUnderFileInputStream(inputStream, options.getOffset());\n+        if (options.getPositionShort()) {\n+          LOG.info(\"AMDEBUG: using pread\");\n+          // pread API instead of seek is more efficient for FSDataInputStream.\n+          // A seek on FSDataInputStream uses a skip op which is implemented as read + discard\n+          // and hence ends up reading extra data from the datanode.\n+          return new HdfsPositionedUnderFileInputStream(inputStream, options.getOffset());", "originalCommit": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5MzgzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377893831", "bodyText": "I just grepped our codebase, doesn't look like we do, so we should be fine", "author": "madanadit", "createdAt": "2020-02-11T20:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDY1MQ=="}], "type": "inlineReview"}, {"oid": "50bd3cbbbdecb05233f2be055f0c88a200fb56ba", "url": "https://github.com/Alluxio/alluxio/commit/50bd3cbbbdecb05233f2be055f0c88a200fb56ba", "message": "Refactor", "committedDate": "2020-02-11T21:45:58Z", "type": "commit"}, {"oid": "6f8ecb417cbdd66f3064c2d0eececda5b5c568f6", "url": "https://github.com/Alluxio/alluxio/commit/6f8ecb417cbdd66f3064c2d0eececda5b5c568f6", "message": "Fix style", "committedDate": "2020-02-11T22:07:18Z", "type": "commit"}, {"oid": "58a3f7c120dbac438a43da5c29655b2f01c08ff7", "url": "https://github.com/Alluxio/alluxio/commit/58a3f7c120dbac438a43da5c29655b2f01c08ff7", "message": "Fix style", "committedDate": "2020-02-11T22:56:36Z", "type": "commit"}, {"oid": "e1c146c89c38bbf843416aa71a3cdb3dd8b43241", "url": "https://github.com/Alluxio/alluxio/commit/e1c146c89c38bbf843416aa71a3cdb3dd8b43241", "message": "Add integration test", "committedDate": "2020-02-12T00:59:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDUzNw==", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377990537", "bodyText": "Is there a way to verify if the PRead path is utilized?", "author": "calvinjia", "createdAt": "2020-02-12T01:08:18Z", "path": "tests/src/test/java/alluxio/client/fs/FileInStreamIntegrationTest.java", "diffHunk": "@@ -435,6 +435,44 @@ public void positionedReadWithoutCaching() throws Exception {\n     }\n   }\n \n+  @Test\n+  @LocalAlluxioClusterResource.Config(\n+      confParams = {PropertyKey.Name.USER_FILE_SEQUENTIAL_PREAD_THRESHOLD, \"700KB\"})\n+  public void positionedReadWithLargeThreshold() throws Exception {\n+    List<CreateFilePOptions> optionSet = new ArrayList<>(2);\n+    optionSet.add(mWriteBoth);\n+    optionSet.add(mWriteUnderStore);\n+    for (CreateFilePOptions op : optionSet) {\n+      String filename = mTestPath + \"/file_\" + MIN_LEN + \"_\" + op.hashCode();\n+      AlluxioURI uri = new AlluxioURI(filename);\n+\n+      try (FileInStream is = mFileSystem.openFile(uri, FileSystemTestUtils.toOpenFileOptions(op))) {\n+        byte[] ret = new byte[DELTA - 1];\n+        Assert.assertEquals(DELTA - 1, is.positionedRead(MIN_LEN - DELTA + 1, ret, 0, DELTA));\n+        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(MIN_LEN - DELTA + 1, DELTA - 1, ret));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  @LocalAlluxioClusterResource.Config(\n+      confParams = {PropertyKey.Name.USER_FILE_SEQUENTIAL_PREAD_THRESHOLD, \"200KB\"})\n+  public void positionedReadWithSmallThreshold() throws Exception {\n+    List<CreateFilePOptions> optionSet = new ArrayList<>(2);\n+    optionSet.add(mWriteBoth);\n+    optionSet.add(mWriteUnderStore);\n+    for (CreateFilePOptions op : optionSet) {\n+      String filename = mTestPath + \"/file_\" + MIN_LEN + \"_\" + op.hashCode();\n+      AlluxioURI uri = new AlluxioURI(filename);\n+\n+      try (FileInStream is = mFileSystem.openFile(uri, FileSystemTestUtils.toOpenFileOptions(op))) {\n+        byte[] ret = new byte[DELTA - 1];\n+        Assert.assertEquals(DELTA - 1, is.positionedRead(MIN_LEN - DELTA + 1, ret, 0, DELTA));\n+        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(MIN_LEN - DELTA + 1, DELTA - 1, ret));\n+      }\n+    }\n+  }", "originalCommit": "e1c146c89c38bbf843416aa71a3cdb3dd8b43241", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7b87993031e688fcadbbd66258f289d282bb69ca", "url": "https://github.com/Alluxio/alluxio/commit/7b87993031e688fcadbbd66258f289d282bb69ca", "message": "Fix style", "committedDate": "2020-02-12T01:17:42Z", "type": "commit"}]}