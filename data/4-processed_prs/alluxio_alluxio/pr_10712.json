{"pr_number": 10712, "pr_title": "Fix workflows when a child plan has no child tasks", "pr_createdAt": "2020-01-09T02:08:15Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10712", "timeline": [{"oid": "9f7f72d152f7870e58e73cc5d2a2b594d2007061", "url": "https://github.com/Alluxio/alluxio/commit/9f7f72d152f7870e58e73cc5d2a2b594d2007061", "message": "fix workflows when a child plan has no child tasks.", "committedDate": "2020-01-09T02:05:26Z", "type": "commit"}, {"oid": "03102144c5fb770ea227b2bca7d7e06c36c8e856", "url": "https://github.com/Alluxio/alluxio/commit/03102144c5fb770ea227b2bca7d7e06c36c8e856", "message": "fix test", "committedDate": "2020-01-09T14:59:51Z", "type": "commit"}, {"oid": "489b9d91be1fb7a0d55318996af279d5edcc71ba", "url": "https://github.com/Alluxio/alluxio/commit/489b9d91be1fb7a0d55318996af279d5edcc71ba", "message": "checkstyle", "committedDate": "2020-01-09T15:10:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2NzY4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r364867686", "bodyText": "rename to NoopPlanConfig or TestPlanConfig", "author": "gpang", "createdAt": "2020-01-09T17:27:28Z", "path": "job/common/src/test/java/alluxio/job/DoNothingConfig.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job;\n+\n+import alluxio.job.plan.PlanConfig;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Config for a plan that does nothing.\n+ */\n+public class DoNothingConfig implements PlanConfig {", "originalCommit": "489b9d91be1fb7a0d55318996af279d5edcc71ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODAwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r364868001", "bodyText": "NoopPlanDefinition of TestPlanDefinition", "author": "gpang", "createdAt": "2020-01-09T17:28:10Z", "path": "job/server/src/test/java/alluxio/job/plan/DoNothingPlanDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan;\n+\n+import alluxio.collections.Pair;\n+import alluxio.job.DoNothingConfig;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.util.SerializableVoid;\n+import alluxio.wire.WorkerInfo;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This definition of a plan that does nothing.\n+ */\n+public class DoNothingPlanDefinition", "originalCommit": "489b9d91be1fb7a0d55318996af279d5edcc71ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c830eeab97a835393d0cd840bf5c4f8fbd4c175", "url": "https://github.com/Alluxio/alluxio/commit/0c830eeab97a835393d0cd840bf5c4f8fbd4c175", "message": "Feedback", "committedDate": "2020-01-09T17:32:33Z", "type": "commit"}, {"oid": "6c1315ca5f21773b15e4d19b254ffc734814a566", "url": "https://github.com/Alluxio/alluxio/commit/6c1315ca5f21773b15e4d19b254ffc734814a566", "message": "checkstyle", "committedDate": "2020-01-09T17:57:45Z", "type": "commit"}, {"oid": "5c1e3c41a0c26ed5a6af9366ef09756201531d9d", "url": "https://github.com/Alluxio/alluxio/commit/5c1e3c41a0c26ed5a6af9366ef09756201531d9d", "message": "change implementation significantly to handle all cases of plan status changes", "committedDate": "2020-01-09T19:18:03Z", "type": "commit"}, {"oid": "18cdd636991615b4fbe4b443972d37d2bdf02486", "url": "https://github.com/Alluxio/alluxio/commit/18cdd636991615b4fbe4b443972d37d2bdf02486", "message": "checkstyle", "committedDate": "2020-01-09T19:38:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMzM2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366423369", "bodyText": "should this be the same as the class name? NoopPlanConfig?", "author": "gpang", "createdAt": "2020-01-14T16:00:05Z", "path": "job/common/src/test/java/alluxio/job/NoopPlanConfig.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job;\n+\n+import alluxio.job.plan.PlanConfig;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Config for a plan that does nothing.\n+ */\n+public class NoopPlanConfig implements PlanConfig {\n+\n+  public static final String NAME = \"DoNothing\";", "originalCommit": "18cdd636991615b4fbe4b443972d37d2bdf02486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMzkyMw==", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366423923", "bodyText": "maybe say something like NoopPlanDefinition should never run a task", "author": "gpang", "createdAt": "2020-01-14T16:01:01Z", "path": "job/server/src/test/java/alluxio/job/plan/NoopPlanDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan;\n+\n+import alluxio.collections.Pair;\n+import alluxio.job.NoopPlanConfig;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.util.SerializableVoid;\n+import alluxio.wire.WorkerInfo;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This definition of a plan that does nothing.\n+ */\n+public class NoopPlanDefinition\n+    extends AbstractVoidPlanDefinition<NoopPlanConfig, SerializableVoid> {\n+\n+  public NoopPlanDefinition() {}\n+\n+  @Override\n+  public Class<NoopPlanConfig> getJobConfigClass() {\n+    return NoopPlanConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, SerializableVoid>> selectExecutors(NoopPlanConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext selectExecutorsContext)\n+      throws Exception {\n+    return new HashSet<>();\n+  }\n+\n+  @Override\n+  public SerializableVoid runTask(NoopPlanConfig config, SerializableVoid args,\n+                                  RunTaskContext runTaskContext) throws Exception {\n+    throw new IllegalStateException(\"Should never get here.\");", "originalCommit": "18cdd636991615b4fbe4b443972d37d2bdf02486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNDc2MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366424761", "bodyText": "Is this allowed to return Collections.emptySet()?", "author": "gpang", "createdAt": "2020-01-14T16:02:25Z", "path": "job/server/src/test/java/alluxio/job/plan/NoopPlanDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan;\n+\n+import alluxio.collections.Pair;\n+import alluxio.job.NoopPlanConfig;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.util.SerializableVoid;\n+import alluxio.wire.WorkerInfo;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This definition of a plan that does nothing.\n+ */\n+public class NoopPlanDefinition\n+    extends AbstractVoidPlanDefinition<NoopPlanConfig, SerializableVoid> {\n+\n+  public NoopPlanDefinition() {}\n+\n+  @Override\n+  public Class<NoopPlanConfig> getJobConfigClass() {\n+    return NoopPlanConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, SerializableVoid>> selectExecutors(NoopPlanConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext selectExecutorsContext)\n+      throws Exception {\n+    return new HashSet<>();", "originalCommit": "18cdd636991615b4fbe4b443972d37d2bdf02486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNTU1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366425559", "bodyText": "would more info in this warning message be helpful?", "author": "gpang", "createdAt": "2020-01-14T16:03:48Z", "path": "job/server/src/main/java/alluxio/master/job/workflow/WorkflowTracker.java", "diffHunk": "@@ -248,36 +248,24 @@ private synchronized void next(long jobId) throws ResourceExhaustedException {\n       JobConfig childJobConfig = childJobConfigsIter.next();\n       try {\n         mJobMaster.run(childJobConfig, childJobId);\n-      } catch (JobDoesNotExistException e) {\n+      } catch (JobDoesNotExistException | ResourceExhaustedException e) {\n         LOG.warn(e.getMessage());", "originalCommit": "18cdd636991615b4fbe4b443972d37d2bdf02486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNjk2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10712#discussion_r366426963", "bodyText": "should this be switch statement?", "author": "gpang", "createdAt": "2020-01-14T16:06:15Z", "path": "job/server/src/main/java/alluxio/master/job/workflow/WorkflowTracker.java", "diffHunk": "@@ -248,36 +248,24 @@ private synchronized void next(long jobId) throws ResourceExhaustedException {\n       JobConfig childJobConfig = childJobConfigsIter.next();\n       try {\n         mJobMaster.run(childJobConfig, childJobId);\n-      } catch (JobDoesNotExistException e) {\n+      } catch (JobDoesNotExistException | ResourceExhaustedException e) {\n         LOG.warn(e.getMessage());\n         stop(jobId, Status.FAILED, e.getMessage());\n       }\n     }\n   }\n \n   /**\n-   * Updates internal state of the workflows based on the updated state of the tasks.\n-   * @param taskInfoList list of tasks that have been updated\n-   * @throws ResourceExhaustedException if new jobs can't be scheduled\n+   * Updates internal state of the workflows based on the updated state of a plan.\n+   * @param planInfo info of the plan that had its status changed\n+   * @throws ResourceExhaustedException\n    */\n-  public synchronized void workerHeartbeat(List<TaskInfo> taskInfoList)\n-      throws ResourceExhaustedException {\n-\n-    for (TaskInfo taskInfo : taskInfoList) {\n-      Long planId = taskInfo.getParentId();\n-      JobInfo jobInfo = null;\n-      try {\n-        jobInfo = mJobMaster.getStatus(planId);\n-      } catch (JobDoesNotExistException e) {\n-        LOG.info(\"Received heartbeat for a task with an unknown parent. Skipping\", planId);\n-        continue;\n-      }\n-      Status status = jobInfo.getStatus();\n-      if (status.equals(Status.COMPLETED)) {\n-        done(planId);\n-      } else if (status.equals(Status.CANCELED) || status.equals(Status.FAILED)) {\n-        stop(planId, status, jobInfo.getErrorMessage());\n-      }\n+  public void onPlanStatusChange(PlanInfo planInfo) {\n+    Status status = planInfo.getStatus();\n+    if (status.equals(Status.COMPLETED)) {", "originalCommit": "18cdd636991615b4fbe4b443972d37d2bdf02486", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd67fcd95b1c4bd434b0022f37d68a8c865ba4c7", "url": "https://github.com/Alluxio/alluxio/commit/cd67fcd95b1c4bd434b0022f37d68a8c865ba4c7", "message": "feedback", "committedDate": "2020-01-14T18:10:35Z", "type": "commit"}, {"oid": "32db8d611103981afbba3075ac608786eb2aed84", "url": "https://github.com/Alluxio/alluxio/commit/32db8d611103981afbba3075ac608786eb2aed84", "message": "checkstyle", "committedDate": "2020-01-14T18:36:18Z", "type": "commit"}, {"oid": "e9ecde9e5f012d8d75c2c77c5aed8ebaa4cb7686", "url": "https://github.com/Alluxio/alluxio/commit/e9ecde9e5f012d8d75c2c77c5aed8ebaa4cb7686", "message": "fix", "committedDate": "2020-01-14T18:58:57Z", "type": "commit"}]}