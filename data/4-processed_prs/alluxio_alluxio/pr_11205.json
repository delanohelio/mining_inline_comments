{"pr_number": 11205, "pr_title": "Add Glue UDB to Catalog Service", "pr_createdAt": "2020-03-24T17:44:31Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11205", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzOTMyMA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r397539320", "bodyText": "why is this change included in this PR? seems unrelated?", "author": "yuzhu", "createdAt": "2020-03-25T00:19:19Z", "path": "docs/en/operation/Metrics-System.md", "diffHunk": "@@ -89,6 +89,7 @@ sink.csv.directory=/tmp/alluxio-metrics\n ```\n \n If Alluxio is deployed in a cluster, this file needs to be distributed to all the nodes.\n+Restart the Alluxio servers to active new configuration changes.", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTg0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402669841", "bodyText": "It should not be related, I will delete it later.", "author": "HelloHorizon", "createdAt": "2020-04-03T00:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzOTMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMDU3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402610572", "bodyText": "This class seems identical/ very similar to HiveLayout? can we refactor?", "author": "yuzhu", "createdAt": "2020-04-02T21:36:59Z", "path": "table/server/common/src/main/java/alluxio/table/common/layout/GlueLayout.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.common.layout;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.job.plan.transform.HiveConstants;\n+import alluxio.table.common.Layout;\n+import alluxio.table.common.transform.TransformContext;\n+import alluxio.table.common.transform.TransformDefinition;\n+import alluxio.table.common.transform.TransformPlan;\n+import alluxio.util.ConfigurationUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Glue table layout implementation.\n+ * Glue use same proto as hive.\n+ */\n+public class GlueLayout implements Layout {", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NTE1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r403365159", "bodyText": "There is no difference for the current version, should we just use the hive layout instead?", "author": "HelloHorizon", "createdAt": "2020-04-03T22:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMDU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMTQxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402611419", "bodyText": "we need to document the glue version we support in our documentation", "author": "yuzhu", "createdAt": "2020-04-02T21:38:59Z", "path": "table/server/underdb/glue/pom.xml", "diffHunk": "@@ -0,0 +1,52 @@\n+<!--\n+\n+    The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+    (the \"License\"). You may not use this work except in compliance with the License, which is\n+    available at www.apache.org/licenses/LICENSE-2.0\n+\n+    This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+    either express or implied, as more fully set forth in the License.\n+\n+    See the NOTICE file distributed with this work for information regarding copyright ownership.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>alluxio-table-server-underdb</artifactId>\n+        <groupId>org.alluxio</groupId>\n+        <version>2.3.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>alluxio-table-server-underdb-glue</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Alluxio Table - Server - UnderDB - Glue</name>\n+    <description>Alluxio table underDB implementation for aws glue</description>\n+\n+    <properties>\n+        <!-- The following paths need to be defined here as well as in the parent pom so that mvn can -->\n+        <!-- run properly from sub-project directories -->\n+        <build.path>${project.parent.parent.parent.parent.basedir}/build</build.path>\n+        <glue.version>1.11.602</glue.version>", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxMjIyNw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402612227", "bodyText": "could you make this log message specific to glue?  error messages are ideally unique in each class", "author": "yuzhu", "createdAt": "2020-04-02T21:40:48Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,367 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.layout.GlueLayoutFactory;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.table.under.glue.util.PathTranslator;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Geting database information from database: \" + mGlueDbName + \".\");", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNDQwNw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402614407", "bodyText": "does the default provider chain fail all the time? because it has no credentials?\nor does it use the user credentials who launched the machine to determine>?", "author": "yuzhu", "createdAt": "2020-04-02T21:45:43Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,367 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.layout.GlueLayoutFactory;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.table.under.glue.util.PathTranslator;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Geting database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.debug(\"Set Glue region: \" + config.get(Property.GLUE_REGION) + \".\");\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDI5OA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402670298", "bodyText": "The default provider chain fails all the time since they are null.", "author": "HelloHorizon", "createdAt": "2020-04-03T00:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNDQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNTM5OA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402615398", "bodyText": "can this method be merged with the mounting method in the hive UDB implementation? they should not be that different right?", "author": "yuzhu", "createdAt": "2020-04-02T21:48:00Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,367 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.layout.GlueLayoutFactory;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.table.under.glue.util.PathTranslator;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Geting database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.debug(\"Set Glue region: \" + config.get(Property.GLUE_REGION) + \".\");\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return GlueDatabaseFactory.TYPE;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return mGlueDbName;\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() throws IOException {\n+    try {\n+      String nextToken = null;\n+      List<String> tableNames = new ArrayList<>();\n+      do {\n+        GetTablesRequest tablesRequest =\n+            new GetTablesRequest()\n+                .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+                .withDatabaseName(mGlueDbName)\n+                .withNextToken(nextToken);\n+        GetTablesResult tablesResult = mGlueClient.getTables(tablesRequest);\n+        tablesResult.getTableList().forEach(table -> tableNames.add(table.getName()));\n+        nextToken = tablesResult.getNextToken();\n+      } while (nextToken != null);\n+      return tableNames;\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Failed to get glue tables: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private String mountAlluxioPath(String tableName, AlluxioURI ufsUri, AlluxioURI tableUri)", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDY3NA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402670674", "bodyText": "I agree. The redundant code is also my concern, I will refactor it. It may a good idea to put these methods into udbUtil instead.", "author": "HelloHorizon", "createdAt": "2020-04-03T00:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNTM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1OTgyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402659829", "bodyText": "similarly , can this be refactored?", "author": "yuzhu", "createdAt": "2020-04-02T23:49:13Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,367 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.layout.GlueLayoutFactory;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.table.under.glue.util.PathTranslator;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Geting database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.debug(\"Set Glue region: \" + config.get(Property.GLUE_REGION) + \".\");\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return GlueDatabaseFactory.TYPE;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return mGlueDbName;\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() throws IOException {\n+    try {\n+      String nextToken = null;\n+      List<String> tableNames = new ArrayList<>();\n+      do {\n+        GetTablesRequest tablesRequest =\n+            new GetTablesRequest()\n+                .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+                .withDatabaseName(mGlueDbName)\n+                .withNextToken(nextToken);\n+        GetTablesResult tablesResult = mGlueClient.getTables(tablesRequest);\n+        tablesResult.getTableList().forEach(table -> tableNames.add(table.getName()));\n+        nextToken = tablesResult.getNextToken();\n+      } while (nextToken != null);\n+      return tableNames;\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Failed to get glue tables: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private String mountAlluxioPath(String tableName, AlluxioURI ufsUri, AlluxioURI tableUri)\n+      throws IOException, AlluxioException {\n+    if (Objects.equals(ufsUri.getScheme(), Constants.SCHEME)) {\n+      // already an alluxio uri, return the alluxio uri\n+      return ufsUri.toString();\n+    }\n+    try {\n+      tableUri = mUdbContext.getFileSystem().reverseResolve(ufsUri);\n+      LOG.debug(\"Trying to mount table {} location {}, but it is already mounted at location {}\",\n+          tableName, ufsUri, tableUri);\n+      return tableUri.getPath();\n+    } catch (InvalidPathException e) {\n+      // ufs path not mounted, continue\n+    }\n+    // make sure the parent exists\n+    mUdbContext.getFileSystem().createDirectory(tableUri.getParent(),\n+        CreateDirectoryPOptions.newBuilder().setRecursive(true).setAllowExists(true).build());\n+    Map<String, String> mountOptionMap = mGlueConfiguration.getMountOption(\n+        String.format(\"%s://%s/\", ufsUri.getScheme(), ufsUri.getAuthority().toString()));\n+    MountPOptions.Builder option = MountPOptions.newBuilder();\n+    for (Map.Entry<String, String> entry : mountOptionMap.entrySet()) {\n+      if (entry.getKey().equals(UdbConfiguration.READ_ONLY_OPTION)) {\n+        option.setReadOnly(Boolean.parseBoolean(entry.getValue()));\n+      } else if (entry.getKey().equals(UdbConfiguration.SHARED_OPTION)) {\n+        option.setShared(Boolean.parseBoolean(entry.getValue()));\n+      } else {\n+        option.putProperties(entry.getKey(), entry.getValue());\n+      }\n+    }\n+    mUdbContext.getFileSystem().mount(tableUri, ufsUri, option.build());\n+\n+    LOG.info(\"mounted table {} location {} to Alluxio location {} with mountOption {}\",\n+        tableName, ufsUri, tableUri, option.build());\n+    return tableUri.getPath();\n+  }\n+\n+  private PathTranslator mountAlluxioPaths(Table table, List<Partition> partitions)", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NzUwNg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407567506", "bodyText": "Wasn't this already moved to a Utils class?", "author": "gpang", "createdAt": "2020-04-13T16:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1OTgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMzg5MA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407723890", "bodyText": "Since mountAlluxioPaths required dependency on hive and glue, which is a different method for hive udb and glue udb, I move mountAlluxioPath to Utils class, and keep mountAlluxioPaths in hive udb and glue udb.", "author": "HelloHorizon", "createdAt": "2020-04-13T21:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1OTgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MDE0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402660147", "bodyText": "one thing i noticed when doing the Hive version of this, is that the client sometimes does not handle disconnection well. Have you tested the case where the connection is not always stable?", "author": "yuzhu", "createdAt": "2020-04-02T23:50:25Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,367 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.layout.GlueLayoutFactory;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.table.under.glue.util.PathTranslator;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Geting database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.debug(\"Set Glue region: \" + config.get(Property.GLUE_REGION) + \".\");\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return GlueDatabaseFactory.TYPE;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return mGlueDbName;\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() throws IOException {\n+    try {\n+      String nextToken = null;\n+      List<String> tableNames = new ArrayList<>();\n+      do {\n+        GetTablesRequest tablesRequest =\n+            new GetTablesRequest()\n+                .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+                .withDatabaseName(mGlueDbName)\n+                .withNextToken(nextToken);\n+        GetTablesResult tablesResult = mGlueClient.getTables(tablesRequest);\n+        tablesResult.getTableList().forEach(table -> tableNames.add(table.getName()));\n+        nextToken = tablesResult.getNextToken();\n+      } while (nextToken != null);\n+      return tableNames;\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Failed to get glue tables: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private String mountAlluxioPath(String tableName, AlluxioURI ufsUri, AlluxioURI tableUri)\n+      throws IOException, AlluxioException {\n+    if (Objects.equals(ufsUri.getScheme(), Constants.SCHEME)) {\n+      // already an alluxio uri, return the alluxio uri\n+      return ufsUri.toString();\n+    }\n+    try {\n+      tableUri = mUdbContext.getFileSystem().reverseResolve(ufsUri);\n+      LOG.debug(\"Trying to mount table {} location {}, but it is already mounted at location {}\",\n+          tableName, ufsUri, tableUri);\n+      return tableUri.getPath();\n+    } catch (InvalidPathException e) {\n+      // ufs path not mounted, continue\n+    }\n+    // make sure the parent exists\n+    mUdbContext.getFileSystem().createDirectory(tableUri.getParent(),\n+        CreateDirectoryPOptions.newBuilder().setRecursive(true).setAllowExists(true).build());\n+    Map<String, String> mountOptionMap = mGlueConfiguration.getMountOption(\n+        String.format(\"%s://%s/\", ufsUri.getScheme(), ufsUri.getAuthority().toString()));\n+    MountPOptions.Builder option = MountPOptions.newBuilder();\n+    for (Map.Entry<String, String> entry : mountOptionMap.entrySet()) {\n+      if (entry.getKey().equals(UdbConfiguration.READ_ONLY_OPTION)) {\n+        option.setReadOnly(Boolean.parseBoolean(entry.getValue()));\n+      } else if (entry.getKey().equals(UdbConfiguration.SHARED_OPTION)) {\n+        option.setShared(Boolean.parseBoolean(entry.getValue()));\n+      } else {\n+        option.putProperties(entry.getKey(), entry.getValue());\n+      }\n+    }\n+    mUdbContext.getFileSystem().mount(tableUri, ufsUri, option.build());\n+\n+    LOG.info(\"mounted table {} location {} to Alluxio location {} with mountOption {}\",\n+        tableName, ufsUri, tableUri, option.build());\n+    return tableUri.getPath();\n+  }\n+\n+  private PathTranslator mountAlluxioPaths(Table table, List<Partition> partitions)\n+      throws IOException {\n+    String tableName = table.getName();\n+    AlluxioURI ufsUri;\n+    AlluxioURI alluxioUri = mUdbContext.getTableLocation(tableName);\n+    String glueUfsUri = table.getStorageDescriptor().getLocation();\n+\n+    try {\n+      PathTranslator pathTranslator = new PathTranslator();\n+      ufsUri = new AlluxioURI(table.getStorageDescriptor().getLocation());\n+      pathTranslator.addMapping(mountAlluxioPath(tableName, ufsUri, alluxioUri), glueUfsUri);\n+\n+      for (Partition partition : partitions) {\n+        AlluxioURI partitionUri;\n+        if (partition.getStorageDescriptor() != null\n+            && partition.getStorageDescriptor().getLocation() != null\n+            && ufsUri.isAncestorOf(\n+            partitionUri = new AlluxioURI(\n+                partition.getStorageDescriptor().getLocation()))) {\n+          glueUfsUri = partition.getStorageDescriptor().getLocation();\n+          String partitionName = partition.getValues().toString();\n+          // Glue does not provide makePartName as Hive, use a simple conveter for place holder\n+          try {\n+            partitionName = GlueUtils.makePartitionName(table, partition);\n+          } catch (IOException e) {\n+            LOG.warn(\"Error making partition name for table {}, partition {}\", tableName,\n+                partition.getValues().toString());\n+          }\n+          alluxioUri = new AlluxioURI(\n+              PathUtils.concatPath(\n+                  mUdbContext.getTableLocation(tableName).getPath(),\n+                  partitionName));\n+          // mount partition path if it is not already mounted as part of the table path mount\n+          pathTranslator\n+              .addMapping(mountAlluxioPath(tableName, partitionUri, alluxioUri), glueUfsUri);\n+        }\n+      }\n+      return pathTranslator;\n+    } catch (AlluxioException e) {\n+      throw new IOException(\n+          \"Failed to mount table location. tableName: \" + tableName\n+              + \" glueUfsLocation: \" + glueUfsUri\n+              + \" AlluxioLocation: \" + alluxioUri + \" error: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @Override\n+  public UdbTable getTable(String tableName) throws IOException {\n+    Table table;\n+    try {\n+      GetTableRequest tableRequest = new GetTableRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withDatabaseName(mGlueDbName)\n+          .withName(tableName);\n+      table = getClient().getTable(tableRequest).getTable();\n+\n+      List<Partition> partitions = batchGetPartitions(getClient(), tableName);\n+      PathTranslator pathTranslator = mountAlluxioPaths(table, partitions);\n+\n+      // Glue does not provide column statistic information\n+      List<ColumnStatisticsInfo> columnStatisticsData = new ArrayList<>();\n+\n+      PartitionInfo partitionInfo = PartitionInfo.newBuilder()\n+          .setDbName(mGlueDbName)\n+          .setTableName(tableName)\n+          .addAllDataCols(GlueUtils.toProto(table.getStorageDescriptor().getColumns()))\n+          .setStorage(GlueUtils.toProto(table.getStorageDescriptor(), pathTranslator))\n+          .putAllParameters(table.getParameters())\n+          .build();\n+\n+      Layout layout = Layout.newBuilder()\n+          .setLayoutType(GlueLayoutFactory.TYPE)\n+          .setLayoutData(partitionInfo.toByteString())\n+          .build();\n+\n+      return new GlueTable(this,\n+          pathTranslator,\n+          tableName,\n+          GlueUtils.toProtoSchema(table.getStorageDescriptor().getColumns()),\n+          columnStatisticsData,\n+          // Glue does not provide FieldSchema from API directly\n+          // Get FieldSchema from storage description\n+          GlueUtils.toProto(table.getPartitionKeys()),\n+          partitions,\n+          layout,\n+          table);\n+    } catch (EntityNotFoundException e) {\n+      throw new NotFoundException(\"Table \" + tableName + \" does not exist.\", e);\n+    } catch (ValidationException e) {\n+      e.printStackTrace();\n+      throw new IOException(\"Failed to get table: \"\n+          + tableName + \" with validation error: \" + e.getMessage(), e);\n+    } catch (GlueEncryptionException e) {\n+      throw new IOException(\"Failed to get table: \" + tableName + \" error: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private List<Partition> batchGetPartitions(AWSGlueAsync glueClient, String tableName)\n+      throws IOException {\n+    List<Partition> partitions = new ArrayList<>();\n+    try {\n+      GetPartitionsRequest getPartitionsRequest =\n+          new GetPartitionsRequest()\n+              .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+              .withDatabaseName(mGlueDbName)\n+              .withTableName(tableName);\n+      if (glueClient.getPartitions(getPartitionsRequest).getPartitions() != null) {\n+        partitions = glueClient.getPartitions(getPartitionsRequest).getPartitions();\n+      }\n+      return partitions;\n+    } catch (AWSGlueException e) {\n+      throw new IOException(\"WARNING: Cannot get partition information for table: \"\n+          + tableName + \". error: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * Get Glue Client.\n+   *\n+   * @return async glue client\n+   */\n+  public AWSGlueAsync getClient() {", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MDYxNg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402660616", "bodyText": "what is the difference between this class and the HiveTable class? can we refactor to reduce duplicated code?", "author": "yuzhu", "createdAt": "2020-04-02T23:52:02Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueTable.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.FieldSchema;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.Schema;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.GlueLayout;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.under.glue.util.PathTranslator;\n+\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Glue table implementation.\n+ */\n+public class GlueTable implements UdbTable {", "originalCommit": "08b396f38815969a7666b2c30cd0afe81b27489f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MTEwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r402671109", "bodyText": "The Glue Table uses glue dependencies, which should not depend on the Hive Table.", "author": "HelloHorizon", "createdAt": "2020-04-03T00:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MDYxNg=="}], "type": "inlineReview"}, {"oid": "0a688b1a97a1f49acaa18c78658cca61e76972aa", "url": "https://github.com/Alluxio/alluxio/commit/0a688b1a97a1f49acaa18c78658cca61e76972aa", "message": "Remove redudant glue layout", "committedDate": "2020-04-04T05:17:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NzMxNg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407557316", "bodyText": "Is this parameter used anywhere?", "author": "gpang", "createdAt": "2020-04-13T16:03:13Z", "path": "table/server/common/pom.xml", "diffHunk": "@@ -27,6 +27,7 @@\n     <!-- run properly from sub-project directories -->\n     <build.path>${project.parent.parent.parent.basedir}/build</build.path>\n     <failIfNoTests>false</failIfNoTests>\n+    <hive.version>2.2.0</hive.version>", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU4MDI0MA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407580240", "bodyText": "I will delete it.", "author": "HelloHorizon", "createdAt": "2020-04-13T16:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1NzMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODUwMw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407558503", "bodyText": "does the glue udb connect to a hive metastore?", "author": "gpang", "createdAt": "2020-04-13T16:05:25Z", "path": "table/server/underdb/glue/pom.xml", "diffHunk": "@@ -0,0 +1,74 @@\n+<!--\n+\n+    The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+    (the \"License\"). You may not use this work except in compliance with the License, which is\n+    available at www.apache.org/licenses/LICENSE-2.0\n+\n+    This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+    either express or implied, as more fully set forth in the License.\n+\n+    See the NOTICE file distributed with this work for information regarding copyright ownership.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>alluxio-table-server-underdb</artifactId>\n+        <groupId>org.alluxio</groupId>\n+        <version>2.3.0-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>alluxio-table-server-underdb-glue</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Alluxio Table - Server - UnderDB - Glue</name>\n+    <description>Alluxio table underDB implementation for aws glue</description>\n+\n+    <properties>\n+        <!-- The following paths need to be defined here as well as in the parent pom so that mvn can -->\n+        <!-- run properly from sub-project directories -->\n+        <build.path>${project.parent.parent.parent.parent.basedir}/build</build.path>\n+        <glue.version>1.11.602</glue.version>\n+        <aws.java.jdk.version>1.11.475</aws.java.jdk.version>\n+        <hive-metastore.version>2.2.0</hive-metastore.version>\n+    </properties>\n+\n+    <dependencies>\n+        <!-- External dependencies -->\n+        <dependency>\n+            <groupId>com.amazonaws</groupId>\n+            <artifactId>aws-java-sdk-glue</artifactId>\n+            <version>${glue.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.amazonaws</groupId>\n+            <artifactId>aws-java-sdk-core</artifactId>\n+            <version>${aws.java.jdk.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.hive</groupId>\n+            <artifactId>hive-metastore</artifactId>", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3OTcwOA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407579708", "bodyText": "It doesn't connect to hive metastore, but it uses the makePartName method in hive metastore.", "author": "HelloHorizon", "createdAt": "2020-04-13T16:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MDE3NA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407560174", "bodyText": "I think udbProperty should just be property", "author": "gpang", "createdAt": "2020-04-13T16:08:32Z", "path": "table/server/common/src/main/java/alluxio/table/common/BaseConfiguration.java", "diffHunk": "@@ -55,6 +57,23 @@ public String get(T property) {\n     return value;\n   }\n \n+  /**\n+   * Return the int value of this property , or the default value if the property is not defined.\n+   *\n+   * @param udbProperty the udb property to get the int value\n+   * @return the int value of udb property\n+   */\n+  public int getInt(T udbProperty) {", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjE2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407596162", "bodyText": "Fixed it.", "author": "HelloHorizon", "createdAt": "2020-04-13T17:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MDE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MDI4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407560281", "bodyText": "\"udb property\" should just be \"property\"", "author": "gpang", "createdAt": "2020-04-13T16:08:43Z", "path": "table/server/common/src/main/java/alluxio/table/common/BaseConfiguration.java", "diffHunk": "@@ -55,6 +57,23 @@ public String get(T property) {\n     return value;\n   }\n \n+  /**\n+   * Return the int value of this property , or the default value if the property is not defined.\n+   *\n+   * @param udbProperty the udb property to get the int value\n+   * @return the int value of udb property", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjA5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407596091", "bodyText": "Fixed it.", "author": "HelloHorizon", "createdAt": "2020-04-13T17:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MDI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MjA5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407562093", "bodyText": "I think we typically name these types of class with \"Utils\". So, it should be UdbUtils", "author": "gpang", "createdAt": "2020-04-13T16:12:07Z", "path": "table/server/common/src/main/java/alluxio/table/common/udb/UdbUtil.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.common.udb;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.InvalidPathException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.MountPOptions;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Udb related utils.\n+ */\n+public class UdbUtil {", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjEyNA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407596124", "bodyText": "Fixed it.", "author": "HelloHorizon", "createdAt": "2020-04-13T17:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MjA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MzgwMA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407563800", "bodyText": "is it ok if it is an empty string?", "author": "gpang", "createdAt": "2020-04-13T16:15:09Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxODM0OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r411618349", "bodyText": "Is empty string region allowed?", "author": "gpang", "createdAt": "2020-04-20T19:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MzgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NDI1OA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407564258", "bodyText": "Is this log message necessary? Should it be debug level?", "author": "gpang", "createdAt": "2020-04-13T16:16:06Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjMwOA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407596308", "bodyText": "Fixed it.", "author": "HelloHorizon", "createdAt": "2020-04-13T17:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NDI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NDc0OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407564749", "bodyText": "instead of taking the glue map, can we instead add all those parameters into glueParameters?", "author": "gpang", "createdAt": "2020-04-13T16:17:05Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDgwMw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407844803", "bodyText": "Changed.", "author": "HelloHorizon", "createdAt": "2020-04-14T03:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NDc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NTU0OA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407565548", "bodyText": "This needs a space after \"database\" and  space before the e.getMessage(). Also, can we add the catalog id to the message?", "author": "gpang", "createdAt": "2020-04-13T16:18:34Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDg1MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407844851", "bodyText": "Changed.", "author": "HelloHorizon", "createdAt": "2020-04-14T03:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NTU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NjI1NA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407566254", "bodyText": "which test uses this?", "author": "gpang", "createdAt": "2020-04-13T16:19:48Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NzE4MA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407597180", "bodyText": "Deleted.", "author": "HelloHorizon", "createdAt": "2020-04-13T17:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NjI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NzkwMw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407567903", "bodyText": "can you also add catalog id and database name into the message?", "author": "gpang", "createdAt": "2020-04-13T16:22:54Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.info(\"Set Glue region: {}.\", config.get(Property.GLUE_REGION));\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access key id.\");\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access secret key.\");\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return GlueDatabaseFactory.TYPE;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return mGlueDbName;\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() throws IOException {\n+    try {\n+      String nextToken = null;\n+      List<String> tableNames = new ArrayList<>();\n+      do {\n+        GetTablesRequest tablesRequest =\n+            new GetTablesRequest()\n+                .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+                .withDatabaseName(mGlueDbName)\n+                .withNextToken(nextToken);\n+        GetTablesResult tablesResult = mGlueClient.getTables(tablesRequest);\n+        tablesResult.getTableList().forEach(table -> tableNames.add(table.getName()));\n+        nextToken = tablesResult.getNextToken();\n+      } while (nextToken != null);\n+      return tableNames;\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Failed to get glue tables: \" + e.getMessage(), e);", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODQ0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407598441", "bodyText": "The mountAlluxioPath is already moved to UdbUtils. I can add the catalog id and database name into the message.", "author": "HelloHorizon", "createdAt": "2020-04-13T17:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NzkwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyMDM5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r411620391", "bodyText": "Can you add the db name and catalog id?", "author": "gpang", "createdAt": "2020-04-20T19:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NzkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2ODcxMg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407568712", "bodyText": "is this necessary?", "author": "gpang", "createdAt": "2020-04-13T16:24:25Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.info(\"Set Glue region: {}.\", config.get(Property.GLUE_REGION));\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access key id.\");\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access secret key.\");\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return GlueDatabaseFactory.TYPE;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return mGlueDbName;\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() throws IOException {\n+    try {\n+      String nextToken = null;\n+      List<String> tableNames = new ArrayList<>();\n+      do {\n+        GetTablesRequest tablesRequest =\n+            new GetTablesRequest()\n+                .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+                .withDatabaseName(mGlueDbName)\n+                .withNextToken(nextToken);\n+        GetTablesResult tablesResult = mGlueClient.getTables(tablesRequest);\n+        tablesResult.getTableList().forEach(table -> tableNames.add(table.getName()));\n+        nextToken = tablesResult.getNextToken();\n+      } while (nextToken != null);\n+      return tableNames;\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Failed to get glue tables: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  private PathTranslator mountAlluxioPaths(Table table, List<Partition> partitions)\n+      throws IOException {\n+    String tableName = table.getName();\n+    AlluxioURI ufsUri;\n+    AlluxioURI alluxioUri = mUdbContext.getTableLocation(tableName);\n+    String glueUfsUri = table.getStorageDescriptor().getLocation();\n+\n+    try {\n+      PathTranslator pathTranslator = new PathTranslator();\n+      ufsUri = new AlluxioURI(table.getStorageDescriptor().getLocation());\n+      pathTranslator.addMapping(\n+          UdbUtil.mountAlluxioPath(\n+              tableName,\n+              ufsUri,\n+              alluxioUri,\n+              mUdbContext,\n+              mGlueConfiguration),\n+          glueUfsUri);\n+\n+      for (Partition partition : partitions) {\n+        AlluxioURI partitionUri;\n+        String partitionName;\n+        if (partition.getStorageDescriptor() != null\n+            && partition.getStorageDescriptor().getLocation() != null\n+            && ufsUri.isAncestorOf(\n+            partitionUri = new AlluxioURI(\n+                partition.getStorageDescriptor().getLocation()))) {\n+          glueUfsUri = partition.getStorageDescriptor().getLocation();\n+          partitionName = partition.getValues().toString();\n+          try {\n+            partitionName = GlueUtils.makePartitionName(\n+                table.getPartitionKeys(),\n+                partition.getValues());\n+          } catch (IOException e) {\n+            LOG.warn(\"Error making partition name for table {}, partition {}\", tableName,\n+                partition.getValues().toString());\n+          }\n+          alluxioUri = new AlluxioURI(\n+              PathUtils.concatPath(\n+                  mUdbContext.getTableLocation(tableName).getPath(),\n+                  partitionName));\n+          // mount partition path if it is not already mounted as part of the table path mount\n+          pathTranslator\n+              .addMapping(\n+                  UdbUtil.mountAlluxioPath(\n+                      tableName,\n+                      partitionUri,\n+                      alluxioUri,\n+                      mUdbContext,\n+                      mGlueConfiguration),\n+                  glueUfsUri);\n+        }\n+      }\n+      return pathTranslator;\n+    } catch (AlluxioException e) {\n+      throw new IOException(\n+          \"Failed to mount table location. tableName: \" + tableName\n+              + \" glueUfsLocation: \" + glueUfsUri\n+              + \" AlluxioLocation: \" + alluxioUri + \" error: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @Override\n+  public UdbTable getTable(String tableName) throws IOException {\n+    Table table;\n+    List<Partition> partitions;\n+    // Glue doesn't support column statistics infomation\n+    Map<String, List<ColumnStatisticsInfo>> statsMap = new HashMap<>();\n+    try {\n+      GetTableRequest tableRequest = new GetTableRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withDatabaseName(mGlueDbName)\n+          .withName(tableName);\n+      table = getClient().getTable(tableRequest).getTable();\n+\n+      partitions = batchGetPartitions(getClient(), tableName);\n+      PathTranslator pathTranslator = mountAlluxioPaths(table, partitions);\n+\n+      // Glue does not provide column statistic information\n+      List<ColumnStatisticsInfo> columnStatisticsData = new ArrayList<>();\n+\n+      PartitionInfo partitionInfo = PartitionInfo.newBuilder()\n+          .setDbName(mGlueDbName)\n+          .setTableName(tableName)\n+          .addAllDataCols(GlueUtils.toProto(table.getStorageDescriptor().getColumns()))\n+          .setStorage(GlueUtils.toProto(table.getStorageDescriptor(), pathTranslator))\n+          .putAllParameters(table.getParameters())\n+          .build();\n+\n+      Layout layout = Layout.newBuilder()\n+          .setLayoutType(HiveLayout.TYPE)\n+          .setLayoutData(partitionInfo.toByteString())\n+          .build();\n+\n+      List<Column> partitionColumns = table.getPartitionKeys();\n+\n+      List<UdbPartition> udbPartitions = new ArrayList<>();\n+      if (partitionColumns.isEmpty()) {\n+        PartitionInfo.Builder partitionInfoBuilder = PartitionInfo.newBuilder()\n+            .setDbName(mUdbContext.getDbName())\n+            .setTableName(tableName)\n+            .addAllDataCols(GlueUtils.toProto(table.getStorageDescriptor().getColumns()))\n+            .setStorage(GlueUtils.toProto(table.getStorageDescriptor(), pathTranslator))\n+            .setPartitionName(tableName)\n+            .putAllParameters(table.getParameters());\n+        udbPartitions.add(new GluePartition(\n+            new HiveLayout(partitionInfoBuilder.build(), Collections.emptyList())));\n+      } else {\n+        for (Partition partition : partitions) {\n+          String partName = GlueUtils.makePartitionName(partitionColumns, partition.getValues());\n+          PartitionInfo.Builder pib = PartitionInfo.newBuilder()\n+              .setDbName(getUdbContext().getDbName())\n+              .setTableName(tableName)\n+              .addAllDataCols(GlueUtils.toProto(partition.getStorageDescriptor().getColumns()))\n+              .setStorage(GlueUtils.toProto(partition.getStorageDescriptor(), pathTranslator))\n+              .setPartitionName(partName)\n+              .putAllParameters(partition.getParameters());\n+          if (partition.getValues() != null) {\n+            pib.addAllValues(partition.getValues());\n+          }\n+          udbPartitions.add(new GluePartition(new HiveLayout(pib.build(),\n+              statsMap.getOrDefault(partName, Collections.emptyList()))));\n+        }\n+      }\n+\n+      return new GlueTable(this,\n+          pathTranslator,\n+          tableName,\n+          GlueUtils.toProtoSchema(table.getStorageDescriptor().getColumns()),\n+          columnStatisticsData,\n+          // Glue does not provide FieldSchema from API directly\n+          // Get FieldSchema from partition keys\n+          GlueUtils.toProto(table.getPartitionKeys()),\n+          udbPartitions,\n+          layout,\n+          table);\n+    } catch (EntityNotFoundException e) {\n+      throw new NotFoundException(\"Table \" + tableName + \" does not exist.\", e);\n+    } catch (ValidationException e) {\n+      e.printStackTrace();", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5ODU1NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407598555", "bodyText": "Removed.", "author": "HelloHorizon", "createdAt": "2020-04-13T17:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2ODcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MjE2Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407572166", "bodyText": "For this exception and others in this method, can you add catalog id and database name?", "author": "gpang", "createdAt": "2020-04-13T16:30:29Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.info(\"Set Glue region: {}.\", config.get(Property.GLUE_REGION));\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access key id.\");\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access secret key.\");\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return GlueDatabaseFactory.TYPE;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return mGlueDbName;\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() throws IOException {\n+    try {\n+      String nextToken = null;\n+      List<String> tableNames = new ArrayList<>();\n+      do {\n+        GetTablesRequest tablesRequest =\n+            new GetTablesRequest()\n+                .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+                .withDatabaseName(mGlueDbName)\n+                .withNextToken(nextToken);\n+        GetTablesResult tablesResult = mGlueClient.getTables(tablesRequest);\n+        tablesResult.getTableList().forEach(table -> tableNames.add(table.getName()));\n+        nextToken = tablesResult.getNextToken();\n+      } while (nextToken != null);\n+      return tableNames;\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Failed to get glue tables: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  private PathTranslator mountAlluxioPaths(Table table, List<Partition> partitions)\n+      throws IOException {\n+    String tableName = table.getName();\n+    AlluxioURI ufsUri;\n+    AlluxioURI alluxioUri = mUdbContext.getTableLocation(tableName);\n+    String glueUfsUri = table.getStorageDescriptor().getLocation();\n+\n+    try {\n+      PathTranslator pathTranslator = new PathTranslator();\n+      ufsUri = new AlluxioURI(table.getStorageDescriptor().getLocation());\n+      pathTranslator.addMapping(\n+          UdbUtil.mountAlluxioPath(\n+              tableName,\n+              ufsUri,\n+              alluxioUri,\n+              mUdbContext,\n+              mGlueConfiguration),\n+          glueUfsUri);\n+\n+      for (Partition partition : partitions) {\n+        AlluxioURI partitionUri;\n+        String partitionName;\n+        if (partition.getStorageDescriptor() != null\n+            && partition.getStorageDescriptor().getLocation() != null\n+            && ufsUri.isAncestorOf(\n+            partitionUri = new AlluxioURI(\n+                partition.getStorageDescriptor().getLocation()))) {\n+          glueUfsUri = partition.getStorageDescriptor().getLocation();\n+          partitionName = partition.getValues().toString();\n+          try {\n+            partitionName = GlueUtils.makePartitionName(\n+                table.getPartitionKeys(),\n+                partition.getValues());\n+          } catch (IOException e) {\n+            LOG.warn(\"Error making partition name for table {}, partition {}\", tableName,\n+                partition.getValues().toString());\n+          }\n+          alluxioUri = new AlluxioURI(\n+              PathUtils.concatPath(\n+                  mUdbContext.getTableLocation(tableName).getPath(),\n+                  partitionName));\n+          // mount partition path if it is not already mounted as part of the table path mount\n+          pathTranslator\n+              .addMapping(\n+                  UdbUtil.mountAlluxioPath(\n+                      tableName,\n+                      partitionUri,\n+                      alluxioUri,\n+                      mUdbContext,\n+                      mGlueConfiguration),\n+                  glueUfsUri);\n+        }\n+      }\n+      return pathTranslator;\n+    } catch (AlluxioException e) {\n+      throw new IOException(\n+          \"Failed to mount table location. tableName: \" + tableName\n+              + \" glueUfsLocation: \" + glueUfsUri\n+              + \" AlluxioLocation: \" + alluxioUri + \" error: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @Override\n+  public UdbTable getTable(String tableName) throws IOException {\n+    Table table;\n+    List<Partition> partitions;\n+    // Glue doesn't support column statistics infomation\n+    Map<String, List<ColumnStatisticsInfo>> statsMap = new HashMap<>();\n+    try {\n+      GetTableRequest tableRequest = new GetTableRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withDatabaseName(mGlueDbName)\n+          .withName(tableName);\n+      table = getClient().getTable(tableRequest).getTable();\n+\n+      partitions = batchGetPartitions(getClient(), tableName);\n+      PathTranslator pathTranslator = mountAlluxioPaths(table, partitions);\n+\n+      // Glue does not provide column statistic information\n+      List<ColumnStatisticsInfo> columnStatisticsData = new ArrayList<>();\n+\n+      PartitionInfo partitionInfo = PartitionInfo.newBuilder()\n+          .setDbName(mGlueDbName)\n+          .setTableName(tableName)\n+          .addAllDataCols(GlueUtils.toProto(table.getStorageDescriptor().getColumns()))\n+          .setStorage(GlueUtils.toProto(table.getStorageDescriptor(), pathTranslator))\n+          .putAllParameters(table.getParameters())\n+          .build();\n+\n+      Layout layout = Layout.newBuilder()\n+          .setLayoutType(HiveLayout.TYPE)\n+          .setLayoutData(partitionInfo.toByteString())\n+          .build();\n+\n+      List<Column> partitionColumns = table.getPartitionKeys();\n+\n+      List<UdbPartition> udbPartitions = new ArrayList<>();\n+      if (partitionColumns.isEmpty()) {\n+        PartitionInfo.Builder partitionInfoBuilder = PartitionInfo.newBuilder()\n+            .setDbName(mUdbContext.getDbName())\n+            .setTableName(tableName)\n+            .addAllDataCols(GlueUtils.toProto(table.getStorageDescriptor().getColumns()))\n+            .setStorage(GlueUtils.toProto(table.getStorageDescriptor(), pathTranslator))\n+            .setPartitionName(tableName)\n+            .putAllParameters(table.getParameters());\n+        udbPartitions.add(new GluePartition(\n+            new HiveLayout(partitionInfoBuilder.build(), Collections.emptyList())));\n+      } else {\n+        for (Partition partition : partitions) {\n+          String partName = GlueUtils.makePartitionName(partitionColumns, partition.getValues());\n+          PartitionInfo.Builder pib = PartitionInfo.newBuilder()\n+              .setDbName(getUdbContext().getDbName())\n+              .setTableName(tableName)\n+              .addAllDataCols(GlueUtils.toProto(partition.getStorageDescriptor().getColumns()))\n+              .setStorage(GlueUtils.toProto(partition.getStorageDescriptor(), pathTranslator))\n+              .setPartitionName(partName)\n+              .putAllParameters(partition.getParameters());\n+          if (partition.getValues() != null) {\n+            pib.addAllValues(partition.getValues());\n+          }\n+          udbPartitions.add(new GluePartition(new HiveLayout(pib.build(),\n+              statsMap.getOrDefault(partName, Collections.emptyList()))));\n+        }\n+      }\n+\n+      return new GlueTable(this,\n+          pathTranslator,\n+          tableName,\n+          GlueUtils.toProtoSchema(table.getStorageDescriptor().getColumns()),\n+          columnStatisticsData,\n+          // Glue does not provide FieldSchema from API directly\n+          // Get FieldSchema from partition keys\n+          GlueUtils.toProto(table.getPartitionKeys()),\n+          udbPartitions,\n+          layout,\n+          table);\n+    } catch (EntityNotFoundException e) {\n+      throw new NotFoundException(\"Table \" + tableName + \" does not exist.\", e);", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDkzOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407844939", "bodyText": "Added.", "author": "HelloHorizon", "createdAt": "2020-04-14T03:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MjE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyMTYwNg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r411621606", "bodyText": "I don't see the updated exception messages which include the db name and catalog id.", "author": "gpang", "createdAt": "2020-04-20T19:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MjE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MjQzMg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407572432", "bodyText": "You can remove \"WARNING\", and also add the catalog id and the database name.", "author": "gpang", "createdAt": "2020-04-13T16:30:59Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueDatabase.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.exception.AlluxioException;\n+import alluxio.exception.status.NotFoundException;\n+import alluxio.grpc.table.ColumnStatisticsInfo;\n+import alluxio.grpc.table.Layout;\n+import alluxio.grpc.table.layout.hive.PartitionInfo;\n+import alluxio.master.table.DatabaseInfo;\n+import alluxio.table.common.UdbPartition;\n+import alluxio.table.common.layout.HiveLayout;\n+import alluxio.table.common.udb.PathTranslator;\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+import alluxio.table.common.udb.UdbTable;\n+import alluxio.table.common.udb.UdbUtil;\n+import alluxio.table.common.udb.UnderDatabase;\n+import alluxio.util.io.PathUtils;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.AWSGlueAsyncClientBuilder;\n+import com.amazonaws.services.glue.model.AWSGlueException;\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Database;\n+import com.amazonaws.services.glue.model.EntityNotFoundException;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import com.amazonaws.services.glue.model.GetDatabaseResult;\n+import com.amazonaws.services.glue.model.GetPartitionsRequest;\n+import com.amazonaws.services.glue.model.GetTableRequest;\n+import com.amazonaws.services.glue.model.GetTablesRequest;\n+import com.amazonaws.services.glue.model.GetTablesResult;\n+import com.amazonaws.services.glue.model.GlueEncryptionException;\n+import com.amazonaws.services.glue.model.Partition;\n+import com.amazonaws.services.glue.model.Table;\n+import com.amazonaws.services.glue.model.ValidationException;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Glue database implementation.\n+ */\n+public class GlueDatabase implements UnderDatabase {\n+  private static final Logger LOG = LoggerFactory.getLogger(GlueDatabase.class);\n+\n+  private final UdbContext mUdbContext;\n+  private final AWSGlueAsync mGlueClient;\n+  private final UdbConfiguration mGlueConfiguration;\n+  /** the name of the glue db. */\n+  private final String mGlueDbName;\n+\n+  /** the owner name of glue database, which is an fake place holder. */\n+  private final String mOwnerName = \"PUBLIC_OWNER\";\n+  private final alluxio.grpc.table.PrincipalType mOwnerType = alluxio.grpc.table.PrincipalType.ROLE;\n+\n+  @VisibleForTesting\n+  protected GlueDatabase(UdbContext udbContext, UdbConfiguration glueConfig, String glueDbName) {\n+    mUdbContext = udbContext;\n+    mGlueConfiguration = glueConfig;\n+    mGlueClient = createAsyncGlueClient(glueConfig);\n+    mGlueDbName = glueDbName;\n+  }\n+\n+  /**\n+   * Create an instance of the Glue database UDB.\n+   *\n+   * @param udbContext the db context\n+   * @param configuration the configuration\n+   * @return the new instance\n+   */\n+  public static GlueDatabase create(UdbContext udbContext, UdbConfiguration configuration) {\n+    String glueDbName = udbContext.getUdbDbName();\n+    if (glueDbName == null || glueDbName.isEmpty()) {\n+      throw new IllegalArgumentException(\n+          \"Glue database name cannot be empty: \" + glueDbName);\n+    } else if (configuration.get(Property.GLUE_REGION) == null) {\n+      throw new IllegalArgumentException(\"GlueUdb Error: AWS region cannot be empty.\");\n+    }\n+\n+    return new GlueDatabase(udbContext, configuration, glueDbName);\n+  }\n+\n+  @Override\n+  public UdbContext getUdbContext() {\n+    return mUdbContext;\n+  }\n+\n+  @Override\n+  public DatabaseInfo getDatabaseInfo() throws IOException {\n+    LOG.info(\"Getting Glue database information from database: \" + mGlueDbName + \".\");\n+    try {\n+      GetDatabaseRequest dbRequest = new GetDatabaseRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withName(mGlueDbName);\n+      GetDatabaseResult dbResult = mGlueClient.getDatabase(dbRequest);\n+      Database glueDatabase = dbResult.getDatabase();\n+      String glueDbLocation = glueDatabase.getLocationUri();\n+      String glueDbDescription = glueDatabase.getDescription();\n+      Map<String, String> glueParameters = new HashMap<>();\n+      // Returned parameter can be null while Alluxio require non-null hash map for parameters\n+      if (glueDatabase.getParameters() != null) {\n+        glueParameters = glueDatabase.getParameters();\n+      }\n+      return new DatabaseInfo(\n+          glueDbLocation,\n+          mOwnerName,\n+          mOwnerType,\n+          glueDbDescription,\n+          glueParameters);\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Cannot find glue database\" + mGlueDbName\n+          + \".\" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * This method allows user to test udb glue client with remote glue server.\n+   *\n+   * @param config udbconfiguration\n+   * @return glue async client\n+   */\n+  @VisibleForTesting\n+  protected static AWSGlueAsync createAsyncGlueClient(UdbConfiguration config) {\n+    ClientConfiguration clientConfig = new ClientConfiguration()\n+        .withMaxConnections(config.getInt(Property.MAX_GLUE_CONNECTION));\n+    AWSGlueAsyncClientBuilder asyncClientBuilder = AWSGlueAsyncClientBuilder\n+        .standard()\n+        .withClientConfiguration(clientConfig);\n+\n+    if (!config.get(Property.GLUE_REGION).isEmpty()) {\n+      LOG.info(\"Set Glue region: {}.\", config.get(Property.GLUE_REGION));\n+      asyncClientBuilder.setRegion(config.get(Property.GLUE_REGION));\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access key id.\");\n+    }\n+\n+    if (!config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      LOG.warn(\"Please setup the AWS access secret key.\");\n+    }\n+\n+    asyncClientBuilder.setCredentials(getAWSCredentialsProvider(config));\n+\n+    return asyncClientBuilder.build();\n+  }\n+\n+  private static AWSCredentialsProvider getAWSCredentialsProvider(UdbConfiguration config) {\n+    //TODO(shouwei): add compelete authentication method for glue udb\n+    if (!config.get(Property.AWS_GLUE_ACCESS_KEY).isEmpty()\n+        && !config.get(Property.AWS_GLUE_SECRET_KEY).isEmpty()) {\n+      return new AWSStaticCredentialsProvider(\n+        new BasicAWSCredentials(\n+          config.get(Property.AWS_GLUE_ACCESS_KEY),\n+          config.get(Property.AWS_GLUE_SECRET_KEY)));\n+    }\n+    return DefaultAWSCredentialsProviderChain.getInstance();\n+  }\n+\n+  @Override\n+  public String getType() {\n+    return GlueDatabaseFactory.TYPE;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return mGlueDbName;\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() throws IOException {\n+    try {\n+      String nextToken = null;\n+      List<String> tableNames = new ArrayList<>();\n+      do {\n+        GetTablesRequest tablesRequest =\n+            new GetTablesRequest()\n+                .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+                .withDatabaseName(mGlueDbName)\n+                .withNextToken(nextToken);\n+        GetTablesResult tablesResult = mGlueClient.getTables(tablesRequest);\n+        tablesResult.getTableList().forEach(table -> tableNames.add(table.getName()));\n+        nextToken = tablesResult.getNextToken();\n+      } while (nextToken != null);\n+      return tableNames;\n+    } catch (EntityNotFoundException e) {\n+      throw new IOException(\"Failed to get glue tables: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  private PathTranslator mountAlluxioPaths(Table table, List<Partition> partitions)\n+      throws IOException {\n+    String tableName = table.getName();\n+    AlluxioURI ufsUri;\n+    AlluxioURI alluxioUri = mUdbContext.getTableLocation(tableName);\n+    String glueUfsUri = table.getStorageDescriptor().getLocation();\n+\n+    try {\n+      PathTranslator pathTranslator = new PathTranslator();\n+      ufsUri = new AlluxioURI(table.getStorageDescriptor().getLocation());\n+      pathTranslator.addMapping(\n+          UdbUtil.mountAlluxioPath(\n+              tableName,\n+              ufsUri,\n+              alluxioUri,\n+              mUdbContext,\n+              mGlueConfiguration),\n+          glueUfsUri);\n+\n+      for (Partition partition : partitions) {\n+        AlluxioURI partitionUri;\n+        String partitionName;\n+        if (partition.getStorageDescriptor() != null\n+            && partition.getStorageDescriptor().getLocation() != null\n+            && ufsUri.isAncestorOf(\n+            partitionUri = new AlluxioURI(\n+                partition.getStorageDescriptor().getLocation()))) {\n+          glueUfsUri = partition.getStorageDescriptor().getLocation();\n+          partitionName = partition.getValues().toString();\n+          try {\n+            partitionName = GlueUtils.makePartitionName(\n+                table.getPartitionKeys(),\n+                partition.getValues());\n+          } catch (IOException e) {\n+            LOG.warn(\"Error making partition name for table {}, partition {}\", tableName,\n+                partition.getValues().toString());\n+          }\n+          alluxioUri = new AlluxioURI(\n+              PathUtils.concatPath(\n+                  mUdbContext.getTableLocation(tableName).getPath(),\n+                  partitionName));\n+          // mount partition path if it is not already mounted as part of the table path mount\n+          pathTranslator\n+              .addMapping(\n+                  UdbUtil.mountAlluxioPath(\n+                      tableName,\n+                      partitionUri,\n+                      alluxioUri,\n+                      mUdbContext,\n+                      mGlueConfiguration),\n+                  glueUfsUri);\n+        }\n+      }\n+      return pathTranslator;\n+    } catch (AlluxioException e) {\n+      throw new IOException(\n+          \"Failed to mount table location. tableName: \" + tableName\n+              + \" glueUfsLocation: \" + glueUfsUri\n+              + \" AlluxioLocation: \" + alluxioUri + \" error: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  @Override\n+  public UdbTable getTable(String tableName) throws IOException {\n+    Table table;\n+    List<Partition> partitions;\n+    // Glue doesn't support column statistics infomation\n+    Map<String, List<ColumnStatisticsInfo>> statsMap = new HashMap<>();\n+    try {\n+      GetTableRequest tableRequest = new GetTableRequest()\n+          .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+          .withDatabaseName(mGlueDbName)\n+          .withName(tableName);\n+      table = getClient().getTable(tableRequest).getTable();\n+\n+      partitions = batchGetPartitions(getClient(), tableName);\n+      PathTranslator pathTranslator = mountAlluxioPaths(table, partitions);\n+\n+      // Glue does not provide column statistic information\n+      List<ColumnStatisticsInfo> columnStatisticsData = new ArrayList<>();\n+\n+      PartitionInfo partitionInfo = PartitionInfo.newBuilder()\n+          .setDbName(mGlueDbName)\n+          .setTableName(tableName)\n+          .addAllDataCols(GlueUtils.toProto(table.getStorageDescriptor().getColumns()))\n+          .setStorage(GlueUtils.toProto(table.getStorageDescriptor(), pathTranslator))\n+          .putAllParameters(table.getParameters())\n+          .build();\n+\n+      Layout layout = Layout.newBuilder()\n+          .setLayoutType(HiveLayout.TYPE)\n+          .setLayoutData(partitionInfo.toByteString())\n+          .build();\n+\n+      List<Column> partitionColumns = table.getPartitionKeys();\n+\n+      List<UdbPartition> udbPartitions = new ArrayList<>();\n+      if (partitionColumns.isEmpty()) {\n+        PartitionInfo.Builder partitionInfoBuilder = PartitionInfo.newBuilder()\n+            .setDbName(mUdbContext.getDbName())\n+            .setTableName(tableName)\n+            .addAllDataCols(GlueUtils.toProto(table.getStorageDescriptor().getColumns()))\n+            .setStorage(GlueUtils.toProto(table.getStorageDescriptor(), pathTranslator))\n+            .setPartitionName(tableName)\n+            .putAllParameters(table.getParameters());\n+        udbPartitions.add(new GluePartition(\n+            new HiveLayout(partitionInfoBuilder.build(), Collections.emptyList())));\n+      } else {\n+        for (Partition partition : partitions) {\n+          String partName = GlueUtils.makePartitionName(partitionColumns, partition.getValues());\n+          PartitionInfo.Builder pib = PartitionInfo.newBuilder()\n+              .setDbName(getUdbContext().getDbName())\n+              .setTableName(tableName)\n+              .addAllDataCols(GlueUtils.toProto(partition.getStorageDescriptor().getColumns()))\n+              .setStorage(GlueUtils.toProto(partition.getStorageDescriptor(), pathTranslator))\n+              .setPartitionName(partName)\n+              .putAllParameters(partition.getParameters());\n+          if (partition.getValues() != null) {\n+            pib.addAllValues(partition.getValues());\n+          }\n+          udbPartitions.add(new GluePartition(new HiveLayout(pib.build(),\n+              statsMap.getOrDefault(partName, Collections.emptyList()))));\n+        }\n+      }\n+\n+      return new GlueTable(this,\n+          pathTranslator,\n+          tableName,\n+          GlueUtils.toProtoSchema(table.getStorageDescriptor().getColumns()),\n+          columnStatisticsData,\n+          // Glue does not provide FieldSchema from API directly\n+          // Get FieldSchema from partition keys\n+          GlueUtils.toProto(table.getPartitionKeys()),\n+          udbPartitions,\n+          layout,\n+          table);\n+    } catch (EntityNotFoundException e) {\n+      throw new NotFoundException(\"Table \" + tableName + \" does not exist.\", e);\n+    } catch (ValidationException e) {\n+      e.printStackTrace();\n+      throw new IOException(\"Failed to get table: \"\n+          + tableName + \" with validation error: \" + e.getMessage(), e);\n+    } catch (GlueEncryptionException e) {\n+      throw new IOException(\"Failed to get table: \" + tableName + \" error: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private List<Partition> batchGetPartitions(AWSGlueAsync glueClient, String tableName)\n+      throws IOException {\n+    List<Partition> partitions = new ArrayList<>();\n+    try {\n+      GetPartitionsRequest getPartitionsRequest =\n+          new GetPartitionsRequest()\n+              .withCatalogId(mGlueConfiguration.get(Property.CATALOG_ID))\n+              .withDatabaseName(mGlueDbName)\n+              .withTableName(tableName);\n+      if (glueClient.getPartitions(getPartitionsRequest).getPartitions() != null) {\n+        partitions = glueClient.getPartitions(getPartitionsRequest).getPartitions();\n+      }\n+      return partitions;\n+    } catch (AWSGlueException e) {\n+      throw new IOException(\"WARNING: Cannot get partition information for table: \"", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDk3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407844971", "bodyText": "Fixed.", "author": "HelloHorizon", "createdAt": "2020-04-14T03:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MjQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NDk3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407574972", "bodyText": "why is this necessary?", "author": "gpang", "createdAt": "2020-04-13T16:35:34Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/Property.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.table.common.udb.UdbProperty;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * This contains all the properties for Glue UDB.\n+ */\n+public class Property extends UdbProperty {\n+  private static final Logger LOG = LoggerFactory.getLogger(Property.class);\n+  /** A map from default property key's string name to the key. */\n+  private static final Map<String, Property> DEFAULT_KEYS_MAP = new ConcurrentHashMap<>();", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3NzE2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r411577162", "bodyText": "Is this needed?", "author": "gpang", "createdAt": "2020-04-20T17:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NDk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NTkwNA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407575904", "bodyText": "can we just create a local map to pass into UdbConfiguration(conf) on the next line?", "author": "gpang", "createdAt": "2020-04-13T16:37:25Z", "path": "table/server/underdb/glue/src/test/java/alluxio/table/under/glue/GlueDatabaseTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GlueDatabaseTest {\n+\n+  private static final String DB_NAME = \"test\";\n+  private static final Map<String, String> CONF = new HashMap<>();\n+\n+  @Rule\n+  public ExpectedException mExpection = ExpectedException.none();\n+\n+  private UdbContext mUdbContext;\n+  private UdbConfiguration mUdbConfiguration;\n+\n+  @Before\n+  public void before() {\n+    CONF.put(\"aws.region\", \"us-east-1\");", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDYzNw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407844637", "bodyText": "Changed.", "author": "HelloHorizon", "createdAt": "2020-04-14T03:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NTkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NjM0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407576343", "bodyText": "instead of ignoring each method, can you ignore the entire class?", "author": "gpang", "createdAt": "2020-04-13T16:38:13Z", "path": "table/server/underdb/glue/src/test/java/alluxio/table/under/glue/RemoteGlueTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+\n+import com.amazonaws.services.glue.AWSGlueAsync;\n+import com.amazonaws.services.glue.model.GetDatabaseRequest;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class RemoteGlueTest {\n+\n+  private static final String DB_NAME = \"test\";\n+  private static final Map<String, String> CONF = new HashMap<>();\n+\n+  private UdbContext mUdbContext;\n+  private UdbConfiguration mUdbConfiguration;\n+  private GlueDatabase mGlueDatabase;\n+  private AWSGlueAsync mGlueClient;\n+\n+  private static final String AWS_ACCESS_KEY_ID = \"<PUT_YOUR_ACCESS_KEY_ID_HERE>\";\n+  private static final String AWS_SECRET_KEY = \"<PUT_YOUR_SECRET_KEY_HERE>\";\n+  private static final String CATALOG_ID = \"<PUT_YOUR_CATALOG_ID_HERE>\";\n+  private static final String AWS_REGION = \"<PUT_GLUE_REGION_HERE>\";\n+\n+  @Ignore", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NDY4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407844689", "bodyText": "Changed.", "author": "HelloHorizon", "createdAt": "2020-04-14T03:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NjM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3Njg2OA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407576868", "bodyText": "For all of these conversions, does it handle when fields don't exist or are null? We have hit several issues with the hive one because of these scenarios.", "author": "gpang", "createdAt": "2020-04-13T16:39:11Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/GlueUtils.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.grpc.table.Schema;\n+import alluxio.grpc.table.layout.hive.HiveBucketProperty;\n+import alluxio.grpc.table.layout.hive.SortingColumn;\n+import alluxio.grpc.table.layout.hive.Storage;\n+import alluxio.grpc.table.layout.hive.StorageFormat;\n+import alluxio.table.common.udb.PathTranslator;\n+\n+import com.amazonaws.services.glue.model.Column;\n+import com.amazonaws.services.glue.model.Order;\n+import com.amazonaws.services.glue.model.StorageDescriptor;\n+import org.apache.hadoop.hive.common.FileUtils;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Glue utils.\n+ */\n+public class GlueUtils {", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyOTQ3NA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407729474", "bodyText": "I have fixed some of the null filed issues in glueUtils, I will add more UT for these scenarios.", "author": "HelloHorizon", "createdAt": "2020-04-13T21:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3Njg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NzE2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r407577163", "bodyText": "Did you figure out if this is required or not?", "author": "gpang", "createdAt": "2020-04-13T16:39:44Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/Property.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.table.common.udb.UdbProperty;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * This contains all the properties for Glue UDB.\n+ */\n+public class Property extends UdbProperty {\n+  private static final Logger LOG = LoggerFactory.getLogger(Property.class);\n+  /** A map from default property key's string name to the key. */\n+  private static final Map<String, Property> DEFAULT_KEYS_MAP = new ConcurrentHashMap<>();\n+\n+  /**\n+   * Create a alluxio.table.under.glue.Property instance.\n+   *\n+   * @param name the property name\n+   * @param description the property description\n+   * @param defaultValue the default value\n+   */\n+  public Property(String name, String description, String defaultValue) {\n+    super(name, description, defaultValue);\n+  }\n+\n+  /**\n+   * UDB property builder.\n+   */\n+  public static final class Builder {\n+    private String mName;\n+    private String mDescription;\n+    private String mDefaultValue;\n+\n+    /**\n+     * @param name name of property\n+     */\n+    public Builder(String name) {\n+      mName = name;\n+    }\n+\n+    /**\n+     * @param name name for the property\n+     * @return the updated builder instance\n+     */\n+    public Builder setName(String name) {\n+      mName = name;\n+      return this;\n+    }\n+\n+    /**\n+     * @param defaultValue the property's default value\n+     * @return the updated builder instance\n+     */\n+    public Builder setDefaultValue(String defaultValue) {\n+      mDefaultValue = defaultValue;\n+      return this;\n+    }\n+\n+    /**\n+     * @param description of the property\n+     * @return the updated builder instance\n+     */\n+    public Builder setDescription(String description) {\n+      mDescription = description;\n+      return this;\n+    }\n+\n+    /**\n+     * Register the unregistered udb property.\n+     *\n+     * @return registered udb property\n+     */\n+    public Property build() {\n+      Property property = buildUnregistered();\n+      Preconditions.checkState(\n+          Property.register(property),\n+          \"Cannot register existing alluxio.table.under.glue.Property \\\"%s\\\"\", mName);\n+      return property;\n+    }\n+\n+    /**\n+     * Creates the Udb alluxio.table.under.glue.Property\n+     * without registering it with default property list.\n+     *\n+     * @return udb property\n+     */\n+    public Property buildUnregistered() {\n+      Property property = new Property(mName, mDescription, mDefaultValue);\n+      return property;\n+    }\n+  }\n+\n+  /**\n+   * Registers the given UDB alluxio.table.under.glue.Property to the global map.\n+   *\n+   * @param Property the udb property\n+   * @return whether the udb property is successfully registered\n+   */\n+  @VisibleForTesting\n+  public static boolean register(Property Property) {\n+    String name = Property.getName();\n+    if (DEFAULT_KEYS_MAP.containsKey(name)) {\n+      return false;\n+    }\n+\n+    DEFAULT_KEYS_MAP.put(name, Property);\n+    return true;\n+  }\n+\n+  /**\n+   * Unregisters the given key from the global map.\n+   *\n+   * @param Property the property to unregister\n+   */\n+  @VisibleForTesting\n+  public static void unregister(Property Property) {\n+    String name = Property.getName();\n+    DEFAULT_KEYS_MAP.remove(name);\n+  }\n+\n+  public static final Property MAX_GLUE_CONNECTION =\n+      new Builder(Name.MAX_GLUE_CONNECTION)\n+          .setDefaultValue(\"5\")\n+          .setDescription(\"The maximum number of connection to glue metastore.\")\n+          .build();\n+\n+  public static final Property GLUE_REGION =\n+      new Builder(Name.GLUE_REGION)\n+        .setDefaultValue(\"\")\n+        .setDescription(\"The regional endpoint for client service calls.\")\n+        .build();\n+\n+  public static final Property CATALOG_ID =\n+      new Builder(Name.CATALOG_ID)\n+          .setDefaultValue(\"\")\n+          .setDescription(\"The catalog id of aws glue.\")\n+          .build();\n+\n+  public static final Property AWS_GLUE_ACCESS_KEY =\n+      new Builder(Name.AWS_GLUE_ACCESS_KEY)\n+        .setDefaultValue(\"\")\n+        .setDescription(\"The access key to access the aws glue.\")\n+        .build();\n+\n+  public static final Property AWS_GLUE_SECRET_KEY =\n+      new Builder(Name.AWS_GLUE_SECRET_KEY)\n+        .setDefaultValue(\"\")\n+        .setDescription(\"The secret key to access the aws glue.\")\n+        .build();\n+\n+  /**\n+   * @return the name of alluxio.table.under.glue.Property\n+   */\n+  public String getName() {\n+    return mName;\n+  }\n+\n+  /**\n+   * @return the description of a property\n+   */\n+  public String getDescription() {\n+    return mDescription;\n+  }\n+\n+  /**\n+   * @return the default value of udb property or null if value not set\n+   */\n+  @Nullable\n+  @Override\n+  public String getDefaultValue() {\n+    Object defaultValue = mDefaultValue;\n+    return defaultValue == null ? null : defaultValue.toString();\n+  }\n+\n+  /**\n+   * Corresponding configurations of GLUE configurations.\n+   */\n+  public static final class Name {\n+    // AWS Glue related properties\n+    public static final String MAX_GLUE_CONNECTION = \"max.connection\";\n+    public static final String GLUE_REGION = \"aws.region\";\n+    public static final String CATALOG_ID = \"aws.catalog.id\";", "originalCommit": "5b207a42d53f26208c40ff80bcb6192352566611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3ODYxMw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r411578613", "bodyText": "Is this required? Or, how can this work without specifying the catalog id?", "author": "gpang", "createdAt": "2020-04-20T17:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NzE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDY1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r414194659", "bodyText": "Added to TODO.", "author": "HelloHorizon", "createdAt": "2020-04-23T23:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NzE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY5OTI4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r414699287", "bodyText": "I don't see the TODO comment?", "author": "gpang", "createdAt": "2020-04-24T16:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3NzE2Mw=="}], "type": "inlineReview"}, {"oid": "6688aed85e583dc1bd6378dbef16a62c87a344c8", "url": "https://github.com/Alluxio/alluxio/commit/6688aed85e583dc1bd6378dbef16a62c87a344c8", "message": "Glue Udb implemetation", "committedDate": "2020-04-14T04:30:56Z", "type": "commit"}, {"oid": "109bb0bd2edefa597f3b16bf2909e15543924e1c", "url": "https://github.com/Alluxio/alluxio/commit/109bb0bd2edefa597f3b16bf2909e15543924e1c", "message": "Fix jar issue for GlueDatabaseFacory", "committedDate": "2020-04-14T04:30:57Z", "type": "commit"}, {"oid": "e008b0997f1d01d80b30b5939c1e35861eb9ef18", "url": "https://github.com/Alluxio/alluxio/commit/e008b0997f1d01d80b30b5939c1e35861eb9ef18", "message": "Fix fileds conflicts", "committedDate": "2020-04-14T04:30:57Z", "type": "commit"}, {"oid": "520e79d734d2ef16319872dce24f803d3e288166", "url": "https://github.com/Alluxio/alluxio/commit/520e79d734d2ef16319872dce24f803d3e288166", "message": "Fix column information for presto", "committedDate": "2020-04-14T04:30:57Z", "type": "commit"}, {"oid": "07f80c438f25cf7c89d8c81c5045acae641e79cf", "url": "https://github.com/Alluxio/alluxio/commit/07f80c438f25cf7c89d8c81c5045acae641e79cf", "message": "Remove redudant log info", "committedDate": "2020-04-14T04:30:58Z", "type": "commit"}, {"oid": "1670b57f4d619c4786e000c2c633b1142d083f6c", "url": "https://github.com/Alluxio/alluxio/commit/1670b57f4d619c4786e000c2c633b1142d083f6c", "message": "Fix minor changes", "committedDate": "2020-04-14T04:30:58Z", "type": "commit"}, {"oid": "248fbdb048ff6e915528e091ec522baa8a256b1a", "url": "https://github.com/Alluxio/alluxio/commit/248fbdb048ff6e915528e091ec522baa8a256b1a", "message": "Fix Glue test configuration", "committedDate": "2020-04-14T04:30:58Z", "type": "commit"}, {"oid": "e1d96c54030f9cad9a2c67d60ac44dddc4929683", "url": "https://github.com/Alluxio/alluxio/commit/e1d96c54030f9cad9a2c67d60ac44dddc4929683", "message": "Optimize Glue Database log information", "committedDate": "2020-04-14T04:30:59Z", "type": "commit"}, {"oid": "9a313229489032dd5dd7c6cc130a523bab5f943c", "url": "https://github.com/Alluxio/alluxio/commit/9a313229489032dd5dd7c6cc130a523bab5f943c", "message": "Remove redudant glue layout", "committedDate": "2020-04-14T04:30:59Z", "type": "commit"}, {"oid": "a2e2a263a078737321cd46d50bbaed7cb522640d", "url": "https://github.com/Alluxio/alluxio/commit/a2e2a263a078737321cd46d50bbaed7cb522640d", "message": "Refact alluxioMount, GlueDatabase and GlueTable", "committedDate": "2020-04-14T04:31:00Z", "type": "commit"}, {"oid": "728df18eee97d1ac315711fc7ca1b6702ed54209", "url": "https://github.com/Alluxio/alluxio/commit/728df18eee97d1ac315711fc7ca1b6702ed54209", "message": "Fix tests", "committedDate": "2020-04-14T04:31:00Z", "type": "commit"}, {"oid": "428741deb49a926a947281e1d4e15f957047e8a4", "url": "https://github.com/Alluxio/alluxio/commit/428741deb49a926a947281e1d4e15f957047e8a4", "message": "Remove redudant mountAlluxioPath in HiveDatabase, Implement makePartName for Glue", "committedDate": "2020-04-14T04:31:00Z", "type": "commit"}, {"oid": "b70c79a7eee3223c9d8f4ed7d5ec4a46fd7eba5d", "url": "https://github.com/Alluxio/alluxio/commit/b70c79a7eee3223c9d8f4ed7d5ec4a46fd7eba5d", "message": "Enhance Glue Udb UT", "committedDate": "2020-04-14T04:31:01Z", "type": "commit"}, {"oid": "d1c680f45319b86304cb9515a2ea2c8dbdfe14a5", "url": "https://github.com/Alluxio/alluxio/commit/d1c680f45319b86304cb9515a2ea2c8dbdfe14a5", "message": "Fix log, style and pom files", "committedDate": "2020-04-14T04:31:01Z", "type": "commit"}, {"oid": "d1c680f45319b86304cb9515a2ea2c8dbdfe14a5", "url": "https://github.com/Alluxio/alluxio/commit/d1c680f45319b86304cb9515a2ea2c8dbdfe14a5", "message": "Fix log, style and pom files", "committedDate": "2020-04-14T04:31:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3Njk5NA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r411576994", "bodyText": "what are register and unregister for?", "author": "gpang", "createdAt": "2020-04-20T17:55:19Z", "path": "table/server/underdb/glue/src/main/java/alluxio/table/under/glue/Property.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import alluxio.table.common.udb.UdbProperty;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * This contains all the properties for Glue UDB.\n+ */\n+public class Property extends UdbProperty {\n+  private static final Logger LOG = LoggerFactory.getLogger(Property.class);\n+  /** A map from default property key's string name to the key. */\n+  private static final Map<String, Property> DEFAULT_KEYS_MAP = new ConcurrentHashMap<>();\n+\n+  /**\n+   * Create a alluxio.table.under.glue.Property instance.\n+   *\n+   * @param name the property name\n+   * @param description the property description\n+   * @param defaultValue the default value\n+   */\n+  public Property(String name, String description, String defaultValue) {\n+    super(name, description, defaultValue);\n+  }\n+\n+  /**\n+   * UDB property builder.\n+   */\n+  public static final class Builder {\n+    private String mName;\n+    private String mDescription;\n+    private String mDefaultValue;\n+\n+    /**\n+     * @param name name of property\n+     */\n+    public Builder(String name) {\n+      mName = name;\n+    }\n+\n+    /**\n+     * @param name name for the property\n+     * @return the updated builder instance\n+     */\n+    public Builder setName(String name) {\n+      mName = name;\n+      return this;\n+    }\n+\n+    /**\n+     * @param defaultValue the property's default value\n+     * @return the updated builder instance\n+     */\n+    public Builder setDefaultValue(String defaultValue) {\n+      mDefaultValue = defaultValue;\n+      return this;\n+    }\n+\n+    /**\n+     * @param description of the property\n+     * @return the updated builder instance\n+     */\n+    public Builder setDescription(String description) {\n+      mDescription = description;\n+      return this;\n+    }\n+\n+    /**\n+     * Register the unregistered udb property.\n+     *\n+     * @return registered udb property\n+     */\n+    public Property build() {\n+      Property property = buildUnregistered();\n+      Preconditions.checkState(\n+          Property.register(property),\n+          \"Cannot register existing alluxio.table.under.glue.Property \\\"%s\\\"\", mName);\n+      return property;\n+    }\n+\n+    /**\n+     * Creates the Udb alluxio.table.under.glue.Property\n+     * without registering it with default property list.\n+     *\n+     * @return udb property\n+     */\n+    public Property buildUnregistered() {\n+      Property property = new Property(mName, mDescription, mDefaultValue);\n+      return property;\n+    }\n+  }\n+\n+  /**\n+   * Registers the given UDB alluxio.table.under.glue.Property to the global map.\n+   *\n+   * @param Property the udb property\n+   * @return whether the udb property is successfully registered\n+   */\n+  @VisibleForTesting\n+  public static boolean register(Property Property) {", "originalCommit": "d1c680f45319b86304cb9515a2ea2c8dbdfe14a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzNzE3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r414037171", "bodyText": "The register is used to build a new property, and there's no use for unregister for now.", "author": "HelloHorizon", "createdAt": "2020-04-23T18:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3Njk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3NzkwMA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r411577900", "bodyText": "can we get rid of this static map, and just use a local one when needed?", "author": "gpang", "createdAt": "2020-04-20T17:56:38Z", "path": "table/server/underdb/glue/src/test/java/alluxio/table/under/glue/GlueDatabaseTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.table.under.glue;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.table.common.udb.UdbConfiguration;\n+import alluxio.table.common.udb.UdbContext;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GlueDatabaseTest {\n+\n+  private static final String DB_NAME = \"test\";\n+  private static final Map<String, String> CONF = new HashMap<>();", "originalCommit": "d1c680f45319b86304cb9515a2ea2c8dbdfe14a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzNzgxOA==", "url": "https://github.com/Alluxio/alluxio/pull/11205#discussion_r414037818", "bodyText": "The property is needed since glue need some extra properties compare to default udb.\nI will change it to local map.", "author": "HelloHorizon", "createdAt": "2020-04-23T18:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3NzkwMA=="}], "type": "inlineReview"}, {"oid": "d43c20ee9b0cf916cc2ad6f27457d0b576ca106e", "url": "https://github.com/Alluxio/alluxio/commit/d43c20ee9b0cf916cc2ad6f27457d0b576ca106e", "message": "Fix log; Fix parameter null point in databaseinfo", "committedDate": "2020-04-24T01:00:18Z", "type": "commit"}, {"oid": "b68a8755255d7a2f7939ba1e93291978c9891cb0", "url": "https://github.com/Alluxio/alluxio/commit/b68a8755255d7a2f7939ba1e93291978c9891cb0", "message": "Add TODO for catalogid", "committedDate": "2020-04-24T16:26:49Z", "type": "commit"}]}