{"pr_number": 11772, "pr_title": "Support table quota for Local cache", "pr_createdAt": "2020-07-15T21:51:49Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11772", "timeline": [{"oid": "51abde72e7abe2e4fdd8ebfa700df828fc6f764c", "url": "https://github.com/Alluxio/alluxio/commit/51abde72e7abe2e4fdd8ebfa700df828fc6f764c", "message": "Support table quota for Local cache", "committedDate": "2020-07-22T07:49:19Z", "type": "forcePushed"}, {"oid": "236a2ffaef9718fd361325b3865a093d3e7a1c7d", "url": "https://github.com/Alluxio/alluxio/commit/236a2ffaef9718fd361325b3865a093d3e7a1c7d", "message": "Support table quota for Local cache", "committedDate": "2020-07-22T08:11:58Z", "type": "forcePushed"}, {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43", "url": "https://github.com/Alluxio/alluxio/commit/e3630dd4b882f0bbc091b97f4c31e017a7a1bf43", "message": "Support table quota for Local cache", "committedDate": "2020-07-22T17:50:25Z", "type": "commit"}, {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43", "url": "https://github.com/Alluxio/alluxio/commit/e3630dd4b882f0bbc091b97f4c31e017a7a1bf43", "message": "Support table quota for Local cache", "committedDate": "2020-07-22T17:50:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTQ5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r459111492", "bodyText": "Is this string search potentially expensive compared to having a data structure?", "author": "calvinjia", "createdAt": "2020-07-22T22:07:56Z", "path": "core/common/src/main/java/alluxio/client/quota/Scope.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.quota;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class defines \"Scope\" of a quota. A scope is hierarchical, e.g.\n+ * <ul>\n+ *   <li>\".\" for global scope;</li>\n+ *   <li>\"schema1\" for an entire schema;</li>\n+ *   <li>\"schema2.table1\" for a given table;</li>\n+ *   <li>\"schema3.table2.partition1\" for a given partition</li>\n+ * </ul>\n+ */\n+@ThreadSafe\n+public class Scope {\n+  public static final String GLOBAL_ID = \".\";\n+  public static final String SEPARATOR = \".\";\n+\n+  public static final Scope GLOBAL = new Scope(GLOBAL_ID, 1);\n+  private final String mId;\n+  private final int mLength;\n+\n+  /**\n+   * @param id id of the scope\n+   * @return an instance of this scope converted from a string\n+   */\n+  public static Scope create(String id) {\n+    Preconditions.checkArgument(id != null && id.length() > 0,\n+        \"scope id can not be null or empty string\");\n+    if (GLOBAL_ID.equals(id)) {\n+      return GLOBAL;\n+    }\n+    return new Scope(id, id.length());\n+  }\n+\n+  private Scope(String id, int len) {\n+    mId = id;\n+    mLength = len;\n+  }\n+\n+  /**\n+   * @return parent scope\n+   */\n+  @Nullable\n+  public Scope parent() {\n+    int r = mId.lastIndexOf(SEPARATOR, mLength - 1);", "originalCommit": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMTQ0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r476901442", "bodyText": "I would go with string searching first until we see it shows high cost in cpu profiling", "author": "apc999", "createdAt": "2020-08-26T00:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTY2Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r459111666", "bodyText": "Typo?", "author": "calvinjia", "createdAt": "2020-07-22T22:08:27Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/ScopedCacheEvictor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */CacheQuota.java:18", "originalCommit": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg5ODUzNg==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r476898536", "bodyText": "removed", "author": "apc999", "createdAt": "2020-08-26T00:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMjA5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r459112091", "bodyText": "Does a cache quota belong to a file? What happens if files have conflicting cache quotas?", "author": "calvinjia", "createdAt": "2020-07-22T22:09:32Z", "path": "core/common/src/main/java/alluxio/wire/FileInfo.java", "diffHunk": "@@ -665,6 +673,15 @@ public FileInfo setXAttr(Map<String, byte[]> xAttr) {\n     return this;\n   }\n \n+  /**\n+   * @param cacheQuota the cache quota\n+   * @return the updated {@link FileInfo}\n+   */\n+  public FileInfo setCacheQuota(CacheQuota cacheQuota) {", "originalCommit": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMDUxOA==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r476900518", "bodyText": "this is a workaround to cope with URIStatus", "author": "apc999", "createdAt": "2020-08-26T00:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMjA5MQ=="}], "type": "inlineReview"}, {"oid": "0af2dfb424ecbd4fceb0f67b240952a271e80f8a", "url": "https://github.com/Alluxio/alluxio/commit/0af2dfb424ecbd4fceb0f67b240952a271e80f8a", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into quota", "committedDate": "2020-08-26T00:37:37Z", "type": "forcePushed"}, {"oid": "223272afa987fef96d707718a5566b2a77a95920", "url": "https://github.com/Alluxio/alluxio/commit/223272afa987fef96d707718a5566b2a77a95920", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into quota", "committedDate": "2020-08-26T00:57:05Z", "type": "commit"}, {"oid": "223272afa987fef96d707718a5566b2a77a95920", "url": "https://github.com/Alluxio/alluxio/commit/223272afa987fef96d707718a5566b2a77a95920", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into quota", "committedDate": "2020-08-26T00:57:05Z", "type": "forcePushed"}, {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f", "url": "https://github.com/Alluxio/alluxio/commit/4431da9cf36c51a02f923783e292aeab96ea052f", "message": "Fix tests", "committedDate": "2020-08-27T05:33:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4Njk4NA==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478686984", "bodyText": "Did you consider making another class like QuotaMetaStore?", "author": "calvinjia", "createdAt": "2020-08-27T20:49:05Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java", "diffHunk": "@@ -38,13 +43,37 @@\n   private final AtomicLong mBytes = new AtomicLong(0);\n   /** The number of pages stored. */\n   private final AtomicLong mPages = new AtomicLong(0);\n+  /** Track the number of bytes on each scope. */\n+  private final Map<Scope, Long> mBytesInScope = new ConcurrentHashMap<>();\n+  private final boolean mQuotaEnabled;", "originalCommit": "4431da9cf36c51a02f923783e292aeab96ea052f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczODY1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478738653", "bodyText": "tried but it was actually less clean/", "author": "apc999", "createdAt": "2020-08-27T22:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4Njk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk1MzI3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r556953275", "bodyText": "tried again. looks promising. Let's go with a subclass QuotaMetaStore", "author": "apc999", "createdAt": "2021-01-13T23:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4Njk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNjMxMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478706311", "bodyText": "If this isn't intended for normal use, should we put it in the test package?", "author": "calvinjia", "createdAt": "2020-08-27T21:29:07Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/FIFOEvictor.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+\n+import java.util.LinkedList;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Implementation of Evictor using FIFO eviction policy for the test.\n+ */\n+public class FIFOEvictor implements CacheEvictor {", "originalCommit": "4431da9cf36c51a02f923783e292aeab96ea052f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczODg2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478738863", "bodyText": "remove the comment about tests -- i think this can be useful for normal use, e.g., AI workloads", "author": "apc999", "createdAt": "2020-08-27T22:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNjMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxOTU4NA==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478719584", "bodyText": "Do we need to use the new put API with the cache quota?", "author": "calvinjia", "createdAt": "2020-08-27T21:59:44Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -100,12 +96,11 @@ public LocalCacheFileInStream(AlluxioURI path, OpenFilePOptions options, FileSys\n   public LocalCacheFileInStream(URIStatus status, OpenFilePOptions options, FileSystem externalFs,\n       CacheManager cacheManager) {\n     mPageSize = externalFs.getConf().getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n-    mPath = new AlluxioURI(status.getPath());\n     mOpenOptions = options;\n     mExternalFs = externalFs;\n     mCacheManager = cacheManager;\n-    // Lazy init of status object\n     mStatus = status;\n+    mCacheQuota = status.getCacheQuota();", "originalCommit": "4431da9cf36c51a02f923783e292aeab96ea052f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0MTYyNw==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478741627", "bodyText": "correct. for this part I need help from @kewang1024 to understand how to pass scope of a file here.", "author": "apc999", "createdAt": "2020-08-27T23:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxOTU4NA=="}], "type": "inlineReview"}, {"oid": "1eb61f86cb1635727e09f62b1f9e4b43066839e5", "url": "https://github.com/Alluxio/alluxio/commit/1eb61f86cb1635727e09f62b1f9e4b43066839e5", "message": "Fix issues", "committedDate": "2020-08-28T17:07:39Z", "type": "commit"}, {"oid": "5fe515e1e50c172e327ba2004ddfff0b15364c02", "url": "https://github.com/Alluxio/alluxio/commit/5fe515e1e50c172e327ba2004ddfff0b15364c02", "message": "Save", "committedDate": "2020-09-02T01:09:56Z", "type": "commit"}, {"oid": "427ea3463045cbe10cc21f76d2dec2c9347dfd9f", "url": "https://github.com/Alluxio/alluxio/commit/427ea3463045cbe10cc21f76d2dec2c9347dfd9f", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into quota", "committedDate": "2021-01-13T21:01:04Z", "type": "commit"}, {"oid": "427ea3463045cbe10cc21f76d2dec2c9347dfd9f", "url": "https://github.com/Alluxio/alluxio/commit/427ea3463045cbe10cc21f76d2dec2c9347dfd9f", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into quota", "committedDate": "2021-01-13T21:01:04Z", "type": "forcePushed"}, {"oid": "e11ff6e33e23a177a652adffc627066620fa485b", "url": "https://github.com/Alluxio/alluxio/commit/e11ff6e33e23a177a652adffc627066620fa485b", "message": "Revert unrelated change", "committedDate": "2021-01-13T22:52:35Z", "type": "commit"}, {"oid": "e11ff6e33e23a177a652adffc627066620fa485b", "url": "https://github.com/Alluxio/alluxio/commit/e11ff6e33e23a177a652adffc627066620fa485b", "message": "Revert unrelated change", "committedDate": "2021-01-13T22:52:35Z", "type": "forcePushed"}, {"oid": "b13b2d08ff0bc195f43b135cd7dac65a46410df0", "url": "https://github.com/Alluxio/alluxio/commit/b13b2d08ff0bc195f43b135cd7dac65a46410df0", "message": "Separate QuotaMetaStore and put FIFOEvictor back", "committedDate": "2021-01-14T21:20:28Z", "type": "commit"}, {"oid": "c5ac8e22ca044290ffbec5ce9abfc03a93a535a6", "url": "https://github.com/Alluxio/alluxio/commit/c5ac8e22ca044290ffbec5ce9abfc03a93a535a6", "message": "Revert more unnecessary change", "committedDate": "2021-01-14T21:33:11Z", "type": "commit"}, {"oid": "0b4625968e1e75dba629c1570c503d0f65840868", "url": "https://github.com/Alluxio/alluxio/commit/0b4625968e1e75dba629c1570c503d0f65840868", "message": "Fix style and add more tests", "committedDate": "2021-01-16T00:57:07Z", "type": "commit"}, {"oid": "e2f486d7364a2a854e29ec287dca212f675fb558", "url": "https://github.com/Alluxio/alluxio/commit/e2f486d7364a2a854e29ec287dca212f675fb558", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into quota", "committedDate": "2021-01-26T20:55:14Z", "type": "commit"}, {"oid": "7d4585f4bc11d6ebdf68c4d01f42c8bdd530e88c", "url": "https://github.com/Alluxio/alluxio/commit/7d4585f4bc11d6ebdf68c4d01f42c8bdd530e88c", "message": "Fix tests", "committedDate": "2021-01-27T05:38:31Z", "type": "commit"}, {"oid": "53fd5bb1afbf64e833a57b8b5fbe2d4d0094066f", "url": "https://github.com/Alluxio/alluxio/commit/53fd5bb1afbf64e833a57b8b5fbe2d4d0094066f", "message": "Fix more tests", "committedDate": "2021-01-27T06:44:04Z", "type": "commit"}, {"oid": "66d7922fb9383ed9567114689bd98f3a140378ba", "url": "https://github.com/Alluxio/alluxio/commit/66d7922fb9383ed9567114689bd98f3a140378ba", "message": "More cleanup", "committedDate": "2021-01-27T07:41:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MjAxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566362019", "bodyText": "Should we be consistent in the initialization of Maps?", "author": "calvinjia", "createdAt": "2021-01-28T19:44:25Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/QuotaMetaStore.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import alluxio.client.quota.CacheScope;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.exception.PageNotFoundException;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A metastore implementation that tracking usage associated with each cache scope.\n+ */\n+public class QuotaMetaStore extends DefaultMetaStore {\n+  /** Track the number of bytes on each scope. */\n+  private final Map<CacheScope, Long> mBytesInScope = new ConcurrentHashMap<>();\n+  private final Map<CacheScope, CacheEvictor> mCacheEvictors;", "originalCommit": "66d7922fb9383ed9567114689bd98f3a140378ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ5MjA0OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566492049", "bodyText": "fixed", "author": "apc999", "createdAt": "2021-01-29T00:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MjAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MzA4NA==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566363084", "bodyText": "Do we need to use regex here or can we use split by delimiter and index?", "author": "calvinjia", "createdAt": "2021-01-28T19:46:21Z", "path": "core/common/src/main/java/alluxio/client/quota/CacheScope.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.quota;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class defines \"Scope\" of a cache quota. For Presto caching, scope is\n+ * hierarchical with different levels including:\n+ * <ul>\n+ *   <li>GLOBAL (\".\") for global scope;</li>\n+ *   <li>SCHEMA (e.g., \"schema1\") for an entire schema;</li>\n+ *   <li>TABLE (e.g., \"schema2.table1\") for a given table;</li>\n+ *   <li>PARTITION (e.g., \"schema3.table2.partition1\") for a given partition</li>\n+ * </ul>\n+ */\n+@ThreadSafe\n+public class CacheScope {\n+  private static final String GLOBAL_ID = \".\";\n+  public static final String SEPARATOR = \".\";\n+  public static final CacheScope GLOBAL = new CacheScope(GLOBAL_ID, 1, Level.GLOBAL);\n+\n+  /**\n+   * Level of a scope.\n+   */\n+  public enum Level {", "originalCommit": "66d7922fb9383ed9567114689bd98f3a140378ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ5Mjg4OA==", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566492888", "bodyText": "I'd like to keep it cleaner & more flexible initially.\nIn case it consumes too much cpu in profiling, we can change it to string split.", "author": "apc999", "createdAt": "2021-01-29T00:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MzA4NA=="}], "type": "inlineReview"}, {"oid": "d3a0a15195ae1686c380288c3726886af7c25e1b", "url": "https://github.com/Alluxio/alluxio/commit/d3a0a15195ae1686c380288c3726886af7c25e1b", "message": "Address comments", "committedDate": "2021-01-29T00:09:13Z", "type": "commit"}]}