{"pr_number": 10935, "pr_title": "Close previous stream before opening next one when compacting files", "pr_createdAt": "2020-02-18T22:12:23Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10935", "timeline": [{"oid": "642ecff53765901971db53eb9606f8b5c7ddffc7", "url": "https://github.com/Alluxio/alluxio/commit/642ecff53765901971db53eb9606f8b5c7ddffc7", "message": "Close previous input stream before opening the next one when compacting files", "committedDate": "2020-02-18T22:10:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTYzMA==", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380969630", "bodyText": "the output will be deleted all the time?", "author": "gpang", "createdAt": "2020-02-18T22:18:37Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -174,38 +172,29 @@ private boolean shouldIgnore(URIStatus status) {\n   @Override\n   public SerializableVoid runTask(CompactConfig config, ArrayList<CompactTask> tasks,\n       RunTaskContext context) throws Exception {\n-    Closer closer = Closer.create();\n-    boolean closed = false;\n-    Compactor compactor = new SequentialCompactor();\n     for (CompactTask task : tasks) {\n       ArrayList<String> inputs = task.getInputs();\n       if (inputs.isEmpty()) {\n         continue;\n       }\n       AlluxioURI output = new AlluxioURI(task.getOutput());\n-      List<TableReader> readers = Lists.newArrayList();\n-      TableWriter writer = null;\n-      try {\n+\n+      TableSchema schema;\n+      try (TableReader reader = TableReader.create(new AlluxioURI(inputs.get(0)), config.getPartitionInfo())) {\n+        schema = reader.getSchema();\n+      }\n+\n+      try (TableWriter writer = TableWriter.create(schema, output)) {\n         for (String input : inputs) {\n-          readers.add(closer.register(TableReader.create(new AlluxioURI(input),\n-              config.getPartitionInfo())));\n+          try (TableReader reader = TableReader.create(new AlluxioURI(input),\n+              config.getPartitionInfo())) {\n+            for (TableRow row = reader.read(); row != null; row = reader.read()) {\n+              writer.write(row);\n+            }\n+          }\n         }\n-        TableSchema schema = readers.get(0).getSchema();\n-        writer = closer.register(TableWriter.create(schema, output));\n-        compactor.compact(readers, writer);\n-      } catch (Throwable t) {\n-        closer.close();\n-        closed = true;\n-        try {\n-          context.getFileSystem().delete(output); // output is the compacted file\n-        } catch (Throwable e) {\n-          t.addSuppressed(e);\n-        }\n-        closer.rethrow(t);\n       } finally {\n-        if (!closed) {\n-          closer.close();\n-        }\n+        context.getFileSystem().delete(output); // output is the compacted file", "originalCommit": "642ecff53765901971db53eb9606f8b5c7ddffc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MDIxMA==", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380970210", "bodyText": "Oops. Yeah that's wrong :/", "author": "bradyoo", "createdAt": "2020-02-18T22:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTYzMA=="}], "type": "inlineReview"}, {"oid": "3f0886ff8623fbbeb07e7e7c87fbc70c4d568738", "url": "https://github.com/Alluxio/alluxio/commit/3f0886ff8623fbbeb07e7e7c87fbc70c4d568738", "message": "dont delete output all the time", "committedDate": "2020-02-18T22:24:07Z", "type": "commit"}, {"oid": "3f0886ff8623fbbeb07e7e7c87fbc70c4d568738", "url": "https://github.com/Alluxio/alluxio/commit/3f0886ff8623fbbeb07e7e7c87fbc70c4d568738", "message": "dont delete output all the time", "committedDate": "2020-02-18T22:24:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MzQzMA==", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380973430", "bodyText": "Shouldn't we delete the output if there is a failure?", "author": "gpang", "createdAt": "2020-02-18T22:27:49Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -174,37 +172,26 @@ private boolean shouldIgnore(URIStatus status) {\n   @Override\n   public SerializableVoid runTask(CompactConfig config, ArrayList<CompactTask> tasks,\n       RunTaskContext context) throws Exception {\n-    Closer closer = Closer.create();\n-    boolean closed = false;\n-    Compactor compactor = new SequentialCompactor();\n     for (CompactTask task : tasks) {\n       ArrayList<String> inputs = task.getInputs();\n       if (inputs.isEmpty()) {\n         continue;\n       }\n       AlluxioURI output = new AlluxioURI(task.getOutput());\n-      List<TableReader> readers = Lists.newArrayList();\n-      TableWriter writer = null;\n-      try {\n+\n+      TableSchema schema;\n+      try (TableReader reader = TableReader.create(new AlluxioURI(inputs.get(0)), config.getPartitionInfo())) {\n+        schema = reader.getSchema();\n+      }\n+\n+      try (TableWriter writer = TableWriter.create(schema, output)) {\n         for (String input : inputs) {\n-          readers.add(closer.register(TableReader.create(new AlluxioURI(input),\n-              config.getPartitionInfo())));\n-        }\n-        TableSchema schema = readers.get(0).getSchema();\n-        writer = closer.register(TableWriter.create(schema, output));\n-        compactor.compact(readers, writer);\n-      } catch (Throwable t) {\n-        closer.close();\n-        closed = true;\n-        try {\n-          context.getFileSystem().delete(output); // output is the compacted file", "originalCommit": "3f0886ff8623fbbeb07e7e7c87fbc70c4d568738", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3NzM4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10935#discussion_r380977387", "bodyText": "Sorry. I just needed something quick to retrigger build. I went back to deleting it again.", "author": "bradyoo", "createdAt": "2020-02-18T22:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3MzQzMA=="}], "type": "inlineReview"}, {"oid": "7905b6edf9ff134aa11d1582e93931e301f25bdf", "url": "https://github.com/Alluxio/alluxio/commit/7905b6edf9ff134aa11d1582e93931e301f25bdf", "message": "delete output file", "committedDate": "2020-02-18T22:36:43Z", "type": "commit"}, {"oid": "1386b5efb04121dd0e8d77f6d074161ae42bedcc", "url": "https://github.com/Alluxio/alluxio/commit/1386b5efb04121dd0e8d77f6d074161ae42bedcc", "message": "checkstyle", "committedDate": "2020-02-18T22:37:44Z", "type": "commit"}]}