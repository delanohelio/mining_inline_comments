{"pr_number": 11700, "pr_title": "[DOCFIX] Update 'Caching' doc for multi-tier management changes", "pr_createdAt": "2020-07-01T21:51:29Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11700", "timeline": [{"oid": "603bd61ad507921e0458e079a8d87efa8b9b549d", "url": "https://github.com/Alluxio/alluxio/commit/603bd61ad507921e0458e079a8d87efa8b9b549d", "message": "Update 'Caching' doc for multi-tier management changes", "committedDate": "2020-07-01T21:49:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTI5NA==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r448641294", "bodyText": "Could you add to the section for backward compatibility, ie. if users were using LRFU, what kind of error they might see and how to restore the previous behavior (ie. switch to LRFUAnnotator)?", "author": "calvinjia", "createdAt": "2020-07-01T22:07:55Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,90 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n+### Block Annotation Policies\n \n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-### Eviction Policies\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+`The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\n+Alluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\n+an eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.`\n \n-Out-of-the-box evictor implementations include:\n+Out-of-the-box annotation implementations include:\n \n-- **LRUEvictor**: Evicts the least-recently-used blocks until the required space is freed.\n-**This is Alluxio's default evictor**.\n-- **GreedyEvictor**: Evicts arbitrary blocks until the required space is freed.\n-- **LRFUEvictor**: Evicts blocks based on least-recently-used and least-frequently-used with a\n+- **LRUAnnotator**: Annotates the blocks based on least-recently-used order.\n+**This is Alluxio's default annotator**.\n+- **LRFUAnnotator**: Annotates the blocks based on least-recently-used and least-frequently-used orders with a\n configurable weight.\n     - If the weight is completely biased toward least-recently-used, the behavior will be the same\n-    as the LRUEvictor.\n-    - The applicable configuration properties are `alluxio.worker.evictor.lrfu.step.factor` and\n-    `alluxio.worker.evictor.lrfu.attenuation.factor` which can be found in\n-    [configuration properties]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.lrfu.step.factor)\n-- **PartialLRUEvictor** : Evicts based on a least-recently-used policy but will choose one configured\n-storage directory on the local worker with maximum free space and only evict from that directory.\n-\n-The evictor utilized by workers is determined by the Alluxio property\n-[`alluxio.worker.evictor.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.class).\n+    as the LRUAnnotator.\n+    - The applicable configuration properties are `alluxio.worker.block.annotator.lrfu.step.factor` and\n+    `alluxio.worker.block.annotator.lrfu.attenuation.factor`.\n+\n+The annotator utilized by workers is determined by the Alluxio property\n+[`alluxio.worker.block.annotator.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.block.annotator.class).\n The property should specify the fully qualified class name within the configuration. Currently\n available options are:\n \n-- `alluxio.worker.block.evictor.LRUEvictor`\n-- `alluxio.worker.block.evictor.GreedyEvictor`\n-- `alluxio.worker.block.evictor.LRFUEvictor`\n-- `alluxio.worker.block.evictor.PartialLRUEvictor`\n+- `alluxio.worker.block.annotator.LRUAnnotator`\n+- `alluxio.worker.block.annotator.LRFUAnnotator`", "originalCommit": "603bd61ad507921e0458e079a8d87efa8b9b549d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NDAyMw==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r448644023", "bodyText": "You mean putting this into a dedicated section?\n\nThe old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\nAlluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\nan eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.`", "author": "ggezer", "createdAt": "2020-07-01T22:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NzUxMA==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r448647510", "bodyText": "Add to that the typical error message they will see if they forgot to change from the old property (ie. class not found) and what the corresponding new annotator classes are for the old evictors.", "author": "calvinjia", "createdAt": "2020-07-01T22:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MDQyNg==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r448650426", "bodyText": "ptal @ bf88b30", "author": "ggezer", "createdAt": "2020-07-01T22:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTI5NA=="}], "type": "inlineReview"}, {"oid": "bf88b301150cce034a5e2765d944e661517d6554", "url": "https://github.com/Alluxio/alluxio/commit/bf88b301150cce034a5e2765d944e661517d6554", "message": "carve out a section for evictor emulation", "committedDate": "2020-07-01T22:33:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTI2OA==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450445268", "bodyText": "Could you add a sample error message? One common way users find the docs is by searching the exception they see. You could also add it to the troubleshooting page if you think its too low level for this page.", "author": "calvinjia", "createdAt": "2020-07-06T19:51:13Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -223,6 +219,17 @@ available options are:\n - `alluxio.worker.block.annotator.LRUAnnotator`\n - `alluxio.worker.block.annotator.LRFUAnnotator`\n \n+#### Evictor Emulation\n+The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\n+Alluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\n+an eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.\n+\n+The old evictor configurations should be changes as below. (Failing to change the lef-over configuration will cause class load exceptions as old evictor implementations are deleted.)", "originalCommit": "bf88b301150cce034a5e2765d944e661517d6554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "url": "https://github.com/Alluxio/alluxio/commit/940d4b82828c72b54a004b8432dd46ee79a2ab4b", "message": "add exc type as sample", "committedDate": "2020-07-06T23:55:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTMxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450615315", "bodyText": "have we totally get rid of high and low water marks? if yes, we shall mention it in this doc as many users are tuning this parameters for 2.2 and earlier", "author": "apc999", "createdAt": "2020-07-07T05:14:50Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -180,22 +174,14 @@ alluxio.worker.tieredstore.level0.dirs.path=/mnt/ramdisk\n alluxio.worker.tieredstore.level0.dirs.mediumtype=MEM\n # set the quota for the ramdisk to be `100GB`\n alluxio.worker.tieredstore.level0.dirs.quota=100GB\n-# set the ratio of high watermark on top layer to be 90%\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-# set the ratio of low watermark on top layer to be 70%\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.7\n # configure the second tier to be a hard disk tier\n alluxio.worker.tieredstore.level1.alias=HDD\n # configured 3 separate file paths for the second tier\n alluxio.worker.tieredstore.level1.dirs.path=/mnt/hdd1,/mnt/hdd2,/mnt/hdd3\n # defined HDD to be the medium type of the second tier\n-alluxio.worker.tieredstore.level0.dirs.mediumtype=HDD,HDD,HDD\n+alluxio.worker.tieredstore.level1.dirs.mediumtype=HDD,HDD,HDD\n # define the quota for each of the 3 file paths of the second tier\n alluxio.worker.tieredstore.level1.dirs.quota=2TB,5TB,500GB\n-# set the ratio of high watermark on the second layer to be 90%\n-alluxio.worker.tieredstore.level1.watermark.high.ratio=0.9", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1OTgwMw==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r451759803", "bodyText": "added a note to emulation section.", "author": "ggezer", "createdAt": "2020-07-08T18:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTcyMg==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450615722", "bodyText": "either saying \"block annotation policy (explained later)\" or put a hyperlink pointing to the section, since this is the first time we introduce this concept.", "author": "apc999", "createdAt": "2020-07-07T05:16:08Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -129,24 +128,21 @@ For example, users often specify the following tiers:\n \n #### Writing Data\n \n-When a user writes a new block, it is written to the top tier by default. If eviction cannot free up\n-space in the top tier, the write will fail. If the file size exceeds the size of the top tier, the\n-write will also fail.\n+When a user writes a new block, it is written to the top tier by default. If the top tier does not have enough free space,\n+then the next tier is tried. If no space is found on all tiers, Alluxio frees up space for new data as its storage is designed to be volatile.\n+Eviction will start attempting to evict blocks from the worker, based on the block annotation policy.", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNjg2MA==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450616860", "bodyText": "In the past, when we deprecate a feature, it is still usable but not recommended any more.\nIn this case an exception will be thrown, I would say \"the old eviction policies are now removed\" instead of \"deprecated\".", "author": "apc999", "createdAt": "2020-07-07T05:20:33Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.\n \n-Out-of-the-box evictor implementations include:\n+Out-of-the-box annotation implementations include:\n \n-- **LRUEvictor**: Evicts the least-recently-used blocks until the required space is freed.\n-**This is Alluxio's default evictor**.\n-- **GreedyEvictor**: Evicts arbitrary blocks until the required space is freed.\n-- **LRFUEvictor**: Evicts blocks based on least-recently-used and least-frequently-used with a\n+- **LRUAnnotator**: Annotates the blocks based on least-recently-used order.\n+**This is Alluxio's default annotator**.\n+- **LRFUAnnotator**: Annotates the blocks based on least-recently-used and least-frequently-used orders with a\n configurable weight.\n     - If the weight is completely biased toward least-recently-used, the behavior will be the same\n-    as the LRUEvictor.\n-    - The applicable configuration properties are `alluxio.worker.evictor.lrfu.step.factor` and\n-    `alluxio.worker.evictor.lrfu.attenuation.factor` which can be found in\n-    [configuration properties]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.lrfu.step.factor)\n-- **PartialLRUEvictor** : Evicts based on a least-recently-used policy but will choose one configured\n-storage directory on the local worker with maximum free space and only evict from that directory.\n-\n-The evictor utilized by workers is determined by the Alluxio property\n-[`alluxio.worker.evictor.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.class).\n+    as the LRUAnnotator.\n+    - The applicable configuration properties are `alluxio.worker.block.annotator.lrfu.step.factor` and\n+    `alluxio.worker.block.annotator.lrfu.attenuation.factor`.\n+\n+The annotator utilized by workers is determined by the Alluxio property\n+[`alluxio.worker.block.annotator.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.block.annotator.class).\n The property should specify the fully qualified class name within the configuration. Currently\n available options are:\n \n-- `alluxio.worker.block.evictor.LRUEvictor`\n-- `alluxio.worker.block.evictor.GreedyEvictor`\n-- `alluxio.worker.block.evictor.LRFUEvictor`\n-- `alluxio.worker.block.evictor.PartialLRUEvictor`\n+- `alluxio.worker.block.annotator.LRUAnnotator`\n+- `alluxio.worker.block.annotator.LRFUAnnotator`\n+\n+#### Evictor Emulation\n+The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxODE3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450618175", "bodyText": "not clear to me what 'Dynamic Block Placement' means here, maybe fwd  reference the section after?", "author": "apc999", "createdAt": "2020-07-07T05:25:27Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMDUyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450620521", "bodyText": "does it mean we can now write a file larger than the top tier capacity? (which is not possible previously)\nif the answer is yes, better to indicate this improvement here.", "author": "apc999", "createdAt": "2020-07-07T05:33:48Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.\n \n-Out-of-the-box evictor implementations include:\n+Out-of-the-box annotation implementations include:\n \n-- **LRUEvictor**: Evicts the least-recently-used blocks until the required space is freed.\n-**This is Alluxio's default evictor**.\n-- **GreedyEvictor**: Evicts arbitrary blocks until the required space is freed.\n-- **LRFUEvictor**: Evicts blocks based on least-recently-used and least-frequently-used with a\n+- **LRUAnnotator**: Annotates the blocks based on least-recently-used order.\n+**This is Alluxio's default annotator**.\n+- **LRFUAnnotator**: Annotates the blocks based on least-recently-used and least-frequently-used orders with a\n configurable weight.\n     - If the weight is completely biased toward least-recently-used, the behavior will be the same\n-    as the LRUEvictor.\n-    - The applicable configuration properties are `alluxio.worker.evictor.lrfu.step.factor` and\n-    `alluxio.worker.evictor.lrfu.attenuation.factor` which can be found in\n-    [configuration properties]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.lrfu.step.factor)\n-- **PartialLRUEvictor** : Evicts based on a least-recently-used policy but will choose one configured\n-storage directory on the local worker with maximum free space and only evict from that directory.\n-\n-The evictor utilized by workers is determined by the Alluxio property\n-[`alluxio.worker.evictor.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.class).\n+    as the LRUAnnotator.\n+    - The applicable configuration properties are `alluxio.worker.block.annotator.lrfu.step.factor` and\n+    `alluxio.worker.block.annotator.lrfu.attenuation.factor`.\n+\n+The annotator utilized by workers is determined by the Alluxio property\n+[`alluxio.worker.block.annotator.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.block.annotator.class).\n The property should specify the fully qualified class name within the configuration. Currently\n available options are:\n \n-- `alluxio.worker.block.evictor.LRUEvictor`\n-- `alluxio.worker.block.evictor.GreedyEvictor`\n-- `alluxio.worker.block.evictor.LRFUEvictor`\n-- `alluxio.worker.block.evictor.PartialLRUEvictor`\n+- `alluxio.worker.block.annotator.LRUAnnotator`\n+- `alluxio.worker.block.annotator.LRFUAnnotator`\n+\n+#### Evictor Emulation\n+The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\n+Configuring old Alluxio evictors will cause worker startup failure with `java.lang.ClassNotFoundException`.\n+\n+However, Alluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\n+an eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.\n+\n+The old evictor configurations should be changes as below. (Failing to change the lef-over configuration will cause class load exceptions as old evictor implementations are deleted.)\n+- LRUEvictor -> LRUAnnotator\n+- GreedyEvictor -> LRUAnnotator\n+- PartialLRUEvictor -> LRUAnnotator\n+- LRFUEvictor -> LRFUAnnotator\n+\n+### Tiered Storage Management\n+As block allocation/eviction no longer enforces a particular tier for new writes, a new block could end up in any configured tier.", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMDY3Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450620677", "bodyText": "Previously eviction happens on reaching high watermark, and executed by a background process. Does it mean that the foreground writer thread will pause and evict blocks synchronously?", "author": "apc999", "createdAt": "2020-07-07T05:34:23Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2MzI3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r451763271", "bodyText": "Yes.", "author": "ggezer", "createdAt": "2020-07-08T19:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMDY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NTkzMA==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r451765930", "bodyText": "Added more explanation to Writing Data section.", "author": "ggezer", "createdAt": "2020-07-08T19:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMDY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMTMxNg==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450621316", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `the lowest block of a higher tier has higher order than the highest block of a tier below`.\n          \n          \n            \n            **the lowest block of a higher tier has higher order than the highest block of a tier below**.", "author": "apc999", "createdAt": "2020-07-07T05:36:49Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.\n \n-Out-of-the-box evictor implementations include:\n+Out-of-the-box annotation implementations include:\n \n-- **LRUEvictor**: Evicts the least-recently-used blocks until the required space is freed.\n-**This is Alluxio's default evictor**.\n-- **GreedyEvictor**: Evicts arbitrary blocks until the required space is freed.\n-- **LRFUEvictor**: Evicts blocks based on least-recently-used and least-frequently-used with a\n+- **LRUAnnotator**: Annotates the blocks based on least-recently-used order.\n+**This is Alluxio's default annotator**.\n+- **LRFUAnnotator**: Annotates the blocks based on least-recently-used and least-frequently-used orders with a\n configurable weight.\n     - If the weight is completely biased toward least-recently-used, the behavior will be the same\n-    as the LRUEvictor.\n-    - The applicable configuration properties are `alluxio.worker.evictor.lrfu.step.factor` and\n-    `alluxio.worker.evictor.lrfu.attenuation.factor` which can be found in\n-    [configuration properties]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.lrfu.step.factor)\n-- **PartialLRUEvictor** : Evicts based on a least-recently-used policy but will choose one configured\n-storage directory on the local worker with maximum free space and only evict from that directory.\n-\n-The evictor utilized by workers is determined by the Alluxio property\n-[`alluxio.worker.evictor.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.class).\n+    as the LRUAnnotator.\n+    - The applicable configuration properties are `alluxio.worker.block.annotator.lrfu.step.factor` and\n+    `alluxio.worker.block.annotator.lrfu.attenuation.factor`.\n+\n+The annotator utilized by workers is determined by the Alluxio property\n+[`alluxio.worker.block.annotator.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.block.annotator.class).\n The property should specify the fully qualified class name within the configuration. Currently\n available options are:\n \n-- `alluxio.worker.block.evictor.LRUEvictor`\n-- `alluxio.worker.block.evictor.GreedyEvictor`\n-- `alluxio.worker.block.evictor.LRFUEvictor`\n-- `alluxio.worker.block.evictor.PartialLRUEvictor`\n+- `alluxio.worker.block.annotator.LRUAnnotator`\n+- `alluxio.worker.block.annotator.LRFUAnnotator`\n+\n+#### Evictor Emulation\n+The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\n+Configuring old Alluxio evictors will cause worker startup failure with `java.lang.ClassNotFoundException`.\n+\n+However, Alluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\n+an eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.\n+\n+The old evictor configurations should be changes as below. (Failing to change the lef-over configuration will cause class load exceptions as old evictor implementations are deleted.)\n+- LRUEvictor -> LRUAnnotator\n+- GreedyEvictor -> LRUAnnotator\n+- PartialLRUEvictor -> LRUAnnotator\n+- LRFUEvictor -> LRFUAnnotator\n+\n+### Tiered Storage Management\n+As block allocation/eviction no longer enforces a particular tier for new writes, a new block could end up in any configured tier.\n+To enforce the assumption that tiers are configured from fastest to slowest, Alluxio now moves blocks around tiers based on block annotation policies.\n+\n+Below configuration is honoured by each individual tier management task:\n+- `alluxio.worker.management.task.thread.count`: How many threads to use for management tasks. (Default:`CPU core count`)\n+- `alluxio.worker.management.block.transfer.concurrency.limit`: How many block transfers can execute concurrently. (Default:`CPU core count`/ 2)\n+\n+#### Block Aligning (Dynamic Block Placement)\n+Alluxio will dynamically move blocks across tiers in order to have block composition that is in line with the configured block annotation policy.\n+\n+To compensate this, Alluxio watches the I/O pattern and reorganize blocks across tiers to make sure\n+`the lowest block of a higher tier has higher order than the highest block of a tier below`.", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMTcyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450621721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - ANY; management tasks will backoff from worker when there is any user I/O. \n          \n          \n            \n            -`ANY`; management tasks will backoff from worker when there is any user I/O.", "author": "apc999", "createdAt": "2020-07-07T05:38:20Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.\n \n-Out-of-the-box evictor implementations include:\n+Out-of-the-box annotation implementations include:\n \n-- **LRUEvictor**: Evicts the least-recently-used blocks until the required space is freed.\n-**This is Alluxio's default evictor**.\n-- **GreedyEvictor**: Evicts arbitrary blocks until the required space is freed.\n-- **LRFUEvictor**: Evicts blocks based on least-recently-used and least-frequently-used with a\n+- **LRUAnnotator**: Annotates the blocks based on least-recently-used order.\n+**This is Alluxio's default annotator**.\n+- **LRFUAnnotator**: Annotates the blocks based on least-recently-used and least-frequently-used orders with a\n configurable weight.\n     - If the weight is completely biased toward least-recently-used, the behavior will be the same\n-    as the LRUEvictor.\n-    - The applicable configuration properties are `alluxio.worker.evictor.lrfu.step.factor` and\n-    `alluxio.worker.evictor.lrfu.attenuation.factor` which can be found in\n-    [configuration properties]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.lrfu.step.factor)\n-- **PartialLRUEvictor** : Evicts based on a least-recently-used policy but will choose one configured\n-storage directory on the local worker with maximum free space and only evict from that directory.\n-\n-The evictor utilized by workers is determined by the Alluxio property\n-[`alluxio.worker.evictor.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.class).\n+    as the LRUAnnotator.\n+    - The applicable configuration properties are `alluxio.worker.block.annotator.lrfu.step.factor` and\n+    `alluxio.worker.block.annotator.lrfu.attenuation.factor`.\n+\n+The annotator utilized by workers is determined by the Alluxio property\n+[`alluxio.worker.block.annotator.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.block.annotator.class).\n The property should specify the fully qualified class name within the configuration. Currently\n available options are:\n \n-- `alluxio.worker.block.evictor.LRUEvictor`\n-- `alluxio.worker.block.evictor.GreedyEvictor`\n-- `alluxio.worker.block.evictor.LRFUEvictor`\n-- `alluxio.worker.block.evictor.PartialLRUEvictor`\n+- `alluxio.worker.block.annotator.LRUAnnotator`\n+- `alluxio.worker.block.annotator.LRFUAnnotator`\n+\n+#### Evictor Emulation\n+The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\n+Configuring old Alluxio evictors will cause worker startup failure with `java.lang.ClassNotFoundException`.\n+\n+However, Alluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\n+an eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.\n+\n+The old evictor configurations should be changes as below. (Failing to change the lef-over configuration will cause class load exceptions as old evictor implementations are deleted.)\n+- LRUEvictor -> LRUAnnotator\n+- GreedyEvictor -> LRUAnnotator\n+- PartialLRUEvictor -> LRUAnnotator\n+- LRFUEvictor -> LRFUAnnotator\n+\n+### Tiered Storage Management\n+As block allocation/eviction no longer enforces a particular tier for new writes, a new block could end up in any configured tier.\n+To enforce the assumption that tiers are configured from fastest to slowest, Alluxio now moves blocks around tiers based on block annotation policies.\n+\n+Below configuration is honoured by each individual tier management task:\n+- `alluxio.worker.management.task.thread.count`: How many threads to use for management tasks. (Default:`CPU core count`)\n+- `alluxio.worker.management.block.transfer.concurrency.limit`: How many block transfers can execute concurrently. (Default:`CPU core count`/ 2)\n+\n+#### Block Aligning (Dynamic Block Placement)\n+Alluxio will dynamically move blocks across tiers in order to have block composition that is in line with the configured block annotation policy.\n+\n+To compensate this, Alluxio watches the I/O pattern and reorganize blocks across tiers to make sure\n+`the lowest block of a higher tier has higher order than the highest block of a tier below`.\n+\n+This is achieved by `align` management task. This task, upon detecting tiers are out of order, swaps blocks among tiers\n+in order to eliminate disorder among blocks and effectively align the tiers to configured annotation policy.\n+\n+To control tier aligning:\n+- `alluxio.worker.management.tier.align.enabled`: Whether tier aligning task is enabled. (Default:`true`)\n+- `alluxio.worker.management.tier.align.range`: How many blocks to align in a single task run. (Default:`100`)\n+- `alluxio.worker.management.tier.align.reserved.bytes`: The amount of space to reserve on all directories by default when multi-tier is configured. (Default:`1GB`)\n+This is used for internal block movements.\n+- `alluxio.worker.management.tier.swap.restore.enabled`: This controls a special task that is used to unblock tier alignment when internal reserved space was exhausted. (Default:`true`)\n+Reserved space can get exhausted due to fact that Alluxio supports variable block sizes, so swapping blocks between tiers during aligning can decrease reserved space on a directory when block sizes don't match.\n+\n+#### Block Promotions\n+When a higher tier has free space, blocks from a lower tier is moved up in order to better utilize faster disks as it's assumed the higher tiers are configured with faster disks.\n+\n+To control dynamic tier promotion:\n+- `alluxio.worker.management.tier.promote.enabled` : Whether tier promition task is enabled. (Default:`true`)\n+- `alluxio.worker.management.tier.promote.range`: How many blocks to promote in a single task run. (Default:`100`)\n+- `alluxio.worker.management.tier.promote.quota.percent`: The max percentage of each tier that could be used for promotions.\n+Promotions will be stopped to a tier once its used space go over this value. (0 means never promote, and, 100 means always promote.)\n+\n+#### Management Task Back-Off\n+Tier management tasks (align/promote) are respectful to user I/O and backs off whenever worker/disk is under load.\n+This behaviour is to make sure internal management doesn't have negative effect on user I/O performance.\n+\n+There are two back-off types available, `ANY` and `DIRECTORY`, that can be set in `alluxio.worker.management.backoff.strategy` property.\n+\n+- ANY; management tasks will backoff from worker when there is any user I/O. ", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMTc3OA==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450621778", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - DIRECTORY; management tasks will backoff from directories with ongoing user I/O.\n          \n          \n            \n            - `DIRECTORY`; management tasks will backoff from directories with ongoing user I/O.", "author": "apc999", "createdAt": "2020-07-07T05:38:35Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.\n \n-Out-of-the-box evictor implementations include:\n+Out-of-the-box annotation implementations include:\n \n-- **LRUEvictor**: Evicts the least-recently-used blocks until the required space is freed.\n-**This is Alluxio's default evictor**.\n-- **GreedyEvictor**: Evicts arbitrary blocks until the required space is freed.\n-- **LRFUEvictor**: Evicts blocks based on least-recently-used and least-frequently-used with a\n+- **LRUAnnotator**: Annotates the blocks based on least-recently-used order.\n+**This is Alluxio's default annotator**.\n+- **LRFUAnnotator**: Annotates the blocks based on least-recently-used and least-frequently-used orders with a\n configurable weight.\n     - If the weight is completely biased toward least-recently-used, the behavior will be the same\n-    as the LRUEvictor.\n-    - The applicable configuration properties are `alluxio.worker.evictor.lrfu.step.factor` and\n-    `alluxio.worker.evictor.lrfu.attenuation.factor` which can be found in\n-    [configuration properties]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.lrfu.step.factor)\n-- **PartialLRUEvictor** : Evicts based on a least-recently-used policy but will choose one configured\n-storage directory on the local worker with maximum free space and only evict from that directory.\n-\n-The evictor utilized by workers is determined by the Alluxio property\n-[`alluxio.worker.evictor.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.class).\n+    as the LRUAnnotator.\n+    - The applicable configuration properties are `alluxio.worker.block.annotator.lrfu.step.factor` and\n+    `alluxio.worker.block.annotator.lrfu.attenuation.factor`.\n+\n+The annotator utilized by workers is determined by the Alluxio property\n+[`alluxio.worker.block.annotator.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.block.annotator.class).\n The property should specify the fully qualified class name within the configuration. Currently\n available options are:\n \n-- `alluxio.worker.block.evictor.LRUEvictor`\n-- `alluxio.worker.block.evictor.GreedyEvictor`\n-- `alluxio.worker.block.evictor.LRFUEvictor`\n-- `alluxio.worker.block.evictor.PartialLRUEvictor`\n+- `alluxio.worker.block.annotator.LRUAnnotator`\n+- `alluxio.worker.block.annotator.LRFUAnnotator`\n+\n+#### Evictor Emulation\n+The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\n+Configuring old Alluxio evictors will cause worker startup failure with `java.lang.ClassNotFoundException`.\n+\n+However, Alluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\n+an eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.\n+\n+The old evictor configurations should be changes as below. (Failing to change the lef-over configuration will cause class load exceptions as old evictor implementations are deleted.)\n+- LRUEvictor -> LRUAnnotator\n+- GreedyEvictor -> LRUAnnotator\n+- PartialLRUEvictor -> LRUAnnotator\n+- LRFUEvictor -> LRFUAnnotator\n+\n+### Tiered Storage Management\n+As block allocation/eviction no longer enforces a particular tier for new writes, a new block could end up in any configured tier.\n+To enforce the assumption that tiers are configured from fastest to slowest, Alluxio now moves blocks around tiers based on block annotation policies.\n+\n+Below configuration is honoured by each individual tier management task:\n+- `alluxio.worker.management.task.thread.count`: How many threads to use for management tasks. (Default:`CPU core count`)\n+- `alluxio.worker.management.block.transfer.concurrency.limit`: How many block transfers can execute concurrently. (Default:`CPU core count`/ 2)\n+\n+#### Block Aligning (Dynamic Block Placement)\n+Alluxio will dynamically move blocks across tiers in order to have block composition that is in line with the configured block annotation policy.\n+\n+To compensate this, Alluxio watches the I/O pattern and reorganize blocks across tiers to make sure\n+`the lowest block of a higher tier has higher order than the highest block of a tier below`.\n+\n+This is achieved by `align` management task. This task, upon detecting tiers are out of order, swaps blocks among tiers\n+in order to eliminate disorder among blocks and effectively align the tiers to configured annotation policy.\n+\n+To control tier aligning:\n+- `alluxio.worker.management.tier.align.enabled`: Whether tier aligning task is enabled. (Default:`true`)\n+- `alluxio.worker.management.tier.align.range`: How many blocks to align in a single task run. (Default:`100`)\n+- `alluxio.worker.management.tier.align.reserved.bytes`: The amount of space to reserve on all directories by default when multi-tier is configured. (Default:`1GB`)\n+This is used for internal block movements.\n+- `alluxio.worker.management.tier.swap.restore.enabled`: This controls a special task that is used to unblock tier alignment when internal reserved space was exhausted. (Default:`true`)\n+Reserved space can get exhausted due to fact that Alluxio supports variable block sizes, so swapping blocks between tiers during aligning can decrease reserved space on a directory when block sizes don't match.\n+\n+#### Block Promotions\n+When a higher tier has free space, blocks from a lower tier is moved up in order to better utilize faster disks as it's assumed the higher tiers are configured with faster disks.\n+\n+To control dynamic tier promotion:\n+- `alluxio.worker.management.tier.promote.enabled` : Whether tier promition task is enabled. (Default:`true`)\n+- `alluxio.worker.management.tier.promote.range`: How many blocks to promote in a single task run. (Default:`100`)\n+- `alluxio.worker.management.tier.promote.quota.percent`: The max percentage of each tier that could be used for promotions.\n+Promotions will be stopped to a tier once its used space go over this value. (0 means never promote, and, 100 means always promote.)\n+\n+#### Management Task Back-Off\n+Tier management tasks (align/promote) are respectful to user I/O and backs off whenever worker/disk is under load.\n+This behaviour is to make sure internal management doesn't have negative effect on user I/O performance.\n+\n+There are two back-off types available, `ANY` and `DIRECTORY`, that can be set in `alluxio.worker.management.backoff.strategy` property.\n+\n+- ANY; management tasks will backoff from worker when there is any user I/O. \n+This mode will ensure low management task overhead in order to favor immediate user I/O performance.\n+However, making progress on management tasks will require quite periods on the worker.\n+\n+- DIRECTORY; management tasks will backoff from directories with ongoing user I/O.", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMjEwMA==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r450622100", "bodyText": "By reading through this section, it looks to me these align or promote tasks are background thread pool. But it is not clear as users may wonder how these tasks affect the I/O performance of foreground tasks. Can you make this more explicit?", "author": "apc999", "createdAt": "2020-07-07T05:39:56Z", "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -204,70 +190,99 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n-## Evicting Stale Data\n-\n-When Alluxio storage is full, Alluxio frees up space for new data as its storage is designed to be\n-volatile. Eviction is the mechanism that removes old data.\n-\n-Alluxio applies asynchronous eviction in the background. It relies on a periodic space\n-reserver thread in each worker to evict data. When the worker storage utilization reaches a\n-maximum threshold, it evicts data until the usage reaches a minimum threshold. The two thresholds\n-are configurable, labeled as the high and low watermarks, respectively. In the case where we have\n-216 GB of storage on a worker, eviction can be triggered at about 200 GB to reduce storage\n-utilization to 160 GB by setting the high watermark to 90% and the low watermark to 75%.\n-\n-```properties\n-alluxio.worker.tieredstore.level0.watermark.high.ratio=0.9\n-alluxio.worker.tieredstore.level0.watermark.low.ratio=0.75\n-```\n-\n-Asynchronous eviction is particularly useful for write or read-cache heavy workloads compared to\n-synchronous eviction used prior to Alluxio 2.0, which waits for a client to request more space than\n-is currently available on the worker and then kicks off the eviction process to free up enough\n-space to serve that request. This\n-leads to many small eviction attempts, which is less efficient, but maximizes the utilization of\n-available Alluxio space.\n+### Block Annotation Policies\n \n-### Eviction Policies\n+Alluxio uses block annotation policies, starting v2.3, to maintain strict ordering of blocks in storage. \n+Annotation policy defines an order for blocks across tiers and is consulted during:\n+- Eviction\n+- Dynamic Block Placement\n \n-Alluxio uses evictors to decide which blocks to remove from Alluxio storage.\n-Users can specify different Alluxio evictors to control the eviction process better.\n+The eviction, that happens in-line with writes, will attempt to remove blocks based on the order enforced by the block annotation policy.\n+The last block in annotated order is the first candidate for eviction regardless of which tier it's sitting on.\n \n-Out-of-the-box evictor implementations include:\n+Out-of-the-box annotation implementations include:\n \n-- **LRUEvictor**: Evicts the least-recently-used blocks until the required space is freed.\n-**This is Alluxio's default evictor**.\n-- **GreedyEvictor**: Evicts arbitrary blocks until the required space is freed.\n-- **LRFUEvictor**: Evicts blocks based on least-recently-used and least-frequently-used with a\n+- **LRUAnnotator**: Annotates the blocks based on least-recently-used order.\n+**This is Alluxio's default annotator**.\n+- **LRFUAnnotator**: Annotates the blocks based on least-recently-used and least-frequently-used orders with a\n configurable weight.\n     - If the weight is completely biased toward least-recently-used, the behavior will be the same\n-    as the LRUEvictor.\n-    - The applicable configuration properties are `alluxio.worker.evictor.lrfu.step.factor` and\n-    `alluxio.worker.evictor.lrfu.attenuation.factor` which can be found in\n-    [configuration properties]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.lrfu.step.factor)\n-- **PartialLRUEvictor** : Evicts based on a least-recently-used policy but will choose one configured\n-storage directory on the local worker with maximum free space and only evict from that directory.\n-\n-The evictor utilized by workers is determined by the Alluxio property\n-[`alluxio.worker.evictor.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.evictor.class).\n+    as the LRUAnnotator.\n+    - The applicable configuration properties are `alluxio.worker.block.annotator.lrfu.step.factor` and\n+    `alluxio.worker.block.annotator.lrfu.attenuation.factor`.\n+\n+The annotator utilized by workers is determined by the Alluxio property\n+[`alluxio.worker.block.annotator.class`]({{ '/en/reference/Properties-List.html' | relativize_url }}#alluxio.worker.block.annotator.class).\n The property should specify the fully qualified class name within the configuration. Currently\n available options are:\n \n-- `alluxio.worker.block.evictor.LRUEvictor`\n-- `alluxio.worker.block.evictor.GreedyEvictor`\n-- `alluxio.worker.block.evictor.LRFUEvictor`\n-- `alluxio.worker.block.evictor.PartialLRUEvictor`\n+- `alluxio.worker.block.annotator.LRUAnnotator`\n+- `alluxio.worker.block.annotator.LRFUAnnotator`\n+\n+#### Evictor Emulation\n+The old eviction policies are now deprecated and Alluxio provided implementations are replaced with appropriate annotation policies.\n+Configuring old Alluxio evictors will cause worker startup failure with `java.lang.ClassNotFoundException`.\n+\n+However, Alluxio supports emulation mode which annotates blocks based on custom evictor implementation. The emulation assumes the configured eviction policy creates\n+an eviction plan based on some kind of order and works by regularly extracting this order to be used in annotation activities.\n+\n+The old evictor configurations should be changes as below. (Failing to change the lef-over configuration will cause class load exceptions as old evictor implementations are deleted.)\n+- LRUEvictor -> LRUAnnotator\n+- GreedyEvictor -> LRUAnnotator\n+- PartialLRUEvictor -> LRUAnnotator\n+- LRFUEvictor -> LRFUAnnotator\n+\n+### Tiered Storage Management\n+As block allocation/eviction no longer enforces a particular tier for new writes, a new block could end up in any configured tier.\n+To enforce the assumption that tiers are configured from fastest to slowest, Alluxio now moves blocks around tiers based on block annotation policies.\n+\n+Below configuration is honoured by each individual tier management task:\n+- `alluxio.worker.management.task.thread.count`: How many threads to use for management tasks. (Default:`CPU core count`)\n+- `alluxio.worker.management.block.transfer.concurrency.limit`: How many block transfers can execute concurrently. (Default:`CPU core count`/ 2)\n+\n+#### Block Aligning (Dynamic Block Placement)\n+Alluxio will dynamically move blocks across tiers in order to have block composition that is in line with the configured block annotation policy.\n+\n+To compensate this, Alluxio watches the I/O pattern and reorganize blocks across tiers to make sure\n+`the lowest block of a higher tier has higher order than the highest block of a tier below`.\n+\n+This is achieved by `align` management task. This task, upon detecting tiers are out of order, swaps blocks among tiers", "originalCommit": "940d4b82828c72b54a004b8432dd46ee79a2ab4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NzgwNg==", "url": "https://github.com/Alluxio/alluxio/pull/11700#discussion_r451767806", "bodyText": "added a link to \"management task back-off\" section which discusses this particular issue.", "author": "ggezer", "createdAt": "2020-07-08T19:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyMjEwMA=="}], "type": "inlineReview"}, {"oid": "c7af6bb4bb88626d27a9ea5b25485ee93cee7984", "url": "https://github.com/Alluxio/alluxio/commit/c7af6bb4bb88626d27a9ea5b25485ee93cee7984", "message": "PR feedback", "committedDate": "2020-07-08T19:11:48Z", "type": "commit"}]}