{"pr_number": 10700, "pr_title": "Cache getFileSystem for path", "pr_createdAt": "2020-01-06T15:18:34Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10700", "timeline": [{"oid": "d2e031ed5b008cea3eb1eb2a2093967b3acfab40", "url": "https://github.com/Alluxio/alluxio/commit/d2e031ed5b008cea3eb1eb2a2093967b3acfab40", "message": "Cache getFileSystem for path", "committedDate": "2020-01-06T15:17:32Z", "type": "commit"}, {"oid": "f2d00d5f5ebfa5d0fa7911e1406e8c536f5dd2cc", "url": "https://github.com/Alluxio/alluxio/commit/f2d00d5f5ebfa5d0fa7911e1406e8c536f5dd2cc", "message": "fix build", "committedDate": "2020-01-06T16:14:06Z", "type": "commit"}, {"oid": "c5508b0774bb79a8193238a093bf56a22a0fc7c9", "url": "https://github.com/Alluxio/alluxio/commit/c5508b0774bb79a8193238a093bf56a22a0fc7c9", "message": "findbugs", "committedDate": "2020-01-06T16:23:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM5ODA4MA==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r363398080", "bodyText": "Is this specific to transform/format or should this be more general to any job needing a \"Path\"?\nAlso, the name is a bit misleading, since the cache is not caching a path, but the fs client. Maybe rename to something like \"JobPath\"?", "author": "gpang", "createdAt": "2020-01-06T17:31:56Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/CachedPath.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import alluxio.client.ReadType;\n+import alluxio.client.WriteType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import com.google.common.base.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Implementation of {@link Path} that has a cache for getting file system.\n+ */\n+public class CachedPath extends Path {", "originalCommit": "c5508b0774bb79a8193238a093bf56a22a0fc7c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM5OTA2OA==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r363399068", "bodyText": "Are these the only user config we are interested in? Could there be issues for reusing a client when other user config values differ?", "author": "gpang", "createdAt": "2020-01-06T17:34:32Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/CachedPath.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import alluxio.client.ReadType;\n+import alluxio.client.WriteType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import com.google.common.base.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Implementation of {@link Path} that has a cache for getting file system.\n+ */\n+public class CachedPath extends Path {\n+\n+  private static final ConcurrentHashMap<FileSystemKey, FileSystem> CACHE =\n+      new ConcurrentHashMap<>();\n+\n+  private static class FileSystemKey {\n+\n+    final String mScheme;\n+    final String mAuthority;\n+    final UserGroupInformation mUgi;\n+    final ReadType mReadType;", "originalCommit": "c5508b0774bb79a8193238a093bf56a22a0fc7c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyMjE0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r363422143", "bodyText": "There definitely can be new user configs in the future that we may care that we currently don't. It's going to be impossible to have this be always up-to-date. For example, one that I can currently think of Replication.", "author": "bradyoo", "createdAt": "2020-01-06T18:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM5OTA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwMDExOA==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r363400118", "bodyText": "How does this conf get set/created for the job?", "author": "gpang", "createdAt": "2020-01-06T17:37:29Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/CachedPath.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import alluxio.client.ReadType;\n+import alluxio.client.WriteType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import com.google.common.base.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Implementation of {@link Path} that has a cache for getting file system.\n+ */\n+public class CachedPath extends Path {\n+\n+  private static final ConcurrentHashMap<FileSystemKey, FileSystem> CACHE =\n+      new ConcurrentHashMap<>();\n+\n+  private static class FileSystemKey {\n+\n+    final String mScheme;\n+    final String mAuthority;\n+    final UserGroupInformation mUgi;\n+    final ReadType mReadType;\n+    final WriteType mWriteType;\n+\n+    public FileSystemKey(CachedPath path, Configuration conf) throws IOException {", "originalCommit": "c5508b0774bb79a8193238a093bf56a22a0fc7c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyMzA0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r363423043", "bodyText": "This is part of the Path.getFileSystem call.", "author": "bradyoo", "createdAt": "2020-01-06T18:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQwMDExOA=="}], "type": "inlineReview"}, {"oid": "27a23ff907d3b2392f3128a78467f177a8554b52", "url": "https://github.com/Alluxio/alluxio/commit/27a23ff907d3b2392f3128a78467f177a8554b52", "message": "Rename CachedPath -> JobPath", "committedDate": "2020-01-06T18:36:07Z", "type": "commit"}, {"oid": "56592815151754962bc0615a041fd307bc61ffe2", "url": "https://github.com/Alluxio/alluxio/commit/56592815151754962bc0615a041fd307bc61ffe2", "message": "Do not close the FileSystem acquired from inputPath", "committedDate": "2020-01-06T18:40:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMzk0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364233947", "bodyText": "Can we add a unittest for this, to verify the cache behavior?", "author": "gpang", "createdAt": "2020-01-08T13:37:50Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/JobPath.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import alluxio.client.ReadType;\n+import alluxio.client.WriteType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import com.google.common.base.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Implementation of {@link Path} that has a cache for getting file system.\n+ */\n+public class JobPath extends Path {\n+\n+  private static final ConcurrentHashMap<FileSystemKey, FileSystem> CACHE =\n+      new ConcurrentHashMap<>();\n+\n+  private static class FileSystemKey {\n+\n+    final String mScheme;\n+    final String mAuthority;\n+    final UserGroupInformation mUgi;\n+    final ReadType mReadType;\n+    final WriteType mWriteType;\n+\n+    public FileSystemKey(JobPath path, Configuration conf) throws IOException {\n+      URI uri = path.toUri();\n+      mScheme = uri.getScheme() == null ? \"\" : uri.getScheme().toLowerCase();\n+      mAuthority = uri.getAuthority() == null ? \"\" : uri.getScheme().toLowerCase();\n+      mUgi = UserGroupInformation.getCurrentUser();\n+      mReadType = conf.getEnum(PropertyKey.USER_FILE_READ_TYPE_DEFAULT.getName(),\n+          InstancedConfiguration.defaults().getEnum(\n+              PropertyKey.USER_FILE_READ_TYPE_DEFAULT, ReadType.class));\n+      mWriteType = conf.getEnum(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT.getName(),\n+          InstancedConfiguration.defaults().getEnum(\n+              PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT, WriteType.class));\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(mScheme, mAuthority, mUgi, mReadType, mWriteType);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (o == null) {\n+        return false;\n+      }\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof FileSystemKey)) {\n+        return false;\n+      }\n+      FileSystemKey that = (FileSystemKey) o;\n+      return Objects.equal(mScheme, that.mScheme)\n+          && Objects.equal(mAuthority, that.mAuthority)\n+          && Objects.equal(mUgi, that.mUgi)\n+          && Objects.equal(mReadType, that.mReadType)\n+          && Objects.equal(mWriteType, that.mWriteType);\n+    }\n+  }\n+\n+  /**\n+   * Copy of the constructor in {@link Path}.\n+   * @param scheme the scheme\n+   * @param authority the authority\n+   * @param path the path\n+   */\n+  public JobPath(String scheme, String authority, String path) {\n+    super(scheme, authority, path);\n+  }\n+\n+  @Override\n+  public FileSystem getFileSystem(Configuration conf) throws IOException {", "originalCommit": "56592815151754962bc0615a041fd307bc61ffe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1OTczOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364459739", "bodyText": "Will add test.", "author": "bradyoo", "createdAt": "2020-01-08T21:48:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMzk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzNTAwOA==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364235008", "bodyText": "should we use a guava CacheBuilder with a maximum size, to limit the unlimited growth?", "author": "gpang", "createdAt": "2020-01-08T13:40:03Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/JobPath.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import alluxio.client.ReadType;\n+import alluxio.client.WriteType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import com.google.common.base.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.security.UserGroupInformation;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Implementation of {@link Path} that has a cache for getting file system.\n+ */\n+public class JobPath extends Path {\n+\n+  private static final ConcurrentHashMap<FileSystemKey, FileSystem> CACHE =", "originalCommit": "56592815151754962bc0615a041fd307bc61ffe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1OTY4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364459689", "bodyText": "For now, this is not much of a concern. mScheme, mAuthority, and mUgi are all basically always gonna be constant and even mReadType and mWriteType is very limited.\nWhat's going to get really annoying once we limit size is I don't know which cache is going to need to close the FileSystem on removal.", "author": "bradyoo", "createdAt": "2020-01-08T21:48:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzNTAwOA=="}], "type": "inlineReview"}, {"oid": "c0f3c92a2d7ea94b87fb4d5dbf86cac4bdae276d", "url": "https://github.com/Alluxio/alluxio/commit/c0f3c92a2d7ea94b87fb4d5dbf86cac4bdae276d", "message": "add test", "committedDate": "2020-01-08T22:57:39Z", "type": "commit"}, {"oid": "efcabab44713211eeb2412ecd370cff6228ed191", "url": "https://github.com/Alluxio/alluxio/commit/efcabab44713211eeb2412ecd370cff6228ed191", "message": "checkstyle", "committedDate": "2020-01-09T00:17:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDIwMw==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364820203", "bodyText": "I'm not sure how this test works. Shouldn't there be some verification that the same JobPath scheme and auth and conf get the same client back, and also, when, scheme, and/or auth, and/or conf is different, we get a different client back? We should also test that if a non-inspected conf is changed, it still returns a cached client.", "author": "gpang", "createdAt": "2020-01-09T15:58:41Z", "path": "job/server/src/test/java/alluxio/job/plan/transform/format/JobPathTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.powermock.api.mockito.PowerMockito.verifyStatic;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import alluxio.client.ReadType;\n+import alluxio.conf.PropertyKey;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({FileSystem.class, UserGroupInformation.class})\n+public class JobPathTest {\n+\n+  @Before\n+  public void before() throws Exception {\n+    mockStatic(UserGroupInformation.class);\n+\n+    when(UserGroupInformation.getCurrentUser()).thenReturn(null);\n+  }\n+\n+  @Test\n+  public void testCache() throws Exception {\n+    mockStatic(FileSystem.class);\n+\n+    Configuration conf = new Configuration();\n+    JobPath jobPath = new JobPath(\"foo\", \"bar\", \"/baz\");", "originalCommit": "efcabab44713211eeb2412ecd370cff6228ed191", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MDkwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364870901", "bodyText": "The main reason I did it this way is because I had to mock FileSystem so instead of checking what I get back. I instead check the number of calls to the FileSystem.get", "author": "bradyoo", "createdAt": "2020-01-09T17:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3Mzk2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364873969", "bodyText": "We also do test that is a non-inspected conf is changed, it doesn't call the underlying FileSystem.get which is the same thing.", "author": "bradyoo", "createdAt": "2020-01-09T17:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNzE5NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364927195", "bodyText": "Got it. Can you also add a case where there is a new JobPath instance, with the same path (fs should be cached), and a new JobPath instance with different path (fs should not be cached)", "author": "gpang", "createdAt": "2020-01-09T19:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDUwNA==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364820504", "bodyText": "does the test not work unless the fs is mocked?", "author": "gpang", "createdAt": "2020-01-09T15:59:11Z", "path": "job/server/src/test/java/alluxio/job/plan/transform/format/JobPathTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.powermock.api.mockito.PowerMockito.verifyStatic;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import alluxio.client.ReadType;\n+import alluxio.conf.PropertyKey;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({FileSystem.class, UserGroupInformation.class})\n+public class JobPathTest {\n+\n+  @Before\n+  public void before() throws Exception {\n+    mockStatic(UserGroupInformation.class);\n+\n+    when(UserGroupInformation.getCurrentUser()).thenReturn(null);\n+  }\n+\n+  @Test\n+  public void testCache() throws Exception {\n+    mockStatic(FileSystem.class);\n+\n+    Configuration conf = new Configuration();\n+    JobPath jobPath = new JobPath(\"foo\", \"bar\", \"/baz\");\n+\n+    FileSystem mockFileSystem = mock(FileSystem.class);\n+\n+    when(FileSystem.get(eq(jobPath.toUri()), any())).thenReturn(mockFileSystem);", "originalCommit": "efcabab44713211eeb2412ecd370cff6228ed191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ab94e166e65831b43648c3514ec739dc4aae6701", "url": "https://github.com/Alluxio/alluxio/commit/ab94e166e65831b43648c3514ec739dc4aae6701", "message": "improve test", "committedDate": "2020-01-09T17:46:53Z", "type": "commit"}, {"oid": "1aee1bea07181c9e181b384e83aee563f6ec008e", "url": "https://github.com/Alluxio/alluxio/commit/1aee1bea07181c9e181b384e83aee563f6ec008e", "message": "add more to test, add path to key", "committedDate": "2020-01-09T20:43:57Z", "type": "commit"}, {"oid": "7410ee79e6f386193a06dd9c6576570f120b89e6", "url": "https://github.com/Alluxio/alluxio/commit/7410ee79e6f386193a06dd9c6576570f120b89e6", "message": "checkstyle", "committedDate": "2020-01-09T21:13:32Z", "type": "commit"}, {"oid": "56151fd1ae143193234a4713960a829e59a30657", "url": "https://github.com/Alluxio/alluxio/commit/56151fd1ae143193234a4713960a829e59a30657", "message": "feedback", "committedDate": "2020-01-09T21:44:14Z", "type": "commit"}, {"oid": "a5ce5a181cec4e3b5d4d40979edcfe5bbf346d9d", "url": "https://github.com/Alluxio/alluxio/commit/a5ce5a181cec4e3b5d4d40979edcfe5bbf346d9d", "message": "fix bug", "committedDate": "2020-01-09T22:17:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk5NzQyMw==", "url": "https://github.com/Alluxio/alluxio/pull/10700#discussion_r364997423", "bodyText": "can we add one more case with new JobPath(\"foo2\", \"bar\", \"/baz\");", "author": "gpang", "createdAt": "2020-01-09T22:46:52Z", "path": "job/server/src/test/java/alluxio/job/plan/transform/format/JobPathTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.transform.format;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+\n+import static org.powermock.api.mockito.PowerMockito.mockStatic;\n+import static org.powermock.api.mockito.PowerMockito.verifyStatic;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import alluxio.client.ReadType;\n+import alluxio.conf.PropertyKey;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({FileSystem.class, UserGroupInformation.class})\n+public class JobPathTest {\n+\n+  @Before\n+  public void before() throws Exception {\n+    mockStatic(UserGroupInformation.class);\n+\n+    when(UserGroupInformation.getCurrentUser()).thenReturn(null);\n+  }\n+\n+  @Test\n+  public void testCache() throws Exception {\n+    mockStatic(FileSystem.class);\n+\n+    Configuration conf = new Configuration();\n+    JobPath jobPath = new JobPath(\"foo\", \"bar\", \"/baz\");\n+\n+    when(FileSystem.get(any(), any())).thenAnswer((p) -> mock(FileSystem.class));\n+\n+    FileSystem fileSystem = jobPath.getFileSystem(conf);\n+\n+    verifyStatic(times(1));\n+    FileSystem.get(any(), any());\n+\n+    assertEquals(fileSystem, jobPath.getFileSystem(conf));\n+    verifyStatic(times(1));\n+    FileSystem.get(any(), any());\n+\n+    conf.set(PropertyKey.USER_FILE_READ_TYPE_DEFAULT.toString(), ReadType.NO_CACHE.toString());\n+    FileSystem newFileSystem = jobPath.getFileSystem(conf);\n+    assertNotEquals(fileSystem, newFileSystem);\n+    verifyStatic(times(2));\n+    FileSystem.get(any(), any());\n+\n+    conf.set(\"foo\", \"bar\");\n+    assertEquals(newFileSystem, jobPath.getFileSystem(conf));\n+    verifyStatic(times(2));\n+    FileSystem.get(any(), any());\n+\n+    jobPath = new JobPath(\"foo\", \"bar\", \"/bar\");\n+    assertEquals(newFileSystem, jobPath.getFileSystem(conf));\n+    verifyStatic(times(2));\n+    FileSystem.get(any(), any());\n+\n+    jobPath = new JobPath(\"foo\", \"baz\", \"/bar\");", "originalCommit": "a5ce5a181cec4e3b5d4d40979edcfe5bbf346d9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46fb68e6399ad29b2a688ec97eff3b9dc07849c5", "url": "https://github.com/Alluxio/alluxio/commit/46fb68e6399ad29b2a688ec97eff3b9dc07849c5", "message": "feedback", "committedDate": "2020-01-10T17:46:03Z", "type": "commit"}]}