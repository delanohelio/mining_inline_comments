{"pr_number": 12486, "pr_title": "Use lower tiers in workers based on tier usage", "pr_createdAt": "2020-11-11T15:09:07Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12486", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNDc3Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521424776", "bodyText": "These are debug loggings for myself, as I'm testing the PR in various ways. They will be all re-formatted or removed in the end of this work.", "author": "jiacheliu3", "createdAt": "2020-11-11T15:10:17Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java", "diffHunk": "@@ -705,6 +705,10 @@ private TempBlockMeta createBlockMetaInternal(long sessionId, long blockId, bool\n       }\n \n       // Allocate space.\n+      LOG.warn(\"createBlockMetaInternal allocating space with options {}\", options);\n+      LOG.warn(\"Allocate more than necessary to force allocation go to lower tiers.\");", "originalCommit": "8552dacd28d8160b8a5b65111c40a51092a38606", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNjg5NQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521426895", "bodyText": "The previous code was wrong -- the quest is anyDirInTierWithMedium but here it is checking every tier. Maybe I should fix this in a separate PR.", "author": "jiacheliu3", "createdAt": "2020-11-11T15:13:21Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/allocator/RoundRobinAllocator.java", "diffHunk": "@@ -79,31 +86,56 @@ private StorageDirView allocateBlock(long sessionId, long blockSize,\n         int dirViewIndex = getNextAvailDirInTier(tierView, blockSize,\n             BlockStoreLocation.ANY_MEDIUM);\n         if (dirViewIndex >= 0) {\n-          mTierAliasToLastDirMap.put(tierView.getTierViewAlias(), dirViewIndex);\n-          return tierView.getDirView(dirViewIndex);\n+          StorageDirView candidateDir = tierView.getDirView(dirViewIndex);\n+          if (mReviewer.reviewAllocation(candidateDir)) {\n+            mTierAliasToLastDirMap.put(tierView.getTierViewAlias(), dirViewIndex);\n+            return candidateDir;\n+          } else {\n+            // Try the next dir\n+            LOG.debug(\"Allocation rejected for anyTier: {}\",\n+                    candidateDir.toBlockStoreLocation());\n+          }\n         } else { // we didn't find one in this tier, go to next tier\n           tierIndex++;\n         }\n       }\n     } else if (location.equals(BlockStoreLocation.anyDirInTier(location.tierAlias()))) {\n       StorageTierView tierView = mMetadataView.getTierView(location.tierAlias());\n-      int dirViewIndex = getNextAvailDirInTier(tierView, blockSize, BlockStoreLocation.ANY_MEDIUM);\n-      if (dirViewIndex >= 0) {\n-        mTierAliasToLastDirMap.put(tierView.getTierViewAlias(), dirViewIndex);\n-        return tierView.getDirView(dirViewIndex);\n+      int offset = 0;\n+      while (offset < tierView.getDirViews().size() && offset > -1) {\n+        int dirViewIndex = getNextAvailDirInTier(tierView, blockSize, BlockStoreLocation.ANY_MEDIUM);\n+        if (dirViewIndex >= 0) {\n+          StorageDirView candidateDir = tierView.getDirView(dirViewIndex);\n+          if (mReviewer.reviewAllocation(candidateDir)) {\n+            mTierAliasToLastDirMap.put(tierView.getTierViewAlias(), dirViewIndex);\n+            return tierView.getDirView(dirViewIndex);\n+          } else {\n+            // Reject the allocation\n+            LOG.debug(\"Allocation to dirIndex {} rejected for anyDirInTier: {}\", dirViewIndex,\n+                    candidateDir.toBlockStoreLocation());\n+          }\n+        }\n+        // Either the dirViewIndex is -1, or we rejected the allocation to a dirViewIndex > 0\n+        offset = dirViewIndex;\n       }\n     } else if (location.equals(BlockStoreLocation.anyDirInTierWithMedium(location.mediumType()))) {\n-      String medium = location.mediumType();\n-      int tierIndex = 0; // always starting from the first tier\n-      for (int i = 0; i < mMetadataView.getTierViews().size(); i++) {", "originalCommit": "8552dacd28d8160b8a5b65111c40a51092a38606", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzOTAxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521539019", "bodyText": "Is a unittest possible that can break the old code, and is fixed by the new code?", "author": "gpang", "createdAt": "2020-11-11T17:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNjg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NDI5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r524864296", "bodyText": "This is addressed separately in #12509", "author": "jiacheliu3", "createdAt": "2020-11-17T03:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNjg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyODk2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521428963", "bodyText": "Please ignore this kind of loggings. They are for my own testing for the moment. They will be removed/formatted at the end of this work.", "author": "jiacheliu3", "createdAt": "2020-11-11T15:16:19Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/reviewer/ProbabilisticReviewer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package alluxio.worker.block.reviewer;\n+\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.worker.block.meta.StorageDirView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Random;\n+\n+/**\n+ * Reviews a block allocation, and probably reject a bad block allocation.\n+ * The more full a StorageDir, the higher the chance that this reviewer decides\n+ * not to use it for a new block.\n+ * */\n+public class ProbabilisticReviewer implements Reviewer {\n+    private static final Logger LOG = LoggerFactory.getLogger(ProbabilisticReviewer.class);\n+\n+    // TODO(jiacheng): Make this a property\n+    private static final double CUTOFF = 0.1;\n+    private static final Random RANDOM = new Random();\n+\n+    public ProbabilisticReviewer() {}\n+\n+    public boolean reviewAllocation(StorageDirView dirView) {\n+      long availableBytes = dirView.getAvailableBytes();\n+      long capacityBytes = dirView.getCapacityBytes();\n+      long blockSize = ServerConfiguration.global().getBytes(PropertyKey.USER_BLOCK_SIZE_BYTES_DEFAULT);\n+      long cutoffSize = (long) Math.floor(CUTOFF * capacityBytes);\n+      // Rules:\n+      // 1. If more than CUTOFF left, we use this tier. Prob=100%\n+      // 2. If less that block size left, we ignore this tier. Prob=0%\n+      // 3. If in the middle, the probability is linear to the space left, the less space the lower.\n+      if (availableBytes > cutoffSize) {\n+        return true;\n+      }\n+      double usage = (capacityBytes - availableBytes + 0.01) / (capacityBytes - blockSize);\n+      if (usage >= 1.0) {\n+        return false;\n+      }\n+      // 2 points:\n+      // Axis X: space usage (commitment)\n+      // Axis Y: Probability of using this tier\n+      // (1.0 - CUTOFF, 1.0)\n+      // (1.0, 0)\n+      double k = -1.0 / CUTOFF; // What if CUTOFF == 0?\n+      double b = 1.0 / CUTOFF;\n+      double y = k * usage + b;\n+      LOG.warn(\"Space usage in tier {} is {}. Probability of staying is {}.\", dirView.getParentTierView().getTierViewAlias(), usage, y);", "originalCommit": "831d5ab242799243f8ca0454d7713e46a74f6907", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyOTUwMg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521429502", "bodyText": "@gpang Do you think it's possible that we may want a pipeline of Reviewers, instead of having only one?", "author": "jiacheliu3", "createdAt": "2020-11-11T15:17:05Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/reviewer/Reviewer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package alluxio.worker.block.reviewer;\n+\n+import alluxio.annotation.PublicApi;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.util.CommonUtils;\n+import alluxio.worker.block.BlockMetadataView;\n+import alluxio.worker.block.allocator.Allocator;\n+import alluxio.worker.block.allocator.MaxFreeAllocator;\n+import alluxio.worker.block.meta.StorageDirView;\n+import com.google.common.base.Preconditions;\n+\n+@PublicApi\n+public interface Reviewer {\n+  boolean reviewAllocation(StorageDirView dirView);\n+\n+  /**\n+   * Factory for {@link Reviewer}.\n+   */\n+  class Factory {\n+\n+    private Factory() {} // prevent instantiation\n+\n+    // TODO(jiacheng): Is it possible we need a list of reviewers in the future, each checking one criteria?", "originalCommit": "831d5ab242799243f8ca0454d7713e46a74f6907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0MzY3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521543679", "bodyText": "Hrmmm, I'm not sure. I don't know what a Reviewer is yet.", "author": "gpang", "createdAt": "2020-11-11T18:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyOTUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMzE0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521433147", "bodyText": "0.1 is probably too big, like when we have 1TB for a storage dir, that is too far from a block size.\n64MB / 1TB = 0.00006. I don't think we want to assign this small decimal to a property.\nIf a long in bytes make more sense, maybe we can reuse PropertyKey.WORKER_TIERED_STORE_FREE_AHEAD_BYTES?\nWORKER_TIERED_STORE_FREE_AHEAD_BYTES is a property we added in 2.3 together with the new CACHE_PROMOTE. I don't think many people use that. I also don't think the property is very useful at the moment. It only controls how much extra we free, on each TieredBlockStore.freeSpace.", "author": "jiacheliu3", "createdAt": "2020-11-11T15:22:07Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/reviewer/ProbabilisticReviewer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package alluxio.worker.block.reviewer;\n+\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.worker.block.meta.StorageDirView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Random;\n+\n+/**\n+ * Reviews a block allocation, and probably reject a bad block allocation.\n+ * The more full a StorageDir, the higher the chance that this reviewer decides\n+ * not to use it for a new block.\n+ * */\n+public class ProbabilisticReviewer implements Reviewer {\n+    private static final Logger LOG = LoggerFactory.getLogger(ProbabilisticReviewer.class);\n+\n+    // TODO(jiacheng): Make this a property\n+    private static final double CUTOFF = 0.1;", "originalCommit": "831d5ab242799243f8ca0454d7713e46a74f6907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0MDAwNA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521540004", "bodyText": "Instead of a fraction, we could just make it an absolute and configurable value.", "author": "gpang", "createdAt": "2020-11-11T17:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3OTcyMg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525179722", "bodyText": "Done. Please see if the new properties make sense. Thanks!", "author": "jiacheliu3", "createdAt": "2020-11-17T14:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMzE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMzg4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521433886", "bodyText": "@gpang Does this heuristic of probability make sense to you? Do you think instead of a linear function, something quadratic or logistic make more sense to make the probability drop quicker?", "author": "jiacheliu3", "createdAt": "2020-11-11T15:23:09Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/reviewer/ProbabilisticReviewer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package alluxio.worker.block.reviewer;\n+\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.worker.block.meta.StorageDirView;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Random;\n+\n+/**\n+ * Reviews a block allocation, and probably reject a bad block allocation.\n+ * The more full a StorageDir, the higher the chance that this reviewer decides\n+ * not to use it for a new block.\n+ * */\n+public class ProbabilisticReviewer implements Reviewer {\n+    private static final Logger LOG = LoggerFactory.getLogger(ProbabilisticReviewer.class);\n+\n+    // TODO(jiacheng): Make this a property\n+    private static final double CUTOFF = 0.1;\n+    private static final Random RANDOM = new Random();\n+\n+    public ProbabilisticReviewer() {}\n+\n+    public boolean reviewAllocation(StorageDirView dirView) {\n+      long availableBytes = dirView.getAvailableBytes();\n+      long capacityBytes = dirView.getCapacityBytes();\n+      long blockSize = ServerConfiguration.global().getBytes(PropertyKey.USER_BLOCK_SIZE_BYTES_DEFAULT);\n+      long cutoffSize = (long) Math.floor(CUTOFF * capacityBytes);\n+      // Rules:\n+      // 1. If more than CUTOFF left, we use this tier. Prob=100%\n+      // 2. If less that block size left, we ignore this tier. Prob=0%\n+      // 3. If in the middle, the probability is linear to the space left, the less space the lower.", "originalCommit": "831d5ab242799243f8ca0454d7713e46a74f6907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1MDA0OA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r521550048", "bodyText": "I think it makes sense, but we could just make that factor a parameter. Something like\n((cutoff - free) / cutoff) ^ alpha\n\nif alpha is 1, it is linear, and the user can adjust the curve by adjusting alpha. Maybe there are nicer curves out there, but this is advanced and may not be necessary.", "author": "gpang", "createdAt": "2020-11-11T18:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMzg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4MTg3Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525181877", "bodyText": "Agreed there are nicer curves but may not be necessary. After all the difference would be just like 1 block. I think we can just start with a linear function. I will try out higher rank functions like quadratic to the space left in the near future, but not in this PR.", "author": "jiacheliu3", "createdAt": "2020-11-17T14:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMzg4Ng=="}], "type": "inlineReview"}, {"oid": "fa9f4395c8c734ab3bee5feb2ffc9159cfb63a96", "url": "https://github.com/Alluxio/alluxio/commit/fa9f4395c8c734ab3bee5feb2ffc9159cfb63a96", "message": "ask for more space at creation time blindly - naive approach", "committedDate": "2020-11-17T03:23:50Z", "type": "commit"}, {"oid": "bd0d1511bb8340bb7ff2a5f83e3e490917e94474", "url": "https://github.com/Alluxio/alluxio/commit/bd0d1511bb8340bb7ff2a5f83e3e490917e94474", "message": "add a probabilistic approach", "committedDate": "2020-11-17T03:28:48Z", "type": "commit"}, {"oid": "774527e6f9159e990f0de3e8b8e358e29524bbd4", "url": "https://github.com/Alluxio/alluxio/commit/774527e6f9159e990f0de3e8b8e358e29524bbd4", "message": "remove tweak on allocation request option", "committedDate": "2020-11-17T03:28:48Z", "type": "commit"}, {"oid": "2dcfe0e2c558bf89ba130c21091873a0d1eb98c0", "url": "https://github.com/Alluxio/alluxio/commit/2dcfe0e2c558bf89ba130c21091873a0d1eb98c0", "message": "add the reviewer class", "committedDate": "2020-11-17T03:28:48Z", "type": "commit"}, {"oid": "c6a0bda823d836917ecce549254922f23801e7d4", "url": "https://github.com/Alluxio/alluxio/commit/c6a0bda823d836917ecce549254922f23801e7d4", "message": "change cutoff from ratio to bytes", "committedDate": "2020-11-17T03:28:48Z", "type": "commit"}, {"oid": "5833a34614dc526d1a88481799f3fbd77d398cfe", "url": "https://github.com/Alluxio/alluxio/commit/5833a34614dc526d1a88481799f3fbd77d398cfe", "message": "performance test", "committedDate": "2020-11-17T03:29:27Z", "type": "commit"}, {"oid": "758f149b99d898c426ad3a9d1f8e25c0308a886d", "url": "https://github.com/Alluxio/alluxio/commit/758f149b99d898c426ad3a9d1f8e25c0308a886d", "message": "correct formula and add preliminary test", "committedDate": "2020-11-17T03:29:27Z", "type": "commit"}, {"oid": "45f6420032a663c4a72eb1861442063d97d29f55", "url": "https://github.com/Alluxio/alluxio/commit/45f6420032a663c4a72eb1861442063d97d29f55", "message": "update test", "committedDate": "2020-11-17T03:29:27Z", "type": "commit"}, {"oid": "5422232656bd462bcbd0c7e93301314f533958a4", "url": "https://github.com/Alluxio/alluxio/commit/5422232656bd462bcbd0c7e93301314f533958a4", "message": "format the logs", "committedDate": "2020-11-17T03:30:12Z", "type": "commit"}, {"oid": "5422232656bd462bcbd0c7e93301314f533958a4", "url": "https://github.com/Alluxio/alluxio/commit/5422232656bd462bcbd0c7e93301314f533958a4", "message": "format the logs", "committedDate": "2020-11-17T03:30:12Z", "type": "forcePushed"}, {"oid": "2a65ab4630515a0d56c400b1fd0a0e6994793c85", "url": "https://github.com/Alluxio/alluxio/commit/2a65ab4630515a0d56c400b1fd0a0e6994793c85", "message": "remove some debug logging", "committedDate": "2020-11-17T03:37:56Z", "type": "commit"}, {"oid": "61bfdcd79ab8e94516123300d7d01cd98180c84e", "url": "https://github.com/Alluxio/alluxio/commit/61bfdcd79ab8e94516123300d7d01cd98180c84e", "message": "clean up debug logs", "committedDate": "2020-11-17T03:40:45Z", "type": "commit"}, {"oid": "0ae40b6e6d81502d6f52b0d4edc7708e31eb4d7f", "url": "https://github.com/Alluxio/alluxio/commit/0ae40b6e6d81502d6f52b0d4edc7708e31eb4d7f", "message": "update properties and Reviewer unit test", "committedDate": "2020-11-17T05:58:53Z", "type": "commit"}, {"oid": "f02508e61a1f39bd04ce85319f94b31be42ad086", "url": "https://github.com/Alluxio/alluxio/commit/f02508e61a1f39bd04ce85319f94b31be42ad086", "message": "add unit test for the factory", "committedDate": "2020-11-17T06:22:18Z", "type": "commit"}, {"oid": "2ba69e621cc29d1971602c8f5d61b771cfd06d33", "url": "https://github.com/Alluxio/alluxio/commit/2ba69e621cc29d1971602c8f5d61b771cfd06d33", "message": "correct tests and update allocator logic", "committedDate": "2020-11-17T09:28:04Z", "type": "commit"}, {"oid": "830e15af1aa6cc3928485e1f7c667b46cefd4ef6", "url": "https://github.com/Alluxio/alluxio/commit/830e15af1aa6cc3928485e1f7c667b46cefd4ef6", "message": "checkstyle", "committedDate": "2020-11-17T13:52:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NDg2MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525174861", "bodyText": "Removed reference to an obsolete class", "author": "jiacheliu3", "createdAt": "2020-11-17T13:59:12Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/evictor/AbstractEvictor.java", "diffHunk": "@@ -217,8 +218,7 @@ public EvictionPlan freeSpaceWithView(long bytesToBeAvailable, BlockStoreLocatio\n   protected void onRemoveBlockFromIterator(long blockId) {}\n \n   /**\n-   * Updates the block store location if the evictor wants to free space in a specific location. For\n-   * example, {@link PartialLRUEvictor} always evicts blocks from a dir with max free space.\n+   * Updates the block store location if the evictor wants to free space in a specific location.", "originalCommit": "830e15af1aa6cc3928485e1f7c667b46cefd4ef6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NTI1NA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525175254", "bodyText": "I think this line will be helpful. We want to know when the SwapRestore tasks are called.", "author": "jiacheliu3", "createdAt": "2020-11-17T13:59:43Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/management/tier/AlignTask.java", "diffHunk": "@@ -96,6 +96,7 @@ public BlockManagementTaskResult run() {\n       // due to insufficient reserved space.\n       Consumer<Exception> excHandler = (e) -> {\n         if (e instanceof WorkerOutOfSpaceException) {\n+          LOG.warn(\"No sufficient space for worker swap space, swap restore task called.\");", "originalCommit": "830e15af1aa6cc3928485e1f7c667b46cefd4ef6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwODY5NA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525408694", "bodyText": "NIT\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      LOG.warn(\"No sufficient space for worker swap space, swap restore task called.\");\n          \n          \n            \n                      LOG.warn(\"Insufficient space for worker swap space, swap restore task called.\");", "author": "gpang", "createdAt": "2020-11-17T18:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NTI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NTY5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525175696", "bodyText": "These tests are shared by all Allocator subclasses", "author": "jiacheliu3", "createdAt": "2020-11-17T14:00:20Z", "path": "core/server/worker/src/test/java/alluxio/worker/block/allocator/AllocatorTestBase.java", "diffHunk": "@@ -157,4 +162,48 @@ protected void assertTempBlockMeta(Allocator allocator, BlockStoreLocation locat\n   protected BlockMetadataEvictorView getMetadataEvictorView() {\n     return new BlockMetadataEvictorView(mManager, new HashSet<Long>(), new HashSet<Long>());\n   }\n+\n+  /**", "originalCommit": "830e15af1aa6cc3928485e1f7c667b46cefd4ef6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NjE0OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525176149", "bodyText": "See how the probability function works here", "author": "jiacheliu3", "createdAt": "2020-11-17T14:00:58Z", "path": "core/server/worker/src/test/java/alluxio/worker/block/reviewer/ProbabilisticBufferReviewerTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.reviewer;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.util.FormatUtils;\n+import alluxio.worker.block.meta.StorageDirView;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ProbabilisticBufferReviewerTest {\n+  private static final long DISK_SIZE = FormatUtils.parseSpaceSize(\"16GB\");\n+  private static final String SOFT_LIMIT = \"256MB\";\n+  private static final long SOFT_LIMIT_BYTES = FormatUtils.parseSpaceSize(SOFT_LIMIT);\n+  private static final String HARD_LIMIT = \"64MB\";\n+  private static final long HARD_LIMIT_BYTES = FormatUtils.parseSpaceSize(HARD_LIMIT);\n+\n+  private ProbabilisticBufferReviewer mReviewer;\n+\n+  @Before\n+  public void createReviewerInstance() {\n+    ServerConfiguration.set(PropertyKey.WORKER_REVIEWER_CLASS,\n+            ProbabilisticBufferReviewer.class.getName());\n+    ServerConfiguration.set(PropertyKey.WORKER_REVIEWER_BUFFER_HARDLIMIT_BYTES, HARD_LIMIT);\n+    ServerConfiguration.set(PropertyKey.WORKER_REVIEWER_BUFFER_SOFTLIMIT_BYTES, SOFT_LIMIT);\n+\n+    Reviewer reviewer = Reviewer.Factory.create();\n+    assertTrue(reviewer instanceof ProbabilisticBufferReviewer);\n+    mReviewer = (ProbabilisticBufferReviewer) reviewer;\n+  }\n+\n+  @After\n+  public void reset() {\n+    mReviewer = null;\n+    ServerConfiguration.reset();\n+  }\n+\n+  @Test\n+  public void testProbabilityFunction() throws Exception {\n+    // Empty - 100%", "originalCommit": "830e15af1aa6cc3928485e1f7c667b46cefd4ef6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cfe20988df70b0de88a52daa2af8775b71023b2b", "url": "https://github.com/Alluxio/alluxio/commit/cfe20988df70b0de88a52daa2af8775b71023b2b", "message": "fix test", "committedDate": "2020-11-17T14:40:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIxMTE4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525211181", "bodyText": "I refactored this a bit to remove redundant local variables. I believe the logic are kept the same but please do take an extra look for me. Thanks!", "author": "jiacheliu3", "createdAt": "2020-11-17T14:47:40Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/allocator/RoundRobinAllocator.java", "diffHunk": "@@ -70,43 +77,43 @@ public StorageDirView allocateBlockWithView(long sessionId, long blockSize,\n    */\n   @Nullable\n   private StorageDirView allocateBlock(long sessionId, long blockSize,\n-      BlockStoreLocation location) {\n+      BlockStoreLocation location, boolean skipReview) {\n     Preconditions.checkNotNull(location, \"location\");\n     if (location.equals(BlockStoreLocation.anyTier())) {\n-      int tierIndex = 0; // always starting from the first tier\n       for (int i = 0; i < mMetadataView.getTierViews().size(); i++) {\n-        StorageTierView tierView = mMetadataView.getTierViews().get(tierIndex);\n+        StorageTierView tierView = mMetadataView.getTierViews().get(i);\n+        // The review logic is handled in getNextAvailDirInTier\n         int dirViewIndex = getNextAvailDirInTier(tierView, blockSize,\n-            BlockStoreLocation.ANY_MEDIUM);\n+            BlockStoreLocation.ANY_MEDIUM, skipReview);\n         if (dirViewIndex >= 0) {\n           mTierAliasToLastDirMap.put(tierView.getTierViewAlias(), dirViewIndex);\n           return tierView.getDirView(dirViewIndex);\n-        } else { // we didn't find one in this tier, go to next tier\n-          tierIndex++;\n         }\n       }\n     } else if (location.equals(BlockStoreLocation.anyDirInTier(location.tierAlias()))) {\n       StorageTierView tierView = mMetadataView.getTierView(location.tierAlias());\n-      int dirViewIndex = getNextAvailDirInTier(tierView, blockSize, BlockStoreLocation.ANY_MEDIUM);\n+      // The review logic is handled in getNextAvailDirInTier\n+      int dirViewIndex = getNextAvailDirInTier(tierView, blockSize,\n+              BlockStoreLocation.ANY_MEDIUM, skipReview);\n       if (dirViewIndex >= 0) {\n         mTierAliasToLastDirMap.put(tierView.getTierViewAlias(), dirViewIndex);\n         return tierView.getDirView(dirViewIndex);\n       }\n     } else if (location.equals(BlockStoreLocation.anyDirInAnyTierWithMedium(\n-            location.mediumType()))) {\n-      String medium = location.mediumType();\n-      int tierIndex = 0; // always starting from the first tier\n+                location.mediumType()))) {\n       for (int i = 0; i < mMetadataView.getTierViews().size(); i++) {\n-        StorageTierView tierView = mMetadataView.getTierViews().get(tierIndex);\n-        int dirViewIndex = getNextAvailDirInTier(tierView, blockSize, medium);\n+        StorageTierView tierView = mMetadataView.getTierViews().get(i);\n+        // The review logic is handled in getNextAvailDirInTier\n+        int dirViewIndex = getNextAvailDirInTier(tierView, blockSize,\n+                location.mediumType(), skipReview);", "originalCommit": "cfe20988df70b0de88a52daa2af8775b71023b2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78deb568fa6ae16562e93acbb2302ee9e52d5f95", "url": "https://github.com/Alluxio/alluxio/commit/78deb568fa6ae16562e93acbb2302ee9e52d5f95", "message": "format", "committedDate": "2020-11-17T14:48:32Z", "type": "commit"}, {"oid": "759e62663d51684024daf01be7c0e9eb9ec9e579", "url": "https://github.com/Alluxio/alluxio/commit/759e62663d51684024daf01be7c0e9eb9ec9e579", "message": "need to switch off allocation reviewers for integration tests to pass", "committedDate": "2020-11-17T16:31:28Z", "type": "commit"}, {"oid": "568f2c07e60f879b049c14b954fa72b0517352fb", "url": "https://github.com/Alluxio/alluxio/commit/568f2c07e60f879b049c14b954fa72b0517352fb", "message": "checkstyle", "committedDate": "2020-11-17T16:34:15Z", "type": "commit"}, {"oid": "6e5560212a0448761591f779df9e694d2022a1c3", "url": "https://github.com/Alluxio/alluxio/commit/6e5560212a0448761591f779df9e694d2022a1c3", "message": "fix more integration test", "committedDate": "2020-11-17T16:38:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNjAyNw==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525316027", "bodyText": "I had to add this property because many integration tests on tier storage depend on the deterministic behavior of the Allocator. Another option is to use a NoopReviewer that never rejects an allocation.", "author": "jiacheliu3", "createdAt": "2020-11-17T16:47:13Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2881,6 +2881,52 @@ public String toString() {\n       .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n       .setScope(Scope.WORKER)\n       .build();\n+  public static final PropertyKey WORKER_REVIEWER_BUFFER_SOFTLIMIT_BYTES =\n+          new Builder(Name.WORKER_REVIEWER_BUFFER_SOFTLIMIT_BYTES)\n+          .setDefaultValue(\"256MB\")\n+          .setDescription(\"This is used by the \"\n+              + \"`alluxio.worker.block.reviewer.ProbabilisticBufferReviewer`. \"\n+              + \"We attempt to leave a buffer in each storage directory. \"\n+              + \"When the free space in a certain storage directory on the worker falls \"\n+              + \"below this size, the chance that the Reviewer accepts new blocks \"\n+              + \"into this directory goes down. \"\n+              + \"This chance keeps falling linearly until it reaches 0, when the available \"\n+              + \"space reaches the hard limit.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.WORKER)\n+          .build();\n+  public static final PropertyKey WORKER_REVIEWER_BUFFER_HARDLIMIT_BYTES =\n+          new Builder(Name.WORKER_REVIEWER_BUFFER_HARDLIMIT_BYTES)\n+          .setDefaultValue(\"64MB\")\n+          .setDescription(\"This is used by the \"\n+              + \"`alluxio.worker.block.reviewer.ProbabilisticBufferReviewer`. \"\n+              + \"When the free space in a storage dir falls below this size, \"\n+              + \"the ProbabilisticBufferReviewer will stop accepting new blocks into it.\"\n+              + \"This is because we may load more data into existing blocks in the directory \"\n+              + \"and their sizes may expand.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.WORKER)\n+          .build();\n+  public static final PropertyKey WORKER_REVIEWER_CLASS =\n+      new Builder(Name.WORKER_REVIEWER_CLASS)\n+          .setDefaultValue(\"alluxio.worker.block.reviewer.ProbabilisticBufferReviewer\")\n+          .setDescription(\"The strategy that a worker uses to review space allocation \"\n+              + \"in the Allocator. Each time a block allocation decision is made by \"\n+              + \"the Allocator, the Reviewer will review the decision and rejects it,\"\n+              + \"if the allocation does not meet certain criteria of the Reviewer.\"\n+              + \"The Reviewer prevents the worker to make a bad block allocation decision.\"\n+              + \"Valid options include:\"\n+              + \"`alluxio.worker.block.reviewer.ProbabilisticBufferReviewer`.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.WORKER)\n+          .build();\n+  public static final PropertyKey WORKER_REVIEWER_ENABLED =", "originalCommit": "6e5560212a0448761591f779df9e694d2022a1c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMTExMA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525401110", "bodyText": "I feel like having a noop reviewer makes this simpler, by removing this property, and we could even configure the reviewer to behave like the original 2.4, right?\nMaybe we call it AcceptingReviewer or something, instead of NOOP.\nWhat do you think?", "author": "gpang", "createdAt": "2020-11-17T18:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNjcyNg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525426726", "bodyText": "I'm in favor of the pass through reviewer", "author": "calvinjia", "createdAt": "2020-11-17T19:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0MzAwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525743001", "bodyText": "Added AcceptingReviewer", "author": "jiacheliu3", "createdAt": "2020-11-18T03:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxNjAyNw=="}], "type": "inlineReview"}, {"oid": "2563cb387a838628ea0825c4c87698a4dd117f25", "url": "https://github.com/Alluxio/alluxio/commit/2563cb387a838628ea0825c4c87698a4dd117f25", "message": "fix more tests", "committedDate": "2020-11-17T18:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNzY1NA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525427654", "bodyText": "Is the namespace for this property correct? Since it seems to only affect the probabilistic reviewer.\nProbably not something we need to address in this PR - if users are plugging in their own reviewers, how will they add configuration options?", "author": "calvinjia", "createdAt": "2020-11-17T19:24:45Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -5279,6 +5325,12 @@ private static String javadocLink(String fullyQualifiedClassname) {\n         \"alluxio.worker.block.master.client.pool.size\";\n     public static final String WORKER_PRINCIPAL = \"alluxio.worker.principal\";\n     public static final String WORKER_RAMDISK_SIZE = \"alluxio.worker.ramdisk.size\";\n+    public static final String WORKER_REVIEWER_BUFFER_HARDLIMIT_BYTES =\n+            \"alluxio.worker.reviewer.buffer.hardlimit.bytes\";", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTcxMjg2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525712862", "bodyText": "By the buffer i mean the ProbabilisticBufferReviewer, but I see it can be confusing due to the multiple meanings of buffer. On second thought I'm changing it to alluxio.worker.reviewer.probabilistic.hardlimit.bytes to make the reference to ProbabilisticBufferReviewer clearer.\nFor plugging in own Reviewer implementation, that would be alluxio.worker.reviewer.<foo>.<property key>. Does that make more sense to you?", "author": "jiacheliu3", "createdAt": "2020-11-18T03:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1MDUzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525750531", "bodyText": "Ah okay, I didn't make the connection, this is much clearer. My question about plugins is more around the fact that they would need to add the property key to our PropertyKey.java file which requires recompiling.", "author": "calvinjia", "createdAt": "2020-11-18T03:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1NjU5NA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525756594", "bodyText": "I see, that's a very good question. I did a random search for our policy configuration like Allocator, Evictor and BlockLocationPolicy. The implementations seem to be using hard coded parameters so I don't find an existing great way of plugging in customized properties w/o recompiling. If you are not aware of an existing solution either, I think we'll need to define how we want it to be done.", "author": "jiacheliu3", "createdAt": "2020-11-18T03:53:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNzY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNzk1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525427959", "bodyText": "Will this be extremely verbose?", "author": "calvinjia", "createdAt": "2020-11-17T19:25:14Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java", "diffHunk": "@@ -633,18 +633,20 @@ private StorageDirView allocateSpace(long sessionId, AllocateOptions options) {\n     try {\n       // Allocate from given location.\n       dirView = mAllocator.allocateBlockWithView(sessionId, options.getSize(),\n-          options.getLocation(), allocatorView);\n-\n+          options.getLocation(), allocatorView, false);\n       if (dirView != null) {\n         return dirView;\n       }\n \n       if (options.isForceLocation()) {\n         if (options.isEvictionAllowed()) {\n+          LOG.debug(\"Free space for block expansion: freeing {} on {}. \",\n+                  options.getSize(), options.getLocation());", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1MTYyOA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525751628", "bodyText": "I think this should be okay. At least for my case, when we turn on debug log for TieredBlockStore there are something going wrong with tiered allocation, and space freeing is definitely a very critical part that we want to look into. Plus we don't free space on every buffer flush (every freeSpace() cleans up at least one block), so I think it's okay.", "author": "jiacheliu3", "createdAt": "2020-11-18T03:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNzk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMzk5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525403992", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      LOG.debug(\"Free space for block expansion: freeing {} on {}. \",\n          \n          \n            \n                      LOG.debug(\"Free space for block expansion: freeing {} bytes on {}. \",", "author": "gpang", "createdAt": "2020-11-17T18:49:10Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java", "diffHunk": "@@ -633,18 +633,20 @@ private StorageDirView allocateSpace(long sessionId, AllocateOptions options) {\n     try {\n       // Allocate from given location.\n       dirView = mAllocator.allocateBlockWithView(sessionId, options.getSize(),\n-          options.getLocation(), allocatorView);\n-\n+          options.getLocation(), allocatorView, false);\n       if (dirView != null) {\n         return dirView;\n       }\n \n       if (options.isForceLocation()) {\n         if (options.isEvictionAllowed()) {\n+          LOG.debug(\"Free space for block expansion: freeing {} on {}. \",", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNDMzNA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525404334", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.debug(\"Allocate to anyTier for {} on {}\", options.getSize(), options.getLocation());\n          \n          \n            \n                    LOG.debug(\"Allocate to anyTier for {} bytes on {}\", options.getSize(), options.getLocation());", "author": "gpang", "createdAt": "2020-11-17T18:49:43Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java", "diffHunk": "@@ -656,8 +658,9 @@ private StorageDirView allocateSpace(long sessionId, AllocateOptions options) {\n           return null;\n         }\n       } else {\n+        LOG.debug(\"Allocate to anyTier for {} on {}\", options.getSize(), options.getLocation());", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNDQ1OA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525404458", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      LOG.debug(\"Allocation on anyTier failed. Free space for {} on anyTier\", toFreeBytes);\n          \n          \n            \n                      LOG.debug(\"Allocation on anyTier failed. Free space for {} bytes on anyTier\", toFreeBytes);", "author": "gpang", "createdAt": "2020-11-17T18:49:56Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java", "diffHunk": "@@ -668,11 +671,14 @@ private StorageDirView allocateSpace(long sessionId, AllocateOptions options) {\n           // Free more than requested by configured free-ahead size.\n           long freeAheadBytes =\n               ServerConfiguration.getBytes(PropertyKey.WORKER_TIERED_STORE_FREE_AHEAD_BYTES);\n-          freeSpace(sessionId, options.getSize(), options.getSize() + freeAheadBytes,\n+          long toFreeBytes = options.getSize() + freeAheadBytes;\n+          LOG.debug(\"Allocation on anyTier failed. Free space for {} on anyTier\", toFreeBytes);", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNDkyMw==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525404923", "bodyText": "Can we make this message distinct from the earlier one on line 649?", "author": "gpang", "createdAt": "2020-11-17T18:50:38Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java", "diffHunk": "@@ -668,11 +671,14 @@ private StorageDirView allocateSpace(long sessionId, AllocateOptions options) {\n           // Free more than requested by configured free-ahead size.\n           long freeAheadBytes =\n               ServerConfiguration.getBytes(PropertyKey.WORKER_TIERED_STORE_FREE_AHEAD_BYTES);\n-          freeSpace(sessionId, options.getSize(), options.getSize() + freeAheadBytes,\n+          long toFreeBytes = options.getSize() + freeAheadBytes;\n+          LOG.debug(\"Allocation on anyTier failed. Free space for {} on anyTier\", toFreeBytes);\n+          freeSpace(sessionId, options.getSize(), toFreeBytes,\n               BlockStoreLocation.anyTier());\n-\n+          // Skip the review as we want the allocation to be in the place we just freed\n           dirView = mAllocator.allocateBlockWithView(sessionId, options.getSize(),\n-              BlockStoreLocation.anyTier(), allocatorView.refreshView());\n+              BlockStoreLocation.anyTier(), allocatorView.refreshView(), true);\n+          LOG.debug(\"Allocation after free space: {}\", dirView);", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwOTEwNg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525409106", "bodyText": "Should this be called acceptAllocation?", "author": "gpang", "createdAt": "2020-11-17T18:57:06Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/reviewer/Reviewer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.reviewer;\n+\n+import alluxio.annotation.PublicApi;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.util.CommonUtils;\n+import alluxio.worker.block.allocator.Allocator;\n+import alluxio.worker.block.meta.StorageDirView;\n+\n+/**\n+ * Interface for the review policy of allocation decision made by {@link Allocator}.\n+ *\n+ * Each {@link Allocator} has a Reviewer instance according to the policy definition.\n+ * For each block allocation decision, the Reviewer reviews it according to the criteria\n+ * defined in the policy.\n+ * If the allocation does not meet the criteria, the Reviewer will reject it.\n+ * */\n+@PublicApi\n+public interface Reviewer {\n+  /**\n+   * Reviews an allocation proposed by the {@link Allocator}.\n+   * Returning true means the allocation is accepted.\n+   * Returning false meanes the allocation is rejected.\n+   *\n+   * @param dirView the storage dir that the block is allocated to\n+   * @return whether the allocation is accepted\n+   * */\n+  boolean reviewAllocation(StorageDirView dirView);", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0ODY4MA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525548680", "bodyText": "this name is incorrect?", "author": "gpang", "createdAt": "2020-11-17T21:51:49Z", "path": "core/server/worker/src/test/java/alluxio/worker/block/reviewer/ReviewerFactoryTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.reviewer;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test {@link Reviewer.Factory} by passing different allocate strategy class names with alluxio\n+ * conf and test if it generates the correct {@link Reviewer} instance.\n+ * */\n+public class ReviewerFactoryTest {\n+  @Test\n+  public void createGreedyAllocator() {", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0OTkwMg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525549902", "bodyText": "Again, this would look simpler if there was a noop or accepting reviewer.", "author": "gpang", "createdAt": "2020-11-17T21:54:12Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/allocator/GreedyAllocator.java", "diffHunk": "@@ -57,15 +68,20 @@ public StorageDirView allocateBlockWithView(long sessionId, long blockSize,\n    */\n   @Nullable\n   private StorageDirView allocateBlock(long sessionId, long blockSize,\n-      BlockStoreLocation location) {\n+      BlockStoreLocation location, boolean skipReview) {\n     Preconditions.checkNotNull(location, \"location\");\n     if (location.equals(BlockStoreLocation.anyTier())) {\n       // When any tier is ok, loop over all tier views and dir views,\n       // and return a temp block meta from the first available dirview.\n       for (StorageTierView tierView : mMetadataView.getTierViews()) {\n         for (StorageDirView dirView : tierView.getDirViews()) {\n           if (dirView.getAvailableBytes() >= blockSize) {\n-            return dirView;\n+            if (skipReview || (!mReviewerEnabled) || mReviewer.reviewAllocation(dirView)) {", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTMyNg==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525551326", "bodyText": "I have some level of concern because each allocator needs to implement the reviewer call independently. Is there some way that the review acceptance and rejection can be implemented once and shared among all allocators?", "author": "gpang", "createdAt": "2020-11-17T21:56:52Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/allocator/Allocator.java", "diffHunk": "@@ -53,13 +54,22 @@ public static Allocator create(BlockMetadataView view) {\n    * specific location, or {@link BlockStoreLocation#anyTier()} or\n    * {@link BlockStoreLocation#anyDirInTier(String)}.\n    *\n+   * The proposed allocation will be reviewed by a {@link Reviewer}.\n+   * The reviewer will check certain aspects of the allocation and may reject the allocation if\n+   * it does not meet certain criteria.\n+   * The parameter skipReview specifies whether the review should be skipped.\n+   * The review should be skipped when we want the behavior of the allocator to be deterministic\n+   * and do not want it to be affected by the reviewer.\n+   * E.g. We just freed up some space in Alluxio and want the allocation to use the freed space.\n+   *\n    * @param sessionId the id of session to apply for the block allocation\n    * @param blockSize the size of block in bytes\n    * @param location the location in block store\n    * @param view of the block metadata\n+   * @param skipReview whether the review should be skipped", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTczMjI3NA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525732274", "bodyText": "Per our discussion, I added a TODO. Totally agreed the decoupling should be done, but it takes a non-trivial refactoring on the existing API so should be done in a separate PR.\nUnder the current implementation of the Allocator class, the Allocator loops the StorageDir in an order it defines and makes allocation decisions on the way. When the Reviewer rejects an allocation, by design it should go back to the looping and try the next dir. This logic cannot be very easily extracted and hence decouple Allocator from Reviewer.\nFor the refactor (TODO), it makes more sense if the Allocator gives a list of candidate StorageDir in the order that it defines, then another coordinator (or maybe the Reviewer itself) looks at the candidates and makes the call.", "author": "jiacheliu3", "createdAt": "2020-11-18T03:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjI1Ng==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525552256", "bodyText": "Will this be accessed by different threads? If so, we should use ThreadLocalRandom: https://stackoverflow.com/questions/23396033/random-over-threadlocalrandom", "author": "gpang", "createdAt": "2020-11-17T21:58:40Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/reviewer/ProbabilisticBufferReviewer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.reviewer;\n+\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.worker.block.meta.StorageDir;\n+import alluxio.worker.block.meta.StorageDirView;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Random;\n+\n+/**\n+ * Reviews a block allocation, and probably rejects a bad block allocation.\n+ * The more full a StorageDir, the higher the chance that this reviewer decides\n+ * NOT to use it for a new block.\n+ *\n+ * The intention is to leave a buffer to each {@link StorageDir} by early stopping putting\n+ * new blocks into it.\n+ * The existing blocks in the {@link StorageDir} will likely read more data in and expand in size.\n+ * We want to leave some space for the expansion, to lower the chance of eviction.\n+ * */\n+public class ProbabilisticBufferReviewer implements Reviewer {\n+  private static final Logger LOG = LoggerFactory.getLogger(ProbabilisticBufferReviewer.class);\n+  private static final Random RANDOM = new Random();", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjY4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525552681", "bodyText": "Can this just be a local variable?", "author": "gpang", "createdAt": "2020-11-17T21:59:29Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/reviewer/ProbabilisticBufferReviewer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.worker.block.reviewer;\n+\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.worker.block.meta.StorageDir;\n+import alluxio.worker.block.meta.StorageDirView;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Random;\n+\n+/**\n+ * Reviews a block allocation, and probably rejects a bad block allocation.\n+ * The more full a StorageDir, the higher the chance that this reviewer decides\n+ * NOT to use it for a new block.\n+ *\n+ * The intention is to leave a buffer to each {@link StorageDir} by early stopping putting\n+ * new blocks into it.\n+ * The existing blocks in the {@link StorageDir} will likely read more data in and expand in size.\n+ * We want to leave some space for the expansion, to lower the chance of eviction.\n+ * */\n+public class ProbabilisticBufferReviewer implements Reviewer {\n+  private static final Logger LOG = LoggerFactory.getLogger(ProbabilisticBufferReviewer.class);\n+  private static final Random RANDOM = new Random();\n+\n+  private final long mHardLimitBytes;\n+  private final long mSoftLimitBytes;\n+  private final InstancedConfiguration mConf;\n+\n+  /**\n+   * Constructor the instance from configuration.\n+   * */\n+  public ProbabilisticBufferReviewer() {\n+    mConf = ServerConfiguration.global();", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDk5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525554991", "bodyText": "maybe for integration tests, we should just set the setting as disabled (or noop reviewer). I think that is in ConfigurationTestUtils", "author": "gpang", "createdAt": "2020-11-17T22:04:07Z", "path": "tests/src/test/java/alluxio/server/tieredstore/SpecificTierWriteIntegrationTest.java", "diffHunk": "@@ -81,6 +81,7 @@\n               LOW_WATERMARK)\n           .setProperty(PropertyKey.USER_BLOCK_WRITE_LOCATION_POLICY,\n               LocalFirstPolicy.class.getTypeName())\n+          .setProperty(PropertyKey.WORKER_REVIEWER_ENABLED, String.valueOf(false))", "originalCommit": "2563cb387a838628ea0825c4c87698a4dd117f25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTczNzkyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525737929", "bodyText": "Added. For the tests i modified, they are not using ConfigurationTestUtils.defaults(), but this will surely help the integration tests which do.", "author": "jiacheliu3", "createdAt": "2020-11-18T03:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NDk5MQ=="}], "type": "inlineReview"}, {"oid": "62bfbf421075a538326967deecdae9c115fba863", "url": "https://github.com/Alluxio/alluxio/commit/62bfbf421075a538326967deecdae9c115fba863", "message": "Update core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java\n\nCo-authored-by: Gene Pang <gene.pang@gmail.com>", "committedDate": "2020-11-18T01:39:08Z", "type": "commit"}, {"oid": "9c7fd6f77edf299fbf3de2e1286af80ebc2d3f51", "url": "https://github.com/Alluxio/alluxio/commit/9c7fd6f77edf299fbf3de2e1286af80ebc2d3f51", "message": "Update core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java\n\nCo-authored-by: Gene Pang <gene.pang@gmail.com>", "committedDate": "2020-11-18T01:39:44Z", "type": "commit"}, {"oid": "e2a99a793ed6d2067df73b90609c79575ea0806f", "url": "https://github.com/Alluxio/alluxio/commit/e2a99a793ed6d2067df73b90609c79575ea0806f", "message": "Update core/server/worker/src/main/java/alluxio/worker/block/TieredBlockStore.java\n\nCo-authored-by: Gene Pang <gene.pang@gmail.com>", "committedDate": "2020-11-18T01:40:14Z", "type": "commit"}, {"oid": "6bfd33a7b3a8acabb4eb775bfcfe87652960c8b3", "url": "https://github.com/Alluxio/alluxio/commit/6bfd33a7b3a8acabb4eb775bfcfe87652960c8b3", "message": "Update core/server/worker/src/main/java/alluxio/worker/block/management/tier/AlignTask.java\n\nCo-authored-by: Gene Pang <gene.pang@gmail.com>", "committedDate": "2020-11-18T01:40:46Z", "type": "commit"}, {"oid": "9f58e5f780de798a3f765001dd7364e696f305db", "url": "https://github.com/Alluxio/alluxio/commit/9f58e5f780de798a3f765001dd7364e696f305db", "message": "add AcceptingReviewer", "committedDate": "2020-11-18T01:52:05Z", "type": "commit"}, {"oid": "45ca7df42c075d5b509e95a0dde2bc60c794f210", "url": "https://github.com/Alluxio/alluxio/commit/45ca7df42c075d5b509e95a0dde2bc60c794f210", "message": "resolve comments, add TODO and fix checkstyle", "committedDate": "2020-11-18T03:09:51Z", "type": "commit"}, {"oid": "a58597c46b07b4635b1176f704f1ee0edab3b57e", "url": "https://github.com/Alluxio/alluxio/commit/a58597c46b07b4635b1176f704f1ee0edab3b57e", "message": "resolve more comments", "committedDate": "2020-11-18T03:38:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NDgzNA==", "url": "https://github.com/Alluxio/alluxio/pull/12486#discussion_r525744834", "bodyText": "This will help integration tests that use defaults() to avoid the non-deterministic block allocation reviewing", "author": "jiacheliu3", "createdAt": "2020-11-18T03:41:16Z", "path": "core/common/src/test/java/alluxio/ConfigurationTestUtils.java", "diffHunk": "@@ -75,6 +75,10 @@ public static InstancedConfiguration defaults() {\n       conf.put(PropertyKey.Template.WORKER_TIERED_STORE_LEVEL_DIRS_PATH.format(level),\n           Joiner.on(',').join(newPaths));\n     }\n+\n+    // Sets up the block allocation and review policy\n+    conf.put(PropertyKey.WORKER_REVIEWER_CLASS, \"alluxio.worker.block.reviewer.AcceptingReviewer\");", "originalCommit": "a58597c46b07b4635b1176f704f1ee0edab3b57e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "52fb4b9b6829360e7b7a483232e78a03889d8972", "url": "https://github.com/Alluxio/alluxio/commit/52fb4b9b6829360e7b7a483232e78a03889d8972", "message": "add a note of the experimental nature", "committedDate": "2020-11-18T03:56:32Z", "type": "commit"}]}