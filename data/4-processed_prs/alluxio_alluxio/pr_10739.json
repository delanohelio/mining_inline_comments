{"pr_number": 10739, "pr_title": "Specify the Alluxio file system type with a class instead of a boolean", "pr_createdAt": "2020-01-14T01:08:36Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10739", "timeline": [{"oid": "3837a3aa842abc38e5b8fb02224e9f63fe558b97", "url": "https://github.com/Alluxio/alluxio/commit/3837a3aa842abc38e5b8fb02224e9f63fe558b97", "message": "Specify the Alluxio file system type with a class instead of a boolean.", "committedDate": "2020-01-14T00:56:14Z", "type": "commit"}, {"oid": "ef946d8af275e22948c50a6d722612aee85a8ae2", "url": "https://github.com/Alluxio/alluxio/commit/ef946d8af275e22948c50a6d722612aee85a8ae2", "message": "Checkstyle.", "committedDate": "2020-01-14T01:05:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMTkxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366111915", "bodyText": "Do you think we should list out the different options this can be configured with?", "author": "ZacBlanco", "createdAt": "2020-01-14T01:19:53Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3368,9 +3368,9 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.CLIENT)\n           .build();\n-  public static final PropertyKey USER_METADATA_CACHE_ENABLED =\n-      new Builder(Name.USER_METADATA_CACHE_ENABLED)\n-          .setDefaultValue(false)\n+  public static final PropertyKey USER_FILESYSTEM_CLASS =\n+      new Builder(Name.USER_FILESYSTEM_CLASS)\n+          .setDefaultValue(\"alluxio.client.file.BaseFileSystem\")", "originalCommit": "ef946d8af275e22948c50a6d722612aee85a8ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExOTQ3Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366119477", "bodyText": "Good catch, I forgot the change the description.", "author": "calvinjia", "createdAt": "2020-01-14T01:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMxMw==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366113313", "bodyText": "I'm not a huge fan of creating the classes this way because it creates an implicit rather than explicit contract on all implementations to use the exact same constructor. I don't think it's the best approach.\nBecause we don't have many FS implementations I think I'm okay leaving it for now, but we might want to consider a factory-based pattern or something similar if we end up extending this more in the future.", "author": "ZacBlanco", "createdAt": "2020-01-14T01:25:25Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystem.java", "diffHunk": "@@ -148,10 +149,10 @@ private static FileSystem create(FileSystemContext context, boolean cachingEnabl\n           LOG.debug(\"{}={} ({})\", key.getName(), value, source);\n         }\n       }\n-      if (context.getClusterConf().getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED)) {\n-        return new CachingFileSystem(context, cachingEnabled);\n-      }\n-      return BaseFileSystem.create(context, cachingEnabled);\n+      Class fsClass = context.getClusterConf().getClass(PropertyKey.USER_FILESYSTEM_CLASS);\n+      Class[] ctorArgClasses = new Class[] {FileSystemContext.class, boolean.class};\n+      Object[] ctorArgs = new Object[] {context, cachingEnabled};\n+      return (FileSystem) CommonUtils.createNewClassInstance(fsClass, ctorArgClasses, ctorArgs);", "originalCommit": "ef946d8af275e22948c50a6d722612aee85a8ae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExOTQwNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366119405", "bodyText": "I agree, even in our current code we don't have a standard way of creating the file system", "author": "calvinjia", "createdAt": "2020-01-14T01:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExMzMxMw=="}], "type": "inlineReview"}, {"oid": "cf9502529f167c08a2ab39d57dd0ee56bdeb5626", "url": "https://github.com/Alluxio/alluxio/commit/cf9502529f167c08a2ab39d57dd0ee56bdeb5626", "message": "Address comments.", "committedDate": "2020-01-14T01:59:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NTM5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366145391", "bodyText": "nit: can you put this property in alphabetical order?", "author": "apc999", "createdAt": "2020-01-14T04:12:45Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3368,29 +3368,29 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.CLIENT)\n           .build();\n-  public static final PropertyKey USER_METADATA_CACHE_ENABLED =\n-      new Builder(Name.USER_METADATA_CACHE_ENABLED)\n-          .setDefaultValue(false)\n-          .setDescription(\"If this is enabled, metadata of paths will be cached. \"\n-              + \"The cached metadata will be evicted when it expires after \"\n-              + Name.USER_METADATA_CACHE_EXPIRATION_TIME\n-              + \" or the cache size is over the limit of \"\n-              + Name.USER_METADATA_CACHE_MAX_SIZE + \".\")\n+  public static final PropertyKey USER_FILESYSTEM_CLASS =", "originalCommit": "cf9502529f167c08a2ab39d57dd0ee56bdeb5626", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyNTY3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366525675", "bodyText": "updated, thanks. There are other keys which are not in order, but I won't address that in this PR.", "author": "calvinjia", "createdAt": "2020-01-14T19:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NTM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NTQwNw==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366145407", "bodyText": "nit: can you put this property in alphabetical order?", "author": "apc999", "createdAt": "2020-01-14T04:12:53Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -4539,8 +4539,7 @@ private static String javadocLink(String fullyQualifiedClassname) {\n         \"alluxio.user.short.circuit.preferred\";\n     public static final String USER_WORKER_LIST_REFRESH_INTERVAL =\n         \"alluxio.user.worker.list.refresh.interval\";\n-    public static final String USER_METADATA_CACHE_ENABLED =\n-        \"alluxio.user.metadata.cache.enabled\";\n+    public static final String USER_FILESYSTEM_CLASS = \"alluxio.user.filesystem.class\";", "originalCommit": "cf9502529f167c08a2ab39d57dd0ee56bdeb5626", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6c70812234cdf78e158e2bc9f3f4202785064ff8", "url": "https://github.com/Alluxio/alluxio/commit/6c70812234cdf78e158e2bc9f3f4202785064ff8", "message": "Order property keys.", "committedDate": "2020-01-14T19:20:35Z", "type": "commit"}, {"oid": "09beea21c9917e61984c09dc6dd8e6283a037c80", "url": "https://github.com/Alluxio/alluxio/commit/09beea21c9917e61984c09dc6dd8e6283a037c80", "message": "Resolve conflicts.", "committedDate": "2020-01-14T21:26:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MjE5OA==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366582198", "bodyText": "update", "author": "apc999", "createdAt": "2020-01-14T21:30:15Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3152,36 +3169,19 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.CLIENT)\n           .build();\n-  public static final PropertyKey USER_LOCAL_CACHE_ENABLED =\n-      new Builder(Name.USER_LOCAL_CACHE_ENABLED)\n-          .setDefaultValue(false)\n-          .setDescription(\"If this is enabled, data will be cached on Alluxio client.\")\n-          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.CLIENT)\n-          .build();\n-  public static final PropertyKey USER_METADATA_CACHE_ENABLED =\n-      new Builder(Name.USER_METADATA_CACHE_ENABLED)\n-          .setDefaultValue(false)\n-          .setDescription(\"If this is enabled, metadata of paths will be cached. \"\n-              + \"The cached metadata will be evicted when it expires after \"\n-              + Name.USER_METADATA_CACHE_EXPIRATION_TIME\n-              + \" or the cache size is over the limit of \"\n-              + Name.USER_METADATA_CACHE_MAX_SIZE + \".\")\n-          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.CLIENT)\n-          .build();\n   public static final PropertyKey USER_METADATA_CACHE_MAX_SIZE =\n       new Builder(Name.USER_METADATA_CACHE_MAX_SIZE)\n           .setDefaultValue(100000)\n-          .setDescription(\"Maximum number of paths with cached metadata.\")\n+          .setDescription(\"Maximum number of paths with cached metadata. Only valid if the \"\n+              + \"filesystem is alluxio.client.file.CachingFileSystem.\")", "originalCommit": "09beea21c9917e61984c09dc6dd8e6283a037c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MjI0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10739#discussion_r366582242", "bodyText": "update", "author": "apc999", "createdAt": "2020-01-14T21:30:21Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3152,36 +3169,19 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.CLIENT)\n           .build();\n-  public static final PropertyKey USER_LOCAL_CACHE_ENABLED =\n-      new Builder(Name.USER_LOCAL_CACHE_ENABLED)\n-          .setDefaultValue(false)\n-          .setDescription(\"If this is enabled, data will be cached on Alluxio client.\")\n-          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.CLIENT)\n-          .build();\n-  public static final PropertyKey USER_METADATA_CACHE_ENABLED =\n-      new Builder(Name.USER_METADATA_CACHE_ENABLED)\n-          .setDefaultValue(false)\n-          .setDescription(\"If this is enabled, metadata of paths will be cached. \"\n-              + \"The cached metadata will be evicted when it expires after \"\n-              + Name.USER_METADATA_CACHE_EXPIRATION_TIME\n-              + \" or the cache size is over the limit of \"\n-              + Name.USER_METADATA_CACHE_MAX_SIZE + \".\")\n-          .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.CLIENT)\n-          .build();\n   public static final PropertyKey USER_METADATA_CACHE_MAX_SIZE =\n       new Builder(Name.USER_METADATA_CACHE_MAX_SIZE)\n           .setDefaultValue(100000)\n-          .setDescription(\"Maximum number of paths with cached metadata.\")\n+          .setDescription(\"Maximum number of paths with cached metadata. Only valid if the \"\n+              + \"filesystem is alluxio.client.file.CachingFileSystem.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.CLIENT)\n           .build();\n   public static final PropertyKey USER_METADATA_CACHE_EXPIRATION_TIME =\n       new Builder(Name.USER_METADATA_CACHE_EXPIRATION_TIME)\n           .setDefaultValue(\"10min\")\n           .setDescription(\"Metadata will expire and be evicted after being cached for this time \"\n-              + \"period.\")\n+              + \"period. Only valid if the filesystem is alluxio.client.file.CachingFileSystem.\")", "originalCommit": "09beea21c9917e61984c09dc6dd8e6283a037c80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "99bd1e6f618c48d54c012327a428debae1d6460f", "url": "https://github.com/Alluxio/alluxio/commit/99bd1e6f618c48d54c012327a428debae1d6460f", "message": "Update class name.", "committedDate": "2020-01-14T21:44:03Z", "type": "commit"}]}