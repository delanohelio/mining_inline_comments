{"pr_number": 11999, "pr_title": "[DOCFIX] Add guidelines for resource allocation with colocated services", "pr_createdAt": "2020-08-18T06:38:02Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11999", "timeline": [{"oid": "06b4080cda07d0db1666a1b3db53fe6b4bd47143", "url": "https://github.com/Alluxio/alluxio/commit/06b4080cda07d0db1666a1b3db53fe6b4bd47143", "message": "draft", "committedDate": "2020-08-18T06:37:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3Nzg1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11999#discussion_r472577859", "bodyText": "Is this specific to Presto or does this apply for any compute engine?", "author": "calvinjia", "createdAt": "2020-08-19T01:12:02Z", "path": "docs/en/operation/Scalability-Tuning.md", "diffHunk": "@@ -299,3 +299,51 @@ to workers.\n You might want to enable it if you find that the Alluxio client is waiting a long time on dead\n workers.\n To enable it, set the property `alluxio.user.network.keepalive.time` to a desired interval.\n+\n+## Resource Sharing with Colocated Services\n+\n+In many cases, Alluxio is not the only resource intensive service running on a node.\n+Frequently, our users choose to colocate the computation framework such as Presto or Spark with Alluxio,\n+to fully take advantage of the data locality.\n+Allocation of limited resources to different services such as Presto, Spark and Alluxio becomes an interesting challenge,\n+and can have signficant impact on the performance of the tasks or queries.\n+Unbalanced resource allocation can even lead to query failures and processes exiting with an error.\n+\n+### Presto and Alluxio", "originalCommit": "06b4080cda07d0db1666a1b3db53fe6b4bd47143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3ODE2MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11999#discussion_r472578161", "bodyText": "Could you add a sample calculation?", "author": "calvinjia", "createdAt": "2020-08-19T01:13:12Z", "path": "docs/en/operation/Scalability-Tuning.md", "diffHunk": "@@ -299,3 +299,51 @@ to workers.\n You might want to enable it if you find that the Alluxio client is waiting a long time on dead\n workers.\n To enable it, set the property `alluxio.user.network.keepalive.time` to a desired interval.\n+\n+## Resource Sharing with Colocated Services\n+\n+In many cases, Alluxio is not the only resource intensive service running on a node.\n+Frequently, our users choose to colocate the computation framework such as Presto or Spark with Alluxio,\n+to fully take advantage of the data locality.\n+Allocation of limited resources to different services such as Presto, Spark and Alluxio becomes an interesting challenge,\n+and can have signficant impact on the performance of the tasks or queries.\n+Unbalanced resource allocation can even lead to query failures and processes exiting with an error.\n+\n+### Presto and Alluxio\n+\n+When Presto is colocated with Alluxio, memory is often the most contentious resource.\n+Presto needs a large amount of memory to be able to efficiently process queries.\n+Alluxio also needs memory for caching and metadata management. \n+\n+#### Colocated Coordinator and Master\n+\n+In many deployment settings, Presto coordinator is running on the same node as the Alluxio master.\n+They are good candidates to be colocated because Alluxio master consumes large amount of memory due to the metadata it keeps, but Presto coordinator are often less demanding on the memory compared to Presto workers.\n+\n+The total amount of memory consumed by these two applications are roughly\n+Alluxio Heap size + Alluxio offheap size (due to thread stack allocations) + Presto coordinator Heap size  + System resource memory size\n+Linux also needs some memory for its own kernel data structures and other system programs as well.\n+So it is recommended to leave at least 10-15GB for that purpose as well.\n+If the sum of these four values are near the system total available memory, Out-of-memory killer may be triggered.\n+It will choose the process with the highest badness score (frequently the process using the most memory) and kill it.\n+This would like kill the Alluxio master and lead to system downtime.\n+\n+If memory resource is constrained, presto coordinator needs sufficient memory to launch and complete queries. \n+So it would require the highest priority. \n+If alluxio metadata can not fit in the remaining memory, rocksdb-based offheap storage solution should be considered. \n+Then we consider memory required by the thread allocations, this is dependent on the number of threads, so we leave it as the last priority.", "originalCommit": "06b4080cda07d0db1666a1b3db53fe6b4bd47143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3ODQ4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11999#discussion_r472578486", "bodyText": "Could you add a sample calculation and mention they can use SSD if they want more cache space?", "author": "calvinjia", "createdAt": "2020-08-19T01:14:21Z", "path": "docs/en/operation/Scalability-Tuning.md", "diffHunk": "@@ -299,3 +299,51 @@ to workers.\n You might want to enable it if you find that the Alluxio client is waiting a long time on dead\n workers.\n To enable it, set the property `alluxio.user.network.keepalive.time` to a desired interval.\n+\n+## Resource Sharing with Colocated Services\n+\n+In many cases, Alluxio is not the only resource intensive service running on a node.\n+Frequently, our users choose to colocate the computation framework such as Presto or Spark with Alluxio,\n+to fully take advantage of the data locality.\n+Allocation of limited resources to different services such as Presto, Spark and Alluxio becomes an interesting challenge,\n+and can have signficant impact on the performance of the tasks or queries.\n+Unbalanced resource allocation can even lead to query failures and processes exiting with an error.\n+\n+### Presto and Alluxio\n+\n+When Presto is colocated with Alluxio, memory is often the most contentious resource.\n+Presto needs a large amount of memory to be able to efficiently process queries.\n+Alluxio also needs memory for caching and metadata management. \n+\n+#### Colocated Coordinator and Master\n+\n+In many deployment settings, Presto coordinator is running on the same node as the Alluxio master.\n+They are good candidates to be colocated because Alluxio master consumes large amount of memory due to the metadata it keeps, but Presto coordinator are often less demanding on the memory compared to Presto workers.\n+\n+The total amount of memory consumed by these two applications are roughly\n+Alluxio Heap size + Alluxio offheap size (due to thread stack allocations) + Presto coordinator Heap size  + System resource memory size\n+Linux also needs some memory for its own kernel data structures and other system programs as well.\n+So it is recommended to leave at least 10-15GB for that purpose as well.\n+If the sum of these four values are near the system total available memory, Out-of-memory killer may be triggered.\n+It will choose the process with the highest badness score (frequently the process using the most memory) and kill it.\n+This would like kill the Alluxio master and lead to system downtime.\n+\n+If memory resource is constrained, presto coordinator needs sufficient memory to launch and complete queries. \n+So it would require the highest priority. \n+If alluxio metadata can not fit in the remaining memory, rocksdb-based offheap storage solution should be considered. \n+Then we consider memory required by the thread allocations, this is dependent on the number of threads, so we leave it as the last priority.\n+\n+#### Colocated Workers\n+\n+It is also natural to colocate the Presto workers with Alluxio workers. \n+However, both of them can require a large amount of memory, so it is important to prioritize their allocations.\n+Similar to the master's case, the total memory consumption is \n+ALLUXIO_RAM_DISK_SIZE + ALLUXIO_WORKER_HEAP_SIZE + PRESTO_WORKER_HEAP_SIZE + SYSTEM RESOURCE REQUIREMENT\n+System resources contains file descriptor tables and thread allocations, and are limited on the workers, because workers tend to have fewer concurrent accesses compared to master. But we recommend leaving 10-15 GB at least for this purpose as well.\n+The next priority should be PRESTO_WORKER_HEAP_SIZE.\n+If the presto heap is too small, some queries will simply fail.\n+Unfortunately, it is difficult to know much memory a query will need unless you run it.\n+Tools such as top can be used to monitor the peak memory consumptions of the presto process.\n+ALLUXIO_WORKER_HEAP_SIZE does not need to be very large, but it is critical to ensure it is enough for the correct operation of the Alluxio worker.\n+The last priority should be the RAMDISK_SIZE. \n+Uncached data will negatively impact the performance, but will not have any impact on query correctness.", "originalCommit": "06b4080cda07d0db1666a1b3db53fe6b4bd47143", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f04afb6a45c0d1cf2c47b1c388e3132af21f74ef", "url": "https://github.com/Alluxio/alluxio/commit/f04afb6a45c0d1cf2c47b1c388e3132af21f74ef", "message": "Add balancing client and alluxio", "committedDate": "2021-09-23T21:46:49Z", "type": "commit"}, {"oid": "267715dca383a2fd673d8a67c9338af620358762", "url": "https://github.com/Alluxio/alluxio/commit/267715dca383a2fd673d8a67c9338af620358762", "message": "Change title", "committedDate": "2021-09-23T22:33:06Z", "type": "commit"}, {"id": "PRRC_kwDOAG8Jms4qoiry", "url": "https://github.com/Alluxio/alluxio/pull/11999#discussion_r715270898", "bodyText": "Typo", "author": "madanadit", "createdAt": "2021-09-24T02:12:10Z", "path": "docs/en/operation/Scalability-Tuning.md", "diffHunk": "@@ -299,3 +299,65 @@ to workers.\n You might want to enable it if you find that the Alluxio client is waiting a long time on dead\n workers.\n To enable it, set the property `alluxio.user.network.keepalive.time` to a desired interval.\n+\n+## Resource Sharing with Colocated Services\n+\n+In many cases, Alluxio is not the only resource intensive service running on a node.\n+Frequently, our users choose to colocate the computation framework such as Presto or Spark with Alluxio,\n+to fully take advantage of the data locality.\n+Allocation of limited resources to different services such as Presto, Spark and Alluxio becomes an interesting challenge,\n+and can have signficant impact on the performance of the tasks or queries.\n+Unbalanced resource allocation can even lead to query failures and processes exiting with an error.\n+\n+### Memory Allocation between Compute with Alluxio\n+\n+When Presto or Spark is colocated with Alluxio, memory is often the most contentious resource.\n+Both Presto and Spark need a large amount of memory to be able to efficiently process queries.\n+Alluxio also needs memory for caching and metadata management, unless SSD or HDD is used as the primary caching medium.\n+\n+#### Colocated Coordinator and Master\n+\n+In many deployment settings, Presto coordinator or Spark master is running on the same node as the Alluxio master.\n+They are good candidates to be colocated because Alluxio master consumes large amount of memory due to the metadata it keeps, but Presto coordinator and Spark masters are often less demanding on the memory compared to their workers.\n+\n+The total amount of memory consumed by these two applications are roughly\n+Alluxio JVM size + Presto/Spark JVM size  + System resource memory size\n+Linux also needs some memory for its own kernel data structures and other system programs as well.\n+So it is recommended to leave at least 10-15GB for that purpose as well.\n+If the sum of these values are near the system total available memory, Out-of-memory killer may be triggered.\n+It will choose the process with the highest badness score (frequently the process using the most memory) and kill it.\n+This would like kill the Alluxio master and lead to system downtime.", "originalCommit": "267715dca383a2fd673d8a67c9338af620358762", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a310a56f86d66d04b502f206300425c7352a8d0a", "url": "https://github.com/Alluxio/alluxio/commit/a310a56f86d66d04b502f206300425c7352a8d0a", "message": "Fix typo", "committedDate": "2021-09-24T17:38:16Z", "type": "commit"}]}