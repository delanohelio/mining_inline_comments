{"pr_number": 10776, "pr_title": "Allow local cache to recover from existing files", "pr_createdAt": "2020-01-21T22:53:15Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10776", "timeline": [{"oid": "82ff579e16c686076eb1cfec634e59464786872d", "url": "https://github.com/Alluxio/alluxio/commit/82ff579e16c686076eb1cfec634e59464786872d", "message": "allow local cache to recover from existing files", "committedDate": "2020-01-21T22:48:10Z", "type": "commit"}, {"oid": "759c7a34d4e2b6c66d3ade3fe56cf8f16ca2e760", "url": "https://github.com/Alluxio/alluxio/commit/759c7a34d4e2b6c66d3ade3fe56cf8f16ca2e760", "message": "fix findbugs and add more tests", "committedDate": "2020-01-21T23:20:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5OTMyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369299321", "bodyText": "Would be nice to know why its incompatible.", "author": "calvinjia", "createdAt": "2020-01-21T23:29:00Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -69,7 +85,64 @@ static PageStore create(AlluxioConfiguration conf) {\n         throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n             storeType.name()));\n     }\n-    options.setRootDir(conf.get(PropertyKey.USER_CLIENT_CACHE_DIR));\n+    String rootPath = conf.get(PropertyKey.USER_CLIENT_CACHE_DIR);\n+    options.setRootDir(rootPath);\n+    Path confPath = Paths.get(rootPath, CONF_FILE);\n+    boolean canLoad = false;\n+    if (Files.exists(confPath)) {\n+      Properties properties = ConfigurationUtils.loadPropertiesFromFile(confPath.toString());\n+      if (properties != null) {\n+        AlluxioProperties alluxioProperties = new AlluxioProperties();\n+        alluxioProperties.merge(properties, Source.DEFAULT);\n+        AlluxioConfiguration cacheConf = new InstancedConfiguration(alluxioProperties);\n+        // check store type\n+        if (cacheConf.get(PropertyKey.USER_CLIENT_CACHE_STORE_TYPE).equals(\n+            conf.get(PropertyKey.USER_CLIENT_CACHE_STORE_TYPE))\n+            // check page size\n+            && cacheConf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE)\n+            == conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE)\n+            // check enough cache size\n+            && cacheConf.getBytes(PropertyKey.USER_CLIENT_CACHE_SIZE)\n+            <= conf.getBytes(PropertyKey.USER_CLIENT_CACHE_SIZE)\n+            // check alluxio version\n+            && cacheConf.get(PropertyKey.VERSION).equals(\n+            conf.get(PropertyKey.VERSION))) {\n+          LOG.info(\"Found recoverable local cache at {}\", rootPath);\n+          canLoad = true;\n+        } else {\n+          LOG.info(\"Found local cache at {} with incompatible configuration.\", rootPath);", "originalCommit": "759c7a34d4e2b6c66d3ade3fe56cf8f16ca2e760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMzQ2NA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369333464", "bodyText": "Added individual checks and log messages.", "author": "bf8086", "createdAt": "2020-01-22T01:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5OTMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMDE5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369300197", "bodyText": "It feels kind of weird to not do the loading here. Also, could you put the clean up/load compatibility logic in another method, this method is doing a lot.", "author": "calvinjia", "createdAt": "2020-01-21T23:31:58Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -69,7 +85,64 @@ static PageStore create(AlluxioConfiguration conf) {\n         throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n             storeType.name()));\n     }\n-    options.setRootDir(conf.get(PropertyKey.USER_CLIENT_CACHE_DIR));\n+    String rootPath = conf.get(PropertyKey.USER_CLIENT_CACHE_DIR);\n+    options.setRootDir(rootPath);\n+    Path confPath = Paths.get(rootPath, CONF_FILE);\n+    boolean canLoad = false;\n+    if (Files.exists(confPath)) {\n+      Properties properties = ConfigurationUtils.loadPropertiesFromFile(confPath.toString());\n+      if (properties != null) {\n+        AlluxioProperties alluxioProperties = new AlluxioProperties();\n+        alluxioProperties.merge(properties, Source.DEFAULT);\n+        AlluxioConfiguration cacheConf = new InstancedConfiguration(alluxioProperties);\n+        // check store type\n+        if (cacheConf.get(PropertyKey.USER_CLIENT_CACHE_STORE_TYPE).equals(\n+            conf.get(PropertyKey.USER_CLIENT_CACHE_STORE_TYPE))\n+            // check page size\n+            && cacheConf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE)\n+            == conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE)\n+            // check enough cache size\n+            && cacheConf.getBytes(PropertyKey.USER_CLIENT_CACHE_SIZE)\n+            <= conf.getBytes(PropertyKey.USER_CLIENT_CACHE_SIZE)\n+            // check alluxio version\n+            && cacheConf.get(PropertyKey.VERSION).equals(\n+            conf.get(PropertyKey.VERSION))) {\n+          LOG.info(\"Found recoverable local cache at {}\", rootPath);\n+          canLoad = true;\n+        } else {\n+          LOG.info(\"Found local cache at {} with incompatible configuration.\", rootPath);\n+        }\n+      }\n+    }\n+    if (!canLoad) {\n+      LOG.info(\"Clean cache directory {}\", rootPath);\n+      File rootDir = new File(rootPath);\n+      try {\n+        if (Files.isDirectory(rootDir.toPath())) {\n+          FileUtils.deleteDirectory(rootDir);\n+        }\n+        FileUtils.forceMkdir(rootDir);\n+      } catch (IOException e) {\n+        throw new IllegalStateException(\n+            String.format(\"failed to clean cache directory %s\", rootDir), e);\n+      }\n+      Properties properties = new Properties();\n+      PropertyKey[] keys = new PropertyKey[]{\n+          PropertyKey.USER_CLIENT_CACHE_STORE_TYPE,\n+          PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE,\n+          PropertyKey.USER_CLIENT_CACHE_SIZE,\n+          PropertyKey.VERSION\n+      };\n+      for (PropertyKey key : keys) {\n+        properties.setProperty(key.getName(), conf.get(key));\n+      }\n+      try (FileOutputStream stream = new FileOutputStream(confPath.toString())) {\n+        properties.store(stream, \"Alluxio local cache configuration\");\n+      } catch (IOException e) {\n+        throw new IllegalStateException(\n+            String.format(\"failed to write cache configuration to file %s\", confPath), e);\n+      }\n+    }", "originalCommit": "759c7a34d4e2b6c66d3ade3fe56cf8f16ca2e760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMzg5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369333893", "bodyText": "I agree it feels weird. However the load method needs to pass a list of page ids to the meta store which cannot be returned in this factory method.", "author": "bf8086", "createdAt": "2020-01-22T01:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMDE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNDAyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369334029", "bodyText": "Extracted format and check to separate methods.", "author": "bf8086", "createdAt": "2020-01-22T01:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMDE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMDU0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369300541", "bodyText": "Should we warn on files we were unable to recover? Also should we delete them?", "author": "calvinjia", "createdAt": "2020-01-21T23:33:18Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -111,17 +114,45 @@ private Path getFilePath(PageId pageId) {\n         Long.toString(pageId.getPageIndex()));\n   }\n \n-  @Override\n-  public void close() {\n+  /**\n+   * @param path path of a file\n+   * @return the corresponding page id, or null if the file name does not match the pattern\n+   */\n+  private PageId getPageId(Path path) {\n+    Path parent = Preconditions.checkNotNull(path.getParent());\n+    if (!Paths.get(mRoot).equals(parent.getParent())) {\n+      return null;", "originalCommit": "759c7a34d4e2b6c66d3ade3fe56cf8f16ca2e760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNDA4NA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369334084", "bodyText": "Added some warnings.", "author": "bf8086", "createdAt": "2020-01-22T01:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMDU0MQ=="}], "type": "inlineReview"}, {"oid": "c719d5d6079a32f694f64d6400244a82b6327f31", "url": "https://github.com/Alluxio/alluxio/commit/c719d5d6079a32f694f64d6400244a82b6327f31", "message": "address comments", "committedDate": "2020-01-22T01:40:27Z", "type": "commit"}, {"oid": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "url": "https://github.com/Alluxio/alluxio/commit/50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "message": "fix findbugs", "committedDate": "2020-01-22T18:26:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NjE3Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369766177", "bodyText": "This will prevent applications like Presto to start. Shall we just try best-effort and ignore the existing pages failed to load?\nThis makes the constructor too complicated. Depending whether we want to throw Exceptions, if yes, better to  create a factory method to handle the part of code possibly throw exceptions.", "author": "apc999", "createdAt": "2020-01-22T19:44:55Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -91,6 +92,16 @@ public LocalCacheManager(FileSystemContext fsContext) {\n     for (int i = 0; i < LOCK_SIZE; i++) {\n       mPageLocks[i] = new ReentrantReadWriteLock();\n     }\n+    Collection<PageId> pages;\n+    try {\n+      pages = mPageStore.load();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"failed to scan page cache\", e);", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExMzM3Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372113376", "bodyText": "Added a factory method and added logic to catch exceptions and fallback to normal file stream.", "author": "bf8086", "createdAt": "2020-01-28T23:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2NjE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3MjM0MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369772340", "bodyText": "nit: instead of a Collection<PageId>, is it safer & more efficient to return Iterable<PageId> in case there are too many pages or the underline PageStore implementation already provides a Iterable ?", "author": "apc999", "createdAt": "2020-01-22T19:57:42Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -120,4 +239,12 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n    * @return the number of pages stored\n    */\n   int size();\n+\n+  /**\n+   * Loads page store from local storage and returns all page ids.\n+   *\n+   * @return collection of ids representing all pages loaded from disk\n+   * @throws IOException if any error occurs\n+   */\n+  Collection<PageId> load() throws IOException;", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNTkwOA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372115908", "bodyText": "Both iterating files and rocksDB records require explicit call to close() method to release the resources. Returning an iterator hides this requirement and will lead to resource leak. Creating a copy of the list allow us to close the resource properly before this method returns. I would not concern too much about the memory consumption since we already store all page ids in meta store.", "author": "bf8086", "createdAt": "2020-01-28T23:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3MjM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3NDE1MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369774150", "bodyText": "@Nullable", "author": "apc999", "createdAt": "2020-01-22T20:01:21Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -111,17 +114,55 @@ private Path getFilePath(PageId pageId) {\n         Long.toString(pageId.getPageIndex()));\n   }\n \n-  @Override\n-  public void close() {\n+  /**\n+   * @param path path of a file\n+   * @return the corresponding page id, or null if the file name does not match the pattern\n+   */\n+  private PageId getPageId(Path path) {", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMzk4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372123981", "bodyText": "Added.", "author": "bf8086", "createdAt": "2020-01-28T23:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3NDE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NjQ5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369796499", "bodyText": "How about making the encoding/decoding between PageId & file path in util methods or a maybe even a separate class. In this way, it is much easier to maintain in the future to change the encoding scheme", "author": "apc999", "createdAt": "2020-01-22T20:52:49Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -111,17 +114,55 @@ private Path getFilePath(PageId pageId) {\n         Long.toString(pageId.getPageIndex()));\n   }\n \n-  @Override\n-  public void close() {\n+  /**\n+   * @param path path of a file\n+   * @return the corresponding page id, or null if the file name does not match the pattern\n+   */\n+  private PageId getPageId(Path path) {\n+    Path parent = Preconditions.checkNotNull(path.getParent());\n+    if (!Paths.get(mRoot).equals(parent.getParent())) {\n+      return null;\n+    }\n     try {\n-      FileUtils.deleteDirectory(new File(mRoot));\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to clean up local page store directory\", e);\n+      Path fileName = Preconditions.checkNotNull(path.getFileName());", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNzgxMA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372117810", "bodyText": "So far the encoding/decoding is rather store type specific and no logic is shared between different stores. I will create util classes if we later have more places using this encoding scheme.", "author": "bf8086", "createdAt": "2020-01-28T23:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NjQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5ODc4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369798789", "bodyText": "same here, might be easier to maintain to have separate encoder/decoder logic or class, rather than leaving the logic in different member methods.", "author": "apc999", "createdAt": "2020-01-22T20:57:30Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -106,22 +109,45 @@ public void delete(PageId pageId) throws PageNotFoundException {\n   @Override\n   public void close() {\n     mDb.close();\n-    try {\n-      FileUtils.deleteDirectory(new File(mRoot));\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to clean up rocksDB root directory.\");\n-    }\n   }\n \n   private byte[] getPageKey(PageId pageId) {\n-    ByteBuffer buf = ByteBuffer.allocate(16);\n+    ByteBuffer buf = ByteBuffer.allocate(KEY_LEN);", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTI0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369799241", "bodyText": "add test case in LocalPageStore?", "author": "apc999", "createdAt": "2020-01-22T20:58:28Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -111,17 +114,55 @@ private Path getFilePath(PageId pageId) {\n         Long.toString(pageId.getPageIndex()));\n   }\n \n-  @Override\n-  public void close() {\n+  /**\n+   * @param path path of a file\n+   * @return the corresponding page id, or null if the file name does not match the pattern\n+   */\n+  private PageId getPageId(Path path) {\n+    Path parent = Preconditions.checkNotNull(path.getParent());\n+    if (!Paths.get(mRoot).equals(parent.getParent())) {\n+      return null;\n+    }\n     try {\n-      FileUtils.deleteDirectory(new File(mRoot));\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to clean up local page store directory\", e);\n+      Path fileName = Preconditions.checkNotNull(path.getFileName());\n+      Path parentName = Preconditions.checkNotNull(parent.getFileName());\n+      long pageIndex = Long.parseLong(fileName.toString());\n+      long fileId = Long.parseLong(parentName.toString());\n+      return new PageId(fileId, pageIndex);\n+    } catch (NumberFormatException e) {\n+      return null;\n     }\n   }\n \n+  @Override\n+  public void close() {\n+    // no-op\n+  }\n+\n   @Override\n   public int size() {\n     return mSize.get();\n   }\n+\n+  @Override\n+  public Collection<PageId> load() throws IOException {", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMzkxNA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372123914", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-28T23:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTQxMg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369799412", "bodyText": "add test case in RocksPageStore?", "author": "apc999", "createdAt": "2020-01-22T20:58:52Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -106,22 +109,45 @@ public void delete(PageId pageId) throws PageNotFoundException {\n   @Override\n   public void close() {\n     mDb.close();\n-    try {\n-      FileUtils.deleteDirectory(new File(mRoot));\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to clean up rocksDB root directory.\");\n-    }\n   }\n \n   private byte[] getPageKey(PageId pageId) {\n-    ByteBuffer buf = ByteBuffer.allocate(16);\n+    ByteBuffer buf = ByteBuffer.allocate(KEY_LEN);\n     buf.putLong(pageId.getFileId());\n     buf.putLong(pageId.getPageIndex());\n     return buf.array();\n   }\n \n+  /**\n+   * @param key key of a record\n+   * @return the corresponding page id, or null if the key does not match the pattern\n+   */\n+  private PageId getPageId(byte[] key) {\n+    if (key.length != KEY_LEN) {\n+      return null;\n+    }\n+    ByteBuffer buf = ByteBuffer.wrap(key);\n+    long fileId = buf.getLong();\n+    long pageIndex = buf.getLong();\n+    return new PageId(fileId, pageIndex);\n+  }\n+\n   @Override\n   public int size() {\n     return mSize.get();\n   }\n+\n+  @Override\n+  public Collection<PageId> load() {", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMzkwMg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372123902", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-28T23:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTg3MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369799870", "bodyText": "why is this needed?", "author": "apc999", "createdAt": "2020-01-22T20:59:50Z", "path": "core/client/fs/src/test/java/alluxio/client/file/cache/LocalCacheManagerTest.java", "diffHunk": "@@ -67,7 +68,7 @@\n   public final ExpectedException mThrown = ExpectedException.none();\n \n   @Before\n-  public void before() {\n+  public void before() throws Exception {", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyMzg3Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372123876", "bodyText": "Removed.", "author": "bf8086", "createdAt": "2020-01-28T23:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5OTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjA0MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r369802040", "bodyText": "why we need to reload the cache conf from path? Can't we trust the argument passed in?", "author": "apc999", "createdAt": "2020-01-22T21:04:25Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -73,6 +94,104 @@ static PageStore create(AlluxioConfiguration conf) {\n     return create(options);\n   }\n \n+  /**\n+   * Checks if the data at the store location is compatible with the current configuration.\n+   *\n+   * @param conf the Alluxio configuration\n+   * @return true if the data is compatible with the configuration, false otherwise\n+   */\n+  static boolean isCompatible(AlluxioConfiguration conf) {\n+    String rootPath = conf.get(PropertyKey.USER_CLIENT_CACHE_DIR);\n+    Path confPath = Paths.get(rootPath, CONF_FILE);\n+    if (!Files.exists(confPath)) {\n+      return false;\n+    }\n+    Properties properties = ConfigurationUtils.loadPropertiesFromFile(confPath.toString());\n+    if (properties == null) {\n+      return false;\n+    }\n+    AlluxioProperties alluxioProperties = new AlluxioProperties();\n+    alluxioProperties.merge(properties, Source.DEFAULT);\n+    AlluxioConfiguration cacheConf = new InstancedConfiguration(alluxioProperties);", "originalCommit": "50959948f2e5b7577e5a7f1a6964ff5fdaac222f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExODYzMw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372118633", "bodyText": "Because configuration might changed between client restart and the data might not be compatible after the change. Here we just check the stored configuration and discard the data if the configuration is not compatible(e.g. page size changed, store type changed).", "author": "bf8086", "createdAt": "2020-01-28T23:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMjA0MA=="}], "type": "inlineReview"}, {"oid": "a7e4c219096d1557efcc0d3bde15ca90dd6e60a1", "url": "https://github.com/Alluxio/alluxio/commit/a7e4c219096d1557efcc0d3bde15ca90dd6e60a1", "message": "addressed comments", "committedDate": "2020-01-28T01:27:11Z", "type": "commit"}, {"oid": "b7e1f51da44e29e82d1a4962fba1f65103fed4e9", "url": "https://github.com/Alluxio/alluxio/commit/b7e1f51da44e29e82d1a4962fba1f65103fed4e9", "message": "fix checkstyles", "committedDate": "2020-01-28T19:44:53Z", "type": "commit"}, {"oid": "fc154bf5713c8319b18a2110b707544c4cec2df5", "url": "https://github.com/Alluxio/alluxio/commit/fc154bf5713c8319b18a2110b707544c4cec2df5", "message": "fix initialization", "committedDate": "2020-01-28T23:17:44Z", "type": "commit"}, {"oid": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "url": "https://github.com/Alluxio/alluxio/commit/9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "message": "address more comments", "committedDate": "2020-01-28T23:51:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NjkzMg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372176932", "bodyText": "nit \"pageSize the size of the page in bytes\" (is it?)", "author": "apc999", "createdAt": "2020-01-29T03:48:53Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/PageStoreOptions.java", "diffHunk": "@@ -48,4 +63,46 @@ public void setRootDir(String rootDir) {\n   public String getRootDir() {\n     return mRootDir;\n   }\n+\n+  /**\n+   * @return the size of the page\n+   */\n+  public long getPageSize() {\n+    return mPageSize;\n+  }\n+\n+  /**\n+   * @param pageSize the size of the page", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0MDc0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373140747", "bodyText": "Updated.", "author": "bf8086", "createdAt": "2020-01-30T19:13:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NjkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NzAzMw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372177033", "bodyText": "nit \"the size of the cache in bytes\" (is it?)", "author": "apc999", "createdAt": "2020-01-29T03:49:34Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/PageStoreOptions.java", "diffHunk": "@@ -48,4 +63,46 @@ public void setRootDir(String rootDir) {\n   public String getRootDir() {\n     return mRootDir;\n   }\n+\n+  /**\n+   * @return the size of the page\n+   */\n+  public long getPageSize() {\n+    return mPageSize;\n+  }\n+\n+  /**\n+   * @param pageSize the size of the page\n+   */\n+  public void setPageSize(long pageSize) {\n+    mPageSize = pageSize;\n+  }\n+\n+  /**\n+   * @return the size of the cache\n+   */\n+  public long getCacheSize() {\n+    return mCacheSize;\n+  }\n+\n+  /**\n+   * @param cacheSize the size of the cache\n+   */\n+  public void setCacheSize(long cacheSize) {", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMDU3MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372700570", "bodyText": "Updated.", "author": "bf8086", "createdAt": "2020-01-30T00:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NzAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3ODc1NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372178755", "bodyText": "it looks to me once the CacheManager.create failed (e.g., wrong path permission and etc), we will escalate the exception. But next time on openFile we will go through the same procedure again because sCacheManager is still null, without remembering previous failures. Maybe using memoize or memoizeWithExpiration?", "author": "apc999", "createdAt": "2020-01-29T04:00:21Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -604,11 +604,11 @@ private void initializeLocalWorker() throws IOException {\n   /**\n    * @return the client side cache manager\n    */\n-  public CacheManager getCacheManager() {\n+  public CacheManager getCacheManager() throws IOException {\n     return getCacheManager(this);\n   }\n \n-  private static CacheManager getCacheManager(FileSystemContext fsContext) {\n+  private static CacheManager getCacheManager(FileSystemContext fsContext) throws IOException {", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMTI1NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372701255", "bodyText": "Updated to return null if failed to initialize and not retry afterwards.", "author": "bf8086", "createdAt": "2020-01-30T00:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3ODc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3OTA4Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372179082", "bodyText": "why sampling logger? do we expect a lot of openFile?", "author": "apc999", "createdAt": "2020-01-29T04:02:20Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileSystem.java", "diffHunk": "@@ -34,9 +44,15 @@ public LocalCacheFileSystem(FileSystem fs, FileSystemContext fsContext) {\n   }\n \n   @Override\n-  public FileInStream openFile(AlluxioURI path, OpenFilePOptions options) {\n+  public FileInStream openFile(AlluxioURI path, OpenFilePOptions options)\n+      throws IOException, AlluxioException {\n     // TODO(calvin): We should add another API to reduce the cost of openFile\n-    return new LocalCacheFileInStream(path, options, mDelegatedFileSystem,\n-        mFsContext.getCacheManager());\n+    try {\n+      return new LocalCacheFileInStream(path, options, mDelegatedFileSystem,\n+          mFsContext.getCacheManager());\n+    } catch (IOException e) {\n+      SAMPLING_LOGGER.warn(\"Failed to create LocalCacheFileInStream {}\", e.getMessage());", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMTc5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372701797", "bodyText": "Yes.\nRemoved since we are now logging at FileSystemContext::getCacheManager on the first initialization.", "author": "bf8086", "createdAt": "2020-01-30T00:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3OTA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzEzOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372197139", "bodyText": "line 86 and 102 should go to a helper method in this way it is easier to maintain and change this logic in the future.", "author": "apc999", "createdAt": "2020-01-29T05:36:49Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -69,10 +81,35 @@ static PageStore create(AlluxioConfiguration conf) {\n         throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n             storeType.name()));\n     }\n-    options.setRootDir(conf.get(PropertyKey.USER_CLIENT_CACHE_DIR));\n+    String rootDir = conf.get(PropertyKey.USER_CLIENT_CACHE_DIR);\n+    initialize(rootDir, storeType);\n+    Path storePath = Paths.get(conf.get(PropertyKey.USER_CLIENT_CACHE_DIR), storeType.name());", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzUwNw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372197507", "bodyText": "it looks correct to me to throw IOE here when failed to create the storePath. However, shall we also throw IOE if we failed to clean the other possible dirs?", "author": "apc999", "createdAt": "2020-01-29T05:38:27Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -69,10 +81,35 @@ static PageStore create(AlluxioConfiguration conf) {\n         throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n             storeType.name()));\n     }\n-    options.setRootDir(conf.get(PropertyKey.USER_CLIENT_CACHE_DIR));\n+    String rootDir = conf.get(PropertyKey.USER_CLIENT_CACHE_DIR);\n+    initialize(rootDir, storeType);\n+    Path storePath = Paths.get(conf.get(PropertyKey.USER_CLIENT_CACHE_DIR), storeType.name());\n+    options.setRootDir(storePath.toString());\n+    options.setPageSize(conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE));\n+    options.setCacheSize(conf.getBytes(PropertyKey.USER_CLIENT_CACHE_SIZE));\n+    options.setAlluxioVersion(conf.get(PropertyKey.VERSION));\n     return create(options);\n   }\n \n+  /**\n+   * Initialize a page store at the configured location.\n+   * Data from different store type will be removed.\n+   *\n+   * @param rootPath root path of the page store\n+   * @param storeType the page store type\n+   */\n+  static void initialize(String rootPath, PageStoreType storeType) throws IOException {\n+    Path storePath = Paths.get(rootPath, storeType.name());\n+    Files.createDirectories(storePath);", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMjQ3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372702472", "bodyText": "It's probably preferable to allow page store to be created even some files are not removed. I am adding some logging to surface the error message.", "author": "bf8086", "createdAt": "2020-01-30T00:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODQ3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373288471", "bodyText": "ack", "author": "apc999", "createdAt": "2020-01-31T02:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NzUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5Nzk1NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372197955", "bodyText": "in general, we should avoid throw checked exceptions in a constructor --- this may leave unfinished instance creation with state hard to clean.", "author": "apc999", "createdAt": "2020-01-29T05:40:54Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -43,14 +49,35 @@\n \n   private final String mRoot;\n   private final AtomicInteger mSize = new AtomicInteger(0);\n+  private final long mPageSize;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n+   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) {\n+  public LocalPageStore(LocalPageStoreOptions options) throws IOException {", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTQ2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372199465", "bodyText": "how about using regexp to parse the path and extract info from the path? The code will be shorter and more efficient", "author": "apc999", "createdAt": "2020-01-29T05:47:58Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -107,21 +134,65 @@ public void delete(PageId pageId) throws IOException, PageNotFoundException {\n   }\n \n   private Path getFilePath(PageId pageId) {\n-    return Paths.get(mRoot, Long.toString(pageId.getFileId()),\n+    return Paths.get(mRoot, Long.toString(mPageSize), Long.toString(pageId.getFileId()),\n         Long.toString(pageId.getPageIndex()));\n   }\n \n-  @Override\n-  public void close() {\n+  /**\n+   * @param path path of a file\n+   * @return the corresponding page id, or null if the file name does not match the pattern\n+   */\n+  @Nullable\n+  private PageId getPageId(Path path) {\n+    Path parent = path.getParent();", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMjYwNA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372702604", "bodyText": "Good idea! Done.", "author": "bf8086", "createdAt": "2020-01-30T00:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMDM4Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372200383", "bodyText": "How about putting this part in the factory method.\ntypically we should keep constructor easy and clean", "author": "apc999", "createdAt": "2020-01-29T05:52:08Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -43,14 +49,35 @@\n \n   private final String mRoot;\n   private final AtomicInteger mSize = new AtomicInteger(0);\n+  private final long mPageSize;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n+   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) {\n+  public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n     mRoot = options.getRootDir();\n+    mPageSize = options.getPageSize();\n+    Path rootDir = Paths.get(mRoot);\n+    try {\n+      boolean invalidPage = Files.exists(rootDir) && Files.walk(rootDir)\n+          .filter(Files::isRegularFile)\n+          .anyMatch(path -> {\n+            if (getPageId(path) == null) {\n+              return true;\n+            }\n+            mSize.incrementAndGet();\n+            return false;\n+          });\n+      if (invalidPage || (long) mSize.get() * mPageSize > options.getCacheSize()) {\n+        FileUtils.cleanDirectory(new File(mRoot));\n+        mSize.set(0);\n+      }\n+    } catch (IOException e) {\n+      throw new IOException(String.format(\"can't initialize page store at %s\", mRoot), e);\n+    }", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMDkzNw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372200937", "bodyText": "same comment here. we should avoid throwing exception for constructors", "author": "apc999", "createdAt": "2020-01-29T05:54:56Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -48,20 +57,43 @@\n    * Creates a new instance of {@link PageStore} backed by RocksDB.\n    *\n    * @param options options for the rocks page store\n+   * @throws IOException when fails to create a {@link RocksPageStore}\n    */\n-  public RocksPageStore(RocksPageStoreOptions options) {\n+  public RocksPageStore(RocksPageStoreOptions options) throws IOException {", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMjI3MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372202270", "bodyText": "nits:\n\nsince this helper method requires no instance state, possibly turned into a static method. so as the next method.\nnaming: getKeyFromPageId and getPageIdFromKey to be more explicit on the function? Leaving this up to you.", "author": "apc999", "createdAt": "2020-01-29T06:01:40Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -106,22 +138,80 @@ public void delete(PageId pageId) throws PageNotFoundException {\n   @Override\n   public void close() {\n     mDb.close();\n-    try {\n-      FileUtils.deleteDirectory(new File(mRoot));\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to clean up rocksDB root directory.\");\n-    }\n   }\n \n   private byte[] getPageKey(PageId pageId) {", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMjY4MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372702680", "bodyText": "Renamed.", "author": "bf8086", "createdAt": "2020-01-30T00:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMjI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMzYwOA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372203608", "bodyText": "still mark nullable", "author": "apc999", "createdAt": "2020-01-29T06:08:27Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -106,22 +138,80 @@ public void delete(PageId pageId) throws PageNotFoundException {\n   @Override\n   public void close() {\n     mDb.close();\n-    try {\n-      FileUtils.deleteDirectory(new File(mRoot));\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to clean up rocksDB root directory.\");\n-    }\n   }\n \n   private byte[] getPageKey(PageId pageId) {\n-    ByteBuffer buf = ByteBuffer.allocate(16);\n+    ByteBuffer buf = ByteBuffer.allocate(KEY_LEN);\n     buf.putLong(pageId.getFileId());\n     buf.putLong(pageId.getPageIndex());\n     return buf.array();\n   }\n \n+  /**\n+   * @param key key of a record\n+   * @return the corresponding page id, or null if the key does not match the pattern\n+   */\n+  @Nullable\n+  private PageId getPageId(byte[] key) {\n+    if (key.length != KEY_LEN) {\n+      return null;\n+    }\n+    ByteBuffer buf = ByteBuffer.wrap(key);\n+    long fileId = buf.getLong();\n+    long pageIndex = buf.getLong();\n+    return new PageId(fileId, pageIndex);\n+  }\n+\n   @Override\n   public int size() {\n     return mSize.get();\n   }\n+\n+  @Override\n+  public Collection<PageId> getPages() {\n+    try (RocksIterator iter = mDb.newIterator()) {\n+      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+    }\n+  }\n+\n+  private class PageIterator implements Iterator<PageId>, AutoCloseable {\n+    private final RocksIterator mIter;\n+    private PageId mValue;\n+\n+    PageIterator(RocksIterator iter) {\n+      mIter = iter;\n+      mIter.seekToFirst();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      return ensureValue() != null;\n+    }\n+\n+    @Override\n+    public PageId next() {\n+      PageId value = ensureValue();\n+      mIter.next();\n+      mValue = null;\n+      return value;\n+    }\n+\n+    private PageId ensureValue() {", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMDY3MA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372700670", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-30T00:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMzYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNjMzMA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372206330", "bodyText": "all page values are the same, can we use different page content here?", "author": "apc999", "createdAt": "2020-01-29T06:20:16Z", "path": "core/client/fs/src/test/java/alluxio/client/file/cache/store/PageStoreTest.java", "diffHunk": "@@ -101,6 +112,25 @@ public void getOffsetOverflow() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void getPages() throws Exception {\n+    mOptions.setRootDir(mTemp.getRoot().getAbsolutePath());\n+    int len = 32;\n+    int count = 16;\n+    byte[] data = BufferUtils.getIncreasingByteArray(len);\n+    Set<PageId> pages = new HashSet<>(count);\n+    try (PageStore store = PageStore.create(mOptions)) {\n+      for (int i = 0; i < count; i++) {\n+        PageId id = new PageId(0, i);\n+        store.put(id, data);", "originalCommit": "9558f49d680082fff54fec8db7b2bf6da3b1c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwMDkyNw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r372700927", "bodyText": "This test only focuses on verifying the page ids. The content is verified in other tests.", "author": "bf8086", "createdAt": "2020-01-30T00:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNjMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTE0NA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373285144", "bodyText": "make sense", "author": "apc999", "createdAt": "2020-01-31T01:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNjMzMA=="}], "type": "inlineReview"}, {"oid": "b79fa3cd798dccb741b6edbc303894b544772c84", "url": "https://github.com/Alluxio/alluxio/commit/b79fa3cd798dccb741b6edbc303894b544772c84", "message": "address some comments", "committedDate": "2020-01-30T00:11:12Z", "type": "commit"}, {"oid": "533e6168a5fa4c951531f5f934a57182dbbd4f4a", "url": "https://github.com/Alluxio/alluxio/commit/533e6168a5fa4c951531f5f934a57182dbbd4f4a", "message": "fix javadoc", "committedDate": "2020-01-30T00:21:42Z", "type": "commit"}, {"oid": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "url": "https://github.com/Alluxio/alluxio/commit/5ef202e90e0f74d4ffba00e12bc90df206384af8", "message": "extract store path getter", "committedDate": "2020-01-31T00:21:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4MzM5OA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373283398", "bodyText": "nit: e.toString() see code convention here: https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#warn-log-level", "author": "apc999", "createdAt": "2020-01-31T01:47:24Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -602,22 +603,29 @@ private void initializeLocalWorker() throws IOException {\n   }\n \n   /**\n-   * @return the client side cache manager\n+   * @return the client side cache manager, or null if failed to create the cache manager\n    */\n+  @Nullable\n   public CacheManager getCacheManager() {\n     return getCacheManager(this);\n   }\n \n+  @Nullable\n   private static CacheManager getCacheManager(FileSystemContext fsContext) {\n     // TODO(feng): support multiple cache managers\n     if (sCacheManager == null) {\n       synchronized (FileSystemContext.class) {\n         if (sCacheManager == null) {\n-          sCacheManager = CacheManager.create(fsContext);\n+          try {\n+            sCacheManager = Optional.of(CacheManager.create(fsContext));\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to create CacheManager: {}\", e.getMessage());", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4Njg3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374386872", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-02-03T22:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4MzM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjMyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373286329", "bodyText": "Pattern.quote(rootDir.toString()) to escape the root path?", "author": "apc999", "createdAt": "2020-01-31T02:02:03Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -43,14 +51,38 @@\n \n   private final String mRoot;\n   private final AtomicInteger mSize = new AtomicInteger(0);\n+  private final long mPageSize;\n+  private final Pattern mPagePattern;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n+   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) {\n+  public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n     mRoot = options.getRootDir();\n+    mPageSize = options.getPageSize();\n+    Path rootDir = Paths.get(mRoot);\n+    mPagePattern = Pattern.compile(\n+        String.format(\"%s/%d/(\\\\d+)/(\\\\d+)\", rootDir.toString(), mPageSize));", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzAyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374387021", "bodyText": "Good catch! Updated.", "author": "bf8086", "createdAt": "2020-02-03T22:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjUwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373286509", "bodyText": "LOG.warn this page?", "author": "apc999", "createdAt": "2020-01-31T02:02:55Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -43,14 +51,38 @@\n \n   private final String mRoot;\n   private final AtomicInteger mSize = new AtomicInteger(0);\n+  private final long mPageSize;\n+  private final Pattern mPagePattern;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n+   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) {\n+  public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n     mRoot = options.getRootDir();\n+    mPageSize = options.getPageSize();\n+    Path rootDir = Paths.get(mRoot);\n+    mPagePattern = Pattern.compile(\n+        String.format(\"%s/%d/(\\\\d+)/(\\\\d+)\", rootDir.toString(), mPageSize));\n+    try {\n+      boolean invalidPage = Files.exists(rootDir) && Files.walk(rootDir)\n+          .filter(Files::isRegularFile)\n+          .anyMatch(path -> {\n+            if (getPageId(path) == null) {\n+              return true;\n+            }\n+            mSize.incrementAndGet();\n+            return false;\n+          });\n+      if (invalidPage || (long) mSize.get() * mPageSize > options.getCacheSize()) {\n+        FileUtils.cleanDirectory(new File(mRoot));", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzEyNA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374387124", "bodyText": "Added.", "author": "bf8086", "createdAt": "2020-02-03T22:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjcxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373286715", "bodyText": "LocalPageStore -> PageStore ?", "author": "apc999", "createdAt": "2020-01-31T02:04:00Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -20,23 +20,34 @@\n import alluxio.conf.AlluxioConfiguration;\n import alluxio.conf.PropertyKey;\n import alluxio.exception.PageNotFoundException;\n+import alluxio.util.io.FileUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.nio.channels.ReadableByteChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collection;\n+import java.util.stream.Stream;\n \n /**\n  * A simple abstraction on the storage to put, get and delete pages. The implementation of this\n  * class does not need to provide thread-safety.\n  */\n public interface PageStore extends AutoCloseable {\n+  Logger LOG = LoggerFactory.getLogger(LocalPageStore.class);", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzE5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374387192", "bodyText": "Fixed.", "author": "bf8086", "createdAt": "2020-02-03T22:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODIyOA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373288228", "bodyText": "We should log warn the fallback. However, if you are concerned that the log is too frequent, we can check if getCacheManager() equals null at the factory method alluxio.client.file.FileSystem.Factory#create; in case yes, fallback to returning a normal filesystem instance even USER_LOCAL_CACHE_ENABLED is true and LOG.warn the fallback?\nThen in here, we can simply Precondition.checkNotNull(cacheManager).", "author": "apc999", "createdAt": "2020-01-31T02:12:01Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileSystem.java", "diffHunk": "@@ -34,9 +37,14 @@ public LocalCacheFileSystem(FileSystem fs, FileSystemContext fsContext) {\n   }\n \n   @Override\n-  public FileInStream openFile(AlluxioURI path, OpenFilePOptions options) {\n+  public FileInStream openFile(AlluxioURI path, OpenFilePOptions options)\n+      throws IOException, AlluxioException {\n     // TODO(calvin): We should add another API to reduce the cost of openFile\n+    CacheManager cacheManager = mFsContext.getCacheManager();\n+    if (cacheManager == null) {", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzY4Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374387683", "bodyText": "In FileSystemContext::getCacheManager, we already log a warning when the cache manager fails to initialize. Would that be sufficient?", "author": "bf8086", "createdAt": "2020-02-03T22:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODU3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r373288572", "bodyText": "same case for https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#warn-log-level", "author": "apc999", "createdAt": "2020-01-31T02:13:50Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -69,10 +80,50 @@ static PageStore create(AlluxioConfiguration conf) {\n         throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n             storeType.name()));\n     }\n-    options.setRootDir(conf.get(PropertyKey.USER_CLIENT_CACHE_DIR));\n+    String rootDir = conf.get(PropertyKey.USER_CLIENT_CACHE_DIR);\n+    initialize(rootDir, storeType);\n+    Path storePath = getStorePath(storeType, rootDir);\n+    options.setRootDir(storePath.toString());\n+    options.setPageSize(conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE));\n+    options.setCacheSize(conf.getBytes(PropertyKey.USER_CLIENT_CACHE_SIZE));\n+    options.setAlluxioVersion(conf.get(PropertyKey.VERSION));\n     return create(options);\n   }\n \n+  /**\n+   * Gets store path given root directory and store type.\n+   *\n+   * @param storeType the type of the page store\n+   * @param rootDir the root directory path\n+   * @return the store directory path\n+   */\n+  static Path getStorePath(PageStoreType storeType, String rootDir) {\n+    return Paths.get(rootDir, storeType.name());\n+  }\n+\n+  /**\n+   * Initialize a page store at the configured location.\n+   * Data from different store type will be removed.\n+   *\n+   * @param rootPath root path of the page store\n+   * @param storeType the page store type\n+   */\n+  static void initialize(String rootPath, PageStoreType storeType) throws IOException {\n+    Path storePath = getStorePath(storeType, rootPath);\n+    Files.createDirectories(storePath);\n+    LOG.info(\"Clean cache directory {}\", rootPath);\n+    try (Stream<Path> stream = Files.list(Paths.get(rootPath))) {\n+      stream.filter(path -> !storePath.equals(path))\n+          .forEach(path -> {\n+            try {\n+              FileUtils.deletePathRecursively(path.toString());\n+            } catch (IOException e) {\n+              LOG.warn(\"failed to delete {} in cache directory: {}\", path, e.getMessage());", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzI5NA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374387294", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-02-03T22:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4ODU3Mg=="}], "type": "inlineReview"}, {"oid": "057c5e194684c640b3eed6e1c4bc0157f1fe5795", "url": "https://github.com/Alluxio/alluxio/commit/057c5e194684c640b3eed6e1c4bc0157f1fe5795", "message": "address comments", "committedDate": "2020-02-03T22:48:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MDIzNg==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374360236", "bodyText": "I don't see the benefit of using optional here since we are defaulting to null anyway?", "author": "calvinjia", "createdAt": "2020-02-03T21:48:46Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -92,7 +93,7 @@\n   /**\n    * The local cache manager for the file system.\n    */\n-  private static volatile CacheManager sCacheManager;\n+  private static volatile Optional<CacheManager> sCacheManager;", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MzI2NA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374393264", "bodyText": "Adding Optional here is to represent three different states:\n\nnull: cache manager is not initialized\nOptional.empty(): cache manager failed to initialize.\nOptional.of(instance)cache manager initialized successfully.\n\nHaving the extra state allow us to know that the cache manager initialization is attempted and avoid retrying if it already failed once.", "author": "bf8086", "createdAt": "2020-02-03T23:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MDIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MTExMA==", "url": "https://github.com/Alluxio/alluxio/pull/10776#discussion_r374361110", "bodyText": "It is strange that the interface's create method instantiates a specific implementation?", "author": "calvinjia", "createdAt": "2020-02-03T21:50:36Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/CacheManager.java", "diffHunk": "@@ -22,13 +22,13 @@\n /**\n  * Interface for managing cached pages.\n  */\n-public interface CacheManager {\n+public interface CacheManager extends AutoCloseable  {\n   /**\n    * @param fsContext filesystem context\n    * @return an instance of {@link CacheManager}\n    */\n-  static CacheManager create(FileSystemContext fsContext) {\n-    return new LocalCacheManager(fsContext);\n+  static CacheManager create(FileSystemContext fsContext) throws IOException {\n+    return LocalCacheManager.create(fsContext);", "originalCommit": "5ef202e90e0f74d4ffba00e12bc90df206384af8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a1f378b8c647deef5fcb879a2572108b97697eb5", "url": "https://github.com/Alluxio/alluxio/commit/a1f378b8c647deef5fcb879a2572108b97697eb5", "message": "Add a comment", "committedDate": "2020-02-03T23:20:32Z", "type": "commit"}, {"oid": "f1bb7024a0387bfb78226408912b0e84c24003e1", "url": "https://github.com/Alluxio/alluxio/commit/f1bb7024a0387bfb78226408912b0e84c24003e1", "message": "Merge branch 'lite' into lite-recovery", "committedDate": "2020-02-04T23:39:55Z", "type": "commit"}, {"oid": "c87e82666410b67113236ef30b9fecc79f1828fe", "url": "https://github.com/Alluxio/alluxio/commit/c87e82666410b67113236ef30b9fecc79f1828fe", "message": "fix tests", "committedDate": "2020-02-05T00:00:56Z", "type": "commit"}]}