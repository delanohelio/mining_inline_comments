{"pr_number": 11001, "pr_title": "Refactor CommonUtils.waitFor to use value supplier", "pr_createdAt": "2020-02-24T21:03:41Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11001", "timeline": [{"oid": "1c136e1d6eb82355796369e716d67d8f00300a43", "url": "https://github.com/Alluxio/alluxio/commit/1c136e1d6eb82355796369e716d67d8f00300a43", "message": "Refactor CommonUtils.waitFor and use new api capabilities on couple usages", "committedDate": "2020-02-24T21:02:01Z", "type": "commit"}, {"oid": "066e79201ed5b12dab1c88988ad3827fa7a35b4b", "url": "https://github.com/Alluxio/alluxio/commit/066e79201ed5b12dab1c88988ad3827fa7a35b4b", "message": "refactor JobGrpcClientUtils.waitFor", "committedDate": "2020-02-24T21:09:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNjEwMA==", "url": "https://github.com/Alluxio/alluxio/pull/11001#discussion_r383516100", "bodyText": "Being able to ObjectUtils.toString the previous value is the main benefit.", "author": "bradyoo", "createdAt": "2020-02-24T21:10:46Z", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -321,32 +323,53 @@ public static void waitFor(String description, Supplier<Boolean> condition)\n    */\n   public static void waitFor(String description, Supplier<Boolean> condition,\n       WaitForOptions options) throws InterruptedException, TimeoutException {\n-    waitForResult(description, () -> condition.get() ? true : null, options);\n+    waitForResult(description, condition, (b) -> b, options);\n   }\n \n   /**\n-   * Waits for an operation to return a non-null value with a specified timeout.\n+   * Waits for the object to meet a certain condition.\n    *\n-   * @param description the description of this operation\n-   * @param operation the operation\n+   * @param description a description of what causes condition to be met.\n+   * @param objectSupplier the object to check the condition for\n+   * @param condition the condition to wait on\n+   * @param <T> type of the object\n+   * @return the object\n+   * @throws TimeoutException if the function times out while waiting for the condition to be true\n+   * @throws InterruptedException if the thread was interrupted\n+   */\n+  public static <T> T waitForResult(String description, Supplier<T> objectSupplier,\n+                                    Function<T, Boolean> condition)\n+      throws TimeoutException, InterruptedException {\n+    return waitForResult(description, objectSupplier, condition, WaitForOptions.defaults());\n+  }\n+\n+  /**\n+   * Waits for the object to meet a certain condition.\n+   *\n+   * @param description a description of what causes condition to be met.\n+   * @param objectSupplier the object to check the condition for\n+   * @param condition the condition to wait on\n    * @param options the options to use\n-   * @param <T> the type of the return value\n-   * @throws TimeoutException if the function times out while waiting to get a non-null value\n-   * @return the first non-null value generated by the operation\n+   * @param <T> type of the object\n+   * @return the object\n+   * @throws TimeoutException if the function times out while waiting for the condition to be true\n+   * @throws InterruptedException if the thread was interrupted\n    */\n-  public static <T> T waitForResult(String description, Supplier<T> operation,\n-      WaitForOptions options) throws InterruptedException, TimeoutException {\n-    T t;\n+  public static <T> T waitForResult(String description, Supplier<T> objectSupplier,\n+                                    Function<T, Boolean> condition, WaitForOptions options)\n+      throws TimeoutException, InterruptedException {\n+    T value;\n     long start = System.currentTimeMillis();\n     int interval = options.getInterval();\n     int timeout = options.getTimeoutMs();\n-    while ((t = operation.get()) == null) {\n+    while (condition.apply(value = objectSupplier.get()) != true) {\n       if (timeout != WaitForOptions.NEVER && System.currentTimeMillis() - start > timeout) {\n-        throw new TimeoutException(\"Timed out waiting for \" + description + \" options: \" + options);\n+        throw new TimeoutException(\"Timed out waiting for \" + description + \" options: \" + options\n+            + \" last value: \" + ObjectUtils.toString(value));", "originalCommit": "066e79201ed5b12dab1c88988ad3827fa7a35b4b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f20595067fbd3391a26f9fbd515320a29006cf35", "url": "https://github.com/Alluxio/alluxio/commit/f20595067fbd3391a26f9fbd515320a29006cf35", "message": "checkstyle", "committedDate": "2020-02-24T21:35:44Z", "type": "commit"}, {"oid": "d0caea0226c8745db1a8f0c36f3a6c732fd02954", "url": "https://github.com/Alluxio/alluxio/commit/d0caea0226c8745db1a8f0c36f3a6c732fd02954", "message": "checkstyle", "committedDate": "2020-02-24T21:36:51Z", "type": "commit"}, {"oid": "15a03b38f04fd6aa83a2755d07221a4cf8d9cc6e", "url": "https://github.com/Alluxio/alluxio/commit/15a03b38f04fd6aa83a2755d07221a4cf8d9cc6e", "message": "fix build error", "committedDate": "2020-02-24T21:59:42Z", "type": "commit"}]}