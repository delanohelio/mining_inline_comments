{"pr_number": 2258, "pr_title": "Fixes #2255: leaked transactions in ConsistentKeyLocker", "pr_createdAt": "2020-11-26T22:01:54Z", "pr_url": "https://github.com/JanusGraph/janusgraph/pull/2258", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMwMDk0MA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2258#discussion_r534300940", "bodyText": "Why do we adding new Throwable() to the log? I guess, it isn't useful because it doesn't have any information. Instead, I would log toString() of the transaction, which may have more useful information. I.e. something like:\nif (log.isDebugEnabled()) {\n    log.debug(\"Transaction is still open. Rolling back the transaction: \"+tx.toString());\n}", "author": "porunov", "createdAt": "2020-12-02T16:22:57Z", "path": "janusgraph-core/src/main/java/org/janusgraph/diskstorage/locking/consistentkey/ConsistentKeyLocker.java", "diffHunk": "@@ -382,13 +382,30 @@ private WriteResult tryWriteLockOnce(StaticBuffer key, StaticBuffer del, StoreTr\n         final Timer writeTimer = times.getTimer().start();\n         StaticBuffer newLockCol = serializer.toLockCol(writeTimer.getStartTime(), rid, times);\n         Entry newLockEntry = StaticArrayEntry.of(newLockCol, zeroBuf);\n+        StoreTransaction newTx = null;\n         try {\n-            final StoreTransaction newTx = overrideTimestamp(txh, writeTimer.getStartTime());\n+            newTx = overrideTimestamp(txh, writeTimer.getStartTime());\n+\n             store.mutate(key, Collections.singletonList(newLockEntry),\n                 null == del ? KeyColumnValueStore.NO_DELETIONS : Collections.singletonList(del), newTx);\n+\n+            newTx.commit();\n+            newTx = null;\n         } catch (BackendException e) {\n             log.debug(\"Lock write attempt failed with exception\", e);\n             t = e;\n+        } finally {\n+            if (newTx != null) {\n+                try {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Transaction is still open! Rolling back\", new Throwable());", "originalCommit": "7978b1268356b333d380dc6ba5c226e6557d712b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2NTAyMw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2258#discussion_r534565023", "bodyText": "Throwable in this debug log statement will print the stack, which could be useful in troubleshooting leaked transactions. Let me know if this should be removed.\nI agree on including tx.toString() in the log. Will update shortly for this.", "author": "mneethiraj", "createdAt": "2020-12-03T00:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMwMDk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU3NTYxMg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2258#discussion_r534575612", "bodyText": "Good point. Agree about stack trace. It might be useful", "author": "porunov", "createdAt": "2020-12-03T00:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMwMDk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMTk4NQ==", "url": "https://github.com/JanusGraph/janusgraph/pull/2258#discussion_r534311985", "bodyText": "In this situation the transaction will leak. I think we should log here error with the explanation that the above transaction is leaked. Of course it is better to somehow track it and let the logic somehow handle the transaction but I guess it makes the implementation slightly harder, so I'm totally fine to just log an error here and add a TODO message to actually resolve it later.\nSomething like:\n//TODO: We need to handle the transaction newTx which potentially may leak into memory\nlog.error(\"Failed to rollback the transaction \"+newTx.toString()+\". The transaction now may be leaked into memory.\", e);", "author": "porunov", "createdAt": "2020-12-02T16:36:51Z", "path": "janusgraph-core/src/main/java/org/janusgraph/diskstorage/locking/consistentkey/ConsistentKeyLocker.java", "diffHunk": "@@ -382,13 +382,30 @@ private WriteResult tryWriteLockOnce(StaticBuffer key, StaticBuffer del, StoreTr\n         final Timer writeTimer = times.getTimer().start();\n         StaticBuffer newLockCol = serializer.toLockCol(writeTimer.getStartTime(), rid, times);\n         Entry newLockEntry = StaticArrayEntry.of(newLockCol, zeroBuf);\n+        StoreTransaction newTx = null;\n         try {\n-            final StoreTransaction newTx = overrideTimestamp(txh, writeTimer.getStartTime());\n+            newTx = overrideTimestamp(txh, writeTimer.getStartTime());\n+\n             store.mutate(key, Collections.singletonList(newLockEntry),\n                 null == del ? KeyColumnValueStore.NO_DELETIONS : Collections.singletonList(del), newTx);\n+\n+            newTx.commit();\n+            newTx = null;\n         } catch (BackendException e) {\n             log.debug(\"Lock write attempt failed with exception\", e);\n             t = e;\n+        } finally {\n+            if (newTx != null) {\n+                try {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Transaction is still open! Rolling back\", new Throwable());\n+                    }\n+\n+                    newTx.rollback();\n+                } catch (Throwable excp) {\n+                    log.debug(\"Transaction rollback failed\", excp);", "originalCommit": "7978b1268356b333d380dc6ba5c226e6557d712b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2NTQ1OA==", "url": "https://github.com/JanusGraph/janusgraph/pull/2258#discussion_r534565458", "bodyText": "I agree. Will update the patch shortly. Thanks!", "author": "mneethiraj", "createdAt": "2020-12-03T00:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMTk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxOTY1Mg==", "url": "https://github.com/JanusGraph/janusgraph/pull/2258#discussion_r534319652", "bodyText": "We have multiple same finally blocks. I propose to move the same code into a separate method. I.e.:\nprivate void rollbackIfNotNull(BaseTransaction tx){\n    if (tx != null) {\n        try {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Transaction is still open. Rolling back the transaction: \"+tx.toString());\n            }\n            tx.rollback();\n        } catch (Throwable e) {\n            //TODO: We need to handle the transaction newTx which potentially may leak into memory\n            log.error(\"Failed to rollback the transaction \"+tx.toString()+\". The transaction now may be leaked into memory.\", e);\n        }\n    }\n}\n\nAfter that we can change all places where you added finally like the next:\nfinally {\n  rollbackIfNotNull(newTx);\n}", "author": "porunov", "createdAt": "2020-12-02T16:46:59Z", "path": "janusgraph-core/src/main/java/org/janusgraph/diskstorage/locking/consistentkey/ConsistentKeyLocker.java", "diffHunk": "@@ -398,11 +415,28 @@ private WriteResult tryWriteLockOnce(StaticBuffer key, StaticBuffer del, StoreTr\n     private WriteResult tryDeleteLockOnce(StaticBuffer key, StaticBuffer col, StoreTransaction txh) {\n         Throwable t = null;\n         final Timer delTimer = times.getTimer().start();\n+        StoreTransaction newTx = null;\n         try {\n-            final StoreTransaction newTx = overrideTimestamp(txh, delTimer.getStartTime());\n+            newTx = overrideTimestamp(txh, delTimer.getStartTime());\n+\n             store.mutate(key, ImmutableList.of(), Collections.singletonList(col), newTx);\n+\n+            newTx.commit();\n+            newTx = null;\n         } catch (BackendException e) {\n             t = e;\n+        } finally {\n+            if (newTx != null) {\n+                try {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Transaction is still open! Rolling back\", new Throwable());\n+                    }\n+\n+                    newTx.rollback();\n+                } catch (Throwable excp) {\n+                    log.debug(\"Transaction rollback failed\", excp);\n+                }\n+            }", "originalCommit": "7978b1268356b333d380dc6ba5c226e6557d712b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2NTgzMw==", "url": "https://github.com/JanusGraph/janusgraph/pull/2258#discussion_r534565833", "bodyText": "I agree. Will update the patch shortly. Thanks!", "author": "mneethiraj", "createdAt": "2020-12-03T00:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxOTY1Mg=="}], "type": "inlineReview"}, {"oid": "d63ad297a4d4ad979b9654d0dddd7cecb1a1102d", "url": "https://github.com/JanusGraph/janusgraph/commit/d63ad297a4d4ad979b9654d0dddd7cecb1a1102d", "message": "Fixes #2255: leaked transactions in ConsistentKeyLocker - addressed review comments\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>", "committedDate": "2020-12-03T00:17:47Z", "type": "forcePushed"}, {"oid": "f868e905e7bb738a621d30c912fa3f0a2ac71ea4", "url": "https://github.com/JanusGraph/janusgraph/commit/f868e905e7bb738a621d30c912fa3f0a2ac71ea4", "message": "Fixes #2255: leaked transactions in ConsistentKeyLocker\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>", "committedDate": "2020-12-03T01:14:50Z", "type": "commit"}, {"oid": "f868e905e7bb738a621d30c912fa3f0a2ac71ea4", "url": "https://github.com/JanusGraph/janusgraph/commit/f868e905e7bb738a621d30c912fa3f0a2ac71ea4", "message": "Fixes #2255: leaked transactions in ConsistentKeyLocker\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>", "committedDate": "2020-12-03T01:14:50Z", "type": "forcePushed"}]}