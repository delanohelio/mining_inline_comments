{"pr_number": 4496, "pr_title": "RocksDB configuration", "pr_createdAt": "2020-01-09T12:01:48Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4496", "timeline": [{"oid": "530a32b6aaf67fb8b98c1bbca8468620d825d8b8", "url": "https://github.com/palantir/atlasdb/commit/530a32b6aaf67fb8b98c1bbca8468620d825d8b8", "message": "RocksDB configuration.", "committedDate": "2020-01-09T09:59:06Z", "type": "commit"}, {"oid": "32c142dde929a265bdda73cab9e2cdc3dd0f0ecf", "url": "https://github.com/palantir/atlasdb/commit/32c142dde929a265bdda73cab9e2cdc3dd0f0ecf", "message": "Added tests for deserialization.", "committedDate": "2020-01-09T10:32:20Z", "type": "commit"}, {"oid": "f307d809fc8d8bed8ac0d1977265fa066111feb4", "url": "https://github.com/palantir/atlasdb/commit/f307d809fc8d8bed8ac0d1977265fa066111feb4", "message": "Sanitization tests.", "committedDate": "2020-01-09T11:00:06Z", "type": "commit"}, {"oid": "aea05709335d602867856e5ff650a41a62ea0e8d", "url": "https://github.com/palantir/atlasdb/commit/aea05709335d602867856e5ff650a41a62ea0e8d", "message": "Test for creation of database.", "committedDate": "2020-01-09T11:11:26Z", "type": "commit"}, {"oid": "85c7963f0e6c70e6b1ae7a037aa48fe83602e914", "url": "https://github.com/palantir/atlasdb/commit/85c7963f0e6c70e6b1ae7a037aa48fe83602e914", "message": "Add missing cache nuke metric.", "committedDate": "2020-01-09T11:13:54Z", "type": "commit"}, {"oid": "805be2a5c2fdf31aeb74b45a689906433d650f08", "url": "https://github.com/palantir/atlasdb/commit/805be2a5c2fdf31aeb74b45a689906433d650f08", "message": "Fixed style.", "committedDate": "2020-01-09T11:33:56Z", "type": "commit"}, {"oid": "4a2321c637589877ea3210d9a5abea4bd046b12a", "url": "https://github.com/palantir/atlasdb/commit/4a2321c637589877ea3210d9a5abea4bd046b12a", "message": "Remove sanitization on normal AtlasDB path.", "committedDate": "2020-01-09T14:50:37Z", "type": "commit"}, {"oid": "b6fad82eda3e8c001c8e0a50eb9733773c76e94a", "url": "https://github.com/palantir/atlasdb/commit/b6fad82eda3e8c001c8e0a50eb9733773c76e94a", "message": "Configurable factories.", "committedDate": "2020-01-09T15:30:36Z", "type": "commit"}, {"oid": "862367d6dd17a9ca398a8e3eca7718e5d9877685", "url": "https://github.com/palantir/atlasdb/commit/862367d6dd17a9ca398a8e3eca7718e5d9877685", "message": "Helper construction method.", "committedDate": "2020-01-09T15:38:10Z", "type": "commit"}, {"oid": "b8e6f554f22fdf95055d80f624f4546185add34b", "url": "https://github.com/palantir/atlasdb/commit/b8e6f554f22fdf95055d80f624f4546185add34b", "message": "Remove wrong imports.", "committedDate": "2020-01-09T15:56:43Z", "type": "commit"}, {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "url": "https://github.com/palantir/atlasdb/commit/1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "message": "Added sanitization.", "committedDate": "2020-01-09T17:18:35Z", "type": "commit"}, {"oid": "b458bf74b80da9d01100b8cdf3645a419d8f6040", "url": "https://github.com/palantir/atlasdb/commit/b458bf74b80da9d01100b8cdf3645a419d8f6040", "message": "Added more test", "committedDate": "2020-01-09T17:37:48Z", "type": "commit"}, {"oid": "fc59269d6b43f05fa7c59a1f07b7b01bcdf71f4c", "url": "https://github.com/palantir/atlasdb/commit/fc59269d6b43f05fa7c59a1f07b7b01bcdf71f4c", "message": "Fixed paths.", "committedDate": "2020-01-09T17:41:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2Nzk5Nw==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364867997", "bodyText": "This is clever. Maybe a comment as to why the reverse comparator matters would be nice?", "author": "jeremyk-91", "createdAt": "2020-01-09T17:28:09Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentTimestampStore.java", "diffHunk": "@@ -136,8 +144,12 @@ private void checkNamespaceExists(StoreNamespace storeNamespace) {\n     }\n \n     @Override\n-    public void close() {\n+    public void close() throws IOException {\n         rocksDB.close();\n+\n+        try (Stream<Path> stream = Files.walk(databaseFolder.toPath())) {\n+            stream.sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);", "originalCommit": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0MzU3OA==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r365143578", "bodyText": "Added comment explaining why the reverse lexicographical order is needed.", "author": "OStevan", "createdAt": "2020-01-10T09:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2Nzk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODU1Ng==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364868556", "bodyText": "nit: I'd suggest including a SafeArg indicating what the value of storagePath is", "author": "jeremyk-91", "createdAt": "2020-01-09T17:29:20Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/config/PersistentStorageConfig.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import org.immutables.value.Value;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(\n+                value = ImmutableRocksDbPersistentStorageConfig.class,\n+                name = RocksDbPersistentStorageConfig.TYPE)})\n+public interface PersistentStorageConfig {\n+    String type();\n+\n+    /**\n+     * Path to the directory in which we want to store the data. In case the directory does not exist we create a new\n+     * one. Anything in this folder might be deleted.\n+     *\n+     * @return path to the directory\n+     */\n+    String storagePath();\n+\n+    @Value.Check\n+    default void check() {\n+        File storageFile = new File(storagePath());\n+        if (storageFile.exists()) {\n+            Preconditions.checkState(\n+                    storageFile.isDirectory(),\n+                    \"Storage path has to point to a directory\",\n+                    SafeArg.of(\"path\", storagePath()));\n+        }\n+\n+        Preconditions.checkState(!Paths.get(storagePath()).isAbsolute(), \"Storage path must be relative\");", "originalCommit": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0Mzg4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r365143889", "bodyText": "Added.", "author": "OStevan", "createdAt": "2020-01-10T09:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODY0Ng==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364868646", "bodyText": "We should say this must be a relative path.", "author": "jeremyk-91", "createdAt": "2020-01-09T17:29:33Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/config/PersistentStorageConfig.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import org.immutables.value.Value;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(\n+                value = ImmutableRocksDbPersistentStorageConfig.class,\n+                name = RocksDbPersistentStorageConfig.TYPE)})\n+public interface PersistentStorageConfig {\n+    String type();\n+\n+    /**\n+     * Path to the directory in which we want to store the data. In case the directory does not exist we create a new", "originalCommit": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0NDU4Ng==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r365144586", "bodyText": "Comment is now in line with the implementation.", "author": "OStevan", "createdAt": "2020-01-10T09:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2OTg1Mg==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364869852", "bodyText": "The comment here probably needs to account for the role of SANITIZED_PATHS. Specifically, something like\n\nIf the path has been successfully sanitized before in the lifetime of this JVM, return.\nIf the path exists, checks that it is a directory.\nIf the path exists and is a directory, remove all sub-folders whose names are the string representation of an UUID.", "author": "jeremyk-91", "createdAt": "2020-01-09T17:32:13Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.base.MoreObjects;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class PersistentStorageFactories {\n+    private static final Pattern UUID_PATTERN = Pattern.compile(\n+            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n+\n+    private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n+\n+    private PersistentStorageFactories() {}\n+\n+    /**\n+     * For the given path does the following: 1) if it exists checks that it is a directory, 2) if it is a directory\n+     * removes all sub-folders whose names are string representation of a UUID.\n+     *", "originalCommit": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0NTU0MA==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r365145540", "bodyText": "Added the missing comment.", "author": "OStevan", "createdAt": "2020-01-10T09:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2OTg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3Mjc3MQ==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364872771", "bodyText": "Usually for this it's reasonable to have a hasMessageContaining(...) to make sure the exception is what you want it to be.", "author": "jeremyk-91", "createdAt": "2020-01-09T17:39:23Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/PersistentStorageFactoriesTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public final class PersistentStorageFactoriesTests {\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    private String testFolderPath;\n+\n+    @Before\n+    public void setUp() {\n+        testFolderPath = testFolder.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void emptyFolderSanitization() {\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+    }\n+\n+    @Test\n+    public void nonExistentFolder() {\n+        File file  = new File(testFolderPath, \"nonexistent\");\n+        PersistentStorageFactories.sanitizeStoragePath(file.getPath());\n+\n+        assertThat(file).isDirectory();\n+    }\n+\n+    @Test\n+    public void sanitizingFile() throws IOException {\n+        File file = testFolder.newFile();\n+\n+        assertThatThrownBy(() -> PersistentStorageFactories.sanitizeStoragePath(file.getAbsolutePath()))\n+                .isInstanceOf(SafeIllegalArgumentException.class);", "originalCommit": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MzE2NQ==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364873165", "bodyText": "\ud83e\udd86 you mean doesNotRemoveNonUuidNamedFolder or something along those lines.", "author": "jeremyk-91", "createdAt": "2020-01-09T17:40:11Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/PersistentStorageFactoriesTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public final class PersistentStorageFactoriesTests {\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    private String testFolderPath;\n+\n+    @Before\n+    public void setUp() {\n+        testFolderPath = testFolder.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void emptyFolderSanitization() {\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+    }\n+\n+    @Test\n+    public void nonExistentFolder() {\n+        File file  = new File(testFolderPath, \"nonexistent\");\n+        PersistentStorageFactories.sanitizeStoragePath(file.getPath());\n+\n+        assertThat(file).isDirectory();\n+    }\n+\n+    @Test\n+    public void sanitizingFile() throws IOException {\n+        File file = testFolder.newFile();\n+\n+        assertThatThrownBy(() -> PersistentStorageFactories.sanitizeStoragePath(file.getAbsolutePath()))\n+                .isInstanceOf(SafeIllegalArgumentException.class);\n+    }\n+\n+    @Test\n+    public void removesUuidNamedFolder() throws IOException {\n+        testFolder.newFolder(UUID.randomUUID().toString());\n+\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+        assertThat(testFolder.getRoot().listFiles()).isEmpty();\n+    }\n+\n+    @Test\n+    public void doesNotRemoveFiles() throws IOException {\n+        testFolder.newFile(UUID.randomUUID().toString());\n+        testFolder.newFile(\"testFile\");\n+\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+        assertThat(testFolder.getRoot().listFiles()).hasSize(2);\n+    }\n+\n+    @Test\n+    public void doesNotRemoveNonFolder() throws IOException {", "originalCommit": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MzUzOQ==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364873539", "bodyText": "nit: prefer static import. Also normally it's useful to include a hasMessageContaining to make sure it's the exception you expect", "author": "jeremyk-91", "createdAt": "2020-01-09T17:41:07Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/config/PersistentStorageConfigTests.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+public final class PersistentStorageConfigTests {\n+    @ClassRule\n+    public static final TemporaryFolder TEST_FOLDER = new TemporaryFolder();\n+\n+    @Test\n+    public void rocksEmptyDirectory() throws IOException {\n+        ImmutableRocksDbPersistentStorageConfig.builder()\n+                .storagePath(TEST_FOLDER.newFolder().getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void rocksPathToFileThrowsAnException() {\n+        Assertions.assertThatThrownBy(() ->\n+                ImmutableRocksDbPersistentStorageConfig.builder()\n+                        .storagePath(TEST_FOLDER.newFile().getAbsolutePath())\n+                        .build())\n+                .isInstanceOf(SafeIllegalStateException.class);", "originalCommit": "b458bf74b80da9d01100b8cdf3645a419d8f6040", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0OTAwMw==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r365149003", "bodyText": "Added both.", "author": "OStevan", "createdAt": "2020-01-10T09:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MzUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MzkxOQ==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364873919", "bodyText": "but the storage path must be relative!", "author": "jeremyk-91", "createdAt": "2020-01-09T17:42:04Z", "path": "atlasdb-config/src/test/resources/rocksdb-config.yml", "diffHunk": "@@ -0,0 +1,2 @@\n+type: rocksdb\n+storagePath: /tmp/rocksdb", "originalCommit": "b458bf74b80da9d01100b8cdf3645a419d8f6040", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a4a2dbbd775e5f5d0a746b5cd1aba84fb7143093", "url": "https://github.com/palantir/atlasdb/commit/a4a2dbbd775e5f5d0a746b5cd1aba84fb7143093", "message": "Fixed location testing.", "committedDate": "2020-01-09T18:49:14Z", "type": "commit"}, {"oid": "139833804ff2d3ff4b80e659ced771b759db587c", "url": "https://github.com/palantir/atlasdb/commit/139833804ff2d3ff4b80e659ced771b759db587c", "message": "Addressed the comments on PR.", "committedDate": "2020-01-10T09:42:55Z", "type": "commit"}, {"oid": "507218c1dfcda28007143e7ceb097cea261a4d04", "url": "https://github.com/palantir/atlasdb/commit/507218c1dfcda28007143e7ceb097cea261a4d04", "message": "Added static import.", "committedDate": "2020-01-10T09:44:14Z", "type": "commit"}, {"oid": "da3a49071d41c53dde3d4d4e40afff49f288969d", "url": "https://github.com/palantir/atlasdb/commit/da3a49071d41c53dde3d4d4e40afff49f288969d", "message": "Prevent usage of persistent storage.", "committedDate": "2020-01-10T09:58:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3MjUwMg==", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r365172502", "bodyText": "nit: maybe createFolderIfNotExists()?", "author": "jeremyk-91", "createdAt": "2020-01-10T10:39:05Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/PersistentStorageFactoriesTests.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public final class PersistentStorageFactoriesTests {\n+    public static final String FIRST_SUBFOLDER_ROOT = \"first\";\n+    public static final String SECOND_SUBFOLDER_ROOT = \"second\";\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    private String testFolderPath;\n+\n+    @Before\n+    public void setUp() {\n+        testFolderPath = testFolder.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void emptyFolderSanitization() {\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+    }\n+\n+    @Test\n+    public void nonExistentFolder() {", "originalCommit": "da3a49071d41c53dde3d4d4e40afff49f288969d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "36156685d86e47b2c45c0cff35a7909d30c4af9d", "url": "https://github.com/palantir/atlasdb/commit/36156685d86e47b2c45c0cff35a7909d30c4af9d", "message": "Fixed tests.", "committedDate": "2020-01-10T10:55:28Z", "type": "commit"}, {"oid": "ade20ec5a99e50200dbc58f91dbd48715bcb082b", "url": "https://github.com/palantir/atlasdb/commit/ade20ec5a99e50200dbc58f91dbd48715bcb082b", "message": "Absolute path.", "committedDate": "2020-01-10T11:14:03Z", "type": "commit"}]}