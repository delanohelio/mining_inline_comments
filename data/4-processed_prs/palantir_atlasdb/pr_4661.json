{"pr_number": 4661, "pr_title": "Async Metrics", "pr_createdAt": "2020-03-23T11:56:19Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4661", "timeline": [{"oid": "329383b8faaae500ec35a4d374545db1158a9f77", "url": "https://github.com/palantir/atlasdb/commit/329383b8faaae500ec35a4d374545db1158a9f77", "message": "Add Timer cache to metrics.", "committedDate": "2020-03-19T16:02:50Z", "type": "commit"}, {"oid": "87de042daf677fe8b444b1b790cef856e649b262", "url": "https://github.com/palantir/atlasdb/commit/87de042daf677fe8b444b1b790cef856e649b262", "message": "Async Metrics Handling", "committedDate": "2020-03-19T17:53:56Z", "type": "commit"}, {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "url": "https://github.com/palantir/atlasdb/commit/fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "message": "Add generated changelog entries", "committedDate": "2020-03-19T18:18:11Z", "type": "commit"}, {"oid": "1915b554c253465d4488bca0be1d3fc9b757c1b2", "url": "https://github.com/palantir/atlasdb/commit/1915b554c253465d4488bca0be1d3fc9b757c1b2", "message": "Get rid of random block.", "committedDate": "2020-03-23T11:43:24Z", "type": "commit"}, {"oid": "3691dfcdecebe6f3cae721c912ca60c0410b3f20", "url": "https://github.com/palantir/atlasdb/commit/3691dfcdecebe6f3cae721c912ca60c0410b3f20", "message": "Add generated changelog entries", "committedDate": "2020-03-19T18:18:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQyOA==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396476428", "bodyText": "This implementation is very nearly identical to the one below - is there a common method that can be extracted?\nAlso, below you factored out String name = MetricRegistry.name(serviceInterface);, but not in this block.", "author": "Jolyon-S", "createdAt": "2020-03-23T14:07:21Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/AtlasDbMetrics.java", "diffHunk": "@@ -71,18 +71,27 @@ private AtlasDbMetrics() {}\n         return instrument(metricRegistry, serviceInterface, service, name, instrumentAllMethods());\n     }\n \n+    public static <T, U extends T> T instrumentWithTaggedMetrics(\n+            TaggedMetricRegistry taggedMetrics,\n+            Class<T> serviceInterface,\n+            U service) {\n+        return Instrumentation.builder(serviceInterface, service)\n+                .withHandler(new TaggedMetricsInvocationEventHandler(\n+                        taggedMetrics,\n+                        MetricRegistry.name(serviceInterface)))\n+                .withPerformanceTraceLogging()\n+                .build();\n+    }\n+", "originalCommit": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5ODI2OA==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396498268", "bodyText": "can do, not really sure it buys anything though, this is what it looks like:\n    public static <T, U extends T> T instrumentWithTaggedMetrics(\n            TaggedMetricRegistry taggedMetrics,\n            Class<T> serviceInterface,\n            U service) {\n        return buildInstrumentation(\n                serviceInterface,\n                service,\n                new TaggedMetricsInvocationEventHandler(taggedMetrics, MetricRegistry.name(serviceInterface)));\n    }\n\n    public static <T, U extends T> T instrumentWithTaggedMetrics(\n            TaggedMetricRegistry taggedMetrics,\n            Class<T> serviceInterface,\n            U service,\n            Function<InvocationContext, Map<String, String>> tagFunction) {\n        return buildInstrumentation(\n                serviceInterface,\n                service,\n                new TaggedMetricsInvocationEventHandler(\n                        taggedMetrics,\n                        MetricRegistry.name(serviceInterface),\n                        tagFunction));\n    }\n\n    private static <T, U extends T> T buildInstrumentation(\n            Class<T> serviceInterface,\n            U service,\n            TaggedMetricsInvocationEventHandler handler) {\n        return Instrumentation.builder(serviceInterface, service)\n                .withHandler(handler)\n                .withPerformanceTraceLogging()\n                .build();\n    }\nThe factoring was so it would not kill my line count aha.", "author": "felixdesouza", "createdAt": "2020-03-23T14:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMzAxMQ==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396503011", "bodyText": "Yeah this isn't particularly pretty. Don't mind either way, so long as you are consistent (i.e. the factoring thing is either done or not done for both.", "author": "Jolyon-S", "createdAt": "2020-03-23T14:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDE1Nw==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396480157", "bodyText": "Repeated code from below; is there a better way this can be done?", "author": "Jolyon-S", "createdAt": "2020-03-23T14:12:40Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/TaggedMetricsInvocationEventHandler.java", "diffHunk": "@@ -48,7 +58,26 @@\n     private final TaggedMetricRegistry taggedMetricRegistry;\n     private final String serviceName;\n \n-    private final Function<InvocationContext, Map<String, String>> tagFunction;\n+    private final Optional<Function<InvocationContext, Map<String, String>>> tagFunction;\n+\n+    @Nullable\n+    private final Function<Method, Timer> onSuccessTimerMappingFunctionUntagged;\n+    private final ConcurrentMap<Method, Timer> untaggedTimerCache = Maps.newConcurrentMap();\n+\n+    @Nullable\n+    private final Function<MethodWithExtraTags, Timer> onSuccessTimerMappingFunctionExtraTags;\n+    private final ConcurrentMap<MethodWithExtraTags, Timer> extraTagsTimerCache = Maps.newConcurrentMap();\n+\n+    public TaggedMetricsInvocationEventHandler(TaggedMetricRegistry taggedMetricRegistry, String serviceName) {\n+        super(InstrumentationUtils.getEnabledSupplier(serviceName));\n+        this.taggedMetricRegistry = Preconditions.checkNotNull(taggedMetricRegistry, \"metricRegistry\");\n+        this.serviceName = Preconditions.checkNotNull(serviceName, \"serviceName\");", "originalCommit": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDIyOA==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396484228", "bodyText": "It looks like you are casting result from Object to ListenableFuture<?>; can you do this without a check? (It looks to me like the check above is checking context's return type, but I don't know if that is guaranteed to be the same as the type of result).", "author": "Jolyon-S", "createdAt": "2020-03-23T14:18:11Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/TaggedMetricsInvocationEventHandler.java", "diffHunk": "@@ -72,12 +106,54 @@ public void onSuccess(@Nullable InvocationContext context, @Nullable Object resu\n             return;\n         }\n \n+        if (result != null && ListenableFuture.class.isAssignableFrom(context.getMethod().getReturnType())) {\n+            Futures.addCallback((ListenableFuture<?>) result, new FutureCallback<Object>() {", "originalCommit": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxODMyMQ==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396518321", "bodyText": "they should be equivalent, I suppose I wanted to adhere to the interface in question as opposed to whatever type we may get back, I can add another check to the object itself.", "author": "felixdesouza", "createdAt": "2020-03-23T15:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NjM4Mw==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396486383", "bodyText": "nit: unnecessary diff?", "author": "Jolyon-S", "createdAt": "2020-03-23T14:21:01Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/TaggedMetricsInvocationEventHandler.java", "diffHunk": "@@ -95,7 +171,6 @@ public void onFailure(@Nullable InvocationContext context, @Nonnull Throwable ca\n         taggedMetricRegistry.meter(MetricName.builder().safeName(\n                 MetricRegistry.name(failuresMetricName, cause.getClass().getName())).build())\n                 .mark();\n-", "originalCommit": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODY3NA==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396488674", "bodyText": "Should there be two of the exact same statement here? If so, please may you leave a comment as to why?\nnit: maybe also group them together w.r.t spacing?", "author": "Jolyon-S", "createdAt": "2020-03-23T14:24:02Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/AtlasDbMetricsTest.java", "diffHunk": "@@ -91,6 +122,77 @@ public void instrumentWithCustomNameAll() {\n         assertMethodInstrumented(MetricRegistry.name(CUSTOM_METRIC_NAME, PING_NOT_TIMED_METHOD), service::pingNotTimed);\n     }\n \n+    @Test\n+    public void instrumentTaggedAsyncFunction() throws InterruptedException, ExecutionException {\n+        AsyncTestService asyncTestService = AtlasDbMetrics.instrumentWithTaggedMetrics(taggedMetrics,\n+                AsyncTestService.class, this.asyncTestService);\n+\n+        String asyncPingMetricName = MetricRegistry.name(AsyncTestService.class, \"asyncPing\");\n+        assertTimerNotRegistered(asyncPingMetricName);\n+\n+        List<ListenableFuture<String>> futures = IntStream.range(0, 10)\n+                .mapToObj($ -> asyncTestService.asyncPing())\n+                .collect(Collectors.toList());\n+\n+        Instant now = Instant.now();\n+        MetricName metricName = MetricName.builder().safeName(asyncPingMetricName).build();\n+        ListenableFuture<Boolean> done = Futures.whenAllSucceed(futures).call(() -> {\n+            // have to do it this because we can't edit the future we get back and it's only a callback as opposed to a\n+            // transformed future\n+            Awaitility.await()\n+                    .atMost(ASYNC_DURATION_TTL.toMillis(), TimeUnit.MILLISECONDS)\n+                    .until(() -> taggedMetrics.timer(metricName).getSnapshot().size() > 0);\n+            return true;\n+        }, MoreExecutors.directExecutor());\n+\n+        assertThat(done.get()).isEqualTo(true);\n+\n+        assertThat(done.get()).isEqualTo(true);", "originalCommit": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMzc4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396513789", "bodyText": "deleted, can't remember, was likely an accident", "author": "felixdesouza", "createdAt": "2020-03-23T14:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4OTY1OA==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396489658", "bodyText": "Copied code from above - can a common method be factored out?", "author": "Jolyon-S", "createdAt": "2020-03-23T14:25:23Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/AtlasDbMetricsTest.java", "diffHunk": "@@ -91,6 +122,77 @@ public void instrumentWithCustomNameAll() {\n         assertMethodInstrumented(MetricRegistry.name(CUSTOM_METRIC_NAME, PING_NOT_TIMED_METHOD), service::pingNotTimed);\n     }\n \n+    @Test\n+    public void instrumentTaggedAsyncFunction() throws InterruptedException, ExecutionException {\n+        AsyncTestService asyncTestService = AtlasDbMetrics.instrumentWithTaggedMetrics(taggedMetrics,\n+                AsyncTestService.class, this.asyncTestService);\n+\n+        String asyncPingMetricName = MetricRegistry.name(AsyncTestService.class, \"asyncPing\");\n+        assertTimerNotRegistered(asyncPingMetricName);\n+\n+        List<ListenableFuture<String>> futures = IntStream.range(0, 10)\n+                .mapToObj($ -> asyncTestService.asyncPing())\n+                .collect(Collectors.toList());\n+\n+        Instant now = Instant.now();\n+        MetricName metricName = MetricName.builder().safeName(asyncPingMetricName).build();\n+        ListenableFuture<Boolean> done = Futures.whenAllSucceed(futures).call(() -> {\n+            // have to do it this because we can't edit the future we get back and it's only a callback as opposed to a\n+            // transformed future\n+            Awaitility.await()\n+                    .atMost(ASYNC_DURATION_TTL.toMillis(), TimeUnit.MILLISECONDS)\n+                    .until(() -> taggedMetrics.timer(metricName).getSnapshot().size() > 0);\n+            return true;\n+        }, MoreExecutors.directExecutor());\n+\n+        assertThat(done.get()).isEqualTo(true);\n+\n+        assertThat(done.get()).isEqualTo(true);\n+        assertThat(Instant.now())\n+                .as(\"in the event of scheduling issues, and despite having 10 concurrent futures, we complete \"\n+                        + \"everything with 2*ttl\")\n+                .isBefore(now.plus(ASYNC_DURATION_TTL.plus(ASYNC_DURATION_TTL)));\n+        Snapshot snapshot = taggedMetrics.timer(metricName).getSnapshot();\n+        assertThat(Duration.ofNanos(snapshot.getMin())).isGreaterThan(ASYNC_DURATION_TTL);\n+        assertThat(snapshot.size()).isEqualTo(10);\n+    }\n+\n+    @Test\n+    public void instrumentTaggedAsyncFunctionWithExtraTags() throws InterruptedException, ExecutionException {", "originalCommit": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNjMyNg==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396516326", "bodyText": "some code can be factored out, I won't go the full length because it's important to see what's actually in the test without having to jump around everywhere.", "author": "felixdesouza", "createdAt": "2020-03-23T15:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4OTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxODMzMQ==", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396518331", "bodyText": "That's fair, it just seemed that a fair amount was exact copy/paste (but I don't mind things with small variations not being factored out exactly).", "author": "Jolyon-S", "createdAt": "2020-03-23T15:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4OTY1OA=="}], "type": "inlineReview"}, {"oid": "8b4ab569e70ae4621a2827c71e0620e2a71e9af2", "url": "https://github.com/palantir/atlasdb/commit/8b4ab569e70ae4621a2827c71e0620e2a71e9af2", "message": "PR comment", "committedDate": "2020-03-23T14:37:22Z", "type": "commit"}, {"oid": "ff79c62cd1d713f8cc70a8e2e0aea1960b6da301", "url": "https://github.com/palantir/atlasdb/commit/ff79c62cd1d713f8cc70a8e2e0aea1960b6da301", "message": "Refactor.", "committedDate": "2020-03-23T14:59:23Z", "type": "commit"}, {"oid": "f50362196774e2f03730894ec5a05bf8c4d406c7", "url": "https://github.com/palantir/atlasdb/commit/f50362196774e2f03730894ec5a05bf8c4d406c7", "message": "Add extra check.", "committedDate": "2020-03-23T15:04:47Z", "type": "commit"}, {"oid": "401bb09ce92e73df669be0f0b07d84d7e30acdd6", "url": "https://github.com/palantir/atlasdb/commit/401bb09ce92e73df669be0f0b07d84d7e30acdd6", "message": "Revert refactor.", "committedDate": "2020-03-23T15:25:10Z", "type": "commit"}]}