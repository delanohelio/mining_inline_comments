{"pr_number": 4508, "pr_title": "Better coalescing supplier", "pr_createdAt": "2020-01-13T19:28:23Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4508", "timeline": [{"oid": "1d01ca961bcead88a409e0b23b7bc8ad7245cb8c", "url": "https://github.com/palantir/atlasdb/commit/1d01ca961bcead88a409e0b23b7bc8ad7245cb8c", "message": "Add generated changelog entries", "committedDate": "2020-01-13T18:00:02Z", "type": "commit"}, {"oid": "7c45509a374347540374f6c55d96e09d36a2efda", "url": "https://github.com/palantir/atlasdb/commit/7c45509a374347540374f6c55d96e09d36a2efda", "message": "Faster coalescing supplier\n\nThis is a moderate improvement on the present coalescing supplier.\nWon't describe present state of the world, but the new implementation\nhopefully describes the algorithm better.\n\nFor each round, either we are the first to arrive (execute and return)\nor we are not.\n\nIn the case we are not, we await the current round ending and then\nperform the check again. If not this time, we wait for the executor to\nfinish and return their result.\n\nThe improvement is modest - with 16 threads looping and a task that takes\n2ms (the benchmark) we see throughput of 6886 +- 73 operations per\nsecond. With this change, we see a result of 7232 +- 89 operations per\nsecond.\n\nWhile the change is minimal, the result is closer to optimal;\n16 / 0.002 = 8000 as perfect (which we can never really achieve in such\na benchmark).", "committedDate": "2020-01-13T19:25:18Z", "type": "commit"}, {"oid": "ccf67f1a2c66ba3c89e4c0c74ea1852e957d7eda", "url": "https://github.com/palantir/atlasdb/commit/ccf67f1a2c66ba3c89e4c0c74ea1852e957d7eda", "message": "Make more simple", "committedDate": "2020-01-13T19:42:26Z", "type": "commit"}, {"oid": "129ffe70c2e4b47020657877baf9dbe87366442b", "url": "https://github.com/palantir/atlasdb/commit/129ffe70c2e4b47020657877baf9dbe87366442b", "message": "Merge branch 'jbaker/faster_coalescing_supplier' of github.com:palantir/atlasdb into jbaker/faster_coalescing_supplier", "committedDate": "2020-01-13T19:42:39Z", "type": "commit"}, {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff", "url": "https://github.com/palantir/atlasdb/commit/04f70e6939bb51fb581bf87f7b4fce70f1e05eff", "message": "Add generated changelog entries", "committedDate": "2020-01-13T19:42:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NTQxMw==", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r365995413", "bodyText": "it's unclear to me based on Java semantics whether this needs to be volatile or not. But I'm gonna leave it as such.", "author": "j-baker", "createdAt": "2020-01-13T19:49:24Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +29,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        awaitDone(present.future);\n+        Round next = present.next;\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;", "originalCommit": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1OTUxOQ==", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366059519", "bodyText": "I think not, since completing a future does happen before a join on that future. Not 100% confident in this one so agree with leaving it as such.", "author": "jeremyk-91", "createdAt": "2020-01-13T22:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NTQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NjA3OQ==", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r365996079", "bodyText": "This is much faster than the equivalent 'hasStarted.compareAndSet(false, true)'. I believe this is because the proposed solution can do the read in a MESI shared state, whereas the CAS will always make it exclusive.", "author": "j-baker", "createdAt": "2020-01-13T19:50:50Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +29,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        awaitDone(present.future);\n+        Round next = present.next;\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;\n+\n+        boolean isFirstToArrive() {\n+            return !hasStarted.get() && hasStarted.compareAndSet(false, true);", "originalCommit": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MDA0Nw==", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366060047", "bodyText": "Makes sense. I think we should document this in a comment here.", "author": "jeremyk-91", "createdAt": "2020-01-13T22:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NjA3OQ=="}], "type": "inlineReview"}, {"oid": "6740acc0ac8c2af35e33a8d553c9002e223a64ad", "url": "https://github.com/palantir/atlasdb/commit/6740acc0ac8c2af35e33a8d553c9002e223a64ad", "message": "Cleaner still", "committedDate": "2020-01-13T19:53:56Z", "type": "commit"}, {"oid": "c34fb12b4a37b26fd05424629a3b6b4a073708db", "url": "https://github.com/palantir/atlasdb/commit/c34fb12b4a37b26fd05424629a3b6b4a073708db", "message": "Merge branch 'jbaker/faster_coalescing_supplier' of github.com:palantir/atlasdb into jbaker/faster_coalescing_supplier", "committedDate": "2020-01-13T19:54:15Z", "type": "commit"}, {"oid": "a973bab8cb723403369532c2779382460698aab1", "url": "https://github.com/palantir/atlasdb/commit/a973bab8cb723403369532c2779382460698aab1", "message": "imports", "committedDate": "2020-01-13T19:54:51Z", "type": "commit"}, {"oid": "e901538ea2cdfc547950c4cc45072569c37b136a", "url": "https://github.com/palantir/atlasdb/commit/e901538ea2cdfc547950c4cc45072569c37b136a", "message": "Fix the bugs", "committedDate": "2020-01-13T19:57:56Z", "type": "commit"}, {"oid": "f508977a98ef83b2074bfb7748cd9dcf90a103d9", "url": "https://github.com/palantir/atlasdb/commit/f508977a98ef83b2074bfb7748cd9dcf90a103d9", "message": "Oops", "committedDate": "2020-01-13T19:58:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwMDc2MQ==", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366000761", "bodyText": "why are we eating this and not at least logging at lower level?", "author": "schlosna", "createdAt": "2020-01-13T20:01:25Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +28,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        Round next = present.awaitDone();\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;\n+\n+        boolean isFirstToArrive() {\n+            return !hasStarted.get() && hasStarted.compareAndSet(false, true);\n         }\n-    }\n \n-    private void resetAndCompleteIfNotCompleted(CompletableFuture<T> future) {\n-        if (future.isDone()) {\n-            return;\n+        Round awaitDone() {\n+            try {\n+                future.join();\n+            } catch (CompletionException e) {\n+                // ignore", "originalCommit": "f508977a98ef83b2074bfb7748cd9dcf90a103d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjQ4MA==", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366006480", "bodyText": "it's intended behaviour - we're literally just awaiting the conclusion of the future", "author": "j-baker", "createdAt": "2020-01-13T20:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwMDc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNjcyNg==", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366006726", "bodyText": "we just want it to be complete. We shouldn't do anything with the exception because it's never relevant in this method.", "author": "j-baker", "createdAt": "2020-01-13T20:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwMDc2MQ=="}], "type": "inlineReview"}, {"oid": "654ef39ee53b28c8902c3434a3becfd824ded000", "url": "https://github.com/palantir/atlasdb/commit/654ef39ee53b28c8902c3434a3becfd824ded000", "message": "Fixes", "committedDate": "2020-01-13T20:12:34Z", "type": "commit"}, {"oid": "f1d89f3618c4fd4cf6858b381987caf407b027f7", "url": "https://github.com/palantir/atlasdb/commit/f1d89f3618c4fd4cf6858b381987caf407b027f7", "message": "Make the benchmark parallel", "committedDate": "2020-01-13T20:23:49Z", "type": "commit"}, {"oid": "8f46444762b8f2ea2c021709405596272943fb49", "url": "https://github.com/palantir/atlasdb/commit/8f46444762b8f2ea2c021709405596272943fb49", "message": "Remove the benchmark", "committedDate": "2020-01-13T20:57:52Z", "type": "commit"}, {"oid": "14c90c299afb04986a595378838af61cd4a87cfc", "url": "https://github.com/palantir/atlasdb/commit/14c90c299afb04986a595378838af61cd4a87cfc", "message": "Add generated changelog entries", "committedDate": "2020-01-13T20:57:52Z", "type": "commit"}, {"oid": "9b509f89f643edc9c42b5f703e6b7a3f7c6c3916", "url": "https://github.com/palantir/atlasdb/commit/9b509f89f643edc9c42b5f703e6b7a3f7c6c3916", "message": "Merge branch 'develop' into jbaker/faster_coalescing_supplier", "committedDate": "2020-01-14T11:29:19Z", "type": "commit"}, {"oid": "fc24f0411a9166b521aa89098567ac2c219f981c", "url": "https://github.com/palantir/atlasdb/commit/fc24f0411a9166b521aa89098567ac2c219f981c", "message": "Merge branch 'jbaker/faster_coalescing_supplier' of github.com:palantir/atlasdb into jbaker/faster_coalescing_supplier", "committedDate": "2020-01-14T11:29:29Z", "type": "commit"}, {"oid": "8a3ab37087dae53d150a9e3fa907ea49a2c5e907", "url": "https://github.com/palantir/atlasdb/commit/8a3ab37087dae53d150a9e3fa907ea49a2c5e907", "message": "PR comment", "committedDate": "2020-01-14T11:31:31Z", "type": "commit"}]}