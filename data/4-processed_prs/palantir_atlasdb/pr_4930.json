{"pr_number": 4930, "pr_title": "[PDS-129897] Fix Memory Leak in the Publication Controller", "pr_createdAt": "2020-08-05T19:49:55Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4930", "timeline": [{"oid": "75c86affe0700bc3489762487305e77a244e7a09", "url": "https://github.com/palantir/atlasdb/commit/75c86affe0700bc3489762487305e77a244e7a09", "message": "fix memory leak", "committedDate": "2020-08-05T19:43:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3MDY4MQ==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r465970681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "jeremyk-91", "createdAt": "2020-08-05T20:01:32Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }\n+\n+    @Test\n+    public void registersDifferentMetricsSeparately() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+\n+        assertThat(c1).isNotSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+    }\n+}", "originalCommit": "75c86affe0700bc3489762487305e77a244e7a09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0b56a729240a4aa952b8c7f49816d02991de1102", "url": "https://github.com/palantir/atlasdb/commit/0b56a729240a4aa952b8c7f49816d02991de1102", "message": "Update atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "committedDate": "2020-08-05T20:01:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3MDg5Mg==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r465970892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n          \n          \n            \n                    verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n          \n          \n            \n                    verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n          \n          \n            \n                    verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);", "author": "jeremyk-91", "createdAt": "2020-08-05T20:01:58Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }\n+\n+    @Test\n+    public void registersDifferentMetricsSeparately() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+\n+        assertThat(c1).isNotSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);", "originalCommit": "0b56a729240a4aa952b8c7f49816d02991de1102", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "130bf04f2a885e1947f444a32685fc2f5f031c02", "url": "https://github.com/palantir/atlasdb/commit/130bf04f2a885e1947f444a32685fc2f5f031c02", "message": "Update atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "committedDate": "2020-08-05T20:02:03Z", "type": "commit"}, {"oid": "044f27bcd5f6b4beea7591ad3be96487b32a3047", "url": "https://github.com/palantir/atlasdb/commit/044f27bcd5f6b4beea7591ad3be96487b32a3047", "message": "Add generated changelog entries", "committedDate": "2020-08-05T20:02:03Z", "type": "commit"}, {"oid": "7a562ef23f4095900f05639d923b3e47038f7c4e", "url": "https://github.com/palantir/atlasdb/commit/7a562ef23f4095900f05639d923b3e47038f7c4e", "message": "Autorelease 0.240.1-rc2", "committedDate": "2020-08-06T09:16:48Z", "type": "commit"}, {"oid": "38e64ca6b46553dc19f3be1cf3d6397bffd4294b", "url": "https://github.com/palantir/atlasdb/commit/38e64ca6b46553dc19f3be1cf3d6397bffd4294b", "message": "Kick allowing new tag", "committedDate": "2020-08-06T10:21:35Z", "type": "commit"}, {"oid": "d9b805b7d21878b2cbfa1924875d751fc7ce8190", "url": "https://github.com/palantir/atlasdb/commit/d9b805b7d21878b2cbfa1924875d751fc7ce8190", "message": "Autorelease 0.240.1-rc3", "committedDate": "2020-08-06T10:22:14Z", "type": "commit"}, {"oid": "7e48d1b53c90683d7567547a21d57d334daec071", "url": "https://github.com/palantir/atlasdb/commit/7e48d1b53c90683d7567547a21d57d334daec071", "message": "Add generated changelog entries", "committedDate": "2020-08-06T10:22:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTQ1NQ==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466945455", "bodyText": "Why not use verify(delegate) here as well?", "author": "sudiksha27", "createdAt": "2020-08-07T10:02:06Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }", "originalCommit": "d9b805b7d21878b2cbfa1924875d751fc7ce8190", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MTk5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466981999", "bodyText": "This one is mainly for readability: the fact that it is exactly 1 time is important. Semantically it is the same, yes.", "author": "jeremyk-91", "createdAt": "2020-08-07T11:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTkwMw==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466945903", "bodyText": "Would it be possible to add a stress test here?", "author": "sudiksha27", "createdAt": "2020-08-07T10:03:05Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }\n+\n+    @Test\n+    public void registersDifferentMetricsSeparately() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+\n+        assertThat(c1).isNotSameAs(c2);\n+        verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+    }", "originalCommit": "d9b805b7d21878b2cbfa1924875d751fc7ce8190", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MjE0MQ==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466982141", "bodyText": "Sure. Will add one.", "author": "jeremyk-91", "createdAt": "2020-08-07T11:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NjA0NA==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466946044", "bodyText": "Is the hyphen intentional?", "author": "sudiksha27", "createdAt": "2020-08-07T10:03:25Z", "path": "changelog/0.240.1-rc2/pr-4930.v2.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+type: improvement\n+improvement:\n+  description: '- Fix memory leak in `TopNMetricPublicationController`.'\n+  links:", "originalCommit": "d9b805b7d21878b2cbfa1924875d751fc7ce8190", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MTU1Nw==", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466981557", "bodyText": "Ah, it was not. Good catch", "author": "jeremyk-91", "createdAt": "2020-08-07T11:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NjA0NA=="}], "type": "inlineReview"}, {"oid": "e7f6038c45636f94f3a18202b84b580f2645396e", "url": "https://github.com/palantir/atlasdb/commit/e7f6038c45636f94f3a18202b84b580f2645396e", "message": "CR comments", "committedDate": "2020-08-07T12:46:43Z", "type": "commit"}]}