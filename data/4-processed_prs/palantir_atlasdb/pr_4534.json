{"pr_number": 4534, "pr_title": "Prefixed path for persistent storage", "pr_createdAt": "2020-01-23T17:20:51Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4534", "timeline": [{"oid": "28e68277986568160bcff97c274a13820c286df8", "url": "https://github.com/palantir/atlasdb/commit/28e68277986568160bcff97c274a13820c286df8", "message": "Prerequisites.", "committedDate": "2020-01-23T17:15:59Z", "type": "commit"}, {"oid": "ebc60cf001703564fa715a515321b5a69a5e7d35", "url": "https://github.com/palantir/atlasdb/commit/ebc60cf001703564fa715a515321b5a69a5e7d35", "message": "No more static state.", "committedDate": "2020-01-23T17:15:59Z", "type": "commit"}, {"oid": "04565ab46e61ae007ec72a45085c6fc8f592b80d", "url": "https://github.com/palantir/atlasdb/commit/04565ab46e61ae007ec72a45085c6fc8f592b80d", "message": "Fix tests.", "committedDate": "2020-01-23T17:26:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NTU4MQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370265581", "bodyText": "docs are inaccurate now", "author": "felixdesouza", "createdAt": "2020-01-23T17:51:01Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizer.java", "diffHunk": "@@ -24,22 +24,30 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n-    private static final Pattern UUID_PATTERN = Pattern.compile(\n-            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n+public final class PersistentStoragePathSanitizer {\n+    private static final Logger log = LoggerFactory.getLogger(PersistentStoragePathSanitizer.class);\n+    private static final PersistentStoragePathSanitizer INSTANCE = new PersistentStoragePathSanitizer();\n+    @VisibleForTesting\n+    static final String MAGIC_SUFFIX = \"atlasdb-persistent-storage\";\n \n-    private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n+    public static PersistentStoragePathSanitizer create() {\n+        return INSTANCE;\n+    }\n \n-    private PersistentStorageFactories() {}\n+    private final Set<String> sanitizedPaths = new HashSet<>();\n \n+    @VisibleForTesting\n+    PersistentStoragePathSanitizer() {}\n \n     /**\n      * For the given path does the following: 1) it is sanitized only once per VM lifetime 2) if it exists checks that", "originalCommit": "04565ab46e61ae007ec72a45085c6fc8f592b80d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzgzMQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370593831", "bodyText": "as discussed offline, let's just do the straightforward thing since this will be called at most once, for the places where multiple transaction managers are used without proper sync, we'd need to sort it out ourselves, but that's easy since there are not that many.", "author": "felixdesouza", "createdAt": "2020-01-24T11:42:13Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizer.java", "diffHunk": "@@ -24,22 +24,30 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n-    private static final Pattern UUID_PATTERN = Pattern.compile(\n-            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n+public final class PersistentStoragePathSanitizer {\n+    private static final Logger log = LoggerFactory.getLogger(PersistentStoragePathSanitizer.class);\n+    private static final PersistentStoragePathSanitizer INSTANCE = new PersistentStoragePathSanitizer();", "originalCommit": "04565ab46e61ae007ec72a45085c6fc8f592b80d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5Mzg5Ng==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370593896", "bodyText": "this can just be a static method", "author": "felixdesouza", "createdAt": "2020-01-24T11:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5NDI2NQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370594265", "bodyText": "given this is a singleton, why are we passing this in?", "author": "felixdesouza", "createdAt": "2020-01-24T11:43:25Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/DefaultPersistentStorageFactory.java", "diffHunk": "@@ -34,6 +35,11 @@\n  */\n public final class DefaultPersistentStorageFactory implements PersistentStorageFactory {\n     private static final Logger log = LoggerFactory.getLogger(DefaultPersistentStorageFactory.class);\n+    private final PersistentStoragePathSanitizer persistentStoragePathSanitizer;\n+\n+    public DefaultPersistentStorageFactory(PersistentStoragePathSanitizer persistentStoragePathSanitizer) {", "originalCommit": "04565ab46e61ae007ec72a45085c6fc8f592b80d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTUyNg==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370585526", "bodyText": "I'd shove this into AtlasdbConstants", "author": "gmaretic", "createdAt": "2020-01-24T11:18:45Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizer.java", "diffHunk": "@@ -24,22 +24,30 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n-    private static final Pattern UUID_PATTERN = Pattern.compile(\n-            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n+public final class PersistentStoragePathSanitizer {\n+    private static final Logger log = LoggerFactory.getLogger(PersistentStoragePathSanitizer.class);\n+    private static final PersistentStoragePathSanitizer INSTANCE = new PersistentStoragePathSanitizer();\n+    @VisibleForTesting\n+    static final String MAGIC_SUFFIX = \"atlasdb-persistent-storage\";", "originalCommit": "04565ab46e61ae007ec72a45085c6fc8f592b80d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NDk1OQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370664959", "bodyText": "in @felixdesouza we believe, so still a magic but now it is private", "author": "OStevan", "createdAt": "2020-01-24T14:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzE1OA==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370593158", "bodyText": "Constructor should be the first method generally, also making it visible for testing is super sketch. We also don't seem to really need a singleton, but if you want to keep it singleton, why don't you make each test use a different storagePath instead?", "author": "gmaretic", "createdAt": "2020-01-24T11:40:21Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizer.java", "diffHunk": "@@ -24,22 +24,30 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n-    private static final Pattern UUID_PATTERN = Pattern.compile(\n-            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n+public final class PersistentStoragePathSanitizer {\n+    private static final Logger log = LoggerFactory.getLogger(PersistentStoragePathSanitizer.class);\n+    private static final PersistentStoragePathSanitizer INSTANCE = new PersistentStoragePathSanitizer();\n+    @VisibleForTesting\n+    static final String MAGIC_SUFFIX = \"atlasdb-persistent-storage\";\n \n-    private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n+    public static PersistentStoragePathSanitizer create() {\n+        return INSTANCE;\n+    }\n \n-    private PersistentStorageFactories() {}\n+    private final Set<String> sanitizedPaths = new HashSet<>();\n \n+    @VisibleForTesting\n+    PersistentStoragePathSanitizer() {}", "originalCommit": "04565ab46e61ae007ec72a45085c6fc8f592b80d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzU1NQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370593555", "bodyText": "Create is a bit misleading, maybe getInstance?", "author": "gmaretic", "createdAt": "2020-01-24T11:41:27Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizer.java", "diffHunk": "@@ -24,22 +24,30 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.annotations.VisibleForTesting;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n-    private static final Pattern UUID_PATTERN = Pattern.compile(\n-            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n+public final class PersistentStoragePathSanitizer {\n+    private static final Logger log = LoggerFactory.getLogger(PersistentStoragePathSanitizer.class);\n+    private static final PersistentStoragePathSanitizer INSTANCE = new PersistentStoragePathSanitizer();\n+    @VisibleForTesting\n+    static final String MAGIC_SUFFIX = \"atlasdb-persistent-storage\";\n \n-    private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n+    public static PersistentStoragePathSanitizer create() {", "originalCommit": "04565ab46e61ae007ec72a45085c6fc8f592b80d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NDU5Nw==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370664597", "bodyText": "Removed now.", "author": "OStevan", "createdAt": "2020-01-24T14:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzU1NQ=="}], "type": "inlineReview"}, {"oid": "ded95cbd1de4449cedc61374816d319ade4b2594", "url": "https://github.com/palantir/atlasdb/commit/ded95cbd1de4449cedc61374816d319ade4b2594", "message": "Simple fixes.", "committedDate": "2020-01-24T13:28:16Z", "type": "commit"}, {"oid": "663f01e7b44d9b92acfe1d9558d580da26cfe43b", "url": "https://github.com/palantir/atlasdb/commit/663f01e7b44d9b92acfe1d9558d580da26cfe43b", "message": "Fixed tests.", "committedDate": "2020-01-24T14:05:29Z", "type": "commit"}, {"oid": "e4a02e2caa83d73640568ac273cf2ebd9432447b", "url": "https://github.com/palantir/atlasdb/commit/e4a02e2caa83d73640568ac273cf2ebd9432447b", "message": "Fix tests.", "committedDate": "2020-01-24T14:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNDU5MQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370704591", "bodyText": "what happens if storagePath doesn't exist, does this catch it?", "author": "felixdesouza", "createdAt": "2020-01-24T15:51:09Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizer.java", "diffHunk": "@@ -21,70 +21,63 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Comparator;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n-    private static final Pattern UUID_PATTERN = Pattern.compile(\n-            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n-\n-    private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n-\n-    private PersistentStorageFactories() {}\n+public final class PersistentStoragePathSanitizer {\n+    private static final Logger log = LoggerFactory.getLogger(PersistentStoragePathSanitizer.class);\n+    private static final String MAGIC_SUFFIX = \"atlasdb-persistent-storage\";\n \n+    private PersistentStoragePathSanitizer() {}\n \n     /**\n-     * For the given path does the following: 1) it is sanitized only once per VM lifetime 2) if it exists checks that\n-     * it is a directory, 3) if it is a directory removes all sub-folders whose names are string representation of a\n-     * UUID.\n+     * For the given path deletes all files and directories under the folder named {@code MAGIC_SUFFIX}.\n      *\n      * @param storagePath to the proposed storage location\n      */\n-    public static synchronized void sanitizeStoragePath(String storagePath) {\n-        if (SANITIZED_PATHS.contains(storagePath)) {\n-            return;\n-        }\n+    public static Path sanitizeStoragePath(String storagePath) {\n+        File storageDirectory = new File(storagePath, MAGIC_SUFFIX);\n+\n+        Preconditions.checkArgument(", "originalCommit": "e4a02e2caa83d73640568ac273cf2ebd9432447b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxMzI3Ng==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370713276", "bodyText": "It is caught.", "author": "OStevan", "createdAt": "2020-01-24T16:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNDU5MQ=="}], "type": "inlineReview"}, {"oid": "c8924dc12048af15a223c705196480a7b26e2f34", "url": "https://github.com/palantir/atlasdb/commit/c8924dc12048af15a223c705196480a7b26e2f34", "message": "Fixed.", "committedDate": "2020-01-24T16:07:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNTQ2NQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370705465", "bodyText": "lol magic shouldn't really be appearing inside exceptions that'll be logged. Plus isn't it the other way around? that it points to a file? i.e. if storageDirectory is not a directory, this the message that will be printed?", "author": "felixdesouza", "createdAt": "2020-01-24T15:52:47Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizer.java", "diffHunk": "@@ -21,70 +21,63 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Comparator;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import com.google.common.base.MoreObjects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n-    private static final Pattern UUID_PATTERN = Pattern.compile(\n-            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n-\n-    private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n-\n-    private PersistentStorageFactories() {}\n+public final class PersistentStoragePathSanitizer {\n+    private static final Logger log = LoggerFactory.getLogger(PersistentStoragePathSanitizer.class);\n+    private static final String MAGIC_SUFFIX = \"atlasdb-persistent-storage\";\n \n+    private PersistentStoragePathSanitizer() {}\n \n     /**\n-     * For the given path does the following: 1) it is sanitized only once per VM lifetime 2) if it exists checks that\n-     * it is a directory, 3) if it is a directory removes all sub-folders whose names are string representation of a\n-     * UUID.\n+     * For the given path deletes all files and directories under the folder named {@code MAGIC_SUFFIX}.\n      *\n      * @param storagePath to the proposed storage location\n      */\n-    public static synchronized void sanitizeStoragePath(String storagePath) {\n-        if (SANITIZED_PATHS.contains(storagePath)) {\n-            return;\n-        }\n+    public static Path sanitizeStoragePath(String storagePath) {\n+        File storageDirectory = new File(storagePath, MAGIC_SUFFIX);\n+\n+        Preconditions.checkArgument(\n+                storageDirectory.getParentFile().isDirectory(),\n+                \"Storage path has to point to a directory\",\n+                SafeArg.of(\"storageDirectory\", storageDirectory.getParentFile().getAbsolutePath()));\n \n-        File storageDirectory = new File(storagePath);\n         if (!storageDirectory.exists()) {\n             Preconditions.checkState(\n                     storageDirectory.mkdir(),\n                     \"Not able to create a storage directory\",\n                     SafeArg.of(\"storageDirectory\", storageDirectory.getAbsolutePath()));\n-            SANITIZED_PATHS.add(storagePath);\n-            return;\n+            return storageDirectory.toPath().toAbsolutePath();\n         }\n \n-        Preconditions.checkArgument(\n+        Preconditions.checkState(\n                 storageDirectory.isDirectory(),\n-                \"Storage path has to point to a directory\",\n+                \"Persistent storage path magic atlas subfolder path points to a directory\",", "originalCommit": "e4a02e2caa83d73640568ac273cf2ebd9432447b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNDAxNA==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370714014", "bodyText": "Fixed.", "author": "OStevan", "createdAt": "2020-01-24T16:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNjc1OQ==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370706759", "bodyText": "there's no guarantee that this file exists in between, an assertion please", "author": "felixdesouza", "createdAt": "2020-01-24T15:55:12Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/PersistentStoragePathSanitizerTests.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public final class PersistentStoragePathSanitizerTests {\n+    public static final String FIRST_SUBFOLDER_ROOT = \"first\";\n+    public static final String SECOND_SUBFOLDER_ROOT = \"second\";\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    private String testFolderPath;\n+\n+    @Before\n+    public void setUp() {\n+        testFolderPath = testFolder.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void emptyFolderSanitization() {\n+        PersistentStoragePathSanitizer.sanitizeStoragePath(testFolderPath);\n+    }\n+\n+    @Test\n+    public void sanitizingFile() throws IOException {\n+        File file = testFolder.newFile();\n+\n+        assertThatThrownBy(() -> PersistentStoragePathSanitizer.sanitizeStoragePath(file.getAbsolutePath()))\n+                .isInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessageContaining(\"has to point to a directory\");\n+    }\n+\n+    @Test\n+    public void removesMagicFolder() {\n+        PersistentStoragePathSanitizer.sanitizeStoragePath(testFolderPath).toFile().mkdir();", "originalCommit": "e4a02e2caa83d73640568ac273cf2ebd9432447b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxMzkwOA==", "url": "https://github.com/palantir/atlasdb/pull/4534#discussion_r370713908", "bodyText": "Added.", "author": "OStevan", "createdAt": "2020-01-24T16:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNjc1OQ=="}], "type": "inlineReview"}]}