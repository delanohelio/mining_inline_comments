{"pr_number": 4648, "pr_title": "Change conjure client replacement logic to replace ASAP ", "pr_createdAt": "2020-03-13T09:36:38Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4648", "timeline": [{"oid": "873aaf34b842b61b5235f64321dc66a372db2c1d", "url": "https://github.com/palantir/atlasdb/commit/873aaf34b842b61b5235f64321dc66a372db2c1d", "message": "Replace if exception matching", "committedDate": "2020-03-13T09:24:29Z", "type": "commit"}, {"oid": "cf2a2f07c7a346823240e50f8e42d4ee1aa064fa", "url": "https://github.com/palantir/atlasdb/commit/cf2a2f07c7a346823240e50f8e42d4ee1aa064fa", "message": "Change conjure client replacement logic to replace ASAP\n\nRebase of https://github.com/palantir/atlasdb/pull/4584", "committedDate": "2020-03-13T09:29:49Z", "type": "commit"}, {"oid": "a4cf57a7f3d6e01c3e302ba734235d0dfed592b1", "url": "https://github.com/palantir/atlasdb/commit/a4cf57a7f3d6e01c3e302ba734235d0dfed592b1", "message": "Fix up", "committedDate": "2020-03-13T09:36:02Z", "type": "commit"}, {"oid": "ade843c87c4779653b3a3780caf832286e06b341", "url": "https://github.com/palantir/atlasdb/commit/ade843c87c4779653b3a3780caf832286e06b341", "message": "Fix test", "committedDate": "2020-03-13T09:36:56Z", "type": "commit"}, {"oid": "db8403c17f792b19bc83acc4402be935019b9eda", "url": "https://github.com/palantir/atlasdb/commit/db8403c17f792b19bc83acc4402be935019b9eda", "message": "Delete selfrefreshingproxy", "committedDate": "2020-03-13T09:39:17Z", "type": "commit"}, {"oid": "064137946831bd628d79a7d7d8afb16713a00819", "url": "https://github.com/palantir/atlasdb/commit/064137946831bd628d79a7d7d8afb16713a00819", "message": "Add generated changelog entries", "committedDate": "2020-03-13T09:39:17Z", "type": "commit"}, {"oid": "f5d8a2b09382eda6a25e8ba036115b4106d6fa60", "url": "https://github.com/palantir/atlasdb/commit/f5d8a2b09382eda6a25e8ba036115b4106d6fa60", "message": "Add log line", "committedDate": "2020-03-13T09:49:49Z", "type": "commit"}, {"oid": "43aa4a52f747e9e182e22b73a7ec9e62ffb6317e", "url": "https://github.com/palantir/atlasdb/commit/43aa4a52f747e9e182e22b73a7ec9e62ffb6317e", "message": "Merge branch 'jbaker/only_replace_client_if_criteria_true' of github.com:palantir/atlasdb into jbaker/only_replace_client_if_criteria_true", "committedDate": "2020-03-13T09:50:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyNzU1NQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392127555", "bodyText": "I think you want isPossiblyOkHttpTimeoutBug(cause) otherwise it will SO.", "author": "jkozlowski", "createdAt": "2020-03-13T09:52:55Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/http/AtlasDbHttpClients.java", "diffHunk": "@@ -106,4 +108,24 @@ private AtlasDbHttpClients() {\n                 MetricRegistry.name(clazz),\n                 $ -> ImmutableMap.of());\n     }\n+\n+    /**\n+     * Returns a proxy which replaces the underlying proxy if:\n+     * 1. We see a SocketTimeoutException\n+     * 2. At most once every 20 minutes\n+     */\n+    private static <T> T wrapWithOkHttpBugHandling(Class<T> type, Supplier<T> supplier) {\n+        return ReplaceIfExceptionMatchingProxy.newProxyInstance(\n+                type,\n+                Suppliers.memoizeWithExpiration(supplier::get, 20, TimeUnit.MINUTES),\n+                AtlasDbHttpClients::isPossiblyOkHttpTimeoutBug);\n+    }\n+\n+    private static boolean isPossiblyOkHttpTimeoutBug(Throwable throwable) {\n+        if (throwable instanceof SocketTimeoutException) {\n+            return true;\n+        }\n+        Throwable cause = throwable.getCause();\n+        return cause != null && isPossiblyOkHttpTimeoutBug(throwable);", "originalCommit": "43aa4a52f747e9e182e22b73a7ec9e62ffb6317e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b09cd9a82f6822c6a2fc0ff8d702b4aa675ddb1", "url": "https://github.com/palantir/atlasdb/commit/3b09cd9a82f6822c6a2fc0ff8d702b4aa675ddb1", "message": "Fix", "committedDate": "2020-03-13T09:55:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMTcwMA==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392131700", "bodyText": "Putting the log line here will basically print it for every request that fails with this, since shouldReplace will be true for all of them. So we either need to put it in the supplier or remove it. Sorry for confusing things", "author": "jkozlowski", "createdAt": "2020-03-13T10:00:42Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.common.proxy;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ReplaceIfExceptionMatchingProxy<T> implements InvocationHandler {\n+    private static final Logger log = LoggerFactory.getLogger(ReplaceIfExceptionMatchingProxy.class);\n+\n+    private final Supplier<T> delegateFactory;\n+    private final Predicate<Throwable> shouldReplace;\n+    private volatile T delegate;\n+\n+    private ReplaceIfExceptionMatchingProxy(Supplier<T> delegateFactory, Predicate<Throwable> shouldReplace) {\n+        this.delegateFactory = delegateFactory;\n+        this.delegate = delegateFactory.get();\n+        this.shouldReplace = shouldReplace;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        try {\n+            return method.invoke(delegate, args);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();\n+            replaceIfNecessary(cause);\n+            throw cause;\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private synchronized void replaceIfNecessary(Throwable thrown) {\n+        if (shouldReplace.test(thrown)) {\n+            log.info(\"Replacing underlying proxy due to thrown exception\", thrown);", "originalCommit": "3b09cd9a82f6822c6a2fc0ff8d702b4aa675ddb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMjYzMQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392132631", "bodyText": "Checked that getCause is the same as getTargetException.", "author": "jkozlowski", "createdAt": "2020-03-13T10:02:38Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.common.proxy;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ReplaceIfExceptionMatchingProxy<T> implements InvocationHandler {\n+    private static final Logger log = LoggerFactory.getLogger(ReplaceIfExceptionMatchingProxy.class);\n+\n+    private final Supplier<T> delegateFactory;\n+    private final Predicate<Throwable> shouldReplace;\n+    private volatile T delegate;\n+\n+    private ReplaceIfExceptionMatchingProxy(Supplier<T> delegateFactory, Predicate<Throwable> shouldReplace) {\n+        this.delegateFactory = delegateFactory;\n+        this.delegate = delegateFactory.get();\n+        this.shouldReplace = shouldReplace;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        try {\n+            return method.invoke(delegate, args);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();", "originalCommit": "3b09cd9a82f6822c6a2fc0ff8d702b4aa675ddb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNTQyMA==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392135420", "bodyText": "yeah getTargetException is from the time before Java had getCause", "author": "j-baker", "createdAt": "2020-03-13T10:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMjYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzI4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392133289", "bodyText": "Is handling this separately necessary?", "author": "jkozlowski", "createdAt": "2020-03-13T10:04:02Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.common.proxy;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ReplaceIfExceptionMatchingProxy<T> implements InvocationHandler {\n+    private static final Logger log = LoggerFactory.getLogger(ReplaceIfExceptionMatchingProxy.class);\n+\n+    private final Supplier<T> delegateFactory;\n+    private final Predicate<Throwable> shouldReplace;\n+    private volatile T delegate;\n+\n+    private ReplaceIfExceptionMatchingProxy(Supplier<T> delegateFactory, Predicate<Throwable> shouldReplace) {\n+        this.delegateFactory = delegateFactory;\n+        this.delegate = delegateFactory.get();\n+        this.shouldReplace = shouldReplace;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        try {\n+            return method.invoke(delegate, args);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();\n+            replaceIfNecessary(cause);\n+            throw cause;\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalStateException(e);", "originalCommit": "3b09cd9a82f6822c6a2fc0ff8d702b4aa675ddb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNDkxNg==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392134916", "bodyText": "We probably don't want to throw the cause in this case (seems like a bug in our reflection so we probably want to see it)", "author": "jeremyk-91", "createdAt": "2020-03-13T10:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNjEyMg==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392136122", "bodyText": "i fixed logging", "author": "j-baker", "createdAt": "2020-03-13T10:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzNjYxMQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392136611", "bodyText": "I checked in other places in this repo, and I don't really see it being handled so I'm curious.", "author": "jkozlowski", "createdAt": "2020-03-13T10:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjIxNQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392146215", "bodyText": "yeah, this was just an artifact of me removing 'throws Throwable', handling the cases and then realizing i needed to rethrow the cause", "author": "j-baker", "createdAt": "2020-03-13T10:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MjEzMg==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392162132", "bodyText": "Yeah, this is what's failing the build", "author": "jkozlowski", "createdAt": "2020-03-13T11:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzMzI4OQ=="}], "type": "inlineReview"}, {"oid": "0fa0fcb852d5421f5f3a113104036ad7655a414d", "url": "https://github.com/palantir/atlasdb/commit/0fa0fcb852d5421f5f3a113104036ad7655a414d", "message": "Logging fix", "committedDate": "2020-03-13T10:09:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NzkxNQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392167915", "bodyText": "Should we defer synchronization until the predicate has evaluated true?", "author": "carterkozak", "createdAt": "2020-03-13T11:16:37Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.common.proxy;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ReplaceIfExceptionMatchingProxy<T> implements InvocationHandler {\n+    private static final Logger log = LoggerFactory.getLogger(ReplaceIfExceptionMatchingProxy.class);\n+\n+    private final Supplier<T> delegateFactory;\n+    private final Predicate<Throwable> shouldReplace;\n+    private volatile T delegate;\n+\n+    private ReplaceIfExceptionMatchingProxy(Supplier<T> delegateFactory, Predicate<Throwable> shouldReplace) {\n+        this.delegateFactory = delegateFactory;\n+        this.delegate = delegateFactory.get();\n+        this.shouldReplace = shouldReplace;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        try {\n+            return method.invoke(delegate, args);\n+        } catch (InvocationTargetException e) {\n+            Throwable cause = e.getCause();\n+            replaceIfNecessary(cause);\n+            throw cause;\n+        }\n+    }\n+\n+    private synchronized void replaceIfNecessary(Throwable thrown) {", "originalCommit": "0fa0fcb852d5421f5f3a113104036ad7655a414d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NDAxMA==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392174010", "bodyText": "Possibly, but it's probably ok to keep it simple here. @jeremyk-91", "author": "jkozlowski", "createdAt": "2020-03-13T11:31:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3NDIwNQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392174205", "bodyText": "doesn't matter - this is only used for RPCs, and they aren't expected to ever throw", "author": "j-baker", "createdAt": "2020-03-13T11:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3ODIyMw==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392178223", "bodyText": "\ud83d\udc4d", "author": "carterkozak", "createdAt": "2020-03-13T11:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NzkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2ODc4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392168789", "bodyText": "I think we need to compare the delegate that we actually invoked the method on, not the value after an exception is caught. Concurrent failures could cause us to roll several times.", "author": "carterkozak", "createdAt": "2020-03-13T11:18:41Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.common.proxy;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ReplaceIfExceptionMatchingProxy<T> implements InvocationHandler {\n+    private static final Logger log = LoggerFactory.getLogger(ReplaceIfExceptionMatchingProxy.class);\n+\n+    private final Supplier<T> delegateFactory;\n+    private final Predicate<Throwable> shouldReplace;\n+    private volatile T delegate;\n+\n+    private ReplaceIfExceptionMatchingProxy(Supplier<T> delegateFactory, Predicate<Throwable> shouldReplace) {\n+        this.delegateFactory = delegateFactory;\n+        this.delegate = delegateFactory.get();\n+        this.shouldReplace = shouldReplace;\n+    }\n+\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+        try {\n+            return method.invoke(delegate, args);", "originalCommit": "0fa0fcb852d5421f5f3a113104036ad7655a414d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE3MjA4OQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392172089", "bodyText": "This is handled outside of this class. The supplier given here is memoized.", "author": "jkozlowski", "createdAt": "2020-03-13T11:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2ODc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4MDgwNg==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392180806", "bodyText": "I don't understand, in that case wouldn't we always replace the delegate with itself? I just rolled out of bed though, and might not be reading thoroughly as I should...\nI think we need something like:\nT localDelegate = delegate;\ntry {\n  return method.invoke(localDelegate, args);\n} catch (ITE e) {\n  Throwable cause = e.getCause();\n  replaceIfNecessary(cause, localDelegate);\n  throw cause;\n}\nThen update replaceIfNecessary\n   private synchronized void replaceIfNecessary(Throwable thrown, T invocationTarget) {\n        if (shouldReplace.test(thrown)) {\n            // cas on fail\n            if (invocationTarget != delegate) {\n                // already replaced\n                return;\n            }\n            T replacement = delegateFactory.get();\n            if (delegate != replacement) {\n                log.info(\"Replacing underlying proxy due to thrown exception\", thrown);\n                delegate = delegateFactory.get();\n            }\n        }\n    }", "author": "carterkozak", "createdAt": "2020-03-13T11:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2ODc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4ODEwMw==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392188103", "bodyText": "Ok so reasoning through this:\nThe supplier passed here is:\nSuppliers.memoizeWithExpiration(supplier::get, 20, TimeUnit.MINUTES)\n\nSo when we hit the bug, all requests will enter the synchronized block and one by one, check they hit the bug, then call the factory. Only the first one will actually refresh the client (and the supplier will memoize it for the next 20 minutes). Next one will call the factory again and get the same one and so not replace it.\nThe only thing I'm wonder is why is the delegateFactory called twice, but I don't think that matters so much.", "author": "jkozlowski", "createdAt": "2020-03-13T12:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2ODc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE5MTA0NA==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392191044", "bodyText": "Talked offline: the proposed code from @carterkozak is to make sure that if we ever switch the supplier passed to here, we don't shoot ourselves in the foot. I will keep as is, as we hope to remove this shortly.", "author": "jkozlowski", "createdAt": "2020-03-13T12:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2ODc4OQ=="}], "type": "inlineReview"}, {"oid": "a9455e09a6178ba70cbba11ec7284d4c1dd506f8", "url": "https://github.com/palantir/atlasdb/commit/a9455e09a6178ba70cbba11ec7284d4c1dd506f8", "message": "Remove unnecessary test.", "committedDate": "2020-03-13T12:37:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwMTY3Ng==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392201676", "bodyText": "This is basically testing some code in Feign, so I'll say not worth it.", "author": "jkozlowski", "createdAt": "2020-03-13T12:38:09Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/LeadersTest.java", "diffHunk": "@@ -116,19 +115,6 @@ public void createProxyAndLocalListCreatesSingletonListIfNoRemoteAddressesProvid\n         verifyNoMoreInteractions(localAcceptor);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)", "originalCommit": "a9455e09a6178ba70cbba11ec7284d4c1dd506f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwODc0OA==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392208748", "bodyText": "Yes. This looks like it originally sought to test that the AtlasDbFeignTargetFactory which doesn't exist anymore wouldn't do silly things", "author": "jeremyk-91", "createdAt": "2020-03-13T12:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwMTY3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwOTEwOQ==", "url": "https://github.com/palantir/atlasdb/pull/4648#discussion_r392209109", "bodyText": "(When we had a lot of custom code there, but now we don't)", "author": "jeremyk-91", "createdAt": "2020-03-13T12:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwMTY3Ng=="}], "type": "inlineReview"}, {"oid": "2743a84468446fe55f86d75952950e034e369072", "url": "https://github.com/palantir/atlasdb/commit/2743a84468446fe55f86d75952950e034e369072", "message": "Move synchronized block.", "committedDate": "2020-03-13T15:38:53Z", "type": "commit"}, {"oid": "6135ed281b6f59ae0992931c1eda8fbf4fe9d34e", "url": "https://github.com/palantir/atlasdb/commit/6135ed281b6f59ae0992931c1eda8fbf4fe9d34e", "message": "Use AbstractInvocationHandler.", "committedDate": "2020-03-13T15:57:36Z", "type": "commit"}, {"oid": "918c352890dafdf5a4fed893cb2f9298b7bef5b4", "url": "https://github.com/palantir/atlasdb/commit/918c352890dafdf5a4fed893cb2f9298b7bef5b4", "message": "Fixup changelog.", "committedDate": "2020-03-13T16:04:29Z", "type": "commit"}]}