{"pr_number": 4846, "pr_title": "[PD$-110002] CONTENTIOUS - Part 4: Redirect All Metrics To TaggedMetricRegistries", "pr_createdAt": "2020-06-17T21:36:31Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4846", "timeline": [{"oid": "358b28eebf09514d606c1771c5b9205442cf3b22", "url": "https://github.com/palantir/atlasdb/commit/358b28eebf09514d606c1771c5b9205442cf3b22", "message": "only used tagged MR", "committedDate": "2020-06-17T21:24:33Z", "type": "commit"}, {"oid": "f081295f6385ad7e1fcce3358bbcb8ad408078f9", "url": "https://github.com/palantir/atlasdb/commit/f081295f6385ad7e1fcce3358bbcb8ad408078f9", "message": "disjoint union set", "committedDate": "2020-06-17T21:24:54Z", "type": "commit"}, {"oid": "b1088ed7f74d166c1e5a6faae6e31a8b6ba95ad9", "url": "https://github.com/palantir/atlasdb/commit/b1088ed7f74d166c1e5a6faae6e31a8b6ba95ad9", "message": "pffty", "committedDate": "2020-06-17T21:35:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzMyNA==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r442213324", "bodyText": "prefer first.forEachMetric as it's more performant", "author": "iamdanfox", "createdAt": "2020-06-18T13:10:27Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/DisjointUnionTaggedMetricSet.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.metrics;\n+\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import com.codahale.metrics.Metric;\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+import com.palantir.tritium.metrics.registry.TaggedMetricSet;\n+\n+/**\n+ * Combines two {@link TaggedMetricSet}s. It is expected that the metric names present from the two sets are disjoint.\n+ */\n+public class DisjointUnionTaggedMetricSet implements TaggedMetricSet {\n+    private final TaggedMetricSet first;\n+    private final TaggedMetricSet second;\n+\n+    public DisjointUnionTaggedMetricSet(TaggedMetricSet first, TaggedMetricSet second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+    @Override\n+    public Map<MetricName, Metric> getMetrics() {\n+        return ImmutableMap.<MetricName, Metric>builder()\n+                .putAll(first.getMetrics())\n+                .putAll(second.getMetrics())\n+                .build();\n+    }\n+\n+    @Override\n+    public void forEachMetric(BiConsumer<MetricName, Metric> consumer) {\n+        first.getMetrics().forEach(consumer);\n+        second.getMetrics().forEach(consumer);", "originalCommit": "b1088ed7f74d166c1e5a6faae6e31a8b6ba95ad9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MDgyNA==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r442340824", "bodyText": "Right, yeah that makes sense (I think I was trying to do something else)", "author": "jeremyk-91", "createdAt": "2020-06-18T16:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTY1NQ==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r442215655", "bodyText": "If we're going to ask datadog to make a new report itemizing costs, we need to make sure we use a consistent tag across all libraries. In the metric-schema PR, we're intending to use libraryName, so I don't think it will help much if you pick a different one", "author": "iamdanfox", "createdAt": "2020-06-18T13:14:06Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/AtlasDbMetricNames.java", "diffHunk": "@@ -33,6 +33,9 @@ private CellFilterMetrics() {\n         public static final String EMPTY_VALUE = \"emptyValuesCellFilterCount\";\n     }\n \n+    public static final String LIBRARY_ORIGIN_TAG = \"libraryOrigin\";", "originalCommit": "b1088ed7f74d166c1e5a6faae6e31a8b6ba95ad9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MzQ1NA==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r442343454", "bodyText": "My main worry here would be how metric registries handle duplicate tags - we are in the process of rolling out metric-schema as we touch new code. Do we know if that's okay? If we do then I'm happy to change this", "author": "jeremyk-91", "createdAt": "2020-06-18T16:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc2Nzk5NQ==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r442767995", "bodyText": "A read of ExtraEntrySortedMap in tritium suggests this might become a problem if the underlying metrics already have a libraryName.", "author": "jeremyk-91", "createdAt": "2020-06-19T10:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMzE1MQ==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r445603151", "bodyText": "Ok - so it was just flagged to me that this is non-ideal for our metrics concerns - for dan's original comment. @iamdanfox is there any chance you could work with @jeremyk-91 to figure out an agreeable solution? I guess in true Highlander style There Can Only Be One which makes me hackily think of an extra layer of indirection (you have a libraryOrigin -> atlasdb tag, and then that wraps anotehr metric set which eitehr adds library name atlasdb or if already set, lets it still be set. But that probably doesn't work perfectly.", "author": "j-baker", "createdAt": "2020-06-25T14:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTU3Mw==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r445679573", "bodyText": "I think a reasonable solution here could be to just make ExtraEntrySortedMap not freak out if you're asking to add a libraryName:atlasdb but the map already contains libraryName:atlasdb. Collisions should only a problem with same key and different value, but we currently barf on all collisions...", "author": "iamdanfox", "createdAt": "2020-06-25T16:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NjAwMg==", "url": "https://github.com/palantir/atlasdb/pull/4846#discussion_r445776002", "bodyText": "The intention I had when doing this was a bit different: when I wrote this I didn't really care about libraryOrigin: atlasdb, I just need a tag that won't be shared to be added here so that I can process the TaggedMetricSets nicely and then register them to the world outside AtlasDB.\nThe cost tracking was intended to be a separate thing. Can we be sure that the Atlas metric registries will never register any metrics that already have metricName? (e.g. dialogue, tritium?) - if so then I'm happy to change this to be libraryName.", "author": "jeremyk-91", "createdAt": "2020-06-25T19:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTY1NQ=="}], "type": "inlineReview"}, {"oid": "5aa7185c5ece04048e5820b65f8f684fa5f06bc1", "url": "https://github.com/palantir/atlasdb/commit/5aa7185c5ece04048e5820b65f8f684fa5f06bc1", "message": "forEach in disjoint union", "committedDate": "2020-06-19T10:45:23Z", "type": "commit"}, {"oid": "62fd668bced384c17f8554586ccf121ace4577ab", "url": "https://github.com/palantir/atlasdb/commit/62fd668bced384c17f8554586ccf121ace4577ab", "message": "Add generated changelog entries", "committedDate": "2020-06-19T10:45:23Z", "type": "commit"}]}