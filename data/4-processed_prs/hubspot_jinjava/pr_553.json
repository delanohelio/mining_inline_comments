{"pr_number": 553, "pr_title": "Implement EagerIfTag", "pr_createdAt": "2020-11-30T22:45:54Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/553", "timeline": [{"oid": "a70d6cfc7ff748bb65f3bf0d50f6e5069aa02a9d", "url": "https://github.com/HubSpot/jinjava/commit/a70d6cfc7ff748bb65f3bf0d50f6e5069aa02a9d", "message": "Checkout eager if tag functionality", "committedDate": "2020-11-30T20:47:52Z", "type": "commit"}, {"oid": "2da0adb10065c017cb14efd16515b67c5c978dca", "url": "https://github.com/HubSpot/jinjava/commit/2da0adb10065c017cb14efd16515b67c5c978dca", "message": "Handle unless tag too", "committedDate": "2020-11-30T20:54:37Z", "type": "commit"}, {"oid": "ffd7f059d0fe063829f8f2bfbded5603c7855fc5", "url": "https://github.com/HubSpot/jinjava/commit/ffd7f059d0fe063829f8f2bfbded5603c7855fc5", "message": "Enable some tests", "committedDate": "2020-11-30T20:56:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzNTg4Mw==", "url": "https://github.com/HubSpot/jinjava/pull/553#discussion_r533235883", "bodyText": "This comment is a little unclear to me", "author": "Joeoh", "createdAt": "2020-12-01T09:42:26Z", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.ElseIfTag;\n+import com.hubspot.jinjava.lib.tag.ElseTag;\n+import com.hubspot.jinjava.lib.tag.IfTag;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n+import com.hubspot.jinjava.util.ObjectTruthValue;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class EagerIfTag extends EagerTagDecorator<IfTag> {\n+\n+  public EagerIfTag() {\n+    super(new IfTag());\n+  }\n+\n+  public EagerIfTag(IfTag ifTag) {\n+    super(ifTag);\n+  }\n+\n+  @Override\n+  public String eagerInterpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n+    if (StringUtils.isBlank(tagNode.getHelpers())) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagNode.getMaster().getImage(),\n+        \"Tag 'if' expects expression\"\n+      );\n+    }\n+\n+    LengthLimitingStringBuilder result = new LengthLimitingStringBuilder(\n+      interpreter.getConfig().getMaxOutputSize()\n+    );\n+\n+    result.append(\n+      executeInChildContext(\n+        eagerInterpreter ->\n+          getEagerImage(tagNode.getMaster(), eagerInterpreter) +\n+          renderChildren(tagNode, eagerInterpreter),\n+        interpreter,\n+        false\n+      )\n+    );\n+    tagNode.getMaster().setRightTrimAfterEnd(false);\n+    result.append(reconstructEnd(tagNode));\n+\n+    return result.toString();\n+  }\n+\n+  @Override\n+  public String renderChildren(TagNode tagNode, JinjavaInterpreter interpreter) {\n+    // If the branch is impossible, it should be removed\n+    boolean definitelyDrop = shouldDropBranch(tagNode, interpreter);\n+    // If the branch would definitely get executed, change it to and else", "originalCommit": "ffd7f059d0fe063829f8f2bfbded5603c7855fc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyMjU4MQ==", "url": "https://github.com/HubSpot/jinjava/pull/553#discussion_r533422581", "bodyText": "Sorry, I have a typo in it. It's saying that if an elseif branch would definitely get executed, it can be changed to an else.\nEx.\n{% if deferred %}\n1.\n{% elseif foo > 0 %}\n2.\n{% else %}\n3.\n{% endif %}\n\nif foo == 2, then it could get output like:\n{% if deferred %}\n1.\n{% else %}\n2.\n{% endif %}", "author": "jasmith-hs", "createdAt": "2020-12-01T13:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzNTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQyNTIzMA==", "url": "https://github.com/HubSpot/jinjava/pull/553#discussion_r533425230", "bodyText": "And the opposite for definitelyDrop. If there were to be a tag like: {% elseif foo == 0 %}, it could get dropped as it's impossible.", "author": "jasmith-hs", "createdAt": "2020-12-01T13:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIzNTg4Mw=="}], "type": "inlineReview"}, {"oid": "e2c078b5a5c9bae7c803c2ef99846bb9064712e8", "url": "https://github.com/HubSpot/jinjava/commit/e2c078b5a5c9bae7c803c2ef99846bb9064712e8", "message": "Update typo in comments", "committedDate": "2020-12-01T14:08:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0NTU2OA==", "url": "https://github.com/HubSpot/jinjava/pull/553#discussion_r534245568", "bodyText": "if we drop a branch, what happens to the whitespace around it? I could see this changing the output of templates because of dropped statements and whitespace (not that it's generally useful).", "author": "boulter", "createdAt": "2020-12-02T15:14:27Z", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerIfTag.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.ElseIfTag;\n+import com.hubspot.jinjava.lib.tag.ElseTag;\n+import com.hubspot.jinjava.lib.tag.IfTag;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.util.LengthLimitingStringBuilder;\n+import com.hubspot.jinjava.util.ObjectTruthValue;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class EagerIfTag extends EagerTagDecorator<IfTag> {\n+\n+  public EagerIfTag() {\n+    super(new IfTag());\n+  }\n+\n+  public EagerIfTag(IfTag ifTag) {\n+    super(ifTag);\n+  }\n+\n+  @Override\n+  public String eagerInterpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n+    if (StringUtils.isBlank(tagNode.getHelpers())) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagNode.getMaster().getImage(),\n+        \"Tag 'if' expects expression\"\n+      );\n+    }\n+\n+    LengthLimitingStringBuilder result = new LengthLimitingStringBuilder(\n+      interpreter.getConfig().getMaxOutputSize()\n+    );\n+\n+    result.append(\n+      executeInChildContext(\n+        eagerInterpreter ->\n+          getEagerImage(tagNode.getMaster(), eagerInterpreter) +\n+          renderChildren(tagNode, eagerInterpreter),\n+        interpreter,\n+        false\n+      )\n+    );\n+    tagNode.getMaster().setRightTrimAfterEnd(false);\n+    result.append(reconstructEnd(tagNode));\n+\n+    return result.toString();\n+  }\n+\n+  @Override\n+  public String renderChildren(TagNode tagNode, JinjavaInterpreter interpreter) {\n+    // If the branch is impossible, it should be removed.\n+    boolean definitelyDrop = shouldDropBranch(tagNode, interpreter);\n+    // If an (\"elseif\") branch would definitely get executed,\n+    // change it to an \"else\" tag and drop all the subsequent branches.\n+    // We know this has to start as false otherwise IfTag would have chosen\n+    // the first branch.\n+    boolean definitelyExecuted = false;\n+    StringBuilder sb = new StringBuilder();\n+    for (Node child : tagNode.getChildren()) {\n+      if (TagNode.class.isAssignableFrom(child.getClass())) {\n+        TagNode tag = (TagNode) child;\n+        if (\n+          tag.getName().equals(ElseIfTag.TAG_NAME) ||\n+          tag.getName().equals(ElseTag.TAG_NAME)\n+        ) {\n+          if (definitelyExecuted) {\n+            break;\n+          }\n+          definitelyDrop =", "originalCommit": "e2c078b5a5c9bae7c803c2ef99846bb9064712e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyNjM1MQ==", "url": "https://github.com/HubSpot/jinjava/pull/553#discussion_r534326351", "bodyText": "This is a good question. The trimming gets handled when the tree gets parsed. Dropping a statement here is done similarly to picking the correct branch in the normal IfTag (and then not executing any of the others). Since no newlines are being added from the EagerIfTag's logic, the resulting whitespace is accurate.\nThe TreeParser takes the trim characters from a TagToken and moves them over to the TextToken children so we the whitespace trimming doesn't get handled in the tag node logic.", "author": "jasmith-hs", "createdAt": "2020-12-02T16:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0NTU2OA=="}], "type": "inlineReview"}, {"oid": "fce219e6d96a3931a7524e37943801b8b99541e9", "url": "https://github.com/HubSpot/jinjava/commit/fce219e6d96a3931a7524e37943801b8b99541e9", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-if", "committedDate": "2020-12-09T17:46:11Z", "type": "commit"}, {"oid": "b839905cb3639b9a6a51bd4d4c6512a33b38fcae", "url": "https://github.com/HubSpot/jinjava/commit/b839905cb3639b9a6a51bd4d4c6512a33b38fcae", "message": "Manual adjustments after merge", "committedDate": "2020-12-09T17:51:03Z", "type": "commit"}, {"oid": "a7501386b9e692dfac13cd11bf1b5f5343bdd6ee", "url": "https://github.com/HubSpot/jinjava/commit/a7501386b9e692dfac13cd11bf1b5f5343bdd6ee", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-if", "committedDate": "2020-12-09T17:58:53Z", "type": "commit"}]}