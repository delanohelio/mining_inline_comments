{"pr_number": 518, "pr_title": "Preserve Raw Tags config", "pr_createdAt": "2020-10-12T16:37:14Z", "pr_url": "https://github.com/HubSpot/jinjava/pull/518", "timeline": [{"oid": "f632489af89ca0d166edb2c85b657cfb15dcedba", "url": "https://github.com/HubSpot/jinjava/commit/f632489af89ca0d166edb2c85b657cfb15dcedba", "message": "Add preserving raw tags for double-renderings", "committedDate": "2020-10-09T21:24:56Z", "type": "commit"}, {"oid": "4f120e5afd4da6255c4a0bb55b83198bf4732019", "url": "https://github.com/HubSpot/jinjava/commit/4f120e5afd4da6255c4a0bb55b83198bf4732019", "message": "Include image in exception, allow length limiting", "committedDate": "2020-10-12T14:12:53Z", "type": "commit"}, {"oid": "279806671bd15351aa3314803cbdc0c4c799d814", "url": "https://github.com/HubSpot/jinjava/commit/279806671bd15351aa3314803cbdc0c4c799d814", "message": "Handle preserved raw tag exception in TagNode", "committedDate": "2020-10-12T15:35:48Z", "type": "commit"}, {"oid": "09f47a2e2bbb8f1b30f609c0b7e1f66a13104d27", "url": "https://github.com/HubSpot/jinjava/commit/09f47a2e2bbb8f1b30f609c0b7e1f66a13104d27", "message": "Test preserving raw tags", "committedDate": "2020-10-12T15:46:55Z", "type": "commit"}, {"oid": "dd642d0dba03031d85fd9b17b2dce2d5c8776aeb", "url": "https://github.com/HubSpot/jinjava/commit/dd642d0dba03031d85fd9b17b2dce2d5c8776aeb", "message": "Exception isn't thrown here", "committedDate": "2020-10-12T15:47:07Z", "type": "commit"}, {"oid": "cc431d4f523d3f34014086e72af61ba77c62173a", "url": "https://github.com/HubSpot/jinjava/commit/cc431d4f523d3f34014086e72af61ba77c62173a", "message": "Add license", "committedDate": "2020-10-12T16:36:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NzU0Ng==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r503997546", "bodyText": "Shouldn't this check all the way up the stack (excluding global) instead of just one level?", "author": "boulter", "createdAt": "2020-10-13T14:26:31Z", "path": "src/main/java/com/hubspot/jinjava/interpret/Context.java", "diffHunk": "@@ -290,6 +291,21 @@ public void handleDeferredNode(Node node) {\n     return ImmutableSet.copyOf(deferredNodes);\n   }\n \n+  public void handlePreservedRawTag() {\n+    hasPreservedRawTags = true;\n+    if (getParent() != null) {", "originalCommit": "cc431d4f523d3f34014086e72af61ba77c62173a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyODk5MA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r504028990", "bodyText": "Not too sure what you mean. I am doing a recursive call, which I believe checks up the stack, excluding global: getParent().handlePreservedRawTag();", "author": "jasmith-hs", "createdAt": "2020-10-13T15:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAzMTM3Mw==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r504031373", "bodyText": "Thanks, I was looking for a while and I missed the recursion.", "author": "boulter", "createdAt": "2020-10-13T15:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NjE4Mg==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509346182", "bodyText": "I guess if (parent.getParent() != null) { will execute the handlePreservedRawTag() for Global as well. Can you verify whether we need to have parent.getParent().getParent() != null to exclude the global one?", "author": "gobimcp", "createdAt": "2020-10-21T14:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1ODYyMw==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509358623", "bodyText": "Like in #449, we don't want the shared global context to be altered here as it can be shared across threads. My goal with marking a context as hasPreservedTags is so that we know that a second pass must always be done if raw tags get preserved.\nIn the instance that we preserve all the raw tags, but nothing gets deferred, a second pass can be done when pre-rendering. If something is deferred, that second pass will happen at serve-time. I want to exclude it for global because I just want it to mark for one run of renderForResult as mentioned here: #447.\nDoes that answer what you were wondering?", "author": "jasmith-hs", "createdAt": "2020-10-21T14:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyMDg4MA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509420880", "bodyText": "Sorry, I misread that question. We only need to check if the parent of what we are calling handlePreservedTag() on is not null. I think maybe line 300: getParent().handlePreservedRawTag() is confusing, as it would make more sense for it to be parent.handlePreservedRawTag().\nThe if statement is checking to make sure that parent's parent is not null, if so then handle the preserved raw tag for parent\nWith a context tree shape like G-a-b, here's some sudo-sequence-code that uses questionable syntax:\nthis == b\nparent == getParent() == a\nparent.getParent() == G != null\nparent.handlePreservedRawTag():\n-this == a\n-parent == getParent() == G\n-parent.getParent() == null\n-return\nreturn", "author": "jasmith-hs", "createdAt": "2020-10-21T16:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NzU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwMDQ1MQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r504000451", "bodyText": "You can use assertThatThrownBy() here.", "author": "boulter", "createdAt": "2020-10-13T14:30:14Z", "path": "src/test/java/com/hubspot/jinjava/lib/tag/RawTagTest.java", "diffHunk": "@@ -91,6 +96,31 @@ public void itDoesntProcessJinjaCommentsWithinARawBlock() {\n       .contains(\"{{#each people}}\");\n   }\n \n+  @Test\n+  public void itPreservesRawTags() {\n+    TagNode tagNode = fixture(\"hubl\");\n+    JinjavaInterpreter preserveInterpreter = new JinjavaInterpreter(\n+      jinjava,\n+      jinjava.getGlobalContextCopy(),\n+      JinjavaConfig.newBuilder().withPreserveRawTags(true).build()\n+    );\n+    Throwable throwable = catchThrowable(", "originalCommit": "cc431d4f523d3f34014086e72af61ba77c62173a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTMyNA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r508821324", "bodyText": "Why throw exception here instead of\nreturn result.toString();\n\n?", "author": "hs-lsong", "createdAt": "2020-10-20T20:34:00Z", "path": "src/main/java/com/hubspot/jinjava/lib/tag/RawTag.java", "diffHunk": "@@ -33,6 +34,14 @@ public String interpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n     LengthLimitingStringBuilder result = new LengthLimitingStringBuilder(\n       interpreter.getConfig().getMaxOutputSize()\n     );\n+    if (interpreter.getConfig().isPreserveRawTags()) {\n+      result.append(renderNodeRaw(tagNode));\n+      throw new PreservedRawTagException(", "originalCommit": "cc431d4f523d3f34014086e72af61ba77c62173a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3MTI5Ng==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509271296", "bodyText": "After working with the code base a bit more, I agree that it is simpler to return rather than throw an exception, and call interpreter.getContext().handlePreservedRawTag(); from here instead of in the TagNode", "author": "jasmith-hs", "createdAt": "2020-10-21T13:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r508827284", "bodyText": "Can you also add a test for deferred values? I thought deferred values will not get evaluated normally. Do they get evaluated inside raw tags?", "author": "hs-lsong", "createdAt": "2020-10-20T20:44:36Z", "path": "src/test/java/com/hubspot/jinjava/interpret/JinjavaInterpreterTest.java", "diffHunk": "@@ -220,4 +220,24 @@ public void itLimitsOutputSizeWhenSumOfNodeSizesExceedsMax() {\n     assertThat(renderResult.getErrors().get(0).getMessage())\n       .contains(\"OutputTooBigException\");\n   }\n+\n+  @Test\n+  public void itCanPreserveRawTags() {\n+    JinjavaConfig preserveRawTagsConfig = JinjavaConfig\n+      .newBuilder()\n+      .withPreserveRawTags(true)\n+      .build();\n+    String input = \"1{% raw %}2{% endraw %}3\";", "originalCommit": "cc431d4f523d3f34014086e72af61ba77c62173a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgzMzUyMQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r508833521", "bodyText": "My testing shows that deferred inside raw does not get evaluated either. https://github.com/HubSpot/jinjava/compare/test-deferred?expand=1", "author": "hs-lsong", "createdAt": "2020-10-20T20:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NTIwOQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509265209", "bodyText": "Nothing, including deferred tags, will get evaluated inside raw tags. However without the preserveRawTags flag, on the second pass, the deferred values will get evaluated once the real value is put in the context.", "author": "jasmith-hs", "createdAt": "2020-10-21T13:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwOTQwMw==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509309403", "bodyText": "In my test above, the deferred values do not get evaluated in the second rendering (there is no preserveRawTags) . Maybe we are not talking about the same case?", "author": "hs-lsong", "createdAt": "2020-10-21T13:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0OTY5OQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509349699", "bodyText": "After line 83:\ninterpreter.getContext().put(\"deferred\", \"resolved value\");\n\nIn the second pass, deferred values will no longer be deferred (such as a contact, which have the actual contact value in the second pass, rather than being a deferred value). If you run the test after putting that line in, I believe that it will get resolved, which is not what is desired.", "author": "jasmith-hs", "createdAt": "2020-10-21T14:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1MTQxNQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509351415", "bodyText": "I think what Jack meant by second pass is another renderer pass without having DeferredValue.instance() in the context. But in your test case, the test setUp has localContext.put(\"deferred\", DeferredValue.instance()); so it gets deferred in the second pass as well. Yo need to remove that from the context to actually resolve them in the second pass.", "author": "gobimcp", "createdAt": "2020-10-21T14:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwNDk3MA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509404970", "bodyText": "Hmm, what is the use case for those? First round rendering makes it deferred, then second round makes it not deferred, but still don't want to render it.", "author": "hs-lsong", "createdAt": "2020-10-21T15:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwNzgxMw==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509407813", "bodyText": "<div>\nHi {{ contact.firstname }}!\nI personalized this with Jinjava:\n{% raw %}Hi {{ contact.firstname }}!{% endraw %}\n</div>\n\nThis should display for someone like:\n<div>\nHi Jack!\nI personalized this with Jinjava:\nHi {{ contact.firstname }}!\n</div>", "author": "jasmith-hs", "createdAt": "2020-10-21T15:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwODg2Mg==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509408862", "bodyText": "We wouldn't want it to render like:\n<div>\nHi Jack!\nI personalized this with Jinjava:\nHi Jack!\n</div>", "author": "jasmith-hs", "createdAt": "2020-10-21T15:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQxNjgyMQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509416821", "bodyText": "Got it. Thanks.", "author": "hs-lsong", "createdAt": "2020-10-21T16:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzI4NA=="}], "type": "inlineReview"}, {"oid": "229b277c0df8b9099f1885cba9bd555e5977cf3f", "url": "https://github.com/HubSpot/jinjava/commit/229b277c0df8b9099f1885cba9bd555e5977cf3f", "message": "Refactor to remove PreservedRawTagException", "committedDate": "2020-10-21T13:20:25Z", "type": "commit"}, {"oid": "17c5a1cf0ebea4a1142dde68dcf74fa806016212", "url": "https://github.com/HubSpot/jinjava/commit/17c5a1cf0ebea4a1142dde68dcf74fa806016212", "message": "Add deferred preserving test", "committedDate": "2020-10-21T13:30:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509464094", "bodyText": "I don't see this function is used. Is this needed?", "author": "hs-lsong", "createdAt": "2020-10-21T17:16:30Z", "path": "src/main/java/com/hubspot/jinjava/interpret/Context.java", "diffHunk": "@@ -290,6 +291,21 @@ public void handleDeferredNode(Node node) {\n     return ImmutableSet.copyOf(deferredNodes);\n   }\n \n+  public void handlePreservedRawTag() {\n+    hasPreservedRawTags = true;\n+    if (getParent() != null) {\n+      Context parent = getParent();\n+      //Ignore global context\n+      if (parent.getParent() != null) {\n+        getParent().handlePreservedRawTag();\n+      }\n+    }\n+  }\n+\n+  public boolean getHasPreservedRawTags() {", "originalCommit": "17c5a1cf0ebea4a1142dde68dcf74fa806016212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MzQzNg==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509473436", "bodyText": "It's for rendering implementations such as with HubSpot's internal pre-renderer", "author": "jasmith-hs", "createdAt": "2020-10-21T17:26:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ4MDI4OQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509480289", "bodyText": "I think I am missing the whole picture. Is this the case,  the caller set the config to preserve raw tags, later it wants to confirm it did render with the flag set?", "author": "hs-lsong", "createdAt": "2020-10-21T17:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ5MjMxMA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509492310", "bodyText": "So if the caller sets to preserve raw tags, but there are no raw tags to preserve and no deferred values, the pre-rendered template can be served as-is.\nIf however, there are any deferred values, then the second render will also get deferred until later.\nFinally, if there are no deferred values, but raw tags are preserved, then the second-pass should happen immediately with the flag off to remove the raw tags and the result can be served as-is.\nThis is because there isn't a way of knowing if there are going to be deferred values down the line so it must always preserve raw tags if the flag is set. 3 examples assuming deferred is deferred:\nExample 1, no deferred values, but a raw tag is preserved:\n{% raw %}{{ foo.bar }}{% endraw %}\n{{ resolved.variable }}\n\nWith preserveRawTags=true the output of the first render is:\n{% raw %}{{ foo.bar }}{% endraw %}\nI am resolved.\n\nSince there are no deferred values, it should be rendered again with preserveRawTags=false. The output of the second render is:\n{{ foo.bar }}\nI am resolved.\n\nExample 2, there are no deferred values or raw tags preserved:\nHello\n{{ resolved.variable }}\n\nWith preserveRawTags=true the output of the first render is:\nHello\nI am resolved.\n\nSince there are no deferred values or preserved tags, the output of the first render can be served as-is.\nExample 3, there is a deferred value and preserved raw tag:\n{% raw %}{{ foo.bar }}{% endraw %}\n{{ deferred.variable }}\n\nWith preserveRawTags=true the output of the first render is:\n{% raw %}{{ foo.bar }}{% endraw %}\n{{ deferred.variable }}\n\nSince there is a deferred variable, it should be rendered again at serve-time with preserveRawTags=false. The output of the second render is:\n{{ foo.bar }}\nI was deferred, but am resolved at serve-time.", "author": "jasmith-hs", "createdAt": "2020-10-21T17:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUxMjE2NA==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509512164", "bodyText": "Thanks for the detailed examples. It helps a lot. But I still don't see where it needs to call getHasPreservedRawTags(). If the caller set it right before then calling the rendering, it should know it (local variable, etc).", "author": "hs-lsong", "createdAt": "2020-10-21T17:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwNzM3Ng==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509607376", "bodyText": "I think you're mistaking the config option for this. The config option tells the interpreter to preserve the raw tags. getHasPreservedRawTags() is only true if a raw tag was encountered and preserved. If there were no raw tags, then getHasPreservedRawTags() will be false.\nEssentially, the method lets the caller know if any raw tags were preserved. It prevents an unnecessary second pass from happening. If this method didn't exist, it wouldn't break anything, but Example 2 would have an extra rendering call that would yield the same result, which can be avoided by using this method.\nThere isn't a method to set private boolean hasPreservedRawTags, it is only set in the context when handlePreservedRawTag() gets called.", "author": "jasmith-hs", "createdAt": "2020-10-21T19:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYxNjAwNQ==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509616005", "bodyText": "Oh, my bad. I mis-read it. I am OK with this. However, if we do not have this, as you said, in example 2, we would have an extra rendering call -- it should be fast because there is nothing to render.", "author": "hs-lsong", "createdAt": "2020-10-21T19:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyMjY1Nw==", "url": "https://github.com/HubSpot/jinjava/pull/518#discussion_r509622657", "bodyText": "That is true. I think it would be a minimal tradeoff of speed for more simplicity, so I'll just take this out.\nThis has shown me that it is too confusing to be worth the minimal performance gain", "author": "jasmith-hs", "createdAt": "2020-10-21T19:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDA5NA=="}], "type": "inlineReview"}, {"oid": "bccbc982f797494ef5e9a9d80c4f5bc544bc8091", "url": "https://github.com/HubSpot/jinjava/commit/bccbc982f797494ef5e9a9d80c4f5bc544bc8091", "message": "Removed hasPreservedRawTags", "committedDate": "2020-10-23T15:21:49Z", "type": "commit"}, {"oid": "277cc64356f344e112974e441366101474d11cc5", "url": "https://github.com/HubSpot/jinjava/commit/277cc64356f344e112974e441366101474d11cc5", "message": "Use more generic config flag name: \"preserveForSecondPass\"", "committedDate": "2020-10-23T15:25:54Z", "type": "commit"}, {"oid": "1e041b1871fa8f24b675e9aa7d7c991f607ece91", "url": "https://github.com/HubSpot/jinjava/commit/1e041b1871fa8f24b675e9aa7d7c991f607ece91", "message": "Add trailing newline to test jinja resource", "committedDate": "2020-10-23T15:27:23Z", "type": "commit"}, {"oid": "05b5b9ca5941c722e85148c8d3675581941a483b", "url": "https://github.com/HubSpot/jinjava/commit/05b5b9ca5941c722e85148c8d3675581941a483b", "message": "Trim before comparing in raw test", "committedDate": "2020-10-23T19:08:01Z", "type": "commit"}]}