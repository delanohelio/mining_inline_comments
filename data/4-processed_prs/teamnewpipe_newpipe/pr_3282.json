{"pr_number": 3282, "pr_title": "Check code style with Checkstyle", "pr_createdAt": "2020-03-27T19:52:38Z", "pr_url": "https://github.com/TeamNewPipe/NewPipe/pull/3282", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwNDk2Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401904963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param versionCode    V\n          \n          \n            \n                 * @param versionCode    Code of new version", "author": "Stypox", "createdAt": "2020-04-01T20:57:59Z", "path": "app/src/main/java/org/schabi/newpipe/CheckForNewAppVersionTask.java", "diffHunk": "@@ -115,124 +191,52 @@ protected void onPostExecute(String response) {\n \n             } catch (JSONException ex) {\n                 // connectivity problems, do not alarm user and fail silently\n-                if (DEBUG) Log.w(TAG, Log.getStackTraceString(ex));\n+                if (DEBUG) {\n+                    Log.w(TAG, Log.getStackTraceString(ex));\n+                }\n             }\n         }\n     }\n \n     /**\n      * Method to compare the current and latest available app version.\n      * If a newer version is available, we show the update notification.\n-     * @param versionName\n-     * @param apkLocationUrl\n+     *\n+     * @param versionName    Name of new version\n+     * @param apkLocationUrl Url with the new apk\n+     * @param versionCode    V", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwOTY3MA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401909670", "bodyText": "Not sure if this is really needed", "author": "Stypox", "createdAt": "2020-04-01T21:06:45Z", "path": "app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java", "diffHunk": "@@ -272,21 +294,20 @@ public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceStat\n         threadsCountTextView.setText(String.valueOf(threads));\n         threadsSeekBar.setProgress(threads - 1);\n         threadsSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n-\n             @Override\n-            public void onProgressChanged(SeekBar seekbar, int progress, boolean fromUser) {\n-                progress++;\n-                prefs.edit().putInt(getString(R.string.default_download_threads), progress).apply();\n-                threadsCountTextView.setText(String.valueOf(progress));\n+            public void onProgressChanged(final SeekBar seekbar, final int progress,\n+                                          final boolean fromUser) {\n+                final int newProgress = progress + 1;\n+                prefs.edit().putInt(getString(R.string.default_download_threads), newProgress)\n+                        .apply();\n+                threadsCountTextView.setText(String.valueOf(newProgress));", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMTY4NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401911685", "bodyText": "I think all of these newlines should stay there", "author": "Stypox", "createdAt": "2020-04-01T21:10:43Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -105,110 +105,98 @@\n import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.COMMENTS;\n import static org.schabi.newpipe.util.AnimationUtils.animateView;\n \n-public class VideoDetailFragment\n-        extends BaseStateFragment<StreamInfo>\n-        implements BackPressable,\n-        SharedPreferences.OnSharedPreferenceChangeListener,\n-        View.OnClickListener,\n-        View.OnLongClickListener {\n+public class VideoDetailFragment extends BaseStateFragment<StreamInfo>\n+        implements BackPressable, SharedPreferences.OnSharedPreferenceChangeListener,\n+        View.OnClickListener, View.OnLongClickListener {\n     public static final String AUTO_PLAY = \"auto_play\";\n-\n-    private int updateFlags = 0;\n     private static final int RELATED_STREAMS_UPDATE_FLAG = 0x1;\n     private static final int RESOLUTIONS_MENU_UPDATE_FLAG = 0x2;\n     private static final int TOOLBAR_ITEMS_UPDATE_FLAG = 0x4;\n     private static final int COMMENTS_UPDATE_FLAG = 0x8;\n-\n-    private boolean autoPlayEnabled;\n-    private boolean showRelatedStreams;\n-    private boolean showComments;\n-    private String selectedTabTag;\n-\n+    private static final String COMMENTS_TAB_TAG = \"COMMENTS\";\n+    private static final String RELATED_TAB_TAG = \"NEXT VIDEO\";\n+    private static final String EMPTY_TAB_TAG = \"EMPTY TAB\";\n+    private static final String INFO_KEY = \"info_key\";\n+    private static final String STACK_KEY = \"stack_key\";\n+    /**\n+     * Stack that contains the \"navigation history\".<br>\n+     * The peek is the current video.\n+     */\n+    private final LinkedList<StackItem> stack = new LinkedList<>();\n     @State\n     protected int serviceId = Constants.NO_SERVICE_ID;\n     @State\n     protected String name;\n     @State\n     protected String url;\n+    private int updateFlags = 0;\n+    private boolean autoPlayEnabled;\n+    private boolean showRelatedStreams;\n+    private boolean showComments;\n+    private String selectedTabTag;\n \n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Views\n+    //////////////////////////////////////////////////////////////////////////*/\n     private StreamInfo currentInfo;\n     private Disposable currentWorker;\n     @NonNull\n     private CompositeDisposable disposables = new CompositeDisposable();\n     @Nullable\n     private Disposable positionSubscriber = null;\n-\n     private List<VideoStream> sortedVideoStreams;\n     private int selectedVideoStreamIndex = -1;\n-\n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Views\n-    //////////////////////////////////////////////////////////////////////////*/\n-\n     private Menu menu;\n-\n     private Spinner spinnerToolbar;\n-\n     private LinearLayout contentRootLayoutHiding;\n-\n     private View thumbnailBackgroundButton;\n     private ImageView thumbnailImageView;\n     private ImageView thumbnailPlayButton;\n     private AnimatedProgressBar positionView;\n-\n     private View videoTitleRoot;\n     private TextView videoTitleTextView;\n     private ImageView videoTitleToggleArrow;\n     private TextView videoCountView;\n-\n     private TextView detailControlsBackground;\n     private TextView detailControlsPopup;\n     private TextView detailControlsAddToPlaylist;\n     private TextView detailControlsDownload;\n     private TextView appendControlsDetail;\n     private TextView detailDurationView;\n     private TextView detailPositionView;\n-\n     private LinearLayout videoDescriptionRootLayout;\n     private TextView videoUploadDateView;\n     private TextView videoDescriptionView;\n-\n     private View uploaderRootLayout;\n     private TextView uploaderTextView;\n     private ImageView uploaderThumb;\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMTk3Ng==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401911976", "bodyText": "This comment should not be moved: the things above are not views", "author": "Stypox", "createdAt": "2020-04-01T21:11:17Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -105,110 +105,98 @@\n import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.COMMENTS;\n import static org.schabi.newpipe.util.AnimationUtils.animateView;\n \n-public class VideoDetailFragment\n-        extends BaseStateFragment<StreamInfo>\n-        implements BackPressable,\n-        SharedPreferences.OnSharedPreferenceChangeListener,\n-        View.OnClickListener,\n-        View.OnLongClickListener {\n+public class VideoDetailFragment extends BaseStateFragment<StreamInfo>\n+        implements BackPressable, SharedPreferences.OnSharedPreferenceChangeListener,\n+        View.OnClickListener, View.OnLongClickListener {\n     public static final String AUTO_PLAY = \"auto_play\";\n-\n-    private int updateFlags = 0;\n     private static final int RELATED_STREAMS_UPDATE_FLAG = 0x1;\n     private static final int RESOLUTIONS_MENU_UPDATE_FLAG = 0x2;\n     private static final int TOOLBAR_ITEMS_UPDATE_FLAG = 0x4;\n     private static final int COMMENTS_UPDATE_FLAG = 0x8;\n-\n-    private boolean autoPlayEnabled;\n-    private boolean showRelatedStreams;\n-    private boolean showComments;\n-    private String selectedTabTag;\n-\n+    private static final String COMMENTS_TAB_TAG = \"COMMENTS\";\n+    private static final String RELATED_TAB_TAG = \"NEXT VIDEO\";\n+    private static final String EMPTY_TAB_TAG = \"EMPTY TAB\";\n+    private static final String INFO_KEY = \"info_key\";\n+    private static final String STACK_KEY = \"stack_key\";\n+    /**\n+     * Stack that contains the \"navigation history\".<br>\n+     * The peek is the current video.\n+     */\n+    private final LinkedList<StackItem> stack = new LinkedList<>();\n     @State\n     protected int serviceId = Constants.NO_SERVICE_ID;\n     @State\n     protected String name;\n     @State\n     protected String url;\n+    private int updateFlags = 0;\n+    private boolean autoPlayEnabled;\n+    private boolean showRelatedStreams;\n+    private boolean showComments;\n+    private String selectedTabTag;\n \n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Views\n+    //////////////////////////////////////////////////////////////////////////*/\n     private StreamInfo currentInfo;\n     private Disposable currentWorker;\n     @NonNull\n     private CompositeDisposable disposables = new CompositeDisposable();\n     @Nullable\n     private Disposable positionSubscriber = null;\n-\n     private List<VideoStream> sortedVideoStreams;\n     private int selectedVideoStreamIndex = -1;\n-\n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Views\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMjE3Nw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401912177", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:11:43Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -363,13 +374,11 @@ protected void onRestoreInstanceState(@NonNull Bundle savedState) {\n \n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // OnClick\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMjMxNA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401912314", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:12:00Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -450,12 +465,8 @@ private void toggleTitleAndDescription() {\n         }\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Init\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMjM4NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401912385", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:12:08Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -544,41 +553,42 @@ protected void initListeners() {\n         };\n     }\n \n-    private void initThumbnailViews(@NonNull StreamInfo info) {\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Menu\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    private void initThumbnailViews(@NonNull final StreamInfo info) {\n         thumbnailImageView.setImageResource(R.drawable.dummy_thumbnail_dark);\n         if (!TextUtils.isEmpty(info.getThumbnailUrl())) {\n             final String infoServiceName = NewPipe.getNameOfService(info.getServiceId());\n             final ImageLoadingListener onFailListener = new SimpleImageLoadingListener() {\n                 @Override\n-                public void onLoadingFailed(String imageUri, View view, FailReason failReason) {\n+                public void onLoadingFailed(final String imageUri, final View view,\n+                                            final FailReason failReason) {\n                     showSnackBarError(failReason.getCause(), UserAction.LOAD_IMAGE,\n                             infoServiceName, imageUri, R.string.could_not_load_thumbnails);\n                 }\n             };\n \n-            imageLoader.displayImage(info.getThumbnailUrl(), thumbnailImageView,\n+            IMAGE_LOADER.displayImage(info.getThumbnailUrl(), thumbnailImageView,\n                     ImageDisplayConstants.DISPLAY_THUMBNAIL_OPTIONS, onFailListener);\n         }\n \n         if (!TextUtils.isEmpty(info.getUploaderAvatarUrl())) {\n-            imageLoader.displayImage(info.getUploaderAvatarUrl(), uploaderThumb,\n+            IMAGE_LOADER.displayImage(info.getUploaderAvatarUrl(), uploaderThumb,\n                     ImageDisplayConstants.DISPLAY_AVATAR_OPTIONS);\n         }\n     }\n \n-\n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Menu\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMjU2Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401912563", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:12:31Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -637,96 +647,93 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         }\n     }\n \n-    private void setupActionBarOnError(final String url) {\n-        if (DEBUG) Log.d(TAG, \"setupActionBarHandlerOnError() called with: url = [\" + url + \"]\");\n+    private void setupActionBarOnError(final String u) {\n+        if (DEBUG) {\n+            Log.d(TAG, \"setupActionBarHandlerOnError() called with: url = [\" + u + \"]\");\n+        }\n         Log.e(\"-----\", \"missing code\");\n     }\n \n+    /*//////////////////////////////////////////////////////////////////////////\n+    // OwnStack\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n     private void setupActionBar(final StreamInfo info) {\n-        if (DEBUG) Log.d(TAG, \"setupActionBarHandler() called with: info = [\" + info + \"]\");\n+        if (DEBUG) {\n+            Log.d(TAG, \"setupActionBarHandler() called with: info = [\" + info + \"]\");\n+        }\n         boolean isExternalPlayerEnabled = PreferenceManager.getDefaultSharedPreferences(activity)\n                 .getBoolean(activity.getString(R.string.use_external_video_player_key), false);\n \n-        sortedVideoStreams = ListHelper.getSortedStreamVideosList(\n-                activity,\n-                info.getVideoStreams(),\n-                info.getVideoOnlyStreams(),\n-                false);\n-        selectedVideoStreamIndex = ListHelper.getDefaultResolutionIndex(activity, sortedVideoStreams);\n+        sortedVideoStreams = ListHelper.getSortedStreamVideosList(activity, info.getVideoStreams(),\n+                info.getVideoOnlyStreams(), false);\n+        selectedVideoStreamIndex = ListHelper\n+                .getDefaultResolutionIndex(activity, sortedVideoStreams);\n \n-        final StreamItemAdapter<VideoStream, Stream> streamsAdapter =\n-                new StreamItemAdapter<>(activity,\n-                        new StreamSizeWrapper<>(sortedVideoStreams, activity), isExternalPlayerEnabled);\n+        final StreamItemAdapter<VideoStream, Stream> streamsAdapter = new StreamItemAdapter<>(\n+                activity, new StreamSizeWrapper<>(sortedVideoStreams, activity),\n+                isExternalPlayerEnabled);\n         spinnerToolbar.setAdapter(streamsAdapter);\n         spinnerToolbar.setSelection(selectedVideoStreamIndex);\n         spinnerToolbar.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n             @Override\n-            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n+            public void onItemSelected(final AdapterView<?> parent, final View view,\n+                                       final int position, final long id) {\n                 selectedVideoStreamIndex = position;\n             }\n \n             @Override\n-            public void onNothingSelected(AdapterView<?> parent) {\n-            }\n+            public void onNothingSelected(final AdapterView<?> parent) { }\n         });\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // OwnStack\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzA0Mg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401913042", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:13:29Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java", "diffHunk": "@@ -93,28 +102,23 @@ public void onResume() {\n         if (updateFlags != 0) {\n             if ((updateFlags & LIST_MODE_UPDATE_FLAG) != 0) {\n                 final boolean useGrid = isGridLayout();\n-                itemsList.setLayoutManager(useGrid ? getGridLayoutManager() : getListLayoutManager());\n-                infoListAdapter.setGridItemVariants(useGrid);\n+                itemsList.setLayoutManager(useGrid\n+                        ? getGridLayoutManager() : getListLayoutManager());\n+                infoListAdapter.setUseGridVariant(useGrid);\n                 infoListAdapter.notifyDataSetChanged();\n             }\n             updateFlags = 0;\n         }\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // State Saving\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzcyMA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401913720", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:14:51Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java", "diffHunk": "@@ -63,41 +63,39 @@\n import static org.schabi.newpipe.util.AnimationUtils.animateView;\n \n public class ChannelFragment extends BaseListInfoFragment<ChannelInfo> {\n-\n+    private static final int BUTTON_DEBOUNCE_INTERVAL = 100;\n     private final CompositeDisposable disposables = new CompositeDisposable();\n     private Disposable subscribeButtonMonitor;\n-    private SubscriptionManager subscriptionManager;\n \n     /*//////////////////////////////////////////////////////////////////////////\n     // Views\n     //////////////////////////////////////////////////////////////////////////*/\n-\n+    private SubscriptionManager subscriptionManager;\n     private View headerRootLayout;\n     private ImageView headerChannelBanner;\n     private ImageView headerAvatarView;\n     private TextView headerTitleView;\n     private TextView headerSubscribersTextView;\n     private Button headerSubscribeButton;\n     private View playlistCtrl;\n-\n     private LinearLayout headerPlayAllButton;\n     private LinearLayout headerPopupButton;\n     private LinearLayout headerBackgroundButton;\n-\n     private MenuItem menuRssButton;\n \n-    public static ChannelFragment getInstance(int serviceId, String url, String name) {\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // LifeCycle\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    public static ChannelFragment getInstance(final int serviceId, final String url,\n+                                              final String name) {\n         ChannelFragment instance = new ChannelFragment();\n         instance.setInitialData(serviceId, url, name);\n         return instance;\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // LifeCycle\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzgwMQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401913801", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:15:01Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java", "diffHunk": "@@ -145,21 +154,19 @@ protected View getListHeader() {\n         return headerRootLayout;\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Menu\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzg0Ng==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401913846", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:15:06Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java", "diffHunk": "@@ -107,29 +105,40 @@ public void setUserVisibleHint(boolean isVisibleToUser) {\n     }\n \n     @Override\n-    public void onAttach(Context context) {\n+    public void onAttach(final Context context) {\n         super.onAttach(context);\n         subscriptionManager = new SubscriptionManager(activity);\n     }\n \n     @Override\n-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n+    public View onCreateView(@NonNull final LayoutInflater inflater,\n+                             @Nullable final ViewGroup container,\n+                             @Nullable final Bundle savedInstanceState) {\n         return inflater.inflate(R.layout.fragment_channel, container, false);\n     }\n \n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Init\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n     @Override\n     public void onDestroy() {\n         super.onDestroy();\n-        if (disposables != null) disposables.clear();\n-        if (subscribeButtonMonitor != null) subscribeButtonMonitor.dispose();\n+        if (disposables != null) {\n+            disposables.clear();\n+        }\n+        if (subscribeButtonMonitor != null) {\n+            subscribeButtonMonitor.dispose();\n+        }\n     }\n \n     /*//////////////////////////////////////////////////////////////////////////\n-    // Init\n+    // Menu\n     //////////////////////////////////////////////////////////////////////////*/", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzk2OQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401913969", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:15:21Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java", "diffHunk": "@@ -197,22 +208,16 @@ public boolean onOptionsItemSelected(MenuItem item) {\n         return true;\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Channel Subscription\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNDg1OQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401914859", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else { // Else say we have no uploader\n          \n          \n            \n                    } else { // Otherwise say we have no uploader", "author": "Stypox", "createdAt": "2020-04-01T21:17:12Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java", "diffHunk": "@@ -276,19 +294,20 @@ public void handleResult(@NonNull final PlaylistInfo result) {\n                     }\n                 });\n             }\n-        } else { // Else : say we have no uploader\n+        } else { // Else say we have no uploader", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjI3NA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401916274", "bodyText": "These spaces should stay here", "author": "Stypox", "createdAt": "2020-04-01T21:20:03Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java", "diffHunk": "@@ -114,26 +113,19 @@\n     protected String[] contentFilter = new String[0];\n     @State\n     protected String sortFilter;\n-    \n     // these represtent the last search\n     @State\n     protected String lastSearchedString;\n-    \n     @State\n     protected boolean wasSearchFocused = false;\n-\n     private Map<Integer, String> menuItemToFilterName;\n     private StreamingService service;\n     private String currentPageUrl;\n     private String nextPageUrl;\n     private String contentCountry;\n     private boolean isSuggestionsEnabled = true;\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjI4NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401916285", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:20:05Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java", "diffHunk": "@@ -161,45 +154,49 @@ public static SearchFragment getInstance(int serviceId, String searchString) {\n         return searchFragment;\n     }\n \n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Fragment's LifeCycle\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n     /**\n      * Set wasLoading to true so when the fragment onResume is called, the initial search is done.\n      */\n     private void setSearchOnResume() {\n         wasLoading.set(true);\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Fragment's LifeCycle\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjI5Mg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401916292", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:20:05Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java", "diffHunk": "@@ -289,29 +310,31 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {\n     }\n \n     /*//////////////////////////////////////////////////////////////////////////\n-    // Init\n+    // State Saving\n     //////////////////////////////////////////////////////////////////////////*/", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjczNg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401916736", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:21:02Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedVideosFragment.java", "diffHunk": "@@ -28,68 +29,73 @@\n import io.reactivex.Single;\n import io.reactivex.disposables.CompositeDisposable;\n \n-public class RelatedVideosFragment extends BaseListInfoFragment<RelatedStreamInfo> implements SharedPreferences.OnSharedPreferenceChangeListener{\n-\n+public class RelatedVideosFragment extends BaseListInfoFragment<RelatedStreamInfo>\n+        implements SharedPreferences.OnSharedPreferenceChangeListener {\n+    private static final String INFO_KEY = \"related_info_key\";\n     private CompositeDisposable disposables = new CompositeDisposable();\n     private RelatedStreamInfo relatedStreamInfo;\n     /*//////////////////////////////////////////////////////////////////////////\n     // Views\n     //////////////////////////////////////////////////////////////////////////*/\n     private View headerRootLayout;\n     private Switch aSwitch;\n-\n     private boolean mIsVisibleToUser = false;\n \n-    public static RelatedVideosFragment getInstance(StreamInfo info) {\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // LifeCycle\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    public static RelatedVideosFragment getInstance(final StreamInfo info) {\n         RelatedVideosFragment instance = new RelatedVideosFragment();\n         instance.setInitialData(info);\n         return instance;\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // LifeCycle\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjgyNw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401916827", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:21:13Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedVideosFragment.java", "diffHunk": "@@ -143,62 +159,63 @@ public void handleNextItems(ListExtractor.InfoItemsPage result) {\n     }\n \n     /*//////////////////////////////////////////////////////////////////////////\n-    // OnError\n+    // Utils\n     //////////////////////////////////////////////////////////////////////////*/", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjg4Mg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r401916882", "bodyText": "Why was this moved?", "author": "Stypox", "createdAt": "2020-04-01T21:21:20Z", "path": "app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedVideosFragment.java", "diffHunk": "@@ -143,62 +159,63 @@ public void handleNextItems(ListExtractor.InfoItemsPage result) {\n     }\n \n     /*//////////////////////////////////////////////////////////////////////////\n-    // OnError\n+    // Utils\n     //////////////////////////////////////////////////////////////////////////*/\n \n     @Override\n-    protected boolean onError(Throwable exception) {\n-        if (super.onError(exception)) return true;\n+    protected boolean onError(final Throwable exception) {\n+        if (super.onError(exception)) {\n+            return true;\n+        }\n \n         hideLoading();\n-        showSnackBarError(exception, UserAction.REQUESTED_STREAM, NewPipe.getNameOfService(serviceId), url, R.string.general_error);\n+        showSnackBarError(exception, UserAction.REQUESTED_STREAM,\n+                NewPipe.getNameOfService(serviceId), url, R.string.general_error);\n         return true;\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Utils\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "254925c6350ac01aa3b2a8a3cea666c5ba2e334e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "819e52cab3823c4a8e900f0f5ece87fcb8a34d4c", "url": "https://github.com/TeamNewPipe/NewPipe/commit/819e52cab3823c4a8e900f0f5ece87fcb8a34d4c", "message": "Check code style with Checkstyle", "committedDate": "2020-04-02T13:57:50Z", "type": "commit"}, {"oid": "fda5405e48f7cb1f4f4b9df89052d55c90e8b167", "url": "https://github.com/TeamNewPipe/NewPipe/commit/fda5405e48f7cb1f4f4b9df89052d55c90e8b167", "message": "Improve code style to be more consistent", "committedDate": "2020-04-02T13:57:50Z", "type": "commit"}, {"oid": "63bcc04effdd6946a738c70606832a97e429b7a6", "url": "https://github.com/TeamNewPipe/NewPipe/commit/63bcc04effdd6946a738c70606832a97e429b7a6", "message": "Move things back to its original place", "committedDate": "2020-04-02T13:57:50Z", "type": "commit"}, {"oid": "55480c8290d742533edc6c610022a099393d5a2b", "url": "https://github.com/TeamNewPipe/NewPipe/commit/55480c8290d742533edc6c610022a099393d5a2b", "message": "Disable VisibilityModifier in checkstyle.xml", "committedDate": "2020-04-02T13:57:50Z", "type": "commit"}, {"oid": "b6c6dc72827638ff77d7a47330387c7cc0211d53", "url": "https://github.com/TeamNewPipe/NewPipe/commit/b6c6dc72827638ff77d7a47330387c7cc0211d53", "message": "Use Checkstyle for org.schabi.newpipe.streams as well", "committedDate": "2020-04-02T14:48:57Z", "type": "commit"}, {"oid": "282d3dbf8cfd8641ed5973d78a097635eaff81b8", "url": "https://github.com/TeamNewPipe/NewPipe/commit/282d3dbf8cfd8641ed5973d78a097635eaff81b8", "message": "Disable MissingSwitchDefault in checkstyle.xml", "committedDate": "2020-04-02T14:48:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MTYwNQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402481605", "bodyText": "Do we really need this?", "author": "TobiGr", "createdAt": "2020-04-02T17:22:37Z", "path": "checkstyle.xml", "diffHunk": "@@ -0,0 +1,184 @@\n+<?xml version=\"1.0\"?>\n+<!DOCTYPE module PUBLIC\n+          \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"\n+          \"https://checkstyle.org/dtds/configuration_1_3.dtd\">\n+<module name=\"Checker\">\n+    <!--\n+        If you set the basedir property below, then all reported file\n+        names will be relative to the specified directory. See\n+        https://checkstyle.org/5.x/config.html#Checker\n+\n+        <property name=\"basedir\" value=\"${basedir}\"/>\n+    -->\n+    <property name=\"severity\" value=\"error\"/>\n+\n+    <property name=\"fileExtensions\" value=\"java, properties, xml\"/>\n+\n+    <!-- Excludes all 'module-info.java' files              -->\n+    <!-- See https://checkstyle.org/config_filefilters.html -->\n+    <module name=\"BeforeExecutionExclusionFileFilter\">\n+        <property name=\"fileNamePattern\" value=\"module\\-info\\.java$\"/>\n+    </module>\n+\n+    <!-- https://checkstyle.org/config_filters.html#SuppressionFilter -->\n+    <module name=\"SuppressionFilter\">\n+        <property name=\"file\" value=\"${org.checkstyle.sun.suppressionfilter.config}\"\n+                  default=\"checkstyle-suppressions.xml\" />\n+        <property name=\"optional\" value=\"true\"/>\n+    </module>\n+\n+    <!-- Checks that a package-info.java file exists for each package.     -->\n+    <!-- See https://checkstyle.org/config_javadoc.html#JavadocPackage -->\n+    <!--<module name=\"JavadocPackage\"/>-->\n+\n+    <!-- Checks whether files end with a new line.                        -->\n+    <!-- See https://checkstyle.org/config_misc.html#NewlineAtEndOfFile -->\n+    <module name=\"NewlineAtEndOfFile\"/>\n+\n+    <!-- Checks that property files contain the same keys.         -->\n+    <!-- See https://checkstyle.org/config_misc.html#Translation -->\n+    <module name=\"Translation\"/>\n+\n+    <!-- Checks for Size Violations.                    -->\n+    <!-- See https://checkstyle.org/config_sizes.html -->\n+    <module name=\"FileLength\"/>\n+    <module name=\"LineLength\">\n+      <property name=\"max\" value=\"100\"/>\n+      <property name=\"fileExtensions\" value=\"java\"/>\n+    </module>\n+\n+    <!-- Checks for whitespace                               -->\n+    <!-- See https://checkstyle.org/config_whitespace.html -->\n+    <module name=\"FileTabCharacter\"/>\n+\n+    <!-- Miscellaneous other checks.                   -->\n+    <!-- See https://checkstyle.org/config_misc.html -->\n+    <module name=\"RegexpSingleline\">\n+       <property name=\"format\" value=\"\\s+$\"/>\n+       <property name=\"minimum\" value=\"0\"/>\n+       <property name=\"maximum\" value=\"0\"/>\n+       <property name=\"message\" value=\"Line has trailing spaces.\"/>\n+    </module>\n+\n+    <!-- Checks for Headers                                -->\n+    <!-- See https://checkstyle.org/config_header.html   -->\n+    <!-- <module name=\"Header\"> -->\n+    <!--   <property name=\"headerFile\" value=\"${checkstyle.header.file}\"/> -->\n+    <!--   <property name=\"fileExtensions\" value=\"java\"/> -->\n+    <!-- </module> -->\n+\n+    <module name=\"TreeWalker\">\n+        <!-- Checks for Javadoc comments.                     -->\n+        <!-- See https://checkstyle.org/config_javadoc.html -->\n+        <module name=\"InvalidJavadocPosition\"/>\n+        <module name=\"JavadocMethod\"/>\n+        <module name=\"JavadocType\"/>\n+        <!--<module name=\"JavadocVariable\"/>-->\n+        <module name=\"JavadocStyle\"/>\n+        <!--<module name=\"MissingJavadocMethod\"/>-->\n+\n+        <!-- Checks for Naming Conventions.                  -->\n+        <!-- See https://checkstyle.org/config_naming.html -->\n+        <module name=\"ConstantName\"/>\n+        <module name=\"LocalFinalVariableName\"/>\n+        <module name=\"LocalVariableName\"/>\n+        <module name=\"MemberName\">\n+            <property name=\"format\" value=\"^(TAG|DEBUG|[a-z][a-zA-Z0-9]*)$\"/>\n+        </module>\n+        <module name=\"MethodName\"/>\n+        <module name=\"PackageName\"/>\n+        <module name=\"ParameterName\"/>\n+        <module name=\"StaticVariableName\"/>\n+        <module name=\"TypeName\"/>\n+\n+        <!-- Checks for imports                              -->\n+        <!-- See https://checkstyle.org/config_import.html -->\n+        <module name=\"AvoidStarImport\"/>\n+        <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->\n+        <module name=\"RedundantImport\"/>\n+        <module name=\"UnusedImports\"/>\n+\n+        <!-- Checks for Size Violations.                    -->\n+        <!-- See https://checkstyle.org/config_sizes.html -->\n+        <module name=\"MethodLength\">\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>\n+        <module name=\"ParameterNumber\">\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>\n+\n+        <!-- Checks for whitespace                               -->\n+        <!-- See https://checkstyle.org/config_whitespace.html -->\n+        <module name=\"EmptyForIteratorPad\"/>\n+        <module name=\"GenericWhitespace\"/>\n+        <module name=\"MethodParamPad\"/>\n+        <module name=\"NoWhitespaceAfter\"/>\n+        <module name=\"NoWhitespaceBefore\"/>\n+        <module name=\"OperatorWrap\"/>\n+        <module name=\"ParenPad\"/>\n+        <module name=\"TypecastParenPad\"/>\n+        <module name=\"WhitespaceAfter\"/>\n+        <module name=\"WhitespaceAround\"/>\n+\n+        <!-- Modifier Checks                                    -->\n+        <!-- See https://checkstyle.org/config_modifiers.html -->\n+        <module name=\"ModifierOrder\"/>\n+        <module name=\"RedundantModifier\"/>\n+\n+        <!-- Checks for blocks. You know, those {}'s         -->\n+        <!-- See https://checkstyle.org/config_blocks.html -->\n+        <module name=\"AvoidNestedBlocks\"/>\n+        <module name=\"EmptyBlock\"/>\n+        <module name=\"LeftCurly\"/>\n+        <module name=\"NeedBraces\"/>\n+        <module name=\"RightCurly\"/>\n+\n+        <!-- Checks for common coding problems               -->\n+        <!-- See https://checkstyle.org/config_coding.html -->\n+        <module name=\"EmptyStatement\"/>\n+        <module name=\"EqualsHashCode\">\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>", "originalCommit": "282d3dbf8cfd8641ed5973d78a097635eaff81b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4OTM3MQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402489371", "bodyText": "That was in the config I mentioned, though I changed its severity to warning instead of error. Quote from Checkstyle's docs:\n\nRationale: The contract of equals() and hashCode() requires that equal objects have the same hashCode. Therefore, whenever you override equals() you must override hashCode() to ensure that your class can be used in hash-based collections.", "author": "wb9688", "createdAt": "2020-04-02T17:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MTYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NTM2Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402495363", "bodyText": "I think this should stay here, as a warning, since it could help preventing nasty hash bugs when putting custom classes in lib containers like HashMap", "author": "Stypox", "createdAt": "2020-04-02T17:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MTYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MzQ1Nw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402483457", "bodyText": "I think this is not needed as well.", "author": "TobiGr", "createdAt": "2020-04-02T17:25:12Z", "path": "checkstyle.xml", "diffHunk": "@@ -0,0 +1,184 @@\n+<?xml version=\"1.0\"?>\n+<!DOCTYPE module PUBLIC\n+          \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"\n+          \"https://checkstyle.org/dtds/configuration_1_3.dtd\">\n+<module name=\"Checker\">\n+    <!--\n+        If you set the basedir property below, then all reported file\n+        names will be relative to the specified directory. See\n+        https://checkstyle.org/5.x/config.html#Checker\n+\n+        <property name=\"basedir\" value=\"${basedir}\"/>\n+    -->\n+    <property name=\"severity\" value=\"error\"/>\n+\n+    <property name=\"fileExtensions\" value=\"java, properties, xml\"/>\n+\n+    <!-- Excludes all 'module-info.java' files              -->\n+    <!-- See https://checkstyle.org/config_filefilters.html -->\n+    <module name=\"BeforeExecutionExclusionFileFilter\">\n+        <property name=\"fileNamePattern\" value=\"module\\-info\\.java$\"/>\n+    </module>\n+\n+    <!-- https://checkstyle.org/config_filters.html#SuppressionFilter -->\n+    <module name=\"SuppressionFilter\">\n+        <property name=\"file\" value=\"${org.checkstyle.sun.suppressionfilter.config}\"\n+                  default=\"checkstyle-suppressions.xml\" />\n+        <property name=\"optional\" value=\"true\"/>\n+    </module>\n+\n+    <!-- Checks that a package-info.java file exists for each package.     -->\n+    <!-- See https://checkstyle.org/config_javadoc.html#JavadocPackage -->\n+    <!--<module name=\"JavadocPackage\"/>-->\n+\n+    <!-- Checks whether files end with a new line.                        -->\n+    <!-- See https://checkstyle.org/config_misc.html#NewlineAtEndOfFile -->\n+    <module name=\"NewlineAtEndOfFile\"/>\n+\n+    <!-- Checks that property files contain the same keys.         -->\n+    <!-- See https://checkstyle.org/config_misc.html#Translation -->\n+    <module name=\"Translation\"/>\n+\n+    <!-- Checks for Size Violations.                    -->\n+    <!-- See https://checkstyle.org/config_sizes.html -->\n+    <module name=\"FileLength\"/>\n+    <module name=\"LineLength\">\n+      <property name=\"max\" value=\"100\"/>\n+      <property name=\"fileExtensions\" value=\"java\"/>\n+    </module>\n+\n+    <!-- Checks for whitespace                               -->\n+    <!-- See https://checkstyle.org/config_whitespace.html -->\n+    <module name=\"FileTabCharacter\"/>\n+\n+    <!-- Miscellaneous other checks.                   -->\n+    <!-- See https://checkstyle.org/config_misc.html -->\n+    <module name=\"RegexpSingleline\">\n+       <property name=\"format\" value=\"\\s+$\"/>\n+       <property name=\"minimum\" value=\"0\"/>\n+       <property name=\"maximum\" value=\"0\"/>\n+       <property name=\"message\" value=\"Line has trailing spaces.\"/>\n+    </module>\n+\n+    <!-- Checks for Headers                                -->\n+    <!-- See https://checkstyle.org/config_header.html   -->\n+    <!-- <module name=\"Header\"> -->\n+    <!--   <property name=\"headerFile\" value=\"${checkstyle.header.file}\"/> -->\n+    <!--   <property name=\"fileExtensions\" value=\"java\"/> -->\n+    <!-- </module> -->\n+\n+    <module name=\"TreeWalker\">\n+        <!-- Checks for Javadoc comments.                     -->\n+        <!-- See https://checkstyle.org/config_javadoc.html -->\n+        <module name=\"InvalidJavadocPosition\"/>\n+        <module name=\"JavadocMethod\"/>\n+        <module name=\"JavadocType\"/>\n+        <!--<module name=\"JavadocVariable\"/>-->\n+        <module name=\"JavadocStyle\"/>\n+        <!--<module name=\"MissingJavadocMethod\"/>-->\n+\n+        <!-- Checks for Naming Conventions.                  -->\n+        <!-- See https://checkstyle.org/config_naming.html -->\n+        <module name=\"ConstantName\"/>\n+        <module name=\"LocalFinalVariableName\"/>\n+        <module name=\"LocalVariableName\"/>\n+        <module name=\"MemberName\">\n+            <property name=\"format\" value=\"^(TAG|DEBUG|[a-z][a-zA-Z0-9]*)$\"/>\n+        </module>\n+        <module name=\"MethodName\"/>\n+        <module name=\"PackageName\"/>\n+        <module name=\"ParameterName\"/>\n+        <module name=\"StaticVariableName\"/>\n+        <module name=\"TypeName\"/>\n+\n+        <!-- Checks for imports                              -->\n+        <!-- See https://checkstyle.org/config_import.html -->\n+        <module name=\"AvoidStarImport\"/>\n+        <module name=\"IllegalImport\"/> <!-- defaults to sun.* packages -->\n+        <module name=\"RedundantImport\"/>\n+        <module name=\"UnusedImports\"/>\n+\n+        <!-- Checks for Size Violations.                    -->\n+        <!-- See https://checkstyle.org/config_sizes.html -->\n+        <module name=\"MethodLength\">\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>\n+        <module name=\"ParameterNumber\">\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>\n+\n+        <!-- Checks for whitespace                               -->\n+        <!-- See https://checkstyle.org/config_whitespace.html -->\n+        <module name=\"EmptyForIteratorPad\"/>\n+        <module name=\"GenericWhitespace\"/>\n+        <module name=\"MethodParamPad\"/>\n+        <module name=\"NoWhitespaceAfter\"/>\n+        <module name=\"NoWhitespaceBefore\"/>\n+        <module name=\"OperatorWrap\"/>\n+        <module name=\"ParenPad\"/>\n+        <module name=\"TypecastParenPad\"/>\n+        <module name=\"WhitespaceAfter\"/>\n+        <module name=\"WhitespaceAround\"/>\n+\n+        <!-- Modifier Checks                                    -->\n+        <!-- See https://checkstyle.org/config_modifiers.html -->\n+        <module name=\"ModifierOrder\"/>\n+        <module name=\"RedundantModifier\"/>\n+\n+        <!-- Checks for blocks. You know, those {}'s         -->\n+        <!-- See https://checkstyle.org/config_blocks.html -->\n+        <module name=\"AvoidNestedBlocks\"/>\n+        <module name=\"EmptyBlock\"/>\n+        <module name=\"LeftCurly\"/>\n+        <module name=\"NeedBraces\"/>\n+        <module name=\"RightCurly\"/>\n+\n+        <!-- Checks for common coding problems               -->\n+        <!-- See https://checkstyle.org/config_coding.html -->\n+        <module name=\"EmptyStatement\"/>\n+        <module name=\"EqualsHashCode\">\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>\n+        <module name=\"HiddenField\">\n+            <property name=\"ignoreConstructorParameter\" value=\"true\"/>\n+            <property name=\"ignoreSetter\" value=\"true\"/>\n+        </module>\n+        <module name=\"IllegalInstantiation\"/>\n+        <module name=\"InnerAssignment\"/>\n+        <!--<module name=\"MagicNumber\"/>-->\n+        <!--<module name=\"MissingSwitchDefault\">\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>-->\n+        <module name=\"MultipleVariableDeclarations\"/>\n+        <module name=\"SimplifyBooleanExpression\"/>\n+        <module name=\"SimplifyBooleanReturn\"/>\n+\n+        <!-- Checks for class design                         -->\n+        <!-- See https://checkstyle.org/config_design.html -->\n+        <!--<module name=\"DesignForExtension\"/>-->\n+        <module name=\"FinalClass\"/>\n+        <module name=\"HideUtilityClassConstructor\"/>\n+        <module name=\"InterfaceIsType\"/>\n+        <!--<module name=\"VisibilityModifier\">\n+            <property name=\"ignoreAnnotationCanonicalNames\" value=\"State,ColumnInfo\"/>\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>-->\n+\n+        <!-- Miscellaneous other checks.                   -->\n+        <!-- See https://checkstyle.org/config_misc.html -->\n+        <module name=\"ArrayTypeStyle\"/>\n+        <module name=\"FinalParameters\"/>\n+        <module name=\"TodoComment\">\n+            <property name=\"format\" value=\"(TODO:|FIXME:)\"/>\n+            <property name=\"severity\" value=\"warning\"/>\n+        </module>", "originalCommit": "282d3dbf8cfd8641ed5973d78a097635eaff81b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MTQzNg==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402491436", "bodyText": "This was also in the config I mentioned, though I changed it to also pick up FIXME comments and changed its severity to warning as well. Maybe we should indeed just disable this.", "author": "wb9688", "createdAt": "2020-04-02T17:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NjUzOA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402496538", "bodyText": "These are not really something to \"solve\". Yes, they need to be solved sooner or later, but it's not something someone creating a normal PR should care and be notified about imho.", "author": "Stypox", "createdAt": "2020-04-02T17:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MzQ1Nw=="}], "type": "inlineReview"}, {"oid": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "url": "https://github.com/TeamNewPipe/NewPipe/commit/fed9197d23c1d7e2c37653cac4ad52de7168ed27", "message": "Disable TodoComment in checkstyle.xml", "committedDate": "2020-04-02T17:43:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDcwOA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402560708", "bodyText": "Mmmh, why was this line automatically changed here, but not in info_list/holder/ChannelMiniInfoItemHolder.java line 36|41? I'd revert it to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ChannelInfoItem item;\n          \n          \n            \n                    item = (ChannelInfoItem) infoItem;\n          \n          \n            \n                    final ChannelInfoItem item = (ChannelInfoItem) infoItem;", "author": "Stypox", "createdAt": "2020-04-02T19:31:02Z", "path": "app/src/main/java/org/schabi/newpipe/info_list/holder/ChannelInfoItemHolder.java", "diffHunk": "@@ -31,19 +31,23 @@\n  */\n \n public class ChannelInfoItemHolder extends ChannelMiniInfoItemHolder {\n-    public final TextView itemChannelDescriptionView;\n+    private final TextView itemChannelDescriptionView;\n \n-    public ChannelInfoItemHolder(InfoItemBuilder infoItemBuilder, ViewGroup parent) {\n+    public ChannelInfoItemHolder(final InfoItemBuilder infoItemBuilder, final ViewGroup parent) {\n         super(infoItemBuilder, R.layout.list_channel_item, parent);\n         itemChannelDescriptionView = itemView.findViewById(R.id.itemChannelDescriptionView);\n     }\n \n     @Override\n-    public void updateFromItem(final InfoItem infoItem, final HistoryRecordManager historyRecordManager) {\n+    public void updateFromItem(final InfoItem infoItem,\n+                               final HistoryRecordManager historyRecordManager) {\n         super.updateFromItem(infoItem, historyRecordManager);\n \n-        if (!(infoItem instanceof ChannelInfoItem)) return;\n-        final ChannelInfoItem item = (ChannelInfoItem) infoItem;\n+        if (!(infoItem instanceof ChannelInfoItem)) {\n+            return;\n+        }\n+        final ChannelInfoItem item;\n+        item = (ChannelInfoItem) infoItem;", "originalCommit": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDgwMA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402900800", "bodyText": "Yes, that's stupid indeed.", "author": "wb9688", "createdAt": "2020-04-03T10:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2NTE3NA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402565174", "bodyText": "This was moved, too", "author": "Stypox", "createdAt": "2020-04-02T19:39:24Z", "path": "app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java", "diffHunk": "@@ -179,18 +192,14 @@ protected void postErrorResult(String title, String text) {\n                 .setContentTitle(getString(getTitle()));\n     }\n \n-    /*//////////////////////////////////////////////////////////////////////////\n-    // Toast\n-    //////////////////////////////////////////////////////////////////////////*/\n-", "originalCommit": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDg4NQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402900885", "bodyText": "I didn't see that.", "author": "wb9688", "createdAt": "2020-04-03T10:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2NTE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2OTIzNA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402569234", "bodyText": "Not sure if this parameter should be renamed. In the end rootView contains another information: that view is the root one", "author": "Stypox", "createdAt": "2020-04-02T19:47:04Z", "path": "app/src/main/java/org/schabi/newpipe/player/MainVideoPlayer.java", "diffHunk": "@@ -472,49 +501,49 @@ public void onPlaybackParameterChanged(float playbackTempo, float playbackPitch,\n         }\n \n         @Override\n-        public void initViews(View rootView) {\n-            super.initViews(rootView);\n-            this.titleTextView = rootView.findViewById(R.id.titleTextView);\n-            this.channelTextView = rootView.findViewById(R.id.channelTextView);\n-            this.volumeRelativeLayout = rootView.findViewById(R.id.volumeRelativeLayout);\n-            this.volumeProgressBar = rootView.findViewById(R.id.volumeProgressBar);\n-            this.volumeImageView = rootView.findViewById(R.id.volumeImageView);\n-            this.brightnessRelativeLayout = rootView.findViewById(R.id.brightnessRelativeLayout);\n-            this.brightnessProgressBar = rootView.findViewById(R.id.brightnessProgressBar);\n-            this.brightnessImageView = rootView.findViewById(R.id.brightnessImageView);\n-            this.queueButton = rootView.findViewById(R.id.queueButton);\n-            this.repeatButton = rootView.findViewById(R.id.repeatButton);\n-            this.shuffleButton = rootView.findViewById(R.id.shuffleButton);\n-\n-            this.playPauseButton = rootView.findViewById(R.id.playPauseButton);\n-            this.playPreviousButton = rootView.findViewById(R.id.playPreviousButton);\n-            this.playNextButton = rootView.findViewById(R.id.playNextButton);\n-            this.closeButton = rootView.findViewById(R.id.closeButton);\n-\n-            this.moreOptionsButton = rootView.findViewById(R.id.moreOptionsButton);\n-            this.secondaryControls = rootView.findViewById(R.id.secondaryControls);\n-            this.kodiButton = rootView.findViewById(R.id.kodi);\n-            this.shareButton = rootView.findViewById(R.id.share);\n-            this.toggleOrientationButton = rootView.findViewById(R.id.toggleOrientation);\n-            this.switchBackgroundButton = rootView.findViewById(R.id.switchBackground);\n-            this.muteButton = rootView.findViewById(R.id.switchMute);\n-            this.switchPopupButton = rootView.findViewById(R.id.switchPopup);\n+        public void initViews(final View view) {", "originalCommit": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTEwNQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402901105", "bodyText": "That was intentional, because of the HiddenField rule.", "author": "wb9688", "createdAt": "2020-04-03T10:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2OTIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxOTg2MA==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402919860", "bodyText": "Ah, I see", "author": "Stypox", "createdAt": "2020-04-03T10:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2OTIzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU3MTQ0Ng==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402571446", "bodyText": "Also here for the rootView, maybe also other places?", "author": "Stypox", "createdAt": "2020-04-02T19:51:00Z", "path": "app/src/main/java/org/schabi/newpipe/player/PopupVideoPlayer.java", "diffHunk": "@@ -499,29 +579,29 @@ private void updateWindowFlags(final int flags) {\n         private View extraOptionsView;\n         private View closingOverlayView;\n \n+        VideoPlayerImpl(final Context context) {\n+            super(\"VideoPlayerImpl\" + PopupVideoPlayer.TAG, context);\n+        }\n+\n         @Override\n-        public void handleIntent(Intent intent) {\n+        public void handleIntent(final Intent intent) {\n             super.handleIntent(intent);\n \n             resetNotification();\n             startForeground(NOTIFICATION_ID, notBuilder.build());\n         }\n \n-        VideoPlayerImpl(final Context context) {\n-            super(\"VideoPlayerImpl\" + PopupVideoPlayer.TAG, context);\n-        }\n-\n         @Override\n-        public void initViews(View rootView) {\n-            super.initViews(rootView);\n-            resizingIndicator = rootView.findViewById(R.id.resizing_indicator);\n-            fullScreenButton = rootView.findViewById(R.id.fullScreenButton);\n+        public void initViews(final View view) {", "originalCommit": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU3MjM0Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402572343", "bodyText": "Also here", "author": "Stypox", "createdAt": "2020-04-02T19:52:40Z", "path": "app/src/main/java/org/schabi/newpipe/player/VideoPlayer.java", "diffHunk": "@@ -154,52 +157,65 @@\n \n     ///////////////////////////////////////////////////////////////////////////\n \n-    public VideoPlayer(String debugTag, Context context) {\n+    public VideoPlayer(final String debugTag, final Context context) {\n         super(context);\n         this.TAG = debugTag;\n         this.resolver = new VideoPlaybackResolver(context, dataSource, getQualityResolver());\n     }\n \n-    public void setup(View rootView) {\n-        initViews(rootView);\n+    // workaround to match normalized captions like english to English or deutsch to Deutsch\n+    private static boolean containsCaseInsensitive(final List<String> list, final String toFind) {\n+        for (String i : list) {\n+            if (i.equalsIgnoreCase(toFind)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public void setup(final View view) {\n+        initViews(view);\n         setup();\n     }\n \n-    public void initViews(View rootView) {\n-        this.rootView = rootView;\n-        this.aspectRatioFrameLayout = rootView.findViewById(R.id.aspectRatioLayout);\n-        this.surfaceView = rootView.findViewById(R.id.surfaceView);\n-        this.surfaceForeground = rootView.findViewById(R.id.surfaceForeground);\n-        this.loadingPanel = rootView.findViewById(R.id.loading_panel);\n-        this.endScreen = rootView.findViewById(R.id.endScreen);\n-        this.controlAnimationView = rootView.findViewById(R.id.controlAnimationView);\n-        this.controlsRoot = rootView.findViewById(R.id.playbackControlRoot);\n-        this.currentDisplaySeek = rootView.findViewById(R.id.currentDisplaySeek);\n-        this.playbackSeekBar = rootView.findViewById(R.id.playbackSeekBar);\n-        this.playbackCurrentTime = rootView.findViewById(R.id.playbackCurrentTime);\n-        this.playbackEndTime = rootView.findViewById(R.id.playbackEndTime);\n-        this.playbackLiveSync = rootView.findViewById(R.id.playbackLiveSync);\n-        this.playbackSpeedTextView = rootView.findViewById(R.id.playbackSpeed);\n-        this.bottomControlsRoot = rootView.findViewById(R.id.bottomControls);\n-        this.topControlsRoot = rootView.findViewById(R.id.topControls);\n-        this.qualityTextView = rootView.findViewById(R.id.qualityTextView);\n-\n-        this.subtitleView = rootView.findViewById(R.id.subtitleView);\n+    public void initViews(final View view) {", "originalCommit": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU3NDUwOQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402574509", "bodyText": "Comment should not be removed", "author": "Stypox", "createdAt": "2020-04-02T19:56:37Z", "path": "app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java", "diffHunk": "@@ -407,17 +459,21 @@ private void onMediaSourceReceived(@NonNull final PlayQueueItem item,\n      * {@link com.google.android.exoplayer2.source.ConcatenatingMediaSource}\n      * for a given {@link PlayQueueItem} needs replacement, either due to gapless playback\n      * readiness or playlist desynchronization.\n-     * <br><br>\n+     * <p>\n      * If the given {@link PlayQueueItem} is currently being played and is already loaded,\n      * then correction is not only needed if the playlist is desynchronized. Otherwise, the\n      * check depends on the status (e.g. expiration or placeholder) of the\n      * {@link ManagedMediaSource}.\n-     * */\n+     * </p>\n+     *\n+     * @param item {@link PlayQueueItem} to check\n+     * @return whether a correction is needed\n+     */\n     private boolean isCorrectionNeeded(@NonNull final PlayQueueItem item) {\n         final int index = playQueue.indexOf(item);\n         final ManagedMediaSource mediaSource = playlist.get(index);\n         return mediaSource != null && mediaSource.shouldBeReplacedWith(item,\n-                /*mightBeInProgress=*/index != playQueue.getIndex());\n+                index != playQueue.getIndex());", "originalCommit": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTQyOQ==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402901429", "bodyText": "I removed that because Android Studio already shows that, so it isn't needed.", "author": "wb9688", "createdAt": "2020-04-03T10:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU3NDUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxOTY2Mw==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402919663", "bodyText": "Oh ok", "author": "Stypox", "createdAt": "2020-04-03T10:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU3NDUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU3NDc0Ng==", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3282#discussion_r402574746", "bodyText": "Comment should not be removed", "author": "Stypox", "createdAt": "2020-04-02T19:57:03Z", "path": "app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java", "diffHunk": "@@ -430,42 +486,53 @@ private boolean isCorrectionNeeded(@NonNull final PlayQueueItem item) {\n      * <br><br>\n      * Under both cases, {@link #maybeSync()} will be called to ensure the listener\n      * is up-to-date.\n-     * */\n+     */\n     private void maybeRenewCurrentIndex() {\n         final int currentIndex = playQueue.getIndex();\n         final ManagedMediaSource currentSource = playlist.get(currentIndex);\n-        if (currentSource == null) return;\n+        if (currentSource == null) {\n+            return;\n+        }\n \n         final PlayQueueItem currentItem = playQueue.getItem();\n-        if (!currentSource.shouldBeReplacedWith(currentItem, /*canInterruptOnRenew=*/true)) {\n+        if (!currentSource.shouldBeReplacedWith(currentItem, true)) {", "originalCommit": "fed9197d23c1d7e2c37653cac4ad52de7168ed27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15a53d299d2aa29cdda3a5b6b1c1101a9628a1d0", "url": "https://github.com/TeamNewPipe/NewPipe/commit/15a53d299d2aa29cdda3a5b6b1c1101a9628a1d0", "message": "Revert some more changes", "committedDate": "2020-04-03T13:48:38Z", "type": "commit"}]}