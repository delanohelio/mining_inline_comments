{"pr_number": 105, "pr_title": "Impl IForgeBlockState.hasTileEntity and createTileEntity", "pr_createdAt": "2020-06-24T11:22:54Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/105", "timeline": [{"oid": "675e29caee01b85591b02af7adbd484d9b932e90", "url": "https://github.com/PatchworkMC/patchwork-api/commit/675e29caee01b85591b02af7adbd484d9b932e90", "message": "Impl IForgeBlockState.hasTileEntity and createTileEntity", "committedDate": "2020-06-24T11:02:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NTk5MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445265991", "bodyText": "I don't understand what's going on here?", "author": "TheGlitch76", "createdAt": "2020-06-25T01:58:24Z", "path": "patchwork-extensions-block/README.MD", "diffHunk": "@@ -0,0 +1,31 @@\n+1. `IForgeBlockState.hasTileEntity` and `IForgeBlockState.createTileEntity`\n+\t// TODO Call locations: Patches: Block, Block*, PistonBlock*, RepeaterBlock*, WorldRenderer*, ChunkRenderer*, BlockArgumentParser*, FallingBlockEntity*, ChestBlockEntity*, HopperBlockEntity*, Explosion*, World*, WorldChunk*, ChunkRegion*, ChunkHolder*, Forge classes: ForgeHooks, FluidUtil, ForgeHooks*, VanillaInventoryCodeHooks*\n+```", "originalCommit": "675e29caee01b85591b02af7adbd484d9b932e90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODk4OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r448128988", "bodyText": "I was trying to record all patched locations", "author": "rikka0w0", "createdAt": "2020-07-01T05:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NTk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2Njg4Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445266886", "bodyText": "use an IllegalStateException or some other RuntimeException subclass", "author": "TheGlitch76", "createdAt": "2020-06-25T02:01:36Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/impl/extensions/block/BlockContext.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.extensions.block;\n+\n+import net.minecraftforge.common.extensions.IForgeBlock;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+\n+public class BlockContext {\n+\tprivate static final ThreadLocal<Object> hasBlockEntity_blockState = createContext();\n+\n+\t//////////////////////////////////////////////////////////////\n+\t/// Context helper\n+\t/// Pass parameters without using method args\n+\t/// Thread safe, but DOES NOT support recursive calls\n+\t/// It is the caller's responsibility to maintain the context\n+\t//////////////////////////////////////////////////////////////\n+\tprivate static final Object CLEAN_MARKER = new Object();\n+\n+\tpublic static ThreadLocal<Object> createContext() {\n+\t\treturn ThreadLocal.withInitial(() -> BlockContext.CLEAN_MARKER);\n+\t}\n+\n+\tpublic static void pushContext(ThreadLocal<Object> stack, Object value) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue != CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not clean.\");", "originalCommit": "675e29caee01b85591b02af7adbd484d9b932e90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MDA2NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r448170064", "bodyText": "fixed in the latest commit", "author": "rikka0w0", "createdAt": "2020-07-01T07:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2Njg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzQ2NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445267464", "bodyText": "Calling this a \"stack\" and using related terminology seems like a misnomer as it only can hold one value.", "author": "TheGlitch76", "createdAt": "2020-06-25T02:04:13Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/impl/extensions/block/BlockContext.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.extensions.block;\n+\n+import net.minecraftforge.common.extensions.IForgeBlock;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+\n+public class BlockContext {\n+\tprivate static final ThreadLocal<Object> hasBlockEntity_blockState = createContext();\n+\n+\t//////////////////////////////////////////////////////////////\n+\t/// Context helper\n+\t/// Pass parameters without using method args\n+\t/// Thread safe, but DOES NOT support recursive calls\n+\t/// It is the caller's responsibility to maintain the context\n+\t//////////////////////////////////////////////////////////////\n+\tprivate static final Object CLEAN_MARKER = new Object();\n+\n+\tpublic static ThreadLocal<Object> createContext() {\n+\t\treturn ThreadLocal.withInitial(() -> BlockContext.CLEAN_MARKER);\n+\t}\n+\n+\tpublic static void pushContext(ThreadLocal<Object> stack, Object value) {", "originalCommit": "675e29caee01b85591b02af7adbd484d9b932e90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyOTY3Mw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r448129673", "bodyText": "I forgot to change the function name, in the first version it was actually a ThreadLocal<Stack>. Later I find that by carefully control the lifespan of the introduced ThreadLocal variable, we don't need a ThreadLocal> to support recursive call. I will rename these functions in the next commit.", "author": "rikka0w0", "createdAt": "2020-07-01T05:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MDA1Mg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r448170052", "bodyText": "fixed in the latest commit", "author": "rikka0w0", "createdAt": "2020-07-01T07:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzY5Mw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445267693", "bodyText": "Please don't hijack Blocks.CHEST for this unless it's absolutely needed.", "author": "TheGlitch76", "createdAt": "2020-06-25T02:05:13Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/impl/extensions/block/BlockContext.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.extensions.block;\n+\n+import net.minecraftforge.common.extensions.IForgeBlock;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+\n+public class BlockContext {\n+\tprivate static final ThreadLocal<Object> hasBlockEntity_blockState = createContext();\n+\n+\t//////////////////////////////////////////////////////////////\n+\t/// Context helper\n+\t/// Pass parameters without using method args\n+\t/// Thread safe, but DOES NOT support recursive calls\n+\t/// It is the caller's responsibility to maintain the context\n+\t//////////////////////////////////////////////////////////////\n+\tprivate static final Object CLEAN_MARKER = new Object();\n+\n+\tpublic static ThreadLocal<Object> createContext() {\n+\t\treturn ThreadLocal.withInitial(() -> BlockContext.CLEAN_MARKER);\n+\t}\n+\n+\tpublic static void pushContext(ThreadLocal<Object> stack, Object value) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue != CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not clean.\");\n+\t\t}\n+\n+\t\tstack.set(value);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T getContext(ThreadLocal<Object> stack) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue == CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not set.\");\n+\t\t}\n+\n+\t\treturn (T) stack.get();\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T getContextOr(ThreadLocal<Object> stack, T defaultValue) {\n+\t\tObject value = stack.get();\n+\n+\t\tif (value == CLEAN_MARKER) {\n+\t\t\treturn defaultValue;\n+\t\t} else {\n+\t\t\treturn (T) value;\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T popContext(ThreadLocal<Object> stack) {\n+\t\tObject oldValue = stack.get();\n+\n+\t\tif (oldValue == CLEAN_MARKER) {\n+\t\t\tthrow new RuntimeException(\"The context is not set.\");\n+\t\t}\n+\n+\t\tstack.set(CLEAN_MARKER);\n+\n+\t\treturn (T) oldValue;\n+\t}\n+\n+\t///////////////////////////////////////////////////////\n+\t/// Block.hasBlockEntity()\n+\t///////////////////////////////////////////////////////\n+\t/**\n+\t * Called by mixin methods.\n+\t * @param blockState\n+\t * @return\n+\t */\n+\tpublic static boolean hasBlockEntity(BlockState blockState) {\n+\t\tpushContext(hasBlockEntity_blockState, blockState);\n+\t\tBlock block = blockState.getBlock();\n+\t\tboolean ret = block.hasBlockEntity();\n+\t\tpopContext(hasBlockEntity_blockState);\n+\t\treturn ret;\n+\t}\n+\n+\t/**\n+\t * Called by vanilla Block Class, as a wrapper which redirects the call to Forge's BlockState sensitive version.\n+\t * @param forgeBlock\n+\t * @return\n+\t */\n+\tpublic static boolean block_hasBlockEntity(IForgeBlock forgeBlock) {\n+\t\tBlockState blockState = getContextOr(hasBlockEntity_blockState, forgeBlock.getBlock().getDefaultState());\n+\n+\t\treturn forgeBlock.hasTileEntity(blockState);\n+\t}\n+\n+\t/**\n+\t * Called by mixin methods. The return value is used to pass the vanilla Block.hasBlockEntity or block instanceof BlockEntityProvider.\n+\t * @param hasBlockEntity\n+\t * @return Blocks.CHEST (Always have a BlockEntity) if hasBlockEntity is true, otherwise Blocks.AIR (impossible to host BlockEntity)", "originalCommit": "675e29caee01b85591b02af7adbd484d9b932e90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMjE4MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r448132181", "bodyText": "This is called by patches like: if (blockstate.getBlock().hasBlockEntity()), we redirect the getBlock() call, call IForgeBlock.hasTileEntity(BlockState) to determine if the blockstate hasBlockEntity, then return a vanilla block that must have a blockentity to bypass the vanilla hasBlockEntity() {return this instanceof BlockEntityProvider} check.", "author": "rikka0w0", "createdAt": "2020-07-01T05:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzY5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTgxMQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r448691811", "bodyText": "i'd prefer using our own dummy blockentity but I guess this works for now.", "author": "TheGlitch76", "createdAt": "2020-07-02T01:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2NzY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODU2OQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r445268569", "bodyText": "this can be @Unique", "author": "TheGlitch76", "createdAt": "2020-06-25T02:08:43Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/MixinWorldChunk.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Constant;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyConstant;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockEntityProvider;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+import net.minecraft.world.chunk.ChunkSection;\n+import net.minecraft.world.chunk.WorldChunk;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(WorldChunk.class)\n+public abstract class MixinWorldChunk {\n+\t/**\n+\t * @param blockState\n+\t * @return the blockEntity created by IForgeBlock.createTileEntity(BlockState, World)\n+\t * , null if the block(blockstate) does not have a BlockEntity\n+\t */\n+\tprivate BlockEntity patchwork_createBlockEntity(BlockState blockState) {", "originalCommit": "675e29caee01b85591b02af7adbd484d9b932e90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2OTk5NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r448169994", "bodyText": "fixed in the latest commit", "author": "rikka0w0", "createdAt": "2020-07-01T07:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI2ODU2OQ=="}], "type": "inlineReview"}, {"oid": "9bc6d82f3c31ae9ffd96aded955e4c04b8c8b299", "url": "https://github.com/PatchworkMC/patchwork-api/commit/9bc6d82f3c31ae9ffd96aded955e4c04b8c8b299", "message": "Rename methods", "committedDate": "2020-07-01T07:29:09Z", "type": "commit"}, {"oid": "037dfe49f09a2eb1057e2bd02ffd1362633b4e65", "url": "https://github.com/PatchworkMC/patchwork-api/commit/037dfe49f09a2eb1057e2bd02ffd1362633b4e65", "message": "Update README.MD", "committedDate": "2020-07-01T07:33:44Z", "type": "commit"}, {"oid": "86f8ff7c553e6a58dd945171e16e0e25516440d7", "url": "https://github.com/PatchworkMC/patchwork-api/commit/86f8ff7c553e6a58dd945171e16e0e25516440d7", "message": "Move blockentity mixins to a separate package", "committedDate": "2020-07-02T16:03:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTQ2Mg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r449689462", "bodyText": "3 for an ordinal is a bit high. Can you use an @Slice(from=@At(...)) here to bring that down?", "author": "TheGlitch76", "createdAt": "2020-07-03T19:34:30Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/blockentity/MixinSpongeBlock.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.blockentity;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.SpongeBlock;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(SpongeBlock.class)\n+public abstract class MixinSpongeBlock {\n+\t@Redirect(method = \"absorbWater\", at = @At(value = \"INVOKE\", target = Signatures.BlockState_getBlock, ordinal = 3))", "originalCommit": "86f8ff7c553e6a58dd945171e16e0e25516440d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNjc4OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r449706788", "bodyText": "They are located very closely with each other in a series of if statements are they are the only occurrence in this method. If we look at the code of the target method, it is very straightforward to tell the ordinal. Adding @Slice(from..to..) might introduce unnecessary complexity.", "author": "rikka0w0", "createdAt": "2020-07-03T21:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTUwNQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r449689505", "bodyText": "@Unique", "author": "TheGlitch76", "createdAt": "2020-07-03T19:34:48Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/blockentity/MixinWorldChunk.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.blockentity;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Constant;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.ModifyConstant;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n+import org.spongepowered.asm.mixin.injection.callback.LocalCapture;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockEntityProvider;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.BlockView;\n+import net.minecraft.world.chunk.ChunkSection;\n+import net.minecraft.world.chunk.WorldChunk;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(WorldChunk.class)\n+public abstract class MixinWorldChunk {\n+\t/**\n+\t * @param blockState\n+\t * @return the blockEntity created by IForgeBlock.createTileEntity(BlockState, World)\n+\t * , null if the block(blockstate) does not have a BlockEntity\n+\t */\n+\t@Unique\n+\tprivate BlockEntity patchwork_createBlockEntity(BlockState blockState) {\n+\t\tBlockEntity blockEntity = null;\n+\n+\t\tif (BlockContext.hasBlockEntity(blockState)) {\n+\t\t\tWorldChunk me = (WorldChunk) (Object) this;\n+\t\t\tIForgeBlockState forgeBlockState = (IForgeBlockState) blockState;\n+\t\t\treturn forgeBlockState.createTileEntity(me.getWorld());\n+\t\t}\n+\n+\t\treturn blockEntity;\n+\t}\n+\n+\t////////////////////////\n+\t/// createBlockEntity()\n+\t////////////////////////\n+\t@Inject(method = \"createBlockEntity\", locals = LocalCapture.CAPTURE_FAILHARD, cancellable = true, at = @At(value = \"INVOKE\", target = Signatures.BlockState_getBlock))\n+\tprivate void patchwork_createBlockEntity(BlockPos blockPos, CallbackInfoReturnable<BlockEntity> info, BlockState blockState) {\n+\t\tinfo.setReturnValue(patchwork_createBlockEntity(blockState));\n+\t\tinfo.cancel();\n+\t}\n+\n+\t////////////////////////\n+\t/// loadBlockEntity\n+\t////////////////////////\n+\t// Block block = this.getBlockState(pos).getBlock();\n+\t// if (block instanceof BlockEntityProvider) {\n+\t//     blockEntity3 = ((BlockEntityProvider)block).createBlockEntity(this.world);\n+\tprivate static final ThreadLocal<Object> loadBlockEntity_blockEntity = BlockContext.createContext();\n+\t@Redirect(method = \"loadBlockEntity\", at = @At(value = \"INVOKE\", target = Signatures.BlockState_getBlock, ordinal = 0))\n+\tprivate Block patchwork_loadBlockEntity_getBlock(BlockState blockState) {\n+\t\tBlockEntity blockEntity = patchwork_createBlockEntity(blockState);\n+\n+\t\tif (blockEntity != null) {\n+\t\t\tBlockContext.setContext(loadBlockEntity_blockEntity, blockEntity);\n+\t\t}\n+\n+\t\treturn BlockContext.hasBlockEntityBlockMarker(blockEntity != null);\n+\t}\n+\n+\t@Redirect(method = \"loadBlockEntity\", at = @At(value = \"INVOKE\", target = Signatures.BlockEntityProvider_createBlockEntity, ordinal = 0))\n+\tprivate BlockEntity patchwork_loadBlockEntity_createBlockEntity(BlockEntityProvider dummy, BlockView view) {\n+\t\tBlockEntity blockEntity = BlockContext.releaseContext(loadBlockEntity_blockEntity);\n+\t\treturn blockEntity;\n+\t}\n+\n+\t////////////////////////\n+\t/// setBlockState()\n+\t////////////////////////\n+\tprivate static final ThreadLocal<Object> loadBlockEntity_blockState2 = BlockContext.createContext();", "originalCommit": "86f8ff7c553e6a58dd945171e16e0e25516440d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwMjMzNQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/105#discussion_r449702335", "bodyText": "in the latest commit, added for all private static final fields inside mixin classes", "author": "rikka0w0", "createdAt": "2020-07-03T20:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4OTUwNQ=="}], "type": "inlineReview"}, {"oid": "b979e6ea7198e0e527ce375427c57feb877142a8", "url": "https://github.com/PatchworkMC/patchwork-api/commit/b979e6ea7198e0e527ce375427c57feb877142a8", "message": "Add missing @Unique", "committedDate": "2020-07-03T20:54:54Z", "type": "commit"}, {"oid": "7eb7e17a9dd1482dcf2455878895088dadf08c8d", "url": "https://github.com/PatchworkMC/patchwork-api/commit/7eb7e17a9dd1482dcf2455878895088dadf08c8d", "message": "Readme.md", "committedDate": "2020-07-03T21:24:13Z", "type": "commit"}]}