{"pr_number": 126, "pr_title": "Impl removedByPlayer and canHarvestBlock in IForgeBlock", "pr_createdAt": "2020-07-12T19:42:03Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/126", "timeline": [{"oid": "c461343a2d2c45e0aafd0dabca59be434809d7c4", "url": "https://github.com/PatchworkMC/patchwork-api/commit/c461343a2d2c45e0aafd0dabca59be434809d7c4", "message": "Impl removedByPlayer and canHarvestBlock in IForgeBlock", "committedDate": "2020-07-12T19:40:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxNDQ0OQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r453414449", "bodyText": "Debugging println accidentally left in?", "author": "kitlith", "createdAt": "2020-07-13T03:21:07Z", "path": "patchwork-events-world/src/main/java/net/patchworkmc/impl/event/world/WorldEvents.java", "diffHunk": "@@ -57,4 +67,59 @@ public static void onWorldUnload(IWorld world) {\n \tpublic static void onWorldSave(IWorld world) {\n \t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Save(world));\n \t}\n+\n+\t/**\n+\t * Called by Mixin and ForgeHooks.\n+\t * @return experience dropped, -1 = block breaking is cancelled.\n+\t */\n+\tpublic static int onBlockBreakEvent(World world, GameMode gameMode, ServerPlayerEntity player, BlockPos pos) {\n+\t\t// Logic from tryHarvestBlock for pre-canceling the event\n+\t\tboolean preCancelEvent = false;\n+\n+\t\tItemStack itemstack = player.getMainHandStack();\n+\n+\t\tif (!itemstack.isEmpty() && !itemstack.getItem().canMine(world.getBlockState(pos), world, pos, player)) {\n+\t\t\tpreCancelEvent = true;\n+\t\t}\n+\n+\t\t// method_21701 => canMine\n+\t\t// Isn't the function really canNotMine?\n+\n+\t\tif (player.method_21701(world, pos, gameMode)) {\n+\t\t\tpreCancelEvent = true;\n+\t\t}\n+\n+\t\t// Tell client the block is gone immediately then process events\n+\t\tif (world.getBlockEntity(pos) == null) {\n+\t\t\tplayer.networkHandler.sendPacket(new BlockUpdateS2CPacket(EmptyBlockView.INSTANCE, pos));\n+\t\t}\n+\n+\t\t// Post the block break event\n+\t\tBlockState state = world.getBlockState(pos);\n+\t\tBlockEvent.BreakEvent event = new BlockEvent.BreakEvent(world, pos, state, player);\n+\t\tevent.setCanceled(preCancelEvent);\n+\t\tMinecraftForge.EVENT_BUS.post(event);\n+\n+\t\t// Handle if the event is canceled\n+\t\tif (event.isCanceled()) {\n+\t\t\t// Let the client know the block still exists\n+\t\t\tplayer.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, pos));\n+\n+\t\t\t// Update any block entity data for this block\n+\t\t\tBlockEntity entity = world.getBlockEntity(pos);\n+\n+\t\t\tif (entity != null) {\n+\t\t\t\tBlockEntityUpdateS2CPacket packet = entity.toUpdatePacket();\n+\n+\t\t\t\tif (packet != null) {\n+\t\t\t\t\tplayer.networkHandler.sendPacket(packet);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tSystem.out.println(\"onBlockBreakEvent cancelled\");", "originalCommit": "c461343a2d2c45e0aafd0dabca59be434809d7c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NjQ0Mg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r461066442", "bodyText": "removed", "author": "rikka0w0", "createdAt": "2020-07-27T17:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxNDQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxNTE4NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r453415185", "bodyText": "setReturnValue automatically cancels.", "author": "kitlith", "createdAt": "2020-07-13T03:24:50Z", "path": "patchwork-events-world/src/main/java/net/patchworkmc/mixin/event/world/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -50,52 +45,18 @@\n \n \t@Inject(method = \"tryBreakBlock\", at = @At(\"HEAD\"), cancellable = true)\n \tprivate void hookBreakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> callback) {\n-\t\tboolean preCancelEvent = false;\n-\n-\t\tItemStack itemstack = player.getMainHandStack();\n-\n-\t\tif (!itemstack.isEmpty() && !itemstack.getItem().canMine(world.getBlockState(pos), world, pos, player)) {\n-\t\t\tpreCancelEvent = true;\n-\t\t}\n-\n-\t\t// method_21701 => canMine\n-\t\t// Isn't the function really canNotMine?\n-\n-\t\tif (player.method_21701(world, pos, gameMode)) {\n-\t\t\tpreCancelEvent = true;\n-\t\t}\n-\n-\t\t// Tell client the block is gone immediately then process events\n-\t\tif (world.getBlockEntity(pos) == null) {\n-\t\t\tplayer.networkHandler.sendPacket(new BlockUpdateS2CPacket(EmptyBlockView.INSTANCE, pos));\n-\t\t}\n-\n-\t\t// Post the block break event\n-\t\tBlockState state = world.getBlockState(pos);\n-\t\tBlockEvent.BreakEvent event = new BlockEvent.BreakEvent(world, pos, state, player);\n-\t\tevent.setCanceled(preCancelEvent);\n-\t\tMinecraftForge.EVENT_BUS.post(event);\n-\n-\t\t// Handle if the event is canceled\n-\t\tif (event.isCanceled()) {\n-\t\t\t// Let the client know the block still exists\n-\t\t\tplayer.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, pos));\n-\n-\t\t\t// Update any block entity data for this block\n-\t\t\tBlockEntity entity = world.getBlockEntity(pos);\n-\n-\t\t\tif (entity != null) {\n-\t\t\t\tBlockEntityUpdateS2CPacket packet = entity.toUpdatePacket();\n-\n-\t\t\t\tif (packet != null) {\n-\t\t\t\t\tplayer.networkHandler.sendPacket(packet);\n-\t\t\t\t}\n-\t\t\t}\n+\t\tint exp = WorldEvents.onBlockBreakEvent(world, gameMode, player, pos);\n \n+\t\tif (exp < 0) {\n \t\t\tcallback.setReturnValue(false);\n-\t\t} else if (event.getExpToDrop() != 0) {\n-\t\t\t// TODO: Drop experience\n-\t\t\tthrow new UnsupportedOperationException(\"Cannot drop exp from a BreakEvent yet\");\n+\t\t\tcallback.cancel();", "originalCommit": "c461343a2d2c45e0aafd0dabca59be434809d7c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3NTI4Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r453975286", "bodyText": "doing exp stuff in this mixin is a bit confusing when the rest of it is in another mixin in a seperate module.\nI understand why it's like this, so you don't necessarily need to change it, but I will still say it's a bit confusing.", "author": "kitlith", "createdAt": "2020-07-13T22:19:34Z", "path": "patchwork-events-world/src/main/java/net/patchworkmc/mixin/event/world/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -50,52 +45,18 @@\n \n \t@Inject(method = \"tryBreakBlock\", at = @At(\"HEAD\"), cancellable = true)\n \tprivate void hookBreakBlock(BlockPos pos, CallbackInfoReturnable<Boolean> callback) {\n-\t\tboolean preCancelEvent = false;\n-\n-\t\tItemStack itemstack = player.getMainHandStack();\n-\n-\t\tif (!itemstack.isEmpty() && !itemstack.getItem().canMine(world.getBlockState(pos), world, pos, player)) {\n-\t\t\tpreCancelEvent = true;\n-\t\t}\n-\n-\t\t// method_21701 => canMine\n-\t\t// Isn't the function really canNotMine?\n-\n-\t\tif (player.method_21701(world, pos, gameMode)) {\n-\t\t\tpreCancelEvent = true;\n-\t\t}\n-\n-\t\t// Tell client the block is gone immediately then process events\n-\t\tif (world.getBlockEntity(pos) == null) {\n-\t\t\tplayer.networkHandler.sendPacket(new BlockUpdateS2CPacket(EmptyBlockView.INSTANCE, pos));\n-\t\t}\n-\n-\t\t// Post the block break event\n-\t\tBlockState state = world.getBlockState(pos);\n-\t\tBlockEvent.BreakEvent event = new BlockEvent.BreakEvent(world, pos, state, player);\n-\t\tevent.setCanceled(preCancelEvent);\n-\t\tMinecraftForge.EVENT_BUS.post(event);\n-\n-\t\t// Handle if the event is canceled\n-\t\tif (event.isCanceled()) {\n-\t\t\t// Let the client know the block still exists\n-\t\t\tplayer.networkHandler.sendPacket(new BlockUpdateS2CPacket(world, pos));\n-\n-\t\t\t// Update any block entity data for this block\n-\t\t\tBlockEntity entity = world.getBlockEntity(pos);\n-\n-\t\t\tif (entity != null) {\n-\t\t\t\tBlockEntityUpdateS2CPacket packet = entity.toUpdatePacket();\n-\n-\t\t\t\tif (packet != null) {\n-\t\t\t\t\tplayer.networkHandler.sendPacket(packet);\n-\t\t\t\t}\n-\t\t\t}\n+\t\tint exp = WorldEvents.onBlockBreakEvent(world, gameMode, player, pos);\n \n+\t\tif (exp < 0) {\n \t\t\tcallback.setReturnValue(false);\n-\t\t} else if (event.getExpToDrop() != 0) {\n-\t\t\t// TODO: Drop experience\n-\t\t\tthrow new UnsupportedOperationException(\"Cannot drop exp from a BreakEvent yet\");\n+\t\t\tcallback.cancel();\n+\t\t} else {\n+\t\t\tBlockHarvestManager.pushExpDropStack(exp);", "originalCommit": "c461343a2d2c45e0aafd0dabca59be434809d7c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NzQ3OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r454557478", "bodyText": "Exp stuff needs the world, block extension and entity package. I cannot think of a better way of doing this.", "author": "rikka0w0", "createdAt": "2020-07-14T18:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3NTI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MTgwMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r453991800", "bodyText": "This is a bit weird, because I'm having trouble finding a \"removeBlock\" on ServerWorld, let along pointing out where it's called in the yarnforge patch. My best guess is what's called clearBlockState in yarnforge, but I can't find that on ServerWorld either :/\nDon't worry about it too much, it's probably something weird in my setup.", "author": "kitlith", "createdAt": "2020-07-13T22:51:42Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/harvest/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.harvest;\n+\n+import javax.annotation.Nullable;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.network.ServerPlayerInteractionManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.BlockHarvestManager;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(ServerPlayerInteractionManager.class)\n+public abstract class MixinServerPlayerInteractionManager {\n+\t// removedByPlayer, canHarvestBlock\n+\n+\t@Unique\n+\tprivate boolean patchwork$removeBlock(BlockPos pos, boolean canHarvest) {\n+\t\tServerPlayerInteractionManager me = (ServerPlayerInteractionManager) (Object) this;\n+\t\tBlockState state = me.world.getBlockState(pos);\n+\t\tboolean removed = ((IForgeBlockState) state).removedByPlayer(me.world, pos, me.player, canHarvest, me.world.getFluidState(pos));\n+\n+\t\tif (removed) {\n+\t\t\tstate.getBlock().onBroken(me.world, pos, state);\n+\t\t}\n+\n+\t\treturn removed;\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.Block_onBreak, ordinal = 0))\n+\tprivate void patchwork$tryBreakBlock_onBreak(Block block, World world, BlockPos pos, BlockState state, PlayerEntity player) {\n+\t\t// Suppress this call\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.ServerWorld_removeBlock, ordinal = 0))", "originalCommit": "c461343a2d2c45e0aafd0dabca59be434809d7c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NTQ0OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r454555448", "bodyText": "removeBlock is implemented in World not ServerWorld, I believe", "author": "rikka0w0", "createdAt": "2020-07-14T18:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MTgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgyNTk5OQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r454825999", "bodyText": "Yep, you're right.", "author": "kitlith", "createdAt": "2020-07-15T06:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MTgwMA=="}], "type": "inlineReview"}, {"oid": "b30df48a3a4271e42c0ec8d9e11e6da301330c53", "url": "https://github.com/PatchworkMC/patchwork-api/commit/b30df48a3a4271e42c0ec8d9e11e6da301330c53", "message": "Merge remote-tracking branch 'origin/master' into feature/block-harvest\n\nConflicts:\n\tpatchwork-events-world/src/main/java/net/minecraftforge/event/world/BlockEvent.java\n\tpatchwork-events-world/src/main/java/net/patchworkmc/impl/event/world/WorldEvents.java", "committedDate": "2020-07-27T17:52:34Z", "type": "commit"}, {"oid": "fd9c9be088ae6bfec650221db6d816959266502d", "url": "https://github.com/PatchworkMC/patchwork-api/commit/fd9c9be088ae6bfec650221db6d816959266502d", "message": "Apply kitlith's suggestions", "committedDate": "2020-07-27T17:56:24Z", "type": "commit"}, {"oid": "f595f75819950fad3a5474f07c630eb128e00d06", "url": "https://github.com/PatchworkMC/patchwork-api/commit/f595f75819950fad3a5474f07c630eb128e00d06", "message": "Merge remote-tracking branch 'origin/master' into feature/block-harvest\n\nConflicts:\n\tpatchwork-events-world/build.gradle\n\tpatchwork-extensions-block/build.gradle", "committedDate": "2020-07-31T19:40:18Z", "type": "commit"}, {"oid": "4683089a885c300973a321daa89a8f42c2252b29", "url": "https://github.com/PatchworkMC/patchwork-api/commit/4683089a885c300973a321daa89a8f42c2252b29", "message": "Fix ThreadLocal memory leakage", "committedDate": "2020-07-31T19:47:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyOTkwMg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r464129902", "bodyText": "Not declared in the fabric.mod.json?", "author": "TheGlitch76", "createdAt": "2020-08-02T22:17:20Z", "path": "patchwork-events-world/build.gradle", "diffHunk": "@@ -3,5 +3,6 @@ version = getSubprojectVersion(project, \"0.3.0\")\n \n dependencies {\n \timplementation project(path: ':patchwork-api-base', configuration: 'dev')\n+\timplementation project(path: ':patchwork-extensions-block', configuration: 'dev')", "originalCommit": "4683089a885c300973a321daa89a8f42c2252b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyOTkxMw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r464129913", "bodyText": "Not declared in the fabric.mod.json", "author": "TheGlitch76", "createdAt": "2020-08-02T22:17:35Z", "path": "patchwork-extensions-block/build.gradle", "diffHunk": "@@ -4,6 +4,7 @@ version = getSubprojectVersion(project, \"0.3.0\")\n dependencies {\n \timplementation project(path: ':patchwork-api-base', configuration: 'dev')\n \timplementation project(path: ':patchwork-enum-hacks', configuration: 'dev')\n+\timplementation project(path: ':patchwork-extensions-item', configuration: 'dev')", "originalCommit": "4683089a885c300973a321daa89a8f42c2252b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEzMDA4MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r464130080", "bodyText": "@unique?", "author": "TheGlitch76", "createdAt": "2020-08-02T22:19:40Z", "path": "patchwork-extensions-block/src/main/java/net/patchworkmc/mixin/extensions/block/harvest/MixinServerPlayerInteractionManager.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.extensions.block.harvest;\n+\n+import javax.annotation.Nullable;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import net.minecraftforge.common.extensions.IForgeBlockState;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.entity.BlockEntity;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.server.network.ServerPlayerEntity;\n+import net.minecraft.server.network.ServerPlayerInteractionManager;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.IWorld;\n+import net.minecraft.world.World;\n+\n+import net.patchworkmc.impl.extensions.block.BlockContext;\n+import net.patchworkmc.impl.extensions.block.BlockHarvestManager;\n+import net.patchworkmc.impl.extensions.block.Signatures;\n+\n+@Mixin(ServerPlayerInteractionManager.class)\n+public abstract class MixinServerPlayerInteractionManager {\n+\t// removedByPlayer, canHarvestBlock\n+\n+\t@Unique\n+\tprivate boolean patchwork$removeBlock(BlockPos pos, boolean canHarvest) {\n+\t\tServerPlayerInteractionManager me = (ServerPlayerInteractionManager) (Object) this;\n+\t\tBlockState state = me.world.getBlockState(pos);\n+\t\tboolean removed = ((IForgeBlockState) state).removedByPlayer(me.world, pos, me.player, canHarvest, me.world.getFluidState(pos));\n+\n+\t\tif (removed) {\n+\t\t\tstate.getBlock().onBroken(me.world, pos, state);\n+\t\t}\n+\n+\t\treturn removed;\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.Block_onBreak, ordinal = 0))\n+\tprivate void patchwork$tryBreakBlock_onBreak(Block block, World world, BlockPos pos, BlockState state, PlayerEntity player) {\n+\t\t// Suppress this call\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.ServerWorld_removeBlock, ordinal = 0))\n+\tprivate boolean patchwork$tryBreakBlock_removeBlock(ServerWorld world, BlockPos pos, boolean bool) {\n+\t\treturn true; // bypass if (bl && bl2) {\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.Block_onBroken, ordinal = 0))\n+\tprivate void patchwork$tryBreakBlock_onBroken(Block block, IWorld world, BlockPos pos, BlockState state) {\n+\t\t// Suppress this call\n+\t}\n+\n+\t@Redirect(method = \"tryBreakBlock\", at = @At(value = \"INVOKE\", target = Signatures.ServerPlayerInteractionManager_isCreative, ordinal = 0))\n+\tprivate boolean patchwork$tryBreakBlock_isCreative(ServerPlayerInteractionManager me, BlockPos pos) {\n+\t\tboolean isCreative = me.isCreative();\n+\n+\t\tif (isCreative) {\n+\t\t\tpatchwork$removeBlock(pos, false);\n+\t\t}\n+\n+\t\treturn isCreative;\n+\t}\n+\n+\tprivate static final ThreadLocal<Object> tryBreakBlock_canHarvest = BlockContext.createContext(); // flag1", "originalCommit": "4683089a885c300973a321daa89a8f42c2252b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEzMDE1NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r464130155", "bodyText": "This should go in the main mixins.json as\nflammable.MixinWorld", "author": "TheGlitch76", "createdAt": "2020-08-02T22:20:17Z", "path": "patchwork-extensions-block/src/main/resources/patchwork-extensions-block-flammable.mixins.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"required\": true,\n+  \"package\": \"net.patchworkmc.mixin.extensions.block.flammable\",\n+  \"compatibilityLevel\": \"JAVA_8\",\n+  \"mixins\": [", "originalCommit": "4683089a885c300973a321daa89a8f42c2252b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEzMDE4MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r464130181", "bodyText": "Up to you on if you want to remove this extra json file too.", "author": "TheGlitch76", "createdAt": "2020-08-02T22:20:33Z", "path": "patchwork-extensions-block/src/main/resources/patchwork-extensions-block-harvest.mixins.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{\n+  \"required\": true,\n+  \"package\": \"net.patchworkmc.mixin.extensions.block.harvest\",\n+  \"compatibilityLevel\": \"JAVA_8\",\n+  \"mixins\": [\n+    \"MixinOreBlock\",", "originalCommit": "4683089a885c300973a321daa89a8f42c2252b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MTkwNw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/126#discussion_r464741907", "bodyText": "I think we should make separate mixins, otherwise some mixins will get really long. I would like to have separate mixin.json, it is more modular.", "author": "rikka0w0", "createdAt": "2020-08-04T01:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEzMDE4MQ=="}], "type": "inlineReview"}, {"oid": "62e8d4196062915a1dbcfdd8640701cccf7c589f", "url": "https://github.com/PatchworkMC/patchwork-api/commit/62e8d4196062915a1dbcfdd8640701cccf7c589f", "message": "Apply suggestions", "committedDate": "2020-08-04T01:08:43Z", "type": "commit"}, {"oid": "ac3423a623ac746b0823c81fc457a23b799c3c0a", "url": "https://github.com/PatchworkMC/patchwork-api/commit/ac3423a623ac746b0823c81fc457a23b799c3c0a", "message": "Resolve conflict", "committedDate": "2020-08-05T17:52:32Z", "type": "commit"}, {"oid": "f1df02a4323f21fef4ffd9be7ab3ed9c6b8d4312", "url": "https://github.com/PatchworkMC/patchwork-api/commit/f1df02a4323f21fef4ffd9be7ab3ed9c6b8d4312", "message": "Merge branch 'master' of github.com:PatchworkMC/patchwork-api into pr/blockharvest", "committedDate": "2020-08-07T22:35:46Z", "type": "commit"}, {"oid": "a727989f6256ed4e62c9b03f1bdfcf1a2b8a8f14", "url": "https://github.com/PatchworkMC/patchwork-api/commit/a727989f6256ed4e62c9b03f1bdfcf1a2b8a8f14", "message": "Remove unneeded dependency", "committedDate": "2020-08-07T22:42:54Z", "type": "commit"}]}