{"pr_number": 106, "pr_title": "Impl ModelBakeEvent, ModelRegistryEvent and some ModelLoader methods", "pr_createdAt": "2020-07-01T18:02:38Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/106", "timeline": [{"oid": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112", "url": "https://github.com/PatchworkMC/patchwork-api/commit/23a5c0b78c512ffe5d68929c5cff122fc1ccb112", "message": "Impl ModelBakeEvent, ModelRegistryEvent and some ModelLoader methods", "committedDate": "2020-07-01T18:01:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MjY4MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448692681", "bodyText": "PatchworkModelLoader?", "author": "TheGlitch76", "createdAt": "2020-07-02T01:05:15Z", "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.AbstractModelLoader;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements AbstractModelLoader {", "originalCommit": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg2NzU2MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448867560", "bodyText": "We cannot rename this class, its methods are used by forge mods", "author": "rikka0w0", "createdAt": "2020-07-02T09:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MjY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4Nzk1Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449687956", "bodyText": "oh, I misread the package", "author": "TheGlitch76", "createdAt": "2020-07-03T19:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MjY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5Mjg3NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448692875", "bodyText": ":voldethonk:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t// ignoring pure ResourceLocation arguments, all things we care about pass\n          \n          \n            \n            \t\t\t// ModelResourceLocation\n          \n          \n            \n            \t\t\t// ignoring pure Identifier arguments, all things we care about pass\n          \n          \n            \n            \t\t\t// ModelIdentifier", "author": "TheGlitch76", "createdAt": "2020-07-02T01:06:04Z", "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.AbstractModelLoader;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements AbstractModelLoader {\n+\tprivate static final Marker MODELLOADING = MarkerManager.getMarker(\"MODELLOADING\");\n+\tprivate static Set<Identifier> specialModels = new HashSet<>();\n+\tprivate static final Logger LOGGER = LogManager.getLogger();\n+\tprivate final Map<Identifier, Exception> loadingExceptions = new HashMap<>();\n+\tprivate boolean isLoading = false;\n+\tprivate static ModelLoader instance;\n+\n+\t@Nullable\n+\tpublic static ModelLoader instance() {\n+\t\treturn instance;\n+\t}\n+\n+\tpublic boolean isLoading() {\n+\t\treturn isLoading;\n+\t}\n+\n+\tpublic ModelLoader(ResourceManager resourceManager, SpriteAtlasTexture spriteAtlas, BlockColors blockColors,\n+\t\t\tProfiler profiler) {\n+\t\tsuper(resourceManager, spriteAtlas, blockColors, profiler);\n+\t}\n+\n+\t/**\n+\t * Indicate to vanilla that it should load and bake the given model, even if no\n+\t * blocks or items use it. This is useful if e.g. you have baked models only for\n+\t * entity renderers. Call during\n+\t * {@link net.minecraftforge.client.event.ModelRegistryEvent}\n+\t *\n+\t * @param rl The model, either {@link ModelResourceLocation} to point to a\n+\t *           blockstate variant, or plain {@link ResourceLocation} to point\n+\t *           directly to a json in the models folder.\n+\t */\n+\tpublic static void addSpecialModel(Identifier rl) {\n+\t\tspecialModels.add(rl);\n+\t}\n+\n+\t@Override\n+\tpublic Set<Identifier> getSpecialModels() {\n+\t\treturn specialModels;\n+\t}\n+\n+\t/**\n+\t * Internal, do not use.\n+\t */\n+\tpublic void onPostBakeEvent(Map<Identifier, BakedModel> modelRegistry) {\n+\t\tBakedModel missingModel = modelRegistry.get(MISSING);\n+\n+\t\tfor (Map.Entry<Identifier, Exception> entry : loadingExceptions.entrySet()) {\n+\t\t\t// ignoring pure ResourceLocation arguments, all things we care about pass\n+\t\t\t// ModelResourceLocation", "originalCommit": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzI3NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448693274", "bodyText": "Abstract implies a class.\nMaybe something like SpecialModelProvider?", "author": "TheGlitch76", "createdAt": "2020-07-02T01:07:38Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/AbstractModelLoader.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.modelloader;\n+\n+import java.util.Set;\n+\n+import net.minecraft.util.Identifier;\n+\n+public interface AbstractModelLoader {", "originalCommit": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NTIzNg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448695236", "bodyText": "An I prefix would be okay if my name doesn't make sense because more code would needed to be added here later.", "author": "TheGlitch76", "createdAt": "2020-07-02T01:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MzY2Mw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449083663", "bodyText": "fixed in the latest commit", "author": "rikka0w0", "createdAt": "2020-07-02T15:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzkzNA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r448693934", "bodyText": "This doesn't seem to be needed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"defaultRequire\": 1,\n          \n          \n            \n                \"maxShiftBy\": 2\n          \n          \n            \n                \"defaultRequire\": 1", "author": "TheGlitch76", "createdAt": "2020-07-02T01:10:18Z", "path": "patchwork-model-loader/src/main/resources/patchwork-model-loader.mixins.json", "diffHunk": "@@ -0,0 +1,13 @@\n+{\n+  \"required\": true,\n+  \"package\": \"net.patchworkmc.mixin.modelloader\",\n+  \"compatibilityLevel\": \"JAVA_8\",\n+  \"client\": [\n+    \"MixinBakedModelManager\",\n+    \"MixinModelLoader\"\n+  ],\n+  \"injectors\": {\n+    \"defaultRequire\": 1,\n+    \"maxShiftBy\": 2", "originalCommit": "23a5c0b78c512ffe5d68929c5cff122fc1ccb112", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "60ef15a9b390b4ff43f5ef509c98cba3c7d44ae3", "url": "https://github.com/PatchworkMC/patchwork-api/commit/60ef15a9b390b4ff43f5ef509c98cba3c7d44ae3", "message": "Apply suggestions from code review\n\nCo-authored-by: Glitch <glitchieproductionsofficial@gmail.com>", "committedDate": "2020-07-02T09:22:18Z", "type": "commit"}, {"oid": "8436199f13b9d43c39b25b178d78d9cb954e6766", "url": "https://github.com/PatchworkMC/patchwork-api/commit/8436199f13b9d43c39b25b178d78d9cb954e6766", "message": "Rename AbstractModelLoader to SpecialModelProvider", "committedDate": "2020-07-02T15:26:45Z", "type": "commit"}, {"oid": "eb30ed0b272380cf5aaf215f2014c46d5edd593a", "url": "https://github.com/PatchworkMC/patchwork-api/commit/eb30ed0b272380cf5aaf215f2014c46d5edd593a", "message": "Simplify MixinModelLoader", "committedDate": "2020-07-03T15:14:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4ODg2Nw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449688867", "bodyText": "This class needs some docs on why you are hijacking the trident, and why it can't be something else.", "author": "TheGlitch76", "createdAt": "2020-07-03T19:30:35Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {", "originalCommit": "eb30ed0b272380cf5aaf215f2014c46d5edd593a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4ODkwNg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449688906", "bodyText": "You can leave these as normal names and use @Unique", "author": "TheGlitch76", "createdAt": "2020-07-03T19:30:51Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\tprivate static final ModelIdentifier patchwork$trident = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\tprivate static final Logger patchwork$logger = LogManager.getLogger(ModelLoader.class);", "originalCommit": "eb30ed0b272380cf5aaf215f2014c46d5edd593a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODY0Mg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450188642", "bodyText": "fixed", "author": "rikka0w0", "createdAt": "2020-07-06T12:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4ODkwNg=="}], "type": "inlineReview"}, {"oid": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "url": "https://github.com/PatchworkMC/patchwork-api/commit/b6d79253a471d4bab0801f75723dd86fa6f5cc30", "message": "Add comments", "committedDate": "2020-07-03T20:46:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODAzMQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449918031", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate void addModel(ModelIdentifier modelId) { }\n          \n          \n            \n            \tprivate abstract void addModel(ModelIdentifier modelId);", "author": "TheGlitch76", "createdAt": "2020-07-05T20:57:45Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODQ2NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450188464", "bodyText": "We can't have private abstract methods in Java/////", "author": "rikka0w0", "createdAt": "2020-07-06T12:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODAzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4OTE4MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450189180", "bodyText": "Here we have to keep the dummy implementation", "author": "rikka0w0", "createdAt": "2020-07-06T12:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODIwOA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449918208", "bodyText": "Couldn't forge's MdoelLoader magic be done with a mixin implementing the interface? That would be more compatible with Fabric mods and a trivial redirect (all non-static methods of X class) in Patcher", "author": "TheGlitch76", "createdAt": "2020-07-05T21:00:02Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinBakedModelManager.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.At.Shift;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.render.model.BakedModelManager;\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.ModelEventDispatcher;\n+import net.patchworkmc.impl.modelloader.Signatures;\n+\n+@Mixin(BakedModelManager.class)\n+public abstract class MixinBakedModelManager {\n+\t@Shadow\n+\tprivate Map<Identifier, BakedModel> models;\n+\n+\t@Redirect(method = \"prepare\", at = @At(value = \"NEW\", target = Signatures.ModelLoader_new, ordinal = 0))\n+\tprivate ModelLoader patchwork_prepare_new_ModelLoader(ResourceManager resourceManager, SpriteAtlasTexture spriteAtlas, BlockColors blockColors, Profiler profiler) {\n+\t\treturn new net.minecraftforge.client.model.ModelLoader(resourceManager, spriteAtlas, blockColors, profiler);", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxOTI1NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449919255", "bodyText": "On further consideration I think this approach is fine.", "author": "TheGlitch76", "createdAt": "2020-07-05T21:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzgxNA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450193814", "bodyText": "Forge's ModelLoader is reference by Forge APIs and Mods access it directly. We have to keep the class and method signature to maintain compatibility.", "author": "rikka0w0", "createdAt": "2020-07-06T12:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODI2OQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449918269", "bodyText": "I don't think this needs to be essentially a class overwrite.", "author": "TheGlitch76", "createdAt": "2020-07-05T21:00:21Z", "path": "patchwork-model-loader/src/main/java/net/minecraftforge/client/model/ModelLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.client.model;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.MarkerManager;\n+\n+import net.minecraft.client.color.block.BlockColors;\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.texture.SpriteAtlasTexture;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.resource.ResourceManager;\n+import net.minecraft.util.Identifier;\n+import net.minecraft.util.profiler.Profiler;\n+\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+public class ModelLoader extends net.minecraft.client.render.model.ModelLoader implements SpecialModelProvider {", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxOTE5Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r449919196", "bodyText": "Actually this is fine how it is.", "author": "TheGlitch76", "createdAt": "2020-07-05T21:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxODI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDc5MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450420790", "bodyText": "Considering there are multiple occurrences of addModel in the constructor, wouldn't this spam Patchwork was unable to load special models for Forge mods to the console?", "author": "famous1622", "createdAt": "2020-07-06T18:59:32Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n+\t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.\n+\t * Here we just do another check to ensure that the injection point is correct.\n+\t * @param me\n+\t * @param modelId\n+\t */\n+\t@Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = Signatures.ModelLoader_addModel, ordinal = 2))\n+\tprivate void patchwork_addModel_return(ModelLoader me, ModelIdentifier modelId) {\n+\t\taddModel(modelId);\n+\n+\t\tif (modelId.equals(TRIDENT_INV)) {\n+\t\t\tLOGGER.debug(\"Patchwork is loading special models for Forge mods\");\n+\t\t\tpatchwork$loadSpecialModel();\n+\t\t} else {\n+\t\t\tLOGGER.warn(\"Patchwork was unable to load special models for Forge mods\");", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MjEzMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450582130", "bodyText": "This specifically targets the third occurence of addModel, so it'll only be called once.", "author": "kitlith", "createdAt": "2020-07-07T02:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTk3MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450421971", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n          \n          \n            \n            \t * Due to the limitations of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".", "author": "famous1622", "createdAt": "2020-07-06T19:01:54Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjA2MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450422060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.\n          \n          \n            \n            \t * There are multiple occurrences of addModel in the constructor, Forge inserts the patch after adding model for the trident.", "author": "famous1622", "createdAt": "2020-07-06T19:02:06Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {\n+\t\tfor (Identifier id : getSpecialModels()) {\n+\t\t\tModelLoader me = (ModelLoader) (Object) this;\n+\t\t\tUnbakedModel iunbakedmodel = me.getOrLoadModel(id);\n+\t\t\tthis.unbakedModels.put(id, iunbakedmodel);\n+\t\t\tthis.modelsToBake.put(id, iunbakedmodel);\n+\t\t}\n+\t}\n+\n+\t@Shadow\n+\tprivate void addModel(ModelIdentifier modelId) { }\n+\n+\t/**\n+\t * Due to the limitation of mixin, when targeting a constructor, we cannot use injection points other than \"TAIL\".\n+\t * There are multiple occurrence of addModel in the constructor, Forge inserts the patch after adding model for the trident.", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjc5MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450422791", "bodyText": "I'd also consider \"While there are...\" or \"...constructor, but Forge...\", but I don't want to bikeshed too hard over grammar.", "author": "famous1622", "createdAt": "2020-07-06T19:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMjA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNDQ4NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450424484", "bodyText": "I'd drop the official and make it capital Forge to be consistent.", "author": "famous1622", "createdAt": "2020-07-06T19:07:11Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/impl/modelloader/ModelEventDispatcher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.impl.modelloader;\n+\n+import java.util.Map;\n+\n+import net.minecraftforge.client.event.ModelBakeEvent;\n+import net.minecraftforge.client.event.ModelRegistryEvent;\n+import net.minecraftforge.client.model.ModelLoader;\n+import net.minecraftforge.fml.ModLoader;\n+\n+import net.minecraft.client.render.model.BakedModel;\n+import net.minecraft.client.render.model.BakedModelManager;\n+import net.minecraft.util.Identifier;\n+\n+public class ModelEventDispatcher {\n+\t/**\n+\t * In official forge, ModelRegistryEvent is fired in parallel with FMLClientSetupEvent.\n+\t * Here we fire ModelRegistryEvent before FMLClientSetupEvent.\n+\t * The official forge does not set the ModLoadingContext here, so this should be fine.", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNTM1OA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r450425358", "bodyText": "Is the prefix here necessary?", "author": "famous1622", "createdAt": "2020-07-06T19:09:11Z", "path": "patchwork-model-loader/src/main/java/net/patchworkmc/mixin/modelloader/MixinModelLoader.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2020, 2019-2020\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.patchworkmc.mixin.modelloader;\n+\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.Unique;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.client.render.model.ModelLoader;\n+import net.minecraft.client.render.model.UnbakedModel;\n+import net.minecraft.client.util.ModelIdentifier;\n+import net.minecraft.util.Identifier;\n+\n+import net.patchworkmc.impl.modelloader.Signatures;\n+import net.patchworkmc.impl.modelloader.SpecialModelProvider;\n+\n+@Mixin(ModelLoader.class)\n+public abstract class MixinModelLoader implements SpecialModelProvider {\n+\t@Unique\n+\tprivate static final ModelIdentifier TRIDENT_INV = new ModelIdentifier(\"minecraft:trident_in_hand#inventory\");\n+\t@Unique\n+\tprivate static final Logger LOGGER = LogManager.getLogger(ModelLoader.class);\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> modelsToBake;\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<Identifier, UnbakedModel> unbakedModels;\n+\n+\t@Unique\n+\tprivate void patchwork$loadSpecialModel() {", "originalCommit": "b6d79253a471d4bab0801f75723dd86fa6f5cc30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMDEyNQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/106#discussion_r451020125", "bodyText": "Not necessary but I would like to keep it /w\\", "author": "rikka0w0", "createdAt": "2020-07-07T17:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNTM1OA=="}], "type": "inlineReview"}, {"oid": "f527a908ddb99f66975595fcc798498cd0cbb507", "url": "https://github.com/PatchworkMC/patchwork-api/commit/f527a908ddb99f66975595fcc798498cd0cbb507", "message": "Apply suggestions from code review\n\nCo-authored-by: famous1622 <8428080+famous1622@users.noreply.github.com>", "committedDate": "2020-07-07T17:11:39Z", "type": "commit"}, {"oid": "63b6fd25621e1e195c478216a36acf5eb03a9888", "url": "https://github.com/PatchworkMC/patchwork-api/commit/63b6fd25621e1e195c478216a36acf5eb03a9888", "message": "Update ModelEventDispatcher.java", "committedDate": "2020-07-07T17:12:14Z", "type": "commit"}, {"oid": "0dc0107507fff117fcc38e2c2fd0831107d4632e", "url": "https://github.com/PatchworkMC/patchwork-api/commit/0dc0107507fff117fcc38e2c2fd0831107d4632e", "message": "Better mixin target", "committedDate": "2020-07-21T21:57:53Z", "type": "commit"}]}