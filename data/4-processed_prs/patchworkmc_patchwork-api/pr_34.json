{"pr_number": 34, "pr_title": "Implement Events used by Apathetic Mobs", "pr_createdAt": "2020-01-23T03:49:11Z", "pr_url": "https://github.com/PatchworkMC/patchwork-api/pull/34", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTIyOQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369921229", "bodyText": "I still need to ask Forge about this (if it's still the same in latest forge).\nDo we care enough to exactly duplicate Forge's behavior here?", "author": "kitlith", "createdAt": "2020-01-23T03:52:08Z", "path": "patchwork-events-entity/src/main/java/com/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "diffHunk": "@@ -75,4 +75,13 @@ private void hookApplyDamageForHurtEventCancel(DamageSource source, float damage\n \t\t\tinfo.cancel();\n \t\t}\n \t}\n+\n+\t// No shift, because we are specifically not modifying the value for this function call.\n+\t// TODO: Forge patches a bit later into the function here, being inconsistent with their patch for PlayerEntity. For the moment, I don't feel like finding an injection point for that, and this may be a Forge bug?", "originalCommit": "06d4d1a1a797b5d5e9b6d084f2e1c73a99b545a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMjMyOQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373322329", "bodyText": "Let's report this to Forge if it's still an issue, as it is an inconsistency.", "author": "coderbot16", "createdAt": "2020-01-31T05:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTUzNQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369921535", "bodyText": "tbh I'm not certain about this injection. I think it works? might want to add a shift to after the call.", "author": "kitlith", "createdAt": "2020-01-23T03:54:25Z", "path": "patchwork-events-entity/src/main/java/com/patchworkmc/mixin/event/entity/MixinPlayerEntity.java", "diffHunk": "@@ -98,4 +98,12 @@ private void hookApplyDamageForHurtEventCancel(DamageSource source, float damage\n \t\t\tinfo.cancel();\n \t\t}\n \t}\n+\n+\t// No shift, because we are specifically not modifying the value for this function call.\n+\t@ModifyVariable(method = \"applyDamage\", argsOnly = true, at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/player/PlayerEntity.setAbsorptionAmount (F)V\", ordinal = 0))", "originalCommit": "06d4d1a1a797b5d5e9b6d084f2e1c73a99b545a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMTg5NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373321894", "bodyText": "INVOKE_ASSIGN is a built in injection point that just puts it after the INVOKE call, that seems like what you want. The name seems odd, but the real name is AfterInvoke as opposed to BeforeInvoke (INVOKE's internal name)", "author": "coderbot16", "createdAt": "2020-01-31T05:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MzkxMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373743910", "bodyText": "INVOKE_ASSIGN results in a Critical injection failure: Variable modifier method hookApplyDamageForDamageEvent(FLnet/minecraft/entity/damage/DamageSource;)F in patchwork-events-entity.mixins.json:MixinLivingEntity failed injection check, (0/1) succeeded., whereas INVOKE just ends up working. also applies for MixinPlayerEntity. I tried this before-hand, and have now re-confirmed.", "author": "kitlith", "createdAt": "2020-02-01T00:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTYwOQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369921609", "bodyText": "ditto about shift", "author": "kitlith", "createdAt": "2020-01-23T03:54:54Z", "path": "patchwork-events-entity/src/main/java/com/patchworkmc/mixin/event/entity/MixinLivingEntity.java", "diffHunk": "@@ -75,4 +75,13 @@ private void hookApplyDamageForHurtEventCancel(DamageSource source, float damage\n \t\t\tinfo.cancel();\n \t\t}\n \t}\n+\n+\t// No shift, because we are specifically not modifying the value for this function call.\n+\t// TODO: Forge patches a bit later into the function here, being inconsistent with their patch for PlayerEntity. For the moment, I don't feel like finding an injection point for that, and this may be a Forge bug?\n+\t@ModifyVariable(method = \"applyDamage\", argsOnly = true, at = @At(value = \"INVOKE\", target = \"net/minecraft/entity/LivingEntity.setAbsorptionAmount (F)V\", ordinal = 0))", "originalCommit": "06d4d1a1a797b5d5e9b6d084f2e1c73a99b545a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMjA3NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373322075", "bodyText": "Same response as the other one", "author": "coderbot16", "createdAt": "2020-01-31T05:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0Mzk2MQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373743961", "bodyText": "ditto, same issue as with the other one.", "author": "kitlith", "createdAt": "2020-02-01T01:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTk4MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369921980", "bodyText": "forge issue 6227\nDo we want to follow the suggested (stale) PR, or just leave it alone for now?", "author": "kitlith", "createdAt": "2020-01-23T03:57:10Z", "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/DifficultyChangeEvent.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.eventbus.api.Event;\n+\n+import net.minecraft.world.Difficulty;\n+\n+/**\n+ * DifficultyChangeEvent is fired when difficulty is changing.\n+ *\n+ * <p>TODO: This event is not currently fired.</p>", "originalCommit": "993d3c957cb16b667e6c41ed7503a3ebcdaae659", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDkzMA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373320930", "bodyText": "I think we should just not fire this for now, but add a TODO with a link to the PR / issue.", "author": "coderbot16", "createdAt": "2020-01-31T05:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMjU0NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369922544", "bodyText": "So, I ended up creating two separate possible mixins for this. I currently like the latter more, as I feel like it's more robust, but I'm leaving the former in for now, in case its actually better. I will remove whichever one isn't used before merging.", "author": "kitlith", "createdAt": "2020-01-23T04:00:23Z", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Iterator.next ()Ljava/lang/Object;\"))", "originalCommit": "b3ceb930b296e6ac6528a7be14858a789cfba0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMjk2Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369922966", "bodyText": "Question about injection location. I kinda feel like injecting into the HEAD of ServerWorld.close would be marginally better than MinecraftServer.shutdown, but this is where forge does it, and it's not difficult to inject it here.", "author": "kitlith", "createdAt": "2020-01-23T04:03:02Z", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Iterator.next ()Ljava/lang/Object;\"))\n+\tprivate Object proxyNextWorldToSpecialCaseOverworld(Iterator iterator) {\n+\t\tDimensionType type = (DimensionType) iterator.next();\n+\n+\t\tif (type == DimensionType.OVERWORLD) {\n+\t\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(type)));\n+\t\t}\n+\n+\t\treturn type;\n+\t}\n+\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Map.put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", ordinal = 1))\n+\tprivate Object proxyPutWorld(Map worlds, Object type, Object world) {\n+\t\tworlds.put(type, world);\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load((ServerWorld) world));\n+\t\treturn world;\n+\t}\n+\n+\t// TODO: Should we Inject into ServerWorld.close instead? Currently, this follows Forge's patch location.\n+\t@Redirect(method = \"shutdown\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/world/ServerWorld.close ()V\"))", "originalCommit": "b3ceb930b296e6ac6528a7be14858a789cfba0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMzMwMg==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369923302", "bodyText": "I ended up creating some mixins to handle some DimensionManager patches. I can totally remove them from this PR, just figured I'd leave them in in case they'd be useful in the future.", "author": "kitlith", "createdAt": "2020-01-23T04:05:16Z", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinMinecraftServer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Final;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import net.minecraft.server.MinecraftServer;\n+import net.minecraft.server.ServerTask;\n+import net.minecraft.server.world.ServerWorld;\n+import net.minecraft.util.NonBlockingThreadExecutor;\n+import net.minecraft.world.dimension.DimensionType;\n+\n+@Mixin(MinecraftServer.class)\n+public abstract class MixinMinecraftServer extends NonBlockingThreadExecutor<ServerTask> {\n+\tpublic MixinMinecraftServer(String name) {\n+\t\tsuper(name);\n+\t}\n+\n+\t@Shadow\n+\t@Final\n+\tprivate Map<DimensionType, ServerWorld> worlds;\n+\n+\t// Should get called once per loop, regardless of which if branch it takes.\n+\t//\t@Inject(\n+\t//\t\tmethod = \"createWorlds\",\n+\t//\t\tslice = @Slice(\n+\t//\t\t\tfrom = @At(value = \"INVOKE\", target = \"java/util/Iterator.hasNext ()Z\")\n+\t//\t\t),\n+\t//\t\tat = @At(value = \"JUMP\", opcode = Opcodes.GOTO),\n+\t//\t\tlocals = LocalCapture.CAPTURE_FAILHARD\n+\t//\t)\n+\t//\tprivate void hookCreateWorlds(WorldSaveHandler worldSaveHandler, LevelProperties properties, LevelInfo levelInfo, WorldGenerationProgressListener worldGenerationProgressListener, CallbackInfo ci, ServerWorld serverWorld, ServerWorld serverWorld2, Iterator var7, DimensionType dimensionType) {\n+\t//\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(dimensionType)));\n+\t//\t}\n+\n+\t// Alternatively, mixin to the put call, and special case overworld.\n+\t// Perhaps move the special case outside of the loop?\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Iterator.next ()Ljava/lang/Object;\"))\n+\tprivate Object proxyNextWorldToSpecialCaseOverworld(Iterator iterator) {\n+\t\tDimensionType type = (DimensionType) iterator.next();\n+\n+\t\tif (type == DimensionType.OVERWORLD) {\n+\t\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load(this.worlds.get(type)));\n+\t\t}\n+\n+\t\treturn type;\n+\t}\n+\n+\t@Redirect(method = \"createWorlds\", at = @At(value = \"INVOKE\", target = \"java/util/Map.put (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\", ordinal = 1))\n+\tprivate Object proxyPutWorld(Map worlds, Object type, Object world) {\n+\t\tworlds.put(type, world);\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Load((ServerWorld) world));\n+\t\treturn world;\n+\t}\n+\n+\t// TODO: Should we Inject into ServerWorld.close instead? Currently, this follows Forge's patch location.\n+\t@Redirect(method = \"shutdown\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/world/ServerWorld.close ()V\"))\n+\tprivate void proxyClose(ServerWorld world) throws IOException {\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(world));\n+\t\tworld.close();\n+\t}\n+\n+\t@Shadow\n+\tprivate int ticks;\n+\n+\t// TODO: DimensionManager, and move this into a seperate module", "originalCommit": "b3ceb930b296e6ac6528a7be14858a789cfba0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyMzQ4Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369923486", "bodyText": "Currently, there's a minor locational difference between this mixin and forge. I don't think it'll have any side-effects, other than maybe being a bit inefficient.", "author": "kitlith", "createdAt": "2020-01-23T04:06:23Z", "path": "patchwork-events-world/src/main/java/com/patchworkmc/mixin/event/world/MixinServerWorld.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package com.patchworkmc.mixin.event.world;\n+\n+import java.util.function.BiFunction;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.event.world.WorldEvent;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+\n+import net.minecraft.util.profiler.Profiler;\n+import net.minecraft.world.chunk.ChunkManager;\n+import net.minecraft.world.dimension.Dimension;\n+import net.minecraft.world.dimension.DimensionType;\n+import net.minecraft.world.level.LevelInfo;\n+import net.minecraft.world.level.LevelProperties;\n+import net.minecraft.world.World;\n+import net.minecraft.server.world.ServerWorld;\n+\n+import com.patchworkmc.impl.event.world.WorldEvents;\n+\n+@Mixin(ServerWorld.class)\n+public abstract class MixinServerWorld extends World {\n+\tprotected MixinServerWorld(LevelProperties levelProperties, DimensionType dimensionType, BiFunction<World, Dimension, ChunkManager> chunkManagerProvider, Profiler profiler, boolean isClient) {\n+\t\tsuper(levelProperties, dimensionType, chunkManagerProvider, profiler, isClient);\n+\t}\n+\n+\t@Inject(method = \"save\", at = @At(value = \"INVOKE\", target = \"net/minecraft/server/world/ServerChunkManager.save (Z)V\"))\n+\tprivate void hookSave(CallbackInfo info) {\n+\t\tServerWorld world = (ServerWorld) (Object) this;\n+\t\tMinecraftForge.EVENT_BUS.post(new WorldEvent.Save(world));\n+\t}\n+\n+\t// TODO: consider adding a shift to before obtaining the ChunkManager to match forge more closely\n+\t// I don't think it'll make much of a difference.\n+\t@Inject(method = \"init\", cancellable = true, at = @At(value = \"INVOKE\", target = \"net/minecraft/world/gen/chunk/ChunkGenerator.getBiomeSource ()Lnet/minecraft/world/biome/source/BiomeSource;\"))", "originalCommit": "b3ceb930b296e6ac6528a7be14858a789cfba0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNDA2Ng==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r369924066", "bodyText": "... oops, i forgot to add all of the new mixins here, which means that it's even less tested than I thought. sigh\nI'll come back to this later. I've already been working on this for hours in a row today.", "author": "kitlith", "createdAt": "2020-01-23T04:10:46Z", "path": "patchwork-events-world/src/main/resources/patchwork-events-world.mixins.json", "diffHunk": "@@ -4,7 +4,10 @@\n   \"compatibilityLevel\": \"JAVA_8\",\n   \"mixins\": [\n     \"MixinServerPlayerInteractionManager\",\n-    \"MixinThreadedAnvilChunkStorage\"\n+    \"MixinThreadedAnvilChunkStorage\",\n+    \"MixinClientWorld\",\n+    \"MixinServerWorld\",\n+    \"MixinMinecraftServer\"", "originalCommit": "b3ceb930b296e6ac6528a7be14858a789cfba0e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9707cd648b881de7498dd6d599df93c97017378", "url": "https://github.com/PatchworkMC/patchwork-api/commit/b9707cd648b881de7498dd6d599df93c97017378", "message": "Implement WorldEvent.\n\nThis also includes the following nested derived events:\n - WorldEvent.Load\n - WorldEvent.Unload\n - WorldEvent.Save\n - WorldEvent.PotentialSpawns\n - WorldEvent.CreateSpawnPosition", "committedDate": "2020-01-23T04:47:34Z", "type": "forcePushed"}, {"oid": "f46763145ad93551f3fe66fcf99370e5908bbdc7", "url": "https://github.com/PatchworkMC/patchwork-api/commit/f46763145ad93551f3fe66fcf99370e5908bbdc7", "message": "Implement WorldEvent.\n\nThis also includes the following nested derived events:\n - WorldEvent.Load\n - WorldEvent.Unload\n - WorldEvent.Save\n - WorldEvent.PotentialSpawns\n - WorldEvent.CreateSpawnPosition", "committedDate": "2020-01-23T05:44:55Z", "type": "forcePushed"}, {"oid": "dafd3220a512fe5d94fd5afd139ed4be094b56aa", "url": "https://github.com/PatchworkMC/patchwork-api/commit/dafd3220a512fe5d94fd5afd139ed4be094b56aa", "message": "Implement WorldEvent.\n\nThis also includes the following nested derived events:\n - WorldEvent.Load\n - WorldEvent.Unload\n - WorldEvent.Save\n - WorldEvent.PotentialSpawns\n - WorldEvent.CreateSpawnPosition", "committedDate": "2020-01-23T05:53:45Z", "type": "forcePushed"}, {"oid": "993d3c957cb16b667e6c41ed7503a3ebcdaae659", "url": "https://github.com/PatchworkMC/patchwork-api/commit/993d3c957cb16b667e6c41ed7503a3ebcdaae659", "message": "Include DifficultyChangeEvent.", "committedDate": "2020-01-22T07:10:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDE4NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373320185", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>This event is not {@link net.minecraftforge.eventbus.api.Cancelable}.</p>\n          \n          \n            \n             * <p>This event is not cancellable.</p>", "author": "coderbot16", "createdAt": "2020-01-31T05:22:33Z", "path": "patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingSetAttackTargetEvent.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.entity.living;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.mob.MobEntity;\n+\n+/**\n+ * LivingSetAttackTargetEvent is fired when an Entity sets a target to attack.\n+ *\n+ * <p>This event is fired whenever a MobEntity sets a target to attack in\n+ * {@link MobEntity#setTarget(LivingEntity)}.</p>\n+ *\n+ * <p>This event is fired via {@link com.patchworkmc.impl.event.entity.EntityEvents#onLivingSetAttackTarget(LivingEntity, LivingEntity)}.</p>\n+ *\n+ * <p>{@link #target} contains the newly targeted Entity.</p>\n+ *\n+ * <p>This event is not {@link net.minecraftforge.eventbus.api.Cancelable}.</p>", "originalCommit": "993d3c957cb16b667e6c41ed7503a3ebcdaae659", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDQ5MA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373320490", "bodyText": "We are just referring to entities in general rather than Entity specifically here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * LivingSetAttackTargetEvent is fired when an Entity sets a target to attack.\n          \n          \n            \n             * LivingSetAttackTargetEvent is fired when an entity sets a target to attack.", "author": "coderbot16", "createdAt": "2020-01-31T05:24:16Z", "path": "patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingSetAttackTargetEvent.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.entity.living;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.mob.MobEntity;\n+\n+/**\n+ * LivingSetAttackTargetEvent is fired when an Entity sets a target to attack.", "originalCommit": "993d3c957cb16b667e6c41ed7503a3ebcdaae659", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDU3NA==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373320574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>This event is fired whenever a MobEntity sets a target to attack in\n          \n          \n            \n             * <p>This event is fired whenever a {@link MobEntity} sets a target to attack in", "author": "coderbot16", "createdAt": "2020-01-31T05:24:49Z", "path": "patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingSetAttackTargetEvent.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.entity.living;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.mob.MobEntity;\n+\n+/**\n+ * LivingSetAttackTargetEvent is fired when an Entity sets a target to attack.\n+ *\n+ * <p>This event is fired whenever a MobEntity sets a target to attack in", "originalCommit": "993d3c957cb16b667e6c41ed7503a3ebcdaae659", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDYwMw==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373320603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>This event does not have a result. {@link HasResult}</p>\n          \n          \n            \n             * <p>This event does not have a result.</p>", "author": "coderbot16", "createdAt": "2020-01-31T05:25:04Z", "path": "patchwork-events-entity/src/main/java/net/minecraftforge/event/entity/living/LivingSetAttackTargetEvent.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event.entity.living;\n+\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.entity.mob.MobEntity;\n+\n+/**\n+ * LivingSetAttackTargetEvent is fired when an Entity sets a target to attack.\n+ *\n+ * <p>This event is fired whenever a MobEntity sets a target to attack in\n+ * {@link MobEntity#setTarget(LivingEntity)}.</p>\n+ *\n+ * <p>This event is fired via {@link com.patchworkmc.impl.event.entity.EntityEvents#onLivingSetAttackTarget(LivingEntity, LivingEntity)}.</p>\n+ *\n+ * <p>{@link #target} contains the newly targeted Entity.</p>\n+ *\n+ * <p>This event is not {@link net.minecraftforge.eventbus.api.Cancelable}.</p>\n+ *\n+ * <p>This event does not have a result. {@link HasResult}</p>", "originalCommit": "993d3c957cb16b667e6c41ed7503a3ebcdaae659", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMyMDk2NQ==", "url": "https://github.com/PatchworkMC/patchwork-api/pull/34#discussion_r373320965", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>This event is not Cancelable.</p>\n          \n          \n            \n             * <p>This event is not cancellable.</p>", "author": "coderbot16", "createdAt": "2020-01-31T05:27:00Z", "path": "patchwork-events-world/src/main/java/net/minecraftforge/event/DifficultyChangeEvent.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Minecraft Forge, Patchwork Project\n+ * Copyright (c) 2016-2019, 2019\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation version 2.1\n+ * of the License.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this library; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n+ */\n+\n+package net.minecraftforge.event;\n+\n+import net.minecraftforge.common.MinecraftForge;\n+import net.minecraftforge.eventbus.api.Event;\n+\n+import net.minecraft.world.Difficulty;\n+\n+/**\n+ * DifficultyChangeEvent is fired when difficulty is changing.\n+ *\n+ * <p>TODO: This event is not currently fired.</p>\n+ *\n+ * <p>This event is not Cancelable.</p>", "originalCommit": "993d3c957cb16b667e6c41ed7503a3ebcdaae659", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d443816dcfb2d0d8194075eeb66f7ab8f17650f8", "url": "https://github.com/PatchworkMC/patchwork-api/commit/d443816dcfb2d0d8194075eeb66f7ab8f17650f8", "message": "Implement LivingSetAttackTargetEvent.", "committedDate": "2020-02-15T01:25:42Z", "type": "commit"}, {"oid": "4a520103c46d969d8b580d47d5100ce99a991925", "url": "https://github.com/PatchworkMC/patchwork-api/commit/4a520103c46d969d8b580d47d5100ce99a991925", "message": "Implement LivingDamageEvent.", "committedDate": "2020-02-15T01:25:51Z", "type": "commit"}, {"oid": "56df3fe32cf508f483900b9a1136a6f2666ee7ef", "url": "https://github.com/PatchworkMC/patchwork-api/commit/56df3fe32cf508f483900b9a1136a6f2666ee7ef", "message": "Include DifficultyChangeEvent.", "committedDate": "2020-02-15T01:25:51Z", "type": "commit"}, {"oid": "56df3fe32cf508f483900b9a1136a6f2666ee7ef", "url": "https://github.com/PatchworkMC/patchwork-api/commit/56df3fe32cf508f483900b9a1136a6f2666ee7ef", "message": "Include DifficultyChangeEvent.", "committedDate": "2020-02-15T01:25:51Z", "type": "forcePushed"}]}