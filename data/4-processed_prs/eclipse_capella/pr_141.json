{"pr_number": 141, "pr_title": "Search in diagram and note implementation bugzilla/558030/search and replace", "pr_createdAt": "2020-03-17T11:33:09Z", "pr_url": "https://github.com/eclipse/capella/pull/141", "timeline": [{"oid": "3d8d3bca7d6858939c0471c7ff73248252879e44", "url": "https://github.com/eclipse/capella/commit/3d8d3bca7d6858939c0471c7ff73248252879e44", "message": "Add the possibility to search in diagram and note. Introduce the\nSearchItem objects to prepare for the extensibility of these elemements.\n\nChange-Id: I77d4b6dc5662a9f4dcd303ca1ba7e0fbc2bd32b1\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-17T11:34:29Z", "type": "commit"}, {"oid": "3d8d3bca7d6858939c0471c7ff73248252879e44", "url": "https://github.com/eclipse/capella/commit/3d8d3bca7d6858939c0471c7ff73248252879e44", "message": "Add the possibility to search in diagram and note. Introduce the\nSearchItem objects to prepare for the extensibility of these elemements.\n\nChange-Id: I77d4b6dc5662a9f4dcd303ca1ba7e0fbc2bd32b1\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-17T11:34:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDE0OQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r393720149", "bodyText": "This will load the diagram on T4C. So first time we use the search, all diagram will be loaded no?", "author": "pdulth", "createdAt": "2020-03-17T14:28:18Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchQuery.java", "diffHunk": "@@ -23,19 +25,52 @@\n import org.eclipse.core.runtime.Status;\r\n import org.eclipse.core.runtime.SubMonitor;\r\n import org.eclipse.emf.ecore.EAttribute;\r\n-import org.eclipse.emf.ecore.EClass;\r\n import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.gmf.runtime.diagram.core.util.ViewType;\r\n+import org.eclipse.gmf.runtime.notation.Diagram;\r\n+import org.eclipse.gmf.runtime.notation.NotationPackage;\r\n+import org.eclipse.gmf.runtime.notation.Shape;\r\n import org.eclipse.jface.viewers.ITreeContentProvider;\r\n import org.eclipse.search.ui.ISearchQuery;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.ui.business.api.query.DDiagramGraphicalQuery;\r\n+import org.eclipse.sirius.ext.base.Option;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationDescriptor;\r\n import org.polarsys.capella.core.commands.preferences.util.PreferencesHelper;\r\n import org.polarsys.capella.core.platform.sirius.ui.navigator.viewer.CapellaNavigatorContentProvider;\r\n+import org.polarsys.capella.core.ui.search.searchfor.item.SearchForAttributeItem;\r\n+import org.polarsys.capella.core.ui.search.searchfor.item.SearchForClassItem;\r\n+import org.polarsys.capella.core.ui.search.searchfor.item.SearchForNoteItem;\r\n \r\n public class CapellaSearchQuery implements ISearchQuery {\r\n \r\n   private final CapellaSearchResult capellaSearchResult = new CapellaSearchResult(this);\r\n   private final CapellaSearchSettings capellaSearchSettings;\r\n \r\n-  private final ITreeContentProvider contentProvider = new CapellaNavigatorContentProvider();\r\n+  private final ITreeContentProvider contentProvider = new CapellaNavigatorContentProvider() {\r\n+    // Extend the search scope to include note from diagram\r\n+    @Override\r\n+    public Object[] getChildren(Object element) {\r\n+      if (element instanceof DRepresentationDescriptor) {\r\n+        DRepresentation representation = ((DRepresentationDescriptor) element).getRepresentation();\r", "originalCommit": "3d8d3bca7d6858939c0471c7ff73248252879e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMTk4MA==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r394411980", "bodyText": "Yes, you're right. A check must be done here.", "author": "minhtutonthat", "createdAt": "2020-03-18T14:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDQ0NQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r393720445", "bodyText": "same here", "author": "pdulth", "createdAt": "2020-03-17T14:28:40Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "diffHunk": "@@ -32,7 +38,22 @@\n   public CapellaSearchResult(CapellaSearchQuery capellaSearchQuery) {\r\n     this.capellaSearchQuery = capellaSearchQuery;\r\n     setActiveMatchFilters(new MatchFilter[] {});\r\n-    treeData = new TreeData(new ArrayList<Object>(), null);\r\n+    treeData = new TreeData(new ArrayList<Object>(), null) {\r\n+      // Customize this to add notes into search scope\r\n+      @Override\r\n+      protected Object doGetParent(Object element) {\r\n+        if (element instanceof DRepresentationDescriptor) {\r\n+          return ((DRepresentationDescriptor) element).getTarget();\r\n+        } else if (element instanceof Shape) {\r\n+          Diagram diagram = ((Shape) element).getDiagram();\r", "originalCommit": "3d8d3bca7d6858939c0471c7ff73248252879e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMjYxMQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r394412611", "bodyText": "This works because Shape objects can only be found once their diagram is already loaded.", "author": "minhtutonthat", "createdAt": "2020-03-18T15:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDQ0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMTcyOQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r397201729", "bodyText": "\ud83d\udc4d", "author": "sandupostaru", "createdAt": "2020-03-24T14:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMDQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTg5Nw==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r393721897", "bodyText": "For that, i think we can use PlatformUI.getDecoratorManagerXX to use decorations used in Preferecnes / General / Appareance / Label Decorations.", "author": "pdulth", "createdAt": "2020-03-17T14:30:34Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResultLabelProvider.java", "diffHunk": "@@ -55,27 +64,28 @@ public StyledString getStyledText(Object element) {\n     StyledString str = new StyledString();\r\n \r\n     str.append(getLabelText(element));\r\n-    str.append(\" \"); \r\n+    str.append(\" \");\r\n \r\n     if (element instanceof EObject) {\r\n       boolean isLockedByOther = CapellaReadOnlyHelper.getReadOnlySectionHandler().isLockedByOthers((EObject) element);\r\n       if (isLockedByOther) {\r\n-        str.append(\"(Read-Only)\", StyledString.DECORATIONS_STYLER); \r\n+        str.append(\"(Read-Only)\", StyledString.DECORATIONS_STYLER);\r", "originalCommit": "3d8d3bca7d6858939c0471c7ff73248252879e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMjk5NQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r394412995", "bodyText": "This is a great idea. Now we have all the lock decorations under T4C :)", "author": "minhtutonthat", "createdAt": "2020-03-18T15:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTg5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxODQyNA==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r394918424", "bodyText": "There is something here:\ntps://github.com/eclipse/capella/blob/b05bc20ce8fc38b98ac7789c16c0f347d10d050b/core/plugins/org.polarsys.capella.core.ui.toolkit/src/org/polarsys/capella/core/ui/toolkit/dialogs/ConfirmDeleteCapellaElementDialog.java#L123", "author": "pdulth", "createdAt": "2020-03-19T10:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDE2NQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r393724165", "bodyText": "maybe we can use eclipse Adapters, to adapt something to something else.\nThat way, we can avoid hard dependencies everywhere, and being extensible quite easily.\nhttps://github.com/eclipse/capella/blob/b05bc20ce8fc38b98ac7789c16c0f347d10d050b/tests/plugins/org.polarsys.capella.test.business.queries.ju/src/org/polarsys/capella/test/business/queries/ju/QueryAdapterFactory.java\nhttps://github.com/eclipse/capella/blob/b05bc20ce8fc38b98ac7789c16c0f347d10d050b/tests/plugins/org.polarsys.capella.test.business.queries.ju/src/org/polarsys/capella/test/business/queries/ju/views/BqLabelProvider.java", "author": "pdulth", "createdAt": "2020-03-17T14:33:34Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResultLabelProvider.java", "diffHunk": "@@ -55,27 +64,28 @@ public StyledString getStyledText(Object element) {\n     StyledString str = new StyledString();\r\n \r\n     str.append(getLabelText(element));\r\n-    str.append(\" \"); \r\n+    str.append(\" \");\r\n \r\n     if (element instanceof EObject) {\r\n       boolean isLockedByOther = CapellaReadOnlyHelper.getReadOnlySectionHandler().isLockedByOthers((EObject) element);\r\n       if (isLockedByOther) {\r\n-        str.append(\"(Read-Only)\", StyledString.DECORATIONS_STYLER); \r\n+        str.append(\"(Read-Only)\", StyledString.DECORATIONS_STYLER);\r\n       }\r\n     }\r\n     return str;\r\n   }\r\n \r\n   public StyledString getLabelText(Object element) {\r\n-    StyledString labelText = new StyledString(\"\"); \r\n+    StyledString labelText = new StyledString(\"\");\r\n     if (element instanceof CapellaSearchMatchEntry) {\r\n       CapellaSearchMatchEntry capellaSearchMatchEntry = (CapellaSearchMatchEntry) element;\r\n       EAttribute attribute = (EAttribute) capellaSearchMatchEntry.getAttribute();\r\n       labelText.append(attribute.getName());\r\n       labelText.append(\": \");\r\n       labelText.append(capellaSearchMatchEntry.getText());\r\n-    }\r\n-    else {\r\n+    } else if (element instanceof Shape && ViewType.NOTE.equals(((Shape) element).getType())) {\r", "originalCommit": "3d8d3bca7d6858939c0471c7ff73248252879e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNDc1NQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r394414755", "bodyText": "Hum I do not see how we can adapt these objects since they are totally different: A match entry (e.g. match on name), a diagram note and other Capella elements.", "author": "minhtutonthat", "createdAt": "2020-03-18T15:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDkxOQ==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r393724919", "bodyText": "EObjectLabel.getText no?", "author": "pdulth", "createdAt": "2020-03-17T14:34:31Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/item/SearchForAttributeItem.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.ui.search.searchfor.item;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.provider.EcoreEditPlugin;\n+import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;\n+import org.eclipse.swt.graphics.Image;\n+\n+public class SearchForAttributeItem implements SearchForItem {\n+  // An attribute item can represent many attributes with the same name\n+  private Set<Object> attributes;\n+\n+  public SearchForAttributeItem() {\n+    this.attributes = new HashSet<>();\n+  }\n+\n+  /**\n+   * \n+   * @param eObj\n+   * @return the search text matched from this search item\n+   */\n+  public String getTextToSearch(EObject eObj) {\n+    Object attribute = getAttributeFor(eObj);\n+    if (attribute instanceof EAttribute) {\n+      return (String) eObj.eGet((EAttribute) attribute);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public String getText() {\n+    return ((EAttribute) attributes.iterator().next()).getName();", "originalCommit": "3d8d3bca7d6858939c0471c7ff73248252879e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNTYwOA==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r394415608", "bodyText": "It unfortunately does not work on EAttribute.", "author": "minhtutonthat", "createdAt": "2020-03-18T15:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTE4NA==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r393725184", "bodyText": "@yugansan has added the helper in EObjectLaProHelper", "author": "pdulth", "createdAt": "2020-03-17T14:34:55Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/item/SearchForClassItem.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.ui.search.searchfor.item;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.emf.common.notify.AdapterFactory;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\n+import org.eclipse.swt.graphics.Image;\n+import org.polarsys.capella.core.model.handler.provider.CapellaAdapterFactoryProvider;\n+import org.polarsys.capella.core.ui.search.searchfor.GetImagesFromEClassUtil;\n+\n+/**\n+ * \n+ * Search item for EClass\n+ */\n+public class SearchForClassItem implements SearchForItem {\n+  private Object obj;\n+\n+  public SearchForClassItem(Object obj) {\n+    this.obj = obj;\n+  }\n+\n+  /**\n+   * Check if this search item covers the input object\n+   * \n+   * @param eObj\n+   */\n+  public boolean cover(Object object) {\n+    return object instanceof EObject && obj instanceof EClass && ((EObject) object).eClass() == obj;\n+  }\n+\n+  @Override\n+  public String getText() {\n+    return ((EClass) obj).getName();\n+  }\n+\n+  @Override\n+  public Image getImage() {\n+    AdapterFactory adapterFactory = CapellaAdapterFactoryProvider.getInstance().getAdapterFactory();", "originalCommit": "3d8d3bca7d6858939c0471c7ff73248252879e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNjU1MA==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r394416550", "bodyText": "It's not yet on this branch. We should think about it when this is merged to 1.4.x.", "author": "minhtutonthat", "createdAt": "2020-03-18T15:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTE4NA=="}], "type": "inlineReview"}, {"oid": "25e182f98525ab544d44d42b27d16ca1775c7519", "url": "https://github.com/eclipse/capella/commit/25e182f98525ab544d44d42b27d16ca1775c7519", "message": "- Allow decorations on search result.\n- Do not load all diagrams when searching\n\nChange-Id: I302bf0bfb3966a91a34696b5d5d6484bfd510ae8\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>", "committedDate": "2020-03-18T15:06:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4ODIwNw==", "url": "https://github.com/eclipse/capella/pull/141#discussion_r397188207", "bodyText": "\ud83d\udc4d", "author": "sandupostaru", "createdAt": "2020-03-24T14:19:42Z", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchQuery.java", "diffHunk": "@@ -23,19 +25,53 @@\n import org.eclipse.core.runtime.Status;\r\n import org.eclipse.core.runtime.SubMonitor;\r\n import org.eclipse.emf.ecore.EAttribute;\r\n-import org.eclipse.emf.ecore.EClass;\r\n import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.gmf.runtime.diagram.core.util.ViewType;\r\n+import org.eclipse.gmf.runtime.notation.Diagram;\r\n+import org.eclipse.gmf.runtime.notation.NotationPackage;\r\n+import org.eclipse.gmf.runtime.notation.Shape;\r\n import org.eclipse.jface.viewers.ITreeContentProvider;\r\n import org.eclipse.search.ui.ISearchQuery;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.ui.business.api.query.DDiagramGraphicalQuery;\r\n+import org.eclipse.sirius.ext.base.Option;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationDescriptor;\r\n import org.polarsys.capella.core.commands.preferences.util.PreferencesHelper;\r\n import org.polarsys.capella.core.platform.sirius.ui.navigator.viewer.CapellaNavigatorContentProvider;\r\n+import org.polarsys.capella.core.ui.search.searchfor.item.SearchForAttributeItem;\r\n+import org.polarsys.capella.core.ui.search.searchfor.item.SearchForClassItem;\r\n+import org.polarsys.capella.core.ui.search.searchfor.item.SearchForNoteItem;\r\n \r\n public class CapellaSearchQuery implements ISearchQuery {\r\n \r\n   private final CapellaSearchResult capellaSearchResult = new CapellaSearchResult(this);\r\n   private final CapellaSearchSettings capellaSearchSettings;\r\n \r\n-  private final ITreeContentProvider contentProvider = new CapellaNavigatorContentProvider();\r\n+  private final ITreeContentProvider contentProvider = new CapellaNavigatorContentProvider() {\r\n+    // Extend the search scope to include note from diagram\r\n+    @Override\r\n+    public Object[] getChildren(Object element) {\r\n+      if (element instanceof DRepresentationDescriptor\r\n+          && ((DRepresentationDescriptor) element).isLoadedRepresentation()) {\r", "originalCommit": "25e182f98525ab544d44d42b27d16ca1775c7519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}