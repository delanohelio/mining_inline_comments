{"pr_number": 70, "pr_title": "[558032] Title Block Preferences Page", "pr_createdAt": "2020-02-05T08:24:47Z", "pr_url": "https://github.com/eclipse/capella/pull/70", "timeline": [{"oid": "470b0dea8cf1b4b87dbba6046b8c45642a8a34fb", "url": "https://github.com/eclipse/capella/commit/470b0dea8cf1b4b87dbba6046b8c45642a8a34fb", "message": "[558032] Title Block Preferences Page\n\nChange-Id: Ifc48c328ab4bd6e8c211bfcfa53a64c23336563b\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-05T08:23:09Z", "type": "commit"}, {"oid": "798efc3f9190c9e625c6591eeadc92b787ab8f75", "url": "https://github.com/eclipse/capella/commit/798efc3f9190c9e625c6591eeadc92b787ab8f75", "message": "Title Block Preferences Page\n- Add validation\n- Save table items to preference store\n\nChange-Id: I5cb35eff127ab356ccd61fa218e6017bcfbdbe8b\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-06T10:30:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0ODkyOA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r375948928", "bodyText": "Typo?", "author": "minhtutonthat", "createdAt": "2020-02-06T16:40:30Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/src/org/polarsys/capella/core/platform/sirius/ui/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.platform.sirius.ui.preferences;\r\n+\r\n+import org.eclipse.jface.preference.BooleanFieldEditor;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.preference.IntegerFieldEditor;\r\n+import org.eclipse.jface.viewers.ColumnLayoutData;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.TableLayout;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.Menu;\r\n+import org.eclipse.swt.widgets.MenuItem;\r\n+import org.eclipse.swt.widgets.Table;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.eclipse.swt.widgets.TableItem;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+\r\n+  private IntegerFieldEditor _columnsFieldEditor;\r\n+\r\n+  private Table table;\r\n+\r\n+  Button add_button;\r\n+  Button edit_button;\r\n+  Button remove_button;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createGroupForNumberOfColumns();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+    createButtons(top);\r\n+  }\r\n+\r\n+  private Button createButton(Composite top, Composite container, String text, boolean enabled) {\r\n+    Button button = new Button(container, SWT.PUSH);\r\n+    button.setFont(top.getFont());\r\n+    button.setText(text);\r\n+    button.setEnabled(enabled);\r\n+    this.setButtonLayoutData(button);\r\n+    return button;\r\n+  }\r\n+\r\n+  private void createButtons(Composite top) {\r\n+\r\n+    Composite container = new Composite(top, SWT.NONE);\r\n+    GridLayout container_layout = new GridLayout();\r\n+    container_layout.marginHeight = 0;\r\n+    container_layout.marginWidth = 0;\r\n+    container.setLayout(container_layout);\r\n+    container.setLayoutData(new GridData(GridData.FILL_VERTICAL));\r\n+    container.setFont(top.getFont());\r\n+\r\n+    add_button = createButton(top, container, \"Add\", true);\r\n+\r\n+    edit_button = createButton(top, container, \"Edit\", false);\r\n+\r\n+    remove_button = createButton(top, container, \"Remove\", false);\r\n+\r\n+    add_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          dialog.setCurrentName(\"\");\r\n+          dialog.setCurrentContent(\"\");\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            TableItem item = new TableItem(table, SWT.NULL);\r\n+            item.setText(0, dialog.getName());\r\n+            item.setText(1, dialog.getContent());\r\n+          }\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+    remove_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          table.remove(table.getSelectionIndices());\r\n+          edit_button.setEnabled(false);\r\n+          remove_button.setEnabled(false);\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    edit_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+\r\n+          int index = table.getSelectionIndex();\r\n+          String currentName = table.getItem(index).getText(0);\r\n+          String currentContent = table.getItem(index).getText(1);\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+\r\n+          dialog.setCurrentName(currentName);\r\n+          dialog.setCurrentContent(currentContent);\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            table.getItem(index).setText(0, dialog.getName());\r\n+            table.getItem(index).setText(1, dialog.getContent());\r\n+            edit_button.setEnabled(false);\r\n+            remove_button.setEnabled(false);\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    Menu menu = new Menu(getShell(), SWT.POP_UP);\r\n+    table.setMenu(menu);\r\n+    MenuItem menu_item = new MenuItem(menu, SWT.PUSH);\r\n+    menu_item.setText(\"Delete Selection\");\r\n+    menu_item.addListener(SWT.Selection, new Listener() {\r\n+\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        table.remove(table.getSelectionIndices());\r\n+      }\r\n+    });\r\n+\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    TableLayout tableLayout = new TableLayout();\r\n+\r\n+    table = new Table(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+    table.setLayout(tableLayout);\r\n+    table.setHeaderVisible(true);\r\n+    table.setLinesVisible(true);\r\n+    table.setFont(top.getFont());\r\n+\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.heightHint = table.getItemHeight();\r\n+    gridData.horizontalSpan = 1;\r\n+    table.setLayoutData(gridData);\r\n+    ColumnLayoutData[] fTableColumnLayouts = { new ColumnWeightData(165), new ColumnWeightData(165), };\r\n+\r\n+    TableColumn column;\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[0]);\r\n+    column = new TableColumn(table, SWT.NONE, 0);\r\n+    column.setResizable(fTableColumnLayouts[0].resizable);\r\n+    column.setText(\"Name\");\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[1]);\r\n+    column = new TableColumn(table, SWT.NONE, 1);\r\n+    column.setResizable(fTableColumnLayouts[1].resizable);\r\n+    column.setText(\"Content\");\r\n+\r\n+    String[] currentTableItems = doGetPreferenceStore().getString(\"tableTitleBlock\").split(\"#\");\r\n+    if (currentTableItems.length >= 2) {\r\n+      for (int i = 1; i < currentTableItems.length; i += 2) {\r\n+        TableItem item = new TableItem(table, SWT.NULL);\r\n+        item.setText(0, currentTableItems[i]);\r\n+        item.setText(1, currentTableItems[i + 1]);\r\n+      }\r\n+    }\r\n+\r\n+    table.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        int index = table.getSelectionIndex();\r\n+        if (index != -1) {\r\n+          edit_button.setEnabled(true);\r\n+          remove_button.setEnabled(true);\r\n+        }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void createGroupForNumberOfColumns() {\r\n+    final Group group = createGroup(\"Number of columns in TitleBlock\", \"Tooltip grup\", getFieldEditorParent());\r", "originalCommit": "798efc3f9190c9e625c6591eeadc92b787ab8f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0OTQzMw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r375949433", "bodyText": "Could you avoid using _ in variable names to avoid Sonar issue?", "author": "minhtutonthat", "createdAt": "2020-02-06T16:41:13Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/src/org/polarsys/capella/core/platform/sirius/ui/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.platform.sirius.ui.preferences;\r\n+\r\n+import org.eclipse.jface.preference.BooleanFieldEditor;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.preference.IntegerFieldEditor;\r\n+import org.eclipse.jface.viewers.ColumnLayoutData;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.TableLayout;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.Menu;\r\n+import org.eclipse.swt.widgets.MenuItem;\r\n+import org.eclipse.swt.widgets.Table;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.eclipse.swt.widgets.TableItem;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+\r\n+  private IntegerFieldEditor _columnsFieldEditor;\r\n+\r\n+  private Table table;\r\n+\r\n+  Button add_button;\r\n+  Button edit_button;\r\n+  Button remove_button;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createGroupForNumberOfColumns();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+    createButtons(top);\r\n+  }\r\n+\r\n+  private Button createButton(Composite top, Composite container, String text, boolean enabled) {\r\n+    Button button = new Button(container, SWT.PUSH);\r\n+    button.setFont(top.getFont());\r\n+    button.setText(text);\r\n+    button.setEnabled(enabled);\r\n+    this.setButtonLayoutData(button);\r\n+    return button;\r\n+  }\r\n+\r\n+  private void createButtons(Composite top) {\r\n+\r\n+    Composite container = new Composite(top, SWT.NONE);\r\n+    GridLayout container_layout = new GridLayout();\r\n+    container_layout.marginHeight = 0;\r\n+    container_layout.marginWidth = 0;\r\n+    container.setLayout(container_layout);\r\n+    container.setLayoutData(new GridData(GridData.FILL_VERTICAL));\r\n+    container.setFont(top.getFont());\r\n+\r\n+    add_button = createButton(top, container, \"Add\", true);\r\n+\r\n+    edit_button = createButton(top, container, \"Edit\", false);\r\n+\r\n+    remove_button = createButton(top, container, \"Remove\", false);\r\n+\r\n+    add_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          dialog.setCurrentName(\"\");\r\n+          dialog.setCurrentContent(\"\");\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            TableItem item = new TableItem(table, SWT.NULL);\r\n+            item.setText(0, dialog.getName());\r\n+            item.setText(1, dialog.getContent());\r\n+          }\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+    remove_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          table.remove(table.getSelectionIndices());\r\n+          edit_button.setEnabled(false);\r\n+          remove_button.setEnabled(false);\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    edit_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+\r\n+          int index = table.getSelectionIndex();\r\n+          String currentName = table.getItem(index).getText(0);\r\n+          String currentContent = table.getItem(index).getText(1);\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+\r\n+          dialog.setCurrentName(currentName);\r\n+          dialog.setCurrentContent(currentContent);\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            table.getItem(index).setText(0, dialog.getName());\r\n+            table.getItem(index).setText(1, dialog.getContent());\r\n+            edit_button.setEnabled(false);\r\n+            remove_button.setEnabled(false);\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    Menu menu = new Menu(getShell(), SWT.POP_UP);\r\n+    table.setMenu(menu);\r\n+    MenuItem menu_item = new MenuItem(menu, SWT.PUSH);\r\n+    menu_item.setText(\"Delete Selection\");\r\n+    menu_item.addListener(SWT.Selection, new Listener() {\r\n+\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        table.remove(table.getSelectionIndices());\r\n+      }\r\n+    });\r\n+\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    TableLayout tableLayout = new TableLayout();\r\n+\r\n+    table = new Table(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+    table.setLayout(tableLayout);\r\n+    table.setHeaderVisible(true);\r\n+    table.setLinesVisible(true);\r\n+    table.setFont(top.getFont());\r\n+\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.heightHint = table.getItemHeight();\r\n+    gridData.horizontalSpan = 1;\r\n+    table.setLayoutData(gridData);\r\n+    ColumnLayoutData[] fTableColumnLayouts = { new ColumnWeightData(165), new ColumnWeightData(165), };\r\n+\r\n+    TableColumn column;\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[0]);\r\n+    column = new TableColumn(table, SWT.NONE, 0);\r\n+    column.setResizable(fTableColumnLayouts[0].resizable);\r\n+    column.setText(\"Name\");\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[1]);\r\n+    column = new TableColumn(table, SWT.NONE, 1);\r\n+    column.setResizable(fTableColumnLayouts[1].resizable);\r\n+    column.setText(\"Content\");\r\n+\r\n+    String[] currentTableItems = doGetPreferenceStore().getString(\"tableTitleBlock\").split(\"#\");\r\n+    if (currentTableItems.length >= 2) {\r\n+      for (int i = 1; i < currentTableItems.length; i += 2) {\r\n+        TableItem item = new TableItem(table, SWT.NULL);\r\n+        item.setText(0, currentTableItems[i]);\r\n+        item.setText(1, currentTableItems[i + 1]);\r\n+      }\r\n+    }\r\n+\r\n+    table.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        int index = table.getSelectionIndex();\r\n+        if (index != -1) {\r\n+          edit_button.setEnabled(true);\r\n+          remove_button.setEnabled(true);\r\n+        }\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void createGroupForNumberOfColumns() {\r\n+    final Group group = createGroup(\"Number of columns in TitleBlock\", \"Tooltip grup\", getFieldEditorParent());\r\n+    BooleanFieldEditor enableMonitoringFieldEditor = new BooleanFieldEditor(\"Enable Editor\", \"Custom value\", group) {\r\n+      @SuppressWarnings(\"synthetic-access\")\r\n+      @Override\r\n+      protected void valueChanged(boolean oldValue_p, boolean newValue_p) {\r\n+        super.valueChanged(oldValue_p, newValue_p);\r\n+        _columnsFieldEditor.setEnabled(newValue_p, group);\r", "originalCommit": "798efc3f9190c9e625c6591eeadc92b787ab8f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1Mjg2Mg==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r375952862", "bodyText": "You can use org.eclipse.jface.dialogs.TitleAreaDialog.setErrorMessage(String) to show error message directly on the dialog.", "author": "minhtutonthat", "createdAt": "2020-02-06T16:46:46Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/src/org/polarsys/capella/core/platform/sirius/ui/preferences/TitleBlockDialog.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.platform.sirius.ui.preferences;\r\n+\r\n+import org.eclipse.jface.dialogs.MessageDialog;\r\n+import org.eclipse.jface.dialogs.TitleAreaDialog;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Control;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Shell;\r\n+import org.eclipse.swt.widgets.Text;\r\n+\r\n+public class TitleBlockDialog extends TitleAreaDialog {\r\n+  private final String TITLE_NAME = \"Add name and content\";\r\n+  private Text txtName;\r\n+  private Text txtContent;\r\n+\r\n+  private String name;\r\n+  private String content;\r\n+\r\n+  private String currentName;\r\n+  private String currentContent;\r\n+\r\n+  public TitleBlockDialog(Shell parentShell) {\r\n+\r\n+    super(parentShell);\r\n+  }\r\n+\r\n+  @Override\r\n+  public void create() {\r\n+    super.create();\r\n+    setTitle(TITLE_NAME);\r\n+  }\r\n+\r\n+  @Override\r\n+  protected Control createDialogArea(Composite parent) {\r\n+    Composite area = (Composite) super.createDialogArea(parent);\r\n+    Composite container = new Composite(area, SWT.NONE);\r\n+    container.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\r\n+    GridLayout layout = new GridLayout(2, false);\r\n+    container.setLayout(layout);\r\n+\r\n+    createName(container);\r\n+    createContent(container);\r\n+\r\n+    return area;\r\n+  }\r\n+\r\n+  private void createName(Composite container) {\r\n+    Label lbName = new Label(container, SWT.NONE);\r\n+    lbName.setText(\"Name\");\r\n+\r\n+    GridData dataName = new GridData();\r\n+    dataName.grabExcessHorizontalSpace = true;\r\n+    dataName.horizontalAlignment = GridData.FILL;\r\n+\r\n+    txtName = new Text(container, SWT.BORDER);\r\n+    txtName.setText(currentName);\r\n+    txtName.setLayoutData(dataName);\r\n+  }\r\n+\r\n+  private void createContent(Composite container) {\r\n+    Label lbContent = new Label(container, SWT.NONE);\r\n+    lbContent.setText(\"Content\");\r\n+\r\n+    GridData dataContent = new GridData();\r\n+    dataContent.grabExcessHorizontalSpace = true;\r\n+    dataContent.horizontalAlignment = GridData.FILL;\r\n+    txtContent = new Text(container, SWT.BORDER);\r\n+    txtContent.setText(currentContent);\r\n+\r\n+    txtContent.setLayoutData(dataContent);\r\n+  }\r\n+\r\n+  @Override\r\n+  protected boolean isResizable() {\r\n+    return true;\r\n+  }\r\n+\r\n+  private boolean saveInput() {\r", "originalCommit": "798efc3f9190c9e625c6591eeadc92b787ab8f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1NDczNA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r375954734", "bodyText": "Could you extract the string to a constant (same remark for below strings)?", "author": "minhtutonthat", "createdAt": "2020-02-06T16:49:48Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/src/org/polarsys/capella/core/platform/sirius/ui/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.platform.sirius.ui.preferences;\r\n+\r\n+import org.eclipse.jface.preference.BooleanFieldEditor;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.preference.IntegerFieldEditor;\r\n+import org.eclipse.jface.viewers.ColumnLayoutData;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.TableLayout;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.Menu;\r\n+import org.eclipse.swt.widgets.MenuItem;\r\n+import org.eclipse.swt.widgets.Table;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.eclipse.swt.widgets.TableItem;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+\r\n+  private IntegerFieldEditor _columnsFieldEditor;\r\n+\r\n+  private Table table;\r\n+\r\n+  Button add_button;\r\n+  Button edit_button;\r\n+  Button remove_button;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createGroupForNumberOfColumns();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+    createButtons(top);\r\n+  }\r\n+\r\n+  private Button createButton(Composite top, Composite container, String text, boolean enabled) {\r\n+    Button button = new Button(container, SWT.PUSH);\r\n+    button.setFont(top.getFont());\r\n+    button.setText(text);\r\n+    button.setEnabled(enabled);\r\n+    this.setButtonLayoutData(button);\r\n+    return button;\r\n+  }\r\n+\r\n+  private void createButtons(Composite top) {\r\n+\r\n+    Composite container = new Composite(top, SWT.NONE);\r\n+    GridLayout container_layout = new GridLayout();\r\n+    container_layout.marginHeight = 0;\r\n+    container_layout.marginWidth = 0;\r\n+    container.setLayout(container_layout);\r\n+    container.setLayoutData(new GridData(GridData.FILL_VERTICAL));\r\n+    container.setFont(top.getFont());\r\n+\r\n+    add_button = createButton(top, container, \"Add\", true);\r\n+\r\n+    edit_button = createButton(top, container, \"Edit\", false);\r\n+\r\n+    remove_button = createButton(top, container, \"Remove\", false);\r\n+\r\n+    add_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          dialog.setCurrentName(\"\");\r\n+          dialog.setCurrentContent(\"\");\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            TableItem item = new TableItem(table, SWT.NULL);\r\n+            item.setText(0, dialog.getName());\r\n+            item.setText(1, dialog.getContent());\r\n+          }\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+    remove_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          table.remove(table.getSelectionIndices());\r\n+          edit_button.setEnabled(false);\r\n+          remove_button.setEnabled(false);\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    edit_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+\r\n+          int index = table.getSelectionIndex();\r\n+          String currentName = table.getItem(index).getText(0);\r\n+          String currentContent = table.getItem(index).getText(1);\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+\r\n+          dialog.setCurrentName(currentName);\r\n+          dialog.setCurrentContent(currentContent);\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            table.getItem(index).setText(0, dialog.getName());\r\n+            table.getItem(index).setText(1, dialog.getContent());\r\n+            edit_button.setEnabled(false);\r\n+            remove_button.setEnabled(false);\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    Menu menu = new Menu(getShell(), SWT.POP_UP);\r\n+    table.setMenu(menu);\r\n+    MenuItem menu_item = new MenuItem(menu, SWT.PUSH);\r\n+    menu_item.setText(\"Delete Selection\");\r\n+    menu_item.addListener(SWT.Selection, new Listener() {\r\n+\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        table.remove(table.getSelectionIndices());\r\n+      }\r\n+    });\r\n+\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    TableLayout tableLayout = new TableLayout();\r\n+\r\n+    table = new Table(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+    table.setLayout(tableLayout);\r\n+    table.setHeaderVisible(true);\r\n+    table.setLinesVisible(true);\r\n+    table.setFont(top.getFont());\r\n+\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.heightHint = table.getItemHeight();\r\n+    gridData.horizontalSpan = 1;\r\n+    table.setLayoutData(gridData);\r\n+    ColumnLayoutData[] fTableColumnLayouts = { new ColumnWeightData(165), new ColumnWeightData(165), };\r\n+\r\n+    TableColumn column;\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[0]);\r\n+    column = new TableColumn(table, SWT.NONE, 0);\r\n+    column.setResizable(fTableColumnLayouts[0].resizable);\r\n+    column.setText(\"Name\");\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[1]);\r\n+    column = new TableColumn(table, SWT.NONE, 1);\r\n+    column.setResizable(fTableColumnLayouts[1].resizable);\r\n+    column.setText(\"Content\");\r\n+\r\n+    String[] currentTableItems = doGetPreferenceStore().getString(\"tableTitleBlock\").split(\"#\");\r", "originalCommit": "798efc3f9190c9e625c6591eeadc92b787ab8f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk1NzkyNQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r375957925", "bodyText": "This if is not necessary, isn't it?", "author": "minhtutonthat", "createdAt": "2020-02-06T16:55:16Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/src/org/polarsys/capella/core/platform/sirius/ui/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.platform.sirius.ui.preferences;\r\n+\r\n+import org.eclipse.jface.preference.BooleanFieldEditor;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.preference.IntegerFieldEditor;\r\n+import org.eclipse.jface.viewers.ColumnLayoutData;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.TableLayout;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.Menu;\r\n+import org.eclipse.swt.widgets.MenuItem;\r\n+import org.eclipse.swt.widgets.Table;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.eclipse.swt.widgets.TableItem;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+\r\n+  private IntegerFieldEditor _columnsFieldEditor;\r\n+\r\n+  private Table table;\r\n+\r\n+  Button add_button;\r\n+  Button edit_button;\r\n+  Button remove_button;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createGroupForNumberOfColumns();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+    createButtons(top);\r\n+  }\r\n+\r\n+  private Button createButton(Composite top, Composite container, String text, boolean enabled) {\r\n+    Button button = new Button(container, SWT.PUSH);\r\n+    button.setFont(top.getFont());\r\n+    button.setText(text);\r\n+    button.setEnabled(enabled);\r\n+    this.setButtonLayoutData(button);\r\n+    return button;\r\n+  }\r\n+\r\n+  private void createButtons(Composite top) {\r\n+\r\n+    Composite container = new Composite(top, SWT.NONE);\r\n+    GridLayout container_layout = new GridLayout();\r\n+    container_layout.marginHeight = 0;\r\n+    container_layout.marginWidth = 0;\r\n+    container.setLayout(container_layout);\r\n+    container.setLayoutData(new GridData(GridData.FILL_VERTICAL));\r\n+    container.setFont(top.getFont());\r\n+\r\n+    add_button = createButton(top, container, \"Add\", true);\r\n+\r\n+    edit_button = createButton(top, container, \"Edit\", false);\r\n+\r\n+    remove_button = createButton(top, container, \"Remove\", false);\r\n+\r\n+    add_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          dialog.setCurrentName(\"\");\r\n+          dialog.setCurrentContent(\"\");\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            TableItem item = new TableItem(table, SWT.NULL);\r\n+            item.setText(0, dialog.getName());\r\n+            item.setText(1, dialog.getContent());\r\n+          }\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+    remove_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+          table.remove(table.getSelectionIndices());\r\n+          edit_button.setEnabled(false);\r\n+          remove_button.setEnabled(false);\r\n+          break;\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    edit_button.addListener(SWT.Selection, new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event e) {\r\n+        switch (e.type) {\r\n+        case SWT.Selection:\r\n+\r\n+          int index = table.getSelectionIndex();\r\n+          String currentName = table.getItem(index).getText(0);\r\n+          String currentContent = table.getItem(index).getText(1);\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+\r\n+          dialog.setCurrentName(currentName);\r\n+          dialog.setCurrentContent(currentContent);\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            table.getItem(index).setText(0, dialog.getName());\r\n+            table.getItem(index).setText(1, dialog.getContent());\r\n+            edit_button.setEnabled(false);\r\n+            remove_button.setEnabled(false);\r\n+          }\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    Menu menu = new Menu(getShell(), SWT.POP_UP);\r\n+    table.setMenu(menu);\r\n+    MenuItem menu_item = new MenuItem(menu, SWT.PUSH);\r\n+    menu_item.setText(\"Delete Selection\");\r\n+    menu_item.addListener(SWT.Selection, new Listener() {\r\n+\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        table.remove(table.getSelectionIndices());\r\n+      }\r\n+    });\r\n+\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    TableLayout tableLayout = new TableLayout();\r\n+\r\n+    table = new Table(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+    table.setLayout(tableLayout);\r\n+    table.setHeaderVisible(true);\r\n+    table.setLinesVisible(true);\r\n+    table.setFont(top.getFont());\r\n+\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.heightHint = table.getItemHeight();\r\n+    gridData.horizontalSpan = 1;\r\n+    table.setLayoutData(gridData);\r\n+    ColumnLayoutData[] fTableColumnLayouts = { new ColumnWeightData(165), new ColumnWeightData(165), };\r\n+\r\n+    TableColumn column;\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[0]);\r\n+    column = new TableColumn(table, SWT.NONE, 0);\r\n+    column.setResizable(fTableColumnLayouts[0].resizable);\r\n+    column.setText(\"Name\");\r\n+\r\n+    tableLayout.addColumnData(fTableColumnLayouts[1]);\r\n+    column = new TableColumn(table, SWT.NONE, 1);\r\n+    column.setResizable(fTableColumnLayouts[1].resizable);\r\n+    column.setText(\"Content\");\r\n+\r\n+    String[] currentTableItems = doGetPreferenceStore().getString(\"tableTitleBlock\").split(\"#\");\r\n+    if (currentTableItems.length >= 2) {\r", "originalCommit": "798efc3f9190c9e625c6591eeadc92b787ab8f75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9b445d27eab95ca482bbc246fd64a86f06af4ded", "url": "https://github.com/eclipse/capella/commit/9b445d27eab95ca482bbc246fd64a86f06af4ded", "message": "[Draft] Edit cells Title Block Preferences\n\nChange-Id: Ie558b256712823440ea2116f3b9999acedd66c0c\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-19T08:18:39Z", "type": "commit"}, {"oid": "e4bf9da6c7dfc87484147b1f952007447b695788", "url": "https://github.com/eclipse/capella/commit/e4bf9da6c7dfc87484147b1f952007447b695788", "message": "[draft] title block preferences - table\n\nChange-Id: Ib1ca945074aa3dfe27212f2e6ebfe9100b05e0e5\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-21T09:06:15Z", "type": "commit"}, {"oid": "49e193ad21481422daa4d66f2e49716a065c3b83", "url": "https://github.com/eclipse/capella/commit/49e193ad21481422daa4d66f2e49716a065c3b83", "message": "[Draft] edit cell\n\nChange-Id: I44fe9938e2905bdc9964561974cf78f107363b1d\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-24T09:02:18Z", "type": "commit"}, {"oid": "95e647d734e8e318b99da6b3aa7fc49dd32a678f", "url": "https://github.com/eclipse/capella/commit/95e647d734e8e318b99da6b3aa7fc49dd32a678f", "message": "[Draft] resize columns, edit cell, add by default Diagram TitleBlock\n\nChange-Id: If9a15461ce4407c254dcc0280dd4a40de4529338\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-24T12:55:17Z", "type": "commit"}, {"oid": "e3b480662d2ab9caffca63a067ccc0b3ddefc61e", "url": "https://github.com/eclipse/capella/commit/e3b480662d2ab9caffca63a067ccc0b3ddefc61e", "message": "[Draft] Move Title Block Preference Page under Diagrams, change Diagrams\nto Diagram and add Process/Chain/Path Display Page.\n\nChange-Id: If29f3418ed9b4ac5767beda6514961623d8e5691\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-26T09:28:29Z", "type": "commit"}, {"oid": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "url": "https://github.com/eclipse/capella/commit/24fd2bf2d64f823c447488515b991db4f6c34c1b", "message": "[draft] restore defaults, refactor\n\nChange-Id: Ib1ee1c9328a0dc9391df39efb9fba1bd53105f69\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-02-28T14:36:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU1Mg==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385753552", "bodyText": "Utilize constants instead of string keys (ex: \"tableTitleBlock\")", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:19:52Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractPreferencesInitializer;\r\n+import org.polarsys.capella.core.platform.sirius.ui.actions.CapellaActionsActivator;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencesInitializer extends AbstractPreferencesInitializer {\r\n+\r\n+  public TitleBlockPreferencesInitializer() {\r\n+    super(CapellaActionsActivator.PLUGIN_ID);\r\n+  }\r\n+\r\n+  @Override\r\n+  public void initializeDefaultPreferences() {\r\n+    IPreferenceStore preferenceStore = Activator.getDefault().getPreferenceStore();\r\n+    preferenceStore.setDefault(\"columnFieldTitleBlock\", 2);\r\n+    preferenceStore.setDefault(\"rowFieldTitleBlock\", 2);\r\n+    preferenceStore.setDefault(\"tableTitleBlock\",\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDM1MQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385770351", "bodyText": "Done", "author": "MalinaStefaniaStoicanescu", "createdAt": "2020-02-28T15:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDEyNQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385754125", "bodyText": "Remove extra spaces", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:20:53Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDgxNQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385764815", "bodyText": "Done", "author": "MalinaStefaniaStoicanescu", "createdAt": "2020-02-28T15:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDY2NA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385754664", "bodyText": "why rowsNumber is increased? maybe rename the method from refreshTableRows to addNewTableRow.", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:21:49Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2ODg3MQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386368871", "bodyText": "Done", "author": "MalinaStefaniaStoicanescu", "createdAt": "2020-03-02T12:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDk1Mw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385754953", "bodyText": "give a meaningful name instead of \"s\"", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:22:21Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTEyNA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385755124", "bodyText": "remove extra spaces (also in other places)", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:22:38Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content + \"+\";\r\n+\r\n+        }\r\n+\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTU1Ng==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385755556", "bodyText": "Use constants instead of inplace strings, but put an empty string in the constants instead o edit.", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:23:23Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content + \"+\";\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(\"tableTitleBlock\", s);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDIyOA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385764228", "bodyText": "Done", "author": "MalinaStefaniaStoicanescu", "createdAt": "2020-02-28T15:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTc3Ng==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385755776", "bodyText": "same, use constants (empty string)", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:23:46Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content + \"+\";\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(\"tableTitleBlock\", s);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2OTAwMg==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386369002", "bodyText": "done", "author": "MalinaStefaniaStoicanescu", "createdAt": "2020-03-02T12:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjIyMw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385756223", "bodyText": "also create a constant SEPARATOR and put + in it.", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:24:36Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content + \"+\";\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(\"tableTitleBlock\", s);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(\"\\\\+\");\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2MDY1Mg==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386260652", "bodyText": "Done", "author": "MalinaStefaniaStoicanescu", "createdAt": "2020-03-02T08:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjQzNA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385756434", "bodyText": "put bound 200 in a constant", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:24:57Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content + \"+\";\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(\"tableTitleBlock\", s);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(\"\\\\+\");\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, final int bound, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, 200);\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1Njg3Mg==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385756872", "bodyText": "seems unnecessary, use a constant bounds instead.", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:25:37Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content + \"+\";\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(\"tableTitleBlock\", s);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(\"\\\\+\");\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, final int bound, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, 200);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r\n+\r\n+      @Override\r\n+      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\r\n+        ViewerCell cell = null;\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          if (event.stateMask == 0) {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\r\n+          } else {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\r\n+          }\r\n+          break;\r\n+        }\r\n+\r\n+        if (cell != null) {\r\n+          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\r\n+          viewer.getTable().showColumn(t);\r\n+        }\r\n+        return cell;\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          return true;\r\n+        default:\r\n+          return super.isNavigationEvent(viewer, event);\r\n+        }\r\n+      }\r\n+\r\n+    };\r\n+\r\n+    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\r\n+        new FocusCellOwnerDrawHighlighter(viewer), strategy);\r\n+\r\n+    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\r\n+\r\n+      @Override\r\n+      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\r\n+        return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.MOUSE_CLICK_SELECTION\r\n+            || (event.eventType == ColumnViewerEditorActivationEvent.KEY_PRESSED && event.keyCode == SWT.TAB)\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;\r\n+      }\r\n+    };\r\n+\r\n+    TableViewerEditor.create(viewer, focusCellManager, actSupport,\r\n+        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\r\n+            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\r\n+\r\n+    viewer.getColumnViewerEditor().addEditorActivationListener(new ColumnViewerEditorActivationListener() {\r\n+\r\n+      @Override\r\n+      public void afterEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void afterEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+        ViewerCell cell = (ViewerCell) event.getSource();\r\n+        viewer.getTable().showColumn(viewer.getTable().getColumn(cell.getColumnIndex()));\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+    });\r\n+  }\r\n+\r\n+  private void createColumns(TableViewer viewer, int nrColumns) {\r\n+    final int[] bounds = { 100, 100, 100, 100 };\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NzE1MQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r385757151", "bodyText": "new ColumnWeightData - use bound constant maybe", "author": "georgiana-ecobici", "createdAt": "2020-02-28T15:26:04Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,496 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String ADD = \"Add\";\r\n+  public static final String EDIT = \"Edit\";\r\n+  public static final String REMOVE = \"Remove\";\r\n+  public static final String DELETE_SELECTION = \"Delete Selection\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String GROUP_LABEL = \"Number of columns in TitleBlock\";\r\n+  public static final String TOOLTIP_GROUP = \"Tooltip group\";\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(\"tableTitleBlock\");\r\n+    columnsNumber = doGetPreferenceStore().getInt(\"columnFieldTitleBlock\");\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowFieldTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+\r\n+          }\r\n+\r\n+        }\r\n+        }\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(\"columnFieldTitleBlock\", columnsNumber);\r\n+    doGetPreferenceStore().setValue(\"rowFieldTitleBlock\", rowsNumber);\r\n+    String s = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          s = s + tccMatrix.get(i).get(j).name + \"+\" + tccMatrix.get(i).get(j).content + \"+\";\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(\"tableTitleBlock\", s);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(\"\\\\+\");\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, final int bound, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, 200);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r\n+\r\n+      @Override\r\n+      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\r\n+        ViewerCell cell = null;\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          if (event.stateMask == 0) {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\r\n+          } else {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\r\n+          }\r\n+          break;\r\n+        }\r\n+\r\n+        if (cell != null) {\r\n+          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\r\n+          viewer.getTable().showColumn(t);\r\n+        }\r\n+        return cell;\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          return true;\r\n+        default:\r\n+          return super.isNavigationEvent(viewer, event);\r\n+        }\r\n+      }\r\n+\r\n+    };\r\n+\r\n+    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\r\n+        new FocusCellOwnerDrawHighlighter(viewer), strategy);\r\n+\r\n+    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\r\n+\r\n+      @Override\r\n+      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\r\n+        return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.MOUSE_CLICK_SELECTION\r\n+            || (event.eventType == ColumnViewerEditorActivationEvent.KEY_PRESSED && event.keyCode == SWT.TAB)\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;\r\n+      }\r\n+    };\r\n+\r\n+    TableViewerEditor.create(viewer, focusCellManager, actSupport,\r\n+        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\r\n+            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\r\n+\r\n+    viewer.getColumnViewerEditor().addEditorActivationListener(new ColumnViewerEditorActivationListener() {\r\n+\r\n+      @Override\r\n+      public void afterEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void afterEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+        ViewerCell cell = (ViewerCell) event.getSource();\r\n+        viewer.getTable().showColumn(viewer.getTable().getColumn(cell.getColumnIndex()));\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+    });\r\n+  }\r\n+\r\n+  private void createColumns(TableViewer viewer, int nrColumns) {\r\n+    final int[] bounds = { 100, 100, 100, 100 };\r\n+    List<String> columnHeadings = new ArrayList<>();\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      columnHeadings.add(\"\");\r\n+      createColumn(viewer, columnHeadings.get(i), bounds[0], i);\r\n+    }\r\n+    testSelectCell(viewer);\r\n+    setColumnLayout(viewer, nrColumns);\r\n+  }\r\n+\r\n+  protected void setColumnLayout(TableViewer viewer, int nrColumns) {\r\n+    TableColumnLayout layout = new TableColumnLayout();\r\n+    viewer.getControl().getParent().setLayout(layout);\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      layout.setColumnData(viewer.getTable().getColumn(i), new ColumnWeightData(100));\r", "originalCommit": "24fd2bf2d64f823c447488515b991db4f6c34c1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "29ff313c1145477b7f102aa41b0fd5c54027794e", "url": "https://github.com/eclipse/capella/commit/29ff313c1145477b7f102aa41b0fd5c54027794e", "message": "[draft] resolve comments\n\nChange-Id: I8f134538de796ba2d3c9c01be40e884a6f669fd0\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-02T12:55:17Z", "type": "commit"}, {"oid": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "url": "https://github.com/eclipse/capella/commit/b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "message": "[draft]\n\nChange-Id: I8baa3b6454d8e8890fc3ecc2932ac6c722a1a6f7\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-02T13:45:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNzk3MA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386407970", "bodyText": "Also use constants here.", "author": "georgiana-ecobici", "createdAt": "2020-03-02T14:00:08Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencesInitializer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractPreferencesInitializer;\r\n+import org.polarsys.capella.core.platform.sirius.ui.actions.CapellaActionsActivator;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencesInitializer extends AbstractPreferencesInitializer {\r\n+\r\n+  public TitleBlockPreferencesInitializer() {\r\n+    super(CapellaActionsActivator.PLUGIN_ID);\r\n+  }\r\n+\r\n+  @Override\r\n+  public void initializeDefaultPreferences() {\r\n+    IPreferenceStore preferenceStore = Activator.getDefault().getPreferenceStore();\r\n+    preferenceStore.setDefault(\"columnsNumberTitleBlock\", 2);\r\n+    preferenceStore.setDefault(\"rowsNumberTitleBlock\", 2);\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwODI3NQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386408275", "bodyText": "Remove commented code in the file.", "author": "georgiana-ecobici", "createdAt": "2020-03-02T14:00:40Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1NzYyMw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386457623", "bodyText": "Could you revert this change since there's no real change here?", "author": "minhtutonthat", "createdAt": "2020-03-02T15:22:41Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/plugin.xml", "diffHunk": "@@ -87,6 +87,7 @@\n             name=\"%ModelValidationPreferencePage_Name\">\n       </page>\n    </extension>\n+   ", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1Nzc2NA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386457764", "bodyText": "Could you revert this change since there's no real change here?", "author": "minhtutonthat", "createdAt": "2020-03-02T15:22:53Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/src/org/polarsys/capella/core/platform/sirius/ui/actions/CapellaActionsActivator.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2006, 2017 THALES GLOBAL SERVICES.", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1NzkyMg==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386457922", "bodyText": "Could you revert this change since there's no real change here?", "author": "minhtutonthat", "createdAt": "2020-03-02T15:23:08Z", "path": "core/plugins/org.polarsys.capella.core.platform.sirius.ui.actions/src/org/polarsys/capella/core/platform/sirius/ui/preferences/messages.properties", "diffHunk": "@@ -24,4 +24,3 @@ WizardPreferencePage_Description=Preferences related to Capella Editors\n WizardPreferencePage_Title=Editors", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NDE2Nw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386464167", "bodyText": "Could you try to use private attributes and get/set methods instead of public attributes?", "author": "minhtutonthat", "createdAt": "2020-03-02T15:32:25Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NDY5Nw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386464697", "bodyText": "Could you use the constant instead?", "author": "minhtutonthat", "createdAt": "2020-03-02T15:33:13Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NTM4NA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386465384", "bodyText": "Use equals method instead.  There are many places like this in this class though.", "author": "minhtutonthat", "createdAt": "2020-03-02T15:34:18Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzAwOA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386477008", "bodyText": "The method name is quite difficult to follow. It does not reflect what it really does. How about changing to something like: addNewEmptyColumn ? And since you have already class-level variables columnsNumber & rowsNumber, do we necessary need input variables here?", "author": "minhtutonthat", "createdAt": "2020-03-02T15:51:30Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+          }\r\n+        }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableAddRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  private void refreshTableRemoveRow() {\r\n+    int rowToDelete = v.getTable().getSelectionIndex();\r\n+    v.setInput(updateModelRowsDelete(rowToDelete));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\r\n+    doGetPreferenceStore().setValue(ROWS_NUMBER_PREFERENCE_STORE, rowsNumber);\r\n+    String currentTableContent = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content + SEPARATOR;\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTIwNw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386481207", "bodyText": "Have you tested the cell navigation? I don't see that it works. Using tab switches the selection to other buttons instead of other cells.", "author": "minhtutonthat", "createdAt": "2020-03-02T15:57:15Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+          }\r\n+        }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableAddRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  private void refreshTableRemoveRow() {\r\n+    int rowToDelete = v.getTable().getSelectionIndex();\r\n+    v.setInput(updateModelRowsDelete(rowToDelete));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\r\n+    doGetPreferenceStore().setValue(ROWS_NUMBER_PREFERENCE_STORE, rowsNumber);\r\n+    String currentTableContent = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content + SEPARATOR;\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(ESCAPED_SEPARATOR);\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MjQ1Mw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r387582453", "bodyText": "We can fix this next sprint, is ok?", "author": "georgiana-ecobici", "createdAt": "2020-03-04T10:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4MTIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4Njg3Mw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386486873", "bodyText": "If there's no inline editor, you could just return false here.", "author": "minhtutonthat", "createdAt": "2020-03-02T16:05:47Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+          }\r\n+        }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableAddRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  private void refreshTableRemoveRow() {\r\n+    int rowToDelete = v.getTable().getSelectionIndex();\r\n+    v.setInput(updateModelRowsDelete(rowToDelete));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\r\n+    doGetPreferenceStore().setValue(ROWS_NUMBER_PREFERENCE_STORE, rowsNumber);\r\n+    String currentTableContent = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content + SEPARATOR;\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(ESCAPED_SEPARATOR);\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r\n+\r\n+      @Override\r\n+      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\r\n+        ViewerCell cell = null;\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          if (event.stateMask == 0) {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\r\n+          } else {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\r\n+          }\r\n+          break;\r\n+        }\r\n+\r\n+        if (cell != null) {\r\n+          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\r\n+          viewer.getTable().showColumn(t);\r\n+        }\r\n+        return cell;\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          return true;\r\n+        default:\r\n+          return super.isNavigationEvent(viewer, event);\r\n+        }\r\n+      }\r\n+\r\n+    };\r\n+\r\n+    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\r\n+        new FocusCellOwnerDrawHighlighter(viewer), strategy);\r\n+\r\n+    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\r\n+\r\n+      @Override\r\n+      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\r\n+        return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4ODE5MQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386488191", "bodyText": "If there's no inline editor, no need to listen to these events.", "author": "minhtutonthat", "createdAt": "2020-03-02T16:07:50Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+          }\r\n+        }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableAddRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  private void refreshTableRemoveRow() {\r\n+    int rowToDelete = v.getTable().getSelectionIndex();\r\n+    v.setInput(updateModelRowsDelete(rowToDelete));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\r\n+    doGetPreferenceStore().setValue(ROWS_NUMBER_PREFERENCE_STORE, rowsNumber);\r\n+    String currentTableContent = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content + SEPARATOR;\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(ESCAPED_SEPARATOR);\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r\n+\r\n+      @Override\r\n+      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\r\n+        ViewerCell cell = null;\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          if (event.stateMask == 0) {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\r\n+          } else {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\r\n+          }\r\n+          break;\r\n+        }\r\n+\r\n+        if (cell != null) {\r\n+          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\r\n+          viewer.getTable().showColumn(t);\r\n+        }\r\n+        return cell;\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          return true;\r\n+        default:\r\n+          return super.isNavigationEvent(viewer, event);\r\n+        }\r\n+      }\r\n+\r\n+    };\r\n+\r\n+    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\r\n+        new FocusCellOwnerDrawHighlighter(viewer), strategy);\r\n+\r\n+    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\r\n+\r\n+      @Override\r\n+      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\r\n+        return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.MOUSE_CLICK_SELECTION\r\n+            || (event.eventType == ColumnViewerEditorActivationEvent.KEY_PRESSED && event.keyCode == SWT.TAB)\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;\r\n+      }\r\n+    };\r\n+\r\n+    TableViewerEditor.create(viewer, focusCellManager, actSupport,\r\n+        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\r\n+            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\r\n+\r\n+    viewer.getColumnViewerEditor().addEditorActivationListener(new ColumnViewerEditorActivationListener() {\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4ODg5Mw==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386488893", "bodyText": "why try/catch here?", "author": "minhtutonthat", "createdAt": "2020-03-02T16:08:52Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+          }\r\n+        }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableAddRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  private void refreshTableRemoveRow() {\r\n+    int rowToDelete = v.getTable().getSelectionIndex();\r\n+    v.setInput(updateModelRowsDelete(rowToDelete));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\r\n+    doGetPreferenceStore().setValue(ROWS_NUMBER_PREFERENCE_STORE, rowsNumber);\r\n+    String currentTableContent = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content + SEPARATOR;\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(ESCAPED_SEPARATOR);\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r\n+\r\n+      @Override\r\n+      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\r\n+        ViewerCell cell = null;\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          if (event.stateMask == 0) {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\r\n+          } else {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\r\n+          }\r\n+          break;\r\n+        }\r\n+\r\n+        if (cell != null) {\r\n+          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\r\n+          viewer.getTable().showColumn(t);\r\n+        }\r\n+        return cell;\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          return true;\r\n+        default:\r\n+          return super.isNavigationEvent(viewer, event);\r\n+        }\r\n+      }\r\n+\r\n+    };\r\n+\r\n+    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\r\n+        new FocusCellOwnerDrawHighlighter(viewer), strategy);\r\n+\r\n+    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\r\n+\r\n+      @Override\r\n+      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\r\n+        return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.MOUSE_CLICK_SELECTION\r\n+            || (event.eventType == ColumnViewerEditorActivationEvent.KEY_PRESSED && event.keyCode == SWT.TAB)\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;\r\n+      }\r\n+    };\r\n+\r\n+    TableViewerEditor.create(viewer, focusCellManager, actSupport,\r\n+        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\r\n+            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\r\n+\r\n+    viewer.getColumnViewerEditor().addEditorActivationListener(new ColumnViewerEditorActivationListener() {\r\n+\r\n+      @Override\r\n+      public void afterEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void afterEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+        ViewerCell cell = (ViewerCell) event.getSource();\r\n+        viewer.getTable().showColumn(viewer.getTable().getColumn(cell.getColumnIndex()));\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+    });\r\n+  }\r\n+\r\n+  private void createColumns(TableViewer viewer, int nrColumns) {\r\n+    List<String> columnHeadings = new ArrayList<>();\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      columnHeadings.add(\"\");\r\n+      createColumn(viewer, columnHeadings.get(i), i);\r\n+    }\r\n+    testSelectCell(viewer);\r\n+    setColumnLayout(viewer, nrColumns);\r\n+  }\r\n+\r\n+  protected void setColumnLayout(TableViewer viewer, int nrColumns) {\r\n+    TableColumnLayout layout = new TableColumnLayout();\r\n+    viewer.getControl().getParent().setLayout(layout);\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      layout.setColumnData(viewer.getTable().getColumn(i), new ColumnWeightData(100));\r\n+    }\r\n+  }\r\n+\r\n+  private TableViewerColumn createTableViewerColumn(final TableViewer viewer, final String title, final int bound) {\r\n+    final TableViewerColumn viewerColumn = new TableViewerColumn(viewer, SWT.NONE);\r\n+    final TableColumn column = viewerColumn.getColumn();\r\n+    column.setText(title);\r\n+\r\n+    int wd = viewer.getTable().getClientArea().width;\r\n+    if (wd > 0) {\r\n+      column.setWidth(wd / columnsNumber);\r\n+    } else {\r\n+      column.setWidth(bound);\r\n+    }\r\n+    column.setResizable(true);\r\n+    return viewerColumn;\r\n+  }\r\n+\r\n+  private void addMenu(final TableViewer v) {\r\n+    final MenuManager mgr = new MenuManager();\r\n+\r\n+    final Action addRow = new Action(\"Add row\") {\r\n+      @Override\r\n+      public void run() {\r\n+        refreshTableAddRows();\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    final Action addColumnAfter = new Action(\"Add column after\") {\r\n+      @Override\r\n+      public void run() {\r\n+        createColumn(v, \"\", v.getTable().getColumnCount());\r\n+        columnsNumber += 1;\r\n+        refreshTableColumns();\r\n+      }\r\n+    };\r\n+\r\n+    final Action removeColumn = new Action(\"Remove column\") {\r\n+      @Override\r\n+      public void run() {\r\n+        MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\r\n+        messageBox.setMessage(\"Are you sure you want to delete the entire column?\");\r\n+        messageBox.setText(\"Confirm Delete\");\r\n+        int response = messageBox.open();\r\n+        if (response == SWT.YES) {\r\n+          try {\r\n+            int columnToDelete = v.getColumnViewerEditor().getFocusCell().getColumnIndex();\r\n+            disposeColumns();\r\n+            columnsNumber -= 1;\r\n+            createColumns(v, columnsNumber);\r\n+            v.setInput(updateModelColumnsDelete(columnToDelete));\r\n+          } catch (Exception e) {\r\n+\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    final Action removeRow = new Action(\"Remove row\") {\r\n+      @Override\r\n+      public void run() {\r\n+        MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\r\n+        messageBox.setMessage(\"Are you sure you want to delete the entire row?\");\r\n+        messageBox.setText(\"Confirm Delete\");\r\n+        int response = messageBox.open();\r\n+        if (response == SWT.YES) {\r\n+          try {\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4OTExMA==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386489110", "bodyText": "No need to return here", "author": "minhtutonthat", "createdAt": "2020-03-02T16:09:13Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+          }\r\n+        }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableAddRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  private void refreshTableRemoveRow() {\r\n+    int rowToDelete = v.getTable().getSelectionIndex();\r\n+    v.setInput(updateModelRowsDelete(rowToDelete));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\r\n+    doGetPreferenceStore().setValue(ROWS_NUMBER_PREFERENCE_STORE, rowsNumber);\r\n+    String currentTableContent = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content + SEPARATOR;\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(ESCAPED_SEPARATOR);\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r\n+\r\n+      @Override\r\n+      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\r\n+        ViewerCell cell = null;\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          if (event.stateMask == 0) {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\r\n+          } else {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\r\n+          }\r\n+          break;\r\n+        }\r\n+\r\n+        if (cell != null) {\r\n+          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\r\n+          viewer.getTable().showColumn(t);\r\n+        }\r\n+        return cell;\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          return true;\r\n+        default:\r\n+          return super.isNavigationEvent(viewer, event);\r\n+        }\r\n+      }\r\n+\r\n+    };\r\n+\r\n+    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\r\n+        new FocusCellOwnerDrawHighlighter(viewer), strategy);\r\n+\r\n+    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\r\n+\r\n+      @Override\r\n+      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\r\n+        return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.MOUSE_CLICK_SELECTION\r\n+            || (event.eventType == ColumnViewerEditorActivationEvent.KEY_PRESSED && event.keyCode == SWT.TAB)\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;\r\n+      }\r\n+    };\r\n+\r\n+    TableViewerEditor.create(viewer, focusCellManager, actSupport,\r\n+        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\r\n+            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\r\n+\r\n+    viewer.getColumnViewerEditor().addEditorActivationListener(new ColumnViewerEditorActivationListener() {\r\n+\r\n+      @Override\r\n+      public void afterEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void afterEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+        ViewerCell cell = (ViewerCell) event.getSource();\r\n+        viewer.getTable().showColumn(viewer.getTable().getColumn(cell.getColumnIndex()));\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+    });\r\n+  }\r\n+\r\n+  private void createColumns(TableViewer viewer, int nrColumns) {\r\n+    List<String> columnHeadings = new ArrayList<>();\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      columnHeadings.add(\"\");\r\n+      createColumn(viewer, columnHeadings.get(i), i);\r\n+    }\r\n+    testSelectCell(viewer);\r\n+    setColumnLayout(viewer, nrColumns);\r\n+  }\r\n+\r\n+  protected void setColumnLayout(TableViewer viewer, int nrColumns) {\r\n+    TableColumnLayout layout = new TableColumnLayout();\r\n+    viewer.getControl().getParent().setLayout(layout);\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      layout.setColumnData(viewer.getTable().getColumn(i), new ColumnWeightData(100));\r\n+    }\r\n+  }\r\n+\r\n+  private TableViewerColumn createTableViewerColumn(final TableViewer viewer, final String title, final int bound) {\r\n+    final TableViewerColumn viewerColumn = new TableViewerColumn(viewer, SWT.NONE);\r\n+    final TableColumn column = viewerColumn.getColumn();\r\n+    column.setText(title);\r\n+\r\n+    int wd = viewer.getTable().getClientArea().width;\r\n+    if (wd > 0) {\r\n+      column.setWidth(wd / columnsNumber);\r\n+    } else {\r\n+      column.setWidth(bound);\r\n+    }\r\n+    column.setResizable(true);\r\n+    return viewerColumn;\r\n+  }\r\n+\r\n+  private void addMenu(final TableViewer v) {\r\n+    final MenuManager mgr = new MenuManager();\r\n+\r\n+    final Action addRow = new Action(\"Add row\") {\r\n+      @Override\r\n+      public void run() {\r\n+        refreshTableAddRows();\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    final Action addColumnAfter = new Action(\"Add column after\") {\r\n+      @Override\r\n+      public void run() {\r\n+        createColumn(v, \"\", v.getTable().getColumnCount());\r\n+        columnsNumber += 1;\r\n+        refreshTableColumns();\r\n+      }\r\n+    };\r\n+\r\n+    final Action removeColumn = new Action(\"Remove column\") {\r\n+      @Override\r\n+      public void run() {\r\n+        MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\r\n+        messageBox.setMessage(\"Are you sure you want to delete the entire column?\");\r\n+        messageBox.setText(\"Confirm Delete\");\r\n+        int response = messageBox.open();\r\n+        if (response == SWT.YES) {\r\n+          try {\r\n+            int columnToDelete = v.getColumnViewerEditor().getFocusCell().getColumnIndex();\r\n+            disposeColumns();\r\n+            columnsNumber -= 1;\r\n+            createColumns(v, columnsNumber);\r\n+            v.setInput(updateModelColumnsDelete(columnToDelete));\r\n+          } catch (Exception e) {\r\n+\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    final Action removeRow = new Action(\"Remove row\") {\r\n+      @Override\r\n+      public void run() {\r\n+        MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\r\n+        messageBox.setMessage(\"Are you sure you want to delete the entire row?\");\r\n+        messageBox.setText(\"Confirm Delete\");\r\n+        int response = messageBox.open();\r\n+        if (response == SWT.YES) {\r\n+          try {\r\n+            refreshTableRemoveRow();\r\n+\r\n+          } catch (Exception e) {\r\n+\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    mgr.setRemoveAllWhenShown(true);\r\n+    mgr.addMenuListener(manager -> {\r\n+      if (v.getTable().getColumnCount() >= 1 && rowsNumber >= 1) {\r\n+        manager.add(addColumnAfter);\r\n+        manager.add(removeColumn);\r\n+        manager.add(addRow);\r\n+        manager.add(removeRow);\r\n+      }\r\n+    });\r\n+\r\n+    v.getControl().setMenu(mgr.createContextMenu(v.getControl()));\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void performDefaults() {\r\n+    super.performDefaults();\r\n+    columnsNumber = doGetPreferenceStore().getDefaultInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getDefaultInt(ROWS_NUMBER_PREFERENCE_STORE);\r\n+    tableContent = doGetPreferenceStore().getDefaultString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    // refreshTableColumns();\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+    performOk();\r\n+\r\n+    return;\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4OTMwOQ==", "url": "https://github.com/eclipse/capella/pull/70#discussion_r386489309", "bodyText": "Remove obsolete code if possible.", "author": "minhtutonthat", "createdAt": "2020-03-02T16:09:32Z", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/preferences/TitleBlockPreferencePage.java", "diffHunk": "@@ -0,0 +1,510 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis.preferences;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.core.resources.ProjectScope;\r\n+import org.eclipse.jface.action.Action;\r\n+import org.eclipse.jface.action.MenuManager;\r\n+import org.eclipse.jface.layout.TableColumnLayout;\r\n+import org.eclipse.jface.preference.IPreferenceStore;\r\n+import org.eclipse.jface.viewers.ArrayContentProvider;\r\n+import org.eclipse.jface.viewers.CellNavigationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationListener;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorActivationStrategy;\r\n+import org.eclipse.jface.viewers.ColumnViewerEditorDeactivationEvent;\r\n+import org.eclipse.jface.viewers.ColumnWeightData;\r\n+import org.eclipse.jface.viewers.FocusCellOwnerDrawHighlighter;\r\n+import org.eclipse.jface.viewers.StyledCellLabelProvider;\r\n+import org.eclipse.jface.viewers.TableViewer;\r\n+import org.eclipse.jface.viewers.TableViewerColumn;\r\n+import org.eclipse.jface.viewers.TableViewerEditor;\r\n+import org.eclipse.jface.viewers.TableViewerFocusCellManager;\r\n+import org.eclipse.jface.viewers.ViewerCell;\r\n+import org.eclipse.jface.window.Window;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.graphics.Point;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Event;\r\n+import org.eclipse.swt.widgets.Listener;\r\n+import org.eclipse.swt.widgets.MessageBox;\r\n+import org.eclipse.swt.widgets.TableColumn;\r\n+import org.polarsys.capella.core.commands.preferences.service.AbstractDefaultPreferencePage;\r\n+import org.polarsys.capella.core.commands.preferences.service.PreferenceField;\r\n+import org.polarsys.capella.core.commands.preferences.service.UserProfileModeEnum;\r\n+import org.polarsys.capella.core.preferences.Activator;\r\n+\r\n+public class TitleBlockPreferencePage extends AbstractDefaultPreferencePage {\r\n+\r\n+  private class TitleBlockCell {\r\n+    public String name;\r\n+    public String content;\r\n+\r\n+    public TitleBlockCell(String name, String content) {\r\n+      this.name = name;\r\n+      this.content = content;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+      return name;\r\n+    }\r\n+  }\r\n+\r\n+  public static final String PAGE_ID = \"org.polarsys.capella.core.platform.sirius.ui.actions.preferences.TitleBlockPage\";\r\n+  public static final String NAME = \"Name\";\r\n+  public static final String CONTENT = \"Content\";\r\n+  public static final String TABEL_CONTENT_PREFERENCE_STORE = \"tableTitleBlock\";\r\n+  public static final String COLUMNS_NUMBER_PREFERENCE_STORE = \"columnsNumberTitleBlock\";\r\n+  public static final String ROWS_NUMBER_PREFERENCE_STORE = \"rowsNumberTitleBlock\";\r\n+  public static final String ESCAPED_SEPARATOR = \"\\\\+\";\r\n+  public static final String SEPARATOR = \"+\";\r\n+  public static final String EMPTY_STRING = \"\";\r\n+  public static final int BOUND = 200;\r\n+\r\n+  public\r\n+\r\n+  TableViewer v;\r\n+\r\n+  private PreferenceField defaultTitleBlockFieldEditor;\r\n+\r\n+  List<List<TitleBlockCell>> tccMatrix;\r\n+  int columnsNumber;\r\n+  int rowsNumber;\r\n+  String tableContent;\r\n+\r\n+  public TitleBlockPreferencePage() {\r\n+    super(PAGE_ID);\r\n+    tableContent = doGetPreferenceStore().getString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    columnsNumber = doGetPreferenceStore().getInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getInt(\"rowsNumberTitleBlock\");\r\n+  }\r\n+\r\n+  @Override\r\n+  protected IPreferenceStore doGetPreferenceStore() {\r\n+    return Activator.getDefault().getPreferenceStore();\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageTitle() {\r\n+    return Messages.TitleBlockPreferencePage_Title;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected String getPageDescription() {\r\n+    return Messages.TitleBlockPreferencePage_Description;\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void createFieldEditors() {\r\n+    createCheckBox();\r\n+\r\n+    Composite top = new Composite(getFieldEditorParent(), SWT.NONE);\r\n+    GridLayout top_layout = new GridLayout();\r\n+    top_layout.numColumns = 2;\r\n+    top_layout.marginHeight = 2;\r\n+    top_layout.marginWidth = 2;\r\n+    top.setLayout(top_layout);\r\n+    top.setLayoutData(new GridData(GridData.FILL_BOTH));\r\n+\r\n+    createTable(top);\r\n+\r\n+  }\r\n+\r\n+  private void createCheckBox() {\r\n+    defaultTitleBlockFieldEditor = new PreferenceField(\"defaultTitleBlock\", \"Add by default Diagram TitleBlock\",\r\n+        getFieldEditorParent());\r\n+    addField(defaultTitleBlockFieldEditor, UserProfileModeEnum.Expert, getFieldEditorParent(), ProjectScope.class);\r\n+  }\r\n+\r\n+  private void createTable(Composite top) {\r\n+    v = new TableViewer(top, SWT.MULTI | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION);\r\n+\r\n+    createColumns(v, columnsNumber);\r\n+    v.setContentProvider(ArrayContentProvider.getInstance());\r\n+    v.setInput(createModel(columnsNumber, rowsNumber));\r\n+\r\n+    v.getTable().setLinesVisible(true);\r\n+    // v.getTable().setBackground(getShell().getDisplay().getSystemColor(SWT.COLOR_GREEN));\r\n+    v.getTable().setHeaderVisible(true);\r\n+    GridData gridData = new GridData(GridData.FILL_BOTH);\r\n+    gridData.grabExcessVerticalSpace = true;\r\n+    gridData.grabExcessHorizontalSpace = true;\r\n+    gridData.verticalAlignment = GridData.FILL;\r\n+    gridData.horizontalAlignment = GridData.FILL;\r\n+    gridData.widthHint = 200;\r\n+    gridData.horizontalSpan = 1;\r\n+    v.getTable().setLayoutData(gridData);\r\n+\r\n+    addMenu(v);\r\n+\r\n+    Listener treeListener = new Listener() {\r\n+      @Override\r\n+      public void handleEvent(Event event) {\r\n+        switch (event.type) {\r\n+        case SWT.MouseDoubleClick: {\r\n+          Point coords = new Point(event.x, event.y);\r\n+\r\n+          ViewerCell cell = v.getCell(coords);\r\n+          int index = cell.getColumnIndex();\r\n+          List<TitleBlockCell> list = (List<TitleBlockCell>) cell.getElement();\r\n+          String name = list.get(index).name;\r\n+          String content = list.get(index).content;\r\n+          TitleBlockDialog dialog = new TitleBlockDialog(getShell());\r\n+          if (content == \"content\") {\r\n+            dialog.setCurrentName(\"\");\r\n+            dialog.setCurrentContent(\"\");\r\n+          } else {\r\n+            dialog.setCurrentName(name);\r\n+            dialog.setCurrentContent(content);\r\n+          }\r\n+          dialog.create();\r\n+          if (dialog.open() == Window.OK) {\r\n+            list.get(index).name = dialog.getName();\r\n+            list.get(index).content = dialog.getContent();\r\n+            cell.setText(dialog.getName());\r\n+          }\r\n+        }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    v.getTable().addListener(SWT.MouseDoubleClick, treeListener);\r\n+  }\r\n+\r\n+  private void disposeColumns() {\r\n+    TableColumn[] columns = v.getTable().getColumns();\r\n+    for (TableColumn tc : columns) {\r\n+      tc.dispose();\r\n+    }\r\n+  }\r\n+\r\n+  private void refreshTableColumns() {\r\n+    disposeColumns();\r\n+    createColumns(v, columnsNumber);\r\n+    v.setInput(updateModel(columnsNumber, rowsNumber));\r\n+\r\n+  }\r\n+\r\n+  private void refreshTableAddRows() {\r\n+    rowsNumber += 1;\r\n+    v.setInput(updateModelRows(columnsNumber, rowsNumber));\r\n+  }\r\n+\r\n+  private void refreshTableRemoveRow() {\r\n+    int rowToDelete = v.getTable().getSelectionIndex();\r\n+    v.setInput(updateModelRowsDelete(rowToDelete));\r\n+  }\r\n+\r\n+  @Override\r\n+  public boolean performOk() {\r\n+\r\n+    doGetPreferenceStore().setValue(\"defaultTitleBlock\", defaultTitleBlockFieldEditor.getBooleanValue());\r\n+    doGetPreferenceStore().setValue(COLUMNS_NUMBER_PREFERENCE_STORE, columnsNumber);\r\n+    doGetPreferenceStore().setValue(ROWS_NUMBER_PREFERENCE_STORE, rowsNumber);\r\n+    String currentTableContent = \"\";\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      for (int j = 0; j < columnsNumber; j++) {\r\n+        if (i == rowsNumber - 1 && j == columnsNumber - 1) {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content;\r\n+        } else {\r\n+          if (tccMatrix.get(i).get(j).name == \"\" || tccMatrix.get(i).get(j).content == \"\") {\r\n+            return false;\r\n+          }\r\n+          currentTableContent = currentTableContent + tccMatrix.get(i).get(j).name + SEPARATOR\r\n+              + tccMatrix.get(i).get(j).content + SEPARATOR;\r\n+\r\n+        }\r\n+\r\n+      }\r\n+    }\r\n+    doGetPreferenceStore().setValue(TABEL_CONTENT_PREFERENCE_STORE, currentTableContent);\r\n+    return super.performOk();\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModel(int nrCol, int nrRows) {\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = tccMatrix.get(i);\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRows(int nrCol, int nrRows) {\r\n+    List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+    for (int i = 0; i < nrCol; i++) {\r\n+      // tbcCell.add(new TitleBlockCell(\"Edit\", \"aql:edit\"));\r\n+      tbcCell.add(new TitleBlockCell(EMPTY_STRING, EMPTY_STRING));\r\n+    }\r\n+    tccMatrix.add(tbcCell);\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelRowsDelete(int rowToDelete) {\r\n+\r\n+    tccMatrix.remove(rowToDelete);\r\n+    rowsNumber -= 1;\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> updateModelColumnsDelete(int columnToDelete) {\r\n+\r\n+    for (int i = 0; i < rowsNumber; i++) {\r\n+      tccMatrix.get(i).remove(columnToDelete);\r\n+    }\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private List<List<TitleBlockCell>> createModel(int nrCol, int nrRows) {\r\n+    String[] cellsNameAndContent = tableContent.split(ESCAPED_SEPARATOR);\r\n+    int currentIndex = 0;\r\n+    tccMatrix = new ArrayList<>();\r\n+    for (int i = 0; i < nrRows; i++) {\r\n+      List<TitleBlockCell> tbcCell = new ArrayList<>();\r\n+      for (int j = 0; j < nrCol; j++) {\r\n+        tbcCell.add(new TitleBlockCell(cellsNameAndContent[currentIndex], cellsNameAndContent[currentIndex + 1]));\r\n+        currentIndex += 2;\r\n+      }\r\n+      tccMatrix.add(tbcCell);\r\n+    }\r\n+\r\n+    return tccMatrix;\r\n+  }\r\n+\r\n+  private void createColumn(TableViewer v, final String title, int index) {\r\n+    TableViewerColumn column = createTableViewerColumn(v, title, BOUND);\r\n+\r\n+    column.setLabelProvider(new StyledCellLabelProvider() {\r\n+      @Override\r\n+      public void update(final ViewerCell cell) {\r\n+        List<TitleBlockCell> lst = (List<TitleBlockCell>) cell.getElement();\r\n+\r\n+        final TitleBlockCell tbcell = lst.get(index);\r\n+        final String cellText = String.valueOf(tbcell);\r\n+        cell.setText(cellText);\r\n+      }\r\n+    });\r\n+  }\r\n+\r\n+  private void testSelectCell(TableViewer viewer) {\r\n+    CellNavigationStrategy strategy = new CellNavigationStrategy() {\r\n+\r\n+      @Override\r\n+      public ViewerCell findSelectedCell(ColumnViewer cviewer, ViewerCell currentSelectedCell, Event event) {\r\n+        ViewerCell cell = null;\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          if (event.stateMask == 0) {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.RIGHT, true);\r\n+          } else {\r\n+            cell = currentSelectedCell.getNeighbor(ViewerCell.LEFT, true);\r\n+          }\r\n+          break;\r\n+        }\r\n+\r\n+        if (cell != null) {\r\n+          TableColumn t = viewer.getTable().getColumn(cell.getColumnIndex());\r\n+          viewer.getTable().showColumn(t);\r\n+        }\r\n+        return cell;\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public boolean isNavigationEvent(ColumnViewer viewer, Event event) {\r\n+        switch (event.keyCode) {\r\n+        case SWT.TAB:\r\n+          return true;\r\n+        default:\r\n+          return super.isNavigationEvent(viewer, event);\r\n+        }\r\n+      }\r\n+\r\n+    };\r\n+\r\n+    TableViewerFocusCellManager focusCellManager = new TableViewerFocusCellManager(viewer,\r\n+        new FocusCellOwnerDrawHighlighter(viewer), strategy);\r\n+\r\n+    ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(viewer) {\r\n+\r\n+      @Override\r\n+      protected boolean isEditorActivationEvent(ColumnViewerEditorActivationEvent event) {\r\n+        return event.eventType == ColumnViewerEditorActivationEvent.TRAVERSAL\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.MOUSE_CLICK_SELECTION\r\n+            || (event.eventType == ColumnViewerEditorActivationEvent.KEY_PRESSED && event.keyCode == SWT.TAB)\r\n+            || event.eventType == ColumnViewerEditorActivationEvent.PROGRAMMATIC;\r\n+      }\r\n+    };\r\n+\r\n+    TableViewerEditor.create(viewer, focusCellManager, actSupport,\r\n+        ColumnViewerEditor.TABBING_HORIZONTAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR\r\n+            | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);\r\n+\r\n+    viewer.getColumnViewerEditor().addEditorActivationListener(new ColumnViewerEditorActivationListener() {\r\n+\r\n+      @Override\r\n+      public void afterEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void afterEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorActivated(ColumnViewerEditorActivationEvent event) {\r\n+        ViewerCell cell = (ViewerCell) event.getSource();\r\n+        viewer.getTable().showColumn(viewer.getTable().getColumn(cell.getColumnIndex()));\r\n+      }\r\n+\r\n+      @Override\r\n+      public void beforeEditorDeactivated(ColumnViewerEditorDeactivationEvent event) {\r\n+\r\n+      }\r\n+\r\n+    });\r\n+  }\r\n+\r\n+  private void createColumns(TableViewer viewer, int nrColumns) {\r\n+    List<String> columnHeadings = new ArrayList<>();\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      columnHeadings.add(\"\");\r\n+      createColumn(viewer, columnHeadings.get(i), i);\r\n+    }\r\n+    testSelectCell(viewer);\r\n+    setColumnLayout(viewer, nrColumns);\r\n+  }\r\n+\r\n+  protected void setColumnLayout(TableViewer viewer, int nrColumns) {\r\n+    TableColumnLayout layout = new TableColumnLayout();\r\n+    viewer.getControl().getParent().setLayout(layout);\r\n+    for (int i = 0; i < nrColumns; i++) {\r\n+      layout.setColumnData(viewer.getTable().getColumn(i), new ColumnWeightData(100));\r\n+    }\r\n+  }\r\n+\r\n+  private TableViewerColumn createTableViewerColumn(final TableViewer viewer, final String title, final int bound) {\r\n+    final TableViewerColumn viewerColumn = new TableViewerColumn(viewer, SWT.NONE);\r\n+    final TableColumn column = viewerColumn.getColumn();\r\n+    column.setText(title);\r\n+\r\n+    int wd = viewer.getTable().getClientArea().width;\r\n+    if (wd > 0) {\r\n+      column.setWidth(wd / columnsNumber);\r\n+    } else {\r\n+      column.setWidth(bound);\r\n+    }\r\n+    column.setResizable(true);\r\n+    return viewerColumn;\r\n+  }\r\n+\r\n+  private void addMenu(final TableViewer v) {\r\n+    final MenuManager mgr = new MenuManager();\r\n+\r\n+    final Action addRow = new Action(\"Add row\") {\r\n+      @Override\r\n+      public void run() {\r\n+        refreshTableAddRows();\r\n+\r\n+      }\r\n+    };\r\n+\r\n+    final Action addColumnAfter = new Action(\"Add column after\") {\r\n+      @Override\r\n+      public void run() {\r\n+        createColumn(v, \"\", v.getTable().getColumnCount());\r\n+        columnsNumber += 1;\r\n+        refreshTableColumns();\r\n+      }\r\n+    };\r\n+\r\n+    final Action removeColumn = new Action(\"Remove column\") {\r\n+      @Override\r\n+      public void run() {\r\n+        MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\r\n+        messageBox.setMessage(\"Are you sure you want to delete the entire column?\");\r\n+        messageBox.setText(\"Confirm Delete\");\r\n+        int response = messageBox.open();\r\n+        if (response == SWT.YES) {\r\n+          try {\r\n+            int columnToDelete = v.getColumnViewerEditor().getFocusCell().getColumnIndex();\r\n+            disposeColumns();\r\n+            columnsNumber -= 1;\r\n+            createColumns(v, columnsNumber);\r\n+            v.setInput(updateModelColumnsDelete(columnToDelete));\r\n+          } catch (Exception e) {\r\n+\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    final Action removeRow = new Action(\"Remove row\") {\r\n+      @Override\r\n+      public void run() {\r\n+        MessageBox messageBox = new MessageBox(getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO);\r\n+        messageBox.setMessage(\"Are you sure you want to delete the entire row?\");\r\n+        messageBox.setText(\"Confirm Delete\");\r\n+        int response = messageBox.open();\r\n+        if (response == SWT.YES) {\r\n+          try {\r\n+            refreshTableRemoveRow();\r\n+\r\n+          } catch (Exception e) {\r\n+\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    mgr.setRemoveAllWhenShown(true);\r\n+    mgr.addMenuListener(manager -> {\r\n+      if (v.getTable().getColumnCount() >= 1 && rowsNumber >= 1) {\r\n+        manager.add(addColumnAfter);\r\n+        manager.add(removeColumn);\r\n+        manager.add(addRow);\r\n+        manager.add(removeRow);\r\n+      }\r\n+    });\r\n+\r\n+    v.getControl().setMenu(mgr.createContextMenu(v.getControl()));\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void performDefaults() {\r\n+    super.performDefaults();\r\n+    columnsNumber = doGetPreferenceStore().getDefaultInt(COLUMNS_NUMBER_PREFERENCE_STORE);\r\n+    rowsNumber = doGetPreferenceStore().getDefaultInt(ROWS_NUMBER_PREFERENCE_STORE);\r\n+    tableContent = doGetPreferenceStore().getDefaultString(TABEL_CONTENT_PREFERENCE_STORE);\r\n+    // refreshTableColumns();\r", "originalCommit": "b34c8b9dc6ca9d7732080f1fbe05ecffecd5bc65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0e52a1de1adb1b5b23543f582fbdc81709237f9d", "url": "https://github.com/eclipse/capella/commit/0e52a1de1adb1b5b23543f582fbdc81709237f9d", "message": "Title Block Preferences Page - resolve comments + functionalities for\nadding column or row at selected index.\n\nChange-Id: I88fb6187ceb1c9e0a32a9586143e925bb5bd50eb\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-04T08:55:13Z", "type": "commit"}, {"oid": "7f29a06eadd6de680125e8b69d843ac4d69e60c5", "url": "https://github.com/eclipse/capella/commit/7f29a06eadd6de680125e8b69d843ac4d69e60c5", "message": "revert CapellaActionsActivator\n\nChange-Id: Ic85a2f416c3432284e9143f5bfafd2870e96c1bc\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-04T10:38:07Z", "type": "commit"}, {"oid": "8974520fbde443f330ba0ece4fdb976ab2896f18", "url": "https://github.com/eclipse/capella/commit/8974520fbde443f330ba0ece4fdb976ab2896f18", "message": "Title Block Preferences Page - add background color for cells + edit\nlabel\n\nChange-Id: Ic797c3440330ee7111f722e0f544dab7feadb6b2\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-04T14:57:04Z", "type": "commit"}, {"oid": "5c41708b7b87c658d29e163fc9d3e89869da26b3", "url": "https://github.com/eclipse/capella/commit/5c41708b7b87c658d29e163fc9d3e89869da26b3", "message": "Title Block Preference Page - add error message if cells are empty +\nresolve bug for apply changes\n\nChange-Id: Iea1a8e6be7db283dfe8a8b6b3db796a84ae2b8c9\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-05T12:26:48Z", "type": "commit"}, {"oid": "a7f11ee8d84898ac7437e415b45327037af71d07", "url": "https://github.com/eclipse/capella/commit/a7f11ee8d84898ac7437e415b45327037af71d07", "message": "Title Block Preferences Page: edit the default value + remove \"add\nrows/columns at the end\"\n\nChange-Id: I1d031d8c7cfec8e0ef41e9b190cc7d941d64857b\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-06T10:31:14Z", "type": "commit"}, {"oid": "334d9f140d53c11e1e9b130afad85b24c3a7461f", "url": "https://github.com/eclipse/capella/commit/334d9f140d53c11e1e9b130afad85b24c3a7461f", "message": "Merge pull request #3 from eclipse/bugzilla/558032/titleBlock\n\nUpdate from original", "committedDate": "2020-03-06T11:43:07Z", "type": "commit"}, {"oid": "f000ba25fdcaffb25d8619cdb367813a2e8fca85", "url": "https://github.com/eclipse/capella/commit/f000ba25fdcaffb25d8619cdb367813a2e8fca85", "message": "Title Block Preferences Page\n\nChange-Id: Ib2745d02ccfc8d53cd4a6740c2807f7a61d7c305\nSigned-off-by: Malina STOICANESCU <malina.stoicanescu@thalesgroup.com>", "committedDate": "2020-03-06T13:37:19Z", "type": "commit"}]}