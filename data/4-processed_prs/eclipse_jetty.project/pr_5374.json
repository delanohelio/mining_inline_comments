{"pr_number": 5374, "pr_title": "Issue #5320 - using jetty-websocket-httpclient.xml within webapp", "pr_createdAt": "2020-10-01T02:58:34Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5374", "timeline": [{"oid": "00f05cb94e2dcd86523202bee380776d58a06240", "url": "https://github.com/eclipse/jetty.project/commit/00f05cb94e2dcd86523202bee380776d58a06240", "message": "Issue #5320 - reproduce failure to load httpClient for WebSocketClient in webapp\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-30T05:11:05Z", "type": "commit"}, {"oid": "5b96f6f9844cae53f338843c1962c96ec88fb4a6", "url": "https://github.com/eclipse/jetty.project/commit/5b96f6f9844cae53f338843c1962c96ec88fb4a6", "message": "Issue #5320 - Run jetty-websocket-httpclient.xml with server class access.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-01T02:38:17Z", "type": "commit"}, {"oid": "81c88cdde01ada8b3f00c64b051f82478113a4f4", "url": "https://github.com/eclipse/jetty.project/commit/81c88cdde01ada8b3f00c64b051f82478113a4f4", "message": "Issue #5320 - do all exception handling in XmlBasedHttpClientProvider\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-01T04:03:25Z", "type": "commit"}, {"oid": "a91a7630e07808980f1f8f9050681e477bec2d8b", "url": "https://github.com/eclipse/jetty.project/commit/a91a7630e07808980f1f8f9050681e477bec2d8b", "message": "fix NPE from contextClassLoader in XmlBasedHttpClientProvider\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-01T07:40:37Z", "type": "commit"}, {"oid": "27a08797983fb03fb621633a2a826f91a9c78022", "url": "https://github.com/eclipse/jetty.project/commit/27a08797983fb03fb621633a2a826f91a9c78022", "message": "dont run WebsocketClientInWebapp test with JPMS", "committedDate": "2020-10-02T05:39:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NjExOA==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r499986118", "bodyText": "With these changes the WebSocketClient can load and use the jetty-websocket-httpclient XML file with server class access, but we still don't have access to classes like HttpClient in the webapp. So this line will result in an exception.\nAnd if instead of doing the line runThrowExceptionsAsRuntime(() -> finalClient.start()); and I do as intellij suggests and use runThrowExceptionsAsRuntime(finalClient::start); then I get an exception as it doesn't know LifeCycle.", "author": "lachlan-roberts", "createdAt": "2020-10-06T03:30:27Z", "path": "tests/test-webapps/test-websocket-client-webapp/src/main/java/org/eclipse/jetty/tests/webapp/websocket/WebSocketClientServlet.java", "diffHunk": "@@ -0,0 +1,125 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.tests.webapp.websocket;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.api.util.WSURI;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+\n+@WebServlet(\"/\")\n+public class WebSocketClientServlet extends HttpServlet\n+{\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException\n+    {\n+\n+        WebSocketClient client = null;\n+        try\n+        {\n+            client = new WebSocketClient();\n+            WebSocketClient finalClient = client;\n+            runThrowExceptionsAsRuntime(() -> finalClient.start());\n+            resp.setContentType(\"text/html\");\n+            //resp.getWriter().println(\"ConnectTimeout: \" + client.getHttpClient().getConnectTimeout());", "originalCommit": "27a08797983fb03fb621633a2a826f91a9c78022", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEyMDQyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r503120421", "bodyText": "I don't think you need ThrowingRunnable (can't you use Callable instead?).\nPlus it's not clear what line is the problem -- there should be a comment in the code if it's non trivial due to class loading.\nI'd like an explanation that there are 2 cases (webapp classes vs server classes), and what happens in each case.", "author": "sbordet", "createdAt": "2020-10-12T08:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NjExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5ODcwOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r504298709", "bodyText": "Callable doesn't work because it still throws exception. I guess I could just put a nested try catch block that wraps the exception with RuntimeException. I just thought it would be cleaner with the method reference and was surprised that it didn't work.", "author": "lachlan-roberts", "createdAt": "2020-10-13T22:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk4NjExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEyMTIwNw==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r503121207", "bodyText": "I'd like to see also a test case for wss, as loading the SSL classes may have a similar problem to loading the http client classes.", "author": "sbordet", "createdAt": "2020-10-12T08:23:50Z", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -301,4 +308,91 @@ public void testLog4j2ModuleWithSimpleWebAppWithJSP() throws Exception\n             IO.delete(jettyBase.toFile());\n         }\n     }\n+\n+    @Test\n+    public void testWebsocketClientInWebapp() throws Exception\n+    {\n+        Path jettyBase = Files.createTempDirectory(\"jetty_base\");\n+        String jettyVersion = System.getProperty(\"jettyVersion\");\n+        DistributionTester distribution = DistributionTester.Builder.newInstance()\n+            .jettyVersion(jettyVersion)\n+            .jettyBase(jettyBase)\n+            .mavenLocalRepository(System.getProperty(\"mavenRepoPath\"))\n+            .build();\n+\n+        String[] args1 = {\n+            \"--create-startd\",\n+            \"--approve-all-licenses\",\n+            \"--add-to-start=resources,server,http,webapp,deploy,jsp,jmx,servlet,servlets,websocket\"\n+        };\n+        try (DistributionTester.Run run1 = distribution.start(args1))\n+        {\n+            assertTrue(run1.awaitFor(5, TimeUnit.SECONDS));\n+            assertEquals(0, run1.getExitValue());\n+\n+            File webApp = distribution.resolveArtifact(\"org.eclipse.jetty.tests:test-websocket-client-webapp:war:\" + jettyVersion);\n+            distribution.installWarFile(webApp, \"test\");\n+\n+            int port = distribution.freePort();\n+            String[] args2 = {\n+                \"jetty.http.port=\" + port,\n+                // \"jetty.server.dumpAfterStart=true\",\n+                // \"jetty.webapp.addSystemClasses+=,org.eclipse.jetty.client.\",\n+                // \"jetty.webapp.addServerClasses+=,-org.eclipse.jetty.client.\",\n+                // \"jetty.webapp.addSystemClasses+=,org.eclipse.jetty.util.ssl.\",\n+                // \"jetty.webapp.addServerClasses+=,-org.eclipse.jetty.util.ssl.\",\n+                // \"jetty.webapp.addSystemClasses+=,org.eclipse.jetty.util.component.\",\n+                // \"jetty.webapp.addServerClasses+=,-org.eclipse.jetty.util.component.\"\n+            };\n+\n+            try (DistributionTester.Run run2 = distribution.start(args2))\n+            {\n+                assertTrue(run2.awaitConsoleLogsFor(\"Started @\", 10, TimeUnit.SECONDS));\n+\n+                // We should get the correct configuration from the jetty-websocket-httpclient.xml file.\n+                startHttpClient();\n+                URI serverUri = URI.create(\"ws://localhost:\" + port + \"/test\");", "originalCommit": "27a08797983fb03fb621633a2a826f91a9c78022", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26f4062d93bdbfa25a9e83bce8af5e1b21c82f1e", "url": "https://github.com/eclipse/jetty.project/commit/26f4062d93bdbfa25a9e83bce8af5e1b21c82f1e", "message": "Parameterize testWebsocketClientInWebapp over both http and https\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T05:35:58Z", "type": "commit"}, {"oid": "6cd70ce1360e4575c9cf10f12286b2849ac8883b", "url": "https://github.com/eclipse/jetty.project/commit/6cd70ce1360e4575c9cf10f12286b2849ac8883b", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5320-WebSocketHttpClient", "committedDate": "2020-10-15T03:12:21Z", "type": "commit"}, {"oid": "1b07c846c6bcca81f11f662c746d5cf52fd77353", "url": "https://github.com/eclipse/jetty.project/commit/1b07c846c6bcca81f11f662c746d5cf52fd77353", "message": "Issue #5320 - use HttpClient classloader to load jetty-websocket-httpclient.xml\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-15T05:15:20Z", "type": "commit"}, {"oid": "4cb475c97d38400bba5657ccbd2ad6cbc488539c", "url": "https://github.com/eclipse/jetty.project/commit/4cb475c97d38400bba5657ccbd2ad6cbc488539c", "message": "Issue #5320 - also test WebSocketClient on server from WEB-INF/lib\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-15T05:15:57Z", "type": "commit"}, {"oid": "3c3fcc311e3955d51c11c74e76def684d48f3ae2", "url": "https://github.com/eclipse/jetty.project/commit/3c3fcc311e3955d51c11c74e76def684d48f3ae2", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5320-WebSocketHttpClient\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-30T01:43:31Z", "type": "commit"}, {"oid": "59883af8bf554e0308c6047a8ddcf4bd462e2bcc", "url": "https://github.com/eclipse/jetty.project/commit/59883af8bf554e0308c6047a8ddcf4bd462e2bcc", "message": "update version to 9.4.34-SNAPSHOT\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-30T04:00:38Z", "type": "commit"}, {"oid": "458d67e3db933c97291d4c7fc5050e4f2726942f", "url": "https://github.com/eclipse/jetty.project/commit/458d67e3db933c97291d4c7fc5050e4f2726942f", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5320-WebSocketHttpClient", "committedDate": "2020-11-02T04:07:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODgyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r515858821", "bodyText": "newHttpClient() already catches all exception, so there is no need for this catch block here.\nMerge the error messages and I think it should be a LOG.info(), since if we cannot load it we just fall back.", "author": "sbordet", "createdAt": "2020-11-02T09:59:55Z", "path": "jetty-websocket/websocket-client/src/main/java/org/eclipse/jetty/websocket/client/XmlBasedHttpClientProvider.java", "diffHunk": "@@ -22,27 +22,52 @@\n \n import org.eclipse.jetty.client.HttpClient;\n import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+import org.eclipse.jetty.util.resource.Resource;\n import org.eclipse.jetty.websocket.common.scopes.WebSocketContainerScope;\n import org.eclipse.jetty.xml.XmlConfiguration;\n \n class XmlBasedHttpClientProvider\n {\n+    public static final Logger LOG = Log.getLogger(XmlBasedHttpClientProvider.class);\n+\n     public static HttpClient get(@SuppressWarnings(\"unused\") WebSocketContainerScope scope)\n     {\n-        URL resource = Thread.currentThread().getContextClassLoader().getResource(\"jetty-websocket-httpclient.xml\");\n+        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+        if (contextClassLoader == null)\n+            return null;\n+\n+        URL resource = contextClassLoader.getResource(\"jetty-websocket-httpclient.xml\");\n         if (resource == null)\n-        {\n             return null;\n+\n+        try\n+        {\n+            Thread.currentThread().setContextClassLoader(HttpClient.class.getClassLoader());\n+            return newHttpClient(resource);\n+        }\n+        catch (Throwable t)\n+        {\n+            LOG.warn(\"Failure to load HttpClient from XML\", t);\n+        }", "originalCommit": "458d67e3db933c97291d4c7fc5050e4f2726942f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NDExNg==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r515864116", "bodyText": "This class extends a deprecated class -- should this class be deprecated as well?", "author": "sbordet", "createdAt": "2020-11-02T10:08:55Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/extensions/WebSocketExtensionFactory.java", "diffHunk": "@@ -42,10 +37,8 @@\n \n public class WebSocketExtensionFactory extends ExtensionFactory implements LifeCycle, Dumpable", "originalCommit": "458d67e3db933c97291d4c7fc5050e4f2726942f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MTU3OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r515871579", "bodyText": "Worth clarifying the comment in: \"Cannot instantiate an HttpClient here because it's a server class, and therefore must rely on jetty-websocket-httpclient.xml\".", "author": "sbordet", "createdAt": "2020-11-02T10:20:54Z", "path": "tests/test-webapps/test-websocket-client-provided-webapp/src/main/java/org/eclipse/jetty/tests/webapp/websocket/WebSocketClientServlet.java", "diffHunk": "@@ -0,0 +1,129 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.tests.webapp.websocket;\n+\n+import java.io.PrintWriter;\n+import java.net.URI;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.api.util.WSURI;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+\n+@WebServlet(\"/\")\n+public class WebSocketClientServlet extends HttpServlet\n+{\n+    private WebSocketClient client;\n+\n+    @Override\n+    public void init() throws ServletException\n+    {\n+        // We must rely on jetty-websocket-httpclient.xml as we do not have access to server classes like HttpClient.", "originalCommit": "458d67e3db933c97291d4c7fc5050e4f2726942f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NDE5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r515874199", "bodyText": "I think you can do this via reflection:\nObject httpClient = client.getHttpClient();\n// etc.\nIf you cannot, then remove the connectTimeout setting from jetty-websocket-httpclient.xml.", "author": "sbordet", "createdAt": "2020-11-02T10:25:08Z", "path": "tests/test-webapps/test-websocket-client-provided-webapp/src/main/java/org/eclipse/jetty/tests/webapp/websocket/WebSocketClientServlet.java", "diffHunk": "@@ -0,0 +1,129 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.tests.webapp.websocket;\n+\n+import java.io.PrintWriter;\n+import java.net.URI;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.api.util.WSURI;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+\n+@WebServlet(\"/\")\n+public class WebSocketClientServlet extends HttpServlet\n+{\n+    private WebSocketClient client;\n+\n+    @Override\n+    public void init() throws ServletException\n+    {\n+        // We must rely on jetty-websocket-httpclient.xml as we do not have access to server classes like HttpClient.\n+        client = new WebSocketClient();\n+\n+        try\n+        {\n+            client.start();\n+        }\n+        catch (Exception e)\n+        {\n+            throw new ServletException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy()\n+    {\n+        try\n+        {\n+            client.stop();\n+        }\n+        catch (Exception e)\n+        {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+    {\n+        try\n+        {\n+            resp.setContentType(\"text/html\");\n+\n+            // Send and receive a websocket echo on the same server.\n+            ClientSocket clientSocket = new ClientSocket();\n+            URI wsUri = WSURI.toWebsocket(req.getRequestURL()).resolve(\"echo\");\n+            client.connect(clientSocket, wsUri).get(5, TimeUnit.SECONDS);\n+            clientSocket.session.getRemote().sendString(\"test message\");\n+            String response = clientSocket.textMessages.poll(5, TimeUnit.SECONDS);\n+            clientSocket.session.close();\n+            clientSocket.closeLatch.await(5, TimeUnit.SECONDS);\n+\n+            PrintWriter writer = resp.getWriter();\n+            writer.println(\"WebSocketEcho: \" + (\"test message\".equals(response) ? \"success\" : \"failure\"));\n+            writer.println(\"WebSocketEcho: success\");\n+            // We cannot test the HttpClient timeout because it is a server class not exposed to the webapp.\n+            // writer.println(\"ConnectTimeout: \" + client.getHttpClient().getConnectTimeout());", "originalCommit": "458d67e3db933c97291d4c7fc5050e4f2726942f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3OTE1NA==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r515879154", "bodyText": "I cannot comment on the keystore file, but I don't think it's necessary.\nThe keystore is copied from module ssl, no? The one you added here is not used at all. If that's the case, remove it.", "author": "sbordet", "createdAt": "2020-11-02T10:33:31Z", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -304,4 +307,104 @@ public void testLog4j2ModuleWithSimpleWebAppWithJSP() throws Exception\n             IO.delete(jettyBase.toFile());\n         }\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"http\", \"https\"})\n+    public void testWebsocketClientInWebappProvidedByServer(String scheme) throws Exception", "originalCommit": "458d67e3db933c97291d4c7fc5050e4f2726942f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4MDcyMg==", "url": "https://github.com/eclipse/jetty.project/pull/5374#discussion_r515880722", "bodyText": "Worth adding a comment about what these 2 lines do -- I cannot grok it.", "author": "sbordet", "createdAt": "2020-11-02T10:36:14Z", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -304,4 +307,104 @@ public void testLog4j2ModuleWithSimpleWebAppWithJSP() throws Exception\n             IO.delete(jettyBase.toFile());\n         }\n     }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"http\", \"https\"})\n+    public void testWebsocketClientInWebappProvidedByServer(String scheme) throws Exception\n+    {\n+        Path jettyBase = Files.createTempDirectory(\"jetty_base\");\n+        String jettyVersion = System.getProperty(\"jettyVersion\");\n+        DistributionTester distribution = DistributionTester.Builder.newInstance()\n+            .jettyVersion(jettyVersion)\n+            .jettyBase(jettyBase)\n+            .mavenLocalRepository(System.getProperty(\"mavenRepoPath\"))\n+            .build();\n+\n+        String[] args1 = {\n+            \"--create-startd\",\n+            \"--approve-all-licenses\",\n+            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,\" + scheme\n+        };\n+        try (DistributionTester.Run run1 = distribution.start(args1))\n+        {\n+            assertTrue(run1.awaitFor(5, TimeUnit.SECONDS));\n+            assertEquals(0, run1.getExitValue());\n+\n+            File webApp = distribution.resolveArtifact(\"org.eclipse.jetty.tests:test-websocket-client-provided-webapp:war:\" + jettyVersion);\n+            distribution.installWarFile(webApp, \"test\");\n+\n+            int port = distribution.freePort();\n+            String[] args2 = {\n+                \"jetty.http.port=\" + port,\n+                \"jetty.ssl.port=\" + port,\n+                // \"jetty.server.dumpAfterStart=true\",\n+            };\n+\n+            try (DistributionTester.Run run2 = distribution.start(args2))\n+            {\n+                assertTrue(run2.awaitConsoleLogsFor(\"Started @\", 10, TimeUnit.SECONDS));\n+\n+                // We should get the correct configuration from the jetty-websocket-httpclient.xml file.\n+                startHttpClient(scheme.equals(\"https\"));\n+                URI serverUri = URI.create(scheme + \"://localhost:\" + port + \"/test\");\n+                ContentResponse response = client.GET(serverUri);\n+                assertEquals(HttpStatus.OK_200, response.getStatus());\n+                String content = response.getContentAsString();\n+                assertThat(content, containsString(\"WebSocketEcho: success\"));\n+\n+                // We cannot test the HttpClient timeout because it is a server class not exposed to the webapp.\n+                // assertThat(content, containsString(\"ConnectTimeout: 4999\"));\n+            }\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"http\", \"https\"})\n+    public void testWebsocketClientInWebapp(String scheme) throws Exception\n+    {\n+        Path jettyBase = Files.createTempDirectory(\"jetty_base\");\n+        String jettyVersion = System.getProperty(\"jettyVersion\");\n+        DistributionTester distribution = DistributionTester.Builder.newInstance()\n+            .jettyVersion(jettyVersion)\n+            .jettyBase(jettyBase)\n+            .mavenLocalRepository(System.getProperty(\"mavenRepoPath\"))\n+            .build();\n+\n+        String[] args1 = {\n+            \"--create-startd\",\n+            \"--approve-all-licenses\",\n+            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,\" + scheme\n+        };\n+        try (DistributionTester.Run run1 = distribution.start(args1))\n+        {\n+            assertTrue(run1.awaitFor(5, TimeUnit.SECONDS));\n+            assertEquals(0, run1.getExitValue());\n+\n+            File webApp = distribution.resolveArtifact(\"org.eclipse.jetty.tests:test-websocket-client-webapp:war:\" + jettyVersion);\n+            distribution.installWarFile(webApp, \"test\");\n+\n+            int port = distribution.freePort();\n+            String[] args2 = {\n+                \"jetty.http.port=\" + port,\n+                \"jetty.ssl.port=\" + port,\n+                \"jetty.webapp.addServerClasses+=,+org.eclipse.jetty.websocket.\",\n+                \"jetty.webapp.addSystemClasses+=,-org.eclipse.jetty.websocket.\",", "originalCommit": "458d67e3db933c97291d4c7fc5050e4f2726942f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "60c56d885640db4588816b04c26e48e985f8bbd8", "url": "https://github.com/eclipse/jetty.project/commit/60c56d885640db4588816b04c26e48e985f8bbd8", "message": "changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-02T12:43:42Z", "type": "commit"}]}