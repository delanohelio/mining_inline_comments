{"pr_number": 5131, "pr_title": "Issue #5129 - WebAppContext.setExtraClasspath(String) cleanup", "pr_createdAt": "2020-08-07T19:05:42Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5131", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQyNA==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r467775424", "bodyText": "I think the problem is that we are parsing this extraClassPath String in 2 places: once in WebAppLoader, but then again in WebInfConfiguration. It should only be parsed once. So I think the better solution - as it is WebInfConfiguration's job to set up the WebAppLoader - that it converts the extraClassPath into Resources, and then sets those resources onto WebAppLoader  in the configure() method, where it pushes the WEB-INF/lib jars and WEB-INF/classes resources into the WebAppLoader.", "author": "janbartel", "createdAt": "2020-08-10T09:07:40Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -947,13 +947,47 @@ protected static String getResourceBaseName(Resource resource)\n         StringTokenizer tokenizer = new StringTokenizer(context.getExtraClasspath(), \",;\");\n         while (tokenizer.hasMoreTokens())\n         {\n-            Resource resource = context.newResource(tokenizer.nextToken().trim());\n-            String fnlc = resource.getName().toLowerCase(Locale.ENGLISH);\n-            int dot = fnlc.lastIndexOf('.');\n-            String extension = (dot < 0 ? null : fnlc.substring(dot));\n-            if (extension != null && (extension.equals(\".jar\") || extension.equals(\".zip\")))\n+            String token = tokenizer.nextToken().trim();", "originalCommit": "0c6530c3fd345d2ee8379bb31168dc56dab4241a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2NDQ3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r467864472", "bodyText": "There's actually 3 places.", "author": "joakime", "createdAt": "2020-08-10T12:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1ODQ5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468658499", "bodyText": "Will be cleaned up in 10", "author": "gregw", "createdAt": "2020-08-11T15:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NTQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTE1Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r467891157", "bodyText": "I think all these tests are good, but can they be added to an existing test, like for WebAppClassLoader, or WebAppContext?", "author": "janbartel", "createdAt": "2020-08-10T13:10:16Z", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebAppContextExtraClasspathTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.util.resource.PathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class WebAppContextExtraClasspathTest\n+{", "originalCommit": "0c6530c3fd345d2ee8379bb31168dc56dab4241a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MjgxOA==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r467892818", "bodyText": "I wanted to test extraClassPath in isolation.\nWe have 2 separate WebAppClassLoader test classes. (which has good separation)\nAnd we have a giant multi-purpose WebAppContext test that does far too many things all at once.  It should really be broken down into more isolated tests.", "author": "joakime", "createdAt": "2020-08-10T13:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg5MTE1Nw=="}], "type": "inlineReview"}, {"oid": "55f4e4fa6377d4b72ceafec3906266568ac26123", "url": "https://github.com/eclipse/jetty.project/commit/55f4e4fa6377d4b72ceafec3906266568ac26123", "message": "Issue #5129 - WebAppContext.setExtraClasspath(String) cleanup\n\n+ More tests for both relative and absolute path references\n+ More testing that will trigger quirks on Windows builds\n  so that we can catch regressions faster\n+ Reworked WebInfConfiguration to be glob aware in a way\n  similar to how WebAppClassLoader behaves.\n+ Reworked Resource.newResource(String) to delegate\n  canonical path resolution to PathResource\n+ Guarded PathResource's usage of Path.toAbsolutePath()\n  to ignore valid conditions where the Path cannot be\n  resolved to an absolute path (yet)\n+ Normalize resolved paths in PathResource\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-08-10T15:42:38Z", "type": "commit"}, {"oid": "55f4e4fa6377d4b72ceafec3906266568ac26123", "url": "https://github.com/eclipse/jetty.project/commit/55f4e4fa6377d4b72ceafec3906266568ac26123", "message": "Issue #5129 - WebAppContext.setExtraClasspath(String) cleanup\n\n+ More tests for both relative and absolute path references\n+ More testing that will trigger quirks on Windows builds\n  so that we can catch regressions faster\n+ Reworked WebInfConfiguration to be glob aware in a way\n  similar to how WebAppClassLoader behaves.\n+ Reworked Resource.newResource(String) to delegate\n  canonical path resolution to PathResource\n+ Guarded PathResource's usage of Path.toAbsolutePath()\n  to ignore valid conditions where the Path cannot be\n  resolved to an absolute path (yet)\n+ Normalize resolved paths in PathResource\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-08-10T15:42:38Z", "type": "forcePushed"}, {"oid": "e8098986e65cbf8b326d669a9db55421383fd06b", "url": "https://github.com/eclipse/jetty.project/commit/e8098986e65cbf8b326d669a9db55421383fd06b", "message": "Issue #5129 - Simplify Resource reference list behavior\n\n+ Introduce new Resource.fromReferences to help with\n  parsing delimited resource reference lists.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-08-10T16:30:39Z", "type": "commit"}, {"oid": "52f5218900b04d1e7e33cf2c6458183f57b709ad", "url": "https://github.com/eclipse/jetty.project/commit/52f5218900b04d1e7e33cf2c6458183f57b709ad", "message": "Issue #5129 - Resource.fromReferences no longer needs DefaultFactory\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-08-10T19:42:02Z", "type": "commit"}, {"oid": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0", "url": "https://github.com/eclipse/jetty.project/commit/5b8c343a2b4476a122c1b744451a5390a0ccf8b0", "message": "Issue #5129 - Fleshing out glob testcase a bit more\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-08-10T19:46:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwMjcyNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468402725", "bodyText": "This might be a better assumption, but for 9.4 I think we really don't want to change how we work out what type a resource is as we really don't want to change behaviour... even if it is slightly wrong.  We should only fix real bugs.", "author": "gregw", "createdAt": "2020-08-11T08:10:59Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -174,19 +177,8 @@ public static Resource newResource(String resource, boolean useCaches)\n                 !resource.startsWith(\"file:\") &&\n                 !resource.startsWith(\"jar:\"))\n             {\n-                try\n-                {\n-                    // It's a file.\n-                    if (resource.startsWith(\"./\"))\n-                        resource = resource.substring(2);\n-                    File file = new File(resource).getCanonicalFile();\n-                    return new PathResource(file);\n-                }\n-                catch (IOException e2)\n-                {\n-                    e2.addSuppressed(e);\n-                    throw e2;\n-                }\n+                // It's likely a file/path reference.\n+                return new PathResource(Paths.get(resource));", "originalCommit": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyMzcwMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468523701", "bodyText": "The code that was removed was a left-over from the FileResource days.\nThe use of getCanonicalFile() is one of the core issues from #5129 and must be addressed.\nOn windows, it throws for many reasons, during testing I found that it throws if the File (or any sub-path it references) doesn't exist or it contains characters in the list of unacceptable characters (such as the * in path\\to\\dir\\*).  Note: these 2 reasons are not the only reasons getCanonicalFile throws.   (On a typical Linux environment I have been unable to produce a combination of conditions that would cause it to throw)\nThe stripping of the \"./\" prefix is something that the Path.normalize() takes care of.\nThe modified form of the resource variable that the old lines 180-181 produces never exits this block of code, you'll have a PathResource or an exception.", "author": "joakime", "createdAt": "2020-08-11T11:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwMjcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjM5Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468406393", "bodyText": "fromList or fromCSV would be a better name, as References doesn't mean anything to me.", "author": "gregw", "createdAt": "2020-08-11T08:17:22Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -1005,4 +996,107 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Factory to create new Resource instance from a reference.\n+     */\n+    public interface Factory\n+    {\n+        /**\n+         * Create a new Resource from the factory's point of view.\n+         * <p>\n+         * This is different then {@link ResourceFactory} in that\n+         * it must return a {@link Resource} or throw an IOException,\n+         * never null.\n+         * </p>\n+         *\n+         * @param reference the string reference.\n+         * @return the Resource instance\n+         * @throws IOException if unable to create a Resource reference\n+         */\n+        Resource newResource(String reference) throws IOException;\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromReferences(String delimitedReferences) throws IOException\n+    {\n+        return fromReferences(delimitedReferences, Resource::newResource);\n+    }\n+\n+    /**\n+     * Parse a delimited String of resource references and\n+     * return the List of Resources instances it represents.\n+     * <p>\n+     * Supports glob references that end in {@code /*} or {@code \\*}.\n+     * Glob references will only iterate through the level specified and will not traverse\n+     * found directories within the glob reference.\n+     * </p>\n+     *\n+     * @param delimitedReferences the comma {@code ,} or semicolon {@code ;} delimited\n+     * String of resource references.\n+     * @param resourceFactory the Resource.Factory used to create new Resource references\n+     * @return the list of resources parsed from input string.\n+     */\n+    public static List<Resource> fromReferences(String delimitedReferences, Resource.Factory resourceFactory) throws IOException", "originalCommit": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxOTQ1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468519451", "bodyText": "fromList I'm good with, fromCSV I'm against, as this doesn't handle CSV, merely delimited. (I would also accept fromDelimited)\nNone of our existing methods with CSV in the name actually handle CSV. (and that bothers me)", "author": "joakime", "createdAt": "2020-08-11T11:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxOTc1Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468619753", "bodyText": "This layer has been removed in this PR for jetty-9.4.x.\nIt should show up again in a new PR for jetty-10.0.x", "author": "joakime", "createdAt": "2020-08-11T14:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwNjM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwODE2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468408160", "bodyText": "Do we really need a new public interface just because ResourceFactory can return null?    It's only called in a few spots in the methods below and null checking there would be better than introducing a nearly identical interface..... or just use Function<String, Resource>\nWe could perhaps change ResourceFactory in 10 to throw, but that is a lot more expensive for 404s", "author": "gregw", "createdAt": "2020-08-11T08:20:25Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java", "diffHunk": "@@ -1005,4 +996,107 @@ public static URL toURL(File file) throws MalformedURLException\n     {\n         return file.toURI().toURL();\n     }\n+\n+    /**\n+     * Factory to create new Resource instance from a reference.\n+     */\n+    public interface Factory\n+    {\n+        /**\n+         * Create a new Resource from the factory's point of view.\n+         * <p>\n+         * This is different then {@link ResourceFactory} in that\n+         * it must return a {@link Resource} or throw an IOException,\n+         * never null.\n+         * </p>\n+         *\n+         * @param reference the string reference.\n+         * @return the Resource instance\n+         * @throws IOException if unable to create a Resource reference\n+         */\n+        Resource newResource(String reference) throws IOException;", "originalCommit": "5b8c343a2b4476a122c1b744451a5390a0ccf8b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxODY4Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468518686", "bodyText": "The pre-existing ResourceFactory is really a ResourceAddPathFactory or SubResourceFactory, it's badly named.\nI would love to use something like Function<String,Resource> but that doesn't allow for throwing of the exception.", "author": "joakime", "createdAt": "2020-08-11T11:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwODE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUyOTQ3Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468529476", "bodyText": "If we can skip the Context.newResource(String) layer for extraClassPath parsing then the Resource.Factory can be removed.", "author": "joakime", "createdAt": "2020-08-11T12:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwODE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxOTQ2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468619467", "bodyText": "This layer has been removed in this PR for jetty-9.4.x.\nIt should show up again in a new PR for jetty-10.0.x", "author": "joakime", "createdAt": "2020-08-11T14:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQwODE2MA=="}], "type": "inlineReview"}, {"oid": "150dc22f0a58d1047df7bbc52a2e95da12a1d263", "url": "https://github.com/eclipse/jetty.project/commit/150dc22f0a58d1047df7bbc52a2e95da12a1d263", "message": "Issue #5129 - Reverting Resource.fromReferences()\n\n+ Will migrate to jetty-10.0.x\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-08-11T13:15:27Z", "type": "commit"}, {"oid": "4a19ef4bb2d978f222f0dfaf260349955407ba33", "url": "https://github.com/eclipse/jetty.project/commit/4a19ef4bb2d978f222f0dfaf260349955407ba33", "message": "Issue #5129 - disabling ResourceTest.testGlobPath on WINDOWS for stability", "committedDate": "2020-08-11T13:51:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNjUxMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468636511", "bodyText": "Wwe've ever supported an extraClasspath directory hierarchy that is a mix of classes dirs and jar files. The arg to addJars() has always been interpreted as a dir that contains jar/zip files, and only the jar/zip files were added to the classpath. It looks like line 334 is going to add the subdirs of the lib to the classpath, but that's never been the accepted behaviour.", "author": "janbartel", "createdAt": "2020-08-11T14:43:47Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebAppClassLoader.java", "diffHunk": "@@ -319,29 +319,37 @@ public void addJars(Resource lib)\n     {\n         if (lib.exists() && lib.isDirectory())\n         {\n-            String[] files = lib.list();\n-            if (files != null)\n+            String[] entries = lib.list();\n+            if (entries != null)\n             {\n-                Arrays.sort(files);\n-            }\n-            for (int f = 0; files != null && f < files.length; f++)\n-            {\n-                try\n+                Arrays.sort(entries);\n+\n+                for (String entry : entries)\n                 {\n-                    Resource fn = lib.addPath(files[f]);\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"addJar - {}\", fn);\n-                    String fnlc = fn.getName().toLowerCase(Locale.ENGLISH);\n-                    // don't check if this is a directory (prevents use of symlinks), see Bug 353165\n-                    if (isFileSupported(fnlc))\n+                    try\n                     {\n-                        String jar = URIUtil.encodeSpecific(fn.toString(), \",;\");\n-                        addClassPath(jar);\n+                        Resource resource = lib.addPath(entry);\n+                        if (LOG.isDebugEnabled())\n+                            LOG.debug(\"addJar - {}\", resource);\n+                        if (resource.isDirectory())\n+                        {\n+                            addURL(resource.getURI().toURL());", "originalCommit": "4a19ef4bb2d978f222f0dfaf260349955407ba33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NzQwMg==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468647402", "bodyText": "No, it doesn't add sub-directories, it only adds the directory itself as a directory reference.\nSimilar to how WebInfConfiguration.findExtraClassPathDirs() works with glob.", "author": "joakime", "createdAt": "2020-08-11T14:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNjUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468639033", "bodyText": "If the entry has a trailing *, then it is a directory of jar files and we can ignore it, we should not look deeply into its subdirs.", "author": "janbartel", "createdAt": "2020-08-11T14:47:07Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java", "diffHunk": "@@ -1003,11 +1037,53 @@ protected Resource findWebInfClassesDir(WebAppContext context)\n         StringTokenizer tokenizer = new StringTokenizer(context.getExtraClasspath(), \",;\");\n         while (tokenizer.hasMoreTokens())\n         {\n-            Resource resource = context.newResource(tokenizer.nextToken().trim());\n-            if (resource.exists() && resource.isDirectory())\n-                dirResources.add(resource);\n+            String token = tokenizer.nextToken().trim();\n+            if (isGlobReference(token))\n+            {", "originalCommit": "4a19ef4bb2d978f222f0dfaf260349955407ba33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NTQzNw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468645437", "bodyText": "We only look at the level of the /*.\nSo that means if we have say ...\n$ ls -1 -F /opt/ext/\ncorp.jar\nfoo.jar\nresources/\nAnd a reference of /opt/ext/* then that's 3 URL entries in the WebAppClassLoader.\n\nfile:///opt/ext/corp.jar\nfile:///opt/ext/foo.jar\nfile:///opt/ext/resources/  (treated as directory entry in the ClassLoader)", "author": "joakime", "createdAt": "2020-08-11T14:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0ODg4MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468648881", "bodyText": "This is not the WebAppClassLoader, this is in WebInfConfiguration.findExtraClasspathDirs where we are only looking for entries in the ;, separated list that are themselves directories; any entry that is suffixed by /* is handled by WebInfConfiguration.findExtraClasspathJars. We don't want to do a deep add of a directory inside of WebInfConfiguration.findExtraClasspathDirs.", "author": "janbartel", "createdAt": "2020-08-11T15:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1NTkwNw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468655907", "bodyText": "This doesn't do deep directory, it's only at the level of the glob.\nGlob means anything relevant in the point of the tree of the glob, not deeper.\n\"Relevant\" is anything that has meaning to the Classloader, which is zip, jar, and directory (all other entries that the glob produces are ignored).", "author": "joakime", "createdAt": "2020-08-11T15:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY2NjExNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468666115", "bodyText": "So, we have a misaligned behavior here.\nWebInfConfiguration and WebAppClassLoader in existing jetty-9.4.x behaves differently in regards to /path/to/* entries.\nWe either use the WebAppClassLoader behavior for glob that adds directories.\nOr we use the WebInfConfiguration behavior for glob that does not add directories.\nLooking at how java itself works I think we should use the existing jetty-9.4.x behavior that WebInfConfiguration uses and not add directories.\nI'll explain with a code example ...\npackage cloader;\n\nimport java.io.File;\n\npublic class ShowClassLoader\n{\n    public static void main(String[] args)\n    {\n        String javaClasspath = System.getProperty(\"java.class.path\");\n        System.out.printf(\"java.class.path=%s%n\", javaClasspath);\n        String[] parts = javaClasspath.split(File.pathSeparator);\n        System.out.printf(\"  entries.length=%d%n\", parts.length);\n        for (int i = 0; i < parts.length; i++)\n        {\n            System.out.printf(\"  entry[%d]=%s%n\", i, parts[i]);\n        }\n    }\n}\nRun on the command line ...\n$ ls -1 -F target/lib\ncorp.jar\nfoo.jar\nresources/\n\n$ java -cp 'target/lib/*:target/classes' cloader.ShowClassLoader\njava.class.path=target/lib/corp.jar:target/lib/foo.jar:target/classes\n  entries.length=3\n  entry[0]=target/lib/corp.jar\n  entry[1]=target/lib/foo.jar\n  entry[2]=target/classes\nThis behavior on OpenJDK 11.0.7 is what WebInfConfiguration mimics, but not what WebAppClassLoader does.\nThe OpenJDK 11.0.7 on Windows classpath behaves the same way.\nAnd it's documented like this at https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html#A1100762", "author": "joakime", "createdAt": "2020-08-11T15:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY3NDgxNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468674815", "bodyText": "Just as a followup, the glob behaviors on Linux from the above example seem to be mostly done via the shell.\nWindows JVM seems to have specific code to allow globs, so we are essentially attempting to mimic glob shell behavior on linux and glob classpath behavior on windows.", "author": "joakime", "createdAt": "2020-08-11T15:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2MzUwMw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468763503", "bodyText": "This has been reverted in WebInfConfiguration and WebAppClassloader has been updated to reflect the truth in both JVM behavior and WebInfConfiguration behavior (along with tests).", "author": "joakime", "createdAt": "2020-08-11T17:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzNjYzOA==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r469136638", "bodyText": "So the point I was making was that in WebInfConfiguration.findExtraClasspathJars we should not add the directory with the trailing * to the list of resources, only the jars and zips that are contained at the top level inside of that directory. If you've changed the code so that that directory is not added, then we're good.", "author": "janbartel", "createdAt": "2020-08-12T09:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MDI1OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r469190259", "bodyText": "Current implementation in this PR does not add directories for glob usage in either WebInfConfiguration (like before) nor in WebAppClassLoader (this is a change in behavior)", "author": "joakime", "createdAt": "2020-08-12T11:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzOTAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MDEwNA==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468640104", "bodyText": "This test needs a better place, it is not testing the extraClasspath.", "author": "janbartel", "createdAt": "2020-08-11T14:48:31Z", "path": "jetty-webapp/src/test/java/org/eclipse/jetty/webapp/WebAppContextExtraClasspathTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.webapp;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.util.resource.PathResource;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class WebAppContextExtraClasspathTest\n+{\n+    private Server server;\n+\n+    private Server newServer()\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        connector.setPort(0);\n+        server.addConnector(connector);\n+        return server;\n+    }\n+\n+    @AfterEach\n+    public void tearDown()\n+    {\n+        LifeCycle.stop(server);\n+    }\n+\n+    @Test\n+    public void testBaseResourceAbsolutePath() throws Exception", "originalCommit": "4a19ef4bb2d978f222f0dfaf260349955407ba33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NjcxNA==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468646714", "bodyText": "That would mean a new class.\nAs the existing WebAppContextTest forces behavior on each run that is irrelevant for this test.\nI can clean that up in the future jetty-10.0.x PR though.", "author": "joakime", "createdAt": "2020-08-11T14:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1NDMyMw==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468654323", "bodyText": "I opened Issue #5137 to cleanup the WebAppContext tests.\nLets keep this PR on the smallish side.", "author": "joakime", "createdAt": "2020-08-11T15:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MDEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1OTczMg==", "url": "https://github.com/eclipse/jetty.project/pull/5131#discussion_r468659732", "bodyText": "One of my pet peeves is that we create too many special purpose test classes and it can be really hard to find where things are tested or what tests to run to get full coverage for a change.  As much as possible we should keep unit tests for Foo.java in FooTest.java", "author": "gregw", "createdAt": "2020-08-11T15:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MDEwNA=="}], "type": "inlineReview"}, {"oid": "d91cab035445cf86ccd309cab9dc769e51f5fafd", "url": "https://github.com/eclipse/jetty.project/commit/d91cab035445cf86ccd309cab9dc769e51f5fafd", "message": "Issue #5129 - Directories discovered via classpath glob are not valid\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-08-11T15:44:05Z", "type": "commit"}]}