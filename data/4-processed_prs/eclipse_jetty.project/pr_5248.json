{"pr_number": 5248, "pr_title": "Issue #5198 - update gzip handler", "pr_createdAt": "2020-09-09T04:09:04Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5248", "timeline": [{"oid": "7642be8fd0446dfe004c39303d5c9b789b8ba0ce", "url": "https://github.com/eclipse/jetty.project/commit/7642be8fd0446dfe004c39303d5c9b789b8ba0ce", "message": "Issue #4988 - make the MIME type comparison in GzipHandler case insensitive\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-07T07:29:13Z", "type": "commit"}, {"oid": "17ec87f51ccc3761644230412d250bd82ac89e74", "url": "https://github.com/eclipse/jetty.project/commit/17ec87f51ccc3761644230412d250bd82ac89e74", "message": "Issue #1761 - add extra .ini file configuration for gzip.mod\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-07T23:46:51Z", "type": "commit"}, {"oid": "3bdd82eb5ef1c9426eaea246932f51e27c9b443d", "url": "https://github.com/eclipse/jetty.project/commit/3bdd82eb5ef1c9426eaea246932f51e27c9b443d", "message": "Issue #5198 - GzipHandler should use InflaterPool as well as DeflaterPool\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-08T05:27:21Z", "type": "commit"}, {"oid": "7a04b3eb19820c66b65d026cfd972a49689dc582", "url": "https://github.com/eclipse/jetty.project/commit/7a04b3eb19820c66b65d026cfd972a49689dc582", "message": "Issue #5198 - use ByteBuffer API for inflater/deflaters for GzipHandler\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-08T07:10:36Z", "type": "commit"}, {"oid": "2ed89cbccdf694b79aa831ea90ea3c46994b5b8b", "url": "https://github.com/eclipse/jetty.project/commit/2ed89cbccdf694b79aa831ea90ea3c46994b5b8b", "message": "Issue #5246 - add Inflater/Deflater pools to server dump\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-09T00:39:15Z", "type": "commit"}, {"oid": "4e6827c539898f99d6ce636699cfd5eda63f8afa", "url": "https://github.com/eclipse/jetty.project/commit/4e6827c539898f99d6ce636699cfd5eda63f8afa", "message": "Issue #5198 - fix usage of inflater/deflater ByteBuffer API\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-09T03:53:09Z", "type": "commit"}, {"oid": "2f23c5936e0159d345a93035d7ef14be87516efd", "url": "https://github.com/eclipse/jetty.project/commit/2f23c5936e0159d345a93035d7ef14be87516efd", "message": "Issue #5198 - revert usage of deflater ByteBuffer API for GzipHandler\n\nThe CRC32 checksum may need to convert the ByteBuffer to an array anyway so\nwe are better off not setting the deflater input with ByteBuffer directly.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-09T04:03:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyNzU2Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485327562", "bodyText": "@gregw I think its probably best not to use the deflaters ByteBuffer method here, the CRC32 will need an array from the ByteBuffer anyway, and if we do it ourselves we get the use the ByteBufferPool.", "author": "lachlan-roberts", "createdAt": "2020-09-09T04:17:47Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHttpOutputInterceptor.java", "diffHunk": "@@ -355,7 +354,7 @@ protected Action process() throws Exception\n                         int off = slice.arrayOffset() + slice.position();\n                         int len = slice.remaining();\n                         _crc.update(array, off, len);\n-                        _deflater.setInput(array, off, len);  // TODO use ByteBuffer API in Jetty-10\n+                        _deflater.setInput(array, off, len);", "originalCommit": "2f23c5936e0159d345a93035d7ef14be87516efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NzU3NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485947575", "bodyText": "I have added a comment as to why we are not using the ByteBuffer API for deflaters.", "author": "lachlan-roberts", "createdAt": "2020-09-09T22:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyNzU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNDM1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485714351", "bodyText": "Can you use TreeSet instead?\nSet<String> foo = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\nfoo.add(\"Bar\");\nfoo.add(\"bar\");\nfoo.add(\"BAR\");\nfoo.add(\"ZED\");\nfoo.add(\"zed\");\n\nSystem.out.printf(\"Has %d elements%n\", foo.size());\nSystem.out.printf(\"contains('baR') = %b%n\", foo.contains(\"baR\"));\nSystem.out.printf(\"contains('zeD') = %b%n\", foo.contains(\"zeD\"));\nSystem.out.printf(\"contains('baz') = %b%n\", foo.contains(\"baz\"));\nResults in ...\nHas 2 elements\ncontains('baR') = true\ncontains('zeD') = true\ncontains('baz') = false", "author": "joakime", "createdAt": "2020-09-09T15:43:59Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHandler.java", "diffHunk": "@@ -168,7 +172,7 @@\n     // non-static, as other GzipHandler instances may have different configurations\n     private final IncludeExclude<String> _methods = new IncludeExclude<>();\n     private final IncludeExclude<String> _paths = new IncludeExclude<>(PathSpecSet.class);\n-    private final IncludeExclude<String> _mimeTypes = new IncludeExclude<>();\n+    private final IncludeExclude<String> _mimeTypes = new IncludeExclude<>(CaseInsensitiveSet.class);", "originalCommit": "2f23c5936e0159d345a93035d7ef14be87516efd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485715573", "bodyText": "This can be simplified to just ...\n    public static class CaseInsensitiveSet extends TreeSet<String>\n    {\n        public CaseInsensitiveSet()\n        {\n            super(String.CASE_INSENSITIVE_ORDER);\n        }\n    }", "author": "joakime", "createdAt": "2020-09-09T15:45:48Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHandler.java", "diffHunk": "@@ -887,17 +902,60 @@ public void setDeflaterPoolCapacity(int capacity)\n         if (isStarted())\n             throw new IllegalStateException(getState());\n \n-        poolCapacity = capacity;\n+        _deflaterPool.setCapacity(capacity);\n     }\n \n-    protected DeflaterPool newDeflaterPool(int capacity)\n+    /**\n+     * Gets the maximum number of Inflators that the DeflaterPool can hold.\n+     *\n+     * @return the Deflater pool capacity\n+     */\n+    public int getInflaterPoolCapacity()\n     {\n-        return new DeflaterPool(capacity, Deflater.DEFAULT_COMPRESSION, true);\n+        return _inflaterPool.getCapacity();\n+    }\n+\n+    /**\n+     * Sets the maximum number of Inflators that the DeflaterPool can hold.\n+     */\n+    public void setInflaterPoolCapacity(int capacity)\n+    {\n+        if (isStarted())\n+            throw new IllegalStateException(getState());\n+\n+        _inflaterPool.setCapacity(capacity);\n+    }\n+\n+    protected InflaterPool newInflaterPool()\n+    {\n+        return new InflaterPool(CompressionPool.INFINITE_CAPACITY, true);\n+    }\n+\n+    protected DeflaterPool newDeflaterPool()\n+    {\n+        return new DeflaterPool(CompressionPool.INFINITE_CAPACITY, Deflater.DEFAULT_COMPRESSION, true);\n     }\n \n     @Override\n     public String toString()\n     {\n         return String.format(\"%s@%x{%s,min=%s,inflate=%s}\", getClass().getSimpleName(), hashCode(), getState(), _minGzipSize, _inflateBufferSize);\n     }\n+\n+    public static class CaseInsensitiveSet extends HashSet<String>", "originalCommit": "2f23c5936e0159d345a93035d7ef14be87516efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzYzMA==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485917630", "bodyText": "I thought about this, won't this slow access down from O(1) to O(log n), and we don't really need it to be sorted. Not sure how much this would actually impact the performance.", "author": "lachlan-roberts", "createdAt": "2020-09-09T20:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyMDMyMw==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485920323", "bodyText": "There's only what? like 5 DispatcherTypes?\nAnd the only impact is on setup/configuration/initialization, no real impact during runtime.", "author": "joakime", "createdAt": "2020-09-09T21:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNjY4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485926682", "bodyText": "This is more MIME types, but yeah probably won't be that many in the set.\nThe set should be accessed on every request.", "author": "lachlan-roberts", "createdAt": "2020-09-09T21:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyOTU4OA==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485929588", "bodyText": "Would a AsciiLowerCaseSet in jetty-util be useful (in general)?", "author": "joakime", "createdAt": "2020-09-09T21:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyOTk2Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485929966", "bodyText": "Another difference ... TreeSet doesn't allow null entries. HashSet does.", "author": "joakime", "createdAt": "2020-09-09T21:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NzIzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485947235", "bodyText": "I think it could be useful in jetty-util, although I don't know where else it could be used.", "author": "lachlan-roberts", "createdAt": "2020-09-09T22:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NzM2Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485947366", "bodyText": "I have now moved this to jetty-util.", "author": "lachlan-roberts", "createdAt": "2020-09-09T22:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxNTU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxODU0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485718541", "bodyText": "How about ...\n    public void setDispatcherTypes(String... dispatchers)\n    {\n        _dispatchers = EnumSet.copyOf(\n            Stream.of(dispatchers)\n                .flatMap(s -> Stream.of(StringUtil.csvSplit(s)))\n                .map(DispatcherType::valueOf)\n                .collect(Collectors.toSet())\n        );\n    }", "author": "joakime", "createdAt": "2020-09-09T15:50:13Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHandler.java", "diffHunk": "@@ -771,6 +773,19 @@ public void setExcludedPaths(String... pathspecs)\n         _paths.exclude(pathspecs);\n     }\n \n+    /**\n+     * Set of supported {@link DispatcherType} that this filter will operate on.\n+     *\n+     * @param dispatchers the set of {@link DispatcherType} that this filter will operate on\n+     */\n+    public void setDispatcherTypes(String... dispatchers)\n+    {\n+        setDispatcherTypes(Stream.of(dispatchers)\n+            .flatMap(s -> Stream.of(StringUtil.csvSplit(s)))\n+            .map(DispatcherType::valueOf)\n+            .toArray(DispatcherType[]::new));\n+    }", "originalCommit": "2f23c5936e0159d345a93035d7ef14be87516efd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2abf21df6b3014f3a2351badee58a858f826c4b", "url": "https://github.com/eclipse/jetty.project/commit/f2abf21df6b3014f3a2351badee58a858f826c4b", "message": "Move AsciiLowerCaseSet to jetty-util & changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-09-09T22:02:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3Mjk4NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485972985", "bodyText": "What does \"INFINITE_CAPACITY\" mean?", "author": "joakime", "createdAt": "2020-09-09T23:18:11Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHandler.java", "diffHunk": "@@ -887,12 +903,38 @@ public void setDeflaterPoolCapacity(int capacity)\n         if (isStarted())\n             throw new IllegalStateException(getState());\n \n-        poolCapacity = capacity;\n+        _deflaterPool.setCapacity(capacity);\n+    }\n+\n+    /**\n+     * Gets the maximum number of Inflators that the DeflaterPool can hold.\n+     *\n+     * @return the Deflater pool capacity\n+     */\n+    public int getInflaterPoolCapacity()\n+    {\n+        return _inflaterPool.getCapacity();\n+    }\n+\n+    /**\n+     * Sets the maximum number of Inflators that the DeflaterPool can hold.\n+     */\n+    public void setInflaterPoolCapacity(int capacity)\n+    {\n+        if (isStarted())\n+            throw new IllegalStateException(getState());\n+\n+        _inflaterPool.setCapacity(capacity);\n+    }\n+\n+    protected InflaterPool newInflaterPool()\n+    {\n+        return new InflaterPool(CompressionPool.INFINITE_CAPACITY, true);\n     }\n \n-    protected DeflaterPool newDeflaterPool(int capacity)\n+    protected DeflaterPool newDeflaterPool()\n     {\n-        return new DeflaterPool(capacity, Deflater.DEFAULT_COMPRESSION, true);\n+        return new DeflaterPool(CompressionPool.INFINITE_CAPACITY, Deflater.DEFAULT_COMPRESSION, true);", "originalCommit": "f2abf21df6b3014f3a2351badee58a858f826c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3OTAxMg==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r485979012", "bodyText": "It means there is no limit on the number of objects allowed to be pooled.\nThis is now changed later by the setter, as I have made the capacity of the pool configurable after it is constructed. This lets us make the pool final and add it as a bean to the GzipHandler.", "author": "lachlan-roberts", "createdAt": "2020-09-09T23:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3Mjk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjkyNg==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r486962926", "bodyText": "We want to eventually switch the pools over to using the Pool class, which has it's size set when constructed.  So we need to not assume that the pool size can be configured after construction.", "author": "gregw", "createdAt": "2020-09-11T10:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3Mjk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1NDY0MA==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r490654640", "bodyText": "Opened PR #5295, which uses the new Pool class for the CompressionPool and still allows the pool size to be changed before it is started.", "author": "lachlan-roberts", "createdAt": "2020-09-18T01:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3Mjk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDE3MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r486964171", "bodyText": "Good comment, but can we raise a bug on the JVM to provide an efficient implementation of CRC32 that does not copy ByteBuffers?", "author": "gregw", "createdAt": "2020-09-11T10:45:21Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/gzip/GzipHttpOutputInterceptor.java", "diffHunk": "@@ -355,7 +354,9 @@ protected Action process() throws Exception\n                         int off = slice.arrayOffset() + slice.position();\n                         int len = slice.remaining();\n                         _crc.update(array, off, len);\n-                        _deflater.setInput(array, off, len);  // TODO use ByteBuffer API in Jetty-10\n+                        // Ideally we would want to use the ByteBuffer API for Deflaters. However due the the ByteBuffer implementation\n+                        // of the CRC32.update() it is less efficient for us to use this rather than to convert to array ourselves.\n+                        _deflater.setInput(array, off, len);", "originalCommit": "f2abf21df6b3014f3a2351badee58a858f826c4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NTUyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r488585521", "bodyText": "It only does the copying if it is not a DirectBuffer and does not have an array.\nI don't think I can raise JVM bugs anyway, @sbordet could do this.", "author": "lachlan-roberts", "createdAt": "2020-09-15T11:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYzOTI1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r488639251", "bodyText": "or is a readonly buffer!", "author": "gregw", "createdAt": "2020-09-15T12:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY0MjE0Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5248#discussion_r488642147", "bodyText": "or if it is read-only!", "author": "gregw", "createdAt": "2020-09-15T12:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDE3MQ=="}], "type": "inlineReview"}]}