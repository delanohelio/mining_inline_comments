{"pr_number": 5216, "pr_title": "Issue #3974 flaky AsyncMiddleManServletTest overflow to filesystem tests", "pr_createdAt": "2020-08-31T17:20:55Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5216", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3NDQxMw==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r480274413", "bodyText": "I need to remove this.", "author": "joakime", "createdAt": "2020-08-31T17:21:51Z", "path": "jetty-proxy/src/test/resources/jetty-logging.properties", "diffHunk": "@@ -1,6 +1,7 @@\n org.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.StdErrLog\n+org.eclipse.jetty.LEVEL=INFO\n #org.eclipse.jetty.LEVEL=DEBUG\n #org.eclipse.jetty.client.LEVEL=DEBUG\n-#org.eclipse.jetty.proxy.LEVEL=DEBUG\n+org.eclipse.jetty.proxy.LEVEL=DEBUG", "originalCommit": "9e69d3ed13f4257716c421d59e2e0c38b4afa2df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODM0NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481128345", "bodyText": "Is the changed order of starting significant?  If not can we keep the order to minimise changes", "author": "gregw", "createdAt": "2020-09-01T13:15:33Z", "path": "jetty-proxy/src/test/java/org/eclipse/jetty/proxy/AsyncMiddleManServletTest.java", "diffHunk": "@@ -508,46 +508,52 @@ protected ContentTransformer newClientRequestContentTransformer(HttpServletReque\n                     throw new NullPointerException(\"explicitly_thrown_by_test\");\n                 };\n             }\n-        });\n+        };\n+        startServer(new EchoHttpServlet());", "originalCommit": "1ca7ec16bdd248f3d16dfd6ed49c77f047ca3607", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzMzUyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481133521", "bodyText": "This specific change was to take StacklessLogging behavior from the scope of the entire Test class, to specific methods where it was appropriate.\nAllowing stacks to be produced in the other cases where knowing details about the failure is important.\nI'll review the start order.", "author": "joakime", "createdAt": "2020-09-01T13:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NjExNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481146115", "bodyText": "Yes please restore the inlining of AsyncMiddleManServlet.", "author": "sbordet", "createdAt": "2020-09-01T13:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNTMzMw==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481235333", "bodyText": "Restored.", "author": "joakime", "createdAt": "2020-09-01T15:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NjU0Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481146547", "bodyText": "Restore inlining of AsyncMiddleManServlet.", "author": "sbordet", "createdAt": "2020-09-01T13:41:51Z", "path": "jetty-proxy/src/test/java/org/eclipse/jetty/proxy/AsyncMiddleManServletTest.java", "diffHunk": "@@ -508,46 +508,52 @@ protected ContentTransformer newClientRequestContentTransformer(HttpServletReque\n                     throw new NullPointerException(\"explicitly_thrown_by_test\");\n                 };\n             }\n-        });\n+        };\n+        startServer(new EchoHttpServlet());\n+        startProxy(proxyServlet);\n         startClient();\n \n-        byte[] bytes = new byte[1024];\n-        ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n-            .content(new BytesContentProvider(bytes))\n-            .timeout(5, TimeUnit.SECONDS)\n-            .send();\n+        try (StacklessLogging ignored = new StacklessLogging(proxyServlet._log))\n+        {\n+            byte[] bytes = new byte[1024];\n+            ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n+                .content(new BytesContentProvider(bytes))\n+                .timeout(5, TimeUnit.SECONDS)\n+                .send();\n \n-        assertEquals(500, response.getStatus());\n+            assertEquals(500, response.getStatus());\n+        }\n     }\n \n     @Test\n     public void testUpstreamTransformationThrowsAfterCommittingProxyRequest() throws Exception\n     {\n-        try (StacklessLogging ignored = new StacklessLogging(HttpChannel.class))\n+        AsyncMiddleManServlet proxyServlet = new AsyncMiddleManServlet()\n         {\n-            startServer(new EchoHttpServlet());\n-            startProxy(new AsyncMiddleManServlet()\n+            @Override\n+            protected ContentTransformer newClientRequestContentTransformer(HttpServletRequest clientRequest, Request proxyRequest)\n             {\n-                @Override\n-                protected ContentTransformer newClientRequestContentTransformer(HttpServletRequest clientRequest, Request proxyRequest)\n+                return new ContentTransformer()\n                 {\n-                    return new ContentTransformer()\n-                    {\n-                        private int count;\n+                    private int count;\n \n-                        @Override\n-                        public void transform(ByteBuffer input, boolean finished, List<ByteBuffer> output)\n-                        {\n-                            if (++count < 2)\n-                                output.add(input);\n-                            else\n-                                throw new NullPointerException(\"explicitly_thrown_by_test\");\n-                        }\n-                    };\n-                }\n-            });\n-            startClient();\n+                    @Override\n+                    public void transform(ByteBuffer input, boolean finished, List<ByteBuffer> output)\n+                    {\n+                        if (++count < 2)\n+                            output.add(input);\n+                        else\n+                            throw new NullPointerException(\"explicitly_thrown_by_test\");\n+                    }\n+                };\n+            }\n+        };\n+        startServer(new EchoHttpServlet());\n+        startProxy(proxyServlet);", "originalCommit": "1ca7ec16bdd248f3d16dfd6ed49c77f047ca3607", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNDY4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481234682", "bodyText": "Restored inlining.", "author": "joakime", "createdAt": "2020-09-01T15:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NjU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NjczMw==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481146733", "bodyText": "Restore inlining of AsyncMiddleManServlet.", "author": "sbordet", "createdAt": "2020-09-01T13:42:09Z", "path": "jetty-proxy/src/test/java/org/eclipse/jetty/proxy/AsyncMiddleManServletTest.java", "diffHunk": "@@ -625,14 +630,19 @@ public void transform(ByteBuffer input, boolean finished, List<ByteBuffer> outpu\n                     }\n                 };\n             }\n-        });\n+        };\n+        startServer(serverServlet);\n+        startProxy(proxyServlet);", "originalCommit": "1ca7ec16bdd248f3d16dfd6ed49c77f047ca3607", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNDc2OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481234769", "bodyText": "Restored", "author": "joakime", "createdAt": "2020-09-01T15:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NjczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0Njk3OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481146979", "bodyText": "Unused tag?", "author": "sbordet", "createdAt": "2020-09-01T13:42:29Z", "path": "jetty-proxy/src/test/java/org/eclipse/jetty/proxy/AsyncMiddleManServletTest.java", "diffHunk": "@@ -983,6 +993,7 @@ public boolean transform(Source source, Sink sink) throws IOException\n     }\n \n     @Test\n+    @Tag(\"overflow\")", "originalCommit": "1ca7ec16bdd248f3d16dfd6ed49c77f047ca3607", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNDg0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481234841", "bodyText": "Removed.", "author": "joakime", "createdAt": "2020-09-01T15:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0Njk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NzMzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481147335", "bodyText": "Unused tag?", "author": "sbordet", "createdAt": "2020-09-01T13:43:03Z", "path": "jetty-proxy/src/test/java/org/eclipse/jetty/proxy/AsyncMiddleManServletTest.java", "diffHunk": "@@ -1037,34 +1048,71 @@ public boolean transform(Source source, Sink sink) throws IOException\n         });\n         startClient();\n \n-        ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n-            .timeout(5, TimeUnit.SECONDS)\n-            .send();\n-\n-        assertEquals(200, response.getStatus());\n-        @SuppressWarnings(\"unchecked\")\n-        Map<String, Object> obj = (Map<String, Object>)JSON.parse(response.getContentAsString());\n-        assertNotNull(obj);\n-        assertEquals(2, obj.size());\n-        assertEquals(value0, obj.get(key0));\n-        assertEquals(value1, obj.get(key2));\n-        // Make sure the files do not exist.\n-        try (DirectoryStream<Path> paths = Files.newDirectoryStream(targetTestsDir, inputPrefix + \"*.*\"))\n+        try\n         {\n-            assertFalse(paths.iterator().hasNext());\n+            ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n+                .timeout(15, TimeUnit.SECONDS)\n+                .send();\n+\n+            assertEquals(200, response.getStatus());\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, Object> obj = (Map<String, Object>)JSON.parse(response.getContentAsString());\n+            assertNotNull(obj);\n+            assertEquals(2, obj.size());\n+            assertEquals(value0, obj.get(key0));\n+            assertEquals(value1, obj.get(key2));\n+\n+            // File deletion is delayed on windows, testing for deletion is not going to work\n+            if (!OS.WINDOWS.isCurrentOs())\n+            {\n+                try (DirectoryStream<Path> paths = Files.newDirectoryStream(targetTestsDir, outputPrefix + \"*.*\"))\n+                {\n+                    assertFalse(paths.iterator().hasNext());\n+                }\n+            }\n+        }\n+        catch (TimeoutException e)\n+        {\n+            LOG.warn(\"Client Dump\");\n+            QueuedThreadPool qtp = (QueuedThreadPool)client.getExecutor();\n+            qtp.setDetailedDump(true);\n+            client.dumpStdErr();\n+            LOG.warn(\"Server Dump\");\n+            qtp = (QueuedThreadPool)server.getThreadPool();\n+            qtp.setDetailedDump(true);\n+            server.dumpStdErr();\n+            LOG.warn(\"Thread Dump\");\n+            System.err.println(generateThreadDump());\n+            throw e;\n         }\n+    }\n \n-        // File deletion is delayed on windows, testing for deletion is not going to work\n-        if (!OS.WINDOWS.isCurrentOs())\n+    public static String generateThreadDump()\n+    {\n+        final StringBuilder dump = new StringBuilder();\n+        final ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n+        final ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), 400);\n+        for (ThreadInfo threadInfo : threadInfos)\n         {\n-            try (DirectoryStream<Path> paths = Files.newDirectoryStream(targetTestsDir, outputPrefix + \"*.*\"))\n-            {\n-                assertFalse(paths.iterator().hasNext());\n+            dump.append('\"');\n+            dump.append(threadInfo.getThreadName());\n+            dump.append(\"\\\" \");\n+            final Thread.State state = threadInfo.getThreadState();\n+            dump.append(\"\\n   java.lang.Thread.State: \");\n+            dump.append(state);\n+            final StackTraceElement[] stackTraceElements = threadInfo.getStackTrace();\n+            for (final StackTraceElement stackTraceElement : stackTraceElements)\n+            {\n+                dump.append(\"\\n        at \");\n+                dump.append(stackTraceElement);\n             }\n+            dump.append(\"\\n\\n\");\n         }\n+        return dump.toString();\n     }\n \n     @Test\n+    @Tag(\"overflow\")", "originalCommit": "1ca7ec16bdd248f3d16dfd6ed49c77f047ca3607", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNDkxOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481234919", "bodyText": "Removed.", "author": "joakime", "createdAt": "2020-09-01T15:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NzMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NzkwNA==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481147904", "bodyText": "Was 5 * idleTimeout so it should be 15 * idleTimeout now.", "author": "sbordet", "createdAt": "2020-09-01T13:43:51Z", "path": "jetty-proxy/src/test/java/org/eclipse/jetty/proxy/AsyncMiddleManServletTest.java", "diffHunk": "@@ -1122,14 +1170,15 @@ public long getLength()\n                     return data.length + 1;\n                 }\n             })\n-            .timeout(5 * idleTimeout, TimeUnit.MILLISECONDS)\n+            .timeout(15, TimeUnit.SECONDS)", "originalCommit": "1ca7ec16bdd248f3d16dfd6ed49c77f047ca3607", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNTI0Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481235242", "bodyText": "Based on 15 * idleTimeout now", "author": "joakime", "createdAt": "2020-09-01T15:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NzkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0Nzk5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481147999", "bodyText": "Unused tag?", "author": "sbordet", "createdAt": "2020-09-01T13:44:01Z", "path": "jetty-proxy/src/test/java/org/eclipse/jetty/proxy/AsyncMiddleManServletTest.java", "diffHunk": "@@ -1122,14 +1170,15 @@ public long getLength()\n                     return data.length + 1;\n                 }\n             })\n-            .timeout(5 * idleTimeout, TimeUnit.MILLISECONDS)\n+            .timeout(15, TimeUnit.SECONDS)\n             .send();\n \n         assertTrue(destroyLatch.await(5 * idleTimeout, TimeUnit.MILLISECONDS));\n         assertEquals(HttpStatus.REQUEST_TIMEOUT_408, response.getStatus());\n     }\n \n     @Test\n+    @Tag(\"overflow\")", "originalCommit": "1ca7ec16bdd248f3d16dfd6ed49c77f047ca3607", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNTAxNw==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481235017", "bodyText": "Removed.", "author": "joakime", "createdAt": "2020-09-01T15:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0Nzk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjUxNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481246515", "bodyText": "No, I don't want to maintain this class publicly just for 1 test.\nNo generic usefulness because we had the same thing in jetty-monitor but was not used and we ditched the whole module.\nPlease remove it.", "author": "sbordet", "createdAt": "2020-09-01T15:50:49Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/RuntimeUtil.java", "diffHunk": "@@ -0,0 +1,121 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.lang.management.LockInfo;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MonitorInfo;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+\n+/**\n+ * Java Runtime specific utility methods.\n+ */\n+public final class RuntimeUtil", "originalCommit": "0eaf15445a0b882aaa931f3c433ed32da86034e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NTY1Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481465652", "bodyText": "Removed.", "author": "joakime", "createdAt": "2020-09-01T22:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0Njc1Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481246756", "bodyText": "See above, please remove it.", "author": "sbordet", "createdAt": "2020-09-01T15:51:12Z", "path": "jetty-util/src/test/java/org/eclipse/jetty/util/RuntimeUtilTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+\n+public class RuntimeUtilTest", "originalCommit": "0eaf15445a0b882aaa931f3c433ed32da86034e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2NTYyMg==", "url": "https://github.com/eclipse/jetty.project/pull/5216#discussion_r481465622", "bodyText": "Removed.", "author": "joakime", "createdAt": "2020-09-01T22:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0Njc1Ng=="}], "type": "inlineReview"}, {"oid": "acc6e3aac2537aa054c79512ca9e1d0a8f7be034", "url": "https://github.com/eclipse/jetty.project/commit/acc6e3aac2537aa054c79512ca9e1d0a8f7be034", "message": "Issue #3974 - Reworking AsyncMiddleManServletTest for test failures.\n\n+ be more detailed when unexpected exceptions occur\n+ dump client and server when timeout occurs\n+ increasing client timeout on overflow/disk test methods\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-09-01T22:21:48Z", "type": "commit"}, {"oid": "acc6e3aac2537aa054c79512ca9e1d0a8f7be034", "url": "https://github.com/eclipse/jetty.project/commit/acc6e3aac2537aa054c79512ca9e1d0a8f7be034", "message": "Issue #3974 - Reworking AsyncMiddleManServletTest for test failures.\n\n+ be more detailed when unexpected exceptions occur\n+ dump client and server when timeout occurs\n+ increasing client timeout on overflow/disk test methods\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-09-01T22:21:48Z", "type": "forcePushed"}]}