{"pr_number": 5222, "pr_title": "Fixes #3766 - Introduce HTTP/2 API to batch frames.", "pr_createdAt": "2020-09-01T16:02:13Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5222", "timeline": [{"oid": "97a8a156c4ea1fb843a0c84194d64589c6993637", "url": "https://github.com/eclipse/jetty.project/commit/97a8a156c4ea1fb843a0c84194d64589c6993637", "message": "Fixes #3766 - Introduce HTTP/2 API to batch frames.\n\nIntroduced Stream.FrameList to hold HEADERS+DATA+HEADERS frames.\nThese are often used by the client and by the server when the\nrequest/response content is known and FrameList will allow to\nsend them in a single TCP write, rather than multiple ones.\n\nRewritten HttpSenderOverHTTP2.sendHeaders() and\nHttpTransportOverHTTP2.sendHeaders() to take advantage of\nFrameList.\n\nNow using ConcurrentHashMap as a client context, because\nwith DEBUG logging enabled it may be access concurrently.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-09-01T16:01:09Z", "type": "commit"}, {"oid": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "url": "https://github.com/eclipse/jetty.project/commit/7822cc55cb093ed40acb8b1c92271eddd83308dc", "message": "Fixes #3766 - Introduce HTTP/2 API to batch frames.\n\nFixed HttpTransportOverHTTP2.sendHeaders() - HEADERS\nframe for trailers was missing the stream id.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-09-01T17:22:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4Njc3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481986772", "bodyText": "why  a class rather than just some utility methods to build List<StreamFrame> ?  They could equally check that all frames are the same streamId, but ultimately why check at creation when you must have to check when sent.  If a single DataFrame is sent with the wrong streamId, it is the same problem", "author": "gregw", "createdAt": "2020-09-02T11:08:08Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList", "originalCommit": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0NjkyNw==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482846927", "bodyText": "I find using a dedicated class more elegant as it is a clear API indicator that a method accepting a FrameList is won't modify the collection of StreamFrames. I'd just explicitly state in the javadoc of this class that immutable.", "author": "lorban", "createdAt": "2020-09-03T09:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4Njc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4NzE0OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481987149", "bodyText": "this is mutable.  Is it intended to be?", "author": "gregw", "createdAt": "2020-09-02T11:08:56Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList\n+    {\n+        private final List<StreamFrame> frames;\n+\n+        /**\n+         * <p>Creates a frame list of just the given HEADERS frame.</p>\n+         *\n+         * @param headers the HEADERS frame\n+         */\n+        public FrameList(HeadersFrame headers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = Collections.singletonList(headers);\n+        }\n+\n+        /**\n+         * <p>Creates a frame list of the given frames.</p>\n+         *\n+         * @param headers the HEADERS frame for the headers\n+         * @param data the DATA frame for the content, or null if there is no content\n+         * @param trailers the HEADERS frame for the trailers, or null if there are no trailers\n+         */\n+        public FrameList(HeadersFrame headers, DataFrame data, HeadersFrame trailers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = new ArrayList<>(3);\n+            int streamId = headers.getStreamId();\n+            if (data != null && data.getStreamId() != streamId)\n+                throw new IllegalArgumentException(\"Invalid stream ID for DATA frame \" + data);\n+            if (trailers != null && trailers.getStreamId() != streamId)\n+                throw new IllegalArgumentException(\"Invalid stream ID for HEADERS frame \" + trailers);\n+            this.frames.add(headers);\n+            if (data != null)\n+                this.frames.add(data);\n+            if (trailers != null)\n+                this.frames.add(trailers);\n+        }\n+\n+        /**\n+         * @return the stream ID of the frames in this list\n+         */\n+        public int getStreamId()\n+        {\n+            return frames.get(0).getStreamId();\n+        }\n+\n+        /**\n+         * @return a List of non-null frames\n+         */\n+        public List<StreamFrame> getFrames()\n+        {\n+            return frames;", "originalCommit": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5MDMyNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481990325", "bodyText": "javadoc please.\nMaybe make it an inner class of Frame?\nIs there a ConnectionFrame class to match?", "author": "gregw", "createdAt": "2020-09-02T11:15:19Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/frames/StreamFrame.java", "diffHunk": "@@ -0,0 +1,37 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.http2.frames;\n+\n+public abstract class StreamFrame extends Frame", "originalCommit": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk5NDk1Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r481994956", "bodyText": "what about sending request with no body?", "author": "gregw", "createdAt": "2020-09-02T11:24:03Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -51,10 +57,22 @@\n     Session getSession();\n \n     /**\n-     * <p>Sends the given HEADERS {@code frame} representing an HTTP response.</p>\n+     * <p>Sends the given list of frames.</p>\n+     * <p>Typically used to send an HTTP response along with content and possibly trailers.</p>\n+     *\n+     * @param frameList the list of frames to send\n+     * @param callback the callback that gets notified when the frames have been sent\n+     */\n+    void send(Stream.FrameList frameList, Callback callback);\n+\n+    /**\n+     * <p>Sends the given HEADERS {@code frame}.</p>\n+     * <p>Typically used to send an HTTP response with no content and no trailers,", "originalCommit": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MTc5Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482841793", "bodyText": "I would store a unmodifiableList in this.frames.", "author": "lorban", "createdAt": "2020-09-03T09:31:54Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList\n+    {\n+        private final List<StreamFrame> frames;\n+\n+        /**\n+         * <p>Creates a frame list of just the given HEADERS frame.</p>\n+         *\n+         * @param headers the HEADERS frame\n+         */\n+        public FrameList(HeadersFrame headers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = Collections.singletonList(headers);", "originalCommit": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0MTkwNg==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482841906", "bodyText": "I would store a unmodifiableList in this.frames.", "author": "lorban", "createdAt": "2020-09-03T09:32:06Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList\n+    {\n+        private final List<StreamFrame> frames;\n+\n+        /**\n+         * <p>Creates a frame list of just the given HEADERS frame.</p>\n+         *\n+         * @param headers the HEADERS frame\n+         */\n+        public FrameList(HeadersFrame headers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = Collections.singletonList(headers);\n+        }\n+\n+        /**\n+         * <p>Creates a frame list of the given frames.</p>\n+         *\n+         * @param headers the HEADERS frame for the headers\n+         * @param data the DATA frame for the content, or null if there is no content\n+         * @param trailers the HEADERS frame for the trailers, or null if there are no trailers\n+         */\n+        public FrameList(HeadersFrame headers, DataFrame data, HeadersFrame trailers)\n+        {\n+            Objects.requireNonNull(headers);\n+            this.frames = new ArrayList<>(3);", "originalCommit": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg0NTI2Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5222#discussion_r482845263", "bodyText": "The public static modifiers are not needed.", "author": "lorban", "createdAt": "2020-09-03T09:36:56Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/api/Stream.java", "diffHunk": "@@ -298,4 +316,62 @@ public boolean onIdleTimeout(Stream stream, Throwable x)\n             }\n         }\n     }\n+\n+    /**\n+     * <p>An ordered list of frames belonging to the same stream.</p>\n+     */\n+    public static class FrameList", "originalCommit": "7822cc55cb093ed40acb8b1c92271eddd83308dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fc6344fb3b78eeec1b0174a000580af921bd623e", "url": "https://github.com/eclipse/jetty.project/commit/fc6344fb3b78eeec1b0174a000580af921bd623e", "message": "Fixes #3766 - Introduce HTTP/2 API to batch frames.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-09-09T15:20:52Z", "type": "commit"}]}