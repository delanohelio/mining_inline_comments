{"pr_number": 5295, "pr_title": "Issue #5287 - rework CompressionPool to use the jetty-util pool", "pr_createdAt": "2020-09-18T01:48:08Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5295", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTIzOA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490785238", "bodyText": "I think this will make a very large array list if capacity is MAX_VALUE?!?!?!?\nI think by default we want to pool to be 1024 or similar", "author": "gregw", "createdAt": "2020-09-18T08:25:43Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }\n         }\n \n-        return object;\n+        return (entry == null) ? new Entry(newObject()) : entry;\n     }\n \n     /**\n-     * @param object returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n+     * @param entry returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n      */\n-    public void release(T object)\n+    public void release(Entry entry)\n     {\n-        if (object == null)\n-            return;\n+        entry.release();\n+    }\n \n-        if (_capacity == 0 || !isRunning())\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        if (_capacity > 0)\n+            _pool = new Pool<>(Pool.StrategyType.RANDOM, _capacity, true);", "originalCommit": "01fbd2daed651383abf866f6879f4ca6b3869295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTg1Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490785853", "bodyText": "INFINITE_CAPACITY is probably not an option and should be renamed to DEFAULT_CAPACITY or similar", "author": "gregw", "createdAt": "2020-09-18T08:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzc2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490813767", "bodyText": "I assume that the pool wouldn't pre-allocate the max capacity. But I'm fine with changing it to DEFAULT_CAPACITY=1024.", "author": "lachlan-roberts", "createdAt": "2020-09-18T09:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODAwNA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490788004", "bodyText": "It is confusing to have your Entry called Entry.... but eitherway, don't set the entry on the entry, instead pass it into the constructor and make it final:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n          \n          \n            \n                        if (acquiredEntry != null)\n          \n          \n            \n                        {\n          \n          \n            \n                            entry = acquiredEntry.getPooled();\n          \n          \n            \n                            entry.setEntry(acquiredEntry);\n          \n          \n            \n                        }\n          \n          \n            \n                        Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject(), e));\n          \n          \n            \n                        if (acquiredEntry == null)\n          \n          \n            \n                            return new Entry(newObject(), null);\n          \n          \n            \n                        return acquiredEntry.getPooled();", "author": "gregw", "createdAt": "2020-09-18T08:30:36Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }", "originalCommit": "01fbd2daed651383abf866f6879f4ca6b3869295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODg5NA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490788894", "bodyText": "can we rename newObject to newCompressor", "author": "gregw", "createdAt": "2020-09-18T08:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzc5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490813799", "bodyText": "Its not really newCompressor, an inflater is the opposite of a compressor.\nBut this is only internal implementation methods, they should not be available publicly.", "author": "lachlan-roberts", "createdAt": "2020-09-18T09:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNjM5OA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490816398", "bodyText": "newPooled ?", "author": "gregw", "createdAt": "2020-09-18T09:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4ODAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4OTQwMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490789401", "bodyText": "make value and entry final", "author": "gregw", "createdAt": "2020-09-18T08:32:53Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java", "diffHunk": "@@ -56,73 +65,102 @@ public CompressionPool(int capacity)\n     /**\n      * @return Object taken from the pool if it is not empty or a newly created Object\n      */\n-    public T acquire()\n+    public Entry acquire()\n     {\n-        T object;\n-\n-        if (_capacity == 0)\n-            object = newObject();\n-        else\n+        Entry entry = null;\n+        if (_pool != null)\n         {\n-            object = _pool.poll();\n-            if (object == null)\n-                object = newObject();\n-            else if (_capacity > 0)\n-                _numObjects.decrementAndGet();\n+            Pool<Entry>.Entry acquiredEntry = _pool.acquire(e -> new Entry(newObject()));\n+            if (acquiredEntry != null)\n+            {\n+                entry = acquiredEntry.getPooled();\n+                entry.setEntry(acquiredEntry);\n+            }\n         }\n \n-        return object;\n+        return (entry == null) ? new Entry(newObject()) : entry;\n     }\n \n     /**\n-     * @param object returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n+     * @param entry returns this Object to the pool or calls {@link #end(Object)} if the pool is full.\n      */\n-    public void release(T object)\n+    public void release(Entry entry)\n     {\n-        if (object == null)\n-            return;\n+        entry.release();\n+    }\n \n-        if (_capacity == 0 || !isRunning())\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        if (_capacity > 0)\n+            _pool = new Pool<>(Pool.StrategyType.RANDOM, _capacity, true);\n+        super.doStart();\n+    }\n+\n+    @Override\n+    public void doStop() throws Exception\n+    {\n+        _pool.close();\n+        _pool = null;\n+        super.doStop();\n+    }\n+\n+    public class Entry implements Closeable\n+    {\n+        private T _value;\n+        private Pool<Entry>.Entry _entry;", "originalCommit": "01fbd2daed651383abf866f6879f4ca6b3869295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNDA1OA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490814058", "bodyText": "Shouldn't this be non-final so we can null it out when closed.", "author": "lachlan-roberts", "createdAt": "2020-09-18T09:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4OTQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNjE4OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490816189", "bodyText": "No need to null out, the whole instance will be discarded soon after close.\nThe close impls should be robust with multiple closes ... actually it probably NPEs currently, so final is better anyway.", "author": "gregw", "createdAt": "2020-09-18T09:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4OTQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDE1OA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490790158", "bodyText": "deflaterHolder?\npooledDeflater?", "author": "gregw", "createdAt": "2020-09-18T08:34:18Z", "path": "jetty-websocket/websocket-core-common/src/main/java/org/eclipse/jetty/websocket/core/internal/PerMessageDeflateExtension.java", "diffHunk": "@@ -178,28 +180,28 @@ public static boolean endsWithTail(ByteBuffer buf)\n \n     public Deflater getDeflater()\n     {\n-        if (deflaterImpl == null)\n-            deflaterImpl = getDeflaterPool().acquire();\n-        return deflaterImpl;\n+        if (deflaterEntry == null)", "originalCommit": "01fbd2daed651383abf866f6879f4ca6b3869295", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r490790653", "bodyText": "... and the answer to the 'how fast/slow' question is???", "author": "gregw", "createdAt": "2020-09-18T08:35:13Z", "path": "tests/jetty-jmh/src/main/java/org/eclipse/jetty/server/jmh/DeflaterPoolBenchmark.java", "diffHunk": "@@ -92,13 +92,14 @@ public static void stopTrial() throws Exception\n     @SuppressWarnings(\"deprecation\")\n     public long testPool() throws Exception\n     {\n-        Deflater deflater = _pool.acquire();\n+        DeflaterPool.Entry entry = _pool.acquire();", "originalCommit": "01fbd2daed651383abf866f6879f4ca6b3869295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MDA1Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r493260053", "bodyText": "In this benchmark new pool is performing about 50% slower compared to before the changes, I am trying to figure out why.", "author": "lachlan-roberts", "createdAt": "2020-09-23T07:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI2MDM4MA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r493260380", "bodyText": "Benchmark (Old Implementation)                                         (poolType)   Mode  Cnt       Score        Error   Units\nDeflaterPoolBenchmark.testPool                                            NO_POOL  thrpt   10  132272.104 \u00b1  70177.178   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                             NO_POOL  thrpt   10      14.751 \u00b1      0.742  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm                        NO_POOL  thrpt   10     200.392 \u00b1      0.195    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space                    NO_POOL  thrpt   10      18.813 \u00b1     60.160  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm               NO_POOL  thrpt   10     267.667 \u00b1    859.382    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                                  NO_POOL  thrpt   10       2.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                                   NO_POOL  thrpt   10       2.000                   ms\nDeflaterPoolBenchmark.testPool                                   DEFLATER_POOL_10  thrpt   10  239372.722 \u00b1  76227.954   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_10  thrpt   10      20.725 \u00b1      1.682  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_10  thrpt   10     125.168 \u00b1      7.707    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_10  thrpt   10      25.633 \u00b1     63.035  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_10  thrpt   10     154.377 \u00b1    381.899    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                         DEFLATER_POOL_10  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                          DEFLATER_POOL_10  thrpt   10       7.000                   ms\nDeflaterPoolBenchmark.testPool                                   DEFLATER_POOL_20  thrpt   10  419346.829 \u00b1 183133.367   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_20  thrpt   10      25.289 \u00b1      2.318  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_20  thrpt   10     107.170 \u00b1      6.393    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_20  thrpt   10      33.894 \u00b1     66.218  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_20  thrpt   10     132.195 \u00b1    259.559    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                         DEFLATER_POOL_20  thrpt   10       4.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                          DEFLATER_POOL_20  thrpt   10       6.000                   ms\nDeflaterPoolBenchmark.testPool                                   DEFLATER_POOL_50  thrpt   10  591581.732 \u00b1 114335.926   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_50  thrpt   10      31.112 \u00b1      6.459  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_50  thrpt   10      89.393 \u00b1      1.233    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_50  thrpt   10      37.886 \u00b1     74.219  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_50  thrpt   10     104.904 \u00b1    206.682    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Survivor_Space       DEFLATER_POOL_50  thrpt   10       0.001 \u00b1      0.005  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Survivor_Space.norm  DEFLATER_POOL_50  thrpt   10       0.003 \u00b1      0.016    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                         DEFLATER_POOL_50  thrpt   10       4.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                          DEFLATER_POOL_50  thrpt   10       6.000                   ms\n\n\nBenchmark (New Implementation)                                        (poolType)   Mode  Cnt       Score        Error   Units\nDeflaterPoolBenchmark.testPool                                            NO_POOL  thrpt   10    5247.848 \u00b1   1251.467   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                             NO_POOL  thrpt   10       0.865 \u00b1      0.136  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm                        NO_POOL  thrpt   10     206.481 \u00b1      3.216    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space                    NO_POOL  thrpt   10       1.667 \u00b1      7.969  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm               NO_POOL  thrpt   10     466.904 \u00b1   2232.227    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                                  NO_POOL  thrpt   10       1.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                                   NO_POOL  thrpt   10      57.000                   ms\nDeflaterPoolBenchmark.testPool                                   DEFLATER_POOL_10  thrpt   10   92061.829 \u00b1  65986.254   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_10  thrpt   10       9.736 \u00b1     19.304  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_10  thrpt   10     174.152 \u00b1    367.960    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_10  thrpt   10      13.174 \u00b1     42.006  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_10  thrpt   10     247.383 \u00b1    788.571    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Survivor_Space       DEFLATER_POOL_10  thrpt   10       0.119 \u00b1      0.570  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Survivor_Space.norm  DEFLATER_POOL_10  thrpt   10       2.262 \u00b1     10.814    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                         DEFLATER_POOL_10  thrpt   10       2.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                          DEFLATER_POOL_10  thrpt   10      50.000                   ms\nDeflaterPoolBenchmark.testPool                                   DEFLATER_POOL_20  thrpt   10  183197.471 \u00b1 237236.784   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_20  thrpt   10       5.404 \u00b1      1.575  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_20  thrpt   10      74.410 \u00b1      3.782    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_20  thrpt   10       7.991 \u00b1     38.203  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_20  thrpt   10     113.470 \u00b1    542.492    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                         DEFLATER_POOL_20  thrpt   10       1.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                          DEFLATER_POOL_20  thrpt   10      33.000                   ms\nDeflaterPoolBenchmark.testPool                                   DEFLATER_POOL_50  thrpt   10  312313.037 \u00b1 281479.025   ops/s\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_50  thrpt   10      12.045 \u00b1      3.563  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_50  thrpt   10      68.236 \u00b1      1.375    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_50  thrpt   10      15.183 \u00b1     48.426  MB/sec\nDeflaterPoolBenchmark.testPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_50  thrpt   10      92.631 \u00b1    295.256    B/op\nDeflaterPoolBenchmark.testPool:\u00b7gc.count                         DEFLATER_POOL_50  thrpt   10       2.000               counts\nDeflaterPoolBenchmark.testPool:\u00b7gc.time                          DEFLATER_POOL_50  thrpt   10      32.000                   ms", "author": "lachlan-roberts", "createdAt": "2020-09-23T07:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxMTYwNw==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r493911607", "bodyText": "Try Thread ID mode for the pool.\nHow many threads are you using in the benchmark?\nI also wonder if the threadlocal cache is worth it in this case??", "author": "gregw", "createdAt": "2020-09-23T21:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAxMDc0Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r495010743", "bodyText": "It seems that if the capacity of the pool is lower than the number of threads using it then the old pool is faster, but if the capacity of the pool is larger than the number of deflaters needed then the new pool can be around 20% faster.\nThese results had 100 threads contending on the pool, but only tested pool sizes of 0,10,20,50 which are all below the number of deflaters needed. It is still quite a large performance reduction if the pool is reaching capacity.", "author": "lachlan-roberts", "createdAt": "2020-09-25T14:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0NTE3OA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r495045178", "bodyText": "@lachlan-roberts Why are the NO_POOL results so different?  Surely with no pool the results should be about the same?  Also the B/ops for NO_POOL are a long way apart, when they should be dominated by the size of the inflater/deflater\nWhen running the benchmark with the old pool in unlimited mode, how many inflaters/deflaters are actually created? Close to the number of threads?\nNote that to be fair, I think the benchmark test should always consume some CPU without an inflater/deflater held, then acquire one, then consume some more CPU before releasing.", "author": "gregw", "createdAt": "2020-09-25T14:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM2Nzk0OA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r495367948", "bodyText": "Why are the NO_POOL results so different?\n\nThe NO_POOL results are from a bug were we didn't end the deflater if it wasn't pooled. I fixed it  in 5861709, and now the results are showing pretty equal values for both on the NO_POOL setting.\n\nWhen running the benchmark with the old pool in unlimited mode, how many inflaters/deflaters are actually created? Close to the number of threads?\n\nIn both cases exactly 100 deflaters are created, same as the number of threads.", "author": "lachlan-roberts", "createdAt": "2020-09-26T01:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2NDkxOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r495464919", "bodyText": "Can you give latest benchmark results with the NO_POOL bug fixed.  Also with scaling to size of the pool == # of threads.\nIf previously we defaulted to unlimited pool and it always grew to the number of threads, then I think initializing the compressions pools capacity using the threadpool size is not a bad thing to do.", "author": "gregw", "createdAt": "2020-09-26T15:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0Mjc4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r495642782", "bodyText": "Benchmark (New Implementation)                                                     (poolType)   Mode  Cnt       Score        Error   Units\nDeflaterPoolBenchmark.testNewPool                                                     NO_POOL  thrpt   10  115818.366 \u00b1  69230.105   ops/s\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate                                      NO_POOL  thrpt   10      12.458 \u00b1      2.487  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate.norm                                 NO_POOL  thrpt   10     200.510 \u00b1      0.440    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space                             NO_POOL  thrpt   10       9.142 \u00b1     43.707  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space.norm                        NO_POOL  thrpt   10     150.607 \u00b1    720.040    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.count                                           NO_POOL  thrpt   10       1.000               counts\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.time                                            NO_POOL  thrpt   10       4.000                   ms\nDeflaterPoolBenchmark.testNewPool                                            DEFLATER_POOL_10  thrpt   10  159444.955 \u00b1  27752.686   ops/s\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate                             DEFLATER_POOL_10  thrpt   10      16.310 \u00b1      3.020  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate.norm                        DEFLATER_POOL_10  thrpt   10     142.825 \u00b1     10.737    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space                    DEFLATER_POOL_10  thrpt   10      22.320 \u00b1     56.242  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space.norm               DEFLATER_POOL_10  thrpt   10     216.805 \u00b1    531.429    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.count                                  DEFLATER_POOL_10  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.time                                   DEFLATER_POOL_10  thrpt   10       4.000                   ms\nDeflaterPoolBenchmark.testNewPool                                            DEFLATER_POOL_20  thrpt   10  236983.110 \u00b1  79024.092   ops/s\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate                             DEFLATER_POOL_20  thrpt   10      17.561 \u00b1      3.229  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate.norm                        DEFLATER_POOL_20  thrpt   10     118.167 \u00b1     10.821    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space                    DEFLATER_POOL_20  thrpt   10      17.427 \u00b1     55.552  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space.norm               DEFLATER_POOL_20  thrpt   10     119.816 \u00b1    381.923    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.count                                  DEFLATER_POOL_20  thrpt   10       2.000               counts\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.time                                   DEFLATER_POOL_20  thrpt   10       5.000                   ms\nDeflaterPoolBenchmark.testNewPool                                            DEFLATER_POOL_50  thrpt   10  386939.698 \u00b1  81445.930   ops/s\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate                             DEFLATER_POOL_50  thrpt   10      20.591 \u00b1      3.800  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate.norm                        DEFLATER_POOL_50  thrpt   10      85.150 \u00b1      3.677    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space                    DEFLATER_POOL_50  thrpt   10      26.638 \u00b1     64.892  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space.norm               DEFLATER_POOL_50  thrpt   10     108.538 \u00b1    265.409    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.count                                  DEFLATER_POOL_50  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.time                                   DEFLATER_POOL_50  thrpt   10       7.000                   ms\nDeflaterPoolBenchmark.testNewPool                                   DEFLATER_POOL_NUM_THREADS  thrpt   10  612596.657 \u00b1  68120.977   ops/s\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_NUM_THREADS  thrpt   10      25.557 \u00b1      5.133  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_NUM_THREADS  thrpt   10      64.099 \u00b1      0.103    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_NUM_THREADS  thrpt   10      28.000 \u00b1     68.162  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_NUM_THREADS  thrpt   10      68.634 \u00b1    167.115    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.count                         DEFLATER_POOL_NUM_THREADS  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.time                          DEFLATER_POOL_NUM_THREADS  thrpt   10       5.000                   ms\nDeflaterPoolBenchmark.testNewPool                                       DEFLATER_POOL_DEFAULT  thrpt   10  621950.213 \u00b1  29432.365   ops/s\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate                        DEFLATER_POOL_DEFAULT  thrpt   10      25.693 \u00b1      4.930  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.alloc.rate.norm                   DEFLATER_POOL_DEFAULT  thrpt   10      64.097 \u00b1      0.098    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space               DEFLATER_POOL_DEFAULT  thrpt   10      27.766 \u00b1     67.688  MB/sec\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.churn.G1_Eden_Space.norm          DEFLATER_POOL_DEFAULT  thrpt   10      66.178 \u00b1    161.544    B/op\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.count                             DEFLATER_POOL_DEFAULT  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testNewPool:\u00b7gc.time                              DEFLATER_POOL_DEFAULT  thrpt   10       5.000                   ms\n\n\nBenchmark (Old Implementation)                                                     (poolType)   Mode  Cnt       Score        Error   Units\nDeflaterPoolBenchmark.testOldPool                                                     NO_POOL  thrpt   10  128709.448 \u00b1  44535.107   ops/s\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate                                      NO_POOL  thrpt   10      13.929 \u00b1      2.576  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate.norm                                 NO_POOL  thrpt   10     200.435 \u00b1      0.378    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space                             NO_POOL  thrpt   10       7.849 \u00b1     37.525  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space.norm                        NO_POOL  thrpt   10     108.813 \u00b1    520.226    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.count                                           NO_POOL  thrpt   10       1.000               counts\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.time                                            NO_POOL  thrpt   10       2.000                   ms\nDeflaterPoolBenchmark.testOldPool                                            DEFLATER_POOL_10  thrpt   10  267759.422 \u00b1 120516.326   ops/s\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate                             DEFLATER_POOL_10  thrpt   10      19.599 \u00b1      3.774  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate.norm                        DEFLATER_POOL_10  thrpt   10     125.553 \u00b1      6.286    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space                    DEFLATER_POOL_10  thrpt   10      22.134 \u00b1     55.318  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space.norm               DEFLATER_POOL_10  thrpt   10     152.248 \u00b1    371.073    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.count                                  DEFLATER_POOL_10  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.time                                   DEFLATER_POOL_10  thrpt   10       9.000                   ms\nDeflaterPoolBenchmark.testOldPool                                            DEFLATER_POOL_20  thrpt   10  324418.348 \u00b1  65355.235   ops/s\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate                             DEFLATER_POOL_20  thrpt   10      22.665 \u00b1      3.131  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate.norm                        DEFLATER_POOL_20  thrpt   10     108.269 \u00b1      6.573    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space                    DEFLATER_POOL_20  thrpt   10      22.584 \u00b1     57.177  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space.norm               DEFLATER_POOL_20  thrpt   10     107.425 \u00b1    264.003    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.count                                  DEFLATER_POOL_20  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.time                                   DEFLATER_POOL_20  thrpt   10       4.000                   ms\nDeflaterPoolBenchmark.testOldPool                                            DEFLATER_POOL_50  thrpt   10  497624.910 \u00b1  50606.113   ops/s\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate                             DEFLATER_POOL_50  thrpt   10      28.294 \u00b1      5.274  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate.norm                        DEFLATER_POOL_50  thrpt   10      89.701 \u00b1      1.276    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space                    DEFLATER_POOL_50  thrpt   10      28.074 \u00b1     68.346  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space.norm               DEFLATER_POOL_50  thrpt   10      87.301 \u00b1    213.483    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Survivor_Space                DEFLATER_POOL_50  thrpt   10      \u2248 10\u207b\u2074               MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Survivor_Space.norm           DEFLATER_POOL_50  thrpt   10      \u2248 10\u207b\u2074                 B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.count                                  DEFLATER_POOL_50  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.time                                   DEFLATER_POOL_50  thrpt   10       9.000                   ms\nDeflaterPoolBenchmark.testOldPool                                   DEFLATER_POOL_NUM_THREADS  thrpt   10  506060.457 \u00b1  96406.859   ops/s\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate                    DEFLATER_POOL_NUM_THREADS  thrpt   10      24.780 \u00b1      4.503  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate.norm               DEFLATER_POOL_NUM_THREADS  thrpt   10      88.128 \u00b1      0.091    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space           DEFLATER_POOL_NUM_THREADS  thrpt   10      27.832 \u00b1     67.884  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space.norm      DEFLATER_POOL_NUM_THREADS  thrpt   10      98.382 \u00b1    241.545    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.count                         DEFLATER_POOL_NUM_THREADS  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.time                          DEFLATER_POOL_NUM_THREADS  thrpt   10       4.000                   ms\nDeflaterPoolBenchmark.testOldPool                                       DEFLATER_POOL_DEFAULT  thrpt   10  496070.033 \u00b1  72193.902   ops/s\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate                        DEFLATER_POOL_DEFAULT  thrpt   10      25.327 \u00b1      5.885  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.alloc.rate.norm                   DEFLATER_POOL_DEFAULT  thrpt   10      88.131 \u00b1      0.115    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space               DEFLATER_POOL_DEFAULT  thrpt   10      28.035 \u00b1     68.337  MB/sec\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.churn.G1_Eden_Space.norm          DEFLATER_POOL_DEFAULT  thrpt   10      94.490 \u00b1    230.555    B/op\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.count                             DEFLATER_POOL_DEFAULT  thrpt   10       3.000               counts\nDeflaterPoolBenchmark.testOldPool:\u00b7gc.time                              DEFLATER_POOL_DEFAULT  thrpt   10       5.000                   ms", "author": "lachlan-roberts", "createdAt": "2020-09-28T00:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4MTY5NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r495881695", "bodyText": "@lachlan-roberts So given those results, what is your recommendation?\nHave you tried the thread_id mode for the pool?\n@lorban any comments?", "author": "gregw", "createdAt": "2020-09-28T11:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MDMyNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r496060325", "bodyText": "@gregw I did try the thread_id mode earlier and it seemed to decrease performance further.\nAnd I can't seem to get results which are that different using the Blackhole.consumeCPU(), if I keep increasing the values the difference between the two pools is reduced but that is expected.", "author": "lachlan-roberts", "createdAt": "2020-09-28T15:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MzA1OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r496093059", "bodyText": "On my machine, the old implementation tops up at ~1M tps with ~60% cpu utilization while the new one reaches ~2M with ~99% cpu utilization, so I suspect a benchmarking problem.\nMy theory is that @lachlan-roberts' machine is spending so much time running the Deflater that most of the time all the entries of the pool are found busy in the new implementation, while there's enough contention on the pool itself in the old implementation that deflaters are given more time to finish their job and to be back to the pool. And since creating a new Deflater involves creating a Phantom Ref (which means contending on a single lock) this may explain this. I'd need to investigate on his machine, or get some JFR reports to assert this.\nSince the pool is returning an unpooled Deflater when it can't find a pooled one, it would be very useful to make the benchmark report how often this happens since this is an expensive operation. Counting that with a java.util.concurrent.atomic.LongAdder and exposing the counter via the CompressionPool could shed some light on this unexpected behavior.", "author": "lorban", "createdAt": "2020-09-28T16:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5MDY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5OTU4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r503199582", "bodyText": "Probably just\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static DeflaterPool ensurePool(ContainerLifeCycle containerLifeCycle)\n          \n          \n            \n                public static DeflaterPool ensurePool(Container container)", "author": "gregw", "createdAt": "2020-10-12T10:31:03Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/DeflaterPool.java", "diffHunk": "@@ -60,4 +63,20 @@ protected void reset(Deflater deflater)\n     {\n         deflater.reset();\n     }\n+\n+    public static DeflaterPool ensurePool(ContainerLifeCycle containerLifeCycle)", "originalCommit": "8325608727304925423d0413668f0d986d889831", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIwMDA0NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r503200045", "bodyText": "ditto", "author": "gregw", "createdAt": "2020-10-12T10:31:56Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/InflaterPool.java", "diffHunk": "@@ -57,4 +60,20 @@ protected void reset(Inflater inflater)\n     {\n         inflater.reset();\n     }\n+\n+    public static InflaterPool ensurePool(ContainerLifeCycle containerLifeCycle)", "originalCommit": "8325608727304925423d0413668f0d986d889831", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIwMDkyOA==", "url": "https://github.com/eclipse/jetty.project/pull/5295#discussion_r503200928", "bodyText": "IT may be good to have an override mechanism, so you can pass in a non shared pool if you want an only iff null do you use the ensure pool methods", "author": "gregw", "createdAt": "2020-10-12T10:33:37Z", "path": "jetty-websocket/websocket-core-server/src/main/java/org/eclipse/jetty/websocket/core/server/WebSocketServerComponents.java", "diffHunk": "@@ -21,31 +21,50 @@\n import javax.servlet.ServletContext;\n \n import org.eclipse.jetty.io.ByteBufferPool;\n+import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.DecoratedObjectFactory;\n+import org.eclipse.jetty.util.compression.DeflaterPool;\n+import org.eclipse.jetty.util.compression.InflaterPool;\n import org.eclipse.jetty.websocket.core.WebSocketComponents;\n import org.eclipse.jetty.websocket.core.WebSocketExtensionRegistry;\n \n /**\n  * A collection of components which are the resources needed for websockets such as\n  * {@link ByteBufferPool}, {@link WebSocketExtensionRegistry}, and {@link DecoratedObjectFactory}.\n  *\n- * These components should be accessed through {@link WebSocketServerComponents#ensureWebSocketComponents} so that\n+ * These components should be accessed through {@link WebSocketServerComponents#getWebSocketComponents} so that\n  * the instance can be shared by being stored as a bean on the ContextHandler.\n  */\n public class WebSocketServerComponents extends WebSocketComponents\n {\n     public static final String WEBSOCKET_COMPONENTS_ATTRIBUTE = WebSocketComponents.class.getName();\n \n-    public static WebSocketComponents ensureWebSocketComponents(ServletContext servletContext)\n+    WebSocketServerComponents(InflaterPool inflaterPool, DeflaterPool deflaterPool)\n     {\n-        // Ensure a mapping exists\n-        WebSocketComponents components = (WebSocketComponents)servletContext.getAttribute(WEBSOCKET_COMPONENTS_ATTRIBUTE);\n+        super(null, null, null, inflaterPool, deflaterPool);\n+    }\n+\n+    public static WebSocketComponents ensureWebSocketComponents(Server server, ServletContext servletContext)\n+    {\n+        WebSocketComponents components = server.getBean(WebSocketComponents.class);\n         if (components == null)\n         {\n-            components = new WebSocketServerComponents();\n-            servletContext.setAttribute(WEBSOCKET_COMPONENTS_ATTRIBUTE, components);\n+            InflaterPool inflaterPool = InflaterPool.ensurePool(server);", "originalCommit": "8325608727304925423d0413668f0d986d889831", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b239fa07c607dde42bec2a80566dd68822058a40", "url": "https://github.com/eclipse/jetty.project/commit/b239fa07c607dde42bec2a80566dd68822058a40", "message": "Issue #5287 - rework CompressionPool to use the jetty-util pool\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "21576f2312a0a4e16f79841160ec3b635e4f9c8a", "url": "https://github.com/eclipse/jetty.project/commit/21576f2312a0a4e16f79841160ec3b635e4f9c8a", "message": "Issue #5287 - fix usages of new CompressionPool\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "d241c6694be97614f040ec9d0f8c8b34b0247d23", "url": "https://github.com/eclipse/jetty.project/commit/d241c6694be97614f040ec9d0f8c8b34b0247d23", "message": "Issue #5287 - Pool the entries instead of just the Deflater/Inflaters\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "5dc024298672b227c720961440c2b1787535714f", "url": "https://github.com/eclipse/jetty.project/commit/5dc024298672b227c720961440c2b1787535714f", "message": "Issue #5287 - Changes from review & fix broken tests from NPE\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "dd06008ff4f10c7ed82abebcc1232193294499c3", "url": "https://github.com/eclipse/jetty.project/commit/dd06008ff4f10c7ed82abebcc1232193294499c3", "message": "Issue #5287 - remove IllegalArgumentException from CompressionPool Entry\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "ef816fcc4266201f17036713be3862801e8b570b", "url": "https://github.com/eclipse/jetty.project/commit/ef816fcc4266201f17036713be3862801e8b570b", "message": "DeflaterPoolBenchmark should manage lifecycle of the CompressionPool\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "608a895aab4ad9d66ec18ff4bd1c746e81ff372b", "url": "https://github.com/eclipse/jetty.project/commit/608a895aab4ad9d66ec18ff4bd1c746e81ff372b", "message": "Issue #5287 - make default CompressionPool capacity 1024\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "7cac3d76bbe974cd3aa2f06fa03b7a11ffbb0377", "url": "https://github.com/eclipse/jetty.project/commit/7cac3d76bbe974cd3aa2f06fa03b7a11ffbb0377", "message": "Issue #5287 - close deflater on release if non-pooled entry\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "0e3cfe8fc22e8083f04449a2bb85246490fb47e0", "url": "https://github.com/eclipse/jetty.project/commit/0e3cfe8fc22e8083f04449a2bb85246490fb47e0", "message": "Issue #5287 - share compression pools and size with max num threads\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "4690aa51ba498454b0e27529c252f2b7cc017b3a", "url": "https://github.com/eclipse/jetty.project/commit/4690aa51ba498454b0e27529c252f2b7cc017b3a", "message": "allow override of shared CompressionPools in WebSocketServerComponents\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "commit"}, {"oid": "4690aa51ba498454b0e27529c252f2b7cc017b3a", "url": "https://github.com/eclipse/jetty.project/commit/4690aa51ba498454b0e27529c252f2b7cc017b3a", "message": "allow override of shared CompressionPools in WebSocketServerComponents\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-14T11:28:26Z", "type": "forcePushed"}]}