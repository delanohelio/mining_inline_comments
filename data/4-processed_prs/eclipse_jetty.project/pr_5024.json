{"pr_number": 5024, "pr_title": "Issue #5018 - add request timeout onto websocket ClientUpgradeRequest", "pr_createdAt": "2020-07-04T02:23:18Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5024", "timeline": [{"oid": "6a8a6efd1cfc591a224cc053c547695c5fb27172", "url": "https://github.com/eclipse/jetty.project/commit/6a8a6efd1cfc591a224cc053c547695c5fb27172", "message": "Issue #5018 - add request timeout onto ClientUpgradeRequest\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-04T01:37:45Z", "type": "commit"}, {"oid": "fbe3803cd1da19f2de0be0bf58a08fe3ebe1973b", "url": "https://github.com/eclipse/jetty.project/commit/fbe3803cd1da19f2de0be0bf58a08fe3ebe1973b", "message": "fix checkstyle issue\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-06T02:19:38Z", "type": "commit"}, {"oid": "74916c2fc946d6b83c8ce6f1a6ed591218ac7fa2", "url": "https://github.com/eclipse/jetty.project/commit/74916c2fc946d6b83c8ce6f1a6ed591218ac7fa2", "message": "Issue #5018 - add test case for ClientUpgradeRequest timeout\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-07T06:38:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2Njc2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5024#discussion_r450766760", "bodyText": "Use 2 * timeout to wait - if all good we are still waiting just timeout, but at least we won't have unexpected failures when 200 ms is too short of a margin.", "author": "sbordet", "createdAt": "2020-07-07T10:31:23Z", "path": "jetty-websocket/jetty-websocket-tests/src/test/java/org/eclipse/jetty/websocket/tests/client/ClientTimeoutTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.tests.client;\n+\n+import java.util.EnumSet;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.servlet.DispatcherType;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.UpgradeException;\n+import org.eclipse.jetty.websocket.api.util.WSURI;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.eclipse.jetty.websocket.server.NativeWebSocketServletContainerInitializer;\n+import org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter;\n+import org.eclipse.jetty.websocket.tests.EventSocket;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ClientTimeoutTest\n+{\n+    private Server server;\n+    private WebSocketClient client;\n+    private final CountDownLatch createEndpoint = new CountDownLatch(1);\n+\n+    @BeforeEach\n+    public void start() throws Exception\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        ServletContextHandler contextHandler = new ServletContextHandler();\n+        contextHandler.setContextPath(\"/\");\n+        server.setHandler(contextHandler);\n+\n+        NativeWebSocketServletContainerInitializer.configure(contextHandler, (context, container) ->\n+        {\n+            container.addMapping(\"/\", (req, res) ->\n+            {\n+                try\n+                {\n+                    createEndpoint.await(5, TimeUnit.SECONDS);\n+                    return new EventSocket.EchoSocket();\n+                }\n+                catch (InterruptedException e)\n+                {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+        });\n+        contextHandler.addFilter(WebSocketUpgradeFilter.class, \"/\", EnumSet.of(DispatcherType.REQUEST));\n+        server.start();\n+\n+        client = new WebSocketClient();\n+        client.start();\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        createEndpoint.countDown();\n+        client.stop();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testWebSocketClientTimeout() throws Exception\n+    {\n+        EventSocket clientSocket = new EventSocket();\n+        long timeout = 1000;\n+        client.setMaxIdleTimeout(timeout);\n+        Future<Session> connect = client.connect(clientSocket, WSURI.toWebsocket(server.getURI()));\n+\n+        ExecutionException executionException = assertThrows(ExecutionException.class, () -> connect.get(timeout + 200, TimeUnit.MILLISECONDS));", "originalCommit": "74916c2fc946d6b83c8ce6f1a6ed591218ac7fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2NjgyNg==", "url": "https://github.com/eclipse/jetty.project/pull/5024#discussion_r450766826", "bodyText": "Ditto.", "author": "sbordet", "createdAt": "2020-07-07T10:31:31Z", "path": "jetty-websocket/jetty-websocket-tests/src/test/java/org/eclipse/jetty/websocket/tests/client/ClientTimeoutTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.tests.client;\n+\n+import java.util.EnumSet;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.servlet.DispatcherType;\n+\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.UpgradeException;\n+import org.eclipse.jetty.websocket.api.util.WSURI;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.eclipse.jetty.websocket.server.NativeWebSocketServletContainerInitializer;\n+import org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter;\n+import org.eclipse.jetty.websocket.tests.EventSocket;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class ClientTimeoutTest\n+{\n+    private Server server;\n+    private WebSocketClient client;\n+    private final CountDownLatch createEndpoint = new CountDownLatch(1);\n+\n+    @BeforeEach\n+    public void start() throws Exception\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        ServletContextHandler contextHandler = new ServletContextHandler();\n+        contextHandler.setContextPath(\"/\");\n+        server.setHandler(contextHandler);\n+\n+        NativeWebSocketServletContainerInitializer.configure(contextHandler, (context, container) ->\n+        {\n+            container.addMapping(\"/\", (req, res) ->\n+            {\n+                try\n+                {\n+                    createEndpoint.await(5, TimeUnit.SECONDS);\n+                    return new EventSocket.EchoSocket();\n+                }\n+                catch (InterruptedException e)\n+                {\n+                    throw new IllegalStateException(e);\n+                }\n+            });\n+        });\n+        contextHandler.addFilter(WebSocketUpgradeFilter.class, \"/\", EnumSet.of(DispatcherType.REQUEST));\n+        server.start();\n+\n+        client = new WebSocketClient();\n+        client.start();\n+    }\n+\n+    @AfterEach\n+    public void stop() throws Exception\n+    {\n+        createEndpoint.countDown();\n+        client.stop();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testWebSocketClientTimeout() throws Exception\n+    {\n+        EventSocket clientSocket = new EventSocket();\n+        long timeout = 1000;\n+        client.setMaxIdleTimeout(timeout);\n+        Future<Session> connect = client.connect(clientSocket, WSURI.toWebsocket(server.getURI()));\n+\n+        ExecutionException executionException = assertThrows(ExecutionException.class, () -> connect.get(timeout + 200, TimeUnit.MILLISECONDS));\n+        assertThat(executionException.getCause(), instanceOf(UpgradeException.class));\n+        UpgradeException upgradeException = (UpgradeException)executionException.getCause();\n+        assertThat(upgradeException.getCause(), instanceOf(TimeoutException.class));\n+    }\n+\n+    @Test\n+    public void testClientUpgradeRequestTimeout() throws Exception\n+    {\n+        EventSocket clientSocket = new EventSocket();\n+        long timeout = 1000;\n+        ClientUpgradeRequest upgradeRequest = new ClientUpgradeRequest();\n+        upgradeRequest.timeout(timeout, TimeUnit.MILLISECONDS);\n+        Future<Session> connect = client.connect(clientSocket, WSURI.toWebsocket(server.getURI()), upgradeRequest);\n+\n+        ExecutionException executionException = assertThrows(ExecutionException.class, () -> connect.get(timeout + 200, TimeUnit.MILLISECONDS));", "originalCommit": "74916c2fc946d6b83c8ce6f1a6ed591218ac7fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MTA1Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5024#discussion_r450771056", "bodyText": "To be consistent with other methods of this class, this should be `void setTimeout(long, TimeUnit).", "author": "sbordet", "createdAt": "2020-07-07T10:40:00Z", "path": "jetty-websocket/websocket-client/src/main/java/org/eclipse/jetty/websocket/client/ClientUpgradeRequest.java", "diffHunk": "@@ -179,6 +181,27 @@ public void setRequestURI(URI uri)\n         }\n     }\n \n+    /**\n+     * @param timeout the total timeout for the request/response conversation of the WebSocket handshake;\n+     * use zero or a negative value to disable the timeout\n+     * @param unit the timeout unit\n+     * @return this request object\n+     */\n+    public ClientUpgradeRequest timeout(long timeout, TimeUnit unit)", "originalCommit": "74916c2fc946d6b83c8ce6f1a6ed591218ac7fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "702a48c2d128187cf106ad49ba04ae1f580f5c80", "url": "https://github.com/eclipse/jetty.project/commit/702a48c2d128187cf106ad49ba04ae1f580f5c80", "message": "Issue #5018 - rename ClientUpgradeRequest timeout to setTimeout\n\nand increase timeouts used for testing\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-07T12:05:01Z", "type": "commit"}]}