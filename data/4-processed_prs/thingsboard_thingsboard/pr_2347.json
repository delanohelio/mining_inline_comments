{"pr_number": 2347, "pr_title": "Feature/rest client", "pr_createdAt": "2020-01-17T11:29:30Z", "pr_url": "https://github.com/thingsboard/thingsboard/pull/2347", "timeline": [{"oid": "5330e89cc1f5e7ca66e4b3899adf3c386c16d59d", "url": "https://github.com/thingsboard/thingsboard/commit/5330e89cc1f5e7ca66e4b3899adf3c386c16d59d", "message": "refactored URLs", "committedDate": "2019-12-04T18:06:20Z", "type": "commit"}, {"oid": "8832c3c0d2800a177eeea00b0db04778830b0854", "url": "https://github.com/thingsboard/thingsboard/commit/8832c3c0d2800a177eeea00b0db04778830b0854", "message": "Merge branch 'master' of https://github.com/thingsboard/thingsboard into feature/rest-client", "committedDate": "2020-01-16T09:55:48Z", "type": "commit"}, {"oid": "2d76dbe7e90aff248d662817a59cc9d3fad20fa3", "url": "https://github.com/thingsboard/thingsboard/commit/2d76dbe7e90aff248d662817a59cc9d3fad20fa3", "message": "refactored", "committedDate": "2020-01-16T16:01:12Z", "type": "commit"}, {"oid": "de95db6031d78027388d8cd928a27974ff6babbc", "url": "https://github.com/thingsboard/thingsboard/commit/de95db6031d78027388d8cd928a27974ff6babbc", "message": "refactored", "committedDate": "2020-01-16T17:24:28Z", "type": "commit"}, {"oid": "5c57b2540d8d96c3a40a9407b2c1b49c659d9183", "url": "https://github.com/thingsboard/thingsboard/commit/5c57b2540d8d96c3a40a9407b2c1b49c659d9183", "message": "refactored", "committedDate": "2020-01-17T11:28:36Z", "type": "commit"}, {"oid": "ba294bd670a9055ba8b435cb33e4099157f4adfb", "url": "https://github.com/thingsboard/thingsboard/commit/ba294bd670a9055ba8b435cb33e4099157f4adfb", "message": "refactored", "committedDate": "2020-01-17T15:35:04Z", "type": "commit"}, {"oid": "43d704896199dc946f0721fc612e83cb984c0039", "url": "https://github.com/thingsboard/thingsboard/commit/43d704896199dc946f0721fc612e83cb984c0039", "message": "refactored rest client", "committedDate": "2020-01-20T10:22:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MDI2NA==", "url": "https://github.com/thingsboard/thingsboard/pull/2347#discussion_r368490264", "bodyText": "Use newWorkStealingPool", "author": "ashvayka", "createdAt": "2020-01-20T11:05:48Z", "path": "tools/src/main/java/org/thingsboard/client/tools/RestClient.java", "diffHunk": "@@ -74,26 +77,31 @@\n import org.thingsboard.server.common.data.widget.WidgetType;\n import org.thingsboard.server.common.data.widget.WidgetsBundle;\n \n+import java.io.Closeable;\n import java.io.IOException;\n import java.net.URI;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n \n import static org.springframework.util.StringUtils.isEmpty;\n \n /**\n  * @author Andrew Shvayka\n  */\n-public class RestClient implements ClientHttpRequestInterceptor {\n+public class RestClient implements ClientHttpRequestInterceptor, Closeable {\n     private static final String JWT_TOKEN_HEADER_PARAM = \"X-Authorization\";\n     protected final RestTemplate restTemplate;\n     protected final String baseURL;\n     private String token;\n     private String refreshToken;\n     private final ObjectMapper objectMapper = new ObjectMapper();\n+    private ExecutorService service = Executors.newFixedThreadPool(10);", "originalCommit": "43d704896199dc946f0721fc612e83cb984c0039", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MDk0NA==", "url": "https://github.com/thingsboard/thingsboard/pull/2347#discussion_r368490944", "bodyText": "Name this RestJsonConverter to make different from org.thingsboard.server.common.transport.adaptor.JsonConverter", "author": "ashvayka", "createdAt": "2020-01-20T11:07:26Z", "path": "tools/src/main/java/org/thingsboard/client/tools/utils/JsonConverter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.client.tools.utils;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.thingsboard.server.common.data.kv.AttributeKvEntry;\n+import org.thingsboard.server.common.data.kv.BaseAttributeKvEntry;\n+import org.thingsboard.server.common.data.kv.BasicTsKvEntry;\n+import org.thingsboard.server.common.data.kv.BooleanDataEntry;\n+import org.thingsboard.server.common.data.kv.DoubleDataEntry;\n+import org.thingsboard.server.common.data.kv.KvEntry;\n+import org.thingsboard.server.common.data.kv.LongDataEntry;\n+import org.thingsboard.server.common.data.kv.StringDataEntry;\n+import org.thingsboard.server.common.data.kv.TsKvEntry;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class JsonConverter {", "originalCommit": "43d704896199dc946f0721fc612e83cb984c0039", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MTY4Nw==", "url": "https://github.com/thingsboard/thingsboard/pull/2347#discussion_r368491687", "bodyText": "Code duplication", "author": "ashvayka", "createdAt": "2020-01-20T11:09:14Z", "path": "tools/src/main/java/org/thingsboard/client/tools/RestClient.java", "diffHunk": "@@ -1590,206 +1587,278 @@ public void deleteRuleChain(String ruleChainId) {\n         }\n     }\n \n-    public DeferredResult<ResponseEntity> getAttributeKeys(String entityType, String entityId) {\n+    public List<String> getAttributeKeys(EntityId entityId) {\n         return restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/keys/attributes\",\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<String>>() {\n                 },\n-                entityType,\n-                entityId).getBody();\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString()).getBody();\n     }\n \n-    public DeferredResult<ResponseEntity> getAttributeKeysByScope(String entityType, String entityId, String scope) {\n+    public List<String> getAttributeKeysByScope(EntityId entityId, String scope) {\n         return restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/keys/attributes/{scope}\",\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<String>>() {\n                 },\n-                entityType,\n-                entityId,\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString(),\n                 scope).getBody();\n     }\n \n-    public DeferredResult<ResponseEntity> getAttributesResponseEntity(String entityType, String entityId, String keys) {\n-        return restTemplate.exchange(\n+    public List<AttributeKvEntry> getAttributeKvEntries(EntityId entityId, List<String> keys) {\n+        List<JsonNode> attributes = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/values/attributes?keys={keys}\",\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<JsonNode>>() {\n                 },\n-                entityType,\n-                entityId,\n-                keys).getBody();\n+                entityId.getEntityType().name(),\n+                entityId.getId(),\n+                listToString(keys)).getBody();\n+        if (!CollectionUtils.isEmpty(attributes)) {\n+            return JsonConverter.toAttributes(attributes);\n+        } else {\n+            return Collections.emptyList();\n+        }\n     }\n \n-    public DeferredResult<ResponseEntity> getAttributesByScope(String entityType, String entityId, String scope, String keys) {\n-        return restTemplate.exchange(\n+    public Future<List<AttributeKvEntry>> getAttributeKvEntriesAsync(EntityId entityId, List<String> keys) {\n+        return service.submit(() -> getAttributeKvEntries(entityId, keys));\n+    }\n+\n+    public List<AttributeKvEntry> getAttributesByScope(EntityId entityId, String scope, List<String> keys) {\n+        List<JsonNode> attributes = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/values/attributes/{scope}?keys={keys}\",\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<JsonNode>>() {\n                 },\n-                entityType,\n-                entityId,\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString(),\n                 scope,\n-                keys).getBody();\n+                listToString(keys)).getBody();\n+        if (!CollectionUtils.isEmpty(attributes)) {\n+            return JsonConverter.toAttributes(attributes);\n+        } else {\n+            return Collections.emptyList();\n+        }\n     }\n \n-    public DeferredResult<ResponseEntity> getTimeseriesKeys(String entityType, String entityId) {\n+    public List<String> getTimeseriesKeys(EntityId entityId) {\n         return restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/keys/timeseries\",\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<String>>() {\n                 },\n-                entityType,\n-                entityId).getBody();\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString()).getBody();\n     }\n \n-    public DeferredResult<ResponseEntity> getLatestTimeseries(String entityType, String entityId, String keys) {\n-        return restTemplate.exchange(\n+    public List<TsKvEntry> getLatestTimeseries(EntityId entityId, List<String> keys) {\n+        Map<String, List<JsonNode>> timeseries = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/values/timeseries?keys={keys}\",\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<Map<String, List<JsonNode>>>() {\n                 },\n-                entityType,\n-                entityId,\n-                keys).getBody();\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString(),\n+                listToString(keys)).getBody();\n+        if (!CollectionUtils.isEmpty(timeseries)) {\n+            return JsonConverter.toTimeseries(timeseries);\n+        } else {\n+            return Collections.emptyList();\n+        }\n     }\n \n \n-    public DeferredResult<ResponseEntity> getTimeseries(String entityType, String entityId, String keys, Long startTs, Long endTs, Long interval, Integer limit, String agg) {\n+    public List<TsKvEntry> getTimeseries(EntityId entityId, List<String> keys, Long startTs, Long endTs, Long interval, Integer limit, String agg) {\n         Map<String, String> params = new HashMap<>();\n-        params.put(\"entityType\", entityType);\n-        params.put(\"entityId\", entityId);\n-        params.put(\"keys\", keys);\n+        params.put(\"entityType\", entityId.getEntityType().name());\n+        params.put(\"entityId\", entityId.getId().toString());\n+        params.put(\"keys\", listToString(keys));\n         params.put(\"startTs\", startTs.toString());\n         params.put(\"endTs\", endTs.toString());\n         params.put(\"interval\", interval == null ? \"0\" : interval.toString());\n         params.put(\"limit\", limit == null ? \"100\" : limit.toString());\n         params.put(\"agg\", agg == null ? \"NONE\" : agg);\n \n-        return restTemplate.exchange(\n+        Map<String, List<JsonNode>> timeseries = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/values/timeseries?keys={keys}&startTs={startTs}&endTs={endTs}&interval={interval}&limit={limit}&agg={agg}\",\n                 HttpMethod.GET,\n                 HttpEntity.EMPTY,\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<Map<String, List<JsonNode>>>() {\n                 },\n                 params).getBody();\n+\n+        if (!CollectionUtils.isEmpty(timeseries)) {\n+            return JsonConverter.toTimeseries(timeseries);\n+        } else {\n+            return Collections.emptyList();\n+        }\n     }\n \n-    public DeferredResult<ResponseEntity> saveDeviceAttributes(String deviceId, String scope, JsonNode request) {\n-        return restTemplate.exchange(\n+    public List<AttributeKvEntry> saveDeviceAttributes(String deviceId, String scope, JsonNode request) {\n+        List<JsonNode> attributes = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{deviceId}/{scope}\",\n                 HttpMethod.POST,\n                 new HttpEntity<>(request),\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<JsonNode>>() {\n                 },\n                 deviceId,\n                 scope).getBody();\n+\n+        if (!CollectionUtils.isEmpty(attributes)) {\n+            return JsonConverter.toAttributes(attributes);\n+        } else {\n+            return Collections.emptyList();\n+        }\n     }\n \n-    public DeferredResult<ResponseEntity> saveEntityAttributesV1(String entityType, String entityId, String scope, JsonNode request) {\n-        return restTemplate.exchange(\n+    public List<AttributeKvEntry> saveEntityAttributesV1(EntityId entityId, String scope, JsonNode request) {\n+        List<JsonNode> attributes = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/{scope}\",\n                 HttpMethod.POST,\n                 new HttpEntity<>(request),\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<JsonNode>>() {\n                 },\n-                entityType,\n-                entityId,\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString(),\n                 scope).getBody();\n+\n+        if (!CollectionUtils.isEmpty(attributes)) {\n+            return JsonConverter.toAttributes(attributes);\n+        } else {\n+            return Collections.emptyList();\n+        }\n     }\n \n-    public DeferredResult<ResponseEntity> saveEntityAttributesV2(String entityType, String entityId, String scope, JsonNode request) {\n-        return restTemplate.exchange(\n+    public List<AttributeKvEntry> saveEntityAttributesV2(EntityId entityId, String scope, JsonNode request) {\n+        List<JsonNode> attributes = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/attributes/{scope}\",\n                 HttpMethod.POST,\n                 new HttpEntity<>(request),\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<List<JsonNode>>() {\n                 },\n-                entityType,\n-                entityId,\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString(),\n                 scope).getBody();\n+\n+        if (!CollectionUtils.isEmpty(attributes)) {\n+            return JsonConverter.toAttributes(attributes);\n+        } else {\n+            return Collections.emptyList();\n+        }\n     }\n \n-    public DeferredResult<ResponseEntity> saveEntityTelemetry(String entityType, String entityId, String scope, String requestBody) {\n-        return restTemplate.exchange(\n+    public List<TsKvEntry> saveEntityTelemetry(EntityId entityId, String scope, String requestBody) {\n+        Map<String, List<JsonNode>> timeseries = restTemplate.exchange(\n                 baseURL + \"/api/plugins/telemetry/{entityType}/{entityId}/timeseries/{scope}\",\n                 HttpMethod.POST,\n                 new HttpEntity<>(requestBody),\n-                new ParameterizedTypeReference<DeferredResult<ResponseEntity>>() {\n+                new ParameterizedTypeReference<Map<String, List<JsonNode>>>() {\n                 },\n-                entityType,\n-                entityId,\n+                entityId.getEntityType().name(),\n+                entityId.getId().toString(),\n                 scope).getBody();\n+\n+        if (!CollectionUtils.isEmpty(timeseries)) {", "originalCommit": "43d704896199dc946f0721fc612e83cb984c0039", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f9fcae48db7b6e1454335dd7494d85c84a37eb0", "url": "https://github.com/thingsboard/thingsboard/commit/0f9fcae48db7b6e1454335dd7494d85c84a37eb0", "message": "changed executorService from RestClient", "committedDate": "2020-01-20T11:20:24Z", "type": "commit"}, {"oid": "be4bbb1a0cb86f84dfd2be0375748e1518d7deee", "url": "https://github.com/thingsboard/thingsboard/commit/be4bbb1a0cb86f84dfd2be0375748e1518d7deee", "message": "refactored rest client and JsonConverter", "committedDate": "2020-01-20T11:32:22Z", "type": "commit"}]}