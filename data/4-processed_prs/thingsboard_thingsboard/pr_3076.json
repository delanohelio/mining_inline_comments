{"pr_number": 3076, "pr_title": "Develop/2.5.3 batch improvements", "pr_createdAt": "2020-07-10T09:50:07Z", "pr_url": "https://github.com/thingsboard/thingsboard/pull/3076", "timeline": [{"oid": "71bd6001bab6d3be2b72c744bff0b97f8ee2a93d", "url": "https://github.com/thingsboard/thingsboard/commit/71bd6001bab6d3be2b72c744bff0b97f8ee2a93d", "message": "changed validateEmail access modifier to public", "committedDate": "2020-06-25T08:43:42Z", "type": "commit"}, {"oid": "e77127019f058a00f7c5608b565c8d7ca12d2ae7", "url": "https://github.com/thingsboard/thingsboard/commit/e77127019f058a00f7c5608b565c8d7ca12d2ae7", "message": "Ts batch improvements", "committedDate": "2020-07-10T09:46:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMDcyNA==", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452800724", "bodyText": "put null check to the     public ListenableFuture add(E element)  method to avoid code duplication.", "author": "ashvayka", "createdAt": "2020-07-10T12:03:37Z", "path": "dao/src/main/java/org/thingsboard/server/dao/sql/attributes/JpaAttributeDao.java", "diffHunk": "@@ -78,7 +82,9 @@ private void init() {\n                 .maxDelay(maxDelay)\n                 .statsPrintIntervalMs(statsPrintIntervalMs)\n                 .build();\n-        queue = new TbSqlBlockingQueue<>(params);\n+\n+        Function<AttributeKvEntity, Integer> hashcodeFunction = entity -> entity != null ? entity.getId().getEntityId().hashCode() : 0;", "originalCommit": "e77127019f058a00f7c5608b565c8d7ca12d2ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMTE4OQ==", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452801189", "bodyText": "this is not relevant to the feature", "author": "ashvayka", "createdAt": "2020-07-10T12:04:35Z", "path": "dao/src/main/java/org/thingsboard/server/dao/service/DataValidator.java", "diffHunk": "@@ -64,7 +64,7 @@ protected boolean isSameData(D existentData, D actualData) {\n         return actualData.getId() != null && existentData.getId().equals(actualData.getId());\n     }\n \n-    protected static void validateEmail(String email) {\n+    public static void validateEmail(String email) {", "originalCommit": "e77127019f058a00f7c5608b565c8d7ca12d2ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMTQ0Ng==", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452801446", "bodyText": "Why do you need this operation?", "author": "ashvayka", "createdAt": "2020-07-10T12:05:10Z", "path": "dao/src/main/java/org/thingsboard/server/dao/sql/TbSqlBlockingQueueWrapper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright \u00a9 2016-2020 The Thingsboard Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.thingsboard.server.dao.sql;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+@Slf4j\n+@Data\n+public class TbSqlBlockingQueueWrapper<E> {\n+    private final CopyOnWriteArrayList<TbSqlBlockingQueue<E>> queues = new CopyOnWriteArrayList<>();\n+    private final TbSqlBlockingQueueParams params;\n+    private ScheduledLogExecutorComponent logExecutor;\n+    private final Function<E, Integer> hashCodeFunction;\n+    private final int maxThreads;\n+\n+    public void init(ScheduledLogExecutorComponent logExecutor, Consumer<List<E>> saveFunction) {\n+        for (int i = 0; i < maxThreads; i++) {\n+            TbSqlBlockingQueue<E> queue = new TbSqlBlockingQueue<>(params);\n+            queues.add(queue);\n+            queue.init(logExecutor, saveFunction, i);\n+        }\n+    }\n+\n+    public ListenableFuture<Void> add(E element) {\n+        int hash = hashCodeFunction.apply(element);\n+        int queueIndex = (hash & 0x7FFFFFFF) % maxThreads;", "originalCommit": "e77127019f058a00f7c5608b565c8d7ca12d2ae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDYwMw==", "url": "https://github.com/thingsboard/thingsboard/pull/3076#discussion_r452810603", "bodyText": "because hash can be negative.", "author": "YevhenBondarenko", "createdAt": "2020-07-10T12:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMTQ0Ng=="}], "type": "inlineReview"}, {"oid": "98c24632e3e87ac261adf581105d4bab75122ece", "url": "https://github.com/thingsboard/thingsboard/commit/98c24632e3e87ac261adf581105d4bab75122ece", "message": "refactored", "committedDate": "2020-07-10T12:24:11Z", "type": "commit"}, {"oid": "2f4ca3b5be4cbeea708c22b0553065d859b32743", "url": "https://github.com/thingsboard/thingsboard/commit/2f4ca3b5be4cbeea708c22b0553065d859b32743", "message": "improvements", "committedDate": "2020-07-10T14:07:15Z", "type": "commit"}]}