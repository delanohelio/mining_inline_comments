{"pr_number": 1203, "pr_title": "TrieKeyMapper - accountKeys cache not initialized (LGTM alert).", "pr_createdAt": "2020-04-03T18:53:13Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1203", "timeline": [{"oid": "8cd5fcbff2171d902e2367569fcdaef8b49b4681", "url": "https://github.com/rsksmart/rskj/commit/8cd5fcbff2171d902e2367569fcdaef8b49b4681", "message": "Fix TrieKeyMapper to save key value in cache\n\n(cherry picked from commit 674ed74d4c664a84fde71a65df1dd6f417488a62)", "committedDate": "2020-04-02T15:54:27Z", "type": "commit"}, {"oid": "b0e3260a5005fa106db35e40b6847bb9d827cde4", "url": "https://github.com/rsksmart/rskj/commit/b0e3260a5005fa106db35e40b6847bb9d827cde4", "message": "TrieKeyMapper cache fix, small refactor and unit testing", "committedDate": "2020-04-03T16:45:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjM3Mg==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r404326372", "bodyText": "Could this method be static? Maybe also secureKeyPrefix\nAny explicit visibility to add?\nBut maybe these additions complicate the testing verifying number of invocations", "author": "ajlopezrsk", "createdAt": "2020-04-06T19:12:46Z", "path": "rskj-core/src/main/java/org/ethereum/db/TrieKeyMapper.java", "diffHunk": "@@ -78,4 +79,10 @@\n     public static byte[] storagePrefix() {\n         return Arrays.copyOf(STORAGE_PREFIX, STORAGE_PREFIX.length);\n     }\n+\n+    byte[] mapRskAddressToKey(RskAddress addr) {", "originalCommit": "b0e3260a5005fa106db35e40b6847bb9d827cde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3OTI2Mw==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r404379263", "bodyText": "Yes, i didnt want to change static/instance, as i dont know if it has consequences, but i'll do it.\nAnd for the access level, i put package to be accesible from Tests, as you said... and it could be protected to be accessed also by subclass.", "author": "patogallaiovlabs", "createdAt": "2020-04-06T20:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1OTE1Mw==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r405059153", "bodyText": "Done. Not static, since is more complicated to test, and its out of scope.\nAnd if we wanted to extend the behaviour of this class, wouldnt it be better if its an instance method? @ajlopez", "author": "patogallaiovlabs", "createdAt": "2020-04-07T19:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNzYzOQ==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r404327639", "bodyText": "Could we add an additional test using MANY keys?\nI guess the code could be rewritten to have only a variable with the last key processed, and this test would pass", "author": "ajlopezrsk", "createdAt": "2020-04-06T19:14:52Z", "path": "rskj-core/src/test/java/org/ethereum/db/TrieKeyMapperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.ethereum.db;\n+\n+import co.rsk.core.RskAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class TrieKeyMapperTest {\n+\n+    private TrieKeyMapper trieKeyMapper;\n+\n+    @Before\n+    public void setup() {\n+        trieKeyMapper = spy(new TrieKeyMapper());\n+    }\n+\n+    @Test\n+    public void getAccountKey_new() {\n+        RskAddress address = new RskAddress(\"1000000000000000000000000000000000000000\");\n+        this.trieKeyMapper.getAccountKey(address);\n+        verify(this.trieKeyMapper, times(1)).mapRskAddressToKey(eq(address));\n+    }\n+\n+    @Test\n+    public void getAccountKey_fromCache() {", "originalCommit": "b0e3260a5005fa106db35e40b6847bb9d827cde4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MDYwOA==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r404380608", "bodyText": "Yes, sure.", "author": "patogallaiovlabs", "createdAt": "2020-04-06T20:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNzYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1Nzc2NQ==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r405057765", "bodyText": "Done.", "author": "patogallaiovlabs", "createdAt": "2020-04-07T19:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNzYzOQ=="}], "type": "inlineReview"}, {"oid": "2cd51995b18f26deb9657e0e7525eade6c263313", "url": "https://github.com/rsksmart/rskj/commit/2cd51995b18f26deb9657e0e7525eade6c263313", "message": "ajlopez comments on PR: - add explicit visibility to method, - new test case with many keys.", "committedDate": "2020-04-07T19:24:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzE0OQ==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r405063149", "bodyText": "Could we add a second for, testing again each address? I guess this code could still be satisfied having only one internal variable derived from the last address processed.", "author": "ajlopezrsk", "createdAt": "2020-04-07T19:36:46Z", "path": "rskj-core/src/test/java/org/ethereum/db/TrieKeyMapperTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.ethereum.db;\n+\n+import co.rsk.core.RskAddress;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class TrieKeyMapperTest {\n+\n+    private static final int BATCH_TEST = 500;\n+    private TrieKeyMapper trieKeyMapper;\n+\n+    @Before\n+    public void setup() {\n+        trieKeyMapper = spy(new TrieKeyMapper());\n+    }\n+\n+    @Test\n+    public void getAccountKey_new() {\n+        RskAddress address = new RskAddress(\"1000000000000000000000000000000000000000\");\n+        this.trieKeyMapper.getAccountKey(address);\n+        verify(this.trieKeyMapper, times(1)).mapRskAddressToKey(eq(address));\n+    }\n+\n+    @Test\n+    public void getAccountKey_fromCache() {\n+        RskAddress address = new RskAddress(\"1000000000000000000000000000000000000001\");\n+\n+        byte[] accountKey = this.trieKeyMapper.getAccountKey(address);\n+        verify(this.trieKeyMapper, times(1)).mapRskAddressToKey(eq(address));\n+\n+        byte[] accountKeyCache = this.trieKeyMapper.getAccountKey(address);\n+        verify(this.trieKeyMapper, times(1)).mapRskAddressToKey(eq(address));\n+        Assert.assertArrayEquals(\"Account key diff from diff calls.\", accountKey, accountKeyCache);\n+\n+    }\n+\n+    @Test\n+    public void getAccountKey_fromCache_multipleKeys() {\n+        String addressPrefix = \"1000000000000000000000000000000000000\";\n+\n+        int offset = 100;\n+        for (int i = offset; i < BATCH_TEST + offset; i++) {", "originalCommit": "2cd51995b18f26deb9657e0e7525eade6c263313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MjYxNg==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r405072616", "bodyText": "Now i think it goes, didnt get it in the first comment", "author": "patogallaiovlabs", "createdAt": "2020-04-07T19:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzE0OQ=="}], "type": "inlineReview"}, {"oid": "7de03691f7013f444485f7ca90200cc882293468", "url": "https://github.com/rsksmart/rskj/commit/7de03691f7013f444485f7ca90200cc882293468", "message": "Merge branch 'master' into bugfix/trieKeyMapper-cache", "committedDate": "2020-04-07T19:37:02Z", "type": "commit"}, {"oid": "0ad3ddc49803e0abaf05981770f61c855e6c1e27", "url": "https://github.com/rsksmart/rskj/commit/0ad3ddc49803e0abaf05981770f61c855e6c1e27", "message": "As ajlopez suggested, add new case testing multiple keys from cache", "committedDate": "2020-04-07T19:51:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMDgwNg==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r405520806", "bodyText": "I would add a comment explaining that this cache is safe because we a RskAddress is immutable and it's a purely functional mapping", "author": "nicops", "createdAt": "2020-04-08T13:23:18Z", "path": "rskj-core/src/main/java/org/ethereum/db/TrieKeyMapper.java", "diffHunk": "@@ -45,8 +45,9 @@\n             return Arrays.copyOf(key, key.length);\n         }\n \n-        byte[] secureKey = secureKeyPrefix(addr.getBytes());\n-        byte[] key = ByteUtil.merge(DOMAIN_PREFIX, secureKey, addr.getBytes());\n+        byte[] key = mapRskAddressToKey(addr);\n+\n+        accountKeys.put(addr, key);", "originalCommit": "0ad3ddc49803e0abaf05981770f61c855e6c1e27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNzc1MQ==", "url": "https://github.com/rsksmart/rskj/pull/1203#discussion_r405607751", "bodyText": "done", "author": "patogallaiovlabs", "createdAt": "2020-04-08T15:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMDgwNg=="}], "type": "inlineReview"}, {"oid": "e15f966e06e8ea71e667f620db65407ff5fcc70f", "url": "https://github.com/rsksmart/rskj/commit/e15f966e06e8ea71e667f620db65407ff5fcc70f", "message": "@nicops suggested comments on the cache functionality, on the PR", "committedDate": "2020-04-08T15:21:11Z", "type": "commit"}, {"oid": "140ac783ab9fe62a93f1e8658ec87c65f0c3128b", "url": "https://github.com/rsksmart/rskj/commit/140ac783ab9fe62a93f1e8658ec87c65f0c3128b", "message": "Merge branch 'master' into bugfix/trieKeyMapper-cache", "committedDate": "2020-04-13T14:04:30Z", "type": "commit"}]}