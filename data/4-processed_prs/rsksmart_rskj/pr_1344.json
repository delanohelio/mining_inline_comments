{"pr_number": 1344, "pr_title": "Create FastBridgeCompatibleBtcWallet class in order to support fast BTC feature", "pr_createdAt": "2020-10-23T19:48:46Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1344", "timeline": [{"oid": "8671449647e5a1cf491604d913dfbc60f52cdaad", "url": "https://github.com/rsksmart/rskj/commit/8671449647e5a1cf491604d913dfbc60f52cdaad", "message": "Create FastBridgeCompatibleBtcWallet class in order to support fast BTC feature\n\n- Refactor RegisterBtcWallet class\n- Refactor BridgeUtils methods involving spendWallet and noSpendWallet as boolean parameter is added to check if wallet is compatible with fast bridge\n- Refactored all the tests that made use of these methods and add test for FastBridgeCompatibleBtcWallet class", "committedDate": "2020-10-23T19:41:36Z", "type": "commit"}, {"oid": "1c36210a0923ff2060f855b9335f58a73a69470e", "url": "https://github.com/rsksmart/rskj/commit/1c36210a0923ff2060f855b9335f58a73a69470e", "message": "Make class attributes final", "committedDate": "2020-10-23T19:46:41Z", "type": "commit"}, {"oid": "7e6f5c6ae3c0a290ac8fedb4dbc1966086ed701d", "url": "https://github.com/rsksmart/rskj/commit/7e6f5c6ae3c0a290ac8fedb4dbc1966086ed701d", "message": "WIP - build.gradle using bitcoinj-thin 0.10.14-rsk-10 locally", "committedDate": "2020-10-23T20:39:59Z", "type": "commit"}, {"oid": "7e6f5c6ae3c0a290ac8fedb4dbc1966086ed701d", "url": "https://github.com/rsksmart/rskj/commit/7e6f5c6ae3c0a290ac8fedb4dbc1966086ed701d", "message": "WIP - build.gradle using bitcoinj-thin 0.10.14-rsk-10 locally", "committedDate": "2020-10-23T20:39:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMjQxNw==", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512002417", "bodyText": "You should be using the fastBridgeFederationInformation payToScriptHash.\nThe way you are trying to get the destination address won't work", "author": "josedahlquist", "createdAt": "2020-10-26T14:28:31Z", "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+public class FastBridgeCompatibleBtcWallet extends BridgeBtcWallet {\n+    private final BridgeStorageProvider bridgeStorageProvider;\n+\n+    public FastBridgeCompatibleBtcWallet(Context btcContext, List<Federation> federations,\n+        BridgeStorageProvider bridgeStorageProvider) {\n+        super(btcContext, federations);\n+        this.bridgeStorageProvider = bridgeStorageProvider;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public RedeemData findRedeemDataFromScriptHash(byte[] payToScriptHash) {\n+        Optional<FastBridgeFederationInformation> fastBridgeFederationInformation =\n+            this.bridgeStorageProvider.getFastBridgeFederationInformation(payToScriptHash);\n+\n+        if (fastBridgeFederationInformation.isPresent()) {\n+            Optional<Federation> destinationFederation = getDestinationFederation(payToScriptHash);", "originalCommit": "7e6f5c6ae3c0a290ac8fedb4dbc1966086ed701d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDkyNg==", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512270926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Optional<Federation> destinationFederation = getDestinationFederation(\n          \n          \n            \n                            fastBridgeFederationInformation.get().getFederationScriptHash());\n          \n          \n            \n                        FastBridgeFederationInformation fastBridgeFederationInformationInstance = fastBridgeFederationInformation.get(); \n          \n          \n            \n                        Optional<Federation> destinationFederation = getDestinationFederation(\n          \n          \n            \n                            fastBridgeFederationInformationInstance.getFederationScriptHash()\n          \n          \n            \n                        );\n          \n      \n    \n    \n  \n\nSeems like you are \"getting\" the optional many times, maybe get it just once into a variable", "author": "josedahlquist", "createdAt": "2020-10-26T21:11:18Z", "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+public class FastBridgeCompatibleBtcWallet extends BridgeBtcWallet {\n+    private final BridgeStorageProvider bridgeStorageProvider;\n+\n+    public FastBridgeCompatibleBtcWallet(Context btcContext, List<Federation> federations,\n+        BridgeStorageProvider bridgeStorageProvider) {\n+        super(btcContext, federations);\n+        this.bridgeStorageProvider = bridgeStorageProvider;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public RedeemData findRedeemDataFromScriptHash(byte[] payToScriptHash) {\n+        Optional<FastBridgeFederationInformation> fastBridgeFederationInformation =\n+            this.bridgeStorageProvider.getFastBridgeFederationInformation(payToScriptHash);\n+\n+        if (fastBridgeFederationInformation.isPresent()) {\n+            Optional<Federation> destinationFederation = getDestinationFederation(\n+                fastBridgeFederationInformation.get().getFederationScriptHash());", "originalCommit": "7146f61cfc58fae6b69c83dcf94fd71d4ad7e51b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MTk2NQ==", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512271965", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when(provider.getFastBridgeFederationInformation(fastBridgeFederationP2SH)).thenReturn\n          \n          \n            \n                        (Optional.of(fastBridgeFederationInformation)\n          \n          \n            \n                    );\n          \n          \n            \n                    when(provider.getFastBridgeFederationInformation(fastBridgeFederationP2SH))\n          \n          \n            \n                       .thenReturn(Optional.of(fastBridgeFederationInformation));", "author": "josedahlquist", "createdAt": "2020-10-26T21:13:21Z", "path": "rskj-core/src/test/java/co/rsk/peg/FastBridgeCompatibleBtcWalletTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package co.rsk.peg;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.core.Sha256Hash;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptBuilder;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FastBridgeCompatibleBtcWalletTest {\n+    private final Federation federation = new Federation(\n+        FederationTestUtils.getFederationMembers(3),\n+        Instant.ofEpochMilli(1000),\n+        0L,\n+        NetworkParameters.fromID(NetworkParameters.ID_REGTEST)\n+    );\n+\n+    private final List<Federation> federationList = Collections.singletonList(federation);\n+\n+    @Test\n+    public void findRedeemDataFromScriptHash_with_no_fastBridgeInformation_in_storage_call_super() {\n+        BridgeStorageProvider provider = mock(BridgeStorageProvider.class);\n+        when(provider.getFastBridgeFederationInformation(any(byte[].class))).thenReturn(Optional.empty());\n+\n+        FastBridgeCompatibleBtcWallet fastBridgeCompatibleBtcWallet = new FastBridgeCompatibleBtcWallet(\n+            mock(Context.class), federationList, provider);\n+\n+        RedeemData redeemData = fastBridgeCompatibleBtcWallet.findRedeemDataFromScriptHash(\n+            federation.getP2SHScript().getPubKeyHash());\n+\n+        Assert.assertNotNull(redeemData);\n+        Assert.assertEquals(federation.getRedeemScript(), redeemData.redeemScript);\n+    }\n+\n+    @Test\n+    public void findRedeemDataFromScriptHash_with_fastBridgeInformation_in_storage() {\n+        BridgeStorageProvider provider = mock(BridgeStorageProvider.class);\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.of(new byte[]{1});\n+\n+        Script fastBridgeRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+            federation.getRedeemScript(), derivationArgumentsHash);\n+\n+        Script p2SHOutputScript = ScriptBuilder.createP2SHOutputScript(fastBridgeRedeemScript);\n+        byte[] fastBridgeFederationP2SH = p2SHOutputScript.getPubKeyHash();\n+\n+        FastBridgeFederationInformation fastBridgeFederationInformation =\n+            new FastBridgeFederationInformation(derivationArgumentsHash,\n+                federation.getP2SHScript().getPubKeyHash());\n+\n+        when(provider.getFastBridgeFederationInformation(fastBridgeFederationP2SH)).thenReturn\n+            (Optional.of(fastBridgeFederationInformation)\n+        );", "originalCommit": "7146f61cfc58fae6b69c83dcf94fd71d4ad7e51b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2b835303f8790a25ddcdccc4f008e5c7c3b2582", "url": "https://github.com/rsksmart/rskj/commit/c2b835303f8790a25ddcdccc4f008e5c7c3b2582", "message": "Fix on FastBridgeCompatibleBtcWallet and tests", "committedDate": "2020-10-27T13:38:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4NTAxOQ==", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512785019", "bodyText": "please, try to maintain the code standards.", "author": "pamgonzalez", "createdAt": "2020-10-27T15:21:12Z", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeUtils.java", "diffHunk": "@@ -49,22 +49,37 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(\"BridgeUtils\");\n \n-    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation) {\n-        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation));\n+    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation, boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation), isFastBridgeCompatible, storageProvider);\n     }\n \n-    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations) {\n-        Wallet wallet = new BridgeBtcWallet(btcContext, federations);\n+    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        Wallet wallet;\n+        if (isFastBridgeCompatible) {\n+            wallet = new FastBridgeCompatibleBtcWallet(btcContext, federations, storageProvider);\n+        } else {\n+            wallet = new BridgeBtcWallet(btcContext, federations);\n+        }\n+\n         federations.forEach(federation -> wallet.addWatchedAddress(federation.getAddress(), federation.getCreationTime().toEpochMilli()));\n         return wallet;\n     }\n \n-    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos) {\n-        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos);\n+    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos,", "originalCommit": "c2b835303f8790a25ddcdccc4f008e5c7c3b2582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4NTE5OA==", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512785198", "bodyText": "please, try to maintain the code standards.", "author": "pamgonzalez", "createdAt": "2020-10-27T15:21:23Z", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeUtils.java", "diffHunk": "@@ -49,22 +49,37 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(\"BridgeUtils\");\n \n-    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation) {\n-        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation));\n+    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation, boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation), isFastBridgeCompatible, storageProvider);\n     }\n \n-    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations) {\n-        Wallet wallet = new BridgeBtcWallet(btcContext, federations);\n+    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        Wallet wallet;\n+        if (isFastBridgeCompatible) {\n+            wallet = new FastBridgeCompatibleBtcWallet(btcContext, federations, storageProvider);\n+        } else {\n+            wallet = new BridgeBtcWallet(btcContext, federations);\n+        }\n+\n         federations.forEach(federation -> wallet.addWatchedAddress(federation.getAddress(), federation.getCreationTime().toEpochMilli()));\n         return wallet;\n     }\n \n-    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos) {\n-        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos);\n+    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos,\n+            isFastBridgeCompatible, storageProvider);\n     }\n \n-    public static Wallet getFederationsSpendWallet(Context btcContext, List<Federation> federations, List<UTXO> utxos) {\n-        Wallet wallet = new BridgeBtcWallet(btcContext, federations);\n+    public static Wallet getFederationsSpendWallet(Context btcContext, List<Federation> federations,\n+        List<UTXO> utxos, boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {", "originalCommit": "c2b835303f8790a25ddcdccc4f008e5c7c3b2582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4NTQwMg==", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512785402", "bodyText": "please, try to maintain the code standards.", "author": "pamgonzalez", "createdAt": "2020-10-27T15:21:37Z", "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+public class FastBridgeCompatibleBtcWallet extends BridgeBtcWallet {\n+    private final BridgeStorageProvider bridgeStorageProvider;\n+\n+    public FastBridgeCompatibleBtcWallet(Context btcContext, List<Federation> federations,", "originalCommit": "c2b835303f8790a25ddcdccc4f008e5c7c3b2582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "29f64bddc13880abe36bc0c56b42c10756565823", "url": "https://github.com/rsksmart/rskj/commit/29f64bddc13880abe36bc0c56b42c10756565823", "message": "Fix on FastBridgeCompatibleBtcWallet and tests", "committedDate": "2020-10-27T15:25:51Z", "type": "forcePushed"}, {"oid": "c107eec0ba0c616ba69770673e9c74db0444b43c", "url": "https://github.com/rsksmart/rskj/commit/c107eec0ba0c616ba69770673e9c74db0444b43c", "message": "Fix on FastBridgeCompatibleBtcWallet and tests", "committedDate": "2020-10-27T15:28:59Z", "type": "forcePushed"}, {"oid": "45962142046a13a00da1cd6a72024afabee45a90", "url": "https://github.com/rsksmart/rskj/commit/45962142046a13a00da1cd6a72024afabee45a90", "message": "Fix on FastBridgeCompatibleBtcWallet and tests", "committedDate": "2020-10-27T16:07:28Z", "type": "commit"}, {"oid": "45962142046a13a00da1cd6a72024afabee45a90", "url": "https://github.com/rsksmart/rskj/commit/45962142046a13a00da1cd6a72024afabee45a90", "message": "Fix on FastBridgeCompatibleBtcWallet and tests", "committedDate": "2020-10-27T16:07:28Z", "type": "forcePushed"}]}