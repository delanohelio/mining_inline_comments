{"pr_number": 1297, "pr_title": "Refactor RegisterBtcTransaction", "pr_createdAt": "2020-08-25T19:37:48Z", "pr_url": "https://github.com/rsksmart/rskj/pull/1297", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzI4Mg==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476693282", "bodyText": "maybe mock the repository", "author": "josedahlquist", "createdAt": "2020-08-25T19:41:10Z", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4803,6 +4804,104 @@ public void addSignatureMultipleInputsPartiallyValid() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void processPegIn_no_lock_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+\n+        Assert.assertFalse(bridgeSupport.processPegIn(new BtcTransaction(btcParams),\n+                mock(Transaction.class),\n+                0,\n+                mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_invalid_sender() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP143,true, false,\n+                BtcLockSender.TxType.P2SHMULTISIG);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_not_whitelisted_address() throws IOException {\n+        assertProcessPegIn(null,false, false,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP134,true, true,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processRelease_no_release_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processRelease(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processMigration_no_migration_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processMigration(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,\n+                                    boolean mockLockingCap, BtcLockSender.TxType lockSender) throws IOException {\n+        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n+\n+        if (consensusRule != null) {\n+            when(activations.isActive(consensusRule)).thenReturn(true);\n+        }\n+\n+        Repository repository = createRepository();", "originalCommit": "0a577abbab04fb4d46417e23707a624072014fae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxMzM1Nw==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476713357", "bodyText": "I need to leave it because otherwise fails calling to getBtcLockedInFederation() on verifyLockDoesNotSurpassLockingCap", "author": "guidohernan93", "createdAt": "2020-08-25T20:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzkyOQ==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476693929", "bodyText": "If I'm not wrong, you are testing refunds in here, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,\n          \n          \n            \n                private void assertRefundInProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,", "author": "josedahlquist", "createdAt": "2020-08-25T19:42:29Z", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4803,6 +4804,104 @@ public void addSignatureMultipleInputsPartiallyValid() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void processPegIn_no_lock_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+\n+        Assert.assertFalse(bridgeSupport.processPegIn(new BtcTransaction(btcParams),\n+                mock(Transaction.class),\n+                0,\n+                mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_invalid_sender() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP143,true, false,\n+                BtcLockSender.TxType.P2SHMULTISIG);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_not_whitelisted_address() throws IOException {\n+        assertProcessPegIn(null,false, false,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP134,true, true,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processRelease_no_release_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processRelease(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processMigration_no_migration_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processMigration(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,", "originalCommit": "0a577abbab04fb4d46417e23707a624072014fae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxMzQ0MQ==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476713441", "bodyText": "Done", "author": "guidohernan93", "createdAt": "2020-08-25T20:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5NDE5OQ==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476694199", "bodyText": "?", "author": "josedahlquist", "createdAt": "2020-08-25T19:43:06Z", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -53,6 +53,7 @@\n import org.mockito.ArgumentCaptor;\n import org.mockito.Mockito;\n \n+import javax.annotation.Nullable;", "originalCommit": "0a577abbab04fb4d46417e23707a624072014fae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxMzc2NQ==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476713765", "bodyText": "Move Nullable parameter to the end of list of parameters, but left it just for clarity.", "author": "guidohernan93", "createdAt": "2020-08-25T20:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5NDE5OQ=="}], "type": "inlineReview"}, {"oid": "ce54a983fd0da9c0ad9613933b0e4c7f2551582a", "url": "https://github.com/rsksmart/rskj/commit/ce54a983fd0da9c0ad9613933b0e4c7f2551582a", "message": "Refactor RegisterBtcTransaction\n\nMove lock, release and migration logic to their own methods\nRefactor lock validations to extract refund logic from them", "committedDate": "2020-08-25T20:16:43Z", "type": "forcePushed"}, {"oid": "0170768759e85cd9d9cc3874617ac2212582f84b", "url": "https://github.com/rsksmart/rskj/commit/0170768759e85cd9d9cc3874617ac2212582f84b", "message": "Refactor RegisterBtcTransaction\n\nMove lock, release and migration logic to their own methods\nRefactor lock validations to extract refund logic from them", "committedDate": "2020-08-25T21:08:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzODk0OQ==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r479438949", "bodyText": "registerBtcTransaction shouldn't throw RegisterBtcTransactionException. It is caught inside the method", "author": "marcos-iov", "createdAt": "2020-08-28T17:23:20Z", "path": "rskj-core/src/main/java/co/rsk/peg/Bridge.java", "diffHunk": "@@ -446,7 +446,7 @@ public void registerBtcTransaction(Object[] args) {\n         byte[] pmtSerialized = (byte[]) args[2];\n         try {\n             bridgeSupport.registerBtcTransaction(rskTx, btcTxSerialized, height, pmtSerialized);\n-        } catch (IOException | BlockStoreException e) {\n+        } catch (IOException | BlockStoreException | RegisterBtcTransactionException e) {", "originalCommit": "5e8d48225d2bb83dbb989582760080f9e4d0f014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUyOA==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r479443528", "bodyText": "Once registerBtcTransaction gets changed to not throw RegisterBtcTransactionException, you should remove the reference of said exception from the tests \ud83d\ude13", "author": "josedahlquist", "createdAt": "2020-08-28T17:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzODk0OQ=="}], "type": "inlineReview"}, {"oid": "becd22ffb46c513480f3c1fcd33a7a043676d085", "url": "https://github.com/rsksmart/rskj/commit/becd22ffb46c513480f3c1fcd33a7a043676d085", "message": "Refactor registerBtcTransaction method in order to avoid having multiple return statements and create a new type of exception: RegisterBtcTransactionException", "committedDate": "2020-08-28T17:53:06Z", "type": "forcePushed"}, {"oid": "2b5207fc7c52f1affa35999e1e762f686eb45f3b", "url": "https://github.com/rsksmart/rskj/commit/2b5207fc7c52f1affa35999e1e762f686eb45f3b", "message": "Refactor registerBtcTransaction method in order to avoid having multiple return statements and create a new type of exception: RegisterBtcTransactionException", "committedDate": "2020-09-07T15:14:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMTYwNA==", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r486511604", "bodyText": "Check the indentation here", "author": "marcos-iov", "createdAt": "2020-09-10T17:25:26Z", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "diffHunk": "@@ -258,81 +265,118 @@ public Wallet getNoSpendWalletForLiveFederations() throws IOException {\n      * @throws BlockStoreException\n      * @throws IOException\n      */\n-    public void registerBtcTransaction(Transaction rskTx, byte[] btcTxSerialized, int height, byte[] pmtSerialized) throws IOException, BlockStoreException {\n-        Context.propagate(btcContext);\n-        Sha256Hash btcTxHash = BtcTransactionFormatUtils.calculateBtcTxHash(btcTxSerialized);\n+    public void registerBtcTransaction(Transaction rskTx, byte[] btcTxSerialized, int height, byte[] pmtSerialized)\n+            throws IOException, BlockStoreException {\n+            Context.propagate(btcContext);\n+            Sha256Hash btcTxHash = BtcTransactionFormatUtils.calculateBtcTxHash(btcTxSerialized);", "originalCommit": "2b5207fc7c52f1affa35999e1e762f686eb45f3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "77ea4d7e83e5b5493f7c4e5419b55779548b6cfe", "url": "https://github.com/rsksmart/rskj/commit/77ea4d7e83e5b5493f7c4e5419b55779548b6cfe", "message": "Refactor registerBtcTransaction method in order to avoid having multiple return statements and create a new type of exception: RegisterBtcTransactionException", "committedDate": "2020-09-10T17:49:37Z", "type": "forcePushed"}, {"oid": "69d25e9a53bbf712d83ccabd545c576210360e1b", "url": "https://github.com/rsksmart/rskj/commit/69d25e9a53bbf712d83ccabd545c576210360e1b", "message": "Refactor RegisterBtcTransaction\n\nMove lock, release and migration logic to their own methods\nRefactor lock validations to extract refund logic from them", "committedDate": "2020-09-11T14:13:17Z", "type": "commit"}, {"oid": "b86052ce716dd61e340800eac61461c9def36be9", "url": "https://github.com/rsksmart/rskj/commit/b86052ce716dd61e340800eac61461c9def36be9", "message": "Refactor registerBtcTransaction method in order to avoid having multiple return statements and create a new type of exception: RegisterBtcTransactionException", "committedDate": "2020-09-11T14:13:17Z", "type": "commit"}, {"oid": "b86052ce716dd61e340800eac61461c9def36be9", "url": "https://github.com/rsksmart/rskj/commit/b86052ce716dd61e340800eac61461c9def36be9", "message": "Refactor registerBtcTransaction method in order to avoid having multiple return statements and create a new type of exception: RegisterBtcTransactionException", "committedDate": "2020-09-11T14:13:17Z", "type": "forcePushed"}]}