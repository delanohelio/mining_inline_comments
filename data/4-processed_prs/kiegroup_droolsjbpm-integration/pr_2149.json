{"pr_number": 2149, "pr_title": "[JBPM-9094] Integration tests for new customCaseIdPrefix ability", "pr_createdAt": "2020-07-07T17:59:41Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149", "timeline": [{"oid": "58d404f453fce44b8d255cb6adc03e48e89aa5f2", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/58d404f453fce44b8d255cb6adc03e48e89aa5f2", "message": "[JBPM-9094] Integration tests for new customCaseIdPrefix ability", "committedDate": "2020-07-07T22:35:27Z", "type": "forcePushed"}, {"oid": "90eb4118c878ad6f15ec26937ba93f73f2c31595", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/90eb4118c878ad6f15ec26937ba93f73f2c31595", "message": "[JBPM-9094] Integration tests for new customCaseIdPrefix ability", "committedDate": "2020-07-07T22:38:00Z", "type": "forcePushed"}, {"oid": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "message": "[JBPM-9094] Integration tests for new customCaseIdPrefix ability", "committedDate": "2020-07-07T22:39:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1ODY1Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453558653", "bodyText": "Maybe we could shorten it by adding the full java name to the import section. Just a minor thing.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (org.mvel2.CompileException e) {\n          \n          \n            \n                    } catch (CompileException e) {", "author": "afalhambra", "createdAt": "2020-07-13T10:39:53Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-case-id-generator/src/main/java/org/kie/server/generator/CustomNumberPrefixCaseIdGenerator.java", "diffHunk": "@@ -41,4 +60,13 @@ public void register(String prefix) {\n     public void unregister(String prefix) {\n         caseIdMap.remove(prefix);\n     }\n+    \n+    @Override\n+    public String resolveCaseIdPrefix(String expression, Map<String, Object> optionalParameters) {\n+        try {\n+            return !expression.isEmpty() ? (String) TemplateRuntime.eval(expression, CASE_ID_FUNCTIONS, optionalParameters) : \"\";\n+        } catch (org.mvel2.CompileException e) {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5MzM4OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453993388", "bodyText": "Done", "author": "gmunozfe", "createdAt": "2020-07-13T22:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1ODY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2MTA2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453561060", "bodyText": "Exception is never not thrown in the method (same goes to testCustomCaseId() method)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCustomCaseIdWithOptionalParams() throws Exception {\n          \n          \n            \n                public void testCustomCaseIdWithOptionalParams() {", "author": "afalhambra", "createdAt": "2020-07-13T10:44:23Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-case-id-generator/src/test/java/org/kie/server/integrationtests/generator/CustomCaseIdIntegrationTest.java", "diffHunk": "@@ -67,4 +68,23 @@ public void testCustomCaseId() throws Exception {\n         assertNotNull(caseId);\n         assertTrue(\"Created Case Id doesn't start with expected value, value is: \" + caseId, caseId.startsWith(\"HR-01234\"));\n     }\n+    \n+    @Test\n+    public void testCustomCaseIdWithOptionalParams() throws Exception {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2NjgwOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453566809", "bodyText": "final not needed for a static method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String CAPITALIZE(String text) {\n          \n          \n            \n                public static String CAPITALIZE(String text) {", "author": "afalhambra", "createdAt": "2020-07-13T10:55:23Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-case-id-generator/src/main/java/org/kie/server/generator/CustomCaseIdExpressionFunctions.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class CustomCaseIdExpressionFunctions {\n+\n+    public static final CustomCaseIdExpressionFunctions CASE_ID_FUNCTIONS = new CustomCaseIdExpressionFunctions();\n+\n+    private CustomCaseIdExpressionFunctions() {}\n+\n+    public static final String CAPITALIZE(String text) {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU2Njk2NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453566965", "bodyText": "final not needed for a static method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String LOWER(String text) {\n          \n          \n            \n                public static String LOWER(String text) {", "author": "afalhambra", "createdAt": "2020-07-13T10:55:42Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-case-id-generator/src/main/java/org/kie/server/generator/CustomCaseIdExpressionFunctions.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class CustomCaseIdExpressionFunctions {\n+\n+    public static final CustomCaseIdExpressionFunctions CASE_ID_FUNCTIONS = new CustomCaseIdExpressionFunctions();\n+\n+    private CustomCaseIdExpressionFunctions() {}\n+\n+    public static final String CAPITALIZE(String text) {\n+        return StringUtils.capitalize(text);\n+    }\n+\n+    public static final String LOWER(String text) {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3MzU2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453573560", "bodyText": "Unused import.", "author": "afalhambra", "createdAt": "2020-07-13T11:09:15Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3MzY4MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453573680", "bodyText": "Unused import.", "author": "afalhambra", "createdAt": "2020-07-13T11:09:29Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3OTM0MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453579340", "bodyText": "Just some rewording, wdyt?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n          \n          \n            \n                public void testStartEmptyCaseWithCaseDefaultPrefixId() {", "author": "afalhambra", "createdAt": "2020-07-13T11:20:34Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MDI3Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453580272", "bodyText": "Just some rewording here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n          \n          \n            \n                public void testStartEmptyCaseWithNoSequenceCaseDefaultPrefixId() {", "author": "afalhambra", "createdAt": "2020-07-13T11:22:32Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MjQ1Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453582452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_CASE_DEPLOYMENT_ID = \"EmptyCaseWithCaseDeploymentId\";", "author": "afalhambra", "createdAt": "2020-07-13T11:27:03Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MjkyOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453582929", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_PREFIX_CASE_ID = \"EmptyCaseWithCasePrefixId\";", "author": "afalhambra", "createdAt": "2020-07-13T11:28:02Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzUwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453583508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithIdCasePrefix\" name=\"EmptyCaseWithIdCasePrefix\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithCasePrefixId\" name=\"EmptyCaseWithCasePrefixId\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T11:29:19Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseWithIdCasePrefix.bpmn2", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithIdCasePrefix\" name=\"EmptyCaseWithIdCasePrefix\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4Mzg0Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453583846", "bodyText": "I would rename this file to:\nEmptyCaseWithCasePrefixId.bpm2 for consistency.", "author": "afalhambra", "createdAt": "2020-07-13T11:29:55Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseWithIdCasePrefix.bpmn2", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NDIxMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453584212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithIdCaseDeployment\" name=\"EmptyCaseWithIdCaseDeployment\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithCaseDeploymentId\" name=\"EmptyCaseWithCaseDeploymentId\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T11:30:35Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseWithIdCaseDeployment.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithIdCaseDeployment\" name=\"EmptyCaseWithIdCaseDeployment\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NDM4MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453584381", "bodyText": "would rename this to:\nEmptyCaseWithCaseDeploymentId.bpmn2 for consistency.", "author": "afalhambra", "createdAt": "2020-07-13T11:30:52Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseWithIdCaseDeployment.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NTc0OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453585748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithIdCaseDeployment() {\n          \n          \n            \n                public void testStartEmptyCaseWithCaseDeploymentId() {", "author": "afalhambra", "createdAt": "2020-07-13T11:33:35Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NzI4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453587285", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithIdCaseDefinition\" name=\"EmptyCaseWithIdCaseDefinition\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithCaseDefinitionId\" name=\"EmptyCaseWithCaseDefinitionId\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T11:36:35Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseWithIdCaseDefinition.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithIdCaseDefinition\" name=\"EmptyCaseWithIdCaseDefinition\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4Nzc2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453587767", "bodyText": "would rename it to:\nEmptyCaseWithCaseDefinitionId.bpm2 for consistency.", "author": "afalhambra", "createdAt": "2020-07-13T11:37:34Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseWithIdCaseDefinition.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4ODAyNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453588026", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_CASE_DEFINITION_ID = \"EmptyCaseWithCaseDefinitionId\";", "author": "afalhambra", "createdAt": "2020-07-13T11:38:03Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4ODc0Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453588742", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n          \n          \n            \n                public void testStartEmptyCaseWithNoSequenceCaseDeploymentId() {", "author": "afalhambra", "createdAt": "2020-07-13T11:39:36Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwMjY2OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453602669", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithIdCaseDefinition() {\n          \n          \n            \n                public void testStartEmptyCaseWithCaseDefinitionId() {", "author": "afalhambra", "createdAt": "2020-07-13T12:07:58Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwMzQ5NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453603494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {\n          \n          \n            \n                public void testStartEmptyCaseWithNoSequenceCaseDefinitionId() {", "author": "afalhambra", "createdAt": "2020-07-13T12:09:43Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                caseId.matches(EMPTY_CASE_ID_CASE_DEFINITION+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNDk3Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453604973", "bodyText": "To avoid any confusion, as there is another bpmn with a similar name, I would rename this to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_CASE_CORRELATION_KEY = \"EmptyCaseWithCaseCorrelationKey\";", "author": "afalhambra", "createdAt": "2020-07-13T12:12:45Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNTE5NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453605194", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdVariablePrefix\" name=\"EmptyCaseIdVariablePrefix\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithCaseCorrelationKey\" name=\"EmptyCaseWithCaseCorrelationKey\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T12:13:13Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdVariablePrefix.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdVariablePrefix\" name=\"EmptyCaseIdVariablePrefix\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNTI5Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453605296", "bodyText": "As there is already a bpmn2 file with similar name, I would rename this to:\nEmptyCaseWithCaseCorrelationKey.bpmn2", "author": "afalhambra", "createdAt": "2020-07-13T12:13:25Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdVariablePrefix.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNTg3MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453605871", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithVariableCaseId() {\n          \n          \n            \n                public void testStartEmptyCaseWithCaseCorrelationId() {", "author": "afalhambra", "createdAt": "2020-07-13T12:14:38Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                caseId.matches(EMPTY_CASE_ID_CASE_DEFINITION+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(EMPTY_CASE_ID_CASE_DEFINITION, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseId() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNzAyNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453607024", "bodyText": "Not sure whether a correlation key can be any string like this? does it make sense? wdyt?", "author": "afalhambra", "createdAt": "2020-07-13T12:16:47Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4MDgyMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453980822", "bodyText": "Yes, it's a free string", "author": "gmunozfe", "createdAt": "2020-07-13T22:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNzAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwNzQzNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453607436", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithVariableCaseIdNoSequence() {\n          \n          \n            \n                public void testStartEmptyCaseWithNoSequenceCaseCorrelationKey() {", "author": "afalhambra", "createdAt": "2020-07-13T12:17:35Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                caseId.matches(EMPTY_CASE_ID_CASE_DEFINITION+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(EMPTY_CASE_ID_CASE_DEFINITION, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseId() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(CORRELATION_KEY+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdNoSequence() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMjk4Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453612987", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdVariablePrefixNoSequence\" name=\"EmptyCaseIdVariablePrefixNoSequence\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithNoSequenceCorrelationKey\" name=\"EmptyCaseWithNoSequenceCorrelationKey\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T12:28:15Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdEmptyVariablePrefixNoSequence.bpmn2", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdVariablePrefixNoSequence\" name=\"EmptyCaseIdVariablePrefixNoSequence\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMzI4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453613285", "bodyText": "I would rename this to:\nEmptyCaseWithNoSequenceCorrelationKey.bpm2", "author": "afalhambra", "createdAt": "2020-07-13T12:28:49Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdEmptyVariablePrefixNoSequence.bpmn2", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMzY4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453613685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_NO_SEQ_CORRELATION_KEY = \"EmptyCaseWithNoSequenceCorrelationKey\";", "author": "afalhambra", "createdAt": "2020-07-13T12:29:33Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxNDIwNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453614205", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseWithVariableCaseIdDefinedAtResource() {\n          \n          \n            \n                public void testStartEmptyCaseWithNoSeqCorrelationKeyDefinedAtResource() {", "author": "afalhambra", "createdAt": "2020-07-13T12:30:30Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                caseId.matches(EMPTY_CASE_ID_CASE_DEFINITION+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(EMPTY_CASE_ID_CASE_DEFINITION, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseId() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(CORRELATION_KEY+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdNoSequence() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CORRELATION_KEY, caseId);\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdDefinedAtResource() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0ODgzOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453648838", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixUpper\" name=\"EmptyCaseIdExpressionPrefixUpper\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithUpperPrefixIdExpression\" name=\"EmptyCaseWithUpperPrefixIdExpression\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T13:28:16Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixUpper.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixUpper\" name=\"EmptyCaseIdExpressionPrefixUpper\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0OTA2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453649067", "bodyText": "would rename this to:\nEmptyCaseWithUpperPrefixIdExpression.bpmn2", "author": "afalhambra", "createdAt": "2020-07-13T13:28:37Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixUpper.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0OTgzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453649832", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_UPPER_PREFIX_ID_EXPRESSION = \"EmptyCaseWithUpperPrefixIdExpression\";", "author": "afalhambra", "createdAt": "2020-07-13T13:29:41Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MDMzMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453650330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseImplicitVariableWithExpressionUpper() {\n          \n          \n            \n                public void testStartEmptyCaseWithUpperPrefixIdExpression() {", "author": "afalhambra", "createdAt": "2020-07-13T13:30:24Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                caseId.matches(EMPTY_CASE_ID_CASE_DEFINITION+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(EMPTY_CASE_ID_CASE_DEFINITION, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseId() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(CORRELATION_KEY+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdNoSequence() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CORRELATION_KEY, caseId);\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdDefinedAtResource() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CORRELATION_KEY, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseImplicitVariableWithExpressionUpper() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MTM0Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453651343", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixTruncate\" name=\"EmptyCaseIdExpressionPrefixTruncate\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithTruncatePrefixIdExpression\" name=\"EmptyCaseWithTruncatePrefixIdExpression\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T13:31:52Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixTruncate.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixTruncate\" name=\"EmptyCaseIdExpressionPrefixTruncate\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MTU0NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453651544", "bodyText": "would rename to:\nEmptyCaseWithTruncatePrefixIdExpression.bpmn2", "author": "afalhambra", "createdAt": "2020-07-13T13:32:12Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixTruncate.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MTg5Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453651897", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_TRUNCATE_PREFIX_ID_EXPRESSION = \"EmptyCaseWithTruncatePrefixIdExpression\";", "author": "afalhambra", "createdAt": "2020-07-13T13:32:46Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MjM3OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453652379", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseImplicitVariableWithExpressionTruncate() {\n          \n          \n            \n                public void testStartEmptyCaseWithTruncatePrefixIdExpression() {", "author": "afalhambra", "createdAt": "2020-07-13T13:33:32Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                caseId.matches(EMPTY_CASE_ID_CASE_DEFINITION+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(EMPTY_CASE_ID_CASE_DEFINITION, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseId() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(CORRELATION_KEY+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdNoSequence() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CORRELATION_KEY, caseId);\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdDefinedAtResource() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CORRELATION_KEY, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseImplicitVariableWithExpressionUpper() {\n+        data.put(\"type\", \"type1\");\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER+\"-TYPE1-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseImplicitVariableWithExpressionTruncate() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MzE0Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453653142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixLpad\" name=\"EmptyCaseIdExpressionPrefixLpad\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithLpadPrefixIdExpression\" name=\"EmptyCaseWithLpadPrefixIdExpression\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T13:34:44Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixLpad.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixLpad\" name=\"EmptyCaseIdExpressionPrefixLpad\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MzI2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453653267", "bodyText": "would rename to:\nEmptyCaseWithLpadPrefixIdExpression.bpmn2", "author": "afalhambra", "createdAt": "2020-07-13T13:34:57Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixLpad.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MzczNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453653737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_LPAD_PREFIX_ID_EXPRESSION = \"EmptyCaseWithLpadPrefixIdExpression\";", "author": "afalhambra", "createdAt": "2020-07-13T13:35:41Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NDAzOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453654039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testStartEmptyCaseImplicitVariableWithExpressionLpad() {\n          \n          \n            \n                public void testStartEmptyCaseWithLpadPrefixIdExpression() {", "author": "afalhambra", "createdAt": "2020-07-13T13:36:08Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n+    \n+\n+    private Map<String, Object> data;\n+    private CaseFile caseFile;\n+\n+    @BeforeClass\n+    public static void buildAndDeployArtifacts() {\n+\n+        KieServerDeployer.buildAndDeployCommonMavenParent();\n+        KieServerDeployer.buildAndDeployMavenProjectFromResource(\"/kjars-sources/case-id-generator\");\n+\n+        kieContainer = KieServices.Factory.get().newKieContainer(releaseId);\n+\n+        createContainer(CONTAINER_ID, releaseId);\n+    }\n+    \n+    @Before\n+    public void init() {\n+        data = new HashMap<>();\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefix() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(\"CASE-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefaultPrefixNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(\"CASE\", caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeployment() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                    caseId.matches(CONTAINER_ID+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDeploymentNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEPLOYMENT, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CONTAINER_ID, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinition() {\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match with expected value, value is: \" + caseId, \n+                caseId.matches(EMPTY_CASE_ID_CASE_DEFINITION+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithIdCaseDefinitionNoSequence() {\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_CASE_DEFINITION, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(EMPTY_CASE_ID_CASE_DEFINITION, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseId() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(CORRELATION_KEY+\"-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdNoSequence() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        data.put(\"IS_PREFIX_SEQUENCE\", false);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CORRELATION_KEY, caseId);\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseWithVariableCaseIdDefinedAtResource() {\n+        data.put(\"CORRELATION_KEY\", CORRELATION_KEY);\n+        buildCaseFile();\n+        \n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ, caseFile);\n+        assertNotNull(caseId);\n+        assertEquals(CORRELATION_KEY, caseId);\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseImplicitVariableWithExpressionUpper() {\n+        data.put(\"type\", \"type1\");\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER+\"-TYPE1-[0-9]+\"));\n+    }\n+    \n+    @Test\n+    public void testStartEmptyCaseImplicitVariableWithExpressionTruncate() {\n+        data.put(\"type\", \"type_very_very_long\");\n+        buildCaseFile();\n+        String caseId = caseClient.startCase(CONTAINER_ID, EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE, caseFile);\n+        assertNotNull(caseId);\n+        assertTrue(\"Created Case Id doesn't match expected value, value is: \" + caseId, \n+                    caseId.matches(EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE+\"-type_very-[0-9]+\"));\n+    }\n+\n+    @Test\n+    public void testStartEmptyCaseImplicitVariableWithExpressionLpad() {", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NDc2NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453654764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixRpad\" name=\"EmptyCaseIdExpressionPrefixRpad\" tns:adHoc=\"true\">\n          \n          \n            \n              <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseWithRpadPrefixIdExpression\" name=\"EmptyCaseWithRpadPrefixIdExpression\" tns:adHoc=\"true\">", "author": "afalhambra", "createdAt": "2020-07-13T13:37:15Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixRpad.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n+<definitions id=\"Definition\"\n+             targetNamespace=\"http://www.example.org/MinimalExample\"\n+             typeLanguage=\"http://www.java.com/javaTypes\"\n+             expressionLanguage=\"http://www.mvel.org/2.0\"\n+             xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\"\n+             xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n+             xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n+             xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n+             xmlns:tns=\"http://www.jboss.org/drools\">\n+\n+  <itemDefinition id=\"_sItem\" structureRef=\"String\" />\n+  <itemDefinition id=\"_caseFile_CaseIdItem\" structureRef=\"String\"/>\n+  <itemDefinition id=\"_caseFile_outcomeItem\" structureRef=\"String\"/>\n+  <process processType=\"Private\" isExecutable=\"true\" id=\"EmptyCaseIdExpressionPrefixRpad\" name=\"EmptyCaseIdExpressionPrefixRpad\" tns:adHoc=\"true\">", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NTAwOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453655009", "bodyText": "would rename to:\nEmptyCaseWithRpadPrefixIdExpression.bpmn2", "author": "afalhambra", "createdAt": "2020-07-13T13:37:33Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/filtered-resources/kjars-sources/case-id-generator/src/main/resources/org/kie/server/testing/EmptyCaseIdExpressionPrefixRpad.bpmn2", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?> ", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NTUxOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2149#discussion_r453655518", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";\n          \n          \n            \n                private static final String EMPTY_CASE_WITH_RPAD_PREFIX_ID_EXPRESSION = \"EmptyCaseWithRpadPrefixIdExpression\";", "author": "afalhambra", "createdAt": "2020-07-13T13:38:22Z", "path": "kie-server-parent/kie-server-tests/kie-server-integ-tests-all/src/test/java/org/kie/server/integrationtests/jbpm/cases/CaseIdGeneratorIntegrationTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.server.integrationtests.jbpm.cases;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.kie.api.KieServices;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.api.model.cases.CaseFile;\n+import org.kie.server.integrationtests.jbpm.JbpmKieServerBaseIntegrationTest;\n+import org.kie.server.integrationtests.shared.KieServerDeployer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CaseIdGeneratorIntegrationTest extends JbpmKieServerBaseIntegrationTest {\n+\n+    private static ReleaseId releaseId = new ReleaseId(\"org.kie.server.testing\", \"case-id-generator\", \"1.0.0.Final\");\n+\n+    private static final String CONTAINER_ID = \"id-generator\";\n+\n+    private static final String CASE_OWNER_ROLE = \"owner\";\n+    \n+    private static final String CORRELATION_KEY = \"my correlation key\";\n+    \n+    private static final String EMPTY_CASE_ID_CASE_PREFIX = \"EmptyCaseWithIdCasePrefix\";\n+    private static final String EMPTY_CASE_ID_CASE_DEPLOYMENT = \"EmptyCaseWithIdCaseDeployment\";\n+    private static final String EMPTY_CASE_ID_CASE_DEFINITION = \"EmptyCaseWithIdCaseDefinition\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX = \"EmptyCaseIdVariablePrefix\";\n+    private static final String EMPTY_CASE_ID_VARIABLE_PREFIX_NO_SEQ = \"EmptyCaseIdVariablePrefixNoSequence\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_UPPER = \"EmptyCaseIdExpressionPrefixUpper\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_TRUNCATE = \"EmptyCaseIdExpressionPrefixTruncate\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_LPAD = \"EmptyCaseIdExpressionPrefixLpad\";\n+    private static final String EMPTY_CASE_ID_EXPRESSION_PREFIX_RPAD = \"EmptyCaseIdExpressionPrefixRpad\";", "originalCommit": "b6c89d21384a66a3c60cc7ad9bfdd26c2227fe1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8cb7d616b9cc67b4a079a49a637e8e5a2936ae01", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/8cb7d616b9cc67b4a079a49a637e8e5a2936ae01", "message": "[JBPM-9094] Integration tests for new customCaseIdPrefix ability", "committedDate": "2020-07-13T22:54:57Z", "type": "forcePushed"}, {"oid": "3e6577adeb3d34dba535cf56751f52ed38a45379", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/3e6577adeb3d34dba535cf56751f52ed38a45379", "message": "[JBPM-9094] Integration tests for new customCaseIdPrefix ability", "committedDate": "2020-07-14T11:28:11Z", "type": "commit"}, {"oid": "3e6577adeb3d34dba535cf56751f52ed38a45379", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/3e6577adeb3d34dba535cf56751f52ed38a45379", "message": "[JBPM-9094] Integration tests for new customCaseIdPrefix ability", "committedDate": "2020-07-14T11:28:11Z", "type": "forcePushed"}]}