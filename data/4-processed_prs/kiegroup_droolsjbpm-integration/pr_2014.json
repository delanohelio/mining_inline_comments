{"pr_number": 2014, "pr_title": "DROOLS-5020 DMN wire Validator to kie-maven-plugin Maven build", "pr_createdAt": "2020-02-17T13:49:30Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014", "timeline": [{"oid": "e716de04e71574b8ad0851ac1dddfceab3180f1e", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e716de04e71574b8ad0851ac1dddfceab3180f1e", "message": "DROOLS-5020 DMN wire Validator to kie-maven-plugin Maven build", "committedDate": "2020-02-17T13:44:00Z", "type": "commit"}, {"oid": "a2ae8ac018c5e50c881f3756122cdb340cc4e899", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/a2ae8ac018c5e50c881f3756122cdb340cc4e899", "message": "update DMN to avoid failing schema check\n\nOn DMNv1.1, the import element was not extending (yet) the namedelement\nin order to allow extended attribute.\nUpdating the test model to v1.2 to avoid failing XSD checks.", "committedDate": "2020-02-18T13:22:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMzI0MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383233240", "bodyText": "That's a big function. Could it be broken in small methods to be better tested? My other concern is because I can't see a test for this new class. In case I'm wrong, could you please write a quick explanation? Thanks.", "author": "hellowdan", "createdAt": "2020-02-24T12:19:22Z", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ValidateDMNMojo.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.model.Resource;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.kproject.models.KieModuleModelImpl;\n+import org.kie.api.builder.Message.Level;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.core.assembler.DMNAssemblerService;\n+import org.kie.dmn.core.compiler.DMNProfile;\n+import org.kie.dmn.feel.util.ClassLoaderUtil;\n+import org.kie.dmn.model.api.DMNModelInstrumentedBase;\n+import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.validation.DMNValidator;\n+import org.kie.dmn.validation.DMNValidator.Validation;\n+import org.kie.dmn.validation.DMNValidatorFactory;\n+import org.kie.internal.utils.ChainedProperties;\n+\n+@Mojo(name = \"validateDMN\",\n+      requiresDependencyResolution = ResolutionScope.NONE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_RESOURCES)\n+public class ValidateDMNMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.resources}\")\n+    private List<Resource> resources;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL\")\n+    private String validateDMN;\n+    private List<Validation> actualFlags = new ArrayList<>();\n+\n+    private DMNValidator validator;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {", "originalCommit": "a2ae8ac018c5e50c881f3756122cdb340cc4e899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0ODYxMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383248610", "bodyText": "please note tests are provided by takari framework here: https://github.com/kiegroup/droolsjbpm-integration/tree/master/kie-plugins-testing/src/test/projects/kjar-7-with-dmn\n\nIf I'm not wrong the test as per all the other Mojos (like DRL etc) are provided by means of Takari framework and the downstream build.", "author": "tarilabs", "createdAt": "2020-02-24T12:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMzI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3NDcyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383274723", "bodyText": "Thanks @tarilabs", "author": "hellowdan", "createdAt": "2020-02-24T13:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMzI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NDU3MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383694570", "bodyText": "@tarilabs\nDo I understand correctly that we are adding validator to validate DMN during plugin execution? What about to add test for invalid DMN to https://github.com/kiegroup/droolsjbpm-integration/tree/master/kie-plugins-testing/src/test/projects/kjar-7-with-dmn ? It will test that validator throws error when DMN is invalid.", "author": "jiripetrlik", "createdAt": "2020-02-25T07:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMzI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczNDE2NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383734165", "bodyText": "I need to create a separate test for that, because it would be a Maven Failed build if not passing the validation for an Error, so it would change semantic for existing test. Do you concur it would be wrong to do it on an existing test which semantic is expected to be Maven Success build?", "author": "tarilabs", "createdAt": "2020-02-25T08:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMzI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3MjE0Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383772143", "bodyText": "Also @jiripetrlik if you want me to create a test for a Maven Failure build, can you kindly point me to an example of a test showing a Maven Failure, please? So far all the tests have Maven Success semantic unless I missed something.", "author": "tarilabs", "createdAt": "2020-02-25T09:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMzI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NTA2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383695067", "bodyText": "This seems suspicious. Maybe it would be better to rethrow this exception or at least log something.", "author": "jiripetrlik", "createdAt": "2020-02-25T07:17:02Z", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ValidateDMNMojo.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.model.Resource;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.kproject.models.KieModuleModelImpl;\n+import org.kie.api.builder.Message.Level;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.core.assembler.DMNAssemblerService;\n+import org.kie.dmn.core.compiler.DMNProfile;\n+import org.kie.dmn.feel.util.ClassLoaderUtil;\n+import org.kie.dmn.model.api.DMNModelInstrumentedBase;\n+import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.validation.DMNValidator;\n+import org.kie.dmn.validation.DMNValidator.Validation;\n+import org.kie.dmn.validation.DMNValidatorFactory;\n+import org.kie.internal.utils.ChainedProperties;\n+\n+@Mojo(name = \"validateDMN\",\n+      requiresDependencyResolution = ResolutionScope.NONE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_RESOURCES)\n+public class ValidateDMNMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.resources}\")\n+    private List<Resource> resources;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL\")\n+    private String validateDMN;\n+    private List<Validation> actualFlags = new ArrayList<>();\n+\n+    private DMNValidator validator;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            for (String p : validateDMN.split(\",\")) {\n+                actualFlags.add(Validation.valueOf(p));\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // do nothing.", "originalCommit": "a2ae8ac018c5e50c881f3756122cdb340cc4e899", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0Nzg2MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383747861", "bodyText": "The idea was to allow flags which are not validator flag such as disabled", "author": "tarilabs", "createdAt": "2020-02-25T09:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NTA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc1MjM2OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383752369", "bodyText": "Question because I'm not much familiar with these flags. Isn't there any other possible method which is able to recognize non validation flag other than catching exception? If there isn't maybe we can add more descriptive comment than \"do nothing\". For example \"Allow non validator flags to pass\".", "author": "jiripetrlik", "createdAt": "2020-02-25T09:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NTA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NTg5MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383695891", "bodyText": "I agree with @hellowdan . This method is quite long and complex. Can we for example separate this loop to private methid like \"getDMNModelPaths\".", "author": "jiripetrlik", "createdAt": "2020-02-25T07:19:43Z", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ValidateDMNMojo.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.model.Resource;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.kproject.models.KieModuleModelImpl;\n+import org.kie.api.builder.Message.Level;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.core.assembler.DMNAssemblerService;\n+import org.kie.dmn.core.compiler.DMNProfile;\n+import org.kie.dmn.feel.util.ClassLoaderUtil;\n+import org.kie.dmn.model.api.DMNModelInstrumentedBase;\n+import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.validation.DMNValidator;\n+import org.kie.dmn.validation.DMNValidator.Validation;\n+import org.kie.dmn.validation.DMNValidatorFactory;\n+import org.kie.internal.utils.ChainedProperties;\n+\n+@Mojo(name = \"validateDMN\",\n+      requiresDependencyResolution = ResolutionScope.NONE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_RESOURCES)\n+public class ValidateDMNMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.resources}\")\n+    private List<Resource> resources;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL\")\n+    private String validateDMN;\n+    private List<Validation> actualFlags = new ArrayList<>();\n+\n+    private DMNValidator validator;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            for (String p : validateDMN.split(\",\")) {\n+                actualFlags.add(Validation.valueOf(p));\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // do nothing.\n+        }\n+        // for this phase, keep only the following flags (the rest requires the BuildMojo).\n+        actualFlags.retainAll(Arrays.asList(Validation.VALIDATE_SCHEMA, Validation.VALIDATE_MODEL));\n+        if (actualFlags.isEmpty()) {\n+            getLog().info(\"No VALIDATE_SCHEMA or VALIDATE_MODEL flags set, skipping.\");\n+            return;\n+        }\n+\n+        List<Path> resourcesPaths = resources.stream().map(r -> new File(r.getDirectory()).toPath()).collect(Collectors.toList());\n+        List<Path> dmnModelPaths = new ArrayList<>();", "originalCommit": "a2ae8ac018c5e50c881f3756122cdb340cc4e899", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NjE2MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383696160", "bodyText": "Same as model Paths, can we extract this piece of code to a separate method.", "author": "jiripetrlik", "createdAt": "2020-02-25T07:20:36Z", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ValidateDMNMojo.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.model.Resource;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.kproject.models.KieModuleModelImpl;\n+import org.kie.api.builder.Message.Level;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.core.assembler.DMNAssemblerService;\n+import org.kie.dmn.core.compiler.DMNProfile;\n+import org.kie.dmn.feel.util.ClassLoaderUtil;\n+import org.kie.dmn.model.api.DMNModelInstrumentedBase;\n+import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.validation.DMNValidator;\n+import org.kie.dmn.validation.DMNValidator.Validation;\n+import org.kie.dmn.validation.DMNValidatorFactory;\n+import org.kie.internal.utils.ChainedProperties;\n+\n+@Mojo(name = \"validateDMN\",\n+      requiresDependencyResolution = ResolutionScope.NONE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_RESOURCES)\n+public class ValidateDMNMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.resources}\")\n+    private List<Resource> resources;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL\")\n+    private String validateDMN;\n+    private List<Validation> actualFlags = new ArrayList<>();\n+\n+    private DMNValidator validator;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            for (String p : validateDMN.split(\",\")) {\n+                actualFlags.add(Validation.valueOf(p));\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // do nothing.\n+        }\n+        // for this phase, keep only the following flags (the rest requires the BuildMojo).\n+        actualFlags.retainAll(Arrays.asList(Validation.VALIDATE_SCHEMA, Validation.VALIDATE_MODEL));\n+        if (actualFlags.isEmpty()) {\n+            getLog().info(\"No VALIDATE_SCHEMA or VALIDATE_MODEL flags set, skipping.\");\n+            return;\n+        }\n+\n+        List<Path> resourcesPaths = resources.stream().map(r -> new File(r.getDirectory()).toPath()).collect(Collectors.toList());\n+        List<Path> dmnModelPaths = new ArrayList<>();\n+        for (Path p : resourcesPaths) {\n+            getLog().info(\"Looking for DMN models in path: \" + p);\n+            try (Stream<Path> walk = Files.walk(p)) {\n+                walk.filter(f -> f.toString().endsWith(\".dmn\"))\n+                    .forEach(dmnModelPaths::add);\n+            } catch (Exception e) {\n+                throw new MojoExecutionException(\"Failed executing ValidateDMNMojo\", e);\n+            }\n+        }\n+\n+        if (dmnModelPaths.isEmpty()) {\n+            getLog().info(\"No DMN Models found.\");\n+            return;\n+        }\n+\n+        getLog().info(\"Initializing DMNValidator...\");\n+        ClassLoader classLoader = ClassLoaderUtil.findDefaultClassLoader();\n+        ChainedProperties chainedProperties = ChainedProperties.getChainedProperties(classLoader);\n+        List<KieModuleModel> kieModules = new ArrayList<>();", "originalCommit": "a2ae8ac018c5e50c881f3756122cdb340cc4e899", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5NjM5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2014#discussion_r383696393", "bodyText": "Same as paths and kie modules. Can we extract to a separate method.", "author": "jiripetrlik", "createdAt": "2020-02-25T07:21:16Z", "path": "kie-maven-plugin/src/main/java/org/kie/maven/plugin/ValidateDMNMojo.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.maven.plugin;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.maven.model.Resource;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.drools.compiler.kproject.models.KieModuleModelImpl;\n+import org.kie.api.builder.Message.Level;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.dmn.api.core.DMNMessage;\n+import org.kie.dmn.core.assembler.DMNAssemblerService;\n+import org.kie.dmn.core.compiler.DMNProfile;\n+import org.kie.dmn.feel.util.ClassLoaderUtil;\n+import org.kie.dmn.model.api.DMNModelInstrumentedBase;\n+import org.kie.dmn.model.api.Definitions;\n+import org.kie.dmn.validation.DMNValidator;\n+import org.kie.dmn.validation.DMNValidator.Validation;\n+import org.kie.dmn.validation.DMNValidatorFactory;\n+import org.kie.internal.utils.ChainedProperties;\n+\n+@Mojo(name = \"validateDMN\",\n+      requiresDependencyResolution = ResolutionScope.NONE,\n+      requiresProject = true,\n+      defaultPhase = LifecyclePhase.PROCESS_RESOURCES)\n+public class ValidateDMNMojo extends AbstractKieMojo {\n+\n+    @Parameter(required = true, defaultValue = \"${project.build.resources}\")\n+    private List<Resource> resources;\n+\n+    @Parameter\n+    private Map<String, String> properties;\n+\n+    @Parameter(required = true, defaultValue = \"${project}\")\n+    private MavenProject project;\n+\n+    @Parameter(property = \"validateDMN\", defaultValue = \"VALIDATE_SCHEMA,VALIDATE_MODEL\")\n+    private String validateDMN;\n+    private List<Validation> actualFlags = new ArrayList<>();\n+\n+    private DMNValidator validator;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        try {\n+            for (String p : validateDMN.split(\",\")) {\n+                actualFlags.add(Validation.valueOf(p));\n+            }\n+        } catch (IllegalArgumentException e) {\n+            // do nothing.\n+        }\n+        // for this phase, keep only the following flags (the rest requires the BuildMojo).\n+        actualFlags.retainAll(Arrays.asList(Validation.VALIDATE_SCHEMA, Validation.VALIDATE_MODEL));\n+        if (actualFlags.isEmpty()) {\n+            getLog().info(\"No VALIDATE_SCHEMA or VALIDATE_MODEL flags set, skipping.\");\n+            return;\n+        }\n+\n+        List<Path> resourcesPaths = resources.stream().map(r -> new File(r.getDirectory()).toPath()).collect(Collectors.toList());\n+        List<Path> dmnModelPaths = new ArrayList<>();\n+        for (Path p : resourcesPaths) {\n+            getLog().info(\"Looking for DMN models in path: \" + p);\n+            try (Stream<Path> walk = Files.walk(p)) {\n+                walk.filter(f -> f.toString().endsWith(\".dmn\"))\n+                    .forEach(dmnModelPaths::add);\n+            } catch (Exception e) {\n+                throw new MojoExecutionException(\"Failed executing ValidateDMNMojo\", e);\n+            }\n+        }\n+\n+        if (dmnModelPaths.isEmpty()) {\n+            getLog().info(\"No DMN Models found.\");\n+            return;\n+        }\n+\n+        getLog().info(\"Initializing DMNValidator...\");\n+        ClassLoader classLoader = ClassLoaderUtil.findDefaultClassLoader();\n+        ChainedProperties chainedProperties = ChainedProperties.getChainedProperties(classLoader);\n+        List<KieModuleModel> kieModules = new ArrayList<>();\n+        for (Path p : resourcesPaths) {\n+            try (Stream<Path> walk = Files.walk(p)) {\n+                List<Path> collect = walk.filter(f -> f.toString().endsWith(\"kmodule.xml\")).collect(Collectors.toList());\n+                for (Path k : collect) {\n+                    kieModules.add(KieModuleModelImpl.fromXML(k.toFile()));\n+                }\n+            } catch (Exception e) {\n+                throw new MojoExecutionException(\"Failed executing ValidateDMNMojo\", e);\n+            }\n+        }\n+        for (KieModuleModel kmm : kieModules) {\n+            Properties ps = new Properties();\n+            ps.putAll(kmm.getConfigurationProperties());\n+            chainedProperties.addProperties(ps);\n+        }\n+        List<DMNProfile> dmnProfiles = new ArrayList<>();\n+        dmnProfiles.addAll(DMNAssemblerService.getDefaultDMNProfiles(chainedProperties));", "originalCommit": "a2ae8ac018c5e50c881f3756122cdb340cc4e899", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eecf5889cb4c03b04dff23730ba4716e616cea9a", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/eecf5889cb4c03b04dff23730ba4716e616cea9a", "message": "code refactor following code review", "committedDate": "2020-02-25T09:51:57Z", "type": "commit"}]}