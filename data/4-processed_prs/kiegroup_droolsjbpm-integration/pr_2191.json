{"pr_number": 2191, "pr_title": "[JBPM-9277] JMS Audit Data Replication in spring boot", "pr_createdAt": "2020-08-11T10:50:15Z", "pr_url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191", "timeline": [{"oid": "c713d4f00efa8b5634091eed0af2a47a0e913a88", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/c713d4f00efa8b5634091eed0af2a47a0e913a88", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-12T10:33:23Z", "type": "forcePushed"}, {"oid": "e759311bfdbb1b03eb419c8063fa17001bf75631", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/e759311bfdbb1b03eb419c8063fa17001bf75631", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-12T13:21:09Z", "type": "forcePushed"}, {"oid": "7da7ab4939e33569e7c47c953ecbffb3db7350ad", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/7da7ab4939e33569e7c47c953ecbffb3db7350ad", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-14T10:15:41Z", "type": "forcePushed"}, {"oid": "6842f958b337e770fac9d312f5267aeb85f4a102", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/6842f958b337e770fac9d312f5267aeb85f4a102", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-14T10:32:12Z", "type": "forcePushed"}, {"oid": "33b974eaa8b1696d2ce329b389d4362a486673de", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/33b974eaa8b1696d2ce329b389d4362a486673de", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-14T15:00:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0MjgxOQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469842819", "bodyText": "if statement is redundant. packagesToScan is always not null as already checked at line 69:\n\n  \n    \n      droolsjbpm-integration/kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java\n    \n    \n         Line 69\n      in\n      e759311\n    \n    \n    \n    \n\n        \n          \n           if (packagesToScan != null) {", "author": "afalhambra", "createdAt": "2020-08-13T10:06:30Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/jbpm-spring-boot-autoconfiguration/src/main/java/org/jbpm/springboot/autoconfigure/EntityManagerFactoryHelper.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.jbpm.springboot.autoconfigure;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.PersistenceException;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.persistence.JBPMPersistenceUnitPostProcessor;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.core.type.classreading.MetadataReader;\n+import org.springframework.core.type.classreading.MetadataReaderFactory;\n+import org.springframework.core.type.filter.AnnotationTypeFilter;\n+import org.springframework.core.type.filter.TypeFilter;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+import org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\n+import org.springframework.util.ClassUtils;\n+\n+public final class EntityManagerFactoryHelper {\n+\n+    private static final String CLASS_RESOURCE_PATTERN = \"/**/*.class\";\n+    private static final String PACKAGE_INFO_SUFFIX = \".package-info\";\n+\n+    public EntityManagerFactoryHelper() {\n+        // nothing\n+    }\n+\n+    public static LocalContainerEntityManagerFactoryBean create(ApplicationContext applicationContext, DataSource dataSource, JpaProperties jpaProperties, String puName, String location) {\n+        LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();\n+        factoryBean.setPersistenceUnitName(puName);\n+        factoryBean.setPersistenceXmlLocation(location);\n+        factoryBean.setJtaDataSource(dataSource);\n+        factoryBean.setJpaPropertyMap(jpaProperties.getProperties());\n+        HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();\n+        adapter.setPrepareConnection(false);\n+        factoryBean.setJpaVendorAdapter(adapter);\n+\n+        List<PersistenceUnitPostProcessor> postProcessors = new ArrayList<>();\n+        String packagesToScan = jpaProperties.getProperties().get(\"entity-scan-packages\");\n+        if (packagesToScan != null) {\n+            postProcessors.add(new PersistenceUnitPostProcessor() {\n+\n+                @Override\n+                public void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {\n+                    Set<TypeFilter> entityTypeFilters = new LinkedHashSet<TypeFilter>(3);\n+                    entityTypeFilters.add(new AnnotationTypeFilter(Entity.class, false));\n+                    entityTypeFilters.add(new AnnotationTypeFilter(Embeddable.class, false));\n+                    entityTypeFilters.add(new AnnotationTypeFilter(MappedSuperclass.class, false));\n+\n+                    ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n+\n+                    if (packagesToScan != null) {", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0MzI1NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472943254", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T10:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg0MjgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjE3MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469876171", "bodyText": "please change it to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationProcessEventProducer.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(JMSSender.class);", "author": "afalhambra", "createdAt": "2020-08-13T11:13:17Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.TextMessage;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JMSSender {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationProcessEventProducer.class);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NDA4Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472944083", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-19T11:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjYyOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469876628", "bodyText": "Remove extra placeholders:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.info(\"Sending JMS Message {} {} {}\", message);\n          \n          \n            \n                        logger.info(\"Sending JMS Message {}\", message);", "author": "afalhambra", "createdAt": "2020-08-13T11:14:16Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/JMSSender.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.TextMessage;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JMSSender {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationProcessEventProducer.class);\n+\n+    @Autowired\n+    private JmsTemplate jmsTemplate;\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private String endpointName;\n+\n+    public JMSSender(String endpointName) {\n+        this.endpointName = endpointName;\n+    }\n+\n+    protected void sendMessage(Object messageContent, Integer eventType, int priority) {\n+\n+        String eventXml = xstream.toXML(messageContent);\n+\n+        logger.info(\"XML Event: \\n {}\", eventXml);\n+\n+        jmsTemplate.send(endpointName, messageCreator -> {\n+            TextMessage message = messageCreator.createTextMessage(eventXml);\n+            message.setIntProperty(\"EventType\", eventType);\n+            message.setStringProperty(\"LogType\", \"Process\");\n+            message.setJMSPriority(priority);\n+            logger.info(\"Sending JMS Message {} {} {}\", message);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NDMyMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472944323", "bodyText": "not existing anymore", "author": "elguardian", "createdAt": "2020-08-19T11:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3Nzc0MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469877741", "bodyText": "Shouldn't we mapped them to the events defined in the jbpm module somehow (i.e. Enums, etc)? wdyt?", "author": "afalhambra", "createdAt": "2020-08-13T11:16:31Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/MessageType.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+public final class MessageType {\n+\n+    private MessageType() {\n+        // private\n+    }\n+\n+    public static final int PROCESS_START_EVENT_TYPE = 100;\n+    public static final int PROCESS_COMPLETED_EVENT_TYPE = 101;\n+    public static final int NODE_ENTER_EVENT_TYPE = 102;\n+    public static final int NODE_LEFT_EVENT_TYPE = 103;\n+    public static final int VAR_CHANGE_EVENT_TYPE = 104;\n+    public static final int NODE_SLA_VIOLATED = 105;\n+    public static final int PROCESS_SLA_VIOLATED = 106;\n+\n+    public static final int TASK_STARTED = 201;\n+    public static final int TASK_ACTIVATED = 202;\n+    public static final int TASK_CLAIMED = 203;\n+    public static final int TASK_SKIPPED = 204;\n+    public static final int TASK_STOPPED = 205;\n+    public static final int TASK_COMPLETED = 206;\n+    public static final int TASK_FAILED = 207;\n+    public static final int TASK_EVENT = 208;\n+    public static final int TASK_ADDED = 209;\n+    public static final int TASK_EXITED = 210;\n+    public static final int TASK_RELEASED = 211;\n+    public static final int TASK_RESUMED = 212;\n+    public static final int TASK_SUSPENDED = 213;\n+    public static final int TASK_FORWARDED = 214;\n+    public static final int TASK_DELEGATED = 215;\n+    public static final int TASK_NOMINATED = 216;\n+    public static final int TASK_UPDATED = 217;\n+    public static final int TASK_REASSIGNED = 218;\n+    public static final int TASK_VAR_OUT_CHANGED = 219;\n+    public static final int TASK_VAR_IN_CHANGED = 210;\n+\n+    public static final int BAM_TASK_EVENT = 301;", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NDQ3NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472944475", "bodyText": "enums are not good for sending over the wire.", "author": "elguardian", "createdAt": "2020-08-19T11:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3Nzc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODIyNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469878225", "bodyText": "Not really sure why we need to override Id generator here? can you please clarify?\nThanks!", "author": "afalhambra", "createdAt": "2020-08-13T11:17:35Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk1MDUzNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472950537", "bodyText": "ok. When you do merge in on a entity it is required to generate a new id if it does not exist in the database. This causes to generate new ids when you have to replicate the exact same tuple of data coming (including id)", "author": "elguardian", "createdAt": "2020-08-19T11:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MDk3MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469940971", "bodyText": "Shouldn't this be a Consumer bean instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")\n          \n          \n            \n                @ConditionalOnMissingBean(name = \"auditDataReplicationConsumer\")", "author": "afalhambra", "createdAt": "2020-08-13T13:13:38Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JmsTemplate createJMSQueueTemplate(ConnectionFactory connectionFactory) {\n+        return new JmsTemplate(connectionFactory);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JMSSender createJMSQueueSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JMSSender createJMSTopicSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MTM4NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469941384", "bodyText": "Shouldn't this be a Consumer bean instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AuditDataReplicationJMSConsumer createAuditDataReplicationProducer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n          \n          \n            \n                public AuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "author": "afalhambra", "createdAt": "2020-08-13T13:14:16Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JmsTemplate createJMSQueueTemplate(ConnectionFactory connectionFactory) {\n+        return new JmsTemplate(connectionFactory);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.queue\", matchIfMissing = true)\n+    public JMSSender createJMSQueueSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JMSSender createJMSTopicSender() {\n+        String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+        return new JMSSender(endpointName);\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public AuditDataReplicationJMSConsumer createAuditDataReplicationProducer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NzI0OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469947248", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Something happeng during consuming and event\", e);\n          \n          \n            \n                            logger.error(\"Something went wrong while consuming an event\", e);", "author": "afalhambra", "createdAt": "2020-08-13T13:23:25Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NzUzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469947532", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event event\", e);\n          \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event\", e);", "author": "afalhambra", "createdAt": "2020-08-13T13:23:52Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);\n+                throw new RuntimeException(\"Exception when receiving audit event event\", e);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0ODEwMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469948101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);", "author": "afalhambra", "createdAt": "2020-08-13T13:24:44Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1MjY0NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469952644", "bodyText": "why not increasing logging level to debug instead of info - otherwise we might end up generating a large log every time a message is received here. Wdyt?", "author": "afalhambra", "createdAt": "2020-08-13T13:31:21Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NzY1Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r469957657", "bodyText": "Shouldn't we declare a containerFactory for JMS?", "author": "afalhambra", "createdAt": "2020-08-13T13:38:31Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAxNzU4NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r470017585", "bodyText": "Should we log some warning or something in case message is not in text format? or not really? wdyt?", "author": "afalhambra", "createdAt": "2020-08-13T15:00:19Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jms.annotation.JmsListener;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+    @JmsListener(destination = \"${kieserver.audit-replication.queue}\")\n+    @Transactional\n+    public void receiveMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.info(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);\n+                throw new RuntimeException(\"Exception when receiving audit event event\", e);\n+            } finally {\n+                em.close();\n+            }\n+        }", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMDc3NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r470030774", "bodyText": "there's no METADATA_INPUT_VAR_EVENT object added to the metadata event in jbpm module", "author": "afalhambra", "createdAt": "2020-08-13T15:18:44Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type, 1);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type, 1);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+        if (msg != null) {\n+            List<TaskVariable> variables = (List<TaskVariable>) msg;\n+            variables.forEach(e -> jmsSender.sendMessage(e, type, 1));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_INPUT_VAR_EVENT);\n+        }", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMjkwMQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r470032901", "bodyText": "Should we not make JMS priority messages configurable instead of setting it always to 1? wdyt?", "author": "afalhambra", "createdAt": "2020-08-13T15:21:29Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type, 1);", "originalCommit": "e759311bfdbb1b03eb419c8063fa17001bf75631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5NzQ5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471297495", "bodyText": "I would rename it to something generic for both Queues and topics:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public JMSSender createJMSQueueSender() {\n          \n          \n            \n                public JMSSender createAuditDataReplicationSender() {", "author": "afalhambra", "createdAt": "2020-08-17T07:40:14Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createJMSQueueSender() {", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTY5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472945693", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-19T11:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5NzQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5ODgxNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471298816", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n          \n          \n            \n                public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {", "author": "afalhambra", "createdAt": "2020-08-17T07:43:01Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createJMSQueueSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NTg3Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472945872", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-19T11:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5ODgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMDAyMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471300022", "bodyText": "I would rename to something more generic for both queues and topics:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n          \n          \n            \n                public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "author": "afalhambra", "createdAt": "2020-08-17T07:45:25Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jms.core.JmsTemplate;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createJMSQueueSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsTemplate\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.topic\")\n+    public JmsTemplate createJMSTopicTemplate(ConnectionFactory connectionFactory) {\n+        JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory);\n+        jmsTemplate.setPubSubDomain(true);\n+        return jmsTemplate;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSumaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationQueueConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NjA2OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472946069", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-19T11:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMDAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzcxMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471303710", "bodyText": "Do we really need these deps in here?", "author": "afalhambra", "createdAt": "2020-08-17T07:52:44Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/pom.xml", "diffHunk": "@@ -0,0 +1,258 @@\n+<?xml version=\"1.0\"?>\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie</groupId>\n+    <artifactId>kie-spring-boot-autoconfiguration</artifactId>\n+    <version>7.42.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kie-server-spring-boot-autoconfiguration-audit-replication</artifactId>\n+\n+\n+  <name>KIE :: Spring :: Boot :: KIE Server Audit Data Replication Auto Configuration :: jBPM</name>\n+  <description>jBPM KIE Server SpringBoot Audit Data Replication Auto Configuration</description>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <artifactId>commons-logging</artifactId>\n+          <groupId>commons-logging</groupId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-autoconfigure</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.ejb</groupId>\n+          <artifactId>jboss-ejb-api_3.2_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>xml-apis</groupId>\n+          <artifactId>xml-apis</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.apache.tomcat</groupId>\n+          <artifactId>tomcat-annotations-api</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.amqphub.spring</groupId>\n+      <artifactId>amqp-10-jms-spring-boot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.messaginghub</groupId>\n+      <artifactId>pooled-jms</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.jbpm</groupId>\n+      <artifactId>jbpm-services-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.jbpm</groupId>\n+      <artifactId>jbpm-case-mgmt-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.jbpm</groupId>\n+      <artifactId>jbpm-kie-services</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>aopalliance</groupId>\n+          <artifactId>aopalliance</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.el</groupId>\n+          <artifactId>jboss-el-api_3.0_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.slf4j</groupId>\n+          <artifactId>jcl-over-slf4j</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-api</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>javax.activation</groupId>\n+          <artifactId>activation</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-services-common</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+          <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.jboss.resteasy</groupId>\n+          <artifactId>resteasy-jackson-provider</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.jboss.resteasy</groupId>\n+          <artifactId>resteasy-jaxrs</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.jboss.resteasy</groupId>\n+          <artifactId>resteasy-jaxb-provider</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.slf4j</groupId>\n+          <artifactId>jcl-over-slf4j</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>kie-server-spring-boot-autoconfiguration</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.tomcat</groupId>\n+          <artifactId>tomcat-annotations-api</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>jbpm-spring-boot-autoconfiguration</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>xml-apis</groupId>\n+          <artifactId>xml-apis</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.slf4j</groupId>\n+          <artifactId>jcl-over-slf4j</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>com.zaxxer</groupId>\n+          <artifactId>HikariCP-java7</artifactId>\n+        </exclusion>\n+        <!-- collides with com.sun.xml.bind:jaxb-impl:jar:2.3.0 and com.sun.xml.bind:jaxb-impl:jar:2.3.0 -->\n+        <exclusion>\n+          <groupId>org.glassfish.jaxb</groupId>\n+          <artifactId>jaxb-runtime</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+\n+    <!-- jbpm kie server dependencies -->\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-services-jbpm</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.transaction</groupId>\n+          <artifactId>jboss-transaction-api_1.1_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.dom4j</groupId>\n+          <artifactId>dom4j</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.el</groupId>\n+          <artifactId>jboss-el-api_2.2_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <artifactId>asm</artifactId>\n+          <groupId>asm</groupId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-rest-jbpm</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-services-case-mgmt</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.transaction</groupId>\n+          <artifactId>jboss-transaction-api_1.1_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.dom4j</groupId>\n+          <artifactId>dom4j</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.el</groupId>\n+          <artifactId>jboss-el-api_2.2_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <artifactId>asm</artifactId>\n+          <groupId>asm</groupId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-rest-case-mgmt</artifactId>\n+    </dependency>\n+    <!-- jbpm ui kie server dependencies -->\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-services-jbpm-ui</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.transaction</groupId>\n+          <artifactId>jboss-transaction-api_1.1_spec</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.dom4j</groupId>\n+          <artifactId>dom4j</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.jboss.spec.javax.el</groupId>\n+          <artifactId>jboss-el-api_2.2_spec</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-rest-jbpm-ui</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie</groupId>\n+      <artifactId>jbpm-process-svg</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>xml-apis</groupId>\n+          <artifactId>xml-apis</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.slf4j</groupId>\n+          <artifactId>jcl-over-slf4j</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <artifactId>xercesImpl</artifactId>\n+      <groupId>xerces</groupId>\n+    </dependency>", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0Njg4Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472946887", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-08-19T11:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwMzcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNTE5Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r471305193", "bodyText": "Sorry, can't see why or where the priority is defined/set? can you please clarify?", "author": "afalhambra", "createdAt": "2020-08-17T07:55:51Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+\n+import org.jbpm.process.audit.AbstractAuditLoggerAdapter;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+import org.kie.api.runtime.manager.audit.VariableInstanceLog;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_ENTER_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_LEFT_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_COMPLETED_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_START_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.VAR_CHANGE_EVENT_TYPE;\n+\n+\n+/**\n+ * AuditListener\n+ */\n+\n+public class AuditDataReplicationProcessEventProducer extends AbstractAuditLoggerAdapter {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    @Override\n+    protected void processStarted(ProcessStartedEvent event) {\n+        ProcessInstanceLog log = (ProcessInstanceLog) getProcessInstanceMetadata(event.getProcessInstance(), METADATA_PROCESSINTANCE_LOG);\n+        if (log != null) {\n+            jmsSender.sendMessage(log, PROCESS_START_EVENT_TYPE, 1);\n+        }\n+    }\n+\n+    @Override\n+    protected void processCompleted(ProcessCompletedEvent event) {\n+        ProcessInstanceLog log = (ProcessInstanceLog) getProcessInstanceMetadata(event.getProcessInstance(), METADATA_PROCESSINTANCE_LOG);\n+        if (log != null) {\n+            jmsSender.sendMessage(log, PROCESS_COMPLETED_EVENT_TYPE, 8);", "originalCommit": "33b974eaa8b1696d2ce329b389d4362a486673de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk0NzkwMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r472947900", "bodyText": "removed", "author": "elguardian", "createdAt": "2020-08-19T11:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMwNTE5Mw=="}], "type": "inlineReview"}, {"oid": "cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/cb9d854cb04b348e0b438c1d5fbebd660f1dcb10", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-19T11:14:26Z", "type": "forcePushed"}, {"oid": "109ca537184dbf433fef14680c4d205a10876671", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/109ca537184dbf433fef14680c4d205a10876671", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-20T11:04:55Z", "type": "forcePushed"}, {"oid": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-20T14:05:19Z", "type": "forcePushed"}, {"oid": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f5148b1f515a316b8a3158e34894254ac4a3bba7", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-24T09:20:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzEwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474647108", "bodyText": "Typo.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Something happeng during consuming and event\", e);\n          \n          \n            \n                            logger.error(\"Something went wrong while consuming an event\", e);", "author": "afalhambra", "createdAt": "2020-08-21T11:47:40Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+\n+    protected void processMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyODA2Mg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475628062", "bodyText": "ok", "author": "elguardian", "createdAt": "2020-08-24T13:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzYxMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474647612", "bodyText": "this should be final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);", "author": "afalhambra", "createdAt": "2020-08-21T11:48:48Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzkyMA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474647920", "bodyText": "can be final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);", "author": "afalhambra", "createdAt": "2020-08-21T11:49:29Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyODQwOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475628408", "bodyText": "not needed anymore", "author": "elguardian", "createdAt": "2020-08-24T13:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODA4NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648084", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ProcessEventListener createrocessEventListenerProducer() {\n          \n          \n            \n                public ProcessEventListener createProcessEventListenerProducer() {", "author": "afalhambra", "createdAt": "2020-08-21T11:49:53Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MDc1Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r477160756", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-26T09:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODE4Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648183", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n          \n          \n            \n                    logger.info(\"Adding AuditDataReplicationProcessEvent for data replication\");", "author": "afalhambra", "createdAt": "2020-08-21T11:50:09Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyODc0MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475628741", "bodyText": "not correct", "author": "elguardian", "createdAt": "2020-08-24T13:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODMzOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648338", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n          \n          \n            \n                    logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer for data replication\");", "author": "afalhambra", "createdAt": "2020-08-21T11:50:31Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODQ0OA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648448", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n          \n          \n            \n                    logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer fordata replication\");", "author": "afalhambra", "createdAt": "2020-08-21T11:50:46Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0ODU3OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474648579", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Adding auditDataReplicationConsumer from data replication\");\n          \n          \n            \n                    logger.info(\"Adding auditDataReplicationConsumer for data replication\");", "author": "afalhambra", "createdAt": "2020-08-21T11:51:03Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationQueueConsumer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public AbstractAuditDataReplicationJMSConsumer createAuditDataReplicationConsumer(@Qualifier(\"auditEntityManagerFactory\") EntityManagerFactory emf) {\n+        logger.info(\"Adding auditDataReplicationConsumer from data replication\");", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0OTE0Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474649147", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event event\", e);\n          \n          \n            \n                            throw new RuntimeException(\"Exception when receiving audit event\", e);", "author": "afalhambra", "createdAt": "2020-08-21T11:52:24Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    public AbstractAuditDataReplicationJMSConsumer(EntityManagerFactory emf) {\n+        this.emf = emf;\n+    }\n+\n+\n+    protected void processMessage(Object message) {\n+\n+        if (message instanceof TextMessage) {\n+            EntityManager em = emf.createEntityManager();\n+            TextMessage textMessage = (TextMessage) message;\n+            try {\n+                String messageContent = textMessage.getText();\n+                Integer eventType = textMessage.getIntProperty(\"EventType\");\n+                logger.debug(\"Message type {} received:\\n{}\", eventType, messageContent);\n+                Object event = xstream.fromXML(messageContent);\n+                em.merge(event);\n+            } catch (JMSException e) {\n+                logger.error(\"Something happeng during consuming and event\", e);\n+                throw new RuntimeException(\"Exception when receiving audit event event\", e);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MDgwMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474650802", "bodyText": "would it not be benefitial to distinguish between these 2 events changing the event type. I mean both are TASK_REASSIGNED so it will be difficult to know whether it's one event or another?", "author": "afalhambra", "createdAt": "2020-08-21T11:56:26Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        if (msg != null) {\n+            List<TaskVariable> variables = (List<TaskVariable>) msg;\n+            variables.forEach(e -> jmsSender.sendMessage(e, type));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        }\n+    }\n+\n+    @Override\n+    public void afterTaskActivatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ACTIVATED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskClaimedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_CLAIMED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskSkippedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_SKIPPED, 1);\n+\n+    }\n+\n+    @Override\n+    public void afterTaskStartedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STARTED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskStoppedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STOPPED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskCompletedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_COMPLETED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskFailedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_FAILED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAddedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ADDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskExitedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_EXITED, 1);\n+    }\n+\n+    @Override\n+    public void beforeTaskReleasedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RELEASED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskReleasedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RELEASED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskResumedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RESUMED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskSuspendedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_SUSPENDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskForwardedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_FORWARDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskDelegatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_DELEGATED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskNominatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_NOMINATED, 1);\n+    }\n+    \n+\n+    @Override\n+    public void afterTaskOutputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n+        sendMessage(event, TASK_VAR_OUT_CHANGED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskInputVariableChangedEvent(TaskEvent event, Map<String, Object> variables) {\n+        sendMessage(event, TASK_VAR_IN_CHANGED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAssignmentsAddedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {                \n+        sendMessage(event, TASK_REASSIGNED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAssignmentsRemovedEvent(TaskEvent event, AssignmentType type, List<OrganizationalEntity> entities) {\n+        sendMessage(event, TASK_REASSIGNED, 1);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MjA2Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474652066", "bodyText": "is TASK_RELEASE a correct type event? I mean, it's just a step before actually releasing the task, wdyt?", "author": "afalhambra", "createdAt": "2020-08-21T11:59:20Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {\n+        Object msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_TASK_EVENT);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        if (msg != null) {\n+            jmsSender.sendMessage(msg, type);\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_AUDIT_TASK);\n+        }\n+\n+        msg = event.getMetadata().get(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        if (msg != null) {\n+            List<TaskVariable> variables = (List<TaskVariable>) msg;\n+            variables.forEach(e -> jmsSender.sendMessage(e, type));\n+            event.getMetadata().remove(JPATaskLifeCycleEventListener.METADATA_VAR_EVENT);\n+        }\n+    }\n+\n+    @Override\n+    public void afterTaskActivatedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ACTIVATED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskClaimedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_CLAIMED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskSkippedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_SKIPPED, 1);\n+\n+    }\n+\n+    @Override\n+    public void afterTaskStartedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STARTED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskStoppedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_STOPPED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskCompletedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_COMPLETED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskFailedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_FAILED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskAddedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_ADDED, 1);\n+    }\n+\n+    @Override\n+    public void afterTaskExitedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_EXITED, 1);\n+    }\n+\n+    @Override\n+    public void beforeTaskReleasedEvent(TaskEvent event) {\n+        sendMessage(event, TASK_RELEASED, 1);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NDU2NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474654565", "bodyText": "priority is not used anywhere in this method, please remove.", "author": "afalhambra", "createdAt": "2020-08-21T12:05:18Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationTaskLifeCycleEventListenerProducer.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.jbpm.services.task.audit.JPATaskLifeCycleEventListener;\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.kie.api.task.model.OrganizationalEntity;\n+import org.kie.internal.task.api.TaskVariable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ACTIVATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_ADDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_CLAIMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_COMPLETED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_DELEGATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_EXITED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FAILED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_FORWARDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_NOMINATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_REASSIGNED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RELEASED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_RESUMED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SKIPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STARTED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_STOPPED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_SUSPENDED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_IN_CHANGED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.TASK_VAR_OUT_CHANGED;\n+\n+\n+public class AuditDataReplicationTaskLifeCycleEventListenerProducer extends DefaultTaskEventListener {\n+\n+    @Autowired\n+    private JMSSender jmsSender;\n+\n+\n+    private void sendMessage(TaskEvent event, int type, int priority) {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjM5NQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474656395", "bodyText": "Please update or remove this java doc", "author": "afalhambra", "createdAt": "2020-08-21T12:09:21Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationProcessEventProducer.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.List;\n+\n+import org.jbpm.process.audit.AbstractAuditLoggerAdapter;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.kie.api.event.process.ProcessCompletedEvent;\n+import org.kie.api.event.process.ProcessNodeLeftEvent;\n+import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.event.process.ProcessVariableChangedEvent;\n+import org.kie.api.event.process.SLAViolatedEvent;\n+import org.kie.api.runtime.manager.audit.VariableInstanceLog;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_ENTER_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_LEFT_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.NODE_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_COMPLETED_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_SLA_VIOLATED;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.PROCESS_START_EVENT_TYPE;\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.VAR_CHANGE_EVENT_TYPE;\n+\n+\n+/**\n+ * AuditListener\n+ */", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwMTU4Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474701586", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {\n          \n          \n            \n            public class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {", "author": "afalhambra", "createdAt": "2020-08-21T13:35:37Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.jbpm.services.task.lifecycle.listeners.BAMTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.BAM_TASK_EVENT;\n+\n+public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcwOTk5OQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474709999", "bodyText": "Please refactor imports as some are not really needed", "author": "afalhambra", "createdAt": "2020-08-21T13:49:18Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/ApplicationSender.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\n+import org.jbpm.services.task.identity.MvelUserGroupCallbackImpl;\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.security.SpringSecurityUserGroupCallback;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.jdbc.DataSourceBuilder;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.jms.annotation.EnableJms;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxNTMwNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474715306", "bodyText": "returned value is never used, return void instead?", "author": "afalhambra", "createdAt": "2020-08-21T13:58:27Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskSkipProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.forward(e, USER_GENERIC, USER_NOMINATED));\n+        tasks.forEach(e -> userTaskService.skip(e, USER_NOMINATED));\n+        \n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskExitProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.exit(e, USER_ADMIN));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskFailProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.fail(e, USER_ADMIN, emptyMap()));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    private boolean compareData() {\n+        EntityManager original = originalEntityManagerFactory.createEntityManager();\n+        EntityManager audit = auditEntityManagerFactory.createEntityManager();\n+\n+        List<ProcessInstanceLog> pil = audit.createQuery(\"SELECT o FROM ProcessInstanceLog o ORDER BY o.id ASC\",\n+                                                         ProcessInstanceLog.class).getResultList();\n+        List<ProcessInstanceLog> pil_a = original.createQuery(\"SELECT o FROM ProcessInstanceLog o ORDER BY o.id ASC\",\n+                                                              ProcessInstanceLog.class).getResultList();\n+        Assertions.assertThat(pil).containsExactlyElementsOf(pil_a);\n+\n+        List<NodeInstanceLog> nil = audit.createQuery(\"SELECT o FROM NodeInstanceLog o ORDER BY o.id ASC\",\n+                                                      NodeInstanceLog.class).getResultList();\n+        List<NodeInstanceLog> nil_a = original.createQuery(\"SELECT o FROM NodeInstanceLog o ORDER BY o.id ASC\",\n+                                                           NodeInstanceLog.class).getResultList();\n+        Assertions.assertThat(nil).containsExactlyElementsOf(nil_a);\n+\n+        List<VariableInstanceLog> vil = audit.createQuery(\"SELECT o FROM VariableInstanceLog o ORDER BY o.id ASC\",\n+                                                          VariableInstanceLog.class).getResultList();\n+        List<VariableInstanceLog> vil_a = original.createQuery(\"SELECT o FROM VariableInstanceLog o ORDER BY o.id ASC\",\n+                                                               VariableInstanceLog.class).getResultList();\n+        Assertions.assertThat(vil).containsExactlyElementsOf(vil_a);\n+\n+        List<BAMTaskSummaryImpl> btl = audit.createQuery(\"SELECT o FROM BAMTaskSummaryImpl o ORDER BY o.pk ASC\",\n+                                                         BAMTaskSummaryImpl.class).getResultList();\n+        List<BAMTaskSummaryImpl> btl_a = original.createQuery(\"SELECT o FROM BAMTaskSummaryImpl o ORDER BY o.pk ASC\",\n+                                                              BAMTaskSummaryImpl.class).getResultList();\n+        Assertions.assertThat(btl).containsExactlyElementsOf(btl_a);\n+\n+        // here we have a problem as TaskVariableImpl are removed in the original db after process is gone\n+        // so audit table well have more entries than the original\n+        List<TaskVariableImpl> tvl = audit.createQuery(\"SELECT o FROM TaskVariableImpl o ORDER BY o.id ASC\",\n+                                                       TaskVariableImpl.class).getResultList();\n+        List<TaskVariableImpl> tvl_a = original.createQuery(\"SELECT o FROM TaskVariableImpl o ORDER BY o.id ASC\",\n+                                                            TaskVariableImpl.class).getResultList();\n+        Assertions.assertThat(tvl).containsAll(tvl_a);\n+\n+        List<AuditTaskImpl> atl = audit.createQuery(\"SELECT o FROM AuditTaskImpl o ORDER BY o.id ASC\",\n+                                                    AuditTaskImpl.class).getResultList();\n+        List<AuditTaskImpl> atl_a = original.createQuery(\"SELECT o FROM AuditTaskImpl o ORDER BY o.id ASC\",\n+                                                         AuditTaskImpl.class).getResultList();\n+        Assertions.assertThat(atl).containsExactlyElementsOf(atl_a);\n+\n+        List<TaskEventImpl> tel = audit.createQuery(\"SELECT o FROM TaskEventImpl o ORDER BY o.id ASC\",\n+                                                    TaskEventImpl.class).getResultList();\n+        List<TaskEventImpl> tel_a = original.createQuery(\"SELECT o FROM TaskEventImpl o ORDER BY o.id ASC\",\n+                                                         TaskEventImpl.class).getResultList();\n+        Assertions.assertThat(tel).containsExactlyElementsOf(tel_a);\n+\n+        original.close();\n+        audit.close();\n+        return true;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcyMzE4Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474723187", "bodyText": "com.google.common.io.Files class is marked as @Beta - maybe, we can use following class instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        fos.write(Files.toByteArray(new File(resource + \"/pom.xml\")));\n          \n          \n            \n                        fos.write(org.apache.commons.io.FileUtils.readFileToByteArray(new File(resource + \"/pom.xml\")));", "author": "afalhambra", "createdAt": "2020-08-21T14:10:56Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/KieJarBuildHelper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static org.kie.scanner.KieMavenRepository.getKieMavenRepository;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.appformer.maven.integration.MavenRepository;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.Message;\n+import org.kie.scanner.KieMavenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.io.Files;\n+\n+public class KieJarBuildHelper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KieJarBuildHelper.class);\n+\n+    public static void createKieJar(String resource) {       \n+        \n+        KieServices ks = KieServices.get();\n+        KieBuilder kieBuilder = ks.newKieBuilder(new File(resource));\n+        KieBuilder build = kieBuilder.buildAll();\n+        InternalKieModule kjar = (InternalKieModule) build.getKieModule();\n+\n+        List<Message> messages = kieBuilder.buildAll().getResults().getMessages();\n+        if (!messages.isEmpty()) {\n+            for (Message message : messages) {\n+                LOGGER.error(\"Error Message: ({}) {}\", message.getPath(), message.getText());\n+            }\n+            throw new RuntimeException(\"There are errors building the package, please check your knowledge assets!\");\n+        }\n+        \n+        String pomFileName = MavenRepository.toFileName(kjar.getReleaseId(), null) + \".pom\";\n+        File pomFile = new File(System.getProperty(\"java.io.tmpdir\"), pomFileName);\n+        try (FileOutputStream fos = new FileOutputStream(pomFile)) {\n+            fos.write(Files.toByteArray(new File(resource + \"/pom.xml\")));", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcyODI4MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474728281", "bodyText": "logging should be moved to logback-test.xml file", "author": "afalhambra", "createdAt": "2020-08-21T14:19:30Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/resources/application-integrationtest.properties", "diffHunk": "@@ -0,0 +1,66 @@\n+#\n+# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties\n+#\n+#server configuration\n+server.address=0.0.0.0\n+server.port=8090\n+\n+cxf.path=/rest\n+cxf.jaxrs.classes-scan=true\n+cxf.jaxrs.classes-scan-packages=com.company.service\n+\n+\n+\n+#kie server config\n+kieserver.serverId=business-application-service\n+kieserver.serverName=business-application-service\n+kieserver.location=http://localhost:8090/rest/server\n+#kieserver.controllers=\n+\n+\n+#kie server capabilities\n+kieserver.drools.enabled=true\n+kieserver.dmn.enabled=true\n+kieserver.jbpm.enabled=true\n+kieserver.jbpmui.enabled=true\n+kieserver.casemgmt.enabled=true\n+kieserver.history.url=http://localhost:8095\n+\n+#audit replication configuration\n+kieserver.audit-replication.producer=true\n+kieserver.audit-replication.consumer=true\n+kieserver.audit-replication.queue=audit-queue\n+amqphub.amqp10jms.remote-url=amqp://localhost:10022\n+amqphub.amqp10jms.pool.enabled=true\n+#kieserver.prometheus.enabled=true\n+\n+\n+logging.level.root=INFO\n+logging.level.org.apache.activemq=WARN", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDczMTg5Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474731897", "bodyText": "not needed", "author": "afalhambra", "createdAt": "2020-08-21T14:24:53Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/resources/application-integrationtest.properties", "diffHunk": "@@ -0,0 +1,66 @@\n+#\n+# https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties\n+#\n+#server configuration\n+server.address=0.0.0.0\n+server.port=8090\n+\n+cxf.path=/rest\n+cxf.jaxrs.classes-scan=true\n+cxf.jaxrs.classes-scan-packages=com.company.service", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDczMzAzNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474733034", "bodyText": "This file is not needed here", "author": "afalhambra", "createdAt": "2020-08-21T14:26:47Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/resources/kjar/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/target/", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDczNzE0Ng==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474737146", "bodyText": "Nodes are not connected through wires", "author": "afalhambra", "createdAt": "2020-08-21T14:33:15Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/resources/kjar/src/main/resources/SimpleHumanTaskProcess.bpmn2", "diffHunk": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDczNzQzNg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r474737436", "bodyText": "Nodes are not connected through wires", "author": "afalhambra", "createdAt": "2020-08-21T14:33:45Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/resources/kjar/src/main/resources/SimpleProcess.bpmn2", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NDE2NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475394164", "bodyText": "Please remove unused import statements.", "author": "afalhambra", "createdAt": "2020-08-24T07:29:18Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NDMxMw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475394313", "bodyText": "Not needed for the test case", "author": "afalhambra", "createdAt": "2020-08-24T07:29:37Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NTAyNQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475395025", "bodyText": "Exception is never thrown within this code", "author": "afalhambra", "createdAt": "2020-08-24T07:31:03Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NTE3NA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475395174", "bodyText": "Exception is never thrown within this code", "author": "afalhambra", "createdAt": "2020-08-24T07:31:23Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5OTE5MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475399191", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Thread.sleep(1000L);\n          \n          \n            \n                    Thread.sleep(TIMEOUT);", "author": "afalhambra", "createdAt": "2020-08-24T07:39:51Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwNTYxNw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475405617", "bodyText": "can be converted to a local variable in configure method.", "author": "afalhambra", "createdAt": "2020-08-24T07:51:38Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/OverrideId.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.io.Serializable;\n+import java.util.Properties;\n+\n+import org.hibernate.HibernateException;\n+import org.hibernate.MappingException;\n+import org.hibernate.engine.spi.SharedSessionContractImplementor;\n+import org.hibernate.id.Configurable;\n+import org.hibernate.id.IdentifierGenerator;\n+import org.hibernate.service.ServiceRegistry;\n+import org.hibernate.type.Type;\n+\n+public class OverrideId implements IdentifierGenerator, Configurable {\n+\tprivate String entityName;", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwNzAzMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475407032", "bodyText": "Use TimeUnit.SECONDS.sleep instead.", "author": "afalhambra", "createdAt": "2020-08-24T07:54:24Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQxODI1Mw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475418253", "bodyText": "Maybe we can call this method in an @After annotation so we don't need to call it in every single test method", "author": "afalhambra", "createdAt": "2020-08-24T08:15:44Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.CoreQueueConfiguration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.api.admin.UserTaskAdminService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.jbpm.services.task.impl.model.UserImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.api.task.UserGroupCallback;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 1000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    @Autowired\n+    private UserTaskAdminService userTaskAdminService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();\n+    }\n+\n+    @Before\n+    public void reset() throws Exception {\n+\n+        \n+        KieContainerResource resource = new KieContainerResource();\n+        resource.setReleaseId(new ReleaseId(\"org.kie\", \"spring-boot-kjar-test\", \"1.0.0-SNAPSHOT\"));\n+        resource.addConfigItem(new KieServerConfigItem());\n+        kieServer.createContainer(\"test\", resource);\n+\n+        clearDatasource(datasourceOriginal);\n+        clearDatasource(datasourceReplica);\n+    }\n+\n+    @Test\n+    public void testSimpleProcess() throws Exception {\n+        processService.startProcess(\"test\", \"kjar.simple-process\");\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.claim(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.saveContentFromUser(e, USER_GENERIC, singletonMap(\"my key 1\",\n+                                                                                             \"my value 1\")));\n+        tasks.forEach(e -> userTaskService.suspend(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.resume(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.complete(e, USER_GENERIC, emptyMap()));\n+\n+        Thread.sleep(1000L);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskSkipProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+\n+        tasks.forEach(e -> userTaskService.release(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.forward(e, USER_GENERIC, USER_NOMINATED));\n+        tasks.forEach(e -> userTaskService.skip(e, USER_NOMINATED));\n+        \n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskExitProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.exit(e, USER_ADMIN));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    @Test\n+    public void testSimpleHumanTaskFailProcess() throws Exception {\n+        Long processInstanceId = processService.startProcess(\"test\", \"kjar.simple-ht-process\", singletonMap(\"my var\",\n+                                                                                                            \"my var value\"));\n+        List<Long> tasks = runtimeDataService.getTasksByProcessInstanceId(processInstanceId);\n+        tasks.forEach(e -> userTaskService.start(e, USER_GENERIC));\n+        tasks.forEach(e -> userTaskService.fail(e, USER_ADMIN, emptyMap()));\n+\n+        Thread.sleep(TIMEOUT);\n+        compareData();\n+    }\n+\n+    private boolean compareData() {", "originalCommit": "1a53594f571f8a3f1f75c90cbf28aa2c7f7c3eff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyOTA1MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475629051", "bodyText": "assert should be in the test method.", "author": "elguardian", "createdAt": "2020-08-24T13:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQxODI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwOTg2MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475509861", "bodyText": "typo\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {\n          \n          \n            \n            public class AuditDataReplicationBAMTaskSummaryListenerProducer extends DefaultTaskEventListener {", "author": "afalhambra", "createdAt": "2020-08-24T10:38:02Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationBAMTaskSumaryListenerProducer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import org.jbpm.services.task.events.DefaultTaskEventListener;\n+import org.jbpm.services.task.lifecycle.listeners.BAMTaskEventListener;\n+import org.kie.api.task.TaskEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import static org.kie.server.spring.boot.autoconfiguration.audit.replication.MessageType.BAM_TASK_EVENT;\n+\n+public class AuditDataReplicationBAMTaskSumaryListenerProducer extends DefaultTaskEventListener {", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxOTk0MA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r476219940", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-25T06:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwOTg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTExNA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475525114", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AtomicLong messagesProcessed = new AtomicLong();\n          \n          \n            \n                private AtomicLong processedMessages = new AtomicLong();", "author": "afalhambra", "createdAt": "2020-08-24T11:10:57Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AbstractAuditDataReplicationJMSConsumer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import com.thoughtworks.xstream.XStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public abstract class AbstractAuditDataReplicationJMSConsumer {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AbstractAuditDataReplicationJMSConsumer.class);\n+\n+    @Autowired\n+    private XStream xstream;\n+\n+    private EntityManagerFactory emf;\n+\n+    private AtomicLong messagesProcessed = new AtomicLong();", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMDI2Nw==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475630267", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T13:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNjAyOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475526028", "bodyText": "This bean is more generic, so it might be either a queue or a topic, so I would rename it to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Bean(name=\"auditDataReplicationQueueConsumer\")\n          \n          \n            \n                @Bean(name=\"auditDataReplicationConsumer\")", "author": "afalhambra", "createdAt": "2020-08-24T11:12:53Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/main/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.jbpm.springboot.autoconfigure.EntityManagerFactoryHelper;\n+import org.jbpm.springboot.autoconfigure.JBPMAutoConfiguration;\n+import org.kie.api.event.process.ProcessEventListener;\n+import org.kie.api.task.TaskLifeCycleEventListener;\n+import org.kie.server.services.impl.KieServerImpl;\n+import org.kie.server.springboot.autoconfiguration.KieServerProperties;\n+import org.kie.soup.xstream.XStreamUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+@Configuration\n+@ConditionalOnClass({KieServerImpl.class})\n+@AutoConfigureAfter({JBPMAutoConfiguration.class})\n+@EnableConfigurationProperties(KieServerProperties.class)\n+public class AuditDataReplicationKieServerAutoConfiguration {\n+\n+    private static Logger logger = LoggerFactory.getLogger(AuditDataReplicationKieServerAutoConfiguration.class);\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private Environment env;\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"jmsSender\")\n+    public JMSSender createAuditDataReplicationSender() {\n+        if (env.containsProperty(\"kieserver.audit-replication.queue\")) {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.queue\");\n+            return new JMSSender(endpointName);\n+        } else {\n+            String endpointName = env.getProperty(\"kieserver.audit-replication.topic\");\n+            return new JMSSender(endpointName);\n+        }\n+    }\n+\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"xstreamBean\")\n+    public XStream createXStream() {\n+        XStream xstream = XStreamUtils.createTrustingXStream();\n+        String[] voidDeny = {\"void.class\", \"Void.class\"};\n+        xstream.denyTypes(voidDeny);\n+        return xstream;\n+    }\n+\n+    @Bean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnMissingBean(name = \"auditEntityManagerFactory\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.consumer\", havingValue = \"true\")\n+    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaProperties jpaProperties) {\n+        return EntityManagerFactoryHelper.create(applicationContext,\n+                                                 dataSource,\n+                                                 jpaProperties,\n+                                                 \"org.jbpm.audit\",\n+                                                 \"classpath:/META-INF/jbpm-audit-persistence.xml\");\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationProcessEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public ProcessEventListener createrocessEventListenerProducer() {\n+        logger.info(\"Adding AuditDataReplicationProcessEvent from data replication\");\n+        return new AuditDataReplicationProcessEventProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationTaskLifeCycleEventListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createTaskLifeCycleEventListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationTaskLifeCycleEventListenerProducer from data replication\");\n+        return new AuditDataReplicationTaskLifeCycleEventListenerProducer();\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean(name = \"auditDataReplicationBAMTaskSumaryListenerProducer\")\n+    @ConditionalOnProperty(name = \"kieserver.audit-replication.producer\", havingValue = \"true\")\n+    public TaskLifeCycleEventListener createBAMTaskSummaryListener(EntityManagerFactory emf) {\n+        logger.info(\"Adding AuditDataReplicationBAMTaskSumaryListenerProducer from data replication\");\n+        return new AuditDataReplicationBAMTaskSumaryListenerProducer();\n+    }\n+\n+    @Bean(name=\"auditDataReplicationQueueConsumer\")", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTE5MQ==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475631191", "bodyText": "done", "author": "elguardian", "createdAt": "2020-08-24T13:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNjAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzOTEyMg==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475539122", "bodyText": "It might be worth removing data and transactions-logs folders after test case execution. It will fail next test otherwise.", "author": "afalhambra", "createdAt": "2020-08-24T11:40:02Z", "path": "kie-spring-boot/kie-spring-boot-autoconfiguration/kie-server-spring-boot-autoconfiguration-audit-replication/src/test/java/org/kie/server/spring/boot/autoconfiguration/audit/replication/AuditDataReplicationKieServerTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package org.kie.server.spring.boot.autoconfiguration.audit.replication;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonMap;\n+\n+import java.sql.Connection;\n+import java.sql.Statement;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.sql.DataSource;\n+\n+import org.apache.activemq.artemis.core.config.Configuration;\n+import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;\n+import org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ;\n+import org.assertj.core.api.Assertions;\n+import org.jbpm.process.audit.NodeInstanceLog;\n+import org.jbpm.process.audit.VariableInstanceLog;\n+import org.jbpm.services.api.ProcessService;\n+import org.jbpm.services.api.RuntimeDataService;\n+import org.jbpm.services.api.UserTaskService;\n+import org.jbpm.services.task.audit.impl.model.AuditTaskImpl;\n+import org.jbpm.services.task.audit.impl.model.BAMTaskSummaryImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskEventImpl;\n+import org.jbpm.services.task.audit.impl.model.TaskVariableImpl;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.runtime.manager.audit.ProcessInstanceLog;\n+import org.kie.server.api.model.KieContainerResource;\n+import org.kie.server.api.model.KieServerConfigItem;\n+import org.kie.server.api.model.ReleaseId;\n+import org.kie.server.services.api.KieServer;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK, classes = ApplicationSender.class)\n+@TestPropertySource(locations = \"classpath:application-integrationtest.properties\")\n+public class AuditDataReplicationKieServerTest {\n+\n+    private static final Long TIMEOUT = 10000L;\n+    private static final String USER_GENERIC = \"salaboy\";\n+    private static final String USER_NOMINATED = \"krisv\";\n+    private static final String USER_ADMIN = \"Administrator\";\n+\n+    @Autowired\n+    private EntityManagerFactory originalEntityManagerFactory;\n+\n+    @Autowired\n+    @Qualifier(\"auditEntityManagerFactory\")\n+    private EntityManagerFactory auditEntityManagerFactory;\n+\n+    @Autowired\n+    private DataSource datasourceOriginal;\n+\n+    @Autowired\n+    @Qualifier(\"datasource-replica\")\n+    private DataSource datasourceReplica;\n+\n+    @Autowired\n+    private KieServer kieServer;\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private RuntimeDataService runtimeDataService;\n+\n+    @Autowired\n+    private UserTaskService userTaskService;\n+\n+    protected static final EmbeddedActiveMQ embedded = new EmbeddedActiveMQ();\n+\n+    @Autowired\n+    @Qualifier(\"auditDataReplicationQueueConsumer\")\n+    private  AuditDataReplicationJMSQueueConsumer consumer;\n+\n+    @BeforeClass\n+    public static void startUp() throws Exception {\n+        KieJarBuildHelper.createKieJar(\"src/test/resources/kjar/\");\n+        Configuration config = new ConfigurationImpl();\n+        config.setSecurityEnabled(false);\n+        config.addAcceptorConfiguration(\"amqp-acceptor\", \"tcp://localhost:10022?protocols=AMQP\");\n+        embedded.setConfiguration(config);\n+        embedded.start();\n+        \n+    }\n+\n+    @AfterClass\n+    public static void shutDown() throws Exception {\n+        embedded.stop();", "originalCommit": "f5148b1f515a316b8a3158e34894254ac4a3bba7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTQyOA==", "url": "https://github.com/kiegroup/droolsjbpm-integration/pull/2191#discussion_r475631428", "bodyText": "in post integration test pom.xml", "author": "elguardian", "createdAt": "2020-08-24T13:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzOTEyMg=="}], "type": "inlineReview"}, {"oid": "a6f5fc0bc2a660455b8394f147e32a395133d125", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/a6f5fc0bc2a660455b8394f147e32a395133d125", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-24T14:06:23Z", "type": "forcePushed"}, {"oid": "f94fb061f7f90f084cb9086804f90c2d91c229ea", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f94fb061f7f90f084cb9086804f90c2d91c229ea", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-25T06:48:14Z", "type": "forcePushed"}, {"oid": "60774947bc23e405ed29e13c941212dc4ecd635c", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/60774947bc23e405ed29e13c941212dc4ecd635c", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot\n\nadded spring boot starter amqp replication", "committedDate": "2020-08-25T11:07:13Z", "type": "forcePushed"}, {"oid": "f3d3753df936f103d58b18e5a96dad22d33dd959", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f3d3753df936f103d58b18e5a96dad22d33dd959", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-26T09:21:57Z", "type": "commit"}, {"oid": "f3d3753df936f103d58b18e5a96dad22d33dd959", "url": "https://github.com/kiegroup/droolsjbpm-integration/commit/f3d3753df936f103d58b18e5a96dad22d33dd959", "message": "[JBPM-9277] JMS Audit Data Replication in spring boot", "committedDate": "2020-08-26T09:21:57Z", "type": "forcePushed"}]}