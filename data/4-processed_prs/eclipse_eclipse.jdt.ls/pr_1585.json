{"pr_number": 1585, "pr_title": "Infer expressions if there is no selection range when extracting method", "pr_createdAt": "2020-10-28T08:34:32Z", "pr_url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585", "timeline": [{"oid": "750bdaeffed5ade55a8d62325526b810c53bbabd", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/750bdaeffed5ade55a8d62325526b810c53bbabd", "message": "Infer expressions if there is no selection range when extracting method\n\nSigned-off-by: Shi Chen <chenshi@microsoft.com>", "committedDate": "2020-10-28T11:11:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MjcyMQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r518672721", "bodyText": "Since infer is a verb, i would prefer to name it as inferSelection instead of getInferSelection", "author": "testforstephen", "createdAt": "2020-11-06T10:52:35Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/JDTLanguageServer.java", "diffHunk": "@@ -939,6 +941,12 @@ public void didChangeWorkspaceFolders(DidChangeWorkspaceFoldersParams params) {\n \t\treturn computeAsync((monitor) -> GetRefactorEditHandler.getEditsForRefactor(params));\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<List<InferSelection>> getInferSelection(GetInferSelectionParams params) {", "originalCommit": "b611d4fc0eee5a1b30f1c075e053a0215f95549c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxNjE3Nw==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521216177", "bodyText": "Make sense.", "author": "CsCherrYY", "createdAt": "2020-11-11T09:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MjcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3NzU3Mg==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r518677572", "bodyText": "InferSelection -> SelectionInfo.", "author": "testforstephen", "createdAt": "2020-11-06T10:59:59Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class GetInferSelectionHandler {\n+\n+\tpublic static List<InferSelection> getInferSelectionsForRefactor(GetInferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tMap formatterOptions = params.options == null ? null : FormatterHandler.getOptions(params.options, unit);\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<InferSelection> extractMethodInfos = new ArrayList<InferSelection>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength(), formatterOptions);\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new InferSelection(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class InferSelection {", "originalCommit": "b611d4fc0eee5a1b30f1c075e053a0215f95549c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4MjMzNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521182334", "bodyText": "When inferring a possible expression for the refactoring operation, formatting options is not needed.", "author": "testforstephen", "createdAt": "2020-11-11T08:06:19Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class GetInferSelectionHandler {\n+\n+\tpublic static List<InferSelection> getInferSelectionsForRefactor(GetInferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tMap formatterOptions = params.options == null ? null : FormatterHandler.getOptions(params.options, unit);\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<InferSelection> extractMethodInfos = new ArrayList<InferSelection>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength(), formatterOptions);\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new InferSelection(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class InferSelection {\n+\t\tpublic String name;\n+\t\tpublic int startPosition;\n+\t\tpublic int length;\n+\n+\t\tpublic InferSelection(String name, int startPosition, int length) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.startPosition = startPosition;\n+\t\t\tthis.length = length;\n+\t\t}\n+\t}\n+\n+\tpublic static class GetInferSelectionParams {\n+\t\tpublic String command;\n+\t\tpublic CodeActionParams context;\n+\t\tpublic FormattingOptions options;", "originalCommit": "c504bd962f6bc18ddcd9dbe17ffcca644560e342", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxODIxNA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521218214", "bodyText": "Will remove this unnecessary field.", "author": "CsCherrYY", "createdAt": "2020-11-11T09:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4MjMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NTUwNQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521185505", "bodyText": "This is duplicated with InferSelection class under file GetInferSelectionHandler.java.", "author": "testforstephen", "createdAt": "2020-11-11T08:13:15Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/text/correction/RefactorProposalUtility.java", "diffHunk": "@@ -844,4 +862,16 @@ public boolean isMoveAvaiable() {\n \t\t\treturn !supportedDestinationKinds.isEmpty();\n \t\t}\n \t}\n+\n+\tpublic static class ExtractMethodInfo {", "originalCommit": "c504bd962f6bc18ddcd9dbe17ffcca644560e342", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxODU4MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521218581", "bodyText": "Will use InferSelection instead of this class.", "author": "CsCherrYY", "createdAt": "2020-11-11T09:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4NTUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE4Njg2MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521186860", "bodyText": "startPosition -> offset", "author": "testforstephen", "createdAt": "2020-11-11T08:16:00Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/GetInferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class GetInferSelectionHandler {\n+\n+\tpublic static List<InferSelection> getInferSelectionsForRefactor(GetInferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tMap formatterOptions = params.options == null ? null : FormatterHandler.getOptions(params.options, unit);\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<InferSelection> extractMethodInfos = new ArrayList<InferSelection>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength(), formatterOptions);\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new InferSelection(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class InferSelection {\n+\t\tpublic String name;\n+\t\tpublic int startPosition;", "originalCommit": "c504bd962f6bc18ddcd9dbe17ffcca644560e342", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3MTU5MQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521271591", "bodyText": "remove FormattingOptions options", "author": "testforstephen", "createdAt": "2020-11-11T10:46:46Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/InferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class InferSelectionHandler {\n+\n+\tpublic static List<SelectionInfo> inferSelectionsForRefactor(InferSelectionParams params) {\n+\t\tfinal ICompilationUnit unit = JDTUtils.resolveCompilationUnit(params.context.getTextDocument().getUri());\n+\t\tif (unit == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tint start = DiagnosticsHelper.getStartOffset(unit, params.context.getRange());\n+\t\tint end = DiagnosticsHelper.getEndOffset(unit, params.context.getRange());\n+\t\tInnovationContext context = new InnovationContext(unit, start, end - start);\n+\t\tList<SelectionInfo> extractMethodInfos = new ArrayList<SelectionInfo>();\n+\t\tASTNode parent = context.getCoveringNode();\n+\t\ttry {\n+\t\t\tif (RefactorProposalUtility.EXTRACT_METHOD_COMMAND.equals(params.command)) {\n+\t\t\t\twhile (parent != null && parent instanceof Expression) {\n+\t\t\t\t\tif (parent instanceof ParenthesizedExpression) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tExtractMethodRefactoring refactoring = new ExtractMethodRefactoring(context.getASTRoot(), parent.getStartPosition(), parent.getLength());\n+\t\t\t\t\tif (refactoring.checkInitialConditions(new NullProgressMonitor()).isOK()) {\n+\t\t\t\t\t\textractMethodInfos.add(new SelectionInfo(parent.toString(), parent.getStartPosition(), parent.getLength()));\n+\t\t\t\t\t}\n+\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (CoreException e) {\n+\t\t\t// do nothing.\n+\t\t}\n+\n+\t\tif (extractMethodInfos.size() == 0) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn extractMethodInfos;\n+\t}\n+\n+\tpublic static class SelectionInfo {\n+\t\tpublic String name;\n+\t\tpublic int offset;\n+\t\tpublic int length;\n+\n+\t\tpublic SelectionInfo(String name, int offset, int length) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.offset = offset;\n+\t\t\tthis.length = length;\n+\t\t}\n+\t}\n+\n+\tpublic static class InferSelectionParams {\n+\t\tpublic String command;\n+\t\tpublic CodeActionParams context;\n+\n+\t\tpublic InferSelectionParams(String command, CodeActionParams context, FormattingOptions options) {", "originalCommit": "84d88aa49edf17dc5e3f02523f2a80924c2006af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MDg5OQ==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521360899", "bodyText": "would you add some unit tests for this?", "author": "testforstephen", "createdAt": "2020-11-11T13:34:23Z", "path": "org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/InferSelectionHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Microsoft Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License 2.0\n+ * which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Microsoft Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package org.eclipse.jdt.ls.core.internal.handlers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jdt.core.ICompilationUnit;\n+import org.eclipse.jdt.core.dom.ASTNode;\n+import org.eclipse.jdt.core.dom.Expression;\n+import org.eclipse.jdt.core.dom.ParenthesizedExpression;\n+import org.eclipse.jdt.ls.core.internal.JDTUtils;\n+import org.eclipse.jdt.ls.core.internal.corext.refactoring.code.ExtractMethodRefactoring;\n+import org.eclipse.jdt.ls.core.internal.corrections.DiagnosticsHelper;\n+import org.eclipse.jdt.ls.core.internal.corrections.InnovationContext;\n+import org.eclipse.jdt.ls.core.internal.text.correction.RefactorProposalUtility;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.FormattingOptions;\n+\n+public class InferSelectionHandler {\n+\n+\tpublic static List<SelectionInfo> inferSelectionsForRefactor(InferSelectionParams params) {", "originalCommit": "22ac04eba16b06488086cc8f0b4c82ec71d275aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2Mjk1MA==", "url": "https://github.com/eclipse/eclipse.jdt.ls/pull/1585#discussion_r521362950", "bodyText": "Sure. I will add some then.", "author": "CsCherrYY", "createdAt": "2020-11-11T13:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2MDg5OQ=="}], "type": "inlineReview"}, {"oid": "58af60874f9cd7645de4f9cc6e25fabdb19bd9b0", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/58af60874f9cd7645de4f9cc6e25fabdb19bd9b0", "message": "Infer expressions if there is no selection range\n\nSigned-off-by: Shi Chen <chenshi@microsoft.com>", "committedDate": "2020-11-13T03:59:59Z", "type": "commit"}, {"oid": "58af60874f9cd7645de4f9cc6e25fabdb19bd9b0", "url": "https://github.com/eclipse/eclipse.jdt.ls/commit/58af60874f9cd7645de4f9cc6e25fabdb19bd9b0", "message": "Infer expressions if there is no selection range\n\nSigned-off-by: Shi Chen <chenshi@microsoft.com>", "committedDate": "2020-11-13T03:59:59Z", "type": "forcePushed"}]}