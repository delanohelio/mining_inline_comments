{"pr_number": 465, "pr_title": "XRDDEV-963 add service client access rights", "pr_createdAt": "2020-04-16T07:32:44Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/465", "timeline": [{"oid": "81847f5a19cc94fa95b0c10850ec0a80463c1a00", "url": "https://github.com/nordic-institute/X-Road/commit/81847f5a19cc94fa95b0c10850ec0a80463c1a00", "message": "XRDDEV-963 add controller method, service client parameter processing. Tests fail.", "committedDate": "2020-04-14T14:36:15Z", "type": "commit"}, {"oid": "114b721225cb6bf1b83993558ebbf4a2ef27f07a", "url": "https://github.com/nordic-institute/X-Road/commit/114b721225cb6bf1b83993558ebbf4a2ef27f07a", "message": "fix broken tests", "committedDate": "2020-04-15T05:48:46Z", "type": "commit"}, {"oid": "062c750d71279b692cd123156f814280d0b67f4a", "url": "https://github.com/nordic-institute/X-Road/commit/062c750d71279b692cd123156f814280d0b67f4a", "message": "XRDDEV-963 add untested accessRightService.addServiceClientAccessRights and controller implementation, refactor accessRightService", "committedDate": "2020-04-15T12:30:40Z", "type": "commit"}, {"oid": "bea5c34d1575b2790f45adbd7fa168274f26e201", "url": "https://github.com/nordic-institute/X-Road/commit/bea5c34d1575b2790f45adbd7fa168274f26e201", "message": "XRDDEV-963 make add addServiceClientAccessRights return correct response objects", "committedDate": "2020-04-15T14:02:37Z", "type": "commit"}, {"oid": "cc2cb55995c5e985fd0bb894576049d8697dbcb0", "url": "https://github.com/nordic-institute/X-Road/commit/cc2cb55995c5e985fd0bb894576049d8697dbcb0", "message": "XRDDEV-963 fix bad duplicate access right check", "committedDate": "2020-04-15T15:04:37Z", "type": "commit"}, {"oid": "ae793221541775c986cbfa5e7c8f8bad4f5d4f80", "url": "https://github.com/nordic-institute/X-Road/commit/ae793221541775c986cbfa5e7c8f8bad4f5d4f80", "message": "XRDDEV-963 fix test", "committedDate": "2020-04-15T20:26:29Z", "type": "commit"}, {"oid": "a4b84f8370ce921c06109dd2553bcf394d6c8a7b", "url": "https://github.com/nordic-institute/X-Road/commit/a4b84f8370ce921c06109dd2553bcf394d6c8a7b", "message": "XRDDEV-963 add some accessRightService tests", "committedDate": "2020-04-15T20:27:15Z", "type": "commit"}, {"oid": "a6aeb18ad51fbc2e3cce9e8717907ea0a3a0ea6d", "url": "https://github.com/nordic-institute/X-Road/commit/a6aeb18ad51fbc2e3cce9e8717907ea0a3a0ea6d", "message": "XRDDEV-963 add controller test and more service tests", "committedDate": "2020-04-15T21:50:45Z", "type": "commit"}, {"oid": "445aed7256f3af7984b58bc1c1edae11f8a6af64", "url": "https://github.com/nordic-institute/X-Road/commit/445aed7256f3af7984b58bc1c1edae11f8a6af64", "message": "XRDDEV-963 add EndpointServiceIntegrationTest, refactor", "committedDate": "2020-04-15T22:26:35Z", "type": "commit"}, {"oid": "a7f24155feb0080565f3d20feba0744190923070", "url": "https://github.com/nordic-institute/X-Road/commit/a7f24155feb0080565f3d20feba0744190923070", "message": "XRDDEV-963 cleanup for TODOs", "committedDate": "2020-04-15T23:17:03Z", "type": "commit"}, {"oid": "95f46965e97e79404eacf3c4c8699e382b946048", "url": "https://github.com/nordic-institute/X-Road/commit/95f46965e97e79404eacf3c4c8699e382b946048", "message": "XRDDEV-963 fix sonarqube complexity errors", "committedDate": "2020-04-16T12:54:42Z", "type": "commit"}, {"oid": "dcd70ec80d21bcb0e10343d2f4bb40de9930ed17", "url": "https://github.com/nordic-institute/X-Road/commit/dcd70ec80d21bcb0e10343d2f4bb40de9930ed17", "message": "Merge branch 'XRDDEV-961_XRDDEV-956' into XRDDEV-963-add-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/LocalGroupService.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ClientsApiControllerIntegrationTest.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/EndpointsApiControllerTest.java", "committedDate": "2020-04-16T16:48:48Z", "type": "commit"}, {"oid": "0cc3c6605ef83ef4e4fa319522ab98c5f3cb56a9", "url": "https://github.com/nordic-institute/X-Road/commit/0cc3c6605ef83ef4e4fa319522ab98c5f3cb56a9", "message": "XRDDEV-936 add better error for bad service client id", "committedDate": "2020-04-17T07:11:54Z", "type": "commit"}, {"oid": "ffcd4dbb770c961feec718f5e3f865a9c78341f9", "url": "https://github.com/nordic-institute/X-Road/commit/ffcd4dbb770c961feec718f5e3f865a9c78341f9", "message": "Merge branch 'XRDDEV-961_XRDDEV-956' into XRDDEV-963-add-service-client-access-rights", "committedDate": "2020-04-20T12:17:43Z", "type": "commit"}, {"oid": "66f7c8cffc405bf5462dc0b5b76a8cd06100b5b6", "url": "https://github.com/nordic-institute/X-Road/commit/66f7c8cffc405bf5462dc0b5b76a8cd06100b5b6", "message": "Merge branch 'XRDDEV-961_XRDDEV-956' into XRDDEV-963-add-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/GlobalConfService.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceClientService.java", "committedDate": "2020-04-21T05:56:19Z", "type": "commit"}, {"oid": "4bfb4104788e4eb8deda0e698f4d08237c4dffd1", "url": "https://github.com/nordic-institute/X-Road/commit/4bfb4104788e4eb8deda0e698f4d08237c4dffd1", "message": "XRDDEV-963 add test for serviceClient.rights_given_at", "committedDate": "2020-04-21T09:23:03Z", "type": "commit"}, {"oid": "f4758c20fc580f79f679a9dc04b976af72224be4", "url": "https://github.com/nordic-institute/X-Road/commit/f4758c20fc580f79f679a9dc04b976af72224be4", "message": "XRDDEV-963 update openapi documentation", "committedDate": "2020-04-21T10:22:09Z", "type": "commit"}, {"oid": "cae91d3142c7c36a7f099f2bb7c9974be600b9d5", "url": "https://github.com/nordic-institute/X-Road/commit/cae91d3142c7c36a7f099f2bb7c9974be600b9d5", "message": "XRDDEV-963 refactor", "committedDate": "2020-04-21T11:07:24Z", "type": "commit"}, {"oid": "e1447f5cd865e482726850f1af514d162fa89c51", "url": "https://github.com/nordic-institute/X-Road/commit/e1447f5cd865e482726850f1af514d162fa89c51", "message": "Merge branch 'develop' into XRDDEV-963-add-service-client-access-rights", "committedDate": "2020-04-24T08:29:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk0ODU2NQ==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r417948565", "bodyText": "globalConfService is not used anymore so it can be removed from this class.", "author": "carohauta", "createdAt": "2020-04-30T11:42:36Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -313,108 +381,161 @@ private ServiceClientDto accessRightTypeToServiceClientDto(AccessRightType acces\n     }\n \n     /**\n-     * Add access rights to given endpoint\n+     * Add access rights for (possibly) multiple subjects, to a given endpoint\n      *\n-     * @param subjectIds\n-     * @param clientType\n-     * @param endpoint\n+     * @param subjectIds access rights subjects to grant access for, \"service clients\"\n+     * @param clientType endpoint owner\n+     * @param endpoint endpoint to add access rights to\n+     * @return map, key = subjectId (service client), value = list of access rights added for the subject\n+     * @throws DuplicateAccessRightException if trying to add existing access right\n+     */\n+    private Map<XRoadId, List<ServiceClientAccessRightDto>> addAccessRights(Set<XRoadId> subjectIds,\n+            ClientType clientType, EndpointType endpoint)\n+            throws DuplicateAccessRightException, LocalGroupNotFoundException {\n+        List<EndpointType> endpoints = Collections.singletonList(endpoint);\n+        return addAccessRightsInternal(subjectIds, clientType, endpoints);\n+    }\n+\n+    /**\n+     * Add access rights for (possibly) multiple subjects, to (possibly) multiple endpoints.\n+     *\n+     * This method is not intended for use from outside, but is package protected for tests.\n+     *\n+     * @param subjectIds access rights subjects to grant access for, \"service clients\"\n+     * @param clientType endpoint owner\n+     * @param endpoints endpoints to add access rights to\n+     * @return map, key = subjectId (service client), value = list of access rights added for the subject\n      * @throws DuplicateAccessRightException if trying to add existing access right\n      */\n-    private void addAccessRights(Set<XRoadId> subjectIds, ClientType clientType, EndpointType endpoint)\n+    Map<XRoadId, List<ServiceClientAccessRightDto>> addAccessRightsInternal(Set<XRoadId> subjectIds,\n+            ClientType clientType, List<EndpointType> endpoints)\n             throws DuplicateAccessRightException, LocalGroupNotFoundException {\n         Date now = new Date();\n \n-        List<LocalGroupType> clientLocalGroups = clientType.getLocalGroup();\n+        if (subjectIds == null || subjectIds.isEmpty()) {\n+            throw new IllegalArgumentException(\"missing subjectIds\");\n+        }\n+        if (endpoints == null || endpoints.isEmpty()) {\n+            throw new IllegalArgumentException(\"missing endpoints\");\n+        }\n \n-        for (XRoadId subjectId : subjectIds) {\n-            // A LocalGroup must belong to this client\n-            if (subjectId.getObjectType() == XRoadObjectType.LOCALGROUP) {\n-                LocalGroupId localGroupId = (LocalGroupId) subjectId;\n-                boolean localGroupNotFound = clientLocalGroups.stream()\n-                        .noneMatch(localGroupType -> localGroupType.getGroupCode()\n-                                .equals(localGroupId.getGroupCode()));\n-                if (localGroupNotFound) {\n-                    String errorMsg = String.format(\"LocalGroup with the groupCode %s does not belong to client %s\",\n-                            subjectId.toShortString(), clientType.getIdentifier().toShortString());\n-                    throw new LocalGroupNotFoundException(errorMsg);\n-                }\n-            }\n-            Optional<AccessRightType> existingAccessRight = clientType.getAcl().stream()\n-                    .filter(accessRightType -> accessRightType.getSubjectId().equals(subjectId))\n-                    .findFirst();\n+        Map<XRoadId, List<ServiceClientAccessRightDto>> addedAccessRights = new HashMap<>();\n \n-            if (existingAccessRight.isPresent() && existingAccessRight.get().getEndpoint().equals(endpoint)) {\n-                throw new DuplicateAccessRightException(\"Subject \" + subjectId.toShortString()\n-                        + \" already has an access right for endpoint \" + endpoint.getId());\n+        for (EndpointType endpoint: endpoints) {\n+            for (XRoadId subjectId : subjectIds) {\n+                ServiceClientAccessRightDto dto = addAccessRightInternal(clientType, now, endpoint, subjectId);\n+                List<ServiceClientAccessRightDto> addedAccessRightsForSubject = addedAccessRights\n+                        .computeIfAbsent(subjectId, k -> new ArrayList<>());\n+                addedAccessRightsForSubject.add(dto);\n             }\n-            AccessRightType newAccessRight = new AccessRightType();\n-            newAccessRight.setEndpoint(endpoint);\n-            newAccessRight.setSubjectId(subjectId);\n-            newAccessRight.setRightsGiven(now);\n-            clientType.getAcl().add(newAccessRight);\n         }\n \n         clientRepository.saveOrUpdate(clientType);\n+        return addedAccessRights;\n     }\n \n-    private Set<XRoadId> mergeSubjectIdsWithLocalgroups(Set<XRoadId> subjectIds, Set<Long> localGroupIds)\n-            throws IdentifierNotFoundException, AccessRightNotFoundException {\n-        // Get persistent entities in order to change relations\n-        Set<XRoadId> txSubjects = new HashSet<>();\n-        if (subjectIds != null && !subjectIds.isEmpty()) {\n-            txSubjects.addAll(getOrPersistSubsystemIds(subjectIds.stream()\n-                    .filter(xRoadId -> xRoadId.getObjectType() == XRoadObjectType.SUBSYSTEM)\n-                    .collect(Collectors.toSet())));\n-            txSubjects.addAll(getOrPersistGlobalGroupIds(subjectIds.stream()\n-                    .filter(xRoadId -> xRoadId.getObjectType() == XRoadObjectType.GLOBALGROUP)\n-                    .collect(Collectors.toSet())));\n-        }\n-        if (localGroupIds != null && localGroupIds.size() > 0) {\n-            Set<XRoadId> localGroupXroadIds = null;\n-            try {\n-                localGroupXroadIds = localGroupService.getLocalGroupIdsAsXroadIds(localGroupIds);\n-            } catch (LocalGroupNotFoundException e) {\n-                throw new AccessRightNotFoundException(e);\n+    /**\n+     * Add access right for a single subject (subjectId), to a single endpoint (endpoint) that belongs to clientType\n+     * @param clientType\n+     * @param rightsGiven\n+     * @param endpoint\n+     * @param subjectId\n+     * @return\n+     * @throws LocalGroupNotFoundException if local group does not exist for given client\n+     * @throws DuplicateAccessRightException if access righ already exists\n+     */\n+    private ServiceClientAccessRightDto addAccessRightInternal(ClientType clientType, Date rightsGiven,\n+            EndpointType endpoint, XRoadId subjectId)\n+            throws LocalGroupNotFoundException, DuplicateAccessRightException {\n+\n+        // A LocalGroup must belong to this client\n+        List<LocalGroupType> clientLocalGroups = clientType.getLocalGroup();\n+\n+        if (subjectId.getObjectType() == XRoadObjectType.LOCALGROUP) {\n+            LocalGroupId localGroupId = (LocalGroupId) subjectId;\n+            boolean localGroupNotFound = clientLocalGroups.stream()\n+                    .noneMatch(localGroupType -> localGroupType.getGroupCode()\n+                            .equals(localGroupId.getGroupCode()));\n+            if (localGroupNotFound) {\n+                String errorMsg = String.format(\"LocalGroup with the groupCode %s does not belong to client %s\",\n+                        subjectId.toShortString(), clientType.getIdentifier().toShortString());\n+                throw new LocalGroupNotFoundException(errorMsg);\n             }\n-            // Get LocalGroupIds from serverconf db - or save them if they don't exist\n-            Set<XRoadId> txLocalGroupXroadIds = identifierService.getOrPersistXroadIds(localGroupXroadIds);\n-            txSubjects.addAll(txLocalGroupXroadIds);\n         }\n-        return txSubjects;\n-    }\n \n-    /**\n-     * Verify that all identifiers are authentic, then get the existing ones from the local db and persist\n-     * the not-existing ones. This is a necessary step if we are changing identifier relations (such as adding\n-     * access rights to services)\n-     * @param subsystemIds {@link GlobalGroupId} or {@link ClientId}\n-     * @return List of XRoadIds ({@link GlobalGroupId} or {@link ClientId})\n-     */\n-    private Set<XRoadId> getOrPersistSubsystemIds(Set<XRoadId> subsystemIds)\n-            throws IdentifierNotFoundException {\n-        // Check that the identifiers exist in globalconf\n-        // LocalGroups must be verified separately! (they do not exist in globalconf)\n-        if (!globalConfService.clientIdentifiersExist(subsystemIds)) {", "originalCommit": "e1447f5cd865e482726850f1af514d162fa89c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNDM0Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r419224346", "bodyText": "removed", "author": "jansu76", "createdAt": "2020-05-04T05:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk0ODU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3Mjc5Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r417972793", "bodyText": "Javadoc throws not in sync (missing LocalGroupNotFoundException)", "author": "carohauta", "createdAt": "2020-04-30T12:29:21Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -313,108 +381,161 @@ private ServiceClientDto accessRightTypeToServiceClientDto(AccessRightType acces\n     }\n \n     /**\n-     * Add access rights to given endpoint\n+     * Add access rights for (possibly) multiple subjects, to a given endpoint\n      *\n-     * @param subjectIds\n-     * @param clientType\n-     * @param endpoint\n+     * @param subjectIds access rights subjects to grant access for, \"service clients\"\n+     * @param clientType endpoint owner\n+     * @param endpoint endpoint to add access rights to\n+     * @return map, key = subjectId (service client), value = list of access rights added for the subject\n+     * @throws DuplicateAccessRightException if trying to add existing access right", "originalCommit": "e1447f5cd865e482726850f1af514d162fa89c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIyNDI5OA==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r419224298", "bodyText": "Did not find this, maybe down to changes after review, but fixed some other Javadoc-throws-not-in-sync. For me checkstyle and Idea return clean result.", "author": "jansu76", "createdAt": "2020-05-04T05:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3Mjc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE0NzMyMQ==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r420147321", "bodyText": "Maybe it's fixed in the other branch? Still missing in here", "author": "carohauta", "createdAt": "2020-05-05T14:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3Mjc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2ODYzMg==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r420168632", "bodyText": "I don't know why I did not see it the first time. Now that I rechecked, LocalGroupNotFoundException is indeed missing. But I (just) removed that exception from branch https://github.com/nordic-institute/X-Road/tree/XRDDEV-962-remove-service-client-access-rights so maybe that is enough?", "author": "jansu76", "createdAt": "2020-05-05T14:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3Mjc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3OTk1Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r417979952", "bodyText": "The .get() should probably be replaced with orElse(null) for service == null to ever be true. Or am I missing something here now?\nEdit: oh yes the filtering will always return a service", "author": "carohauta", "createdAt": "2020-04-30T12:42:12Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -313,108 +381,161 @@ private ServiceClientDto accessRightTypeToServiceClientDto(AccessRightType acces\n     }\n \n     /**\n-     * Add access rights to given endpoint\n+     * Add access rights for (possibly) multiple subjects, to a given endpoint\n      *\n-     * @param subjectIds\n-     * @param clientType\n-     * @param endpoint\n+     * @param subjectIds access rights subjects to grant access for, \"service clients\"\n+     * @param clientType endpoint owner\n+     * @param endpoint endpoint to add access rights to\n+     * @return map, key = subjectId (service client), value = list of access rights added for the subject\n+     * @throws DuplicateAccessRightException if trying to add existing access right\n+     */\n+    private Map<XRoadId, List<ServiceClientAccessRightDto>> addAccessRights(Set<XRoadId> subjectIds,\n+            ClientType clientType, EndpointType endpoint)\n+            throws DuplicateAccessRightException, LocalGroupNotFoundException {\n+        List<EndpointType> endpoints = Collections.singletonList(endpoint);\n+        return addAccessRightsInternal(subjectIds, clientType, endpoints);\n+    }\n+\n+    /**\n+     * Add access rights for (possibly) multiple subjects, to (possibly) multiple endpoints.\n+     *\n+     * This method is not intended for use from outside, but is package protected for tests.\n+     *\n+     * @param subjectIds access rights subjects to grant access for, \"service clients\"\n+     * @param clientType endpoint owner\n+     * @param endpoints endpoints to add access rights to\n+     * @return map, key = subjectId (service client), value = list of access rights added for the subject\n      * @throws DuplicateAccessRightException if trying to add existing access right\n      */\n-    private void addAccessRights(Set<XRoadId> subjectIds, ClientType clientType, EndpointType endpoint)\n+    Map<XRoadId, List<ServiceClientAccessRightDto>> addAccessRightsInternal(Set<XRoadId> subjectIds,\n+            ClientType clientType, List<EndpointType> endpoints)\n             throws DuplicateAccessRightException, LocalGroupNotFoundException {\n         Date now = new Date();\n \n-        List<LocalGroupType> clientLocalGroups = clientType.getLocalGroup();\n+        if (subjectIds == null || subjectIds.isEmpty()) {\n+            throw new IllegalArgumentException(\"missing subjectIds\");\n+        }\n+        if (endpoints == null || endpoints.isEmpty()) {\n+            throw new IllegalArgumentException(\"missing endpoints\");\n+        }\n \n-        for (XRoadId subjectId : subjectIds) {\n-            // A LocalGroup must belong to this client\n-            if (subjectId.getObjectType() == XRoadObjectType.LOCALGROUP) {\n-                LocalGroupId localGroupId = (LocalGroupId) subjectId;\n-                boolean localGroupNotFound = clientLocalGroups.stream()\n-                        .noneMatch(localGroupType -> localGroupType.getGroupCode()\n-                                .equals(localGroupId.getGroupCode()));\n-                if (localGroupNotFound) {\n-                    String errorMsg = String.format(\"LocalGroup with the groupCode %s does not belong to client %s\",\n-                            subjectId.toShortString(), clientType.getIdentifier().toShortString());\n-                    throw new LocalGroupNotFoundException(errorMsg);\n-                }\n-            }\n-            Optional<AccessRightType> existingAccessRight = clientType.getAcl().stream()\n-                    .filter(accessRightType -> accessRightType.getSubjectId().equals(subjectId))\n-                    .findFirst();\n+        Map<XRoadId, List<ServiceClientAccessRightDto>> addedAccessRights = new HashMap<>();\n \n-            if (existingAccessRight.isPresent() && existingAccessRight.get().getEndpoint().equals(endpoint)) {\n-                throw new DuplicateAccessRightException(\"Subject \" + subjectId.toShortString()\n-                        + \" already has an access right for endpoint \" + endpoint.getId());\n+        for (EndpointType endpoint: endpoints) {\n+            for (XRoadId subjectId : subjectIds) {\n+                ServiceClientAccessRightDto dto = addAccessRightInternal(clientType, now, endpoint, subjectId);\n+                List<ServiceClientAccessRightDto> addedAccessRightsForSubject = addedAccessRights\n+                        .computeIfAbsent(subjectId, k -> new ArrayList<>());\n+                addedAccessRightsForSubject.add(dto);\n             }\n-            AccessRightType newAccessRight = new AccessRightType();\n-            newAccessRight.setEndpoint(endpoint);\n-            newAccessRight.setSubjectId(subjectId);\n-            newAccessRight.setRightsGiven(now);\n-            clientType.getAcl().add(newAccessRight);\n         }\n \n         clientRepository.saveOrUpdate(clientType);\n+        return addedAccessRights;\n     }\n \n-    private Set<XRoadId> mergeSubjectIdsWithLocalgroups(Set<XRoadId> subjectIds, Set<Long> localGroupIds)\n-            throws IdentifierNotFoundException, AccessRightNotFoundException {\n-        // Get persistent entities in order to change relations\n-        Set<XRoadId> txSubjects = new HashSet<>();\n-        if (subjectIds != null && !subjectIds.isEmpty()) {\n-            txSubjects.addAll(getOrPersistSubsystemIds(subjectIds.stream()\n-                    .filter(xRoadId -> xRoadId.getObjectType() == XRoadObjectType.SUBSYSTEM)\n-                    .collect(Collectors.toSet())));\n-            txSubjects.addAll(getOrPersistGlobalGroupIds(subjectIds.stream()\n-                    .filter(xRoadId -> xRoadId.getObjectType() == XRoadObjectType.GLOBALGROUP)\n-                    .collect(Collectors.toSet())));\n-        }\n-        if (localGroupIds != null && localGroupIds.size() > 0) {\n-            Set<XRoadId> localGroupXroadIds = null;\n-            try {\n-                localGroupXroadIds = localGroupService.getLocalGroupIdsAsXroadIds(localGroupIds);\n-            } catch (LocalGroupNotFoundException e) {\n-                throw new AccessRightNotFoundException(e);\n+    /**\n+     * Add access right for a single subject (subjectId), to a single endpoint (endpoint) that belongs to clientType\n+     * @param clientType\n+     * @param rightsGiven\n+     * @param endpoint\n+     * @param subjectId\n+     * @return\n+     * @throws LocalGroupNotFoundException if local group does not exist for given client\n+     * @throws DuplicateAccessRightException if access righ already exists\n+     */\n+    private ServiceClientAccessRightDto addAccessRightInternal(ClientType clientType, Date rightsGiven,\n+            EndpointType endpoint, XRoadId subjectId)\n+            throws LocalGroupNotFoundException, DuplicateAccessRightException {\n+\n+        // A LocalGroup must belong to this client\n+        List<LocalGroupType> clientLocalGroups = clientType.getLocalGroup();\n+\n+        if (subjectId.getObjectType() == XRoadObjectType.LOCALGROUP) {\n+            LocalGroupId localGroupId = (LocalGroupId) subjectId;\n+            boolean localGroupNotFound = clientLocalGroups.stream()\n+                    .noneMatch(localGroupType -> localGroupType.getGroupCode()\n+                            .equals(localGroupId.getGroupCode()));\n+            if (localGroupNotFound) {\n+                String errorMsg = String.format(\"LocalGroup with the groupCode %s does not belong to client %s\",\n+                        subjectId.toShortString(), clientType.getIdentifier().toShortString());\n+                throw new LocalGroupNotFoundException(errorMsg);\n             }\n-            // Get LocalGroupIds from serverconf db - or save them if they don't exist\n-            Set<XRoadId> txLocalGroupXroadIds = identifierService.getOrPersistXroadIds(localGroupXroadIds);\n-            txSubjects.addAll(txLocalGroupXroadIds);\n         }\n-        return txSubjects;\n-    }\n \n-    /**\n-     * Verify that all identifiers are authentic, then get the existing ones from the local db and persist\n-     * the not-existing ones. This is a necessary step if we are changing identifier relations (such as adding\n-     * access rights to services)\n-     * @param subsystemIds {@link GlobalGroupId} or {@link ClientId}\n-     * @return List of XRoadIds ({@link GlobalGroupId} or {@link ClientId})\n-     */\n-    private Set<XRoadId> getOrPersistSubsystemIds(Set<XRoadId> subsystemIds)\n-            throws IdentifierNotFoundException {\n-        // Check that the identifiers exist in globalconf\n-        // LocalGroups must be verified separately! (they do not exist in globalconf)\n-        if (!globalConfService.clientIdentifiersExist(subsystemIds)) {\n-            // This exception should be pretty rare since it only occurs if bogus subjects are found\n-            throw new IdentifierNotFoundException();\n+        // list endpoints, which this subject / service client has already been granted access to\n+        Set<EndpointType> existingAccessibleEndpoints = clientType.getAcl().stream()\n+                .filter(accessRightType -> accessRightType.getSubjectId().equals(subjectId))\n+                .map(accessRightType -> accessRightType.getEndpoint())\n+                .collect(Collectors.toSet());\n+\n+        if (existingAccessibleEndpoints.contains(endpoint)) {\n+            throw new DuplicateAccessRightException(\"Subject \" + subjectId.toShortString()\n+                    + \" already has an access right for endpoint \" + endpoint.getId());\n         }\n-        return identifierService.getOrPersistXroadIds(subsystemIds);\n+\n+        AccessRightType newAccessRight = new AccessRightType();\n+        newAccessRight.setEndpoint(endpoint);\n+        newAccessRight.setSubjectId(subjectId);\n+        newAccessRight.setRightsGiven(rightsGiven);\n+        clientType.getAcl().add(newAccessRight);\n+\n+        // return a dto\n+        ServiceClientAccessRightDto dto = ServiceClientAccessRightDto.builder()\n+                .serviceCode(endpoint.getServiceCode())\n+                .rightsGiven(FormatUtils.fromDateToOffsetDateTime(rightsGiven))\n+                .title(getServiceTitle(clientType, endpoint.getServiceCode()))\n+                .build();\n+        return dto;\n+    }\n+\n+    // TO DO: currently duplicate with ServiceClientService, not sure if ServiceClientService will be refactored,\n+    // and what is the correct place if both need this\n+    private String getServiceTitle(ClientType clientType, String serviceCode) {\n+        ServiceType service = clientType.getServiceDescription().stream()\n+                .flatMap(sd -> sd.getService().stream())\n+                .filter(serviceType -> serviceType.getServiceCode().equals(serviceCode))\n+                .findFirst()\n+                .get();\n+\n+        return service == null ? null : service.getTitle();", "originalCommit": "e1447f5cd865e482726850f1af514d162fa89c51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI2NDI0OA==", "url": "https://github.com/nordic-institute/X-Road/pull/465#discussion_r419264248", "bodyText": "I think this was a real bug? Good catch.\nFixed in 860f81a in branch XRDDEV-962-remove-service-client-access-rights since getServiceTitle has been refactored to a different class and it was easier to fix like that.", "author": "jansu76", "createdAt": "2020-05-04T07:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3OTk1Mg=="}], "type": "inlineReview"}, {"oid": "1bf425cf290c1322ca7cc9d10b2e8a4de2962348", "url": "https://github.com/nordic-institute/X-Road/commit/1bf425cf290c1322ca7cc9d10b2e8a4de2962348", "message": "XRDDEV-963 fix some PR comments", "committedDate": "2020-05-04T05:54:04Z", "type": "commit"}, {"oid": "4419c8f4015f6625385ef8a73e01f2fbce1c8268", "url": "https://github.com/nordic-institute/X-Road/commit/4419c8f4015f6625385ef8a73e01f2fbce1c8268", "message": "Merge branch 'develop' into XRDDEV-963-add-service-client-access-rights", "committedDate": "2020-05-04T08:50:43Z", "type": "commit"}]}