{"pr_number": 474, "pr_title": "XRDDEV-962 remove service client access rights", "pr_createdAt": "2020-04-24T08:53:26Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/474", "timeline": [{"oid": "d25704cc110c14b54e58e97b0913aade714bcf8c", "url": "https://github.com/nordic-institute/X-Road/commit/d25704cc110c14b54e58e97b0913aade714bcf8c", "message": "XRDDEV-962 add controller method, use serviceClientService.convertServiceClientIdentifierDtoToXroadId", "committedDate": "2020-04-17T07:45:04Z", "type": "commit"}, {"oid": "9fb1ef7856b5518bdafca7ca91151a61b162ee28", "url": "https://github.com/nordic-institute/X-Road/commit/9fb1ef7856b5518bdafca7ca91151a61b162ee28", "message": "XRDDEV-962 add functional implementation", "committedDate": "2020-04-17T12:39:33Z", "type": "commit"}, {"oid": "c947085ce191001ca7a5c30e7286f02e4198276d", "url": "https://github.com/nordic-institute/X-Road/commit/c947085ce191001ca7a5c30e7286f02e4198276d", "message": "XRDDEV-962 refactor, remove duplication", "committedDate": "2020-04-20T08:15:45Z", "type": "commit"}, {"oid": "2405baed5037d81a3e2736eff5e999e6338e1a0c", "url": "https://github.com/nordic-institute/X-Road/commit/2405baed5037d81a3e2736eff5e999e6338e1a0c", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights", "committedDate": "2020-04-21T10:22:57Z", "type": "commit"}, {"oid": "41e37ced010dee0753a88da440793b337d5d6ada", "url": "https://github.com/nordic-institute/X-Road/commit/41e37ced010dee0753a88da440793b337d5d6ada", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/IdentifierService.java", "committedDate": "2020-04-21T11:25:37Z", "type": "commit"}, {"oid": "2aa8b3549fed67f93874e082007670cb7ee116b1", "url": "https://github.com/nordic-institute/X-Road/commit/2aa8b3549fed67f93874e082007670cb7ee116b1", "message": "XRDDEV-962 refactor", "committedDate": "2020-04-21T11:48:49Z", "type": "commit"}, {"oid": "807bb681c503964dc09b31afc82f5a6fec20c020", "url": "https://github.com/nordic-institute/X-Road/commit/807bb681c503964dc09b31afc82f5a6fec20c020", "message": "XRDDEV-962 add some tests", "committedDate": "2020-04-22T09:06:14Z", "type": "commit"}, {"oid": "a22f7f6d2542035dc94d7fd96c78fe7c79a08d1b", "url": "https://github.com/nordic-institute/X-Road/commit/a22f7f6d2542035dc94d7fd96c78fe7c79a08d1b", "message": "XRDDEV-962 make delete remove non-base-endpoints, add tests", "committedDate": "2020-04-22T10:17:46Z", "type": "commit"}, {"oid": "881f7700e869ad4297298aa2bd6eede2f910a5a3", "url": "https://github.com/nordic-institute/X-Road/commit/881f7700e869ad4297298aa2bd6eede2f910a5a3", "message": "XRDDEV-962 refactor, extract ServiceClientServiceTest, make AccessRightServiceTest not depend on others", "committedDate": "2020-04-22T11:10:14Z", "type": "commit"}, {"oid": "ecbf7a24dbd5cacc73eed7629912250075e97ec5", "url": "https://github.com/nordic-institute/X-Road/commit/ecbf7a24dbd5cacc73eed7629912250075e97ec5", "message": "XRDDEV-962 refactor, add rest of tests", "committedDate": "2020-04-22T16:52:58Z", "type": "commit"}, {"oid": "149038358487581f54a540ceece0692ae069b8bd", "url": "https://github.com/nordic-institute/X-Road/commit/149038358487581f54a540ceece0692ae069b8bd", "message": "XRDDEV-962 refactor", "committedDate": "2020-04-22T16:56:48Z", "type": "commit"}, {"oid": "f95986e6d887522e69ccd7003104c13a4ba57208", "url": "https://github.com/nordic-institute/X-Road/commit/f95986e6d887522e69ccd7003104c13a4ba57208", "message": "XRDDEV-962 refactor", "committedDate": "2020-04-22T19:34:32Z", "type": "commit"}, {"oid": "136c7c1e2110d092890474f834570652273fab12", "url": "https://github.com/nordic-institute/X-Road/commit/136c7c1e2110d092890474f834570652273fab12", "message": "XRDDEV-962 refactor: remove separate local group service client id handling, step 1", "committedDate": "2020-04-22T20:32:51Z", "type": "commit"}, {"oid": "f34a0dbb6fd3af702dc3d66eaa598b770e4f2f5c", "url": "https://github.com/nordic-institute/X-Road/commit/f34a0dbb6fd3af702dc3d66eaa598b770e4f2f5c", "message": "XRDDEV-962 refactor: remove separate local group service client id handling, step 2", "committedDate": "2020-04-22T21:19:43Z", "type": "commit"}, {"oid": "c2bc3b8083886e1213c0779c01744bf6e9f700a3", "url": "https://github.com/nordic-institute/X-Road/commit/c2bc3b8083886e1213c0779c01744bf6e9f700a3", "message": "XRDDEV-962 add obsolete tests", "committedDate": "2020-04-23T15:42:32Z", "type": "commit"}, {"oid": "18271feb5e1e1fb7711e219b6134ea17ae4cc6ba", "url": "https://github.com/nordic-institute/X-Road/commit/18271feb5e1e1fb7711e219b6134ea17ae4cc6ba", "message": "XRDDEV-962 add obsolete tests, update implementation to handle obsolete service clients", "committedDate": "2020-04-23T20:15:42Z", "type": "commit"}, {"oid": "a83d5ca52bcad1ccf79656ea0833b023e0e4c414", "url": "https://github.com/nordic-institute/X-Road/commit/a83d5ca52bcad1ccf79656ea0833b023e0e4c414", "message": "XRDDEV-962 add refactor, cleanup", "committedDate": "2020-04-24T06:29:02Z", "type": "commit"}, {"oid": "12648a07a13cb2f299f9547b979e4451470e016e", "url": "https://github.com/nordic-institute/X-Road/commit/12648a07a13cb2f299f9547b979e4451470e016e", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights", "committedDate": "2020-04-24T08:45:50Z", "type": "commit"}, {"oid": "860f81a6275ccf04748ab75c4e76d6e48e1a4fa7", "url": "https://github.com/nordic-institute/X-Road/commit/860f81a6275ccf04748ab75c4e76d6e48e1a4fa7", "message": "XRDDEV-962 fix bug based on XRDDEV-963 PR comments", "committedDate": "2020-05-04T07:47:39Z", "type": "commit"}, {"oid": "e55b783bbd932a354eaa15bac2c5aca141deff11", "url": "https://github.com/nordic-institute/X-Road/commit/e55b783bbd932a354eaa15bac2c5aca141deff11", "message": "Merge branch 'XRDDEV-963-add-service-client-access-rights' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "committedDate": "2020-05-04T10:47:55Z", "type": "commit"}, {"oid": "964b31b82eae1332a6b5d8fa795a8e137029d44e", "url": "https://github.com/nordic-institute/X-Road/commit/964b31b82eae1332a6b5d8fa795a8e137029d44e", "message": "XRDDEV-962 remove dead code", "committedDate": "2020-05-05T14:43:32Z", "type": "commit"}, {"oid": "f98bb80ce707a42edff2920fc35621f580fb1076", "url": "https://github.com/nordic-institute/X-Road/commit/f98bb80ce707a42edff2920fc35621f580fb1076", "message": "Merge branch 'develop' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/ServiceDescriptionsApiControllerIntegrationTest.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/AccessRightServiceTest.java", "committedDate": "2020-05-06T13:13:19Z", "type": "commit"}, {"oid": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "url": "https://github.com/nordic-institute/X-Road/commit/442ddd86d4a5279e74a6d1bc533d09de31ac6989", "message": "XRDDEV-962 fix test", "committedDate": "2020-05-07T06:40:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MjUyNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422162525", "bodyText": "I guess commented out code could be removed.", "author": "TJaakkola", "createdAt": "2020-05-08T14:05:26Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java", "diffHunk": "@@ -616,34 +613,65 @@ protected void initServiceDescriptionAddBinder(WebDataBinder binder) {\n     public ResponseEntity<List<AccessRight>> addServiceClientAccessRights(String encodedClientId,\n             String endcodedServiceClientId, AccessRights accessRights) {\n         ClientId clientId = clientConverter.convertId(encodedClientId);\n-        ServiceClientIdentifierDto dto = serviceClientIdentifierConverter.convertId(endcodedServiceClientId);\n-        XRoadId serviceClientId = dto.getXRoadId();\n-        if (dto.isLocalGroup()) {\n-            try {\n-                serviceClientId = localGroupService.getLocalGroupIdAsXroadId(dto.getLocalGroupId());\n-            } catch (LocalGroupNotFoundException e) {\n-                throw new ResourceNotFoundException(e);\n-            }\n-        }\n         Set<String> serviceCodes = getServiceCodes(accessRights);\n         List<ServiceClientAccessRightDto> accessRightTypes = null;\n         try {\n+            XRoadId serviceClientId = serviceClientHelper.processServiceClientXRoadId(endcodedServiceClientId);\n             accessRightTypes = accessRightService.addServiceClientAccessRights(clientId, serviceCodes, serviceClientId);\n-        } catch (IdentifierNotFoundException | ClientNotFoundException e) {\n+        } catch (ServiceClientNotFoundException | ClientNotFoundException e) {\n             throw new ResourceNotFoundException(e);\n-        } catch (EndpointNotFoundException e) {\n+        } catch (ServiceNotFoundException e) {\n             throw new BadRequestException(e);\n         } catch (AccessRightService.DuplicateAccessRightException e) {\n             throw new ConflictException(e);\n+        } catch (ServiceClientIdentifierConverter.BadServiceClientIdentifierException e) {\n+            throw serviceClientHelper.wrapInBadRequestException(e);\n         }\n         return new ResponseEntity<>(accessRightConverter.convert(accessRightTypes), HttpStatus.CREATED);\n     }\n \n+    @Override\n+    @PreAuthorize(\"hasAuthority('EDIT_ACL_SUBJECT_OPEN_SERVICES')\")\n+    public ResponseEntity<Void> deleteServiceClientAccessRights(String encodedClientId,\n+            String endcodedServiceClientId, AccessRights accessRights) {\n+        ClientId clientId = clientConverter.convertId(encodedClientId);\n+        Set<String> serviceCodes = getServiceCodes(accessRights);\n+        try {\n+            XRoadId serviceClientId = serviceClientHelper.processServiceClientXRoadId(endcodedServiceClientId);\n+            accessRightService.deleteServiceClientAccessRights(clientId, serviceCodes, serviceClientId);\n+        } catch (ServiceClientNotFoundException | ClientNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        } catch (ServiceNotFoundException e) {\n+            throw new BadRequestException(e);\n+        } catch (AccessRightService.AccessRightNotFoundException e) {\n+            throw new ConflictException(e);\n+        } catch (ServiceClientIdentifierConverter.BadServiceClientIdentifierException e) {\n+            throw serviceClientHelper.wrapInBadRequestException(e);\n+        }\n+        return new ResponseEntity<>(HttpStatus.NO_CONTENT);\n+    }\n+\n     private Set<String> getServiceCodes(AccessRights accessRights) {\n         Set<String> serviceCodes = new HashSet<>();\n         for (AccessRight accessRight: accessRights.getItems()) {\n             serviceCodes.add(accessRight.getServiceCode());\n         }\n         return serviceCodes;\n     }\n+\n+//    /**\n+//     * For local group ids, verify that local group ID matches an existing local group PK.\n+//     *\n+//     * @throws BadRequestException if encoded service client id was badly formatted\n+//     * @throws ResourceNotFoundException if service client id was a local group ID, and that ID does not exist in DB\n+//     */\n+//    private XRoadId processServiceClientXRoadId(String encodedServiceClientId) {\n+//        ServiceClientIdentifierDto dto = serviceClientIdentifierConverter.convertId(encodedServiceClientId);\n+//        try {\n+//            return serviceClientService.convertServiceClientIdentifierDtoToXroadId(dto);\n+//        } catch (LocalGroupNotFoundException e) {\n+//            throw new ResourceNotFoundException(e);\n+//        }\n+//    }\n+", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMzkyNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424603925", "bodyText": "Fixed", "author": "jansu76", "createdAt": "2020-05-13T17:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MjUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MDkwMA==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422170900", "bodyText": "Why was subject_type removed from the required-list? Does this have something to do with populating ServiceClient-objects before knowing the type for some reason?", "author": "TJaakkola", "createdAt": "2020-05-08T14:20:32Z", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -5376,7 +5376,6 @@ components:\n       description: service client. May be a subsystem, local group, or a global group\n       required:\n         - id\n-        - subject_type", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzUzMQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424587531", "bodyText": "The refactored endpoints do not use subject_type for anything, since subject_type can be derived from the encoded id. I wanted to make life easier for the API user and not require subject_type when it is not necessary.", "author": "jansu76", "createdAt": "2020-05-13T16:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MDkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1MTk2MA==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422251960", "bodyText": "Method doesn't throw EndpointNotFoundException anymore.", "author": "TJaakkola", "createdAt": "2020-05-08T16:51:11Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -102,80 +106,99 @@ public AccessRightService(GlobalConfFacade globalConfFacade,\n      * @param clientId\n      * @param fullServiceCode\n      * @param subjectIds\n-     * @param localGroupIds\n      * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n      * @throws ClientNotFoundException if client with given id was not found\n-     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode, or the base endpoint for it,\n+     * was not found\n      * @throws EndpointNotFoundException if the base endpoint for the service is not found", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDAzMg==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424604032", "bodyText": "Fixed", "author": "jansu76", "createdAt": "2020-05-13T17:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1MTk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NjU3Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422256572", "bodyText": "I guess this is alright here but could also be public method in EndpointService as there a few similar methods (examples below):\npublic EndpointType getServiceBaseEndpoint(ClientType clientType, String serviceCode){...}\npublic List<EndpointType> getServiceBaseEndpoints(ClientType clientType, Set<String> serviceCodes){...}\npublic List<EndpointType> getServiceEndpoints(ClientType clientType, Set<String> serviceCodes){...}", "author": "TJaakkola", "createdAt": "2020-05-08T16:59:37Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -102,80 +106,99 @@ public AccessRightService(GlobalConfFacade globalConfFacade,\n      * @param clientId\n      * @param fullServiceCode\n      * @param subjectIds\n-     * @param localGroupIds\n      * @throws AccessRightNotFoundException if tried to remove access rights that did not exist for the service\n      * @throws ClientNotFoundException if client with given id was not found\n-     * @throws ServiceNotFoundException if service with given fullServicecode was not found\n+     * @throws ServiceNotFoundException if service with given fullServicecode, or the base endpoint for it,\n+     * was not found\n      * @throws EndpointNotFoundException if the base endpoint for the service is not found\n      */\n-    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds,\n-            Set<Long> localGroupIds) throws ClientNotFoundException, AccessRightNotFoundException,\n-            ServiceNotFoundException, EndpointNotFoundException {\n-        ClientType clientType = clientRepository.getClient(clientId);\n-        if (clientType == null) {\n-            throw new ClientNotFoundException(\"Client \" + clientId.toShortString() + \" not found\");\n-        }\n+    public void deleteSoapServiceAccessRights(ClientId clientId, String fullServiceCode, Set<XRoadId> subjectIds)\n+            throws ClientNotFoundException, AccessRightNotFoundException,\n+            ServiceNotFoundException {\n \n-        ServiceType serviceType = serviceService.getServiceFromClient(clientType, fullServiceCode);\n-        EndpointType endpointType = endpointService.getServiceBaseEndpoint(serviceType);\n+        ClientType clientType = getClient(clientId);\n+\n+        EndpointType endpointType = getBaseEndpointType(fullServiceCode, clientType);\n \n-        deleteEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n+        deleteEndpointAccessRights(clientType, endpointType, subjectIds);\n+    }\n+\n+    /**\n+     * Get base endpoint for given client and full service code\n+     * @throws ServiceNotFoundException if no match was found\n+     */\n+    private EndpointType getBaseEndpointType(String fullServiceCode, ClientType clientType)", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MTA5Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424591096", "bodyText": "Good point. Moving.", "author": "jansu76", "createdAt": "2020-05-13T16:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NjU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDA4Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424604086", "bodyText": "Fixed", "author": "jansu76", "createdAt": "2020-05-13T17:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NjU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0MTcyNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r422941725", "bodyText": "Adding description to this private methods would be more consistent as all other private methods have a description also. Nevertheless the method name is quite descriptive in itself.", "author": "TJaakkola", "createdAt": "2020-05-11T10:27:22Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -220,41 +240,42 @@ private void deleteEndpointAccessRights(ClientType clientType, EndpointType endp\n      *\n      * @param endpointId\n      * @param subjectIds\n-     * @param localGroupIds\n      * @return\n      * @throws EndpointNotFoundException endpoint is not found with given id\n      * @throws ClientNotFoundException client for the endpoint is not found (shouldn't happen)\n-     * @throws IdentifierNotFoundException Identifier from subjectIds is not found\n+     * @throws ServiceClientNotFoundException if a service client (local group, global group, or system) matching given\n+     * subjectId did not exist\n      * @throws DuplicateAccessRightException Trying to add duplicate access rights\n      */\n-    public List<ServiceClientDto> addEndpointAccessRights(Long endpointId, Set<XRoadId> subjectIds,\n-            Set<Long> localGroupIds) throws EndpointNotFoundException, ClientNotFoundException,\n-            IdentifierNotFoundException, DuplicateAccessRightException {\n+    public List<ServiceClientDto> addEndpointAccessRights(Long endpointId, Set<XRoadId> subjectIds)\n+            throws EndpointNotFoundException, ClientNotFoundException,\n+            ServiceClientNotFoundException, DuplicateAccessRightException {\n \n         EndpointType endpointType = endpointService.getEndpoint(endpointId);\n \n         ClientType clientType = clientRepository.getClientByEndpointId(endpointId);\n-        return addEndpointAccessRights(clientType, endpointType, subjectIds, localGroupIds);\n+        return addEndpointAccessRights(clientType, endpointType, subjectIds);\n \n     }\n \n     /**", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MjM2MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424592361", "bodyText": "Adding.", "author": "jansu76", "createdAt": "2020-05-13T17:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0MTcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDE0MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424604141", "bodyText": "Fixed", "author": "jansu76", "createdAt": "2020-05-13T17:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk0MTcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwOTE0Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r423009143", "bodyText": "accessRightsToBeRemoved is a bit missleading name here as this method is just for getting accessrighs and not about removing them.", "author": "TJaakkola", "createdAt": "2020-05-11T12:39:20Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -263,58 +284,129 @@ private void deleteEndpointAccessRights(ClientType clientType, EndpointType endp\n \n     /**\n      * Add access rights for one subject (service client) to multiple services (serviceCodes)\n-     * of a client (clientType)\n+     * of a client (clientType). Access rights are added only to the base endpoint of given service.\n      *\n      * @param clientId id of the client who owns the services\n      * @param serviceCodes serviceCodes of the services to add access rights to (without version numbers)\n      * @param subjectId subject (service client) to add access rights for. Can be a local group,\n      *                  global group, or a subsystem\n      * @return ServiceClientAccessRightDtos that were added for this service client\n-     * @throws EndpointNotFoundException if serviceCodes had any codes that were not client's services\n+     * @throws ServiceNotFoundException if serviceCodes had any codes that were not client's services\n      * (did not have base endpoints)\n      * @throws ClientNotFoundException if client matching clientId was not found\n      * @throws DuplicateAccessRightException if trying to add existing access right\n-     * @throws IdentifierNotFoundException if service client (local group, global group, or system) matching given\n+     * @throws ServiceClientNotFoundException if a service client (local group, global group, or system) matching given\n      * subjectId did not exist\n      */\n     public List<ServiceClientAccessRightDto> addServiceClientAccessRights(ClientId clientId, Set<String> serviceCodes,\n-            XRoadId subjectId) throws EndpointNotFoundException,\n-            DuplicateAccessRightException, ClientNotFoundException, IdentifierNotFoundException {\n+            XRoadId subjectId) throws ServiceNotFoundException,\n+            DuplicateAccessRightException, ClientNotFoundException, ServiceClientNotFoundException {\n \n-        log.debug(\"Add access rights to subject\", subjectId); // acl_subject_open_services_add\n+        ClientType clientType = getClient(clientId);\n \n+        validateServiceClientObjectType(subjectId);\n+\n+        // verify that given service client objects exist, otherwise access cannot be added\n+        identifierService.verifyServiceClientObjectsExist(clientType, new HashSet(Arrays.asList(subjectId)));\n+\n+        // prepare params for addAccessRightsInternal\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+\n+        // make sure subject id exists in serverconf db IDENTIFIER table, and use a managed entity\n+        XRoadId managedSubjectId = identifierService.getOrPersistXroadId(subjectId);\n+\n+        return addAccessRightsInternal(new HashSet<>(Arrays.asList(managedSubjectId)), clientType, baseEndpoints)\n+                    .get(managedSubjectId);\n+    }\n+\n+    /**\n+     * Removes access rights from one subject (service client) to multiple services (serviceCodes)\n+     * of a client. Access rights are removed from base endpoint and also from non-base endpoints with\n+     * given serviceCode.\n+     *\n+     * @param clientId id of the client who owns the services\n+     * @param serviceCodes serviceCodes of the services to remove access rights to (without version numbers)\n+     * @param subjectId subject (service client) to remove access rights from. Can be a local group,\n+     *                  global group, or a subsystem\n+     * @throws AccessRightNotFoundException if trying to remove (any) access rights that did not exist\n+     * @throws ClientNotFoundException if client matching clientId was not found\n+     * @throws ServiceNotFoundException if given client did not have services with given serviceCodes\n+     */\n+    public void deleteServiceClientAccessRights(ClientId clientId,\n+            Set<String> serviceCodes, XRoadId subjectId) throws AccessRightNotFoundException, ClientNotFoundException,\n+            ServiceNotFoundException {\n+\n+        ClientType clientType = getClient(clientId);\n+\n+        validateServiceClientObjectType(subjectId);\n+\n+        // first delete base endpoint access rights. These all need to exist, otherwise AccessRightNotFoundException\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+        Set<XRoadId> subjectIds = new HashSet<>(Arrays.asList((subjectId)));\n+        deleteEndpointAccessRights(clientType, baseEndpoints, subjectIds);\n+\n+        // then delete all non-base endpoint access rights, for this subject. If there's none, that's fine\n+        List<EndpointType> allEndpoints = endpointService.getServiceEndpoints(clientType, serviceCodes);\n+        List<AccessRightType> remainingAccessRights = getEndpointAccessRights(clientType, allEndpoints, subjectIds);\n+        if (!remainingAccessRights.isEmpty()) {\n+            Set<EndpointType> endpointsWithAccessRights = remainingAccessRights.stream()\n+                    .map(a -> a.getEndpoint())\n+                    .collect(Collectors.toSet());\n+            deleteEndpointAccessRights(clientType, new ArrayList<>(endpointsWithAccessRights), subjectIds);\n+        }\n+    }\n+\n+    /**\n+     * Get client's acl entries that match endpointTypes and subjects\n+     */\n+    private List<AccessRightType> getEndpointAccessRights(ClientType clientType, List<EndpointType> endpointTypes,\n+            Set<XRoadId> subjectIds) {\n+\n+        List<Long> endpointIds = endpointTypes.stream().map(e -> e.getId()).collect(Collectors.toList());\n+        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl().stream()", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MzExNg==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424593116", "bodyText": "Yeah, remnants of before it was refactored into separate method, or something. Fixing.", "author": "jansu76", "createdAt": "2020-05-13T17:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwOTE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDE5OA==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424604198", "bodyText": "Fixed", "author": "jansu76", "createdAt": "2020-05-13T17:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwOTE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNjEwOQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r423016109", "bodyText": "Is there something missing from this comment?\nAlso this method in general makes me think if it should be in ClientService?", "author": "TJaakkola", "createdAt": "2020-05-11T12:51:47Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -263,58 +284,129 @@ private void deleteEndpointAccessRights(ClientType clientType, EndpointType endp\n \n     /**\n      * Add access rights for one subject (service client) to multiple services (serviceCodes)\n-     * of a client (clientType)\n+     * of a client (clientType). Access rights are added only to the base endpoint of given service.\n      *\n      * @param clientId id of the client who owns the services\n      * @param serviceCodes serviceCodes of the services to add access rights to (without version numbers)\n      * @param subjectId subject (service client) to add access rights for. Can be a local group,\n      *                  global group, or a subsystem\n      * @return ServiceClientAccessRightDtos that were added for this service client\n-     * @throws EndpointNotFoundException if serviceCodes had any codes that were not client's services\n+     * @throws ServiceNotFoundException if serviceCodes had any codes that were not client's services\n      * (did not have base endpoints)\n      * @throws ClientNotFoundException if client matching clientId was not found\n      * @throws DuplicateAccessRightException if trying to add existing access right\n-     * @throws IdentifierNotFoundException if service client (local group, global group, or system) matching given\n+     * @throws ServiceClientNotFoundException if a service client (local group, global group, or system) matching given\n      * subjectId did not exist\n      */\n     public List<ServiceClientAccessRightDto> addServiceClientAccessRights(ClientId clientId, Set<String> serviceCodes,\n-            XRoadId subjectId) throws EndpointNotFoundException,\n-            DuplicateAccessRightException, ClientNotFoundException, IdentifierNotFoundException {\n+            XRoadId subjectId) throws ServiceNotFoundException,\n+            DuplicateAccessRightException, ClientNotFoundException, ServiceClientNotFoundException {\n \n-        log.debug(\"Add access rights to subject\", subjectId); // acl_subject_open_services_add\n+        ClientType clientType = getClient(clientId);\n \n+        validateServiceClientObjectType(subjectId);\n+\n+        // verify that given service client objects exist, otherwise access cannot be added\n+        identifierService.verifyServiceClientObjectsExist(clientType, new HashSet(Arrays.asList(subjectId)));\n+\n+        // prepare params for addAccessRightsInternal\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+\n+        // make sure subject id exists in serverconf db IDENTIFIER table, and use a managed entity\n+        XRoadId managedSubjectId = identifierService.getOrPersistXroadId(subjectId);\n+\n+        return addAccessRightsInternal(new HashSet<>(Arrays.asList(managedSubjectId)), clientType, baseEndpoints)\n+                    .get(managedSubjectId);\n+    }\n+\n+    /**\n+     * Removes access rights from one subject (service client) to multiple services (serviceCodes)\n+     * of a client. Access rights are removed from base endpoint and also from non-base endpoints with\n+     * given serviceCode.\n+     *\n+     * @param clientId id of the client who owns the services\n+     * @param serviceCodes serviceCodes of the services to remove access rights to (without version numbers)\n+     * @param subjectId subject (service client) to remove access rights from. Can be a local group,\n+     *                  global group, or a subsystem\n+     * @throws AccessRightNotFoundException if trying to remove (any) access rights that did not exist\n+     * @throws ClientNotFoundException if client matching clientId was not found\n+     * @throws ServiceNotFoundException if given client did not have services with given serviceCodes\n+     */\n+    public void deleteServiceClientAccessRights(ClientId clientId,\n+            Set<String> serviceCodes, XRoadId subjectId) throws AccessRightNotFoundException, ClientNotFoundException,\n+            ServiceNotFoundException {\n+\n+        ClientType clientType = getClient(clientId);\n+\n+        validateServiceClientObjectType(subjectId);\n+\n+        // first delete base endpoint access rights. These all need to exist, otherwise AccessRightNotFoundException\n+        List<EndpointType> baseEndpoints = null;\n+        try {\n+            baseEndpoints = endpointService.getServiceBaseEndpoints(clientType, serviceCodes);\n+        } catch (EndpointNotFoundException e) {\n+            throw new ServiceNotFoundException(e);\n+        }\n+        Set<XRoadId> subjectIds = new HashSet<>(Arrays.asList((subjectId)));\n+        deleteEndpointAccessRights(clientType, baseEndpoints, subjectIds);\n+\n+        // then delete all non-base endpoint access rights, for this subject. If there's none, that's fine\n+        List<EndpointType> allEndpoints = endpointService.getServiceEndpoints(clientType, serviceCodes);\n+        List<AccessRightType> remainingAccessRights = getEndpointAccessRights(clientType, allEndpoints, subjectIds);\n+        if (!remainingAccessRights.isEmpty()) {\n+            Set<EndpointType> endpointsWithAccessRights = remainingAccessRights.stream()\n+                    .map(a -> a.getEndpoint())\n+                    .collect(Collectors.toSet());\n+            deleteEndpointAccessRights(clientType, new ArrayList<>(endpointsWithAccessRights), subjectIds);\n+        }\n+    }\n+\n+    /**\n+     * Get client's acl entries that match endpointTypes and subjects\n+     */\n+    private List<AccessRightType> getEndpointAccessRights(ClientType clientType, List<EndpointType> endpointTypes,\n+            Set<XRoadId> subjectIds) {\n+\n+        List<Long> endpointIds = endpointTypes.stream().map(e -> e.getId()).collect(Collectors.toList());\n+        List<AccessRightType> accessRightsToBeRemoved = clientType.getAcl().stream()\n+                .filter(acl -> endpointIds.contains(acl.getEndpoint().getId())\n+                        && subjectIds.contains(acl.getSubjectId()))\n+                .collect(Collectors.toList());\n+        return accessRightsToBeRemoved;\n+    }\n+\n+    /**\n+     * Get client, throw ClientNotFoundException if not found\n+     */\n+    private ClientType getClient(ClientId clientId) throws ClientNotFoundException {\n         // validate params some", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NjgxNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424596815", "bodyText": "Yes, it should be in ClientService. Changing clientService.getLocalClientOrThrowNotFound to a public method.", "author": "jansu76", "createdAt": "2020-05-13T17:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNjEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDI3NA==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424604274", "bodyText": "Fixed", "author": "jansu76", "createdAt": "2020-05-13T17:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNjEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxOTI2Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r423019263", "bodyText": "I'm not quite sure why this method is changed to package private, instead of just public?", "author": "TJaakkola", "createdAt": "2020-05-11T12:57:30Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/AccessRightService.java", "diffHunk": "@@ -328,7 +420,7 @@ private boolean isValidServiceClientType(XRoadObjectType objectType) {\n      * @param accessRightTypes\n      * @return\n      */\n-    public List<ServiceClientDto> mapAccessRightsToServiceClients(ClientType clientType,\n+    List<ServiceClientDto> mapAccessRightsToServiceClients(ClientType clientType,", "originalCommit": "442ddd86d4a5279e74a6d1bc533d09de31ac6989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMTI4Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424601283", "bodyText": "I believe my thinking was that it is only used from other service, and is probably not useful for any controllers, so visibility should be as limited as possible. To keep service's interface to controllers a bit simpler.\nOn the other hand there are probably lots of other similar methods that should be package private by this logic, so I am not sure if the change makes much sense. Keeping it there anyway, comment if you think it should be changed to public.", "author": "jansu76", "createdAt": "2020-05-13T17:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxOTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDEwOA==", "url": "https://github.com/nordic-institute/X-Road/pull/474#discussion_r424604108", "bodyText": "Yes. I think reading the service layer classes would actually be easier if all the methods used only in service layer would be package private. But I think this is just fine right now.", "author": "TJaakkola", "createdAt": "2020-05-13T17:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxOTI2Mw=="}], "type": "inlineReview"}, {"oid": "3446eb4edca6a08ba118ade45eac24bad1c5bdf5", "url": "https://github.com/nordic-institute/X-Road/commit/3446eb4edca6a08ba118ade45eac24bad1c5bdf5", "message": "XRDDEV-962 fixes for PR comments", "committedDate": "2020-05-13T17:19:11Z", "type": "commit"}, {"oid": "f48acd07ae0bf8d552c843fde55664ed158ab6e6", "url": "https://github.com/nordic-institute/X-Road/commit/f48acd07ae0bf8d552c843fde55664ed158ab6e6", "message": "Merge branch 'develop' into XRDDEV-962-remove-service-client-access-rights\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/util/TestUtils.java", "committedDate": "2020-05-13T17:27:36Z", "type": "commit"}]}