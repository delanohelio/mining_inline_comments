{"pr_number": 458, "pr_title": "XRDDEV-977", "pr_createdAt": "2020-04-10T07:47:58Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/458", "timeline": [{"oid": "1fb6e9ec36350559c4ef1b79dd708f130756c87e", "url": "https://github.com/nordic-institute/X-Road/commit/1fb6e9ec36350559c4ef1b79dd708f130756c87e", "message": "XRDDEV-977 Add scheduled global conf checker\n\n- Implement scheduled global conf checker that updates changes in global conf to serverconf db.\n- Add helper class to provide unauthenticated access to required service layer methods.\n- Add required methods to GlobalConfFacade.", "committedDate": "2020-04-08T13:55:55Z", "type": "commit"}, {"oid": "9e72a4c070ff1af6639a5eca47a1b10552494179", "url": "https://github.com/nordic-institute/X-Road/commit/9e72a4c070ff1af6639a5eca47a1b10552494179", "message": "XRDDEV-977 Disable globalconf updates for slaves in clustered setup", "committedDate": "2020-04-09T05:16:30Z", "type": "commit"}, {"oid": "a39e446e615677ea6e8dc866e7e0f82fd49f47d9", "url": "https://github.com/nordic-institute/X-Road/commit/a39e446e615677ea6e8dc866e7e0f82fd49f47d9", "message": "XRDDEV-977 Implement Security Server owner cache\n\n- Add Security Server owner cache as request scoped bean.", "committedDate": "2020-04-09T06:26:49Z", "type": "commit"}, {"oid": "67da0466f8b57b6d5212f11e67bf7bceabcfd735", "url": "https://github.com/nordic-institute/X-Road/commit/67da0466f8b57b6d5212f11e67bf7bceabcfd735", "message": "XRDDEV-977 Start using server owner caching\n\n- Start using server owner caching in service classes.\n- Update tests.", "committedDate": "2020-04-09T10:58:55Z", "type": "commit"}, {"oid": "2969956d97cd427a5204c5f39b592d3ce34eecd6", "url": "https://github.com/nordic-institute/X-Road/commit/2969956d97cd427a5204c5f39b592d3ce34eecd6", "message": "XRDDEV-977 Remove SecurityServerOwnerCache", "committedDate": "2020-04-09T12:23:55Z", "type": "commit"}, {"oid": "83202315a9aa381d3af93edf0ae988620709d295", "url": "https://github.com/nordic-institute/X-Road/commit/83202315a9aa381d3af93edf0ae988620709d295", "message": "XRDDEV-977 Fix SonarQube findings", "committedDate": "2020-04-10T08:55:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0MjkyNA==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r417842924", "bodyText": "Would probably be a good idea to make this class package private instead of public. Otherwise someone could call this from e.g. one of the controllers.", "author": "carohauta", "createdAt": "2020-04-30T08:29:03Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/scheduling/GlobalConfCheckerHelper.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.scheduling;\n+\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.repository.ServerConfRepository;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Helper class for GlobalConfChecker.\n+ * This class does not require authentication, because its\n+ * methods are accessed from a scheduled job that's run\n+ * unauthenticated.\n+ */\n+@Slf4j\n+@Service\n+@Transactional\n+public class GlobalConfCheckerHelper {", "originalCommit": "83202315a9aa381d3af93edf0ae988620709d295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTQ1Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r418551453", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-05-01T13:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0MjkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0OTEwNA==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r417849104", "bodyText": "The idea of the facade is to convert all static methods into Spring bean methods for better testability. I think that the getServerOwner is not actually supposed to be static and should be invoked from the bean instance instead.", "author": "carohauta", "createdAt": "2020-04-30T08:39:41Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/scheduling/GlobalConfChecker.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.scheduling;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.CertUtils;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.SignerClient;\n+import ee.ria.xroad.signer.protocol.dto.AuthKeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.message.GetAuthKey;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static ee.ria.xroad.common.ErrorCodes.translateException;\n+import static ee.ria.xroad.common.SystemProperties.NodeType.SLAVE;\n+import static ee.ria.xroad.common.util.CryptoUtils.readCertificate;\n+\n+/**\n+ * Job that checks whether globalconf has changed.\n+ */\n+@Component\n+@Transactional\n+@Slf4j\n+public class GlobalConfChecker {\n+    public static final int JOB_REPEAT_INTERVAL_MS = 30000;\n+    public static final int INITIAL_DELAY_MS = 30000;\n+    @Autowired\n+    private GlobalConfCheckerHelper globalConfCheckerHelper;\n+    @Autowired\n+    private GlobalConfFacade globalConfFacade;\n+\n+    /**\n+     * Reloads global configuration, and updates client statuses, authentication certificate statuses\n+     * and server owner identity to the serverconf database. The task is scheduled at a fixed rate\n+     * which means that the task is run at a fixed interval (defined by FIXED_RATE_MS) regardless of the\n+     * previous executions of the task. However, scheduled tasks do not run in parallel by default. The\n+     * next task won't be invoked until the previous one is done. Set an initial delay before running the task\n+     * for the first time after a startup to be sure that all required components are available, e.g.\n+     * SignerClient may not be available immediately.\n+     * @throws JobExecutionException\n+     */\n+    @Scheduled(fixedRate = JOB_REPEAT_INTERVAL_MS, initialDelay = INITIAL_DELAY_MS)\n+    public void updateServerConf() throws JobExecutionException {\n+        // In clustered setup slave nodes may skip globalconf updates\n+        if (SLAVE.equals(SystemProperties.getServerNodeType())) {\n+            log.debug(\"This is a slave node - skip globalconf updates\");\n+            return;\n+        }\n+\n+        try {\n+            log.debug(\"Check globalconf for updates\");\n+            checkGlobalConf();\n+        } catch (Exception e) {\n+            log.error(\"Checking globalconf for updates failed\", e);\n+            throw new JobExecutionException(e);\n+        }\n+    }\n+\n+    private void checkGlobalConf() throws Exception {\n+        globalConfFacade.verifyValidity();\n+\n+        log.debug(\"Reloading globalconf\");\n+        globalConfFacade.reload(); // XXX: temporary fix\n+\n+        ServerConfType serverConf = globalConfCheckerHelper.getServerConf();\n+        SecurityServerId securityServerId = null;\n+\n+        try {\n+            if (GlobalConfFacade.getServerOwner(buildSecurityServerId(serverConf)) == null) {", "originalCommit": "83202315a9aa381d3af93edf0ae988620709d295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTU1Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r418551553", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-05-01T13:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0OTEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MjU4Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r417852586", "bodyText": "Preferably use constructor DI if possible. If it does not for some reason work here then this is fine.", "author": "carohauta", "createdAt": "2020-04-30T08:45:36Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/scheduling/GlobalConfChecker.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.scheduling;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.CertUtils;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.SignerClient;\n+import ee.ria.xroad.signer.protocol.dto.AuthKeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.message.GetAuthKey;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static ee.ria.xroad.common.ErrorCodes.translateException;\n+import static ee.ria.xroad.common.SystemProperties.NodeType.SLAVE;\n+import static ee.ria.xroad.common.util.CryptoUtils.readCertificate;\n+\n+/**\n+ * Job that checks whether globalconf has changed.\n+ */\n+@Component\n+@Transactional\n+@Slf4j\n+public class GlobalConfChecker {\n+    public static final int JOB_REPEAT_INTERVAL_MS = 30000;\n+    public static final int INITIAL_DELAY_MS = 30000;\n+    @Autowired", "originalCommit": "83202315a9aa381d3af93edf0ae988620709d295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTYwOQ==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r418551609", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-05-01T13:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MjU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NDUzNA==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r417854534", "bodyText": "Maybe use signerProxyFacade bean instead of SignerProxy to be consistent with the proxy-ui-api codebase", "author": "carohauta", "createdAt": "2020-04-30T08:48:53Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/scheduling/GlobalConfChecker.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.scheduling;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.CertUtils;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.SignerClient;\n+import ee.ria.xroad.signer.protocol.dto.AuthKeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.message.GetAuthKey;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static ee.ria.xroad.common.ErrorCodes.translateException;\n+import static ee.ria.xroad.common.SystemProperties.NodeType.SLAVE;\n+import static ee.ria.xroad.common.util.CryptoUtils.readCertificate;\n+\n+/**\n+ * Job that checks whether globalconf has changed.\n+ */\n+@Component\n+@Transactional\n+@Slf4j\n+public class GlobalConfChecker {\n+    public static final int JOB_REPEAT_INTERVAL_MS = 30000;\n+    public static final int INITIAL_DELAY_MS = 30000;\n+    @Autowired\n+    private GlobalConfCheckerHelper globalConfCheckerHelper;\n+    @Autowired\n+    private GlobalConfFacade globalConfFacade;\n+\n+    /**\n+     * Reloads global configuration, and updates client statuses, authentication certificate statuses\n+     * and server owner identity to the serverconf database. The task is scheduled at a fixed rate\n+     * which means that the task is run at a fixed interval (defined by FIXED_RATE_MS) regardless of the\n+     * previous executions of the task. However, scheduled tasks do not run in parallel by default. The\n+     * next task won't be invoked until the previous one is done. Set an initial delay before running the task\n+     * for the first time after a startup to be sure that all required components are available, e.g.\n+     * SignerClient may not be available immediately.\n+     * @throws JobExecutionException\n+     */\n+    @Scheduled(fixedRate = JOB_REPEAT_INTERVAL_MS, initialDelay = INITIAL_DELAY_MS)\n+    public void updateServerConf() throws JobExecutionException {\n+        // In clustered setup slave nodes may skip globalconf updates\n+        if (SLAVE.equals(SystemProperties.getServerNodeType())) {\n+            log.debug(\"This is a slave node - skip globalconf updates\");\n+            return;\n+        }\n+\n+        try {\n+            log.debug(\"Check globalconf for updates\");\n+            checkGlobalConf();\n+        } catch (Exception e) {\n+            log.error(\"Checking globalconf for updates failed\", e);\n+            throw new JobExecutionException(e);\n+        }\n+    }\n+\n+    private void checkGlobalConf() throws Exception {\n+        globalConfFacade.verifyValidity();\n+\n+        log.debug(\"Reloading globalconf\");\n+        globalConfFacade.reload(); // XXX: temporary fix\n+\n+        ServerConfType serverConf = globalConfCheckerHelper.getServerConf();\n+        SecurityServerId securityServerId = null;\n+\n+        try {\n+            if (GlobalConfFacade.getServerOwner(buildSecurityServerId(serverConf)) == null) {\n+                log.debug(\"Server owner not found in globalconf - owner may have changed\");\n+                updateOwner(serverConf);\n+            }\n+            securityServerId = buildSecurityServerId(serverConf);\n+            log.debug(\"Security Server ID is \\\"{}\\\"\", securityServerId);\n+            updateClientStatuses(serverConf, securityServerId);\n+            updateAuthCertStatuses(securityServerId);\n+        } catch (Exception e) {\n+            throw translateException(e);\n+        }\n+    }\n+\n+    private SecurityServerId buildSecurityServerId(ClientId ownerId, String serverCode) {\n+        return SecurityServerId.create(\n+                ownerId.getXRoadInstance(), ownerId.getMemberClass(),\n+                ownerId.getMemberCode(), serverCode);\n+    }\n+\n+    private SecurityServerId buildSecurityServerId(ServerConfType serverConf) {\n+        ClientId ownerId = serverConf.getOwner().getIdentifier();\n+        return buildSecurityServerId(ownerId, serverConf.getServerCode());\n+    }\n+\n+    private void updateOwner(ServerConfType serverConf) throws Exception {\n+        ClientId ownerId = serverConf.getOwner().getIdentifier();\n+        for (ClientType client : serverConf.getClient()) {\n+            // Look for another member that is not the owner\n+            if (client.getIdentifier().getSubsystemCode() == null\n+                    && !client.getIdentifier().equals(ownerId)) {\n+                log.trace(\"Found potential new owner: \\\"{}\\\"\", client.getIdentifier());\n+\n+                // Build a new server id using the alternative member as owner\n+                SecurityServerId altSecurityServerId = buildSecurityServerId(client.getIdentifier(),\n+                        serverConf.getServerCode());\n+\n+                // Get local auth cert\n+                X509Certificate cert = getAuthCert(altSecurityServerId);\n+\n+                // Does the alternative server id exist in global conf?\n+                // And does the local auth cert match with the auth cert of\n+                // the alternative server from global conf?\n+                if (GlobalConfFacade.getServerOwner(altSecurityServerId) != null\n+                        && cert != null\n+                        && altSecurityServerId.equals(globalConfFacade.getServerId(cert))\n+                ) {\n+                    log.debug(\"Set \\\"{}\\\" as new owner\", client.getIdentifier());\n+                    serverConf.setOwner(client);\n+                }\n+            }\n+        }\n+    }\n+\n+    private X509Certificate getAuthCert(SecurityServerId serverId) throws Exception {\n+        log.debug(\"Get auth cert for security server '{}'\", serverId);\n+\n+        AuthKeyInfo keyInfo = SignerClient.execute(new GetAuthKey(serverId));\n+        if (keyInfo != null && keyInfo.getCert() != null) {\n+            return readCertificate(keyInfo.getCert().getCertificateBytes());\n+        }\n+        log.warn(\"Failed to read authentication key\");\n+        return null;\n+    }\n+\n+    private void updateClientStatuses(ServerConfType serverConf,\n+                                      SecurityServerId securityServerId) throws Exception {\n+        log.debug(\"Updating client statuses\");\n+\n+        for (ClientType client : serverConf.getClient()) {\n+            boolean registered = globalConfFacade.isSecurityServerClient(\n+                    client.getIdentifier(), securityServerId);\n+\n+            log.debug(\"Client '{}' registered = '{}'\", client.getIdentifier(),\n+                    registered);\n+\n+            if (registered && client.getClientStatus() != null) {\n+                switch (client.getClientStatus()) {\n+                    case ClientType.STATUS_REGISTERED:\n+                        // do nothing\n+                        break;\n+                    case ClientType.STATUS_SAVED: // FALL-THROUGH\n+                    case ClientType.STATUS_REGINPROG: // FALL-THROUGH\n+                    case ClientType.STATUS_GLOBALERR:\n+                        client.setClientStatus(ClientType.STATUS_REGISTERED);\n+                        log.debug(\"Setting client '{}' status to '{}'\",\n+                                client.getIdentifier(),\n+                                client.getClientStatus());\n+                        break;\n+                    default:\n+                        log.warn(\"Unexpected status {} for client '{}'\",\n+                                client.getIdentifier(),\n+                                client.getClientStatus());\n+                }\n+            }\n+\n+            if (!registered && ClientType.STATUS_REGISTERED.equals(\n+                    client.getClientStatus())) {\n+                client.setClientStatus(ClientType.STATUS_GLOBALERR);\n+\n+                log.debug(\"Setting client '{}' status to '{}'\",\n+                        client.getIdentifier(), client.getClientStatus());\n+            }\n+        }\n+    }\n+\n+    private void updateAuthCertStatuses(SecurityServerId securityServerId)\n+            throws Exception {\n+        log.debug(\"Updating auth cert statuses\");\n+\n+        SignerProxy.getTokens().stream().flatMap(t -> t.getKeyInfo().stream())", "originalCommit": "83202315a9aa381d3af93edf0ae988620709d295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTY4MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r418551681", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-05-01T13:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1NDUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5Njg4OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r417896889", "bodyText": "Seems to throw a CodedException which is a RuntimeException so the Exception is a bit confusing in the method signature.", "author": "carohauta", "createdAt": "2020-04-30T10:01:36Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/scheduling/GlobalConfChecker.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.scheduling;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.CertUtils;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.SignerClient;\n+import ee.ria.xroad.signer.protocol.dto.AuthKeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.message.GetAuthKey;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static ee.ria.xroad.common.ErrorCodes.translateException;\n+import static ee.ria.xroad.common.SystemProperties.NodeType.SLAVE;\n+import static ee.ria.xroad.common.util.CryptoUtils.readCertificate;\n+\n+/**\n+ * Job that checks whether globalconf has changed.\n+ */\n+@Component\n+@Transactional\n+@Slf4j\n+public class GlobalConfChecker {\n+    public static final int JOB_REPEAT_INTERVAL_MS = 30000;\n+    public static final int INITIAL_DELAY_MS = 30000;\n+    @Autowired\n+    private GlobalConfCheckerHelper globalConfCheckerHelper;\n+    @Autowired\n+    private GlobalConfFacade globalConfFacade;\n+\n+    /**\n+     * Reloads global configuration, and updates client statuses, authentication certificate statuses\n+     * and server owner identity to the serverconf database. The task is scheduled at a fixed rate\n+     * which means that the task is run at a fixed interval (defined by FIXED_RATE_MS) regardless of the\n+     * previous executions of the task. However, scheduled tasks do not run in parallel by default. The\n+     * next task won't be invoked until the previous one is done. Set an initial delay before running the task\n+     * for the first time after a startup to be sure that all required components are available, e.g.\n+     * SignerClient may not be available immediately.\n+     * @throws JobExecutionException\n+     */\n+    @Scheduled(fixedRate = JOB_REPEAT_INTERVAL_MS, initialDelay = INITIAL_DELAY_MS)\n+    public void updateServerConf() throws JobExecutionException {\n+        // In clustered setup slave nodes may skip globalconf updates\n+        if (SLAVE.equals(SystemProperties.getServerNodeType())) {\n+            log.debug(\"This is a slave node - skip globalconf updates\");\n+            return;\n+        }\n+\n+        try {\n+            log.debug(\"Check globalconf for updates\");\n+            checkGlobalConf();\n+        } catch (Exception e) {\n+            log.error(\"Checking globalconf for updates failed\", e);\n+            throw new JobExecutionException(e);\n+        }\n+    }\n+\n+    private void checkGlobalConf() throws Exception {", "originalCommit": "83202315a9aa381d3af93edf0ae988620709d295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NjQ0OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r418556449", "bodyText": "That's true. Removed throws Exception from the method signature.", "author": "petkivim", "createdAt": "2020-05-01T14:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5Njg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5OTQ4MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r417899481", "bodyText": "Not sure if it actually adds any value to wrap the caught runtime exception into a JobExecutionException (which is a Quartz exception - even though Quartz is not used here).\nBut yeah this class seems to be pretty much a direct copy from the old codebase so I don't really have an opinion whether or not this (whole class) should be refactored in any way", "author": "carohauta", "createdAt": "2020-04-30T10:06:21Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/scheduling/GlobalConfChecker.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.scheduling;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.CertUtils;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.SignerClient;\n+import ee.ria.xroad.signer.protocol.dto.AuthKeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.message.GetAuthKey;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static ee.ria.xroad.common.ErrorCodes.translateException;\n+import static ee.ria.xroad.common.SystemProperties.NodeType.SLAVE;\n+import static ee.ria.xroad.common.util.CryptoUtils.readCertificate;\n+\n+/**\n+ * Job that checks whether globalconf has changed.\n+ */\n+@Component\n+@Transactional\n+@Slf4j\n+public class GlobalConfChecker {\n+    public static final int JOB_REPEAT_INTERVAL_MS = 30000;\n+    public static final int INITIAL_DELAY_MS = 30000;\n+    @Autowired\n+    private GlobalConfCheckerHelper globalConfCheckerHelper;\n+    @Autowired\n+    private GlobalConfFacade globalConfFacade;\n+\n+    /**\n+     * Reloads global configuration, and updates client statuses, authentication certificate statuses\n+     * and server owner identity to the serverconf database. The task is scheduled at a fixed rate\n+     * which means that the task is run at a fixed interval (defined by FIXED_RATE_MS) regardless of the\n+     * previous executions of the task. However, scheduled tasks do not run in parallel by default. The\n+     * next task won't be invoked until the previous one is done. Set an initial delay before running the task\n+     * for the first time after a startup to be sure that all required components are available, e.g.\n+     * SignerClient may not be available immediately.\n+     * @throws JobExecutionException\n+     */\n+    @Scheduled(fixedRate = JOB_REPEAT_INTERVAL_MS, initialDelay = INITIAL_DELAY_MS)\n+    public void updateServerConf() throws JobExecutionException {\n+        // In clustered setup slave nodes may skip globalconf updates\n+        if (SLAVE.equals(SystemProperties.getServerNodeType())) {\n+            log.debug(\"This is a slave node - skip globalconf updates\");\n+            return;\n+        }\n+\n+        try {\n+            log.debug(\"Check globalconf for updates\");\n+            checkGlobalConf();\n+        } catch (Exception e) {\n+            log.error(\"Checking globalconf for updates failed\", e);\n+            throw new JobExecutionException(e);", "originalCommit": "83202315a9aa381d3af93edf0ae988620709d295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NDU5Nw==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r418554597", "bodyText": "You're right using Quartz exception does not make sense here since Quartz is not used anymore. This was copied from the current implementation. I changed this so that the exception is logged and then rethrown. Refactoring the class in the future is probably a good idea. In this case my goal was to replicate the current functionality with the minimum amount of modifications. It is probably easier to first replicate the current functionality more or less \"as-is\", and refactor it later once it's proven to be working.", "author": "petkivim", "createdAt": "2020-05-01T14:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5OTQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkwMjY5Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r417902693", "bodyText": "Wrapping the SignerClient.execute in the SignerProxyFacade would make this more testable.", "author": "carohauta", "createdAt": "2020-04-30T10:12:23Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/scheduling/GlobalConfChecker.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.scheduling;\n+\n+import ee.ria.xroad.common.SystemProperties;\n+import ee.ria.xroad.common.conf.serverconf.model.ClientType;\n+import ee.ria.xroad.common.conf.serverconf.model.ServerConfType;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+import ee.ria.xroad.common.util.CertUtils;\n+import ee.ria.xroad.commonui.SignerProxy;\n+import ee.ria.xroad.signer.protocol.SignerClient;\n+import ee.ria.xroad.signer.protocol.dto.AuthKeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.message.GetAuthKey;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.niis.xroad.restapi.facade.GlobalConfFacade;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static ee.ria.xroad.common.ErrorCodes.translateException;\n+import static ee.ria.xroad.common.SystemProperties.NodeType.SLAVE;\n+import static ee.ria.xroad.common.util.CryptoUtils.readCertificate;\n+\n+/**\n+ * Job that checks whether globalconf has changed.\n+ */\n+@Component\n+@Transactional\n+@Slf4j\n+public class GlobalConfChecker {\n+    public static final int JOB_REPEAT_INTERVAL_MS = 30000;\n+    public static final int INITIAL_DELAY_MS = 30000;\n+    @Autowired\n+    private GlobalConfCheckerHelper globalConfCheckerHelper;\n+    @Autowired\n+    private GlobalConfFacade globalConfFacade;\n+\n+    /**\n+     * Reloads global configuration, and updates client statuses, authentication certificate statuses\n+     * and server owner identity to the serverconf database. The task is scheduled at a fixed rate\n+     * which means that the task is run at a fixed interval (defined by FIXED_RATE_MS) regardless of the\n+     * previous executions of the task. However, scheduled tasks do not run in parallel by default. The\n+     * next task won't be invoked until the previous one is done. Set an initial delay before running the task\n+     * for the first time after a startup to be sure that all required components are available, e.g.\n+     * SignerClient may not be available immediately.\n+     * @throws JobExecutionException\n+     */\n+    @Scheduled(fixedRate = JOB_REPEAT_INTERVAL_MS, initialDelay = INITIAL_DELAY_MS)\n+    public void updateServerConf() throws JobExecutionException {\n+        // In clustered setup slave nodes may skip globalconf updates\n+        if (SLAVE.equals(SystemProperties.getServerNodeType())) {\n+            log.debug(\"This is a slave node - skip globalconf updates\");\n+            return;\n+        }\n+\n+        try {\n+            log.debug(\"Check globalconf for updates\");\n+            checkGlobalConf();\n+        } catch (Exception e) {\n+            log.error(\"Checking globalconf for updates failed\", e);\n+            throw new JobExecutionException(e);\n+        }\n+    }\n+\n+    private void checkGlobalConf() throws Exception {\n+        globalConfFacade.verifyValidity();\n+\n+        log.debug(\"Reloading globalconf\");\n+        globalConfFacade.reload(); // XXX: temporary fix\n+\n+        ServerConfType serverConf = globalConfCheckerHelper.getServerConf();\n+        SecurityServerId securityServerId = null;\n+\n+        try {\n+            if (GlobalConfFacade.getServerOwner(buildSecurityServerId(serverConf)) == null) {\n+                log.debug(\"Server owner not found in globalconf - owner may have changed\");\n+                updateOwner(serverConf);\n+            }\n+            securityServerId = buildSecurityServerId(serverConf);\n+            log.debug(\"Security Server ID is \\\"{}\\\"\", securityServerId);\n+            updateClientStatuses(serverConf, securityServerId);\n+            updateAuthCertStatuses(securityServerId);\n+        } catch (Exception e) {\n+            throw translateException(e);\n+        }\n+    }\n+\n+    private SecurityServerId buildSecurityServerId(ClientId ownerId, String serverCode) {\n+        return SecurityServerId.create(\n+                ownerId.getXRoadInstance(), ownerId.getMemberClass(),\n+                ownerId.getMemberCode(), serverCode);\n+    }\n+\n+    private SecurityServerId buildSecurityServerId(ServerConfType serverConf) {\n+        ClientId ownerId = serverConf.getOwner().getIdentifier();\n+        return buildSecurityServerId(ownerId, serverConf.getServerCode());\n+    }\n+\n+    private void updateOwner(ServerConfType serverConf) throws Exception {\n+        ClientId ownerId = serverConf.getOwner().getIdentifier();\n+        for (ClientType client : serverConf.getClient()) {\n+            // Look for another member that is not the owner\n+            if (client.getIdentifier().getSubsystemCode() == null\n+                    && !client.getIdentifier().equals(ownerId)) {\n+                log.trace(\"Found potential new owner: \\\"{}\\\"\", client.getIdentifier());\n+\n+                // Build a new server id using the alternative member as owner\n+                SecurityServerId altSecurityServerId = buildSecurityServerId(client.getIdentifier(),\n+                        serverConf.getServerCode());\n+\n+                // Get local auth cert\n+                X509Certificate cert = getAuthCert(altSecurityServerId);\n+\n+                // Does the alternative server id exist in global conf?\n+                // And does the local auth cert match with the auth cert of\n+                // the alternative server from global conf?\n+                if (GlobalConfFacade.getServerOwner(altSecurityServerId) != null\n+                        && cert != null\n+                        && altSecurityServerId.equals(globalConfFacade.getServerId(cert))\n+                ) {\n+                    log.debug(\"Set \\\"{}\\\" as new owner\", client.getIdentifier());\n+                    serverConf.setOwner(client);\n+                }\n+            }\n+        }\n+    }\n+\n+    private X509Certificate getAuthCert(SecurityServerId serverId) throws Exception {\n+        log.debug(\"Get auth cert for security server '{}'\", serverId);\n+\n+        AuthKeyInfo keyInfo = SignerClient.execute(new GetAuthKey(serverId));", "originalCommit": "83202315a9aa381d3af93edf0ae988620709d295", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NDY2Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/458#discussion_r418554666", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-05-01T14:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkwMjY5Mw=="}], "type": "inlineReview"}, {"oid": "46d7417989372410cd5c0993c6c7e6eb4d2729a8", "url": "https://github.com/nordic-institute/X-Road/commit/46d7417989372410cd5c0993c6c7e6eb4d2729a8", "message": "Merge branch 'develop' into XRDDEV-977", "committedDate": "2020-05-01T13:22:17Z", "type": "commit"}, {"oid": "0b781168aadce51b31bd9e609677cae5fe61f3be", "url": "https://github.com/nordic-institute/X-Road/commit/0b781168aadce51b31bd9e609677cae5fe61f3be", "message": "XRDDEV-977 Make GlobalConfCheckerHelper package-private", "committedDate": "2020-05-01T13:24:25Z", "type": "commit"}, {"oid": "e65783ca6781f1331e48c156b3e9743e1e570285", "url": "https://github.com/nordic-institute/X-Road/commit/e65783ca6781f1331e48c156b3e9743e1e570285", "message": "XRDDEV-977 Use constructor dependency injection in GlogalConfChecker", "committedDate": "2020-05-01T13:27:18Z", "type": "commit"}, {"oid": "cc6cf37d5c96814137400086fd3cee12bee91230", "url": "https://github.com/nordic-institute/X-Road/commit/cc6cf37d5c96814137400086fd3cee12bee91230", "message": "XRDDEV-977 Change GlobalConfFacade.getServerOwner from static to instance method", "committedDate": "2020-05-01T13:31:33Z", "type": "commit"}, {"oid": "02e5f6c4845071e1b50e87ef81d1632c94ab574f", "url": "https://github.com/nordic-institute/X-Road/commit/02e5f6c4845071e1b50e87ef81d1632c94ab574f", "message": "XRDDEV-977 Use SigerProxyFacade instead of SignerProxy", "committedDate": "2020-05-01T13:35:18Z", "type": "commit"}, {"oid": "92aba3e2247c75cc13e93b182b5318605f3d8e8e", "url": "https://github.com/nordic-institute/X-Road/commit/92aba3e2247c75cc13e93b182b5318605f3d8e8e", "message": "XRDDEV-977 Throw Exception instead of Quartz JobExecutionException", "committedDate": "2020-05-01T13:43:16Z", "type": "commit"}, {"oid": "f4a06eae1574af8e51366e84b5158676035c2e3c", "url": "https://github.com/nordic-institute/X-Road/commit/f4a06eae1574af8e51366e84b5158676035c2e3c", "message": "XRDDEV-977 Replace SignerClient with SignerProxyFacade", "committedDate": "2020-05-01T13:54:41Z", "type": "commit"}, {"oid": "4321748b686763e021ab180a3fc7fc7e1439c8c5", "url": "https://github.com/nordic-institute/X-Road/commit/4321748b686763e021ab180a3fc7fc7e1439c8c5", "message": "XRDDEV-977 Remove throws from method signature", "committedDate": "2020-05-01T14:07:00Z", "type": "commit"}, {"oid": "96d078742f14b7432240432584f6cfaab8fb9966", "url": "https://github.com/nordic-institute/X-Road/commit/96d078742f14b7432240432584f6cfaab8fb9966", "message": "XRDDEV-977 Add unit tests", "committedDate": "2020-05-05T08:29:26Z", "type": "commit"}, {"oid": "293c0afb3f621c00dce107e7c0d76f1ef8a728a3", "url": "https://github.com/nordic-institute/X-Road/commit/293c0afb3f621c00dce107e7c0d76f1ef8a728a3", "message": "Merge branch 'develop' into XRDDEV-977", "committedDate": "2020-05-05T09:08:40Z", "type": "commit"}]}