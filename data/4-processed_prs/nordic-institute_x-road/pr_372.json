{"pr_number": 372, "pr_title": "XRDDEV-882/883 APIs for adding and deleting configured timestamping services", "pr_createdAt": "2020-02-16T13:18:12Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/372", "timeline": [{"oid": "4777283e0ec7dcd42f08121fc6d4b2c7673b9234", "url": "https://github.com/nordic-institute/X-Road/commit/4777283e0ec7dcd42f08121fc6d4b2c7673b9234", "message": "XRDDEV-910 API for listing configured timestamping services\n\n- Implement API for listing configured timestamping services.\n- Update OpenAPI description.\n- Add unit tests.\n- Enable eager loading of configured timestamping services in serverconf DAO.\n- Implement reverse ordering of returned timestamping services so that they're in the order used by proxy.", "committedDate": "2020-02-15T13:36:00Z", "type": "commit"}, {"oid": "f7b3d17e61166e1720b8c51cf239914d7877766d", "url": "https://github.com/nordic-institute/X-Road/commit/f7b3d17e61166e1720b8c51cf239914d7877766d", "message": "XRDDEV-910 Fix proxy-ui-api incorrect target folder in Ansible script\n\n- Change proxy-ui-api target folder from /usr/share/xroad/jlib/webapps to /usr/share/xroad/jlib.", "committedDate": "2020-02-15T13:39:45Z", "type": "commit"}, {"oid": "cf1d0d372b562d594e8061080ec589e77cf8f606", "url": "https://github.com/nordic-institute/X-Road/commit/cf1d0d372b562d594e8061080ec589e77cf8f606", "message": "XRDDEV-910 Update unit tests\n\n- Add new test that verifies that timestamping services are returned in reverse order.", "committedDate": "2020-02-15T15:48:58Z", "type": "commit"}, {"oid": "7a6412a9b92d499b22465f7de4ffaabf807a4ac5", "url": "https://github.com/nordic-institute/X-Road/commit/7a6412a9b92d499b22465f7de4ffaabf807a4ac5", "message": "XRDDEV-910 Refactor loading of configured timestamping services\n\n- Revert changes in server conf DAO.\n- Use Hibernate.initialize to load timestamping service objects.\n- Remove reverse ordering of returned timestamping services.", "committedDate": "2020-02-16T08:11:36Z", "type": "commit"}, {"oid": "f643c0883779bf502cf3b40956539db31d8e9ea1", "url": "https://github.com/nordic-institute/X-Road/commit/f643c0883779bf502cf3b40956539db31d8e9ea1", "message": "XRDDEV-883 API for deleting configured timestamping services\n\n- Implement API for deleting configured timestamping services.\n- Update OpenAPI description.\n- Add unit tests.", "committedDate": "2020-02-16T10:39:03Z", "type": "commit"}, {"oid": "38d7830b127781a85a300b23ec52210e907073bd", "url": "https://github.com/nordic-institute/X-Road/commit/38d7830b127781a85a300b23ec52210e907073bd", "message": "XRDDEV-910 Refactor API and service layers", "committedDate": "2020-02-16T10:55:33Z", "type": "commit"}, {"oid": "84bf684235da5d435e78fc44b3a81147cb22b81f", "url": "https://github.com/nordic-institute/X-Road/commit/84bf684235da5d435e78fc44b3a81147cb22b81f", "message": "XRDDEV-883 Merge changes from branch XRDDEV-910", "committedDate": "2020-02-16T11:07:11Z", "type": "commit"}, {"oid": "86cfcf8756ef750da8bbb41a7bb809e535ba672b", "url": "https://github.com/nordic-institute/X-Road/commit/86cfcf8756ef750da8bbb41a7bb809e535ba672b", "message": "XRDDEV-882 API for adding new configured timestamping services\n\n- Implement API for adding new configured timestamping services.\n- Add unit tests.", "committedDate": "2020-02-16T13:12:27Z", "type": "commit"}, {"oid": "d3bc8157950c46f5425d3d3d5be5b3f550985c90", "url": "https://github.com/nordic-institute/X-Road/commit/d3bc8157950c46f5425d3d3d5be5b3f550985c90", "message": "XRDDEV-883 Minor refactoring", "committedDate": "2020-02-16T13:28:16Z", "type": "commit"}, {"oid": "4f2d50ca257a5f1dd2e327a1414d64aad9adec79", "url": "https://github.com/nordic-institute/X-Road/commit/4f2d50ca257a5f1dd2e327a1414d64aad9adec79", "message": "XRDDEV-883 Refactor exception messages", "committedDate": "2020-02-16T14:31:31Z", "type": "commit"}, {"oid": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "url": "https://github.com/nordic-institute/X-Road/commit/16f8bc1c64e70cf1592b13ae542ac8e69f189960", "message": "XRDDEV-883 Minor regactoring", "committedDate": "2020-02-16T14:36:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNjMxNA==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380136314", "bodyText": "Instead of multi-type-converters with instanceof conditional it would probably be more consistent with the existing converters to have separate convert(Iterable<String> list) and convert(<TspType> list) methods.\nI have another suggestion about removing convert(Iterable) altogether elsewhere, though.", "author": "jansu76", "createdAt": "2020-02-17T11:47:27Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/converter/TimestampingServiceConverter.java", "diffHunk": "@@ -57,7 +59,15 @@ public TimestampingService convert(String url)  {\n         return timestampingService;\n     }\n \n-    public List<TimestampingService> convert(Iterable<String> urls)  {\n-        return Streams.stream(urls).map(this::convert).collect(Collectors.toList());\n+    public TimestampingService convert(TspType tsp)  {\n+        TimestampingService timestampingService = new TimestampingService();\n+        timestampingService.setUrl(tsp.getUrl());\n+        timestampingService.setName(tsp.getName());\n+        return timestampingService;\n+    }\n+\n+    public List<TimestampingService> convert(Iterable<?> list)  {\n+        return Streams.stream(list).map(n -> n instanceof String ? convert((String)n) : convert((TspType)n))", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MDI2OA==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380240268", "bodyText": "Having methods convert(Iterable<String> list) and convert(Iterable<TspType> list) is not possible, because they still have the same erasure.\nOne alternative would be name them differently, e.g., convertString(Iterable<String> list) and convertTspType(Iterable<TspType> list).", "author": "petkivim", "createdAt": "2020-02-17T15:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNzA1MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380917051", "bodyText": "Ah, I did not realize that. Yeah, different names could be one option. I am still thinking we could avoid that though - more at #372 (comment).", "author": "jansu76", "createdAt": "2020-02-18T20:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzNjMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDAzMw==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380140033", "bodyText": "What do you think about changing this to public Collection<TspType> getApprovedTimestampingServices() with TspType.id = null (and documenting that in the javadoc)? That would make it easier for the callers to handle both types of timestamping services with same constructs, especially it would enable bit of simplification for TimestampingServiceConverter and remove globalConfFacade calls from it. It would make converter layer more thin and dumb and I think unless there's some trouble related to that, we should try to do that to focus business logic inside the service layer. There's some exceptions to this (member name lookups, security server owner lookups) but ideally they should be minimized.", "author": "jansu76", "createdAt": "2020-02-17T11:56:02Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TimestampingServiceService.java", "diffHunk": "@@ -42,20 +47,106 @@\n public class TimestampingServiceService {\n \n     private final GlobalConfService globalConfService;\n+    private final ServerConfService serverConfService;\n \n     /**\n      * constructor\n      */\n     @Autowired\n-    public TimestampingServiceService(GlobalConfService globalConfService) {\n+    public TimestampingServiceService(GlobalConfService globalConfService, ServerConfService serverConfService) {\n         this.globalConfService = globalConfService;\n+        this.serverConfService = serverConfService;\n     }\n \n     /**\n-     * Return timestamping authorities\n+     * Return approved timestamping authorities\n      * @return\n      */\n-    public Collection<String> getTimestampingServices() {\n+    public Collection<String> getApprovedTimestampingServices() {", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MDc4MA==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380240780", "bodyText": "I ended up removing the whole TimestampingServiceService class since it was not really needed after the API changes.", "author": "petkivim", "createdAt": "2020-02-17T15:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxOTg1NQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380919855", "bodyText": "All right. The question about converter / service roles remains still though.\nWhat do you think about something like this: e750d03 ?\nI think TimestampingServiceConverter and GlobalConfService are a bit more close to what their roles \"usually\" are, and converter is thinner and dumber.\nDisclaimer: I did not live test this. Automatic tests pass though.", "author": "jansu76", "createdAt": "2020-02-18T20:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA4NTA2Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r381085066", "bodyText": "I think that your solution looks good. Now the service layer returns TspType objects for both approved and configured  timestamping services which makes the implementation more consistent and simplifies the converter.\nI merged the changes, tested the API manually, and everything works as expected.", "author": "petkivim", "createdAt": "2020-02-19T05:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0MDAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NDAyOQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380144029", "bodyText": "There is a possibility to simplify a little bit these \"find first match\" checks by using streams, as in e.g. \n  \n    \n      X-Road/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ClientService.java\n    \n    \n        Lines 237 to 242\n      in\n      c5d7658\n    \n    \n    \n    \n\n        \n          \n           Optional<CertificateType> duplicate = clientType.getIsCert().stream() \n        \n\n        \n          \n                   .filter(cert -> hash.equalsIgnoreCase(calculateCertHexHash(cert.getData()))) \n        \n\n        \n          \n                   .findFirst(); \n        \n\n        \n          \n           if (duplicate.isPresent()) { \n        \n\n        \n          \n               throw new CertificateAlreadyExistsException(\"certificate already exists\"); \n        \n\n        \n          \n           }", "author": "jansu76", "createdAt": "2020-02-17T12:05:32Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TimestampingServiceService.java", "diffHunk": "@@ -42,20 +47,106 @@\n public class TimestampingServiceService {\n \n     private final GlobalConfService globalConfService;\n+    private final ServerConfService serverConfService;\n \n     /**\n      * constructor\n      */\n     @Autowired\n-    public TimestampingServiceService(GlobalConfService globalConfService) {\n+    public TimestampingServiceService(GlobalConfService globalConfService, ServerConfService serverConfService) {\n         this.globalConfService = globalConfService;\n+        this.serverConfService = serverConfService;\n     }\n \n     /**\n-     * Return timestamping authorities\n+     * Return approved timestamping authorities\n      * @return\n      */\n-    public Collection<String> getTimestampingServices() {\n+    public Collection<String> getApprovedTimestampingServices() {\n         return globalConfService.getApprovedTspsForThisInstance();\n     }\n+\n+    /**\n+     * Return a list of configured timestamping services\n+     * @return\n+     */\n+    public List<TspType> getConfiguredTimestampingServices() {\n+        return serverConfService.getConfiguredTimestampingServices();\n+    }\n+\n+    public void addConfiguredTimestampingService(TimestampingService timestampingServiceToAdd)\n+            throws TimestampingServiceNotFoundException, DuplicateConfiguredTimestampingServiceException {\n+        // Check that the timestamping service is an approved timestamping service\n+        boolean match = false;\n+        for (String url: getApprovedTimestampingServices()) {\n+            if (timestampingServiceToAdd.getName().equals(globalConfService.getApprovedTspName(url))\n+                    && timestampingServiceToAdd.getUrl().equals(url)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        if (!match) {\n+            throw new TimestampingServiceNotFoundException(getExceptionMessage(timestampingServiceToAdd.getName(),\n+                    timestampingServiceToAdd.getUrl(), \"not found\"));\n+        }", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MDk0Nw==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380240947", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-02-17T15:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NDAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0Njk0Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380146942", "bodyText": "We've used a convention where ResourceNotFoundException is reserved for resource as in http URL. So since resource is /timestamping-services, that resource exists and the problem is in the request body, not the \"resource\" identified by the URL. By that logic this would be a BadRequestException (a problem with request body).\nAn example of this \n  \n    \n      X-Road/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TokensApiController.java\n    \n    \n        Lines 207 to 222\n      in\n      c5d7658\n    \n    \n    \n    \n\n        \n          \n           try { \n        \n\n        \n          \n               keyAndCertRequest = keyAndCertificateRequestService.addKeyAndCertRequest( \n        \n\n        \n          \n                       tokenId, keyLabelWithCsrGenerate.getKeyLabel(), \n        \n\n        \n          \n                       memberId, \n        \n\n        \n          \n                       keyUsageInfo, \n        \n\n        \n          \n                       csrGenerate.getCaName(), \n        \n\n        \n          \n                       csrGenerate.getSubjectFieldValues(), \n        \n\n        \n          \n                       csrFormat); \n        \n\n        \n          \n           } catch (ClientNotFoundException | CertificateAuthorityNotFoundException \n        \n\n        \n          \n                   | DnFieldHelper.InvalidDnParameterException e) { \n        \n\n        \n          \n               throw new BadRequestException(e); \n        \n\n        \n          \n           } catch (ActionNotPossibleException e) { \n        \n\n        \n          \n               throw new ConflictException(e); \n        \n\n        \n          \n           } catch (TokenNotFoundException e) { \n        \n\n        \n          \n               throw new ResourceNotFoundException(e); \n        \n\n        \n          \n           } \n        \n    \n  \n\n where ClientNotFoundException -> BadRequestException and TokenNotFoundException -> ResourceNotFound (token id is in the URL)", "author": "jansu76", "createdAt": "2020-02-17T12:12:30Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TimestampingServicesApiController.java", "diffHunk": "@@ -62,9 +65,42 @@ public TimestampingServicesApiController(TimestampingServiceService timestamping\n \n     @Override\n     @PreAuthorize(\"hasAuthority('VIEW_TSPS')\")\n-    public ResponseEntity<List<TimestampingService>> getTimestampingServices() {\n-        Collection<String> urls = timestampingServiceService.getTimestampingServices();\n-        List<TimestampingService> timestampingServices = timestampingServiceConverter.convert(urls);\n+    public ResponseEntity<List<TimestampingService>> getTimestampingServices(Boolean showConfigured) {\n+        List<TimestampingService> timestampingServices;\n+        // If show configured is true, return configured timestamping services from serverconf db.\n+        // Otherwise return approved timestamping services from global conf.\n+        if (showConfigured) {\n+            List<TspType> tsps = timestampingServiceService.getConfiguredTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(tsps);\n+        } else {\n+            Collection<String> urls = timestampingServiceService.getApprovedTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(urls);\n+        }\n         return new ResponseEntity<>(timestampingServices, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADD_TSP')\")\n+    public ResponseEntity<TimestampingService> addTimestampingService(TimestampingService timestampingServiceToAdd) {\n+        try {\n+            timestampingServiceService.addConfiguredTimestampingService(timestampingServiceToAdd);\n+        } catch (TimestampingServiceService.DuplicateConfiguredTimestampingServiceException e) {\n+            throw new ConflictException(e);\n+        } catch (TimestampingServiceNotFoundException e) {\n+            throw new ResourceNotFoundException(e);", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTcyNw==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380241727", "bodyText": "Changed this to TimestampingServiceNotFoundException => BadRequest.", "author": "petkivim", "createdAt": "2020-02-17T15:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0Njk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NzUxOA==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380147518", "bodyText": "Probably BadRequest (see earlier)", "author": "jansu76", "createdAt": "2020-02-17T12:13:48Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TimestampingServicesApiController.java", "diffHunk": "@@ -62,9 +65,42 @@ public TimestampingServicesApiController(TimestampingServiceService timestamping\n \n     @Override\n     @PreAuthorize(\"hasAuthority('VIEW_TSPS')\")\n-    public ResponseEntity<List<TimestampingService>> getTimestampingServices() {\n-        Collection<String> urls = timestampingServiceService.getTimestampingServices();\n-        List<TimestampingService> timestampingServices = timestampingServiceConverter.convert(urls);\n+    public ResponseEntity<List<TimestampingService>> getTimestampingServices(Boolean showConfigured) {\n+        List<TimestampingService> timestampingServices;\n+        // If show configured is true, return configured timestamping services from serverconf db.\n+        // Otherwise return approved timestamping services from global conf.\n+        if (showConfigured) {\n+            List<TspType> tsps = timestampingServiceService.getConfiguredTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(tsps);\n+        } else {\n+            Collection<String> urls = timestampingServiceService.getApprovedTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(urls);\n+        }\n         return new ResponseEntity<>(timestampingServices, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADD_TSP')\")\n+    public ResponseEntity<TimestampingService> addTimestampingService(TimestampingService timestampingServiceToAdd) {\n+        try {\n+            timestampingServiceService.addConfiguredTimestampingService(timestampingServiceToAdd);\n+        } catch (TimestampingServiceService.DuplicateConfiguredTimestampingServiceException e) {\n+            throw new ConflictException(e);\n+        } catch (TimestampingServiceNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        }\n+        return new ResponseEntity<>(timestampingServiceToAdd, HttpStatus.CREATED);\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('DELETE_TSP')\")\n+    public ResponseEntity<Void> deleteTimestampingService(TimestampingService timestampingService) {\n+        try {\n+            timestampingServiceService.deleteConfiguredTimestampingService(timestampingService);\n+        } catch (TimestampingServiceNotFoundException e) {\n+            throw new ResourceNotFoundException(e);", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTgzMA==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380241830", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-02-17T15:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0NzUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MTc4Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380151783", "bodyText": "We have used convention where response has Location header which points to created entity. There is a helper to make this convenient, \n  \n    \n      X-Road/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java\n    \n    \n         Line 308\n      in\n      c5d7658\n    \n    \n    \n    \n\n        \n          \n           return createCreatedResponse(\"/api/local-groups/{id}\", createdGroup, localGroupType.getId()); \n        \n    \n  \n\n\nWe do not have a single-item-getter for timestamping services, so I wonder which would be better, a) point to all-items-getter /token-certificates or b) not include Location header at all?", "author": "jansu76", "createdAt": "2020-02-17T12:23:22Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TimestampingServicesApiController.java", "diffHunk": "@@ -62,9 +65,42 @@ public TimestampingServicesApiController(TimestampingServiceService timestamping\n \n     @Override\n     @PreAuthorize(\"hasAuthority('VIEW_TSPS')\")\n-    public ResponseEntity<List<TimestampingService>> getTimestampingServices() {\n-        Collection<String> urls = timestampingServiceService.getTimestampingServices();\n-        List<TimestampingService> timestampingServices = timestampingServiceConverter.convert(urls);\n+    public ResponseEntity<List<TimestampingService>> getTimestampingServices(Boolean showConfigured) {\n+        List<TimestampingService> timestampingServices;\n+        // If show configured is true, return configured timestamping services from serverconf db.\n+        // Otherwise return approved timestamping services from global conf.\n+        if (showConfigured) {\n+            List<TspType> tsps = timestampingServiceService.getConfiguredTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(tsps);\n+        } else {\n+            Collection<String> urls = timestampingServiceService.getApprovedTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(urls);\n+        }\n         return new ResponseEntity<>(timestampingServices, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADD_TSP')\")\n+    public ResponseEntity<TimestampingService> addTimestampingService(TimestampingService timestampingServiceToAdd) {\n+        try {\n+            timestampingServiceService.addConfiguredTimestampingService(timestampingServiceToAdd);\n+        } catch (TimestampingServiceService.DuplicateConfiguredTimestampingServiceException e) {\n+            throw new ConflictException(e);\n+        } catch (TimestampingServiceNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n+        }\n+        return new ResponseEntity<>(timestampingServiceToAdd, HttpStatus.CREATED);", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NjA5OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380246099", "bodyText": "I ended up leaving this as-is - not including Location header since we do not have an endpoint for a single timestamping entity.", "author": "petkivim", "createdAt": "2020-02-17T15:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MTc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNTM4OA==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380805388", "bodyText": "With a fresh mind this (b) is indeed the better option since it is better to not provide wrong Location header if we cannot provide a correct one.  Discussed same thing with @TJaakkola today, about Endpoint delete, since we don't have a single item getter for that either.", "author": "jansu76", "createdAt": "2020-02-18T16:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MTc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTcxMg==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380155712", "bodyText": "Consider making timestampingServiceService.addConfiguredTimestampingService public TimestampingService addConfiguredTimestampingService(TimestampingService timestampingServiceToAdd) and returning the created object?\nNow if I understand correctly API returns partial TimestampingService object with empty updated_at, message and status? This is a bit inconsistent with how other creates work, an example:\n\n  \n    \n      X-Road/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/ClientsApiController.java\n    \n    \n        Lines 299 to 307\n      in\n      c5d7658\n    \n    \n    \n    \n\n        \n          \n           try { \n        \n\n        \n          \n               localGroupType = localGroupService.addLocalGroup(clientType.getIdentifier(), \n        \n\n        \n          \n                       localGroupConverter.convert(localGroup)); \n        \n\n        \n          \n           } catch (LocalGroupService.DuplicateLocalGroupCodeException e) { \n        \n\n        \n          \n               throw new ConflictException(e); \n        \n\n        \n          \n           } catch (ClientNotFoundException e) { \n        \n\n        \n          \n               throw new ResourceNotFoundException(e); \n        \n\n        \n          \n           } \n        \n\n        \n          \n           LocalGroup createdGroup = localGroupConverter.convert(localGroupType); \n        \n    \n  \n\n\nIt probably does not make sense to go through lots of effort to get this perfect, but at least low hanging fruits can be picked.\nSomething in guidelines about this: https://confluence.niis.org/pages/viewpage.action?pageId=8520435#APIGuidelines&Examples-POSTandPUTshouldreturnusefuldatapostputconvention", "author": "jansu76", "createdAt": "2020-02-17T12:32:21Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/TimestampingServicesApiController.java", "diffHunk": "@@ -62,9 +65,42 @@ public TimestampingServicesApiController(TimestampingServiceService timestamping\n \n     @Override\n     @PreAuthorize(\"hasAuthority('VIEW_TSPS')\")\n-    public ResponseEntity<List<TimestampingService>> getTimestampingServices() {\n-        Collection<String> urls = timestampingServiceService.getTimestampingServices();\n-        List<TimestampingService> timestampingServices = timestampingServiceConverter.convert(urls);\n+    public ResponseEntity<List<TimestampingService>> getTimestampingServices(Boolean showConfigured) {\n+        List<TimestampingService> timestampingServices;\n+        // If show configured is true, return configured timestamping services from serverconf db.\n+        // Otherwise return approved timestamping services from global conf.\n+        if (showConfigured) {\n+            List<TspType> tsps = timestampingServiceService.getConfiguredTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(tsps);\n+        } else {\n+            Collection<String> urls = timestampingServiceService.getApprovedTimestampingServices();\n+            timestampingServices = timestampingServiceConverter.convert(urls);\n+        }\n         return new ResponseEntity<>(timestampingServices, HttpStatus.OK);\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADD_TSP')\")\n+    public ResponseEntity<TimestampingService> addTimestampingService(TimestampingService timestampingServiceToAdd) {\n+        try {\n+            timestampingServiceService.addConfiguredTimestampingService(timestampingServiceToAdd);", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTkwNw==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380221907", "bodyText": "I removed updated_at, message and status from the TimestampingService object that os used by /system/timestamping-servicesAPI since those attributes are related to the Diagnostics only. I created a new object TimestampingServiceDiagnostics that has those attributes. After the change the API returns a full object with all the attributes (name, url) populated.", "author": "petkivim", "createdAt": "2020-02-17T14:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNjY3NQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380806675", "bodyText": "Nice \ud83d\udc4d", "author": "jansu76", "createdAt": "2020-02-18T16:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzQ2Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380163466", "bodyText": "Maybe consider renaming so that the \"only\" part becomes obvious. show_configured could be interpreted as\n\nno parameter / show_configured = false: show all except \"configured\" ones\nshow_configured = true: show all", "author": "jansu76", "createdAt": "2020-02-17T12:50:22Z", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3179,6 +3179,14 @@ paths:\n       summary: view the timestamping services\n       operationId: getTimestampingServices\n       description: Administrator views the timestamping services.\n+      parameters:\n+        - in: query\n+          name: show_configured", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MjE5Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380242193", "bodyText": "Removed the whole query parameter as a part of refactoring the API.", "author": "petkivim", "createdAt": "2020-02-17T15:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NjE5NQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380166195", "bodyText": "using http DELETE with a request body is problematic. Specifications-wise it is on some kind of grey area, and e.g. support from some clients / load balancers etc might vary https://stackoverflow.com/questions/299628/is-an-entity-body-allowed-for-an-http-delete-request\nFor that reason we decided to have e.g. POST /service-clients/{id}/access-rights/delete and to be consistent this should be POST as well.", "author": "jansu76", "createdAt": "2020-02-17T12:56:32Z", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3235,23 +3243,18 @@ paths:\n           description: an existing item already exists\n         '500':\n           description: internal server error\n-  /timestamping-services/{url}:\n     delete: # ok", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MjM2OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380242369", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-02-17T15:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NjE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NzA5OA==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380167098", "bodyText": "Delete and Add now take full TimestampingService object with unnecessary updated_at, message, status. Maybe consider making those readOnly properties, or creating a separate TimestampingServiceIdentifier { name, url } for delete and add, or moving updated_at, message, status to a different object reserved for diagnostics view only.", "author": "jansu76", "createdAt": "2020-02-17T12:58:29Z", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3235,23 +3243,18 @@ paths:\n           description: an existing item already exists\n         '500':\n           description: internal server error\n-  /timestamping-services/{url}:\n     delete: # ok\n       tags:\n         - security server\n       summary: delete timestamping service\n       operationId: deleteTimestampingService\n       description: Administrator removes timestamping service.\n-      parameters:\n-        - in: path\n-          name: url\n-          description: url of the timestamping service\n-          required: true\n-          schema:\n-            type: string\n-            format: text\n-            minLength: 1\n-            maxLength: 255\n+      requestBody:\n+        description: Timestamping service to delete\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/TimestampingService'", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MzE0OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380243149", "bodyText": "Removed updated_at, message and status from TimestampingService, and created a new TimestampingServiceDiagnostics objects with the attributes since they're used in the diagnostics only.", "author": "petkivim", "createdAt": "2020-02-17T15:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NzA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NzcwOQ==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380167709", "bodyText": "Different API structure without the show_configured might be more clear, after all:\nGET /timestamping-services/ (global)\nGET /system/timestamping-services/ (local)\nPOST /system/timestamping-services/ (add local)\nDELETE /system/timestamping-services/ (delete local) (actually POST /system/timestamping-services/delete)", "author": "jansu76", "createdAt": "2020-02-17T12:59:48Z", "path": "src/proxy-ui-api/src/main/resources/openapi-definition.yaml", "diffHunk": "@@ -3179,6 +3179,14 @@ paths:\n       summary: view the timestamping services\n       operationId: getTimestampingServices\n       description: Administrator views the timestamping services.\n+      parameters:", "originalCommit": "16f8bc1c64e70cf1592b13ae542ac8e69f189960", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MzMxNg==", "url": "https://github.com/nordic-institute/X-Road/pull/372#discussion_r380243316", "bodyText": "Refactored the API structure accordingly.", "author": "petkivim", "createdAt": "2020-02-17T15:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NzcwOQ=="}], "type": "inlineReview"}, {"oid": "a574e7c8cacc4a4472d5f209f55b7e52bcd3b3fa", "url": "https://github.com/nordic-institute/X-Road/commit/a574e7c8cacc4a4472d5f209f55b7e52bcd3b3fa", "message": "XRDDEV-883 Updates based on review comments\n\n- Refactor timestamping services API structure\n- Move configured timestamping services endpoints under /system\n- Remove updated_at, message and status attributes from TimestampingService object\n- Create new TimestampingServiceDiagnostics object\n- Update unit tests", "committedDate": "2020-02-17T15:12:45Z", "type": "commit"}, {"oid": "e750d03b8d2b96320d11b1605d0d6d56eefa5ba5", "url": "https://github.com/nordic-institute/X-Road/commit/e750d03b8d2b96320d11b1605d0d6d56eefa5ba5", "message": "XRDDEV-883 alternative converter/service allocation of responsibilities", "committedDate": "2020-02-18T20:26:02Z", "type": "commit"}]}