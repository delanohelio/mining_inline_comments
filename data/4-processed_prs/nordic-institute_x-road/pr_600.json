{"pr_number": 600, "pr_title": "Certificate profile for Faroe Islands' X-Road instance", "pr_createdAt": "2020-07-15T09:09:43Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/600", "timeline": [{"oid": "8ed0b67b32b58b51ad76a79ce27fddd7894b2dfa", "url": "https://github.com/nordic-institute/X-Road/commit/8ed0b67b32b58b51ad76a79ce27fddd7894b2dfa", "message": "TalgilduFO-1 New FO metapackage", "committedDate": "2020-07-01T07:57:47Z", "type": "commit"}, {"oid": "aba0c762d6d9dab434bc037e924e0c812f82bb5d", "url": "https://github.com/nordic-institute/X-Road/commit/aba0c762d6d9dab434bc037e924e0c812f82bb5d", "message": "TalgilduFO-1 Ubuntu control file additions", "committedDate": "2020-07-02T06:11:27Z", "type": "commit"}, {"oid": "b4187d69df099e8ec961ad4e0c5a46c34b36aeaf", "url": "https://github.com/nordic-institute/X-Road/commit/b4187d69df099e8ec961ad4e0c5a46c34b36aeaf", "message": "TalgilduFO-1 Text fix", "committedDate": "2020-07-02T06:47:51Z", "type": "commit"}, {"oid": "4781d47d4010f23529596aa454fa352e65142656", "url": "https://github.com/nordic-institute/X-Road/commit/4781d47d4010f23529596aa454fa352e65142656", "message": "TalgilduFO-1 Enforce token PIN policy (advanced complexity rules)", "committedDate": "2020-07-02T12:28:31Z", "type": "commit"}, {"oid": "77087207415da6b3fa5bab5bbeba0a0dd1bc77d2", "url": "https://github.com/nordic-institute/X-Road/commit/77087207415da6b3fa5bab5bbeba0a0dd1bc77d2", "message": "Merge pull request #3 from TalgilduFO/TalgilduFO-1-fo-metapackage\n\nImplements #1", "committedDate": "2020-07-02T12:33:56Z", "type": "commit"}, {"oid": "2ed075ed6219cefd3c7469729efea8a28c513d20", "url": "https://github.com/nordic-institute/X-Road/commit/2ed075ed6219cefd3c7469729efea8a28c513d20", "message": "Merge branch 'develop' into fo-certificate-profile", "committedDate": "2020-07-09T05:34:04Z", "type": "commit"}, {"oid": "ec0b29e1915981c91391caa562a08cef5c55314f", "url": "https://github.com/nordic-institute/X-Road/commit/ec0b29e1915981c91391caa562a08cef5c55314f", "message": "TalgilduFO-2-certificate-profile Sign and auth profiles for the Faroe Islands", "committedDate": "2020-07-09T05:39:31Z", "type": "commit"}, {"oid": "a9ed5dfe2852e165e523d97e52ba4efab958a02b", "url": "https://github.com/nordic-institute/X-Road/commit/a9ed5dfe2852e165e523d97e52ba4efab958a02b", "message": "TalgilduFO-2-certificate-profile change validations and descriptions of the FO profile", "committedDate": "2020-07-09T05:39:31Z", "type": "commit"}, {"oid": "7d77110a1e4078b7bbd0c8fc9b992f15352adc16", "url": "https://github.com/nordic-institute/X-Road/commit/7d77110a1e4078b7bbd0c8fc9b992f15352adc16", "message": "TalgilduFO-2-certificate-profile Automatic tests for the FO profile", "committedDate": "2020-07-09T05:39:31Z", "type": "commit"}, {"oid": "82f861608963ac18a0330a24ff237a7fb85a26da", "url": "https://github.com/nordic-institute/X-Road/commit/82f861608963ac18a0330a24ff237a7fb85a26da", "message": "TalgilduFO-2: Add missing localizations\n\nAdd missing localizations for certificate profile field descriptions.", "committedDate": "2020-07-09T10:25:45Z", "type": "commit"}, {"oid": "3ac7ddcb2c345e2a563e75c21593869f24254404", "url": "https://github.com/nordic-institute/X-Road/commit/3ac7ddcb2c345e2a563e75c21593869f24254404", "message": "Merge pull request #5 from TalgilduFO/TalgilduFO-2-certificate-profile-rebased\n\nTalgilduFO-2 certificate profile", "committedDate": "2020-07-09T11:25:47Z", "type": "commit"}, {"oid": "028113542929d6dbcd24435586ee8da7e158c1c7", "url": "https://github.com/nordic-institute/X-Road/commit/028113542929d6dbcd24435586ee8da7e158c1c7", "message": "TalgilduFO-2: Fix signing profile\n\nUse ClientId instead of ServerId when filling the field default values.", "committedDate": "2020-07-09T13:58:25Z", "type": "commit"}, {"oid": "6b6c400fef61352527b1549b23a63fe356ef880f", "url": "https://github.com/nordic-institute/X-Road/commit/6b6c400fef61352527b1549b23a63fe356ef880f", "message": "Merge branch 'develop' into fo-certificate-profile", "committedDate": "2020-07-15T08:19:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNDMzOA==", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467824338", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Tests whether validating black subject field of sign profile fails\n          \n          \n            \n                 * Tests whether validating blank subject field of sign profile fails", "author": "iluwatar", "createdAt": "2020-08-10T10:50:23Z", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"OU\", DnFieldLabelLocalizationKey.MEMBER_CLASS_OU, \"COM\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.MEMBER_CODE, \"CLIENT\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"serialNumber\", DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        \"YY/ORG/OWNER/server\")\n+                        .setReadOnly(false)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\",\n+                Arrays.areEqual(expectedFields, getSignProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field succeeds as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void signProfileValidateFieldSuccessfully() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field fails as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateUnknownField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating black subject field of sign profile fails", "originalCommit": "6b6c400fef61352527b1549b23a63fe356ef880f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgzMjM5Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467832392", "bodyText": "The field is assigned but doesn't seem to be used anywhere", "author": "iluwatar", "createdAt": "2020-08-10T11:08:48Z", "path": "src/common-util/src/main/java/ee/ria/xroad/common/certificateprofile/impl/FoSignCertificateProfileInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.SignCertificateProfileInfo;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.util.FoSubjectClientIdDecoder;\n+\n+import java.security.cert.X509Certificate;\n+\n+/**\n+ * The Faroe Islands's implementation of SignCertificateProfileInfo.\n+ */\n+public class FoSignCertificateProfileInfo extends AbstractCertificateProfileInfo implements SignCertificateProfileInfo {\n+\n+    protected final Parameters params;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param params the parameters\n+     */\n+    public FoSignCertificateProfileInfo(Parameters params) {\n+        super(new DnFieldDescription[] {\n+\n+                // Country Identifier\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"C\",\n+                        DnFieldLabelLocalizationKey.COUNTRY_CODE,\n+                        \"FO\"\n+                ).setReadOnly(true),\n+\n+                // Instance Identifier\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"O\",\n+                        DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O,\n+                        params.getClientId().getXRoadInstance()\n+                ).setReadOnly(true),\n+\n+                // Member Class Identifier\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"OU\",\n+                        DnFieldLabelLocalizationKey.MEMBER_CLASS_OU,\n+                        params.getClientId().getMemberClass()\n+                ).setReadOnly(true),\n+\n+                // Member code\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"CN\",\n+                        DnFieldLabelLocalizationKey.MEMBER_CODE,\n+                        params.getClientId().getMemberCode()\n+                ).setReadOnly(true),\n+\n+                // Serialnumber\n+                new EnumLocalizedFieldDescriptionImpl(\n+                        \"serialNumber\",\n+                        DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        params.getServerId().toShortString()\n+                ).setReadOnly(false)\n+\n+        });\n+        this.params = params;", "originalCommit": "6b6c400fef61352527b1549b23a63fe356ef880f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0Mjc0Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467842746", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void signProfileSubjectFields() {\n          \n          \n            \n                public void signProfileGetSubjectFields() {", "author": "iluwatar", "createdAt": "2020-08-10T11:31:46Z", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {", "originalCommit": "6b6c400fef61352527b1549b23a63fe356ef880f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MzAwMg==", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467843002", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void authProfileSubjectFields() {\n          \n          \n            \n                public void authProfileGetSubjectFields() {", "author": "iluwatar", "createdAt": "2020-08-10T11:32:18Z", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"OU\", DnFieldLabelLocalizationKey.MEMBER_CLASS_OU, \"COM\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.MEMBER_CODE, \"CLIENT\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"serialNumber\", DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        \"YY/ORG/OWNER/server\")\n+                        .setReadOnly(false)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\",\n+                Arrays.areEqual(expectedFields, getSignProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field succeeds as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void signProfileValidateFieldSuccessfully() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field fails as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateUnknownField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating black subject field of sign profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateBlankField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"O\", \"\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether creating subject Dn of sign profile succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileCreateSubjectDn() {\n+        assertEquals(\n+                new X500Principal(\"C=foo, O=bar, CN=baz\"),\n+                getSignProfile().createSubjectDn(\n+                        new DnFieldValue[] {\n+                                new DnFieldValueImpl(\"C\", \"foo\"),\n+                                new DnFieldValueImpl(\"O\", \"bar\"),\n+                                new DnFieldValueImpl(\"CN\", \"baz\")\n+                        }\n+                )\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting subject identifier of sign profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void signProfileGetSubjectIdentifier() {\n+        X509Certificate mockCert = Mockito.mock(X509Certificate.class);\n+        Mockito.when(mockCert.getSubjectX500Principal()).thenReturn(\n+                new X500Principal(\"C=FO, O=XX, OU=Foo, CN=bar, serialNumber=qux\")\n+        );\n+        assertEquals(\n+                ClientId.create(\"XX\", \"Foo\", \"bar\"),\n+                getSignProfile().getSubjectIdentifier(mockCert)\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected fields of auth profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void authProfileSubjectFields() {", "originalCommit": "6b6c400fef61352527b1549b23a63fe356ef880f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg0MzgxOA==", "url": "https://github.com/nordic-institute/X-Road/pull/600#discussion_r467843818", "bodyText": "naming, maybe getProvider?", "author": "iluwatar", "createdAt": "2020-08-10T11:34:09Z", "path": "src/common-util/src/test/java/ee/ria/xroad/common/certificateprofile/impl/FoCertificateProfileInfoProviderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package ee.ria.xroad.common.certificateprofile.impl;\n+\n+import ee.ria.xroad.common.certificateprofile.CertificateProfileInfoProvider;\n+import ee.ria.xroad.common.certificateprofile.DnFieldDescription;\n+import ee.ria.xroad.common.certificateprofile.DnFieldValue;\n+import ee.ria.xroad.common.identifier.ClientId;\n+import ee.ria.xroad.common.identifier.SecurityServerId;\n+\n+import org.bouncycastle.util.Arrays;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import java.security.cert.X509Certificate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the Faroe Islands' implementation of CertificateProfileInfoProvider.\n+ */\n+public class FoCertificateProfileInfoProviderTest {\n+\n+    /**\n+     * Tests whether provider returns correct implementation as expected.\n+     */\n+    @Test\n+    public void providerReturnsCorrectImplementations() {\n+        CertificateProfileInfoProvider provider = provider();\n+        assertTrue(\n+                \"Must return instance of FoAuthCertificateProfileInfo\",\n+                provider.getAuthCertProfile(\n+                        new AuthCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\"), \"foo\"\n+                        )\n+                ) instanceof FoAuthCertificateProfileInfo\n+        );\n+\n+        assertTrue(\n+                \"Must return instance of FoSignCertificateProfileInfo\",\n+                provider.getSignCertProfile(\n+                        new SignCertificateProfileInfoParameters(\n+                                SecurityServerId.create(\"XX\", \"CLASS\", \"OWNER\", \"server\"),\n+                                ClientId.create(\"XX\", \"CLASS\", \"CLIENT\"), \"client\"\n+                        )\n+                ) instanceof FoSignCertificateProfileInfo\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected subject fields succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"OU\", DnFieldLabelLocalizationKey.MEMBER_CLASS_OU, \"COM\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.MEMBER_CODE, \"CLIENT\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"serialNumber\", DnFieldLabelLocalizationKey.SERIAL_NUMBER,\n+                        \"YY/ORG/OWNER/server\")\n+                        .setReadOnly(false)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\",\n+                Arrays.areEqual(expectedFields, getSignProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field succeeds as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void signProfileValidateFieldSuccessfully() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field fails as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateUnknownField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating black subject field of sign profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void signProfileFailToValidateBlankField() throws Exception {\n+        getSignProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"O\", \"\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether creating subject Dn of sign profile succeeds as expected.\n+     */\n+    @Test\n+    public void signProfileCreateSubjectDn() {\n+        assertEquals(\n+                new X500Principal(\"C=foo, O=bar, CN=baz\"),\n+                getSignProfile().createSubjectDn(\n+                        new DnFieldValue[] {\n+                                new DnFieldValueImpl(\"C\", \"foo\"),\n+                                new DnFieldValueImpl(\"O\", \"bar\"),\n+                                new DnFieldValueImpl(\"CN\", \"baz\")\n+                        }\n+                )\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting subject identifier of sign profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void signProfileGetSubjectIdentifier() {\n+        X509Certificate mockCert = Mockito.mock(X509Certificate.class);\n+        Mockito.when(mockCert.getSubjectX500Principal()).thenReturn(\n+                new X500Principal(\"C=FO, O=XX, OU=Foo, CN=bar, serialNumber=qux\")\n+        );\n+        assertEquals(\n+                ClientId.create(\"XX\", \"Foo\", \"bar\"),\n+                getSignProfile().getSubjectIdentifier(mockCert)\n+        );\n+    }\n+\n+    /**\n+     * Tests whether getting expected fields of auth profile succeeds\n+     * as expected.\n+     */\n+    @Test\n+    public void authProfileSubjectFields() {\n+        DnFieldDescription[] expectedFields = {\n+                new EnumLocalizedFieldDescriptionImpl(\"C\", DnFieldLabelLocalizationKey.COUNTRY_CODE, \"FO\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"O\", DnFieldLabelLocalizationKey.INSTANCE_IDENTIFIER_O, \"XX\")\n+                        .setReadOnly(true),\n+                new EnumLocalizedFieldDescriptionImpl(\"CN\", DnFieldLabelLocalizationKey.COMMON_NAME,\n+                        \"XX/foo/bar/server\")\n+                        .setReadOnly(true)\n+        };\n+\n+        assertTrue(\n+                \"Did not get expected fields\" + SecurityServerId.create(\"XX\", \"foo\", \"bar\", \"server\").toShortString(),\n+                Arrays.areEqual(expectedFields, getAuthProfile().getSubjectFields())\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating correct subject field of auth profile succeeds\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test\n+    public void authProfileValidateFieldSuccessfully() throws Exception {\n+        getAuthProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"C\", \"XX\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating unknown subject field of auth profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = Exception.class)\n+    public void authProfileFailToValidateUnknownField() throws Exception {\n+        getAuthProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"X\", \"foo\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether validating blank subject field of auth profile fails\n+     * as expected.\n+     * @throws Exception in case of any unexpected errors\n+     */\n+    @Test(expected = Exception.class)\n+    public void authProfileFailToValidateBlankField() throws Exception {\n+        getAuthProfile().validateSubjectField(\n+                new DnFieldValueImpl(\"serialNumber\", \"\")\n+        );\n+    }\n+\n+    /**\n+     * Tests whether creating subject Dn of auth profile succeeds as expected.\n+     */\n+    @Test\n+    public void authProfileCreateSubjectDn() {\n+        assertEquals(\n+                new X500Principal(\"C=foo, CN=baz\"),\n+                getAuthProfile().createSubjectDn(\n+                        new DnFieldValue[] {\n+                                new DnFieldValueImpl(\"C\", \"foo\"),\n+                                new DnFieldValueImpl(\"CN\", \"baz\")\n+                        }\n+                )\n+        );\n+    }\n+\n+    // ------------------------------------------------------------------------\n+\n+    private CertificateProfileInfoProvider provider() {", "originalCommit": "6b6c400fef61352527b1549b23a63fe356ef880f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "315397e8615079a7711e5ae89b5e2bad52b2bb0e", "url": "https://github.com/nordic-institute/X-Road/commit/315397e8615079a7711e5ae89b5e2bad52b2bb0e", "message": "Merge branch 'develop' into fo-certificate-profile", "committedDate": "2020-08-11T06:21:19Z", "type": "commit"}, {"oid": "1aab622488dcf5856d29570937be4661104f9afd", "url": "https://github.com/nordic-institute/X-Road/commit/1aab622488dcf5856d29570937be4661104f9afd", "message": "TalgilduFO-2: Fix review findings", "committedDate": "2020-08-11T06:37:10Z", "type": "commit"}]}