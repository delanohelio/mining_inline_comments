{"pr_number": 558, "pr_title": "XRDDEV-1122", "pr_createdAt": "2020-06-17T06:30:31Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/558", "timeline": [{"oid": "5a1b7071533cb19442cd92a953cfc2e0b63b5011", "url": "https://github.com/nordic-institute/X-Road/commit/5a1b7071533cb19442cd92a953cfc2e0b63b5011", "message": "XRDDEV-1122 Fix bug in get subsystems query\n\n- Add missing query parameter: internal_search=false", "committedDate": "2020-06-16T09:23:00Z", "type": "commit"}, {"oid": "335d95bf2ff84c3c84c7f28277f7864bce52f7b7", "url": "https://github.com/nordic-institute/X-Road/commit/335d95bf2ff84c3c84c7f28277f7864bce52f7b7", "message": "XRDDEV-1122 Fix bug in client search with local_valid_sign_cert query param\n\n- Compare only the member part of the client identifier to member identifiers in the certificates.", "committedDate": "2020-06-16T09:25:17Z", "type": "commit"}, {"oid": "b1d37d78cf382eecaa60e9c637be98ceb56f45be", "url": "https://github.com/nordic-institute/X-Road/commit/b1d37d78cf382eecaa60e9c637be98ceb56f45be", "message": "XRDDEV-1122 Remove non-existing query parameter member_missing_sign_cert from get clients query", "committedDate": "2020-06-16T09:41:30Z", "type": "commit"}, {"oid": "4f94b443acbf31fdff8c306ea81fe34d30a10219", "url": "https://github.com/nordic-institute/X-Road/commit/4f94b443acbf31fdff8c306ea81fe34d30a10219", "message": "XRDDEV-1122 Fix Add client list content\n\n- Filter out all clients that have local relatives.\n- If the member owning the client or another subsystem of the same member is already present locally, the client is excluded.", "committedDate": "2020-06-17T06:26:13Z", "type": "commit"}, {"oid": "b30304c30e5e0ede95f97d6f191dc13fe1dc00d0", "url": "https://github.com/nordic-institute/X-Road/commit/b30304c30e5e0ede95f97d6f191dc13fe1dc00d0", "message": "XRDDEV-1122 Fix failing backend test", "committedDate": "2020-06-17T07:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyODM5MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/558#discussion_r441428391", "bodyText": "I think adding internal_search=false here doesn't make a difference to the logic as I'm pretty sure that missing field will be interpreted as false anyway. It's not wrong but I guess if it's futile then it could be removed.", "author": "TJaakkola", "createdAt": "2020-06-17T09:57:12Z", "path": "src/proxy-ui-api/frontend/src/views/AddSubsystem/AddSubsystem.vue", "diffHunk": "@@ -255,7 +255,7 @@ export default Vue.extend({\n       // Fetch selectable subsystems\n       api\n         .get(\n-          `/clients?instance=${this.instanceId}&member_class=${this.memberClass}&member_code=${this.memberCode}&show_members=false&exclude_local=true`,\n+          `/clients?instance=${this.instanceId}&member_class=${this.memberClass}&member_code=${this.memberCode}&show_members=false&exclude_local=true&internal_search=false`,", "originalCommit": "b30304c30e5e0ede95f97d6f191dc13fe1dc00d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1Nzg4OA==", "url": "https://github.com/nordic-institute/X-Road/pull/558#discussion_r441557888", "bodyText": "By default internal_search is actually true:\n\n  \n    \n      X-Road/src/proxy-ui-api/src/main/resources/openapi-definition.yaml\n    \n    \n         Line 657\n      in\n      bc20e9a\n    \n    \n    \n    \n\n        \n          \n           default: true \n        \n    \n  \n\n\nThe original problem was that the parameter was missing and the default value (true) was used which led to incorrect query.", "author": "petkivim", "createdAt": "2020-06-17T13:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyODM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0NDcyNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/558#discussion_r441444725", "bodyText": "Making an async call inside anothers success-block creates what is called a callback hell. This also introduces an extra period of waiting as the latter call is created after the first has been successfully completed.\nWith Promise.all we can send multiple rest calls and wait for ALL of them have completed successfully. The code sample of how this is done is below. I didn't test it but it's at least nearly there...\n// Fetch list of local clients and filter out global clients\n    // that have local relatives\n    return Promise.all([globalClientsPromise, localClientsPromise])\n      .then( (response) => {\n        const globalClients = response[0];\n        const localClients = response[1];\n        commit('storeSelectableClients', excludeClientsWithLocalRelatives(globalClients.data, localClients.data));\n      })\n      .catch( error => {\n        throw error;\n      });", "author": "TJaakkola", "createdAt": "2020-06-17T10:26:04Z", "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -143,13 +161,21 @@ export const actions: ActionTree<AddClientState, RootState> = {\n     // Fetch clients from backend that can be selected\n     return api\n       .get(\n-        '/clients?exclude_local=true&member_missing_sign_cert=true&internal_search=false&show_members=false',\n+        '/clients?exclude_local=true&internal_search=false&show_members=false',\n       )\n-      .then((res) => {\n-        commit('storeSelectableClients', res.data);\n+      .then((globalClientsRes) => {\n+        // Fetch list of local clients and filter out global clients\n+        // that have local relatives\n+        api.get('/clients').then((localClientsRes) => {\n+            commit('storeSelectableClients',\n+            excludeClientsWithLocalRelatives(globalClientsRes.data, localClientsRes.data));\n+          })\n+          .catch((localClientsError) => {\n+            throw localClientsError;\n+          });\n       })\n-      .catch((error) => {\n-        throw error;\n+      .catch((globalClientsError) => {\n+        throw globalClientsError;\n       });", "originalCommit": "b30304c30e5e0ede95f97d6f191dc13fe1dc00d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4NTU1MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/558#discussion_r441585551", "bodyText": "Thanks for the suggestion! I updated the implementation accordingly. It worked almost directly - just to had to define globalClientsPromise and localClientsPromise.", "author": "petkivim", "createdAt": "2020-06-17T14:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ0NDcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ1NTA2Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/558#discussion_r441455063", "bodyText": "Although this code works correctly I think it could be optimized and made in more currently idiomatic javascript way by using array operation some (which is a for loop which will quit looping through if true is returned inside it. Also some will return a false or true value, false is true is not returned).\nHere's an example showing how I would try to make this to be easier to read:\n`\nconst memberEquals = (client: Client, other: Client): boolean =>\nclient.member_class === other.member_class &&\nclient.member_code === other.member_code &&\nclient.instance_id === other.instance_id;\n// Filters out clients that have local relatives.\n// If the member owning the client or another subsystem\n// of the same member is already present locally,\n// the client is excluded.\nconst excludeClientsWithLocalRelatives = (clients: Client[], localClients: Client[]): Client[] => {\nreturn clients.filter((client: Client) => {\nreturn !localClients.some( (localClient: Client) => memberEquals(localClient, client))\n});\n}\n`\nIf memberEquals (not sure if this is a good function name here) returns true then loop is short circuited and false (negated) is returned to the wrapping filter function.\nI didn't test whether this works by just replacing the existing implementation but it should.", "author": "TJaakkola", "createdAt": "2020-06-17T10:46:15Z", "path": "src/proxy-ui-api/frontend/src/store/modules/addClient.ts", "diffHunk": "@@ -134,6 +134,24 @@ export const mutations: MutationTree<AddClientState> = {\n   },\n };\n \n+// Filters out clients that have local relatives.\n+// If the member owning the client or another subsystem\n+// of the same member is already present locally,\n+// the client is excluded.\n+const excludeClientsWithLocalRelatives = (clients: Client[], localClients: Client[]): Client[] => {\n+  return clients.filter((client: Client) => {\n+    let showClient = true;\n+    localClients.forEach((localClient: Client) => {\n+      if (localClient.member_class === client.member_class &&\n+          localClient.member_code === client.member_code &&\n+          localClient.instance_id === client.instance_id) {\n+        showClient = false;\n+      }\n+    });\n+    return showClient;\n+  });", "originalCommit": "b30304c30e5e0ede95f97d6f191dc13fe1dc00d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4ODY1Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/558#discussion_r441588656", "bodyText": "Thanks for the suggestion. I updated the implementation accordingly.\nI think that memberEquals is a descriptive name for the function. However, I added some comments for clarification just in case.", "author": "petkivim", "createdAt": "2020-06-17T14:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ1NTA2Mw=="}], "type": "inlineReview"}, {"oid": "c7de2060b8f6e67d83bf3cc2b78e2481ecd0b8eb", "url": "https://github.com/nordic-institute/X-Road/commit/c7de2060b8f6e67d83bf3cc2b78e2481ecd0b8eb", "message": "XRDDEV-1122 Refactor implementation\n\n- Use Promise.all instead of nested callbacks.", "committedDate": "2020-06-17T14:04:59Z", "type": "commit"}, {"oid": "98df0db00e676dd3c9ac9437422681e2c47e1adf", "url": "https://github.com/nordic-institute/X-Road/commit/98df0db00e676dd3c9ac9437422681e2c47e1adf", "message": "XRDDEV-1122 Refactor based review comments", "committedDate": "2020-06-17T14:20:33Z", "type": "commit"}]}