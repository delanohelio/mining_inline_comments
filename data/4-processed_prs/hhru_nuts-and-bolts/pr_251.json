{"pr_number": 251, "pr_title": "HH-113352 request cluster metadata before producer start", "pr_createdAt": "2020-07-22T08:16:48Z", "pr_url": "https://github.com/hhru/nuts-and-bolts/pull/251", "timeline": [{"oid": "d2052cd781e2094dcb8554b301d0ed2dca6969eb", "url": "https://github.com/hhru/nuts-and-bolts/commit/d2052cd781e2094dcb8554b301d0ed2dca6969eb", "message": "HH-113352 add metadata request on producer start", "committedDate": "2020-07-22T08:15:32Z", "type": "commit"}, {"oid": "45a5d9626da9db6daaa1c15cd3290d5bf8c20f98", "url": "https://github.com/hhru/nuts-and-bolts/commit/45a5d9626da9db6daaa1c15cd3290d5bf8c20f98", "message": "HH-113352 remove non used variable from kafka unit", "committedDate": "2020-07-22T08:16:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxOTU0MQ==", "url": "https://github.com/hhru/nuts-and-bolts/pull/251#discussion_r458619541", "bodyText": "\u041c\u0435\u0442\u043e\u0434 createRawProducer \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u043d \u0432 KafkaProducerFactory \u0434\u043b\u044f \u043e\u0432\u0435\u0440\u0430\u0439\u0434\u0430.\n\u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0438\u0442\u044c \u0441\u0430\u043c \u043f\u0440\u043e\u0434\u044c\u044e\u0441\u0435\u0440 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f - \u043c\u0435\u0442\u043e\u0434\nwaitOnMetadata \u0438 \u0432\u043e\u043e\u0431\u0449\u0435 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043c\u0435\u0442\u0430\u0434\u0430\u0442\u0435 \u0442\u0430\u043c \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0435\nwaitOnMetadata \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 2-\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 - \u043b\u0438\u0431\u043e \u043f\u0440\u0438 .send() \u043b\u0438\u0431\u043e \u043f\u0440\u0438 . partitionsFor()\n\u0422.\u043a. \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 - \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u043f\u0430\u0441\u043d\u0430\u044f, \u0440\u0435\u0448\u0438\u043b \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0439 \u043f\u043e\u0431\u043e\u0447\u043d\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 (\u043d\u0430\u0434\u0435\u044e\u0441\u044c) \u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0442\u043e\u043f\u0438\u043a\u0430 (\u043e\u043d \u0432\u0435\u0440\u043d\u0435\u0442 emptyList, \u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0445\u043e\u0434\u0430 \u0432 \u043a\u043b\u0430\u0441\u0442\u0435\u0440 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u044b, \u0447\u0442\u043e \u0442\u043e\u043f\u0438\u043a\u0430 \u043d\u0435\u0442)", "author": "bokshitsky", "createdAt": "2020-07-22T08:20:22Z", "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/producer/KafkaProducerFactory.java", "diffHunk": "@@ -29,10 +31,15 @@ public KafkaProducer createProducer(String producerSettingsName) {\n     producerConfig.put(CommonClientConfigs.METRIC_REPORTER_CLASSES_CONFIG, KafkaStatsDReporter.class.getName());\n \n     ProducerFactory<String, Object> producerFactory = new DefaultKafkaProducerFactory<>(\n-        producerConfig,\n-        new StringSerializer(),\n-        serializerSupplier.supply()\n-    );\n+        producerConfig, new StringSerializer(), serializerSupplier.supply()\n+    ) {\n+      @Override\n+      protected Producer<String, Object> createRawProducer(Map<String, Object> configs) {\n+        Producer<String, Object> rawProducer = super.createRawProducer(configs);\n+        rawProducer.partitionsFor(\"request_partitions_for_topic_to_force_metadata_request\");", "originalCommit": "45a5d9626da9db6daaa1c15cd3290d5bf8c20f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxOTk2Nw==", "url": "https://github.com/hhru/nuts-and-bolts/pull/251#discussion_r458619967", "bodyText": "\u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u043e \u0447\u0443\u0442\u043a\u0430 \u043f\u043e\u043d\u044f\u0442\u043d\u0435\u0435, \u0447\u0442\u043e \u0437\u0430 \u0447\u0438\u0441\u043b\u043e 5 \u0432\u0437\u044f\u043b\u043e\u0441\u044c", "author": "bokshitsky", "createdAt": "2020-07-22T08:21:07Z", "path": "nab-tests/src/test/java/ru/hh/nab/kafka/consumer/ConsumerRecoveryAfterFailTest.java", "diffHunk": "@@ -52,20 +51,19 @@ public void testNoGlobalAckPerformed() throws InterruptedException {\n   @Test\n   public void testSeek() throws InterruptedException {\n     putMessagesIntoKafka(117);\n-    AtomicBoolean failed = new AtomicBoolean(false);\n     startConsumer((messages, ack) -> messages.forEach(m -> {\n       processedMessages.add(m.value());\n       if (processedMessages.size() == 40) {\n         ack.seek(m);\n       }\n-      if (!failed.get() && processedMessages.size() == 45) {\n+      if (processedMessages.size() == 45) {\n         throw new IllegalStateException(\"Processing failed\");\n       }\n     }));\n-    assertProcessedMessagesCount(117 + 5);\n+    assertProcessedMessagesCount(117 + (45 - 40));", "originalCommit": "45a5d9626da9db6daaa1c15cd3290d5bf8c20f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}