{"pr_number": 12898, "pr_title": "CDAP-16527 include field name in casting errors for records", "pr_createdAt": "2020-12-11T21:58:44Z", "pr_url": "https://github.com/cdapio/cdap/pull/12898", "timeline": [{"oid": "d76bac6da422133e5ecf461832cc0461f6ae2ee9", "url": "https://github.com/cdapio/cdap/commit/d76bac6da422133e5ecf461832cc0461f6ae2ee9", "message": "CDAP-16527 include field name is casting errors for records\n\nFor logical type utility methods, including the field name when\nthe type is not as expected.\n\nThis is only required because the builder does not verify that\na valid type is being set for a field. If/when that verification\nis added, this logic can be removed.", "committedDate": "2020-12-11T21:58:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNzgwMQ==", "url": "https://github.com/cdapio/cdap/pull/12898#discussion_r542917801", "bodyText": "Why do we retrow ClassCastException in all other cases, but UnexpectedFormatException here?", "author": "tivv", "createdAt": "2020-12-14T23:19:59Z", "path": "cdap-api-common/src/main/java/io/cdap/cdap/api/data/format/StructuredRecord.java", "diffHunk": "@@ -192,7 +220,12 @@ public BigDecimal getDecimal(String fieldName) {\n       return new BigDecimal(new BigInteger(Bytes.toBytes((ByteBuffer) value)), scale);\n     }\n \n-    return new BigDecimal(new BigInteger((byte[]) value), scale);\n+    try {\n+      return new BigDecimal(new BigInteger((byte[]) value), scale);\n+    } catch (ClassCastException e) {\n+      throw new UnexpectedFormatException(String.format(\"Field '%s' is expected to be a %s, but is a %s.\", fieldName,", "originalCommit": "d76bac6da422133e5ecf461832cc0461f6ae2ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MTI0NA==", "url": "https://github.com/cdapio/cdap/pull/12898#discussion_r542971244", "bodyText": "good catch, not intended will change it", "author": "albertshau", "createdAt": "2020-12-15T01:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNzgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxOTI3MQ==", "url": "https://github.com/cdapio/cdap/pull/12898#discussion_r542919271", "bodyText": "It would be great to test the fix: not only exception type, but message as well. You should be able to use https://junit.org/junit4/javadoc/latest/org/junit/rules/ExpectedException.html to do it.", "author": "tivv", "createdAt": "2020-12-14T23:23:22Z", "path": "cdap-formats/src/test/java/io/cdap/cdap/format/StructuredRecordBuilderTest.java", "diffHunk": "@@ -285,4 +285,25 @@ public void testInvalidPrecision() {\n     Schema schema = Schema.recordOf(\"test\", Schema.Field.of(\"d\", Schema.decimalOf(5, 2)));\n     StructuredRecord.builder(schema).setDecimal(\"d\", new BigDecimal(new BigInteger(\"12341324\"), 2)).build();\n   }\n+\n+  @Test(expected = ClassCastException.class)", "originalCommit": "d76bac6da422133e5ecf461832cc0461f6ae2ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3MzIyMQ==", "url": "https://github.com/cdapio/cdap/pull/12898#discussion_r542973221", "bodyText": "nice, did not know about this, will update", "author": "albertshau", "createdAt": "2020-12-15T01:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxOTI3MQ=="}], "type": "inlineReview"}, {"oid": "cd725904d737cd8fa42d0faf0ff0fcdab626aa60", "url": "https://github.com/cdapio/cdap/commit/cd725904d737cd8fa42d0faf0ff0fcdab626aa60", "message": "CDAP-16527 fix decimal getter and check messages in tests", "committedDate": "2020-12-15T01:30:49Z", "type": "commit"}]}