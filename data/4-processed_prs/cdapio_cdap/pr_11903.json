{"pr_number": 11903, "pr_title": "Add client to fetch Application/Schedule/Preferences details ", "pr_createdAt": "2020-02-28T19:00:08Z", "pr_url": "https://github.com/cdapio/cdap/pull/11903", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzE5Mg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983192", "bodyText": "I think we can remove the 'Abstract' and just have ApplicationDetailFetcher.", "author": "albertshau", "createdAt": "2020-02-29T00:49:27Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzMzNA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983334", "bodyText": "is the plan to have ApplicationLifecycleService implement this interface?", "author": "albertshau", "createdAt": "2020-02-29T00:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMzQ5MA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386003490", "bodyText": "Done. Removed \"Abstract\"\nYes. But I am a bit leaning toward creating a LocalxxxFetcher that contains an instance of xxxService instead of have xxxService implement the interface, so it looks a bit more symmetric. Coming from C++ background, I find a class implementing multiple different interfaces a bit intuitive.", "author": "wyzhang", "createdAt": "2020-02-29T05:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzQ2Nw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983467", "bodyText": "javadoc should include information about when the different exceptions are thrown", "author": "albertshau", "createdAt": "2020-02-29T00:51:20Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {\n+\n+  /**\n+   * Get the application detail for the given application id", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMzk3OA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386003978", "bodyText": "Done", "author": "wyzhang", "createdAt": "2020-02-29T05:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzgzNA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983834", "bodyText": "should this throw ApplicationNotFoundException instead of NotFoundException? Or will it be throwing other types of NotFoundException as well?", "author": "albertshau", "createdAt": "2020-02-29T00:53:52Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException;", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDU3MA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386004570", "bodyText": "Done.\nJust ApplicationNotFound. So catch NotFound and throw ApplicationNotFound.", "author": "wyzhang", "createdAt": "2020-02-29T05:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDczMw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386004733", "bodyText": "Changed to throw NotFound as it could be AppNotFound or NamespaceNotFound", "author": "wyzhang", "createdAt": "2020-02-29T05:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4Mzg5OQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385983899", "bodyText": "similar comments here. When does it throw NotFoundException? when the namespace doesn't exist? Then shouldn't it throw NamespaceNotFoundException?", "author": "albertshau", "createdAt": "2020-02-29T00:54:24Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/AbstractApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching {@code ApplicationDetail}\n+ */\n+public interface AbstractApplicationDetailFetcher {\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException;\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException;", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDE4Mg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386004182", "bodyText": "Done.", "author": "wyzhang", "createdAt": "2020-02-29T05:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4Mzg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDc2NQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984765", "bodyText": "the request could have failed with a 404 if the namespace doesn't exist as well so this isn't always going to be accurate. Unfortunately I don't think there is a way to differentiate the two without larger changes, so I think it's better to just throw a NotFoundException where the exception message is the response body.", "author": "albertshau", "createdAt": "2020-02-29T01:01:06Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDc3Nw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386004777", "bodyText": "Done. Changed to just NotFound", "author": "wyzhang", "createdAt": "2020-02-29T05:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDgyNw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984827", "bodyText": "should use the response body instead of 'Not found', as it should be more descriptive", "author": "albertshau", "createdAt": "2020-02-29T01:01:38Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {\n+      }.getType(), GSON);\n+    return objectResponse.getResponseObject();\n+  }\n+\n+  private HttpResponse execute(HttpRequest request) throws IOException, NotFoundException {\n+    HttpResponse httpResponse = remoteClient.execute(request);\n+    if (httpResponse.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      throw new NotFoundException(\"Not found\");", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2OTQxMA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386569410", "bodyText": "Done. Already fixed", "author": "wyzhang", "createdAt": "2020-03-02T18:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDg3Mg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984872", "bodyText": "this Type can be a private static final constant instead of created in each call", "author": "albertshau", "createdAt": "2020-02-29T01:02:02Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNjM0MQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386006341", "bodyText": "Fixed.", "author": "wyzhang", "createdAt": "2020-02-29T06:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDA3Ng==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387404076", "bodyText": "this is not fixed yet", "author": "albertshau", "createdAt": "2020-03-04T01:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MjM3NQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387842375", "bodyText": "Done. Fixed. Might have missed committing a change.", "author": "wyzhang", "createdAt": "2020-03-04T18:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDkyNA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385984924", "bodyText": "should throw a NamespaceNotFoundException", "author": "albertshau", "createdAt": "2020-02-29T01:02:31Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MDc3NA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386570774", "bodyText": "Fixed. Make list() to catch NotFound and then throw NamespaceNotFound.\nFor get(appId), just throw not found as currently there is no way of telling AppNotFound vs NamespaceNotFound.", "author": "wyzhang", "createdAt": "2020-03-02T18:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTAzMg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985032", "bodyText": "just use the response body by itself without the 'Request failed', otherwise the message can end up looking weird.", "author": "albertshau", "createdAt": "2020-02-29T01:03:24Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+                                         new DefaultHttpRequestConfig(false), Constants.Gateway.API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get the application detail for the given application id\n+   */\n+  public ApplicationDetail get(ApplicationId appId) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps/%s/versions/%s\",\n+                               appId.getNamespace(), appId.getApplication(), appId.getVersion());\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(appId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), ApplicationDetail.class);\n+  }\n+\n+  /**\n+   * Get details of all applications in the given namespace\n+   */\n+  public List<ApplicationDetail> list(String namespace) throws IOException, NotFoundException {\n+    String url = String.format(\"namespaces/%s/apps\", namespace);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    HttpResponse httpResponse;\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(new NamespaceId(namespace));\n+    }\n+    ObjectResponse<List<ApplicationDetail>> objectResponse = ObjectResponse.fromJsonBody(\n+      httpResponse, new TypeToken<List<ApplicationDetail>>() {\n+      }.getType(), GSON);\n+    return objectResponse.getResponseObject();\n+  }\n+\n+  private HttpResponse execute(HttpRequest request) throws IOException, NotFoundException {\n+    HttpResponse httpResponse = remoteClient.execute(request);\n+    if (httpResponse.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      throw new NotFoundException(\"Not found\");\n+    }\n+    if (httpResponse.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+      throw new IOException(String.format(\"Request failed %s\", httpResponse.getResponseBodyAsString()));", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNjM2Mg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386006362", "bodyText": "Fixed", "author": "wyzhang", "createdAt": "2020-02-29T06:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDIyOQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387404229", "bodyText": "This isn't fixed either, is there a missing commit?", "author": "albertshau", "createdAt": "2020-03-04T01:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTAzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MjE3Mg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387842172", "bodyText": "I think I might have missed committing that change.\nFixed. Please double check.", "author": "wyzhang", "createdAt": "2020-03-04T18:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTA4MQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985081", "bodyText": "doesn't need to be final", "author": "albertshau", "createdAt": "2020-02-29T01:03:42Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3MDkwOA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386570908", "bodyText": "Removed.", "author": "wyzhang", "createdAt": "2020-03-02T18:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTExNQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985115", "bodyText": "doesn't need to be final", "author": "albertshau", "createdAt": "2020-02-29T01:03:52Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.internal.app.ApplicationSpecificationAdapter;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import io.cdap.common.http.ObjectResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+\n+/**\n+ * Fetch application detail via REST API calls\n+ */\n+public class RemoteApplicationDetailFetcher implements AbstractApplicationDetailFetcher {\n+  private static final Gson GSON = ApplicationSpecificationAdapter.addTypeAdapters(new GsonBuilder()).create();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemoteApplicationDetailFetcher(final DiscoveryServiceClient discoveryClient) {", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDgwNQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386004805", "bodyText": "Done", "author": "wyzhang", "createdAt": "2020-02-29T05:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTQ4NA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985484", "bodyText": "type can be a private static final constant", "author": "albertshau", "createdAt": "2020-02-29T01:06:19Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(\n+      discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+      new DefaultHttpRequestConfig(false), Constants.Gateway.INTERNAL_API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get preferences for the given identify\n+   */\n+  public PreferencesDetail get(EntityId entityId, boolean resolved) throws IOException, NotFoundException {\n+    HttpResponse httpResponse;\n+    String url = getPreferencesURI(entityId, resolved);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(entityId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), new TypeToken<PreferencesDetail>() {", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDkzNQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386004935", "bodyText": "Can you clarify which line of code are you referring to?", "author": "wyzhang", "createdAt": "2020-02-29T06:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU1MDQyNg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386550426", "bodyText": "this line, the new TypeToken", "author": "albertshau", "createdAt": "2020-03-02T17:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU2ODk1MA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386568950", "bodyText": "Oh.. Already fixed", "author": "wyzhang", "createdAt": "2020-03-02T18:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTU2Nw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385985567", "bodyText": "similar comment, this is misleading because it's not always the entity that doesn't exist", "author": "albertshau", "createdAt": "2020-02-29T01:06:54Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(\n+      discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+      new DefaultHttpRequestConfig(false), Constants.Gateway.INTERNAL_API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get preferences for the given identify\n+   */\n+  public PreferencesDetail get(EntityId entityId, boolean resolved) throws IOException, NotFoundException {\n+    HttpResponse httpResponse;\n+    String url = getPreferencesURI(entityId, resolved);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(entityId);", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDk1Mw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386004953", "bodyText": "Fixed. Just throw NotFoundException", "author": "wyzhang", "createdAt": "2020-02-29T06:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjIxNA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385986214", "bodyText": "there is code duplication in these classes, it would be better to consolidate the common code, either in a common abstract class or by enhancing RemoteClient in some way.", "author": "albertshau", "createdAt": "2020-02-29T01:12:28Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternal.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.http.DefaultHttpRequestConfig;\n+import io.cdap.cdap.common.internal.remote.RemoteClient;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.common.http.HttpMethod;\n+import io.cdap.common.http.HttpRequest;\n+import io.cdap.common.http.HttpResponse;\n+import org.apache.twill.discovery.DiscoveryServiceClient;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Fetch preferences via REST API calls (using internal endpoint {@code INTERNAL_API_VERSION_3})\n+ */\n+public class RemotePreferencesFetcherInternal implements AbstractPreferencesFetcher {\n+  private static final Gson GSON = new Gson();\n+\n+  private final RemoteClient remoteClient;\n+\n+  @Inject\n+  public RemotePreferencesFetcherInternal(final DiscoveryServiceClient discoveryClient) {\n+    this.remoteClient = new RemoteClient(\n+      discoveryClient, Constants.Service.APP_FABRIC_HTTP,\n+      new DefaultHttpRequestConfig(false), Constants.Gateway.INTERNAL_API_VERSION_3);\n+  }\n+\n+  /**\n+   * Get preferences for the given identify\n+   */\n+  public PreferencesDetail get(EntityId entityId, boolean resolved) throws IOException, NotFoundException {\n+    HttpResponse httpResponse;\n+    String url = getPreferencesURI(entityId, resolved);\n+    HttpRequest.Builder requestBuilder = remoteClient.requestBuilder(HttpMethod.GET, url);\n+    try {\n+      httpResponse = execute(requestBuilder.build());\n+    } catch (NotFoundException e) {\n+      throw new NotFoundException(entityId);\n+    }\n+    return GSON.fromJson(httpResponse.getResponseBodyAsString(), new TypeToken<PreferencesDetail>() {\n+    }.getType());\n+  }\n+\n+  /**\n+   * Construct URI to fetch preferences depending on the type of supplied entity\n+   */\n+  private String getPreferencesURI(EntityId entityId, boolean resolved) {\n+    String uri;\n+    switch (entityId.getEntityType()) {\n+      case INSTANCE:\n+        uri = String.format(\"preferences\");\n+        break;\n+      case NAMESPACE:\n+        NamespaceId namespaceId = (NamespaceId) entityId;\n+        uri = String.format(\"namespaces/%s/preferences\", namespaceId.getNamespace());\n+        break;\n+      case APPLICATION:\n+        ApplicationId appId = (ApplicationId) entityId;\n+        uri = String.format(\"namespaces/%s/apps/%s/preferences\",\n+                            appId.getNamespace(), appId.getApplication());\n+        break;\n+      case PROGRAM:\n+        ProgramId programId = (ProgramId) entityId;\n+        uri = String.format(\"namespaces/%s/apps/%s/%s/%s/preferences\",\n+                            programId.getNamespace(), programId.getApplication(), programId.getType().getCategoryName(),\n+                            programId.getProgram());\n+        break;\n+      default:\n+        throw new UnsupportedOperationException(\n+          String.format(\"Preferences cannot be used on this entity type: %s\", entityId.getEntityType()));\n+    }\n+    if (resolved) {\n+      uri += \"?resolved=true\";\n+    }\n+    return uri;\n+  }\n+\n+  private HttpResponse execute(HttpRequest request) throws IOException, NotFoundException {\n+    HttpResponse httpResponse = remoteClient.execute(request);\n+    if (httpResponse.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n+      throw new NotFoundException(\"Not found\");\n+    }\n+    if (httpResponse.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+      throw new IOException(String.format(\"Request failed %s\", httpResponse.getResponseBodyAsString()));", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTA4Nw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386005087", "bodyText": "Agreed. Added a TODO to refactor in a follow-up PR", "author": "wyzhang", "createdAt": "2020-02-29T06:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjMyMQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r385986321", "bodyText": "indentation", "author": "albertshau", "createdAt": "2020-02-29T01:13:26Z", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/metadata/RemotePreferencesFetcherInternalTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.cdap.cdap.AllProgramsApp;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.internal.app.services.http.AppFabricTestBase;\n+import io.cdap.cdap.proto.PreferencesDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.EntityId;\n+import io.cdap.cdap.proto.id.InstanceId;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link RemotePreferencesFetcherInternal}\n+ */\n+public class RemotePreferencesFetcherInternalTest extends AppFabricTestBase {\n+  private static AbstractPreferencesFetcher fetcher = null;\n+\n+  @BeforeClass\n+  public static void init() {\n+    fetcher = getInjector().getInstance(RemotePreferencesFetcherInternal.class);\n+  }\n+\n+  public void testGetPreferences() throws Exception {\n+    PreferencesDetail preferences = null;\n+    EntityId entityId = null;\n+\n+    // Get preferences on instance, but none was set.\n+    entityId = new InstanceId(\"\");\n+    preferences = fetcher.get(entityId, false);\n+    Assert.assertEquals(Collections.emptyMap(), preferences.getProperties());\n+    Assert.assertFalse(preferences.getResolved());\n+    // SeqId should be 0 when preferences never get set on the entity.\n+    Assert.assertEquals(0, preferences.getSeqId());\n+\n+    // Set preferences on instance and fetch again.\n+    Map<String, String> instanceProperties = ImmutableMap.of(\"instance-key1\", \"instance-val1\");\n+    setPreferences(getPreferenceURI(), instanceProperties, 200);\n+    preferences = fetcher.get(entityId, false);\n+    Assert.assertEquals(instanceProperties, preferences.getProperties());\n+    Assert.assertFalse(preferences.getResolved());\n+    Assert.assertTrue(preferences.getSeqId() > 0);\n+\n+    // Deploy the application.\n+    String namespace = TEST_NAMESPACE1;\n+    String appName = AllProgramsApp.NAME;\n+    deploy(AllProgramsApp.class, 200, Constants.Gateway.API_VERSION_3_TOKEN, namespace);\n+\n+    // Get preferences on the application, but none was set.\n+    entityId = new ApplicationId(namespace, appName);\n+    preferences = fetcher.get(entityId, false);\n+    Assert.assertEquals(Collections.emptyMap(), preferences.getProperties());\n+    Assert.assertFalse(preferences.getResolved());\n+    Assert.assertEquals(0, preferences.getSeqId());\n+\n+    // Get resolved preferences on the application, preferences on instance should be returned.\n+    entityId = new ApplicationId(namespace, appName);\n+    preferences = fetcher.get(entityId, true);\n+    Assert.assertEquals(instanceProperties, preferences.getProperties());\n+    Assert.assertTrue(preferences.getResolved());\n+    Assert.assertTrue(preferences.getSeqId() > 0);\n+\n+    // Set preferences on application and fetch again, resolved preferences should be returned.\n+    Map<String, String> appProperties = ImmutableMap.of(\"app-key1\", \"app-val1\");\n+    setPreferences(getPreferenceURI(namespace, appName), instanceProperties, 200);\n+    preferences = fetcher.get(entityId, true);\n+    Map<String, String> resolvedProperites = new HashMap<>();\n+    resolvedProperites.putAll(appProperties);\n+    resolvedProperites.putAll(instanceProperties);\n+    Assert.assertEquals(resolvedProperites, preferences.getProperties());\n+    Assert.assertTrue(preferences.getResolved());\n+    Assert.assertTrue(preferences.getSeqId() > 0);\n+\n+    // Delete the app\n+    Assert.assertEquals(\n+        200,", "originalCommit": "06f1d7c335b78cee28eb241899995da6c534dc7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTEwOA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386005108", "bodyText": "Fixed", "author": "wyzhang", "createdAt": "2020-02-29T06:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NjgzMg==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386676832", "bodyText": "why do we need this endpoint? Isn't it the same as apps/app-d?", "author": "albertshau", "createdAt": "2020-03-02T22:00:34Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -416,7 +437,46 @@ public void getApplicationDetails(FullHttpRequest request, HttpResponder respond\n   }\n \n   /**\n-   * Decodes request coming from the {@link #getApplicationDetails(FullHttpRequest, HttpResponder, String)} call.\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *\n+   * @param application the id of the application to get its {@link ApplicationDetail}\n+   * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n+   */\n+  @GET\n+  @Path(\"/appdetail/{app-id}\")\n+  public void getAppDetail(HttpRequest request, HttpResponder responder,", "originalCommit": "dd26dac0bfb04eb8a337f02854aa033dc479471d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMDkxNA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386700914", "bodyText": "Yes. It is the same as /app/. I hope at some point we can change /app/ to be consistent with /apps to return ApplicationRecord instead of ApplicationDetail.\nIntroduce this /appdetail/ to achieve the parity, as I dislike the fact that client uses /app/ in get-one case and /appdetail for get-all case.", "author": "wyzhang", "createdAt": "2020-03-02T22:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NjgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1MDEyNQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386750125", "bodyText": "we should not have duplicate endpoints in this class.\nI think it's ok if there is an internal handler that has the equivalent of this endpoint, but it shouldn't be mixed in with the public APIs.", "author": "albertshau", "createdAt": "2020-03-03T01:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NjgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1Nzk2MQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387357961", "bodyText": "Done. Moved to internal endpoint", "author": "wyzhang", "createdAt": "2020-03-03T23:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NjgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3Njk0MQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386676941", "bodyText": "similar question, why is this needed?", "author": "albertshau", "createdAt": "2020-03-02T22:00:46Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -416,7 +437,46 @@ public void getApplicationDetails(FullHttpRequest request, HttpResponder respond\n   }\n \n   /**\n-   * Decodes request coming from the {@link #getApplicationDetails(FullHttpRequest, HttpResponder, String)} call.\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *\n+   * @param application the id of the application to get its {@link ApplicationDetail}\n+   * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n+   */\n+  @GET\n+  @Path(\"/appdetail/{app-id}\")\n+  public void getAppDetail(HttpRequest request, HttpResponder responder,\n+                           @PathParam(\"namespace-id\") String namespace,\n+                           @PathParam(\"app-id\") String application) throws Exception {\n+    NamespaceId namespaceId = validateNamespace(namespace);\n+    ApplicationId appId = validateApplicationId(namespaceId, application);\n+    responder.sendJson(HttpResponseStatus.OK, GSON.toJson(applicationLifecycleService.getAppDetail(appId)));\n+  }\n+\n+  /**\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *\n+   * @param application the id of the application to get its {@link ApplicationDetail}\n+   * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n+   */\n+  @GET\n+  @Path(\"/appdetail/{app-id}/versions/{version-id}\")", "originalCommit": "dd26dac0bfb04eb8a337f02854aa033dc479471d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMjg3NA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386702874", "bodyText": "same as above.", "author": "wyzhang", "createdAt": "2020-03-02T22:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3Njk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NzczMA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386677730", "bodyText": "style: our javadocs usually aren't aligned and just use a single space between param and description", "author": "albertshau", "createdAt": "2020-03-02T22:02:26Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -215,15 +216,21 @@ public BodyConsumer createAppVersion(HttpRequest request, HttpResponder responde\n   }\n \n   /**\n-   * Returns a list of applications associated with a namespace.\n+   * Returns a list of {@link ApplicationRecord} for all applications in the given namespace\n+   *\n+   * @param request         {@link HttpRequest}", "originalCommit": "dd26dac0bfb04eb8a337f02854aa033dc479471d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMzEyOQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386703129", "bodyText": "hm..the cask setting I imported set para aligned in the javadoc.\nDisabled and reformatted the code.", "author": "wyzhang", "createdAt": "2020-03-02T23:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NzczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NzkxMA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386677910", "bodyText": "extra '*' at the end of the line. Same comment in other places in this file", "author": "albertshau", "createdAt": "2020-03-02T22:02:49Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -416,7 +437,46 @@ public void getApplicationDetails(FullHttpRequest request, HttpResponder respond\n   }\n \n   /**\n-   * Decodes request coming from the {@link #getApplicationDetails(FullHttpRequest, HttpResponder, String)} call.\n+   * Get {@link ApplicationDetail} for a given application\n+   *\n+   * @param request     {@link HttpRequest}\n+   * @param responder   {@link HttpResponse}\n+   * @param namespace   the namespace to get all application details   *", "originalCommit": "dd26dac0bfb04eb8a337f02854aa033dc479471d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMzQ0MQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386703441", "bodyText": "Removed extra \"*\".\nFixing the param doc alignment", "author": "wyzhang", "createdAt": "2020-03-02T23:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NzkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3ODc0NA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386678744", "bodyText": "what's the reason the other app list endpoint was changed? Are we causing issues by adding back the old functionality?", "author": "albertshau", "createdAt": "2020-03-02T22:04:32Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandler.java", "diffHunk": "@@ -378,6 +382,23 @@ public void updateApp(FullHttpRequest request, HttpResponder responder,\n     }\n   }\n \n+  /**\n+   * Get a list of {@link ApplicationDetail} for all applications in the given namespace\n+   *\n+   * @param request   {@link HttpRequest}\n+   * @param responder {@link HttpResponse}\n+   * @param namespace the namespace to get all application details\n+   * @throws Exception if namespace doesn't exists or failed to get all application details\n+   */\n+  @GET\n+  @Path(\"/appdetail\")", "originalCommit": "dd26dac0bfb04eb8a337f02854aa033dc479471d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwODA3Ng==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386708076", "bodyText": "The inconsistency between /apps returning in ApplicationDetails format while /app/ etc returning ApplicationRecord has been there for quite a while (since the acquisition from what I can tell from the change history).\nUnable to see change history past the acquisition (since it was in a different repo?)\nAnyway, regardless of why the inconsistency was introduced, this inconsistency looks ugly and error prone. I didn't notice this and my unit test didn't catch this due to json deserialization just ignore unknown fields, so unit tests on the client side needs to check as many fields as possible to ensure this gets caught.\nI would prefer not to use these endpoints going forward in hope of deprecating them somehow (probably not possible), but at least not adding new code use them.", "author": "wyzhang", "createdAt": "2020-03-02T23:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3ODc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0ODY4NQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r386748685", "bodyText": "I misunderstood the commit comments, so there isn't any change. It's not an uncommon pattern for a list to return less information than a get on the specific element returns.\nShould this be an internal handler then instead of mixed in with the user facing APIs?", "author": "albertshau", "createdAt": "2020-03-03T01:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3ODc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1ODE0OA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387358148", "bodyText": "Ack.\nYes. Moved these to internal. Keep public unchanged.", "author": "wyzhang", "createdAt": "2020-03-03T23:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3ODc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMzg4OA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387403888", "bodyText": "nit: collections should be plural -> 'appdetails'. Though I think it's better to just have it as 'apps'", "author": "albertshau", "createdAt": "2020-03-04T01:41:29Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespacePathLocator;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.io.File;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+\n+/**\n+ * Internal {@link HttpHandler} for Application Lifecycle Management\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/namespaces/{namespace-id}\")\n+public class AppLifecycleHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+  private static final Gson GSON = new Gson();\n+\n+  /**\n+   * Runtime program service for running and managing programs.\n+   */\n+  private final ProgramRuntimeService runtimeService;\n+\n+  private final CConfiguration configuration;\n+  private final NamespaceQueryAdmin namespaceQueryAdmin;\n+  private final NamespacePathLocator namespacePathLocator;\n+  private final ApplicationLifecycleService applicationLifecycleService;\n+  private final File tmpDir;\n+\n+  @Inject\n+  AppLifecycleHttpHandlerInternal(CConfiguration configuration,\n+                                  ProgramRuntimeService runtimeService,\n+                                  NamespaceQueryAdmin namespaceQueryAdmin,\n+                                  NamespacePathLocator namespacePathLocator,\n+                                  ApplicationLifecycleService applicationLifecycleService) {\n+    this.configuration = configuration;\n+    this.namespaceQueryAdmin = namespaceQueryAdmin;\n+    this.runtimeService = runtimeService;\n+    this.namespacePathLocator = namespacePathLocator;\n+    this.applicationLifecycleService = applicationLifecycleService;\n+    this.tmpDir = new File(new File(configuration.get(Constants.CFG_LOCAL_DATA_DIR)),\n+                           configuration.get(Constants.AppFabric.TEMP_DIR)).getAbsoluteFile();\n+  }\n+\n+  /**\n+   * Get a list of {@link ApplicationDetail} for all applications in the given namespace\n+   *\n+   * @param request   {@link HttpRequest}\n+   * @param responder {@link HttpResponse}\n+   * @param namespace the namespace to get all application details\n+   * @throws Exception if namespace doesn't exists or failed to get all application details\n+   */\n+  @GET\n+  @Path(\"/appdetail\")", "originalCommit": "36410d7f63074bf342769d5329004bb8ba69c1d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzOTA4Mw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387839083", "bodyText": "Fixed. Changed to /apps and /app/", "author": "wyzhang", "createdAt": "2020-03-04T18:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMzg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDUzNA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387404534", "bodyText": "remove 'ru'", "author": "albertshau", "createdAt": "2020-03-04T01:44:07Z", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/metadata/RemoteApplicationDetailFetcherTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ru * Copyright \u00a9 2020 Cask Data, Inc.", "originalCommit": "36410d7f63074bf342769d5329004bb8ba69c1d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNzgxMQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387837811", "bodyText": "Fixed", "author": "wyzhang", "createdAt": "2020-03-04T18:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNDUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Mzc5OQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387853799", "bodyText": "Seems like an unused field? Try to use the IDE warning to get rid of unused fields.", "author": "chtyim", "createdAt": "2020-03-04T18:31:15Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespacePathLocator;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.io.File;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+\n+/**\n+ * Internal {@link HttpHandler} for Application Lifecycle Management\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/namespaces/{namespace-id}\")\n+public class AppLifecycleHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+  private static final Gson GSON = new Gson();\n+\n+  /**\n+   * Runtime program service for running and managing programs.\n+   */\n+  private final ProgramRuntimeService runtimeService;\n+\n+  private final CConfiguration configuration;\n+  private final NamespaceQueryAdmin namespaceQueryAdmin;\n+  private final NamespacePathLocator namespacePathLocator;\n+  private final ApplicationLifecycleService applicationLifecycleService;\n+  private final File tmpDir;", "originalCommit": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Mzk3Mw==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387853973", "bodyText": "Unused field?", "author": "chtyim", "createdAt": "2020-03-04T18:31:31Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.gateway.handlers;\n+\n+import com.google.gson.Gson;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import io.cdap.cdap.app.runtime.ProgramRuntimeService;\n+import io.cdap.cdap.common.NamespaceNotFoundException;\n+import io.cdap.cdap.common.conf.CConfiguration;\n+import io.cdap.cdap.common.conf.Constants;\n+import io.cdap.cdap.common.namespace.NamespacePathLocator;\n+import io.cdap.cdap.common.namespace.NamespaceQueryAdmin;\n+import io.cdap.cdap.gateway.handlers.util.AbstractAppFabricHttpHandler;\n+import io.cdap.cdap.internal.app.services.ApplicationLifecycleService;\n+import io.cdap.cdap.proto.ApplicationDetail;\n+import io.cdap.cdap.proto.id.ApplicationId;\n+import io.cdap.cdap.proto.id.NamespaceId;\n+import io.cdap.http.HttpHandler;\n+import io.cdap.http.HttpResponder;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import java.io.File;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+\n+\n+/**\n+ * Internal {@link HttpHandler} for Application Lifecycle Management\n+ */\n+@Singleton\n+@Path(Constants.Gateway.INTERNAL_API_VERSION_3 + \"/namespaces/{namespace-id}\")\n+public class AppLifecycleHttpHandlerInternal extends AbstractAppFabricHttpHandler {\n+  private static final Gson GSON = new Gson();\n+\n+  /**\n+   * Runtime program service for running and managing programs.\n+   */\n+  private final ProgramRuntimeService runtimeService;\n+\n+  private final CConfiguration configuration;", "originalCommit": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NDc2NA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387854764", "bodyText": "Remove empty comment block.", "author": "chtyim", "createdAt": "2020-03-04T18:33:03Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/metadata/ScheduleFetcher.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.metadata;\n+\n+import io.cdap.cdap.common.NotFoundException;\n+import io.cdap.cdap.common.ProgramNotFoundException;\n+import io.cdap.cdap.internal.app.runtime.schedule.ScheduleNotFoundException;\n+import io.cdap.cdap.proto.ScheduleDetail;\n+import io.cdap.cdap.proto.id.ProgramId;\n+import io.cdap.cdap.proto.id.ScheduleId;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Interface for fetching schedule(s)\n+ */\n+public interface ScheduleFetcher {\n+  /**\n+   * Get schedule details for the given {@code scheduleId}\n+   * @param scheduleId the id of the schedule to fetch {@code ScheduleDetail} for\n+   * @return the schedule detail\n+   * @throws IOException if failed to get the detail of the given schedule\n+   * @throws ScheduleNotFoundException if the given schedule doesn't exist.\n+   */\n+  ScheduleDetail get(ScheduleId scheduleId) throws IOException, ScheduleNotFoundException;\n+\n+  /**", "originalCommit": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NzUzMA==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387857530", "bodyText": "this should also be apps, not app", "author": "albertshau", "createdAt": "2020-03-04T18:38:08Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/gateway/handlers/AppLifecycleHttpHandlerInternal.java", "diffHunk": "@@ -106,7 +106,7 @@ public void getAllAppDetails(HttpRequest request, HttpResponder responder,\n    * @throws Exception if either namespace or application doesn't exist, or failed to get {@link ApplicationDetail}\n    */\n   @GET\n-  @Path(\"/appdetail/{app-id}\")\n+  @Path(\"/app/{app-id}\")", "originalCommit": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Nzc4OQ==", "url": "https://github.com/cdapio/cdap/pull/11903#discussion_r387857789", "bodyText": "fix", "author": "albertshau", "createdAt": "2020-03-04T18:38:42Z", "path": "cdap-app-fabric/src/test/java/io/cdap/cdap/internal/app/services/http/handlers/AppLifecycleHttpHandlerTest.java", "diffHunk": "@@ -120,7 +120,7 @@ public void testDeployUsingNonexistantArtifact404() throws Exception {\n     Id.Application appId = Id.Application.from(Id.Namespace.DEFAULT, \"badapp\");\n     AppRequest<Config> appRequest =\n       new AppRequest<>(new ArtifactSummary(\"something\", \"1.0.0\"), null);\n-    HttpResponse response = deploy(appId, appRequest);\n+    HttpResponse response = deploy(appId, appRequest;)", "originalCommit": "ead807b2a5dc62e49cd9f840cf5db2a385cbf1db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "631603477e8ab993a11419d2e1ca734ac2630144", "url": "https://github.com/cdapio/cdap/commit/631603477e8ab993a11419d2e1ca734ac2630144", "message": "(CDAP-16353) Add clients for fetching ApplicationDetail, PreferencesDetail, ScheduleDetail", "committedDate": "2020-03-05T05:55:18Z", "type": "commit"}, {"oid": "631603477e8ab993a11419d2e1ca734ac2630144", "url": "https://github.com/cdapio/cdap/commit/631603477e8ab993a11419d2e1ca734ac2630144", "message": "(CDAP-16353) Add clients for fetching ApplicationDetail, PreferencesDetail, ScheduleDetail", "committedDate": "2020-03-05T05:55:18Z", "type": "forcePushed"}]}