{"pr_number": 12222, "pr_title": "[CDAP-16835] Add new API in application interface for upgrading application config", "pr_createdAt": "2020-05-29T00:10:50Z", "pr_url": "https://github.com/cdapio/cdap/pull/12222", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432193566", "bodyText": "How come this is needed? Because we want to return this info eventually in the REST API?\nIt's more future proof to return an object here, like a  List<UpgradedArtifact>, as we can add fields to UpgradedArtifact in the future without breaking backward compatibility.", "author": "albertshau", "createdAt": "2020-05-29T00:24:10Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  private T newConfig;\n+  private Map<ArtifactId, ArtifactId> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, Map<ArtifactId, ArtifactId> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public Map<ArtifactId, ArtifactId> getUpgradedArtifacts() {", "originalCommit": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDg3MA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432194870", "bodyText": "Also, it seems like this could be error-prone, in that the application might have buggy logic that makes it return an incorrect list of upgraded artifacts. It would be more accurate for the platform to keep track of the artifacts from the ApplicationSpecification before and after the upgrade.", "author": "albertshau", "createdAt": "2020-05-29T00:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMTY4OA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432201688", "bodyText": "Yes, this is so we can respond back changes via REST API. Good idea about List, added it.\nThe reason I am planning to keep track of changes in Application is, it can add changes as it is making them, which is easy for Application to keep track of. I agree if Application has buggy implementation but it might be trickier for Platform to know about changes by itself.\nFor Platform to keep track of what changed, there needs to be additional logic in LifeCycleHandler to figure out how to traverse the config and what does a \"change\" mean. Moreover, there are various types of configs we can have in future so it might be harder for platform to know about all of them. Hence I delegated it to Application itself. Let me know your thoughts.", "author": "pandyajay10", "createdAt": "2020-05-29T00:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMjY0MQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432202641", "bodyText": "The platform would base it off of ApplicationSpecification.getPlugin() before and after the upgrade. If we are always upgrading, it seems better to use that, which is the source of truth.\nUnless we are planning on having a dry-run API or something like that where we don't actually upgrade the app?", "author": "albertshau", "createdAt": "2020-05-29T01:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMzgyNA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432203824", "bodyText": "Yes, the main usecase for this is actually dry-run. I actually didn't add it in POC but when I was writing this, the main thing that came to my mind was dry-run usecase.", "author": "pandyajay10", "createdAt": "2020-05-29T01:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0MDQzNw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432240437", "bodyText": "another problem is that the app doesn't always know what version of a plugin it's currently using just from the config. For example, the pipeline config allows setting a version range for the plugin version. From just the config, the app can't tell which version in the range was actually chosen during deployment.\nI'm also not sure this returns back meaningful information. What if after upgrade, one plugin is still using the old artifact but another plugin is using a newer version? For example, the old app uses plugin X and plugin Y from artifact my-plugin-1.0.0. After upgrade, it decides that plugin X will still come from my-plugin-1.0.0, but plugin Y will use my-plugin-2.0.0.\nDo we have a concrete use case for this? I feel like it would be better to just focus on the config to start with and leave this part out.", "author": "albertshau", "createdAt": "2020-05-29T03:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NjI4OQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432746289", "bodyText": "Agree with the issue with version range. Removed the UpgradedArtifact usage. We can revisit this once I start working on dryrun mode.", "author": "pandyajay10", "createdAt": "2020-05-29T21:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MzU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQyMA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432194420", "bodyText": "is this needed? I'm wondering whether we can just rely on a default implementation for upgradeConfig()", "author": "albertshau", "createdAt": "2020-05-29T00:27:32Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,17 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  boolean allowConfigUpgrade();", "originalCommit": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NzI1Mw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432197253", "bodyText": "This check would be helpful in case when we want to detect if we can upgrade this application or not, like DataStreams or CDC (for now). If we relying on default implementation (where it is idempotent), we can tell users if this application does allow upgrade or not (did it do something or not?) I answered my thoughts on default implementation below but tl;dr is it would be better for developer and users both to clearly know if this is supported or not IMO.", "author": "pandyajay10", "createdAt": "2020-05-29T00:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMzAzNQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432203035", "bodyText": "so it's just whether it supports upgrade at all then? Let's rename to isUpgradeAllowed() then, since it's more about blocking upgrade than whether we can upgrade the config.", "author": "albertshau", "createdAt": "2020-05-29T01:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwNDQ5Ng==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432204496", "bodyText": "Done.", "author": "pandyajay10", "createdAt": "2020-05-29T01:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQ1NQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432194455", "bodyText": "should have a default implementation here so that existing apps don't need to be updated.\nThe default can just return whatever it got as input, and return empty results for upgraded artifacts.", "author": "albertshau", "createdAt": "2020-05-29T00:27:40Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,17 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  boolean allowConfigUpgrade();\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpgradeContext Used to access methods helpful for upgrading a config such as get latest plugin versions.\n+   */\n+  ConfigUpgradeResult<T> upgradeConfig(T config, ApplicationUpgradeContext applicationUpgradeContext) throws Exception;", "originalCommit": "b4ccb861c9ff79bd9cd3031b0be03fbddd36b286", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NzU5Ng==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432197596", "bodyText": "Returning same as input would just create confusion for developer and users right? IMO it is better to say this is not supported at all and its also easy to show during dry run that \"Hey we can not upgrade your xyz pipeline in abc application cause it is not supported\". wdyt?", "author": "pandyajay10", "createdAt": "2020-05-29T00:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwMzI1NA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432203254", "bodyText": "The comment was more on avoiding breaking existing apps, but I missed the fact that AbstractApplication implements this. Can ignore this comment.", "author": "albertshau", "createdAt": "2020-05-29T01:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzODcxMw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432238713", "bodyText": "thinking about this a little more, this API means the config class before and after the upgrade has to be the same. This means the app can't change the class at all, which seems overly restrictive. I'm also not sure how the classloading will work, since the config passed in comes from the old artifact while the config returned comes from the new artifact.\nI wonder if it would be better to just pass in the config string?", "author": "albertshau", "createdAt": "2020-05-29T03:39:46Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,18 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  boolean isUpgradeAllowed();\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpgradeContext Used to access methods helpful for upgrading a config such as get latest plugin\n+   * versions.\n+   */\n+  ConfigUpgradeResult<T> upgradeConfig(T config, ApplicationUpgradeContext applicationUpgradeContext) throws Exception;", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTE3OA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389178", "bodyText": "The signature better be:\nApplicationUpdateResult<T> update(ApplicationUpdateContext context);\n\nAlso, better to throw more specific exception instead of Exception.\nRegarding to Albert question, The ApplicationUpdateContext should have at least two methods:\n// Get the old config as an object. The platform would perform the json deserialization based on the provided type.\n// This is for the case where the new app has the same / compatible / old config class.\n<C extends Config> C getConfig(Type configType);\n\n// Get the config as a json string.\nString getConfigAsString();", "author": "chtyim", "createdAt": "2020-05-29T10:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzODcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NjQxNA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432746414", "bodyText": "Good suggestion. Changed accordingly. Done.", "author": "pandyajay10", "createdAt": "2020-05-29T21:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzODcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzOTMwOQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432239309", "bodyText": "don't we have use cases where we want to ignore the scope when getting the 'latest' artifact? This API looks like it won't be enough for all use cases.", "author": "albertshau", "createdAt": "2020-05-29T03:42:40Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpgradeContext.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for upgrading Application configs. Provides helper methods for application to supporting config upgrade.\n+ */\n+public interface ApplicationUpgradeContext {\n+\n+  /**\n+   * Gets latest available artifact information for a given plugin type and name.\n+   *\n+   * @param pluginType the plugin type\n+   * @param pluginName the plugin name\n+   * @return artifact information for the plugin type and name.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  ArtifactId getLatestPluginArtifact(String pluginType, String pluginName);", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NzExMg==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432747112", "bodyText": "Added scope as another argument based on the discussion.", "author": "pandyajay10", "createdAt": "2020-05-29T21:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzOTMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzOTg0OA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432239848", "bodyText": "nit: Artifact is a little redundant since it's already in UpgradedArtifact. We can't call it 'old' and 'new' because 'new' is a reserved java keyword. what about 'from' and 'to'?", "author": "albertshau", "createdAt": "2020-05-29T03:45:04Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/artifact/UpgradedArtifact.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.artifact;\n+\n+import io.cdap.cdap.api.annotation.Beta;\n+\n+/**\n+ * Describes an artifact which is upgraded for an application.\n+ */\n+@Beta\n+public class UpgradedArtifact {\n+\n+  private final ArtifactId oldArtifact;", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0NzIxNA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432747214", "bodyText": "Removed this class as it is not useful right now.", "author": "pandyajay10", "createdAt": "2020-05-29T21:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzOTg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTg2NA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432385864", "bodyText": "Can we call all \"upgrade\" as \"update\" in programmatic API? It is more flexible.", "author": "chtyim", "createdAt": "2020-05-29T10:06:10Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/AbstractApplication.java", "diffHunk": "@@ -59,6 +59,23 @@ public final void configure(ApplicationConfigurer configurer, ApplicationContext\n     configure();\n   }\n \n+  /*\n+   * By default, applications do not support config upgrade. Applications supporting config upgrade should\n+   * override this method.\n+   */\n+  @Override\n+  public boolean isUpgradeAllowed() {", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjA5MA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432386090", "bodyText": "Also, this method should be called isUpdateSupported", "author": "chtyim", "createdAt": "2020-05-29T10:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjkyMA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432386920", "bodyText": "Also, move the default implementation to the Application interface to make it backward compatible.", "author": "chtyim", "createdAt": "2020-05-29T10:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1OTkxOQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432759919", "bodyText": "Changed it to \"update\" from upgrade.", "author": "pandyajay10", "createdAt": "2020-05-29T22:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTUzNg==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389536", "bodyText": "Shouldn't have this method.", "author": "chtyim", "createdAt": "2020-05-29T10:13:52Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;\n+  // Stores mapping of old and new artifact after an upgrade in form <oldArtifact, newArtifact>.\n+  private List<UpgradedArtifact> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, List<UpgradedArtifact> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public List<UpgradedArtifact> getUpgradedArtifacts() {", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDAzNA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432760034", "bodyText": "Removed the class.", "author": "pandyajay10", "createdAt": "2020-05-29T22:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTU4MQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389581", "bodyText": "final", "author": "chtyim", "createdAt": "2020-05-29T10:13:57Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTczOA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389738", "bodyText": "Remove empty line.", "author": "chtyim", "createdAt": "2020-05-29T10:14:17Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;\n+  // Stores mapping of old and new artifact after an upgrade in form <oldArtifact, newArtifact>.\n+  private List<UpgradedArtifact> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, List<UpgradedArtifact> upgradedArtifacts) {\n+", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDA5Nw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432760097", "bodyText": "Removed the class.", "author": "pandyajay10", "createdAt": "2020-05-29T22:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTkwNw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432389907", "bodyText": "We don't need a builder for this simple class.", "author": "chtyim", "createdAt": "2020-05-29T10:14:42Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ConfigUpgradeResult.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.UpgradedArtifact;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores results of upgrading an application config like new config, artifact upgrade map etc.\n+ *\n+ * @param <T> {@link Config} config class that represents the configuration type of an Application.\n+ */\n+public class ConfigUpgradeResult<T extends Config> {\n+\n+  // Upgraded config.\n+  private T newConfig;\n+  // Stores mapping of old and new artifact after an upgrade in form <oldArtifact, newArtifact>.\n+  private List<UpgradedArtifact> upgradedArtifacts;\n+\n+  private ConfigUpgradeResult(T newConfig, List<UpgradedArtifact> upgradedArtifacts) {\n+\n+    this.newConfig = newConfig;\n+    this.upgradedArtifacts = upgradedArtifacts;\n+  }\n+\n+  public T getNewConfig() {\n+    return newConfig;\n+  }\n+\n+  public List<UpgradedArtifact> getUpgradedArtifacts() {\n+    return upgradedArtifacts;\n+  }\n+\n+  /**\n+   * Builder for creating config upgrade result.\n+   *\n+   * @param <T> {@link Config} config class that represents the configuration type of an\n+   * Application.\n+   */\n+  public static class Builder<T extends Config> {", "originalCommit": "0959b7e65c5817f8dfe4b44e303b4b3b70c2403b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDE1Ng==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432760156", "bodyText": "Removed it.", "author": "pandyajay10", "createdAt": "2020-05-29T22:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4OTkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODg2NQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432738865", "bodyText": "call is isUpdateSupported", "author": "chtyim", "createdAt": "2020-05-29T21:15:08Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,23 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  default boolean isUpgradeAllowed() {", "originalCommit": "512d891b0bd79caab23825e1945e2ab1df6fab70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDIwMw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432760203", "bodyText": "Done", "author": "pandyajay10", "createdAt": "2020-05-29T22:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTA0OQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432739049", "bodyText": "Call it updateConfig. Also, don't pass in T config. Always access it from the update context.", "author": "chtyim", "createdAt": "2020-05-29T21:15:36Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,23 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  default boolean isUpgradeAllowed() {\n+    return false;\n+  }\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpdateContext Used to access methods helpful for operation like upgrade on a config such as get\n+   * latest plugin versions.\n+   */\n+  default ApplicationUpdateResult<T> upgradeConfig(T config, ApplicationUpdateContext applicationUpdateContext)", "originalCommit": "512d891b0bd79caab23825e1945e2ab1df6fab70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDMxMg==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432760312", "bodyText": "Sorry, I had that change in my local client before you started reviewing. Done.", "author": "pandyajay10", "createdAt": "2020-05-29T22:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTc3Nw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432739777", "bodyText": "Shouldn't declare this as a throws. If you allow exception being thrown from this method, create a more specific exception that is suitable for the update purpose. E.g. UpdateConfigException. Alternatively, it is totally ok not to have any declared exception to throw.", "author": "chtyim", "createdAt": "2020-05-29T21:17:32Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,23 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config upgrade or not.\n+   */\n+  default boolean isUpgradeAllowed() {\n+    return false;\n+  }\n+\n+  /**\n+   * Upgrades given configuration.\n+   *\n+   * @param config Configuration, most likely older, to be upgraded.\n+   * @param applicationUpdateContext Used to access methods helpful for operation like upgrade on a config such as get\n+   * latest plugin versions.\n+   */\n+  default ApplicationUpdateResult<T> upgradeConfig(T config, ApplicationUpdateContext applicationUpdateContext)\n+      throws UnsupportedOperationException {", "originalCommit": "512d891b0bd79caab23825e1945e2ab1df6fab70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDM0OA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432760348", "bodyText": "Done.", "author": "pandyajay10", "createdAt": "2020-05-29T22:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0MjA2Ng==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432742066", "bodyText": "Hum... I don't think it is always latest for the update purpose.\nAlso, since the update is done through a similar cycle as deployment, meaning the PluginConfigurer.usePlugin will be called at some point during that process, in which it will determine the actual artifact to use. So what does the updateConfig need to do to make sure the usePlugin is selecting the right version during the actual deployment?", "author": "chtyim", "createdAt": "2020-05-29T21:24:03Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import java.lang.reflect.Type;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to supporting operation on\n+ * configs like upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets latest available artifact information for a given plugin type and name.\n+   *\n+   * @param pluginType the plugin type\n+   * @param pluginName the plugin name\n+   * @return artifact information for the plugin type and name.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  ArtifactId getLatestPluginArtifact(String pluginType, String pluginName);", "originalCommit": "512d891b0bd79caab23825e1945e2ab1df6fab70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NDI2Mg==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432774262", "bodyText": "Discussed offline. Added more filter parameters in getPluginArtifacts to let application handle how they want to consider plugins.", "author": "pandyajay10", "createdAt": "2020-05-29T22:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0MjA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NDkzMw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432774933", "bodyText": "nit: isConfigUpdate -> isUpdate", "author": "albertshau", "createdAt": "2020-05-29T22:59:36Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,21 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config update or not.\n+   */\n+  default boolean isConfigUpdateSupported() {", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NTc2NQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432775765", "bodyText": "Don't think something like this is needed right now, can leave it up to the app what it wants to do.\nWould prefer not to add anything until we have concrete use cases. It's much harder to remove something from the API than to add something.", "author": "albertshau", "createdAt": "2020-05-29T23:03:18Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODY2Ng==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432778666", "bodyText": "This is added because, we now only have one API to do everything related to updating an api (includes upgrade may be downgrade in future too). This one API will take in list of actions to perform and follow them step by step.", "author": "pandyajay10", "createdAt": "2020-05-29T23:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NTc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3OTI3MA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432779270", "bodyText": "I see, because it's now update and not upgrade. ok that's fine.", "author": "albertshau", "createdAt": "2020-05-29T23:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NTc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjE2OA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432776168", "bodyText": "should not throw a gson exception, we want to keep the api module as clean as possible. Should throw some common java exception, like IllegalArgumentException.\nIn general, don't need to put runtime exceptions in the method signature. Can just document in the javadoc with @throws what type of runtime exceptions can be thrown.", "author": "albertshau", "createdAt": "2020-05-29T23:05:17Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3Njg1NQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432776855", "bodyText": "Think it makes sense to add a getOldArtifact() method that returns the app artifact that we are upgrading from.\nOtherwise, the app may not know what class to deserialize this into. Taking data pipeline as an example, it would deserialize configs from 3.x differently than 4.x, etc.\nNot saying we need to support pipeline upgrade from those old versions, but we may have similar situations in the future for newer apps like CDC.", "author": "albertshau", "createdAt": "2020-05-29T23:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3OTgyOQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432779829", "bodyText": "since it's now update, maybe 'oldArtifact' is a bad name", "author": "albertshau", "createdAt": "2020-05-29T23:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5Mzc2Ng==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432793766", "bodyText": "Hey Albert, I will work with you on adding this new API you mentioned. Submitting this PR for now to get started on the follow up work.", "author": "pandyajay10", "createdAt": "2020-05-30T00:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NTAyMg==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432775022", "bodyText": "Call it isUpdateConfigSupported to match with the updateConfig name.", "author": "chtyim", "createdAt": "2020-05-29T23:00:06Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/Application.java", "diffHunk": "@@ -32,4 +32,21 @@\n    * @param context Used to access the environment, application configuration, and application (deployment) arguments\n    */\n   void configure(ApplicationConfigurer configurer, ApplicationContext<T> context);\n+\n+  /**\n+   * Returns if application supports config update or not.\n+   */\n+  default boolean isConfigUpdateSupported() {", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NDIxMw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432784213", "bodyText": "I changed the method to isUpdateSupported.", "author": "pandyajay10", "createdAt": "2020-05-29T23:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NjQzMA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432776430", "bodyText": "Should be UPGRADE_ARTIFACT?", "author": "chtyim", "createdAt": "2020-05-29T23:06:24Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationConfigUpdateAction.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+/**\n+ * Possible update actions for application config.\n+ */\n+public enum ApplicationConfigUpdateAction {\n+  // Upgrade plugins to latest available versions.\n+  UPGRADE_PLUGINS,", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3NzM2OQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432777369", "bodyText": "Just call the method getUpdateActions.", "author": "chtyim", "createdAt": "2020-05-29T23:10:15Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODIwOA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432778208", "bodyText": "Shouldn't be nullable. If there nothing found, should return an empty list.", "author": "chtyim", "createdAt": "2020-05-29T23:14:27Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @param limit number of results to return at max, if null, default will be INT_MAX.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODQzOQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432778439", "bodyText": "You can't pass in null for int. It is better to have a overloaded method, one takes limit, one doesn't. The one that doesn't has a default implementation that call the one that does with Integer.MAX_VALUE.", "author": "chtyim", "createdAt": "2020-05-29T23:15:32Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @param limit number of results to return at max, if null, default will be INT_MAX.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+                                      @Nullable ArtifactVersionRange pluginRange, @Nullable int limit);", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NDc2NA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432784764", "bodyText": "Aah my JAVA knowledge hitting its limit. I removed the limit for now. Can add it later on if needed.", "author": "pandyajay10", "createdAt": "2020-05-29T23:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3ODY4NA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432778684", "bodyText": "Remove extra empty line.", "author": "chtyim", "createdAt": "2020-05-29T23:16:45Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getConfigUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType) throws JsonSyntaxException;\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @param limit number of results to return at max, if null, default will be INT_MAX.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         returns null if no artifact for the plugin could be found.\n+   */\n+  @Nullable\n+  List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+                                      @Nullable ArtifactVersionRange pluginRange, @Nullable int limit);\n+", "originalCommit": "14fcf278fdc3031ee2512eac9236002e050375a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NTkxOQ==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432785919", "bodyText": "unused import?", "author": "chtyim", "createdAt": "2020-05-29T23:53:24Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import com.google.gson.JsonSyntaxException;", "originalCommit": "f99909bb06cfd6b0838f4693a1b1aa2c708c4aec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4OTU2NA==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432789564", "bodyText": "Misalignment", "author": "chtyim", "createdAt": "2020-05-30T00:17:27Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType);\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         Returns empty list if no artifact for the plugin found.\n+   */\n+  default List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+      @Nullable ArtifactVersionRange pluginRange) {", "originalCommit": "8a062ca4550b4300d8cf0a5773485c87a5f8ce5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4OTU3Nw==", "url": "https://github.com/cdapio/cdap/pull/12222#discussion_r432789577", "bodyText": "No need to have the limit comment", "author": "chtyim", "createdAt": "2020-05-30T00:17:39Z", "path": "cdap-api/src/main/java/io/cdap/cdap/api/app/ApplicationUpdateContext.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.api.app;\n+\n+import io.cdap.cdap.api.Config;\n+import io.cdap.cdap.api.artifact.ArtifactId;\n+\n+import io.cdap.cdap.api.artifact.ArtifactScope;\n+import io.cdap.cdap.api.artifact.ArtifactVersionRange;\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Context for updating Application configs. Provides helper methods for application to support operations like config\n+ * upgrade.\n+ */\n+public interface ApplicationUpdateContext {\n+\n+  /**\n+   * @return All update actions application should perform on the config.\n+   */\n+  List<ApplicationConfigUpdateAction> getUpdateActions();\n+\n+  /**\n+   * Get the old config as an object of the given type. The platform would perform the json deserialization based on\n+   * the provided type. This is for the case where an application has the same/compatible/old config class. Application\n+   * should decide on how they want to convert config from old to current type.\n+   *\n+   * @param configType type of the config platform should deserialize to.\n+   * @return application config serialized to an object of given configType.\n+   */\n+  <C extends Config> C getConfig(Type configType);\n+\n+  /**\n+   * Get the application configuration as json string.\n+   */\n+  String getConfigAsString();\n+\n+  /**\n+   * Gets list of plugin artifacts based on given parameters in sorted in ascending order by version.\n+   *\n+   * @param pluginType the plugin type.\n+   * @param pluginName the plugin name.\n+   * @param pluginScope the scope to search plugins in.\n+   * @param pluginRange the range of the version candidate plugins should be in.\n+   * @return artifact list of plugins which matches with given parameters, sorted in ascending order.\n+   *         Returns empty list if no artifact for the plugin found.\n+   */\n+  default List<ArtifactId> getPluginArtifacts(String pluginType, String pluginName, ArtifactScope pluginScope,\n+      @Nullable ArtifactVersionRange pluginRange) {\n+    return getPluginArtifacts(pluginType, pluginName, pluginScope, pluginRange, /*limit=*/Integer.MAX_VALUE);", "originalCommit": "8a062ca4550b4300d8cf0a5773485c87a5f8ce5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51bd9dfaee61b407968873f783fe0a611b712c99", "url": "https://github.com/cdapio/cdap/commit/51bd9dfaee61b407968873f783fe0a611b712c99", "message": "Add new API in application interface for upgrading application config", "committedDate": "2020-05-30T01:01:09Z", "type": "commit"}, {"oid": "51bd9dfaee61b407968873f783fe0a611b712c99", "url": "https://github.com/cdapio/cdap/commit/51bd9dfaee61b407968873f783fe0a611b712c99", "message": "Add new API in application interface for upgrading application config", "committedDate": "2020-05-30T01:01:09Z", "type": "forcePushed"}]}