{"pr_number": 12229, "pr_title": "[CDAP-16874] Importing existing plugin JSON file (plugin JSON Creator)", "pr_createdAt": "2020-05-29T18:18:35Z", "pr_url": "https://github.com/cdapio/cdap/pull/12229", "timeline": [{"oid": "0ab29b9183771d2ab5438904a155942d866e81b1", "url": "https://github.com/cdapio/cdap/commit/0ab29b9183771d2ab5438904a155942d866e81b1", "message": "[CDAP-16874] Importing existing plugin JSON file (plugin JSON Creator)", "committedDate": "2020-05-29T21:08:39Z", "type": "forcePushed"}, {"oid": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "url": "https://github.com/cdapio/cdap/commit/797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "message": "[CDAP-16874] Importing existing plugin JSON file (plugin JSON Creator)", "committedDate": "2020-06-01T21:36:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTUwNg==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r434321506", "bodyText": "This won't be scalable. If the user uploads a new file there are two things we can do,\n\nValidate the JSON and if it has all the right widget and attribute references\nSet the output of step #1 to the state and allow the UI now re-render based on the state change.", "author": "ajainarayanan", "createdAt": "2020-06-03T05:47:20Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/BasicPluginInfo/index.tsx", "diffHunk": "@@ -55,13 +55,31 @@ const BasicPluginInfoView: React.FC<ICreateContext & WithStyles<typeof styles>>\n   jsonView,\n   setJsonView,\n   outputName,\n+  setPluginState,\n }) => {\n   const [localPluginName, setLocalPluginName] = React.useState(pluginName);\n   const [localPluginType, setLocalPluginType] = React.useState(pluginType);\n   const [localDisplayName, setLocalDisplayName] = React.useState(displayName);\n   const [localEmitAlerts, setLocalEmitAlerts] = React.useState(emitAlerts);\n   const [localEmitErrors, setLocalEmitErrors] = React.useState(emitErrors);\n \n+  // In case user uploads new file\n+  React.useEffect(() => {\n+    setLocalPluginName(pluginName);", "originalCommit": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDU4Mg==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r435930582", "bodyText": "Resolved.\nWhenever the JSONStatus changes to success state, the UI will unmount and remount. This has been enabled by adding a loading state in https://github.com/cdapio/cdap/blob/86724e9a3695e559255c8c8ec7a1b97288dff6a0/cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/index.tsx", "author": "jennac3", "createdAt": "2020-06-05T13:44:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTYwMw==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r434321603", "bodyText": "Please try to avoid this.", "author": "ajainarayanan", "createdAt": "2020-06-03T05:47:41Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/ClosedJsonMenu/index.tsx", "diffHunk": "@@ -43,6 +44,9 @@ const styles = (theme): StyleRules => {\n     jsonCollapseActionButtons: {\n       padding: '15px',\n       flexDirection: 'column',\n+      '& > *': {", "originalCommit": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNjEzNQ==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r435916135", "bodyText": "Resolved.", "author": "jennac3", "createdAt": "2020-06-05T13:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTcyMA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r434321720", "bodyText": "Is this intended?", "author": "ajainarayanan", "createdAt": "2020-06-03T05:48:05Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/ClosedJsonMenu/index.tsx", "diffHunk": "@@ -51,40 +55,60 @@ const styles = (theme): StyleRules => {\n   };\n };\n \n-const ClosedJsonMenuView: React.FC<ICreateContext & WithStyles<typeof styles>> = ({\n+const DownloadJSONButton = ({ classes, downloadDisabled, onDownloadClick }) => {\n+  return (\n+    <Tooltip\n+      title={\n+        downloadDisabled\n+          ? 'Download is disabled until the required fields are filled in'\n+          : 'Download Plugin JSON'\n+      }\n+      classes={{\n+        tooltip: classes.jsonViewerTooltip,\n+      }}\n+    >\n+      <Button disabled={downloadDisabled} onClick={onDownloadClick}>\n+        <GetAppIcon />\n+      </Button>\n+    </Tooltip>\n+  );\n+};\n+\n+const ExpandJSONViewButton = ({ classes, expandJSONView }) => {\n+  return (\n+    <Tooltip\n+      title=\"Open JSON View\"\n+      classes={{\n+        tooltip: classes.jsonViewerTooltip,\n+      }}\n+    >\n+      <Button onClick={expandJSONView}>\n+        <CodeIcon />\n+      </Button>\n+    </Tooltip>\n+  );\n+};\n+\n+interface IClosedJsonMenuProps extends WithStyles<typeof styles>, ICreateContext {\n+  expandJSONView: () => void;\n+  onDownloadClick: () => void;\n+  populateImportResults: (filename: string, fileContent: string) => void;\n+  JSONStatus: JSONStatusMessage;\n+  downloadDisabled: boolean;\n+}\n+\n+const ClosedJsonMenuView: React.FC<IClosedJsonMenuProps> = ({\n   classes,\n-  pluginName,\n-  pluginType,\n-  displayName,\n-  emitAlerts,\n-  emitErrors,\n-  configurationGroups,\n-  groupToInfo,\n-  groupToWidgets,\n-  widgetToInfo,\n-  widgetToAttributes,\n-  jsonView,\n-  setJsonView,\n-  outputName,\n+  expandJSONView,\n+  onDownloadClick,\n+  populateImportResults,\n+  JSONStatus,\n+  downloadDisabled,\n }) => {\n-  const widgetJSONData = {\n-    pluginName,\n-    pluginType,\n-    displayName,\n-    emitAlerts,\n-    emitErrors,\n-    configurationGroups,\n-    groupToInfo,\n-    groupToWidgets,\n-    widgetToInfo,\n-    widgetToAttributes,\n-    outputName,\n-  };\n-  const downloadDisabled = pluginName.length === 0 || pluginType.length === 0;\n   return (\n     <div>\n       <Drawer\n-        open={!jsonView}\n+        open={true}", "originalCommit": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxOTIxOA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r435919218", "bodyText": "I made a bit of change to improve this component's structure since this review. Now, the two components ClosedJsonMenu and JsonLiveViewer will share the <Drawer/> component, whereas before the review they had separate initializations of <Drawer/>.\nWith these new changes, it will make more sense for open to be set to true since either one of these two components is always open.\nResolved.", "author": "jennac3", "createdAt": "2020-06-05T13:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjM5MA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r434322390", "bodyText": "Would be worth checking if we can file-dnd on the entire page. The user might just have to drag and drop a valid plugin config and we show properties-widget view right away.", "author": "ajainarayanan", "createdAt": "2020-06-03T05:50:31Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/PluginJsonImporter/index.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, CircularProgress, WithStyles, withStyles } from '@material-ui/core';\n+import { green } from '@material-ui/core/colors';\n+import { StyleRules } from '@material-ui/core/styles';\n+import CheckIcon from '@material-ui/icons/Check';\n+import SaveIcon from '@material-ui/icons/Save';\n+import clsx from 'clsx';\n+import { JSONStatusMessage } from 'components/PluginJSONCreator/Create/Content/JsonMenu';\n+import { ICreateContext } from 'components/Replicator/Create';\n+import React from 'react';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    buttonSuccess: {\n+      backgroundColor: green[500],\n+      '&:hover': {\n+        backgroundColor: green[700],\n+      },\n+    },\n+    buttonProgress: {\n+      color: green[500],\n+      position: 'absolute',\n+      top: '50%',\n+      left: '50%',\n+      marginTop: -12,\n+      marginLeft: -12,\n+    },\n+    fileInput: {\n+      display: 'none',\n+    },\n+  };\n+};\n+\n+interface IPluginJSONImporterProps extends WithStyles<typeof styles>, ICreateContext {\n+  populateImportResults: (filename: string, fileContent: string) => void;\n+  JSONStatus: JSONStatusMessage;\n+}\n+\n+const PluginJSONImporterView: React.FC<IPluginJSONImporterProps> = ({\n+  classes,\n+  populateImportResults,\n+  JSONStatus,\n+}) => {\n+  const [loading, setLoading] = React.useState(false);\n+  const [success, setSuccess] = React.useState(false);\n+\n+  const buttonClassname = clsx({\n+    [classes.buttonSuccess]: success,\n+  });\n+\n+  React.useEffect(() => {\n+    if (JSONStatus === JSONStatusMessage.Success) {\n+      setSuccess(true);\n+    } else {\n+      setSuccess(false);\n+    }\n+  }, [JSONStatus]);\n+\n+  function processFileUpload() {\n+    return (e) => {\n+      if (!loading) {\n+        setLoading(true);\n+      }\n+      const files = e.target.files;\n+      if (files.length > 0) {\n+        const filename = files[0].name;\n+        const filenameWithoutExtension =\n+          filename.substring(0, filename.lastIndexOf('.')) || filename;\n+        const reader = new FileReader();\n+        reader.readAsText(files[0]);\n+        let fileContent;\n+        reader.onload = (r) => {\n+          fileContent = r.target.result;\n+          renderFileContent(filenameWithoutExtension, fileContent);\n+        };\n+      } else {\n+        setLoading(false);\n+      }\n+    };\n+  }\n+\n+  async function renderFileContent(filename, fileContent) {\n+    await populateImportResults(filename, fileContent);\n+    setLoading(false);\n+  }\n+\n+  return (\n+    <div>\n+      <input", "originalCommit": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0NDI4Nw==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r435944287", "bodyText": "As per discussion yesterday, I will be adding this in a separate PR!", "author": "jennac3", "createdAt": "2020-06-05T14:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjQ2Ng==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r434322466", "bodyText": "nit: Use LoadingSVG icon", "author": "ajainarayanan", "createdAt": "2020-06-03T05:50:51Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/PluginJsonImporter/index.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { Button, CircularProgress, WithStyles, withStyles } from '@material-ui/core';\n+import { green } from '@material-ui/core/colors';\n+import { StyleRules } from '@material-ui/core/styles';\n+import CheckIcon from '@material-ui/icons/Check';\n+import SaveIcon from '@material-ui/icons/Save';\n+import clsx from 'clsx';\n+import { JSONStatusMessage } from 'components/PluginJSONCreator/Create/Content/JsonMenu';\n+import { ICreateContext } from 'components/Replicator/Create';\n+import React from 'react';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    buttonSuccess: {\n+      backgroundColor: green[500],\n+      '&:hover': {\n+        backgroundColor: green[700],\n+      },\n+    },\n+    buttonProgress: {\n+      color: green[500],\n+      position: 'absolute',\n+      top: '50%',\n+      left: '50%',\n+      marginTop: -12,\n+      marginLeft: -12,\n+    },\n+    fileInput: {\n+      display: 'none',\n+    },\n+  };\n+};\n+\n+interface IPluginJSONImporterProps extends WithStyles<typeof styles>, ICreateContext {\n+  populateImportResults: (filename: string, fileContent: string) => void;\n+  JSONStatus: JSONStatusMessage;\n+}\n+\n+const PluginJSONImporterView: React.FC<IPluginJSONImporterProps> = ({\n+  classes,\n+  populateImportResults,\n+  JSONStatus,\n+}) => {\n+  const [loading, setLoading] = React.useState(false);\n+  const [success, setSuccess] = React.useState(false);\n+\n+  const buttonClassname = clsx({\n+    [classes.buttonSuccess]: success,\n+  });\n+\n+  React.useEffect(() => {\n+    if (JSONStatus === JSONStatusMessage.Success) {\n+      setSuccess(true);\n+    } else {\n+      setSuccess(false);\n+    }\n+  }, [JSONStatus]);\n+\n+  function processFileUpload() {\n+    return (e) => {\n+      if (!loading) {\n+        setLoading(true);\n+      }\n+      const files = e.target.files;\n+      if (files.length > 0) {\n+        const filename = files[0].name;\n+        const filenameWithoutExtension =\n+          filename.substring(0, filename.lastIndexOf('.')) || filename;\n+        const reader = new FileReader();\n+        reader.readAsText(files[0]);\n+        let fileContent;\n+        reader.onload = (r) => {\n+          fileContent = r.target.result;\n+          renderFileContent(filenameWithoutExtension, fileContent);\n+        };\n+      } else {\n+        setLoading(false);\n+      }\n+    };\n+  }\n+\n+  async function renderFileContent(filename, fileContent) {\n+    await populateImportResults(filename, fileContent);\n+    setLoading(false);\n+  }\n+\n+  return (\n+    <div>\n+      <input\n+        accept=\"json/*\"\n+        id=\"raised-button-file\"\n+        type=\"file\"\n+        className={classes.fileInput}\n+        onChange={processFileUpload()}\n+      />\n+      <label htmlFor=\"raised-button-file\">\n+        <Button\n+          aria-label=\"save\"\n+          component=\"span\"\n+          color=\"primary\"\n+          disabled={loading}\n+          className={buttonClassname}\n+        >\n+          {success ? <CheckIcon /> : <SaveIcon />}\n+        </Button>\n+        {loading && <CircularProgress size={24} className={classes.buttonProgress} />}", "originalCommit": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNjc1MA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r435926750", "bodyText": "I ended up removing the CircularProgress since we're now remounting component on file import, as per your suggestion from #12229 (comment)", "author": "jennac3", "createdAt": "2020-06-05T13:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjc3Nw==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r434322777", "bodyText": "This will give no time for the user to read the message, understand and process. The pattern we already have is to show the error message and allow the user to close the message. Success messages can be transient as they provide only confirmations and not information.", "author": "ajainarayanan", "createdAt": "2020-06-03T05:51:56Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/index.tsx", "diffHunk": "@@ -38,46 +45,108 @@ const JsonMenuView: React.FC<ICreateContext> = ({\n   jsonView,\n   setJsonView,\n   outputName,\n+  setPluginState,\n }) => {\n+  const pluginData = {\n+    pluginName,\n+    pluginType,\n+    displayName,\n+    emitAlerts,\n+    emitErrors,\n+    configurationGroups,\n+    groupToInfo,\n+    groupToWidgets,\n+    widgetToInfo,\n+    widgetToAttributes,\n+    outputName,\n+  };\n+\n+  const [JSONStatus, setJSONStatus] = React.useState(JSONStatusMessage.Pending);\n+  const [JSONErrorMessage, setJSONErrorMessage] = React.useState('');\n+\n+  // When JSON error occurs, show the error message for 2 seconds.", "originalCommit": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyODM5Ng==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r435928396", "bodyText": "I've set the error banner. My previous approach was letting error message to show for only few seconds. This new UI pattern will ensure user to have enough time to read the error message.\nResolved.", "author": "jennac3", "createdAt": "2020-06-05T13:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMjc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMzQ1OA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r434323458", "bodyText": "I believe we already have this logic right? https://github.com/cdapio/cdap/blob/develop/cdap-ui/app/cdap/components/ConfigurationGroup/utilities/index.ts#L93 Can we extract this and make it generic and re-use this?", "author": "ajainarayanan", "createdAt": "2020-06-03T05:54:03Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/utilities.ts", "diffHunk": "@@ -58,10 +63,87 @@ function getJSONConfig(widgetJSONData) {\n   return config;\n }\n \n+function parsePluginJSON(filename, pluginJSON) {\n+  // Parse filename in order to set pluginName and pluginType\n+  // Currently the filename is designed to be <pluginName>-<pluginType>.json\n+  const [pluginName, pluginType] = filename.split('-');\n+\n+  // Parse file data in order to populate the rest of properties\n+  const basicPluginInfo = {\n+    // If the string fields are undefined, set them to empty string\n+    displayName: pluginJSON['display-name'] ? pluginJSON['display-name'] : '',\n+    pluginName: pluginName ? pluginName : '',\n+    pluginType: pluginType ? pluginType : '',\n+    emitAlerts: pluginJSON['emit-alerts'],\n+    emitErrors: pluginJSON['emit-errors'],\n+  } as IBasicPluginInfo;\n+\n+  const newConfigurationGroups = [];\n+  const newGroupToInfo = {};\n+  const newGroupToWidgets = {};\n+  const newWidgetToInfo = {};\n+  const newWidgetToAttributes = {};\n+\n+  pluginJSON['configuration-groups'].forEach((groupObj) => {", "originalCommit": "797996d7ff1a1f5fa7e6219af4fc946d6b0b414a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTI0MA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r435929240", "bodyText": "As per discussion yesterday, I'll be extracting this in the later PR.", "author": "jennac3", "createdAt": "2020-06-05T13:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMzQ1OA=="}], "type": "inlineReview"}, {"oid": "7e470ab4c3b5e230a6887755c2baa2e0dfb90682", "url": "https://github.com/cdapio/cdap/commit/7e470ab4c3b5e230a6887755c2baa2e0dfb90682", "message": "[CDAP-16874] Importing existing plugin JSON file (plugin JSON Creator)", "committedDate": "2020-06-04T17:15:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NjQ1MA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r441186450", "bodyText": "nit: fields are filled", "author": "elfenheart", "createdAt": "2020-06-16T22:54:34Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/ClosedJsonMenu/index.tsx", "diffHunk": "@@ -14,102 +14,113 @@\n  * the License.\n  */\n \n+import Button from '@material-ui/core/Button';\n import Divider from '@material-ui/core/Divider';\n-import Drawer from '@material-ui/core/Drawer';\n-import IconButton from '@material-ui/core/IconButton';\n-import List from '@material-ui/core/List';\n import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n import Tooltip from '@material-ui/core/Tooltip';\n import CodeIcon from '@material-ui/icons/Code';\n import GetAppIcon from '@material-ui/icons/GetApp';\n-import { downloadPluginJSON } from 'components/PluginJSONCreator/Create/Content/JsonMenu/utilities';\n+import { JSONStatusMessage } from 'components/PluginJSONCreator/Create/Content/JsonMenu';\n+import PluginJSONImporter from 'components/PluginJSONCreator/Create/Content/JsonMenu/PluginJsonImporter';\n import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n import * as React from 'react';\n \n const styles = (theme): StyleRules => {\n   return {\n-    closedJsonMenu: {\n-      zIndex: theme.zIndex.drawer,\n-    },\n-    closedJsonMenuPaper: {\n-      backgroundColor: theme.palette.white[50],\n-    },\n-    toolbar: {\n-      minHeight: '48px',\n-    },\n-    mainMenu: {\n-      borderTop: `1px solid ${theme.palette.grey['500']}`,\n-      paddingTop: theme.Spacing(1),\n-      paddingBottom: theme.Spacing(1),\n-    },\n-    jsonCollapseActionButtons: {\n+    jsonActionButtons: {\n       padding: '15px',\n       flexDirection: 'column',\n     },\n+    jsonActionButton: {\n+      margin: '5px',\n+    },\n     jsonViewerTooltip: {\n       fontSize: '14px',\n       backgroundColor: theme.palette.grey[500],\n     },\n   };\n };\n \n-const ClosedJsonMenuView: React.FC<ICreateContext & WithStyles<typeof styles>> = (\n-  widgetJSONData\n-) => {\n-  const { classes, pluginName, pluginType, jsonView, setJsonView } = widgetJSONData;\n-  const downloadDisabled = pluginName.length === 0 || pluginType.length === 0;\n+const DownloadJSONButton = ({ classes, downloadDisabled, onDownloadClick }) => {\n   return (\n-    <div>\n-      <Drawer\n-        open={!jsonView}\n-        variant=\"persistent\"\n-        className={classes.closedJsonMenu}\n-        anchor=\"right\"\n-        ModalProps={{\n-          keepMounted: true,\n-        }}\n-        classes={{\n-          paper: classes.closedJsonMenuPaper,\n-        }}\n-        data-cy=\"navbar-jsonViewer\"\n-      >\n-        <div className={classes.toolbar} />\n-        <List component=\"nav\" dense={true} className={classes.mainMenu}>\n-          <div className={classes.jsonCollapseActionButtons}>\n-            <Tooltip\n-              title=\"Open JSON View\"\n-              classes={{\n-                tooltip: classes.jsonViewerTooltip,\n-              }}\n-            >\n-              <IconButton onClick={() => setJsonView(true)}>\n-                <CodeIcon />\n-              </IconButton>\n-            </Tooltip>\n-            <Divider />\n+    <Tooltip\n+      title={\n+        downloadDisabled\n+          ? 'Download is disabled until the required fields are filled in'", "originalCommit": "f09ad5e12edd9d16898128d5d9982f2576ea77fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MTEzOQ==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r441191139", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-06-16T23:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NjQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NjgwMw==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r441186803", "bodyText": "don't use new font. for block letter, you can use <pre>", "author": "elfenheart", "createdAt": "2020-06-16T22:55:29Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/JsonLiveViewer/index.tsx", "diffHunk": "@@ -15,42 +15,28 @@\n  */\n \n import Button from '@material-ui/core/Button';\n-import Drawer from '@material-ui/core/Drawer';\n-import List from '@material-ui/core/List';\n import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n import Tooltip from '@material-ui/core/Tooltip';\n import FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\n-import SaveAltIcon from '@material-ui/icons/SaveAlt';\n-import {\n-  downloadPluginJSON,\n-  getJSONConfig,\n-} from 'components/PluginJSONCreator/Create/Content/JsonMenu/utilities';\n+import GetAppIcon from '@material-ui/icons/GetApp';\n+import { JSONStatusMessage } from 'components/PluginJSONCreator/Create/Content/JsonMenu';\n+import PluginJSONImporter from 'components/PluginJSONCreator/Create/Content/JsonMenu/PluginJsonImporter';\n import { ICreateContext } from 'components/PluginJSONCreator/CreateContextConnect';\n import * as React from 'react';\n \n-const JSON_VIEWER_WIDTH = '600px';\n-\n const styles = (theme): StyleRules => {\n   return {\n-    jsonViewer: {\n-      zIndex: theme.zIndex.drawer,\n-      width: JSON_VIEWER_WIDTH,\n-    },\n-    jsonViewerPaper: {\n-      width: JSON_VIEWER_WIDTH,\n-      backgroundColor: theme.palette.white[50],\n-    },\n-    toolbar: {\n-      minHeight: '48px',\n-    },\n-    mainMenu: {\n-      borderTop: `1px solid ${theme.palette.grey['500']}`,\n-      paddingTop: theme.Spacing(1),\n-      paddingBottom: theme.Spacing(1),\n-    },\n     jsonActionButtons: {\n-      padding: '5px',\n+      padding: '0px',\n       display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'center',\n+    },\n+    currentFilename: {\n+      position: 'relative',\n+      margin: '0 auto',\n+      left: '25px',\n+      fontFamily: 'Courier New',", "originalCommit": "f09ad5e12edd9d16898128d5d9982f2576ea77fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MTE2MQ==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r441191161", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-06-16T23:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NjgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NzA3MQ==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r441187071", "bodyText": "this seems to be the same as the tooltip being used in another component. Worth extracting this out", "author": "elfenheart", "createdAt": "2020-06-16T22:56:19Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/JsonLiveViewer/index.tsx", "diffHunk": "@@ -65,65 +51,90 @@ const styles = (theme): StyleRules => {\n   };\n };\n \n-const JsonLiveViewerView: React.FC<ICreateContext & WithStyles<typeof styles>> = (\n-  widgetJSONData\n-) => {\n-  const { classes, pluginName, pluginType, jsonView, setJsonView } = widgetJSONData;\n-  const JSONConfig = getJSONConfig(widgetJSONData);\n-  const downloadDisabled = pluginName.length === 0 || pluginType.length === 0;\n+const DownloadJSONButton = ({ classes, downloadDisabled, onDownloadClick }) => {\n+  return (\n+    <Tooltip\n+      title={\n+        downloadDisabled\n+          ? 'Download is disabled until the required fields are filled in'\n+          : 'Download Plugin JSON'\n+      }\n+      classes={{\n+        tooltip: classes.jsonViewerTooltip,\n+      }}\n+    >\n+      <div>\n+        <Button disabled={downloadDisabled} onClick={onDownloadClick}>\n+          <GetAppIcon />\n+        </Button>\n+      </div>\n+    </Tooltip>", "originalCommit": "f09ad5e12edd9d16898128d5d9982f2576ea77fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MDk0OA==", "url": "https://github.com/cdapio/cdap/pull/12229#discussion_r441190948", "bodyText": "This JSONDownloadButton is later extracted in refactor PR #12310\nhttps://github.com/cdapio/cdap/blob/882eb810d3291ed6b39efaf6394a932584abb867/cdap-ui/app/cdap/components/PluginJSONCreator/Create/PluginJSONMenu/JSONActionButtons/JSONDownloadButton/index.tsx", "author": "jennac3", "createdAt": "2020-06-16T23:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NzA3MQ=="}], "type": "inlineReview"}, {"oid": "c43faf976fef33d7efc707faa8d4e879ab5d6c8b", "url": "https://github.com/cdapio/cdap/commit/c43faf976fef33d7efc707faa8d4e879ab5d6c8b", "message": "[CDAP-16874] Importing existing plugin JSON file (plugin JSON Creator)", "committedDate": "2020-06-16T23:18:09Z", "type": "forcePushed"}, {"oid": "dd1e1f3767fbb5022a852d12c5ee1b668821f2eb", "url": "https://github.com/cdapio/cdap/commit/dd1e1f3767fbb5022a852d12c5ee1b668821f2eb", "message": "[CDAP-16874] Importing existing plugin JSON file (plugin JSON Creator)", "committedDate": "2020-06-16T23:28:42Z", "type": "commit"}, {"oid": "dd1e1f3767fbb5022a852d12c5ee1b668821f2eb", "url": "https://github.com/cdapio/cdap/commit/dd1e1f3767fbb5022a852d12c5ee1b668821f2eb", "message": "[CDAP-16874] Importing existing plugin JSON file (plugin JSON Creator)", "committedDate": "2020-06-16T23:28:42Z", "type": "forcePushed"}]}