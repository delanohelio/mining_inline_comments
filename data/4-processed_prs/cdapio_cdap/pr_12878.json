{"pr_number": 12878, "pr_title": "[CDAP-17410] Replication add latency graph", "pr_createdAt": "2020-12-01T00:35:01Z", "pr_url": "https://github.com/cdapio/cdap/pull/12878", "timeline": [{"oid": "88c08f02a5df48318474478f303c04a83aa6618a", "url": "https://github.com/cdapio/cdap/commit/88c08f02a5df48318474478f303c04a83aa6618a", "message": "[CDAP-17410] Replication add latency graph", "committedDate": "2020-12-01T02:49:08Z", "type": "forcePushed"}, {"oid": "52507e1962fcc61095bb8a69ffdfdc10d6cda524", "url": "https://github.com/cdapio/cdap/commit/52507e1962fcc61095bb8a69ffdfdc10d6cda524", "message": "[CDAP-17410] Replication add latency graph", "committedDate": "2020-12-01T02:56:55Z", "type": "forcePushed"}, {"oid": "576752cef776d4c993f62f8a8a5e01fa5216858a", "url": "https://github.com/cdapio/cdap/commit/576752cef776d4c993f62f8a8a5e01fa5216858a", "message": "[CDAP-17410] Replication add latency graph", "committedDate": "2020-12-01T04:14:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1Nzg3NA==", "url": "https://github.com/cdapio/cdap/pull/12878#discussion_r533657874", "bodyText": "IIRC, you could just make this a constant. .y0(y(0))", "author": "njbriggs", "createdAt": "2020-12-01T19:13:35Z", "path": "cdap-ui/app/cdap/components/Replicator/Detail/LatencyGraph/latency.ts", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as d3 from 'd3';\n+import numeral from 'numeral';\n+\n+export interface ILatencyData {\n+  time: number;\n+  latency: number;\n+}\n+\n+export const COLOR_MAP = {\n+  line: '#13B5CC',\n+  area: 'rgba(161, 228, 242, 0.6)',\n+  horizontalLine: '#DDDDDD',\n+  verticalLine: '#979797',\n+  legend: '#999999',\n+  tick: '#333333',\n+};\n+\n+const timeFormat = d3.timeFormat('%m/%d %I:%M %p');\n+\n+export function renderLatencyGraph(id: string, data: ILatencyData[], containerWidth: number) {\n+  if (containerWidth < 0) {\n+    return;\n+  }\n+  const containerHeight = 300;\n+\n+  const margin = {\n+    top: 10,\n+    bottom: 25,\n+    left: 60,\n+    right: 35,\n+  };\n+\n+  const width = containerWidth - margin.left - margin.right;\n+  const height = containerHeight - margin.top - margin.bottom;\n+\n+  const svg = d3\n+    .select(`#${id} > svg`)\n+    .attr('height', containerHeight)\n+    .attr('width', containerWidth);\n+\n+  // Clear out existing graph\n+  const groupId = 'replication-latency-graph-con13tainer';\n+  const groupElem = d3.select(`#${id} > svg > #${groupId}`);\n+  groupElem.remove();\n+\n+  // remove existing tooltip\n+  d3.select(`#${id} > .graph-tooltip`).remove();\n+\n+  // Start graph render\n+  const chart = svg\n+    .append('g')\n+    .attr('id', groupId)\n+    .attr('transform', `translate(${margin.left}, ${margin.top})`);\n+\n+  const x = d3\n+    .scaleBand()\n+    .domain(data.map((d) => d.time))\n+    .range([0, width])\n+    .padding(0.1);\n+\n+  const MIN_Y_AXIS = 1;\n+  const yMax = Math.max(MIN_Y_AXIS, d3.max(data.map((d) => d.latency)));\n+  const Y_BUFFER = 1.25;\n+  const y = d3\n+    .scaleLinear()\n+    .domain([0, yMax * Y_BUFFER])\n+    .rangeRound([height, 0]);\n+\n+  // AXIS\n+  const yAxis = d3\n+    .axisLeft(y)\n+    .ticks(null, 's')\n+    .tickSizeInner(-width)\n+    .tickFormat(yTickFormat);\n+  const yAxisGroup = chart.append('g').attr('class', 'axis axis-y');\n+  yAxisGroup.call(yAxis);\n+  yAxisGroup.select('.domain').remove();\n+  yAxisGroup.selectAll('line').attr('stroke', COLOR_MAP.horizontalLine);\n+  const yTicks = yAxisGroup.selectAll('.tick');\n+  const ticksSet = new Set();\n+  yTicks\n+    .filter((d) => {\n+      const currentTick = yTickFormat(d);\n+      if (ticksSet.has(currentTick)) {\n+        return true;\n+      }\n+\n+      ticksSet.add(currentTick);\n+      return false;\n+    })\n+    .remove();\n+  yAxisGroup\n+    .selectAll('.tick text')\n+    .style('font-size', '12px')\n+    .style('fill', COLOR_MAP.tick);\n+\n+  const xAxis = d3\n+    .axisBottom(x)\n+    .tickSizeOuter(0)\n+    .tickFormat(timeFormat);\n+  const xAxisGroup = chart\n+    .append('g')\n+    .attr('class', 'axis axis-x')\n+    .attr('transform', `translate(0, ${height})`);\n+  xAxisGroup.call(xAxis);\n+  xAxisGroup.select('.domain').attr('stroke', COLOR_MAP.horizontalLine);\n+  xAxisGroup.selectAll('line').attr('stroke', COLOR_MAP.verticalLine);\n+  xAxisGroup\n+    .selectAll('.tick')\n+    .filter((d, i) => {\n+      return i % 6 !== 0;\n+    })\n+    .remove();\n+  xAxisGroup\n+    .selectAll('.tick text')\n+    .style('font-size', '12px')\n+    .style('fill', COLOR_MAP.tick);\n+\n+  // GRAPH\n+  const area = d3\n+    .area()\n+    .x((d) => x(d.time))\n+    .y1((d) => y(d.latency))\n+    .y0(() => y(0));", "originalCommit": "576752cef776d4c993f62f8a8a5e01fa5216858a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1OTMyOA==", "url": "https://github.com/cdapio/cdap/pull/12878#discussion_r533659328", "bodyText": "Consider .nice() on this scale.", "author": "njbriggs", "createdAt": "2020-12-01T19:16:06Z", "path": "cdap-ui/app/cdap/components/Replicator/Detail/LatencyGraph/latency.ts", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as d3 from 'd3';\n+import numeral from 'numeral';\n+\n+export interface ILatencyData {\n+  time: number;\n+  latency: number;\n+}\n+\n+export const COLOR_MAP = {\n+  line: '#13B5CC',\n+  area: 'rgba(161, 228, 242, 0.6)',\n+  horizontalLine: '#DDDDDD',\n+  verticalLine: '#979797',\n+  legend: '#999999',\n+  tick: '#333333',\n+};\n+\n+const timeFormat = d3.timeFormat('%m/%d %I:%M %p');\n+\n+export function renderLatencyGraph(id: string, data: ILatencyData[], containerWidth: number) {\n+  if (containerWidth < 0) {\n+    return;\n+  }\n+  const containerHeight = 300;\n+\n+  const margin = {\n+    top: 10,\n+    bottom: 25,\n+    left: 60,\n+    right: 35,\n+  };\n+\n+  const width = containerWidth - margin.left - margin.right;\n+  const height = containerHeight - margin.top - margin.bottom;\n+\n+  const svg = d3\n+    .select(`#${id} > svg`)\n+    .attr('height', containerHeight)\n+    .attr('width', containerWidth);\n+\n+  // Clear out existing graph\n+  const groupId = 'replication-latency-graph-con13tainer';\n+  const groupElem = d3.select(`#${id} > svg > #${groupId}`);\n+  groupElem.remove();\n+\n+  // remove existing tooltip\n+  d3.select(`#${id} > .graph-tooltip`).remove();\n+\n+  // Start graph render\n+  const chart = svg\n+    .append('g')\n+    .attr('id', groupId)\n+    .attr('transform', `translate(${margin.left}, ${margin.top})`);\n+\n+  const x = d3\n+    .scaleBand()\n+    .domain(data.map((d) => d.time))\n+    .range([0, width])\n+    .padding(0.1);\n+\n+  const MIN_Y_AXIS = 1;\n+  const yMax = Math.max(MIN_Y_AXIS, d3.max(data.map((d) => d.latency)));\n+  const Y_BUFFER = 1.25;\n+  const y = d3\n+    .scaleLinear()\n+    .domain([0, yMax * Y_BUFFER])\n+    .rangeRound([height, 0]);", "originalCommit": "576752cef776d4c993f62f8a8a5e01fa5216858a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9c98f07f5f5771feb04877b9d26f292025fdf36", "url": "https://github.com/cdapio/cdap/commit/b9c98f07f5f5771feb04877b9d26f292025fdf36", "message": "address comments and refactor", "committedDate": "2020-12-02T06:40:38Z", "type": "forcePushed"}, {"oid": "0a72b70ef0cdf9e629204abb99393e578ddfebfb", "url": "https://github.com/cdapio/cdap/commit/0a72b70ef0cdf9e629204abb99393e578ddfebfb", "message": "[CDAP-17410] Replication add latency graph", "committedDate": "2020-12-08T23:26:27Z", "type": "commit"}, {"oid": "0a72b70ef0cdf9e629204abb99393e578ddfebfb", "url": "https://github.com/cdapio/cdap/commit/0a72b70ef0cdf9e629204abb99393e578ddfebfb", "message": "[CDAP-17410] Replication add latency graph", "committedDate": "2020-12-08T23:26:27Z", "type": "forcePushed"}]}