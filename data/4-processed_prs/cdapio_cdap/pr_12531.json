{"pr_number": 12531, "pr_title": "[CDAP-17010] Expose widget attributes in each widget class (Plugin JSON Creator)", "pr_createdAt": "2020-07-29T23:14:14Z", "pr_url": "https://github.com/cdapio/cdap/pull/12531", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MjUxNQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463062515", "bodyText": "Should \"native\" be here as well (see line 107)? I think it also needs to get added to ISelectWidgetProps (along with default?).", "author": "yukiej", "createdAt": "2020-07-30T15:01:46Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/Select/index.tsx", "diffHunk": "@@ -160,5 +161,13 @@ const CustomSelect: React.FC<ISelectProps> = ({\n };\n \n (CustomSelect as any).propTypes = WIDGET_PROPTYPES;\n+(CustomSelect as any).getWidgetAttributes = () => {\n+  return {\n+    options: { type: 'ISelectOptions[]|string[]|number[]', required: true },\n+    default: { type: 'string', required: false },\n+    dense: { type: 'boolean', required: false },\n+    inline: { type: 'boolean', required: false },", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0ODYwNw==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463148607", "bodyText": "Wow, good point! Will add native in both getWidgetAttributes and ISelectWidgetProps.", "author": "jennac3", "createdAt": "2020-07-30T17:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MjUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDM3OQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463064379", "bodyText": "Should default get added to ITextBoxWidgetProps?", "author": "yukiej", "createdAt": "2020-07-30T15:04:25Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/FormInputs/TextBox/index.tsx", "diffHunk": "@@ -75,5 +75,14 @@ const TextBox: React.FC<ITextBoxProps> = ({\n   );\n };\n \n-export default React.memo(TextBox);\n+const TextBox = React.memo(TextBoxComponent);\n+\n (TextBox as any).propTypes = WIDGET_PROPTYPES;\n+(TextBox as any).getWidgetAttributes = () => {\n+  return {\n+    placeholder: { type: 'string', required: false },", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NzgyNg==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463177826", "bodyText": "Done", "author": "jennac3", "createdAt": "2020-07-30T18:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDM3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NzkzNw==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463067937", "bodyText": "I don't see where we look for/use this?", "author": "yukiej", "createdAt": "2020-07-30T15:09:33Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueDropdownWidget/index.tsx", "diffHunk": "@@ -72,3 +74,12 @@ export default function KeyValueDropdownWidget(props) {\n }\n \n (KeyValueDropdownWidget as any).propTypes = WIDGET_PROPTYPES;\n+(KeyValueDropdownWidget as any).getWidgetAttributes = () => {\n+  return {\n+    'key-placeholder': { type: 'string', required: false },\n+    'value-placeholder': { type: 'string', required: false },", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1MDM2Mw==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463150363", "bodyText": "Yes! We wouldn't need value-placeholder since value field would be a dropdown.", "author": "jennac3", "createdAt": "2020-07-30T17:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NzkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2OTkzNQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463069935", "bodyText": "where do we use this?", "author": "yukiej", "createdAt": "2020-07-30T15:12:25Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/KeyValueWidget/index.tsx", "diffHunk": "@@ -76,3 +78,13 @@ export default function KeyValueWidget(props) {\n   ...WIDGET_PROPTYPES,\n   isEncoded: PropTypes.bool,\n };\n+\n+(KeyValueWidget as any).getWidgetAttributes = () => {\n+  return {\n+    'key-placeholder': { type: 'string', required: false },\n+    'value-placeholder': { type: 'string', required: false },\n+    'kv-delimiter': { type: 'string', required: false },\n+    delimiter: { type: 'string', required: false },\n+    showDelimiter: { type: 'boolean', required: false },", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MTA0MQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463181041", "bodyText": "I've included this because I've noticed that this is occasionally included in JSON configuration.\nhttps://github.com/cdapio/hydrator-plugins/blob/544519f394360fb7a045e6be02fe0afea4f40c27/core-plugins/widgets/Cube-batchsink.json#L32", "author": "jennac3", "createdAt": "2020-07-30T18:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2OTkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MDk0Nw==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463070947", "bodyText": "Where is this type defined?", "author": "yukiej", "createdAt": "2020-07-30T15:13:53Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/MemorySelectWidget/index.js", "diffHunk": "@@ -38,3 +38,8 @@ export default function MemorySelectWidget({ ...props }) {\n \n MemorySelectWidget.propTypes = WIDGET_PROPTYPES;\n MemorySelectWidget.defaultProps = DEFAULT_WIDGET_PROPS;\n+MemorySelectWidget.getWidgetAttributes = () => {\n+  return {\n+    size: { type: 'Size', required: false },", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NDA3MA==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463174070", "bodyText": "I have defined it here! This change is included in this PR. \n  \n    \n      cdap/cdap-ui/app/cdap/components/ConfigurationGroup/WidgetWrapper/index.tsx\n    \n    \n         Line 88\n      in\n      c77629c\n    \n    \n    \n    \n\n        \n          \n           export enum Size {", "author": "jennac3", "createdAt": "2020-07-30T17:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MDk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MTU1Nw==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463071557", "bodyText": "it looks like this can also be a string?", "author": "yukiej", "createdAt": "2020-07-30T15:14:46Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/MultipleValuesWidget/index.tsx", "diffHunk": "@@ -74,3 +76,11 @@ export default function MultipleValuesWidget(props) {\n }\n \n (MultipleValuesWidget as any).propTypes = WIDGET_PROPTYPES;\n+(MultipleValuesWidget as any).getWidgetAttributes = () => {\n+  return {\n+    placeholders: { type: 'string[]', required: false },\n+    'values-delimiter': { type: 'string', required: false },\n+    numValues: { type: 'number', required: true },", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTEyOA==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463175128", "bodyText": "Because this widget property numValues represents a number of values, we should render a number widget that configures this widget property. Therefore, it would be better to pass in number instead.", "author": "jennac3", "createdAt": "2020-07-30T18:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3MTU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3NDU5Mg==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463074592", "bodyText": "where do we check for/use this?", "author": "yukiej", "createdAt": "2020-07-30T15:18:27Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/RadioGroupWidget/index.tsx", "diffHunk": "@@ -128,3 +128,10 @@ export default function RadioGroupWidget(props) {\n }\n \n (RadioGroupWidget as any).propTypes = WIDGET_PROPTYPES;\n+(RadioGroupWidget as any).getWidgetAttributes = () => {\n+  return {\n+    layout: { type: 'string', required: true },\n+    options: { type: 'IOption[]', required: true },\n+    default: { type: 'string', required: false },", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3OTMxMg==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463179312", "bodyText": "This is used to set the default value of radio-group widget when we render it via `ConfigurationGroup` component. If `default` is set to \"true\", it will select \"true\" as the following screenshot.", "author": "jennac3", "createdAt": "2020-07-30T18:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3NDU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3OTExOA==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463079118", "bodyText": "It looks a little weird to have some of the imports before the license.", "author": "yukiej", "createdAt": "2020-07-30T15:25:03Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/WranglerEditor/index.tsx", "diffHunk": "@@ -1,3 +1,16 @@\n+import * as React from 'react';", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTQxNQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463175415", "bodyText": "Whoops, will fix this!", "author": "jennac3", "createdAt": "2020-07-30T18:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3OTExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NzYwMQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463177601", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-30T18:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA3OTExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NTAxNw==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463085017", "bodyText": "Why did we change this from empty string to undefined? Having it be set to undefined seems potentially ambiguous if we want to check for existence of the key in acc.", "author": "yukiej", "createdAt": "2020-07-30T15:33:33Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/WidgetCollection/WidgetPanel/WidgetInfoInput/index.tsx", "diffHunk": "@@ -70,12 +67,14 @@ const WidgetInfoInputView: React.FC<IWidgetInfoInputProps> = ({ classes, widgetI\n       setWidgetInfo(widgetInfo.setIn([widgetID, 'widgetType'], widgetType));\n \n       // Change widget-attributes so that it corresponds to the widget-type\n+      const comp = WIDGET_FACTORY[widgetType];\n+      const widgetAttributes = comp.getWidgetAttributes();\n       setWidgetToAttributes(\n         widgetToAttributes.set(\n           widgetID,\n           Map(\n-            Object.keys(WIDGET_TYPE_TO_ATTRIBUTES[widgetType]).reduce((acc, curr) => {\n-              acc[curr] = '';\n+            Object.keys(widgetAttributes).reduce((acc, curr) => {\n+              acc[curr] = undefined;", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NzI3MQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463177271", "bodyText": "If we set the default value to be an empty string, this will cause errors in certain widgets. For instance, some widget attributes such as options should not be set to an empty string, since it should be an array. Previously, It has caused errors on certain widgets because this runs forEach or map on empty string.", "author": "jennac3", "createdAt": "2020-07-30T18:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NTQxMQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463085411", "bodyText": "I would move this below the license.", "author": "yukiej", "createdAt": "2020-07-30T15:34:14Z", "path": "cdap-ui/app/cdap/components/SelectWithOptions/index.js", "diffHunk": "@@ -1,3 +1,4 @@\n+import { Input } from 'reactstrap';", "originalCommit": "c77629cc5271a0b2e42c01c5a1059979d406a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTYxNw==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463175617", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-30T18:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NzU0MQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r463177541", "bodyText": "Done", "author": "jennac3", "createdAt": "2020-07-30T18:04:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NTQxMQ=="}], "type": "inlineReview"}, {"oid": "d6dec4ede2e79555e3e684bfe608bf8938687a15", "url": "https://github.com/cdapio/cdap/commit/d6dec4ede2e79555e3e684bfe608bf8938687a15", "message": "small add", "committedDate": "2020-07-30T18:20:42Z", "type": "forcePushed"}, {"oid": "0b3b547df764ae1d5059cb15ab875e4cd7ea4b18", "url": "https://github.com/cdapio/cdap/commit/0b3b547df764ae1d5059cb15ab875e4cd7ea4b18", "message": "address comments", "committedDate": "2020-07-31T02:04:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MjkxNg==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r464762916", "bodyText": "keep this return statement, then the else block is not needed", "author": "elfenheart", "createdAt": "2020-08-04T02:32:05Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/AbstractMultiRowWidget/index.tsx", "diffHunk": "@@ -80,26 +81,27 @@ export default class AbstractMultiRowWidget<\n           autofocus: null,\n         },\n         () => {\n-          this.addRow(-1, false);\n+          if (!this.state.rows || this.state.rows.length === 0) {\n+            // adding a new empty row in case values are empty\n+            this.addRow(-1, false);\n+          }\n         }\n       );\n+    } else {\n+      const rows = [];\n \n-      return;", "originalCommit": "0b3b547df764ae1d5059cb15ab875e4cd7ea4b18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwODY2NQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r465108665", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-08-04T14:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MjkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MzM4MQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r464763381", "bodyText": "not necessary. We're not going to support DLP widget for the JSON widget creator", "author": "elfenheart", "createdAt": "2020-08-04T02:33:53Z", "path": "cdap-ui/app/cdap/components/AbstractWidget/DLPCustomWidget/index.tsx", "diffHunk": "@@ -85,3 +87,11 @@ export default function DLPWidget(props) {\n }\n \n (DLPWidget as any).propTypes = WIDGET_PROPTYPES;\n+(DLPWidget as any).getWidgetAttributes = () => {\n+  return {\n+    // TODO: Need to investigate 'transforms' more\n+    // transforms: { type: 'ITransformProp[]', required: true },", "originalCommit": "0b3b547df764ae1d5059cb15ab875e4cd7ea4b18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwODY5OQ==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r465108699", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-08-04T14:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MzM4MQ=="}], "type": "inlineReview"}, {"oid": "3244624cc172adaf9e8edb3eb258f41756386eca", "url": "https://github.com/cdapio/cdap/commit/3244624cc172adaf9e8edb3eb258f41756386eca", "message": "[CDAP-17010] Expose widget attributes in each widget class (Plugin JSON Creator)", "committedDate": "2020-08-04T17:14:46Z", "type": "forcePushed"}, {"oid": "f9d682813afb3ba6f95c58dcc7d702e933ae0a42", "url": "https://github.com/cdapio/cdap/commit/f9d682813afb3ba6f95c58dcc7d702e933ae0a42", "message": "[CDAP-17010] Expose widget attributes in each widget class (Plugin JSON Creator)", "committedDate": "2020-08-04T17:17:34Z", "type": "forcePushed"}, {"oid": "a1e3516ca0270ae08e57e7eaac2f0e22a62ba9ca", "url": "https://github.com/cdapio/cdap/commit/a1e3516ca0270ae08e57e7eaac2f0e22a62ba9ca", "message": "dropzone", "committedDate": "2020-08-05T20:51:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2MjI0Mg==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r466562242", "bodyText": "this is a wrong usage for debounce, this should be a timeout.\nYou should debounce the entire callback of useEffect, and inside it have a timeout to set the loading to false", "author": "elfenheart", "createdAt": "2020-08-06T17:14:34Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupPage/GroupPanel/WidgetCollection/WidgetAttributesPanel/index.tsx", "diffHunk": "@@ -71,14 +73,34 @@ const WidgetAttributesPanelView: React.FC<IWidgetAttributesPanelProps> = ({\n   // 'widgetToAttributes' will only be changed when user clicks on 'save' button or closes the dialog.\n   const [localWidgetToAttributes, setLocalWidgetToAttributes] = React.useState(widgetToAttributes);\n \n+  const [loading, setLoading] = React.useState(false);\n+\n+  // When widget attributes changes, show loading view for 500ms\n+  // This is in order to force rerender WidgetAttributeInput component\n+  const debouncedUpdate = debounce(() => {\n+    setLoading(false);\n+  }, 500);\n+\n+  React.useEffect(() => {\n+    // after a setTimeout for 500ms, set the loading state back to false\n+    setLoading(true);\n+    setLocalWidgetToAttributes(widgetToAttributes);\n+    debouncedUpdate();", "originalCommit": "a1e3516ca0270ae08e57e7eaac2f0e22a62ba9ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2Mjc3MA==", "url": "https://github.com/cdapio/cdap/pull/12531#discussion_r466562770", "bodyText": "same comment here regarding the debounce", "author": "elfenheart", "createdAt": "2020-08-06T17:15:28Z", "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/PluginJSONMenu/LiveView/index.tsx", "diffHunk": "@@ -66,6 +68,20 @@ const LiveViewView: React.FC<ILiveViewProps> = ({\n   JSONFilename,\n   collapseLiveView,\n }) => {\n+  const [loading, setLoading] = React.useState(false);\n+\n+  // When JSONOutput changes, show loading view for 500ms\n+  // This is in order to force rerender LiveConfigurationGroup component\n+  const debouncedUpdate = debounce(() => {\n+    setLoading(false);\n+  }, 500);\n+\n+  React.useEffect(() => {\n+    // after a setTimeout for 500ms, set the loading state back to false\n+    setLoading(true);\n+    debouncedUpdate();\n+  }, [JSONOutput]);", "originalCommit": "a1e3516ca0270ae08e57e7eaac2f0e22a62ba9ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "25fa090680a447873ef784e4b75c0668a84650a8", "url": "https://github.com/cdapio/cdap/commit/25fa090680a447873ef784e4b75c0668a84650a8", "message": "[CDAP-17010] Expose widget attributes in each widget class (Plugin JSON Creator)", "committedDate": "2020-08-06T19:21:50Z", "type": "commit"}, {"oid": "25fa090680a447873ef784e4b75c0668a84650a8", "url": "https://github.com/cdapio/cdap/commit/25fa090680a447873ef784e4b75c0668a84650a8", "message": "[CDAP-17010] Expose widget attributes in each widget class (Plugin JSON Creator)", "committedDate": "2020-08-06T19:21:50Z", "type": "forcePushed"}]}