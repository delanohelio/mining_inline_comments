{"pr_number": 12448, "pr_title": "[CDAP-17066] Integration test for RequestHistoryTab in HttpExecutor", "pr_createdAt": "2020-07-10T16:25:45Z", "pr_url": "https://github.com/cdapio/cdap/pull/12448", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MDI1MQ==", "url": "https://github.com/cdapio/cdap/pull/12448#discussion_r454670251", "bodyText": "Do we need to have localized text in the data-cy field?", "author": "njbriggs", "createdAt": "2020-07-14T21:59:21Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/RequestRow/index.tsx", "diffHunk": "@@ -131,7 +131,11 @@ const RequestRowView: React.FC<IRequestRowProps> = ({ classes, request, onReques\n \n   return (\n     <div>\n-      <div className={classes.requestRow} onClick={() => onRequestClick(request)}>\n+      <div\n+        data-cy={`request-row-${request.requestID.toLocaleString()}`}", "originalCommit": "379307d7e97210635d96115ac0770b04983955a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTYzMg==", "url": "https://github.com/cdapio/cdap/pull/12448#discussion_r460115632", "bodyText": "Done", "author": "jennac3", "createdAt": "2020-07-24T15:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MDI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzNzIzOA==", "url": "https://github.com/cdapio/cdap/pull/12448#discussion_r456637238", "bodyText": "Shouldn't this be MOCK_LOCAL_STORAGE (without the minus one) since the previous test added another request?", "author": "yukiej", "createdAt": "2020-07-17T19:36:10Z", "path": "cdap-ui/cypress/integration/httpexecutor.requesthistorytab.spec.ts", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_LOCAL_STORAGE = {\n+  'RequestHistory 7/5/2020, 6:54:19 PM': JSON.stringify({\n+    method: 'GET',\n+    path: 'hello.com',\n+    body: 'hello',\n+    headers: { pairs: [{ key: '', value: '', uniqueId: '6fd93a6e-5b2f-47aa-8143-157629bdf457' }] },\n+    response: 'Problem accessing: /v3/hello.com. Reason: Not Found',\n+    statusCode: 404,\n+  }),\n+  'RequestHistory 7/6/2020, 6:54:19 PM': JSON.stringify({\n+    method: 'DELETE',\n+    path: 'hello2.com',\n+    body: 'hello2',\n+    headers: { pairs: [{ key: '', value: '', uniqueId: '6fd93a6e-5b2f-47aa-8143-157629bdf457' }] },\n+    response: 'Problem accessing: /v3/hello2.com. Reason: Not Found',\n+    statusCode: 404,\n+  }),\n+  'RequestHistory 7/7/2020, 6:54:19 PM': JSON.stringify({\n+    method: 'POST',\n+    path: 'hello3.com',\n+    body: 'hello3',\n+    headers: { pairs: [{ key: '', value: '', uniqueId: '6fd93a6e-5b2f-47aa-8143-157629bdf457' }] },\n+    response: 'Problem accessing: /v3/hello3.com. Reason: Not Found',\n+    statusCode: 409,\n+  }),\n+};\n+\n+describe('RequestHistoryTab in httpExecutor', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      // Set local storage before visiting the page\n+      Object.entries(MOCK_LOCAL_STORAGE).forEach(([key, request]) => {\n+        localStorage.setItem(key, request);\n+      });\n+      cy.visit('/httpexecutor');\n+    });\n+\n+    it('should show populate requestHistoryTab with existing items in localStorage', () => {\n+      Object.entries(MOCK_LOCAL_STORAGE).forEach(([key, request]) => {\n+        const timestamp = key.substr(15); // trim request history identifier 'RequestHistory'\n+\n+        cy.get(dataCy(`request-row-${timestamp}`)).should('exist');\n+\n+        const req = JSON.parse(request);\n+\n+        // Check if requestHistoryTab has been populated correctly\n+        cy.get(`${dataCy(`request-row-${timestamp}`)} ${dataCy('request-path')}`)\n+          .invoke('text')\n+          .should((text) => {\n+            expect(text).to.eq(req.path);\n+          });\n+        cy.get(`${dataCy(`request-row-${timestamp}`)} ${dataCy('request-method')}`)\n+          .invoke('text')\n+          .should((text) => {\n+            expect(text).to.eq(req.method);\n+          });\n+\n+        // Check if main page has been populated correctly\n+        cy.get(dataCy(`request-row-${timestamp}`)).click();\n+        cy.get(dataCy('request-method-selector'))\n+          .invoke('val')\n+          .should((val) => {\n+            expect(val).to.eq(req.method);\n+          });\n+        cy.get(dataCy('request-path-input'))\n+          .invoke('val')\n+          .should((val) => {\n+            expect(val).to.eq(req.path);\n+          });\n+        cy.get(dataCy('response-status-code'))\n+          .invoke('text')\n+          .should((text) => {\n+            expect(text).to.eq(req.statusCode.toString());\n+          });\n+        cy.get(dataCy('response'))\n+          .invoke('text')\n+          .should((text) => {\n+            expect(text).to.eq(req.response);\n+          });\n+        if (req.method === 'POST') {\n+          cy.get(dataCy('body-btn')).click();\n+          cy.get(dataCy('request-body'))\n+            .invoke('val')\n+            .should((val) => {\n+              expect(val).to.eq(req.body);\n+            });\n+        }\n+      });\n+    });\n+\n+    it('should search for requests from RequestHistoryTab', () => {\n+      // All the requests include searchText1 in their path,\n+      // validate every request appears in requestHistoryTab\n+      const searchText1 = 'hello';\n+      cy.get(dataCy('request-search-input'))\n+        .click()\n+        .focused()\n+        .clear()\n+        .type(searchText1);\n+      cy.get('[data-cy*=\"request-row\"]').should(\n+        'have.length',\n+        Object.keys(MOCK_LOCAL_STORAGE).length\n+      );\n+\n+      // Only one request include searchText2 in their path\n+      const searchText2 = 'hello.com';\n+      cy.get(dataCy('request-search-input'))\n+        .click()\n+        .focused()\n+        .clear()\n+        .type(searchText2);\n+      cy.get('[data-cy*=\"request-row\"]').should('have.length', 1);\n+\n+      // None of the requests include searchText3 in their path\n+      const searchText3 = 'hellooo';\n+      cy.get(dataCy('request-search-input'))\n+        .click()\n+        .focused()\n+        .clear()\n+        .type(searchText3);\n+      cy.get('[data-cy*=\"request-row\"]').should('have.length', 0);\n+\n+      // Clear out all the search text\n+      cy.get(dataCy('request-search-input'))\n+        .click()\n+        .focused()\n+        .clear();\n+    });\n+\n+    it('should add a request to requestHistoryTab', () => {\n+      // Should add a new request when the save mode is off\n+      cy.get(dataCy('save-mode-btn')).click(); // turn off the save mode\n+      const newRequest1 = {\n+        method: 'DELETE',\n+        path: 'https://new-request-1.com',\n+      };\n+      // Attempt to add a new request\n+      cy.get(dataCy('request-method-selector')).select(newRequest1.method);\n+      cy.get(dataCy('request-path-input'))\n+        .clear()\n+        .click()\n+        .type(newRequest1.path);\n+      cy.get(dataCy('send-btn')).click();\n+      // Validate a new request has NOT been added to requestHistoryTab\n+      cy.get('[data-cy*=\"request-row\"]').should(\n+        'have.length',\n+        Object.keys(MOCK_LOCAL_STORAGE).length\n+      );\n+\n+      // Should add a new request when the save mode is on\n+      cy.get(dataCy('save-mode-btn')).click(); // turn on the save mode\n+      const newRequest2 = {\n+        method: 'POST',\n+        path: 'https://new-request-2.com',\n+        body: 'hello4',\n+      };\n+      // Attempt to add a new request\n+      cy.get(dataCy('request-method-selector')).select(newRequest2.method);\n+      cy.get(dataCy('request-path-input'))\n+        .clear()\n+        .click()\n+        .type(newRequest2.path);\n+      cy.get(dataCy('request-body'))\n+        .clear()\n+        .click()\n+        .type(newRequest2.body);\n+      cy.get(dataCy('send-btn')).click();\n+      // Validate a new request has been added to requestHistoryTab\n+      cy.get('[data-cy*=\"request-row\"]').should(\n+        'have.length',\n+        Object.keys(MOCK_LOCAL_STORAGE).length + 1\n+      );\n+    });\n+\n+    it('should delete a request from RequestHistoryTab', () => {\n+      // Delete the latest request from RequestHistoryTab\n+      cy.get('[data-cy*=\"request-row\"]').within(() => {\n+        // Since delete-icon is a hidden element, we need click({force: true})\n+        cy.get(dataCy('delete-icon'))\n+          .first() // the first element has the latest request\n+          .invoke('show')\n+          .click({ force: true });\n+      });\n+\n+      // Check whether a delete dialog has been opened\n+      cy.get(dataCy('confirm-dialog')).should('exist');\n+\n+      // Confirm delete\n+      cy.get(dataCy('Delete')).click();\n+\n+      // Validate the request has been deleted from requestHistoryTab\n+      cy.get('[data-cy*=\"request-row\"]').should(\n+        'have.length',\n+        Object.keys(MOCK_LOCAL_STORAGE).length - 1", "originalCommit": "379307d7e97210635d96115ac0770b04983955a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTUyNg==", "url": "https://github.com/cdapio/cdap/pull/12448#discussion_r460115526", "bodyText": "Done!", "author": "jennac3", "createdAt": "2020-07-24T15:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzNzIzOA=="}], "type": "inlineReview"}, {"oid": "75a2d98d7a203c0a82051ff002f0e169010d0e2b", "url": "https://github.com/cdapio/cdap/commit/75a2d98d7a203c0a82051ff002f0e169010d0e2b", "message": "fix", "committedDate": "2020-07-24T15:12:38Z", "type": "forcePushed"}, {"oid": "4558757bfc02d582a8716ab20157f5089174a047", "url": "https://github.com/cdapio/cdap/commit/4558757bfc02d582a8716ab20157f5089174a047", "message": "[CDAP-17066] Integration test for RequestHistoryTab in HttpExecutor", "committedDate": "2020-07-31T23:23:31Z", "type": "forcePushed"}, {"oid": "2a51edc83b9b960057ea271b076b9a7326c5109c", "url": "https://github.com/cdapio/cdap/commit/2a51edc83b9b960057ea271b076b9a7326c5109c", "message": "[CDAP-17066] Integration test for RequestHistoryTab in HttpExecutor", "committedDate": "2020-07-31T23:24:50Z", "type": "forcePushed"}, {"oid": "9df4fbb98a9c17c3d5b3129784fc4c3aaa5690aa", "url": "https://github.com/cdapio/cdap/commit/9df4fbb98a9c17c3d5b3129784fc4c3aaa5690aa", "message": "[CDAP-17066] Integration test for RequestHistoryTab in HttpExecutor", "committedDate": "2020-08-03T17:45:48Z", "type": "commit"}, {"oid": "9df4fbb98a9c17c3d5b3129784fc4c3aaa5690aa", "url": "https://github.com/cdapio/cdap/commit/9df4fbb98a9c17c3d5b3129784fc4c3aaa5690aa", "message": "[CDAP-17066] Integration test for RequestHistoryTab in HttpExecutor", "committedDate": "2020-08-03T17:45:48Z", "type": "forcePushed"}]}