{"pr_number": 12440, "pr_title": "[CDAP-17060] Integration test for Secure Key Manager", "pr_createdAt": "2020-07-07T21:39:20Z", "pr_url": "https://github.com/cdapio/cdap/pull/12440", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTk5NA==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460149994", "bodyText": "We should try to avoid explicit wait commands like these, more info here\nHere, you can verify that the alert component is no longer visible likecy.get('selector').should('not.be.visible');", "author": "itsanudeep", "createdAt": "2020-07-24T16:10:01Z", "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {\n+      cy.get('body').then((body) => {\n+        MOCK_SECURE_KEYS.forEach((key) => {\n+          const secureKeyMenu = `${dataCy(`secure-key-row-${key.name}`)} ${dataCy(`menu-icon`)}`;\n+          if (body.find(secureKeyMenu).length > 0) {\n+            cy.get(secureKeyMenu).click();\n+\n+            // open a delete dialog\n+            cy.get(dataCy('delete-secure-key')).click();\n+\n+            // confirm delete\n+            cy.get(dataCy('Delete')).click();\n+            cy.wait(6000); // wait for success alert component to disappear", "originalCommit": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIwNzg3Ng==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460207876", "bodyText": "I tried this approach where I replace cy.wait with the following, but it doesn't seem to work. Perhaps because alert component is modal and is only appearing for 5 seconds?\ncy.get('alert').should('not.be.visible'); // wait for success alert component to disappear", "author": "jennac3", "createdAt": "2020-07-24T18:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTI2MQ==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460151261", "bodyText": "same as above", "author": "itsanudeep", "createdAt": "2020-07-24T16:12:16Z", "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {\n+      cy.get('body').then((body) => {\n+        MOCK_SECURE_KEYS.forEach((key) => {\n+          const secureKeyMenu = `${dataCy(`secure-key-row-${key.name}`)} ${dataCy(`menu-icon`)}`;\n+          if (body.find(secureKeyMenu).length > 0) {\n+            cy.get(secureKeyMenu).click();\n+\n+            // open a delete dialog\n+            cy.get(dataCy('delete-secure-key')).click();\n+\n+            // confirm delete\n+            cy.get(dataCy('Delete')).click();\n+            cy.wait(6000); // wait for success alert component to disappear\n+          }\n+        });\n+      });\n+    });\n+\n+    it('should add secure keys', () => {\n+      MOCK_SECURE_KEYS.forEach((key) => {\n+        cy.get(dataCy('create-secure-key')).click({ force: true });\n+\n+        cy.get(dataCy('secure-key-name'))\n+          .click()\n+          .type(key.name);\n+        cy.get(dataCy('secure-key-description'))\n+          .click()\n+          .type(key.description);\n+        cy.get(dataCy('secure-key-data'))\n+          .click()\n+          .type(key.data);\n+\n+        cy.get(dataCy('save-secure-key')).click();\n+        cy.wait(6000); // wait for success alert component to disappear", "originalCommit": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1NjMwMw==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460256303", "bodyText": "Put comment above regarding alternative for cy.wait(6000);", "author": "jennac3", "createdAt": "2020-07-24T19:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTMwOA==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460151308", "bodyText": "same as above", "author": "itsanudeep", "createdAt": "2020-07-24T16:12:24Z", "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {\n+      cy.get('body').then((body) => {\n+        MOCK_SECURE_KEYS.forEach((key) => {\n+          const secureKeyMenu = `${dataCy(`secure-key-row-${key.name}`)} ${dataCy(`menu-icon`)}`;\n+          if (body.find(secureKeyMenu).length > 0) {\n+            cy.get(secureKeyMenu).click();\n+\n+            // open a delete dialog\n+            cy.get(dataCy('delete-secure-key')).click();\n+\n+            // confirm delete\n+            cy.get(dataCy('Delete')).click();\n+            cy.wait(6000); // wait for success alert component to disappear\n+          }\n+        });\n+      });\n+    });\n+\n+    it('should add secure keys', () => {\n+      MOCK_SECURE_KEYS.forEach((key) => {\n+        cy.get(dataCy('create-secure-key')).click({ force: true });\n+\n+        cy.get(dataCy('secure-key-name'))\n+          .click()\n+          .type(key.name);\n+        cy.get(dataCy('secure-key-description'))\n+          .click()\n+          .type(key.description);\n+        cy.get(dataCy('secure-key-data'))\n+          .click()\n+          .type(key.data);\n+\n+        cy.get(dataCy('save-secure-key')).click();\n+        cy.wait(6000); // wait for success alert component to disappear\n+      });\n+    });\n+\n+    it('should edit a secure key', () => {\n+      const keyToEdit = MOCK_SECURE_KEYS[0];\n+      const additionalLetter = '1';\n+\n+      // Click on a table row of the first secure key\n+      // This will open a edit dialog\n+      cy.get(dataCy(`secure-key-row-${keyToEdit.name}`)).click();\n+\n+      // edit the description of secure key\n+      cy.get(dataCy('secure-key-description'))\n+        .click()\n+        .type(additionalLetter);\n+\n+      // edit the data of secure key\n+      cy.get(dataCy('secure-key-data'))\n+        .click()\n+        .type(additionalLetter);\n+\n+      cy.get(dataCy('save-secure-key')).click();\n+      cy.wait(6000); // wait for success alert component to disappear", "originalCommit": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1NjM1MQ==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460256351", "bodyText": "Put comment above regarding alternative for cy.wait(6000);", "author": "jennac3", "createdAt": "2020-07-24T19:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NDAxNg==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460164016", "bodyText": "is this for clean up or reset before the test starts?? If it's for cleanup, then it's better to delete in after() method, and just call the API to delete. To reset state in the begining, do them in before() method", "author": "elfenheart", "createdAt": "2020-07-24T16:36:49Z", "path": "cdap-ui/cypress/integration/securekeymanager.spec.ts", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as Helpers from '../helpers';\n+let headers = {};\n+\n+const { dataCy } = Helpers;\n+\n+const MOCK_SECURE_KEYS: any[] = [\n+  {\n+    name: 'secure-key-1-id',\n+    description: 'Example Secure Key 1',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010326,\n+  },\n+  {\n+    name: 'secure-key-2-id',\n+    description: 'Example Secure Key 2',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010327,\n+  },\n+  {\n+    name: 'secure-key-3-id',\n+    description: 'Example Secure Key 3',\n+    data: 'WARNING: this is secure data',\n+    createdEpochMs: 1471718010328,\n+  },\n+];\n+\n+describe('Secure Key Manager Page', () => {\n+  // Uses API call to login instead of logging in manually through UI\n+  before(() => {\n+    Helpers.loginIfRequired().then(() => {\n+      cy.getCookie('CDAP_Auth_Token').then((cookie) => {\n+        if (!cookie) {\n+          return;\n+        }\n+        headers = {\n+          Authorization: 'Bearer ' + cookie.value,\n+        };\n+      });\n+    });\n+    const stub = cy.stub();\n+    cy.window().then((win) => {\n+      win.onbeforeunload = null;\n+    });\n+    cy.on('window:confirm', stub);\n+\n+    Helpers.getArtifactsPoll(headers);\n+  });\n+\n+  describe('Accessing and managing secure keys', () => {\n+    before(() => {\n+      cy.visit('/cdap/ns/default/securekeys');\n+      cy.wait(6000); // wait for secure keys to be loaded\n+    });\n+\n+    it('should delete MOCK_SECURE_KEYS before testing if they already exist in the secure storage', () => {", "originalCommit": "7d5e7e995796ef5aeeeb6567d633d3b94e38e2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIwNjg5MQ==", "url": "https://github.com/cdapio/cdap/pull/12440#discussion_r460206891", "bodyText": "Addressed, yes this is for clean up before the test!", "author": "jennac3", "createdAt": "2020-07-24T18:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NDAxNg=="}], "type": "inlineReview"}, {"oid": "cb9400bb4650f94d3def6bd5bfd177e616f11893", "url": "https://github.com/cdapio/cdap/commit/cb9400bb4650f94d3def6bd5bfd177e616f11893", "message": "[CDAP-17060] Integration test for Secure Key Manager", "committedDate": "2020-08-05T14:26:32Z", "type": "forcePushed"}, {"oid": "a49a1060910350215f79359444430c61bf11f38a", "url": "https://github.com/cdapio/cdap/commit/a49a1060910350215f79359444430c61bf11f38a", "message": "[CDAP-17060] Integration test for Secure Key Manager", "committedDate": "2020-08-05T14:29:33Z", "type": "commit"}, {"oid": "a49a1060910350215f79359444430c61bf11f38a", "url": "https://github.com/cdapio/cdap/commit/a49a1060910350215f79359444430c61bf11f38a", "message": "[CDAP-17060] Integration test for Secure Key Manager", "committedDate": "2020-08-05T14:29:33Z", "type": "forcePushed"}]}