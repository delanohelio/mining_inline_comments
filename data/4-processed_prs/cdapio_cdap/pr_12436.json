{"pr_number": 12436, "pr_title": "[CDAP-17056] Store request history for HttpExecutor  (RequestHistoryTab)", "pr_createdAt": "2020-07-06T21:55:42Z", "pr_url": "https://github.com/cdapio/cdap/pull/12436", "timeline": [{"oid": "a1d60f0a694b31ffa5f651ca5316e7d370e6bf08", "url": "https://github.com/cdapio/cdap/commit/a1d60f0a694b31ffa5f651ca5316e7d370e6bf08", "message": "[CDAP-17056] Enable request history storage in HttpExecutor (Request History Storage)", "committedDate": "2020-07-08T15:14:22Z", "type": "forcePushed"}, {"oid": "3035fa4b6c94b2f05082dd53f751eb48da74cdd0", "url": "https://github.com/cdapio/cdap/commit/3035fa4b6c94b2f05082dd53f751eb48da74cdd0", "message": "[CDAP-17056] Enable request history storage in HttpExecutor (Request History Storage)", "committedDate": "2020-07-08T15:33:40Z", "type": "forcePushed"}, {"oid": "e3e1066bf303dd2a722b527ab0cded47b0c53694", "url": "https://github.com/cdapio/cdap/commit/e3e1066bf303dd2a722b527ab0cded47b0c53694", "message": "[CDAP-17056] Enable request history storage in HttpExecutor (Request History Storage)", "committedDate": "2020-07-08T15:37:20Z", "type": "forcePushed"}, {"oid": "a7dcdeca216534f365fe36c053b1154ef575d18c", "url": "https://github.com/cdapio/cdap/commit/a7dcdeca216534f365fe36c053b1154ef575d18c", "message": "[CDAP-17056] Enable request history storage in HttpExecutor (Request History Storage)", "committedDate": "2020-07-08T15:40:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyNzA5OQ==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r456127099", "bodyText": "why dividing by 1.5? i see you already have the gridTemplateColumns, can the width be controlled there instead?", "author": "elfenheart", "createdAt": "2020-07-16T23:08:22Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import { LEFT_PANEL_WIDTH } from 'components/HttpExecutor';\n+import HttpExecutorActions from 'components/HttpExecutor/store/HttpExecutorActions';\n+import HttpExecutorStore from 'components/HttpExecutor/store/HttpExecutorStore';\n+import { List } from 'immutable';\n+import * as React from 'react';\n+import { connect } from 'react-redux';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      borderRight: `1px solid ${theme.palette.grey[300]}`,\n+      height: '100%',\n+    },\n+    requestRow: {\n+      padding: '10px',\n+      lineHeight: '24px',\n+      display: 'grid',\n+      width: '100%',\n+      gridTemplateColumns: '50px 1fr',\n+      cursor: 'pointer',\n+\n+      '&:hover': {\n+        backgroundColor: theme.palette.grey[700],\n+      },\n+    },\n+    requestMethod: {\n+      paddingLeft: '5px',\n+      color: theme.palette.white[50],\n+      width: '100%',\n+      height: '100%',\n+      fontWeight: 600,\n+      display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'flex-start',\n+      fontSize: '10px',\n+    },\n+    requestMethodText: {\n+      width: '100%',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+    },\n+    requestPath: {\n+      width: `${LEFT_PANEL_WIDTH / 1.5}px`,", "originalCommit": "a7dcdeca216534f365fe36c053b1154ef575d18c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEyNzc5NQ==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r456127795", "bodyText": "nit: typo populate", "author": "elfenheart", "createdAt": "2020-07-16T23:10:26Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import { LEFT_PANEL_WIDTH } from 'components/HttpExecutor';\n+import HttpExecutorActions from 'components/HttpExecutor/store/HttpExecutorActions';\n+import HttpExecutorStore from 'components/HttpExecutor/store/HttpExecutorStore';\n+import { List } from 'immutable';\n+import * as React from 'react';\n+import { connect } from 'react-redux';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      borderRight: `1px solid ${theme.palette.grey[300]}`,\n+      height: '100%',\n+    },\n+    requestRow: {\n+      padding: '10px',\n+      lineHeight: '24px',\n+      display: 'grid',\n+      width: '100%',\n+      gridTemplateColumns: '50px 1fr',\n+      cursor: 'pointer',\n+\n+      '&:hover': {\n+        backgroundColor: theme.palette.grey[700],\n+      },\n+    },\n+    requestMethod: {\n+      paddingLeft: '5px',\n+      color: theme.palette.white[50],\n+      width: '100%',\n+      height: '100%',\n+      fontWeight: 600,\n+      display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'flex-start',\n+      fontSize: '10px',\n+    },\n+    requestMethodText: {\n+      width: '100%',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+    },\n+    requestPath: {\n+      width: `${LEFT_PANEL_WIDTH / 1.5}px`,\n+      wordWrap: 'break-word',\n+      textAlign: 'left',\n+      textTransform: 'lowercase',\n+      fontSize: '10px',\n+      lineHeight: '1.3',\n+    },\n+    getMethod: {\n+      color: theme.palette.green[50],\n+    },\n+    postMethod: {\n+      color: theme.palette.orange[50],\n+    },\n+    putMethod: {\n+      color: theme.palette.yellow[50],\n+    },\n+    deleteMethod: {\n+      color: theme.palette.red[50],\n+    },\n+  };\n+};\n+\n+enum RequestMethod {\n+  GET = 'GET',\n+  POST = 'POST',\n+  PUT = 'PUT',\n+  DELETE = 'DELETE',\n+}\n+\n+interface IRequestHistory {\n+  method: RequestMethod;\n+  path: string;\n+  body: string;\n+  headers: {\n+    pairs: [\n+      {\n+        key: string;\n+        value: string;\n+        uniqueId: string;\n+      }\n+    ];\n+  };\n+  response: string;\n+  statusCode: number;\n+}\n+\n+interface IRequestHistoryTabProps extends WithStyles<typeof styles> {\n+  incomingRequest: boolean;\n+  onRequestClick: (request: IRequestHistory) => void;\n+  resetIncomingRequest: () => void;\n+}\n+\n+const mapStateToProps = (state) => {\n+  return {\n+    incomingRequest: state.http.incomingRequest,\n+  };\n+};\n+\n+const mapDispatch = (dispatch) => {\n+  return {\n+    onRequestClick: (request: IRequestHistory) => {\n+      dispatch({\n+        type: HttpExecutorActions.setRequestHistoryView,\n+        payload: request,\n+      });\n+    },\n+    resetIncomingRequest: () => {\n+      dispatch({\n+        type: HttpExecutorActions.notifyIncomingRequest,\n+        payload: {\n+          incomingRequest: false,\n+        },\n+      });\n+    },\n+  };\n+};\n+\n+const RequestHistoryTabView: React.FC<IRequestHistoryTabProps> = ({\n+  classes,\n+  incomingRequest,\n+  onRequestClick,\n+  resetIncomingRequest,\n+}) => {\n+  const [requestLog, setRequestLog] = React.useState(List<IRequestHistory>([]));\n+\n+  // Query through localstorage and popluate RequestHistoryTab", "originalCommit": "a7dcdeca216534f365fe36c053b1154ef575d18c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzMDk2Nw==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r456130967", "bodyText": "Since there's already a Redux store, these useEffect hooks should be unnecessary.\nThe saving of the request to the localStorage can be done in the ActionCreator. The state of the history should also be from the store.", "author": "elfenheart", "createdAt": "2020-07-16T23:20:56Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import { LEFT_PANEL_WIDTH } from 'components/HttpExecutor';\n+import HttpExecutorActions from 'components/HttpExecutor/store/HttpExecutorActions';\n+import HttpExecutorStore from 'components/HttpExecutor/store/HttpExecutorStore';\n+import { List } from 'immutable';\n+import * as React from 'react';\n+import { connect } from 'react-redux';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      borderRight: `1px solid ${theme.palette.grey[300]}`,\n+      height: '100%',\n+    },\n+    requestRow: {\n+      padding: '10px',\n+      lineHeight: '24px',\n+      display: 'grid',\n+      width: '100%',\n+      gridTemplateColumns: '50px 1fr',\n+      cursor: 'pointer',\n+\n+      '&:hover': {\n+        backgroundColor: theme.palette.grey[700],\n+      },\n+    },\n+    requestMethod: {\n+      paddingLeft: '5px',\n+      color: theme.palette.white[50],\n+      width: '100%',\n+      height: '100%',\n+      fontWeight: 600,\n+      display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'flex-start',\n+      fontSize: '10px',\n+    },\n+    requestMethodText: {\n+      width: '100%',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+    },\n+    requestPath: {\n+      width: `${LEFT_PANEL_WIDTH / 1.5}px`,\n+      wordWrap: 'break-word',\n+      textAlign: 'left',\n+      textTransform: 'lowercase',\n+      fontSize: '10px',\n+      lineHeight: '1.3',\n+    },\n+    getMethod: {\n+      color: theme.palette.green[50],\n+    },\n+    postMethod: {\n+      color: theme.palette.orange[50],\n+    },\n+    putMethod: {\n+      color: theme.palette.yellow[50],\n+    },\n+    deleteMethod: {\n+      color: theme.palette.red[50],\n+    },\n+  };\n+};\n+\n+enum RequestMethod {\n+  GET = 'GET',\n+  POST = 'POST',\n+  PUT = 'PUT',\n+  DELETE = 'DELETE',\n+}\n+\n+interface IRequestHistory {\n+  method: RequestMethod;\n+  path: string;\n+  body: string;\n+  headers: {\n+    pairs: [\n+      {\n+        key: string;\n+        value: string;\n+        uniqueId: string;\n+      }\n+    ];\n+  };\n+  response: string;\n+  statusCode: number;\n+}\n+\n+interface IRequestHistoryTabProps extends WithStyles<typeof styles> {\n+  incomingRequest: boolean;\n+  onRequestClick: (request: IRequestHistory) => void;\n+  resetIncomingRequest: () => void;\n+}\n+\n+const mapStateToProps = (state) => {\n+  return {\n+    incomingRequest: state.http.incomingRequest,\n+  };\n+};\n+\n+const mapDispatch = (dispatch) => {\n+  return {\n+    onRequestClick: (request: IRequestHistory) => {\n+      dispatch({\n+        type: HttpExecutorActions.setRequestHistoryView,\n+        payload: request,\n+      });\n+    },\n+    resetIncomingRequest: () => {\n+      dispatch({\n+        type: HttpExecutorActions.notifyIncomingRequest,\n+        payload: {\n+          incomingRequest: false,\n+        },\n+      });\n+    },\n+  };\n+};\n+\n+const RequestHistoryTabView: React.FC<IRequestHistoryTabProps> = ({\n+  classes,\n+  incomingRequest,\n+  onRequestClick,\n+  resetIncomingRequest,\n+}) => {\n+  const [requestLog, setRequestLog] = React.useState(List<IRequestHistory>([]));\n+\n+  // Query through localstorage and popluate RequestHistoryTab\n+  React.useEffect(() => {\n+    let newRequestLog = List<IRequestHistory>([]);\n+    Object.keys(localStorage).forEach((key) => {\n+      if (key.startsWith('RequestHistory')) {\n+        const newRequest = JSON.parse(localStorage.getItem(key));\n+        newRequestLog = newRequestLog.push(newRequest);\n+      }\n+    });\n+    setRequestLog(newRequestLog);\n+  }, []);\n+\n+  // When new request history is incoming, update RequestHistoryTab\n+  React.useEffect(() => {\n+    if (!incomingRequest) {\n+      return;\n+    }\n+    const timestamp = `RequestHistory ${new Date().toLocaleString()}`;\n+    const newRequest = HttpExecutorStore.getState().http;\n+\n+    // Store new request history in local storage\n+    localStorage.setItem(timestamp, JSON.stringify(newRequest));\n+\n+    // Update the component view in real-time, since we cannot listen to local storage's change\n+    const newRequestLog = requestLog.push(newRequest);\n+    setRequestLog(newRequestLog);\n+\n+    resetIncomingRequest();\n+  }, [incomingRequest]);", "originalCommit": "a7dcdeca216534f365fe36c053b1154ef575d18c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEzMTcxOA==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r456131718", "bodyText": "I think rather than saving each request log entry as its own item in the localStorage, it's better to store all the logs into a single key. You can construct an array of the history, then stringified the entire array", "author": "elfenheart", "createdAt": "2020-07-16T23:23:20Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import { LEFT_PANEL_WIDTH } from 'components/HttpExecutor';\n+import HttpExecutorActions from 'components/HttpExecutor/store/HttpExecutorActions';\n+import HttpExecutorStore from 'components/HttpExecutor/store/HttpExecutorStore';\n+import { List } from 'immutable';\n+import * as React from 'react';\n+import { connect } from 'react-redux';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      borderRight: `1px solid ${theme.palette.grey[300]}`,\n+      height: '100%',\n+    },\n+    requestRow: {\n+      padding: '10px',\n+      lineHeight: '24px',\n+      display: 'grid',\n+      width: '100%',\n+      gridTemplateColumns: '50px 1fr',\n+      cursor: 'pointer',\n+\n+      '&:hover': {\n+        backgroundColor: theme.palette.grey[700],\n+      },\n+    },\n+    requestMethod: {\n+      paddingLeft: '5px',\n+      color: theme.palette.white[50],\n+      width: '100%',\n+      height: '100%',\n+      fontWeight: 600,\n+      display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'flex-start',\n+      fontSize: '10px',\n+    },\n+    requestMethodText: {\n+      width: '100%',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+    },\n+    requestPath: {\n+      width: `${LEFT_PANEL_WIDTH / 1.5}px`,\n+      wordWrap: 'break-word',\n+      textAlign: 'left',\n+      textTransform: 'lowercase',\n+      fontSize: '10px',\n+      lineHeight: '1.3',\n+    },\n+    getMethod: {\n+      color: theme.palette.green[50],\n+    },\n+    postMethod: {\n+      color: theme.palette.orange[50],\n+    },\n+    putMethod: {\n+      color: theme.palette.yellow[50],\n+    },\n+    deleteMethod: {\n+      color: theme.palette.red[50],\n+    },\n+  };\n+};\n+\n+enum RequestMethod {\n+  GET = 'GET',\n+  POST = 'POST',\n+  PUT = 'PUT',\n+  DELETE = 'DELETE',\n+}\n+\n+interface IRequestHistory {\n+  method: RequestMethod;\n+  path: string;\n+  body: string;\n+  headers: {\n+    pairs: [\n+      {\n+        key: string;\n+        value: string;\n+        uniqueId: string;\n+      }\n+    ];\n+  };\n+  response: string;\n+  statusCode: number;\n+}\n+\n+interface IRequestHistoryTabProps extends WithStyles<typeof styles> {\n+  incomingRequest: boolean;\n+  onRequestClick: (request: IRequestHistory) => void;\n+  resetIncomingRequest: () => void;\n+}\n+\n+const mapStateToProps = (state) => {\n+  return {\n+    incomingRequest: state.http.incomingRequest,\n+  };\n+};\n+\n+const mapDispatch = (dispatch) => {\n+  return {\n+    onRequestClick: (request: IRequestHistory) => {\n+      dispatch({\n+        type: HttpExecutorActions.setRequestHistoryView,\n+        payload: request,\n+      });\n+    },\n+    resetIncomingRequest: () => {\n+      dispatch({\n+        type: HttpExecutorActions.notifyIncomingRequest,\n+        payload: {\n+          incomingRequest: false,\n+        },\n+      });\n+    },\n+  };\n+};\n+\n+const RequestHistoryTabView: React.FC<IRequestHistoryTabProps> = ({\n+  classes,\n+  incomingRequest,\n+  onRequestClick,\n+  resetIncomingRequest,\n+}) => {\n+  const [requestLog, setRequestLog] = React.useState(List<IRequestHistory>([]));\n+\n+  // Query through localstorage and popluate RequestHistoryTab\n+  React.useEffect(() => {\n+    let newRequestLog = List<IRequestHistory>([]);\n+    Object.keys(localStorage).forEach((key) => {\n+      if (key.startsWith('RequestHistory')) {\n+        const newRequest = JSON.parse(localStorage.getItem(key));", "originalCommit": "a7dcdeca216534f365fe36c053b1154ef575d18c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMzIwMQ==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r456613201", "bodyText": "I'd use the enum here!", "author": "yukiej", "createdAt": "2020-07-17T18:41:46Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import { LEFT_PANEL_WIDTH } from 'components/HttpExecutor';\n+import HttpExecutorActions from 'components/HttpExecutor/store/HttpExecutorActions';\n+import HttpExecutorStore from 'components/HttpExecutor/store/HttpExecutorStore';\n+import { List } from 'immutable';\n+import * as React from 'react';\n+import { connect } from 'react-redux';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      borderRight: `1px solid ${theme.palette.grey[300]}`,\n+      height: '100%',\n+    },\n+    requestRow: {\n+      padding: '10px',\n+      lineHeight: '24px',\n+      display: 'grid',\n+      width: '100%',\n+      gridTemplateColumns: '50px 1fr',\n+      cursor: 'pointer',\n+\n+      '&:hover': {\n+        backgroundColor: theme.palette.grey[700],\n+      },\n+    },\n+    requestMethod: {\n+      paddingLeft: '5px',\n+      color: theme.palette.white[50],\n+      width: '100%',\n+      height: '100%',\n+      fontWeight: 600,\n+      display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'flex-start',\n+      fontSize: '10px',\n+    },\n+    requestMethodText: {\n+      width: '100%',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+    },\n+    requestPath: {\n+      width: `${LEFT_PANEL_WIDTH / 1.5}px`,\n+      wordWrap: 'break-word',\n+      textAlign: 'left',\n+      textTransform: 'lowercase',\n+      fontSize: '10px',\n+      lineHeight: '1.3',\n+    },\n+    getMethod: {\n+      color: theme.palette.green[50],\n+    },\n+    postMethod: {\n+      color: theme.palette.orange[50],\n+    },\n+    putMethod: {\n+      color: theme.palette.yellow[50],\n+    },\n+    deleteMethod: {\n+      color: theme.palette.red[50],\n+    },\n+  };\n+};\n+\n+enum RequestMethod {\n+  GET = 'GET',\n+  POST = 'POST',\n+  PUT = 'PUT',\n+  DELETE = 'DELETE',\n+}\n+\n+interface IRequestHistory {\n+  method: RequestMethod;\n+  path: string;\n+  body: string;\n+  headers: {\n+    pairs: [\n+      {\n+        key: string;\n+        value: string;\n+        uniqueId: string;\n+      }\n+    ];\n+  };\n+  response: string;\n+  statusCode: number;\n+}\n+\n+interface IRequestHistoryTabProps extends WithStyles<typeof styles> {\n+  incomingRequest: boolean;\n+  onRequestClick: (request: IRequestHistory) => void;\n+  resetIncomingRequest: () => void;\n+}\n+\n+const mapStateToProps = (state) => {\n+  return {\n+    incomingRequest: state.http.incomingRequest,\n+  };\n+};\n+\n+const mapDispatch = (dispatch) => {\n+  return {\n+    onRequestClick: (request: IRequestHistory) => {\n+      dispatch({\n+        type: HttpExecutorActions.setRequestHistoryView,\n+        payload: request,\n+      });\n+    },\n+    resetIncomingRequest: () => {\n+      dispatch({\n+        type: HttpExecutorActions.notifyIncomingRequest,\n+        payload: {\n+          incomingRequest: false,\n+        },\n+      });\n+    },\n+  };\n+};\n+\n+const RequestHistoryTabView: React.FC<IRequestHistoryTabProps> = ({\n+  classes,\n+  incomingRequest,\n+  onRequestClick,\n+  resetIncomingRequest,\n+}) => {\n+  const [requestLog, setRequestLog] = React.useState(List<IRequestHistory>([]));\n+\n+  // Query through localstorage and popluate RequestHistoryTab\n+  React.useEffect(() => {\n+    let newRequestLog = List<IRequestHistory>([]);\n+    Object.keys(localStorage).forEach((key) => {\n+      if (key.startsWith('RequestHistory')) {\n+        const newRequest = JSON.parse(localStorage.getItem(key));\n+        newRequestLog = newRequestLog.push(newRequest);\n+      }\n+    });\n+    setRequestLog(newRequestLog);\n+  }, []);\n+\n+  // When new request history is incoming, update RequestHistoryTab\n+  React.useEffect(() => {\n+    if (!incomingRequest) {\n+      return;\n+    }\n+    const timestamp = `RequestHistory ${new Date().toLocaleString()}`;\n+    const newRequest = HttpExecutorStore.getState().http;\n+\n+    // Store new request history in local storage\n+    localStorage.setItem(timestamp, JSON.stringify(newRequest));\n+\n+    // Update the component view in real-time, since we cannot listen to local storage's change\n+    const newRequestLog = requestLog.push(newRequest);\n+    setRequestLog(newRequestLog);\n+\n+    resetIncomingRequest();\n+  }, [incomingRequest]);\n+\n+  return (\n+    <div className={classes.root}>\n+      {requestLog.map((history, i) => {\n+        return (\n+          <div key={i} className={classes.requestRow} onClick={() => onRequestClick(history)}>\n+            <div\n+              className={classnames(classes.requestMethod, {\n+                [classes.getMethod]: history.method === 'GET',", "originalCommit": "a7dcdeca216534f365fe36c053b1154ef575d18c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMzI5Mg==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r456613292", "bodyText": "Do we need this comment?", "author": "yukiej", "createdAt": "2020-07-17T18:42:00Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/index.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import { LEFT_PANEL_WIDTH } from 'components/HttpExecutor';\n+import HttpExecutorActions from 'components/HttpExecutor/store/HttpExecutorActions';\n+import HttpExecutorStore from 'components/HttpExecutor/store/HttpExecutorStore';\n+import { List } from 'immutable';\n+import * as React from 'react';\n+import { connect } from 'react-redux';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      borderRight: `1px solid ${theme.palette.grey[300]}`,\n+      height: '100%',\n+    },\n+    requestRow: {\n+      padding: '10px',\n+      lineHeight: '24px',\n+      display: 'grid',\n+      width: '100%',\n+      gridTemplateColumns: '50px 1fr',\n+      cursor: 'pointer',\n+\n+      '&:hover': {\n+        backgroundColor: theme.palette.grey[700],\n+      },\n+    },\n+    requestMethod: {\n+      paddingLeft: '5px',\n+      color: theme.palette.white[50],\n+      width: '100%',\n+      height: '100%',\n+      fontWeight: 600,\n+      display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'flex-start',\n+      fontSize: '10px',\n+    },\n+    requestMethodText: {\n+      width: '100%',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+    },\n+    requestPath: {\n+      width: `${LEFT_PANEL_WIDTH / 1.5}px`,\n+      wordWrap: 'break-word',\n+      textAlign: 'left',\n+      textTransform: 'lowercase',\n+      fontSize: '10px',\n+      lineHeight: '1.3',\n+    },\n+    getMethod: {\n+      color: theme.palette.green[50],\n+    },\n+    postMethod: {\n+      color: theme.palette.orange[50],\n+    },\n+    putMethod: {\n+      color: theme.palette.yellow[50],\n+    },\n+    deleteMethod: {\n+      color: theme.palette.red[50],\n+    },\n+  };\n+};\n+\n+enum RequestMethod {\n+  GET = 'GET',\n+  POST = 'POST',\n+  PUT = 'PUT',\n+  DELETE = 'DELETE',\n+}\n+\n+interface IRequestHistory {\n+  method: RequestMethod;\n+  path: string;\n+  body: string;\n+  headers: {\n+    pairs: [\n+      {\n+        key: string;\n+        value: string;\n+        uniqueId: string;\n+      }\n+    ];\n+  };\n+  response: string;\n+  statusCode: number;\n+}\n+\n+interface IRequestHistoryTabProps extends WithStyles<typeof styles> {\n+  incomingRequest: boolean;\n+  onRequestClick: (request: IRequestHistory) => void;\n+  resetIncomingRequest: () => void;\n+}\n+\n+const mapStateToProps = (state) => {\n+  return {\n+    incomingRequest: state.http.incomingRequest,\n+  };\n+};\n+\n+const mapDispatch = (dispatch) => {\n+  return {\n+    onRequestClick: (request: IRequestHistory) => {\n+      dispatch({\n+        type: HttpExecutorActions.setRequestHistoryView,\n+        payload: request,\n+      });\n+    },\n+    resetIncomingRequest: () => {\n+      dispatch({\n+        type: HttpExecutorActions.notifyIncomingRequest,\n+        payload: {\n+          incomingRequest: false,\n+        },\n+      });\n+    },\n+  };\n+};\n+\n+const RequestHistoryTabView: React.FC<IRequestHistoryTabProps> = ({\n+  classes,\n+  incomingRequest,\n+  onRequestClick,\n+  resetIncomingRequest,\n+}) => {\n+  const [requestLog, setRequestLog] = React.useState(List<IRequestHistory>([]));\n+\n+  // Query through localstorage and popluate RequestHistoryTab\n+  React.useEffect(() => {\n+    let newRequestLog = List<IRequestHistory>([]);\n+    Object.keys(localStorage).forEach((key) => {\n+      if (key.startsWith('RequestHistory')) {\n+        const newRequest = JSON.parse(localStorage.getItem(key));\n+        newRequestLog = newRequestLog.push(newRequest);\n+      }\n+    });\n+    setRequestLog(newRequestLog);\n+  }, []);\n+\n+  // When new request history is incoming, update RequestHistoryTab\n+  React.useEffect(() => {\n+    if (!incomingRequest) {\n+      return;\n+    }\n+    const timestamp = `RequestHistory ${new Date().toLocaleString()}`;\n+    const newRequest = HttpExecutorStore.getState().http;\n+\n+    // Store new request history in local storage\n+    localStorage.setItem(timestamp, JSON.stringify(newRequest));\n+\n+    // Update the component view in real-time, since we cannot listen to local storage's change\n+    const newRequestLog = requestLog.push(newRequest);\n+    setRequestLog(newRequestLog);\n+\n+    resetIncomingRequest();\n+  }, [incomingRequest]);\n+\n+  return (\n+    <div className={classes.root}>\n+      {requestLog.map((history, i) => {\n+        return (\n+          <div key={i} className={classes.requestRow} onClick={() => onRequestClick(history)}>\n+            <div\n+              className={classnames(classes.requestMethod, {\n+                [classes.getMethod]: history.method === 'GET',\n+                [classes.postMethod]: history.method === 'POST',\n+                [classes.deleteMethod]: history.method === 'DELETE',\n+                [classes.putMethod]: history.method === 'PUT',\n+              })}\n+            >\n+              <div className={classes.requestMethodText}>{history.method}</div>\n+            </div>\n+            <div className={classes.requestPath}>{history.path}</div>\n+          </div>\n+        );\n+      })}\n+    </div>\n+  );\n+};\n+\n+const RequestHistoryTab = withStyles(styles)(\n+  connect(mapStateToProps, mapDispatch)(RequestHistoryTabView)\n+);\n+// const RequestHistoryTab = withStyles(styles)(RequestHistoryTabView);", "originalCommit": "a7dcdeca216534f365fe36c053b1154ef575d18c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMjczNA==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r456632734", "bodyText": "There are two activeTab keys here (the second is on line 97).", "author": "yukiej", "createdAt": "2020-07-17T19:25:29Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/store/HttpExecutorStore.js", "diffHunk": "@@ -84,6 +85,23 @@ const http = (state = defaultInitialState, action = defaultAction) => {\n       };\n     case HttpExecutorActions.reset:\n       return defaultInitialState;\n+    case HttpExecutorActions.setRequestHistoryView:\n+      return {\n+        ...state,\n+        method: action.payload.method,\n+        activeTab: ['GET', 'DELETE'].indexOf(action.payload.method) !== -1 ? 0 : 1,", "originalCommit": "a7dcdeca216534f365fe36c053b1154ef575d18c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTM1MQ==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r457605351", "bodyText": "nit: I don't think this is needed", "author": "elfenheart", "createdAt": "2020-07-20T18:22:18Z", "path": "cdap-ui/app/cdap/components/HttpExecutor/RequestHistoryTab/index.tsx", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+\n+import HttpExecutorActions from 'components/HttpExecutor/store/HttpExecutorActions';\n+import { List } from 'immutable';\n+import { REQUEST_HISTORY } from 'components/HttpExecutor/store/HttpExecutorStore';\n+import { RequestMethod } from 'components/HttpExecutor';\n+import classnames from 'classnames';\n+import { connect } from 'react-redux';\n+\n+export interface IRequestHistory {\n+  method: RequestMethod;\n+  path: string;\n+  body: string;\n+  headers: {\n+    pairs: [\n+      {\n+        key: string;\n+        value: string;\n+        uniqueId: string;\n+      }\n+    ];\n+  };\n+  response: string;\n+  statusCode: number;\n+}\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      borderRight: `1px solid ${theme.palette.grey[300]}`,\n+      height: '100%',\n+    },\n+    requestRow: {\n+      padding: '10px',\n+      lineHeight: '24px',\n+      display: 'grid',\n+      width: '100%',\n+      gridTemplateColumns: '50px 1fr',\n+      cursor: 'pointer',\n+\n+      '&:hover': {\n+        backgroundColor: theme.palette.grey[700],\n+      },\n+    },\n+    requestMethod: {\n+      paddingLeft: '5px',\n+      color: theme.palette.white[50],\n+      width: '100%',\n+      height: '100%',\n+      fontWeight: 600,\n+      display: 'flex',\n+      justifyContent: 'center',\n+      alignItems: 'flex-start',\n+      fontSize: '10px',\n+    },\n+    requestMethodText: {\n+      width: '100%',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+    },\n+    requestPath: {\n+      maxWidth: '80%',\n+      minWidth: '80%',\n+      wordWrap: 'break-word',\n+      textAlign: 'left',\n+      alignSelf: 'center',\n+      textTransform: 'lowercase',\n+      fontSize: '10px',\n+      display: 'inline-block',\n+      lineHeight: '1.3',\n+    },\n+    getMethod: {\n+      color: theme.palette.green[50],\n+    },\n+    postMethod: {\n+      color: theme.palette.orange[50],\n+    },\n+    putMethod: {\n+      color: theme.palette.yellow[50],\n+    },\n+    deleteMethod: {\n+      color: theme.palette.red[50],\n+    },\n+  };\n+};\n+\n+interface IRequestHistoryTabProps extends WithStyles<typeof styles> {\n+  requestLog: List<IRequestHistory>;\n+  setRequestLog: (requestLog: List<IRequestHistory>) => void;\n+  onRequestClick: (request: IRequestHistory) => void;\n+}\n+\n+const mapStateToProps = (state) => {\n+  return {\n+    requestLog: state.http.requestLog,\n+  };\n+};\n+\n+const mapDispatch = (dispatch) => {\n+  return {\n+    setRequestLog: (requestLog: List<IRequestHistory>) => {\n+      dispatch({\n+        type: HttpExecutorActions.setRequestLog,\n+        payload: {\n+          requestLog,\n+        },\n+      });\n+    },\n+    onRequestClick: (request: IRequestHistory) => {\n+      dispatch({\n+        type: HttpExecutorActions.setRequestHistoryView,\n+        payload: request,\n+      });\n+    },\n+  };\n+};\n+\n+const RequestHistoryTabView: React.FC<IRequestHistoryTabProps> = ({\n+  classes,\n+  requestLog,\n+  setRequestLog,\n+  onRequestClick,\n+}) => {\n+  // Query through localstorage to populate RequestHistoryTab\n+  React.useEffect(() => {\n+    const storedLogs = localStorage.getItem(REQUEST_HISTORY);\n+    if (storedLogs) {\n+      try {\n+        setRequestLog(List(JSON.parse(storedLogs)));\n+      } catch (e) {\n+        setRequestLog(List([]));\n+      }\n+    } else {\n+      localStorage.setItem(REQUEST_HISTORY, JSON.stringify([]));", "originalCommit": "fde992f652cacb8a08e456b99543352a5462d536", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNzI5Mw==", "url": "https://github.com/cdapio/cdap/pull/12436#discussion_r457607293", "bodyText": "This is needed for people who are visiting the site for the first time. They don't have REQUEST_HISTORY key set up in their localstorage.", "author": "jennac3", "createdAt": "2020-07-20T18:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTM1MQ=="}], "type": "inlineReview"}, {"oid": "3dc7e1e815cff8373ca6aab452d5a24d66573090", "url": "https://github.com/cdapio/cdap/commit/3dc7e1e815cff8373ca6aab452d5a24d66573090", "message": "[CDAP-17056] Enable request history storage in HttpExecutor (Request History Storage)", "committedDate": "2020-07-20T18:25:22Z", "type": "commit"}, {"oid": "3dc7e1e815cff8373ca6aab452d5a24d66573090", "url": "https://github.com/cdapio/cdap/commit/3dc7e1e815cff8373ca6aab452d5a24d66573090", "message": "[CDAP-17056] Enable request history storage in HttpExecutor (Request History Storage)", "committedDate": "2020-07-20T18:25:22Z", "type": "forcePushed"}]}