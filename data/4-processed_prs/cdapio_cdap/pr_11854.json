{"pr_number": 11854, "pr_title": "[CDAP-16224][CDAP-16225] Replicator list and draft view", "pr_createdAt": "2020-02-07T00:32:30Z", "pr_url": "https://github.com/cdapio/cdap/pull/11854", "timeline": [{"oid": "bb7b1a9cd137fa8cf25787b3b7dbf9689086b15e", "url": "https://github.com/cdapio/cdap/commit/bb7b1a9cd137fa8cf25787b3b7dbf9689086b15e", "message": "[CDAP-16224][CDAP-16225] Replicator list and draft view", "committedDate": "2020-02-07T00:31:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MTM4Ng==", "url": "https://github.com/cdapio/cdap/pull/11854#discussion_r381581386", "bodyText": "Why is DELETE in all caps?", "author": "yukiej", "createdAt": "2020-02-19T22:24:14Z", "path": "cdap-ui/app/cdap/components/Replicator/Detail/index.tsx", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import Button from '@material-ui/core/Button';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { MyReplicatorApi } from 'api/replicator';\n+import { Map, fromJS } from 'immutable';\n+import If from 'components/If';\n+import { Link, Redirect } from 'react-router-dom';\n+import moment from 'moment';\n+import Status from 'components/Status';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      padding: '25px 40px',\n+    },\n+    buttonContainer: {\n+      '& > *': {\n+        marginRight: '15px',\n+      },\n+    },\n+    config: {\n+      border: `1px solid ${theme.palette.grey[300]}`,\n+      borderRadius: '4px',\n+      '& > pre': {\n+        wordBreak: 'break-word',\n+        whiteSpace: 'pre-wrap',\n+        padding: '15px',\n+      },\n+    },\n+  };\n+};\n+\n+interface IDetailProps extends WithStyles<typeof styles> {\n+  match: {\n+    params: {\n+      replicatorId: string;\n+    };\n+  };\n+}\n+\n+const DetailView: React.FC<IDetailProps> = ({ classes, match }) => {\n+  const [replicator, setReplicator] = React.useState(Map());\n+  const [error, setError] = React.useState();\n+  const [status, setStatus] = React.useState();\n+  const [redirect, setRedirect] = React.useState(false);\n+\n+  function getBaseParams() {\n+    return {\n+      namespace: getCurrentNamespace(),\n+      appName: match.params.replicatorId,\n+    };\n+  }\n+\n+  React.useEffect(() => {\n+    MyReplicatorApi.getReplicator(getBaseParams()).subscribe((app) => {\n+      let config;\n+\n+      try {\n+        config = JSON.parse(app.configuration);\n+      } catch (e) {\n+        setError(e);\n+      }\n+\n+      setReplicator(fromJS(config));\n+    });\n+\n+    MyReplicatorApi.pollStatus(getBaseParams()).subscribe((res) => {\n+      setStatus(res.status);\n+    });\n+  }, []);\n+\n+  function start() {\n+    const params = {\n+      ...getBaseParams(),\n+      action: 'start',\n+    };\n+\n+    MyReplicatorApi.action(params).subscribe(fetchStatus, (err) => {\n+      setError(err);\n+    });\n+  }\n+\n+  function stop() {\n+    const params = {\n+      ...getBaseParams(),\n+      action: 'stop',\n+    };\n+\n+    MyReplicatorApi.action(params).subscribe(fetchStatus, (err) => {\n+      setError(err);\n+    });\n+  }\n+\n+  function deleteReplicator() {\n+    MyReplicatorApi.delete(getBaseParams()).subscribe(\n+      () => {\n+        setRedirect(true);\n+      },\n+      (err) => {\n+        setError(err);\n+      }\n+    );\n+  }\n+\n+  function fetchStatus() {\n+    MyReplicatorApi.getStatus(getBaseParams()).subscribe((res) => {\n+      setStatus(res.status);\n+    });\n+  }\n+\n+  const listViewLink = `/ns/${getCurrentNamespace()}/replicator`;\n+\n+  if (redirect) {\n+    return <Redirect to={listViewLink} />;\n+  }\n+\n+  const startTime = moment()\n+    .subtract(7, 'days')\n+    .format('X');\n+  let logUrl = `/v3/namespaces/${getCurrentNamespace()}/apps/${\n+    match.params.replicatorId\n+  }/workers/DeltaWorker/logs`;\n+\n+  logUrl = `${logUrl}?start=${startTime}`;\n+  logUrl = `/downloadLogs?type=raw&backendPath=${encodeURIComponent(logUrl)}`;\n+\n+  return (\n+    <div className={classes.root}>\n+      <div>\n+        <Link to={listViewLink}>Back to List View</Link>\n+      </div>\n+      <h2>{match.params.replicatorId}</h2>\n+      <br />\n+\n+      <If condition={error}>\n+        <div className=\"text-danger\">\n+          <strong>{JSON.stringify(error, null, 2)}</strong>\n+          <br />\n+        </div>\n+      </If>\n+      <div>\n+        <Status status={status} />\n+      </div>\n+      <br />\n+      <div className={classes.buttonContainer}>\n+        <Button variant=\"contained\" color=\"primary\" onClick={start} disabled={status === 'RUNNING'}>\n+          Start\n+        </Button>\n+\n+        <Button variant=\"outlined\" onClick={stop} disabled={status === 'STOPPED'}>\n+          Stop\n+        </Button>\n+\n+        <Button variant=\"outlined\" color=\"primary\" href={logUrl} target=\"_tab\">\n+          Logs\n+        </Button>\n+\n+        <Button variant=\"contained\" color=\"secondary\" onClick={deleteReplicator}>\n+          DELETE", "originalCommit": "bb7b1a9cd137fa8cf25787b3b7dbf9689086b15e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MTA3NQ==", "url": "https://github.com/cdapio/cdap/pull/11854#discussion_r384871075", "bodyText": "this detail view is a temporary placeholder", "author": "elfenheart", "createdAt": "2020-02-27T01:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MTM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MjM1Mw==", "url": "https://github.com/cdapio/cdap/pull/11854#discussion_r381582353", "bodyText": "i18n for this text (and button text as well)?", "author": "yukiej", "createdAt": "2020-02-19T22:26:27Z", "path": "cdap-ui/app/cdap/components/Replicator/Detail/index.tsx", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import Button from '@material-ui/core/Button';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { MyReplicatorApi } from 'api/replicator';\n+import { Map, fromJS } from 'immutable';\n+import If from 'components/If';\n+import { Link, Redirect } from 'react-router-dom';\n+import moment from 'moment';\n+import Status from 'components/Status';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      padding: '25px 40px',\n+    },\n+    buttonContainer: {\n+      '& > *': {\n+        marginRight: '15px',\n+      },\n+    },\n+    config: {\n+      border: `1px solid ${theme.palette.grey[300]}`,\n+      borderRadius: '4px',\n+      '& > pre': {\n+        wordBreak: 'break-word',\n+        whiteSpace: 'pre-wrap',\n+        padding: '15px',\n+      },\n+    },\n+  };\n+};\n+\n+interface IDetailProps extends WithStyles<typeof styles> {\n+  match: {\n+    params: {\n+      replicatorId: string;\n+    };\n+  };\n+}\n+\n+const DetailView: React.FC<IDetailProps> = ({ classes, match }) => {\n+  const [replicator, setReplicator] = React.useState(Map());\n+  const [error, setError] = React.useState();\n+  const [status, setStatus] = React.useState();\n+  const [redirect, setRedirect] = React.useState(false);\n+\n+  function getBaseParams() {\n+    return {\n+      namespace: getCurrentNamespace(),\n+      appName: match.params.replicatorId,\n+    };\n+  }\n+\n+  React.useEffect(() => {\n+    MyReplicatorApi.getReplicator(getBaseParams()).subscribe((app) => {\n+      let config;\n+\n+      try {\n+        config = JSON.parse(app.configuration);\n+      } catch (e) {\n+        setError(e);\n+      }\n+\n+      setReplicator(fromJS(config));\n+    });\n+\n+    MyReplicatorApi.pollStatus(getBaseParams()).subscribe((res) => {\n+      setStatus(res.status);\n+    });\n+  }, []);\n+\n+  function start() {\n+    const params = {\n+      ...getBaseParams(),\n+      action: 'start',\n+    };\n+\n+    MyReplicatorApi.action(params).subscribe(fetchStatus, (err) => {\n+      setError(err);\n+    });\n+  }\n+\n+  function stop() {\n+    const params = {\n+      ...getBaseParams(),\n+      action: 'stop',\n+    };\n+\n+    MyReplicatorApi.action(params).subscribe(fetchStatus, (err) => {\n+      setError(err);\n+    });\n+  }\n+\n+  function deleteReplicator() {\n+    MyReplicatorApi.delete(getBaseParams()).subscribe(\n+      () => {\n+        setRedirect(true);\n+      },\n+      (err) => {\n+        setError(err);\n+      }\n+    );\n+  }\n+\n+  function fetchStatus() {\n+    MyReplicatorApi.getStatus(getBaseParams()).subscribe((res) => {\n+      setStatus(res.status);\n+    });\n+  }\n+\n+  const listViewLink = `/ns/${getCurrentNamespace()}/replicator`;\n+\n+  if (redirect) {\n+    return <Redirect to={listViewLink} />;\n+  }\n+\n+  const startTime = moment()\n+    .subtract(7, 'days')\n+    .format('X');\n+  let logUrl = `/v3/namespaces/${getCurrentNamespace()}/apps/${\n+    match.params.replicatorId\n+  }/workers/DeltaWorker/logs`;\n+\n+  logUrl = `${logUrl}?start=${startTime}`;\n+  logUrl = `/downloadLogs?type=raw&backendPath=${encodeURIComponent(logUrl)}`;\n+\n+  return (\n+    <div className={classes.root}>\n+      <div>\n+        <Link to={listViewLink}>Back to List View</Link>", "originalCommit": "bb7b1a9cd137fa8cf25787b3b7dbf9689086b15e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MTIwNQ==", "url": "https://github.com/cdapio/cdap/pull/11854#discussion_r384871205", "bodyText": "detail view in this PR is just a placeholder so that people can start/stop/delete the replicator", "author": "elfenheart", "createdAt": "2020-02-27T01:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MjM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3Nzk1Nw==", "url": "https://github.com/cdapio/cdap/pull/11854#discussion_r385277957", "bodyText": "add space before and after the \"/\"? (like in the draft view)", "author": "yukiej", "createdAt": "2020-02-27T18:02:01Z", "path": "cdap-ui/app/cdap/components/Replicator/List/Deployed/index.tsx", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { MyReplicatorApi } from 'api/replicator';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { PluginType } from 'components/Replicator/constants';\n+import { objectQuery } from 'services/helpers';\n+import Status from 'components/Status';\n+import { Link } from 'react-router-dom';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      height: '100%',\n+    },\n+    headerText: {\n+      marginBottom: '10px',\n+    },\n+    row: {\n+      color: theme.palette.grey[50],\n+      '&:hover': {\n+        color: 'inherit',\n+      },\n+    },\n+    gridWrapper: {\n+      // 100% - headerText\n+      height: 'calc(100% - 20px)',\n+      '& .grid.grid-container.grid-compact': {\n+        maxHeight: '100%',\n+      },\n+    },\n+  };\n+};\n+\n+const DeployedView: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n+  const [replicators, setReplicators] = React.useState([]);\n+  const [statusMap, setStatusMap] = React.useState({});\n+  const [configMap, setConfigMap] = React.useState({});\n+\n+  // TODO: Replace with GraphQL\n+  React.useEffect(() => {\n+    const params = {\n+      namespace: getCurrentNamespace(),\n+    };\n+\n+    MyReplicatorApi.list(params).subscribe((list) => {\n+      setReplicators(list);\n+\n+      // Batch status\n+      const batchStatusBody = list.map((replicator) => {\n+        return {\n+          appId: replicator.name,\n+          programType: 'worker',\n+          programId: 'DeltaWorker',\n+        };\n+      });\n+\n+      MyReplicatorApi.batchStatus(params, batchStatusBody).subscribe((status) => {\n+        const map = {};\n+\n+        status.forEach((replicator) => {\n+          map[replicator.appId] = replicator.status;\n+        });\n+\n+        setStatusMap(map);\n+      });\n+\n+      const batchDetailBody = list.map((replicator) => {\n+        return {\n+          appId: replicator.name,\n+        };\n+      });\n+\n+      MyReplicatorApi.batchAppDetail(params, batchDetailBody).subscribe((apps) => {\n+        const map = {};\n+\n+        apps.forEach((app) => {\n+          if (!app.detail) {\n+            return;\n+          }\n+          const replicator = app.detail;\n+\n+          let config;\n+          try {\n+            config = JSON.parse(replicator.configuration);\n+          } catch (e) {\n+            // tslint:disable-next-line: no-console\n+            console.log('Failed to parse replicator configuration', e);\n+            return;\n+          }\n+\n+          const replicatorObj = {};\n+          config.stages.forEach((stage) => {\n+            replicatorObj[stage.plugin.type] = stage.plugin.name;\n+          });\n+\n+          map[replicator.name] = replicatorObj;\n+        });\n+\n+        setConfigMap(map);\n+      });\n+    });\n+  }, []);\n+\n+  return (\n+    <div className={classes.root}>\n+      <div className={classes.headerText}>\n+        {replicators.length} Delta {replicators.length === 1 ? 'replicator' : 'replicator'} - Select\n+        a row to view details\n+      </div>\n+\n+      <div className={`grid-wrapper ${classes.gridWrapper}`}>\n+        <div className=\"grid grid-container grid-compact\">\n+          <div className=\"grid-header\">\n+            <div className=\"grid-row\">\n+              <div>Replicator name</div>\n+              <div>From/To</div>", "originalCommit": "bb7b1a9cd137fa8cf25787b3b7dbf9689086b15e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4MTA1MQ==", "url": "https://github.com/cdapio/cdap/pull/11854#discussion_r385281051", "bodyText": "missing \"s\" on the second option (should be \"replicators\")", "author": "yukiej", "createdAt": "2020-02-27T18:08:16Z", "path": "cdap-ui/app/cdap/components/Replicator/List/Deployed/index.tsx", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { MyReplicatorApi } from 'api/replicator';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+import { PluginType } from 'components/Replicator/constants';\n+import { objectQuery } from 'services/helpers';\n+import Status from 'components/Status';\n+import { Link } from 'react-router-dom';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      height: '100%',\n+    },\n+    headerText: {\n+      marginBottom: '10px',\n+    },\n+    row: {\n+      color: theme.palette.grey[50],\n+      '&:hover': {\n+        color: 'inherit',\n+      },\n+    },\n+    gridWrapper: {\n+      // 100% - headerText\n+      height: 'calc(100% - 20px)',\n+      '& .grid.grid-container.grid-compact': {\n+        maxHeight: '100%',\n+      },\n+    },\n+  };\n+};\n+\n+const DeployedView: React.FC<WithStyles<typeof styles>> = ({ classes }) => {\n+  const [replicators, setReplicators] = React.useState([]);\n+  const [statusMap, setStatusMap] = React.useState({});\n+  const [configMap, setConfigMap] = React.useState({});\n+\n+  // TODO: Replace with GraphQL\n+  React.useEffect(() => {\n+    const params = {\n+      namespace: getCurrentNamespace(),\n+    };\n+\n+    MyReplicatorApi.list(params).subscribe((list) => {\n+      setReplicators(list);\n+\n+      // Batch status\n+      const batchStatusBody = list.map((replicator) => {\n+        return {\n+          appId: replicator.name,\n+          programType: 'worker',\n+          programId: 'DeltaWorker',\n+        };\n+      });\n+\n+      MyReplicatorApi.batchStatus(params, batchStatusBody).subscribe((status) => {\n+        const map = {};\n+\n+        status.forEach((replicator) => {\n+          map[replicator.appId] = replicator.status;\n+        });\n+\n+        setStatusMap(map);\n+      });\n+\n+      const batchDetailBody = list.map((replicator) => {\n+        return {\n+          appId: replicator.name,\n+        };\n+      });\n+\n+      MyReplicatorApi.batchAppDetail(params, batchDetailBody).subscribe((apps) => {\n+        const map = {};\n+\n+        apps.forEach((app) => {\n+          if (!app.detail) {\n+            return;\n+          }\n+          const replicator = app.detail;\n+\n+          let config;\n+          try {\n+            config = JSON.parse(replicator.configuration);\n+          } catch (e) {\n+            // tslint:disable-next-line: no-console\n+            console.log('Failed to parse replicator configuration', e);\n+            return;\n+          }\n+\n+          const replicatorObj = {};\n+          config.stages.forEach((stage) => {\n+            replicatorObj[stage.plugin.type] = stage.plugin.name;\n+          });\n+\n+          map[replicator.name] = replicatorObj;\n+        });\n+\n+        setConfigMap(map);\n+      });\n+    });\n+  }, []);\n+\n+  return (\n+    <div className={classes.root}>\n+      <div className={classes.headerText}>\n+        {replicators.length} Delta {replicators.length === 1 ? 'replicator' : 'replicator'} - Select", "originalCommit": "bb7b1a9cd137fa8cf25787b3b7dbf9689086b15e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a3f6779334483d3d5feef7eb7569bee6459b506", "url": "https://github.com/cdapio/cdap/commit/7a3f6779334483d3d5feef7eb7569bee6459b506", "message": "addressing comments", "committedDate": "2020-02-28T21:10:20Z", "type": "commit"}]}