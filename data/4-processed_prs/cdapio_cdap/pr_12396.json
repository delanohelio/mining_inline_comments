{"pr_number": 12396, "pr_title": "[CDAP-16980] Add LogViewer Renderer", "pr_createdAt": "2020-06-23T00:45:39Z", "pr_url": "https://github.com/cdapio/cdap/pull/12396", "timeline": [{"oid": "d43a6e1316e2e45dddbe27dd0703e6ec5cc87940", "url": "https://github.com/cdapio/cdap/commit/d43a6e1316e2e45dddbe27dd0703e6ec5cc87940", "message": "[CDAP-16980] Add LogViewer Renderer", "committedDate": "2020-06-26T05:48:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwOTc0OA==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446209748", "bodyText": "I am curious, would this !!dataFetcher be different from doing dataFetcher?", "author": "jennac3", "createdAt": "2020-06-26T14:13:10Z", "path": "cdap-ui/app/cdap/components/LogViewer/Playground.tsx", "diffHunk": "@@ -124,45 +99,9 @@ const LogViewerPlayground: React.FC<WithStyles<typeof styles>> = ({ classes }) =\n       <br />\n \n       <div className={classes.logs}>\n-        <div>\n-          <Button variant=\"contained\" color=\"primary\" onClick={previous}>\n-            Previous\n-          </Button>\n-        </div>\n-\n-        <div>\n-          <pre>\n-            {logs.map((logItem, i) => {\n-              return (\n-                <div key={`${logItem.offset}-${i}`}>\n-                  <span>{logItem.log.timestamp}</span>\n-                  <span>{` | `}</span>\n-                  <span>{logItem.log.message}</span>\n-                </div>\n-              );\n-            })}\n-          </pre>\n-        </div>\n-\n-        <div>\n-          <Button variant=\"contained\" color=\"primary\" onClick={next}>\n-            Next\n-          </Button>\n-        </div>\n-      </div>\n-\n-      <div className={classes.floatingButton}>\n-        <div>\n-          <Button variant=\"contained\" color=\"primary\" onClick={getFirst}>\n-            Beginning\n-          </Button>\n-        </div>\n-        <br />\n-        <div>\n-          <Button variant=\"contained\" color=\"primary\" onClick={getLast}>\n-            Last\n-          </Button>\n-        </div>\n+        <If condition={!!dataFetcher}>", "originalCommit": "d43a6e1316e2e45dddbe27dd0703e6ec5cc87940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMTU5OA==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446321598", "bodyText": "Yeah, especially with typescript type checking. dataFetcher is an instance of a class, while !!dataFetcher is a boolean checking for existance", "author": "elfenheart", "createdAt": "2020-06-26T17:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwOTc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxMDMzMQ==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446210331", "bodyText": "I think we could name this into something more related to the log viewer like pipelineInfo, as we set it previously?", "author": "jennac3", "createdAt": "2020-06-26T14:14:16Z", "path": "cdap-ui/app/cdap/components/LogViewer/Playground.tsx", "diffHunk": "@@ -64,51 +67,23 @@ const LogViewerPlayground: React.FC<WithStyles<typeof styles>> = ({ classes }) =\n       });\n \n       setDataFetcher(dataFetch);\n-\n-      dataFetch.init().subscribe((logRes) => {\n-        setLogs(logRes);\n-      });\n-    });\n-  }\n-\n-  function previous() {\n-    dataFetcher.getPrev().subscribe((res) => {\n-      const newLogs = res.concat(logs);\n-      setLogs(newLogs);\n-    });\n-  }\n-\n-  function next() {\n-    dataFetcher.getNext().subscribe((res) => {\n-      const newLogs = logs.concat(res);\n-      setLogs(newLogs);\n-    });\n-  }\n-\n-  function getLast() {\n-    dataFetcher.getLast().subscribe((res) => {\n-      setLogs(res);\n-    });\n-  }\n-\n-  function getFirst() {\n-    dataFetcher.getFirst().subscribe((res) => {\n-      setLogs(res);\n     });\n   }\n \n   return (\n-    <div className={classes.root}>\n+    <div>\n       <h1>Log Viewer</h1>\n \n-      <div className={classes.pipelineInfo}>\n+      <div className={classes.padding}>", "originalCommit": "d43a6e1316e2e45dddbe27dd0703e6ec5cc87940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMjIxOQ==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446322219", "bodyText": "This component will get deleted in subsequent PR. The playground is only there before the integration with real program that actually produces logs", "author": "elfenheart", "createdAt": "2020-06-26T17:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxMDMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5ODM1OQ==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446298359", "bodyText": "Instead of passing this as a flag can it the filter be passed as another parameter?", "author": "ajainarayanan", "createdAt": "2020-06-26T16:51:22Z", "path": "cdap-ui/app/cdap/components/LogViewer/DataFetcher/ProgramDataFetcher.ts", "diffHunk": "@@ -28,19 +32,27 @@ class ProgramDataFetcher implements DataFetcher {\n \n   private firstLog;\n   private lastLog;\n+  private logFilter;\n+  private includeSystemLogs = false;\n \n-  private logLevel = LogLevel.DEBUG;\n+  private logLevel = LogLevel.INFO;\n \n-  constructor(programObj: IProgram) {\n+  constructor(programObj: IProgram, isPipeline = true) {", "originalCommit": "d43a6e1316e2e45dddbe27dd0703e6ec5cc87940", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNDYxOQ==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446304619", "bodyText": "nit: We should start surfacing the errors if the API to fetch logs fails.. We generally log in console and to debug later but lets surface this up so that its self serving if the user doesn't see any logs.", "author": "ajainarayanan", "createdAt": "2020-06-26T17:03:55Z", "path": "cdap-ui/app/cdap/components/LogViewer/index.tsx", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { ILogResponse, LogLevel as LogLevelEnum } from 'components/LogViewer/types';\n+import DataFetcher from 'components/LogViewer/DataFetcher';\n+import LogRow from 'components/LogViewer/LogRow';\n+import debounce from 'lodash/debounce';\n+import TopPanel, { TOP_PANEL_HEIGHT } from 'components/LogViewer/TopPanel';\n+import LogLevel from 'components/LogViewer/LogLevel';\n+\n+export function logsTableGridStyle(theme): StyleRules {\n+  return {\n+    row: {\n+      display: 'grid',\n+      gridTemplateColumns: '170px 80px 1fr',\n+      borderBottom: `1px solid ${theme.palette.grey[300]}`,\n+      lineHeight: '30px',\n+      fontSize: '14px',\n+    },\n+    cell: {\n+      paddingLeft: '10px',\n+      paddingRight: '10px',\n+    },\n+  };\n+}\n+\n+const GRID_HEADER_HEIGHT = '40px';\n+\n+const styles = (theme): StyleRules => {\n+  const tableStyles = logsTableGridStyle(theme);\n+  return {\n+    root: {\n+      height: '100%',\n+    },\n+    logsTableHeader: tableStyles.row,\n+    cell: {\n+      ...tableStyles.cell,\n+      fontWeight: 'bold',\n+      lineHeight: GRID_HEADER_HEIGHT,\n+    },\n+    logsContainer: {\n+      height: `calc(100% - ${TOP_PANEL_HEIGHT} - ${GRID_HEADER_HEIGHT})`,\n+      overflowY: 'auto',\n+      borderBottom: `1px solid ${theme.palette.grey[200]}`,\n+    },\n+    indicator: {\n+      height: '1px',\n+      content: '',\n+    },\n+  };\n+};\n+\n+interface ILogViewerProps extends WithStyles<typeof styles> {\n+  dataFetcher: DataFetcher;\n+}\n+\n+interface ILogViewerState {\n+  logs: ILogResponse[];\n+  isFetching: boolean;\n+  isPolling: boolean;\n+}\n+\n+const MAX_LOG_ROWS = 100;\n+const SCROLL_BUFFER = 10;\n+\n+class LogViewerView extends React.PureComponent<ILogViewerProps, ILogViewerState> {\n+  private bottomIndicator;\n+  private io;\n+  private logsContainer;\n+  private pollTimeout;\n+  private scrollPosition = 0;\n+  private topIndicator;\n+\n+  public constructor(props) {\n+    super(props);\n+    this.logsContainer = React.createRef();\n+    this.topIndicator = React.createRef();\n+    this.bottomIndicator = React.createRef();\n+  }\n+\n+  public state = {\n+    logs: [],\n+    isFetching: true,\n+    isPolling: true,\n+  };\n+\n+  public componentDidMount() {\n+    this.init();\n+  }\n+\n+  private init() {\n+    this.props.dataFetcher.init().subscribe(this.processFirstResponse);\n+  }\n+\n+  private processFirstResponse = (response) => {\n+    this.setState(\n+      {\n+        logs: response,\n+      },\n+      () => {\n+        if (!this.state.isPolling) {\n+          return;\n+        }\n+\n+        this.scrollToBottom();\n+        this.watchScroll();\n+        this.setIntersectionObserver();\n+\n+        this.setState({ isFetching: false });\n+        this.pollTimeout = setTimeout(this.startPoll, 5000);\n+      }\n+    );\n+  };\n+\n+  private setIntersectionObserver = () => {\n+    const options = {\n+      root: this.logsContainer.current,\n+      rootMargin: '10px',\n+      threshold: 1.0,\n+    };\n+\n+    this.io = new IntersectionObserver((entries) => {\n+      entries.forEach((entry) => {\n+        if (!entry.isIntersecting || entry.intersectionRatio !== 1) {\n+          return;\n+        }\n+\n+        if (entry.target === this.bottomIndicator.current) {\n+          this.fetchNext();\n+        } else if (entry.target === this.topIndicator.current) {\n+          this.fetchPrev();\n+        }\n+      });\n+    }, options);\n+\n+    const bottomTarget = this.bottomIndicator.current;\n+    const topTarget = this.topIndicator.current;\n+    this.io.observe(bottomTarget);\n+    this.io.observe(topTarget);\n+  };\n+\n+  private watchScrollCallback = () => {\n+    const logsContainer = this.logsContainer.current;\n+    const currentScroll = logsContainer.scrollTop;\n+\n+    if (currentScroll < this.scrollPosition - SCROLL_BUFFER) {\n+      this.stopPoll();\n+    }\n+\n+    this.scrollPosition = currentScroll;\n+  };\n+\n+  private watchScroll = () => {\n+    const logsContainer = this.logsContainer.current;\n+    logsContainer.addEventListener('scroll', this.watchScrollCallback);\n+  };\n+\n+  private stopScrollWatch = () => {\n+    const logsContainer = this.logsContainer.current;\n+    logsContainer.removeEventListener('scroll', this.watchScrollCallback);\n+  };\n+\n+  private scrollToBottom = () => {\n+    const logsContainer = this.logsContainer.current;\n+    logsContainer.scrollTop = logsContainer.scrollHeight;\n+    this.scrollPosition = logsContainer.scrollTop;\n+  };\n+\n+  private startPoll = () => {\n+    if (!this.state.isPolling) {\n+      this.setState({ isPolling: true });\n+    }\n+\n+    this.props.dataFetcher.getNext().subscribe((res) => {\n+      if (res.length > 0) {\n+        const newLogs = this.state.logs.concat(res);\n+        this.setState({ logs: newLogs });\n+      }\n+\n+      this.setState({ isFetching: false }, () => {\n+        this.scrollToBottom();\n+        this.trimTopExcessLogs();\n+\n+        this.pollTimeout = setTimeout(this.startPoll, 5000);\n+      });\n+    });\n+  };\n+\n+  private stopPoll = () => {\n+    if (this.pollTimeout) {\n+      clearTimeout(this.pollTimeout);\n+      this.pollTimeout = null;\n+    }\n+\n+    if (this.state.isPolling) {\n+      this.setState({ isPolling: false });\n+    }\n+  };\n+\n+  private fetchPrev = debounce(() => {\n+    if (this.state.isFetching || this.state.isPolling) {\n+      return;\n+    }\n+    this.setState({ isFetching: true });\n+\n+    const logsContainer = this.logsContainer.current;\n+    const currentScrollHeight = logsContainer.scrollHeight;\n+\n+    this.props.dataFetcher.getPrev().subscribe(\n+      (res) => {\n+        if (res.length > 0) {\n+          const newLogs = res.concat(this.state.logs);\n+          this.setState({ logs: newLogs });\n+        }\n+\n+        this.setState({ isFetching: false }, () => {\n+          // maintaining scroll position\n+          const updatedScrollHeight = logsContainer.scrollHeight;\n+          logsContainer.scrollTop = updatedScrollHeight - currentScrollHeight;\n+\n+          const trimmedLogs = this.state.logs.slice(0, MAX_LOG_ROWS);\n+\n+          // trim excess logs\n+          this.setState({\n+            logs: trimmedLogs,\n+          });\n+          this.props.dataFetcher.onLogsTrim(\n+            trimmedLogs[0],\n+            trimmedLogs[this.state.logs.length - 1]\n+          );\n+        });\n+      },\n+      (err) => {\n+        // tslint:disable-next-line: no-console\n+        console.log('err', err);\n+      }\n+    );\n+  }, 100);\n+\n+  private fetchNext = debounce(() => {\n+    if (this.state.isFetching || this.state.isPolling) {\n+      return;\n+    }\n+    this.setState({ isFetching: true });\n+\n+    this.props.dataFetcher.getNext().subscribe(\n+      (res) => {\n+        if (res.length > 0) {\n+          const newLogs = this.state.logs.concat(res);\n+          this.setState({ logs: newLogs });\n+        }\n+\n+        this.setState({ isFetching: false }, this.trimTopExcessLogs);\n+      },\n+      (err) => {\n+        // tslint:disable-next-line: no-console\n+        console.log('err', err);", "originalCommit": "d43a6e1316e2e45dddbe27dd0703e6ec5cc87940", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTQ5Nw==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446305497", "bodyText": "nit: Any specific reason why the setState is using a callback function instead of directly setting the state?", "author": "ajainarayanan", "createdAt": "2020-06-26T17:05:42Z", "path": "cdap-ui/app/cdap/components/LogViewer/index.tsx", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import { ILogResponse, LogLevel as LogLevelEnum } from 'components/LogViewer/types';\n+import DataFetcher from 'components/LogViewer/DataFetcher';\n+import LogRow from 'components/LogViewer/LogRow';\n+import debounce from 'lodash/debounce';\n+import TopPanel, { TOP_PANEL_HEIGHT } from 'components/LogViewer/TopPanel';\n+import LogLevel from 'components/LogViewer/LogLevel';\n+\n+export function logsTableGridStyle(theme): StyleRules {\n+  return {\n+    row: {\n+      display: 'grid',\n+      gridTemplateColumns: '170px 80px 1fr',\n+      borderBottom: `1px solid ${theme.palette.grey[300]}`,\n+      lineHeight: '30px',\n+      fontSize: '14px',\n+    },\n+    cell: {\n+      paddingLeft: '10px',\n+      paddingRight: '10px',\n+    },\n+  };\n+}\n+\n+const GRID_HEADER_HEIGHT = '40px';\n+\n+const styles = (theme): StyleRules => {\n+  const tableStyles = logsTableGridStyle(theme);\n+  return {\n+    root: {\n+      height: '100%',\n+    },\n+    logsTableHeader: tableStyles.row,\n+    cell: {\n+      ...tableStyles.cell,\n+      fontWeight: 'bold',\n+      lineHeight: GRID_HEADER_HEIGHT,\n+    },\n+    logsContainer: {\n+      height: `calc(100% - ${TOP_PANEL_HEIGHT} - ${GRID_HEADER_HEIGHT})`,\n+      overflowY: 'auto',\n+      borderBottom: `1px solid ${theme.palette.grey[200]}`,\n+    },\n+    indicator: {\n+      height: '1px',\n+      content: '',\n+    },\n+  };\n+};\n+\n+interface ILogViewerProps extends WithStyles<typeof styles> {\n+  dataFetcher: DataFetcher;\n+}\n+\n+interface ILogViewerState {\n+  logs: ILogResponse[];\n+  isFetching: boolean;\n+  isPolling: boolean;\n+}\n+\n+const MAX_LOG_ROWS = 100;\n+const SCROLL_BUFFER = 10;\n+\n+class LogViewerView extends React.PureComponent<ILogViewerProps, ILogViewerState> {\n+  private bottomIndicator;\n+  private io;\n+  private logsContainer;\n+  private pollTimeout;\n+  private scrollPosition = 0;\n+  private topIndicator;\n+\n+  public constructor(props) {\n+    super(props);\n+    this.logsContainer = React.createRef();\n+    this.topIndicator = React.createRef();\n+    this.bottomIndicator = React.createRef();\n+  }\n+\n+  public state = {\n+    logs: [],\n+    isFetching: true,\n+    isPolling: true,\n+  };\n+\n+  public componentDidMount() {\n+    this.init();\n+  }\n+\n+  private init() {\n+    this.props.dataFetcher.init().subscribe(this.processFirstResponse);\n+  }\n+\n+  private processFirstResponse = (response) => {\n+    this.setState(\n+      {\n+        logs: response,\n+      },\n+      () => {\n+        if (!this.state.isPolling) {\n+          return;\n+        }\n+\n+        this.scrollToBottom();\n+        this.watchScroll();\n+        this.setIntersectionObserver();\n+\n+        this.setState({ isFetching: false });\n+        this.pollTimeout = setTimeout(this.startPoll, 5000);\n+      }\n+    );\n+  };\n+\n+  private setIntersectionObserver = () => {\n+    const options = {\n+      root: this.logsContainer.current,\n+      rootMargin: '10px',\n+      threshold: 1.0,\n+    };\n+\n+    this.io = new IntersectionObserver((entries) => {\n+      entries.forEach((entry) => {\n+        if (!entry.isIntersecting || entry.intersectionRatio !== 1) {\n+          return;\n+        }\n+\n+        if (entry.target === this.bottomIndicator.current) {\n+          this.fetchNext();\n+        } else if (entry.target === this.topIndicator.current) {\n+          this.fetchPrev();\n+        }\n+      });\n+    }, options);\n+\n+    const bottomTarget = this.bottomIndicator.current;\n+    const topTarget = this.topIndicator.current;\n+    this.io.observe(bottomTarget);\n+    this.io.observe(topTarget);\n+  };\n+\n+  private watchScrollCallback = () => {\n+    const logsContainer = this.logsContainer.current;\n+    const currentScroll = logsContainer.scrollTop;\n+\n+    if (currentScroll < this.scrollPosition - SCROLL_BUFFER) {\n+      this.stopPoll();\n+    }\n+\n+    this.scrollPosition = currentScroll;\n+  };\n+\n+  private watchScroll = () => {\n+    const logsContainer = this.logsContainer.current;\n+    logsContainer.addEventListener('scroll', this.watchScrollCallback);\n+  };\n+\n+  private stopScrollWatch = () => {\n+    const logsContainer = this.logsContainer.current;\n+    logsContainer.removeEventListener('scroll', this.watchScrollCallback);\n+  };\n+\n+  private scrollToBottom = () => {\n+    const logsContainer = this.logsContainer.current;\n+    logsContainer.scrollTop = logsContainer.scrollHeight;\n+    this.scrollPosition = logsContainer.scrollTop;\n+  };\n+\n+  private startPoll = () => {\n+    if (!this.state.isPolling) {\n+      this.setState({ isPolling: true });\n+    }\n+\n+    this.props.dataFetcher.getNext().subscribe((res) => {\n+      if (res.length > 0) {\n+        const newLogs = this.state.logs.concat(res);\n+        this.setState({ logs: newLogs });\n+      }\n+\n+      this.setState({ isFetching: false }, () => {\n+        this.scrollToBottom();\n+        this.trimTopExcessLogs();\n+\n+        this.pollTimeout = setTimeout(this.startPoll, 5000);\n+      });\n+    });\n+  };\n+\n+  private stopPoll = () => {\n+    if (this.pollTimeout) {\n+      clearTimeout(this.pollTimeout);\n+      this.pollTimeout = null;\n+    }\n+\n+    if (this.state.isPolling) {\n+      this.setState({ isPolling: false });\n+    }\n+  };\n+\n+  private fetchPrev = debounce(() => {\n+    if (this.state.isFetching || this.state.isPolling) {\n+      return;\n+    }\n+    this.setState({ isFetching: true });\n+\n+    const logsContainer = this.logsContainer.current;\n+    const currentScrollHeight = logsContainer.scrollHeight;\n+\n+    this.props.dataFetcher.getPrev().subscribe(\n+      (res) => {\n+        if (res.length > 0) {\n+          const newLogs = res.concat(this.state.logs);\n+          this.setState({ logs: newLogs });\n+        }\n+\n+        this.setState({ isFetching: false }, () => {\n+          // maintaining scroll position\n+          const updatedScrollHeight = logsContainer.scrollHeight;\n+          logsContainer.scrollTop = updatedScrollHeight - currentScrollHeight;\n+\n+          const trimmedLogs = this.state.logs.slice(0, MAX_LOG_ROWS);\n+\n+          // trim excess logs\n+          this.setState({\n+            logs: trimmedLogs,\n+          });\n+          this.props.dataFetcher.onLogsTrim(\n+            trimmedLogs[0],\n+            trimmedLogs[this.state.logs.length - 1]\n+          );\n+        });\n+      },\n+      (err) => {\n+        // tslint:disable-next-line: no-console\n+        console.log('err', err);\n+      }\n+    );\n+  }, 100);\n+\n+  private fetchNext = debounce(() => {\n+    if (this.state.isFetching || this.state.isPolling) {\n+      return;\n+    }\n+    this.setState({ isFetching: true });\n+\n+    this.props.dataFetcher.getNext().subscribe(\n+      (res) => {\n+        if (res.length > 0) {\n+          const newLogs = this.state.logs.concat(res);\n+          this.setState({ logs: newLogs });\n+        }\n+\n+        this.setState({ isFetching: false }, this.trimTopExcessLogs);\n+      },\n+      (err) => {\n+        // tslint:disable-next-line: no-console\n+        console.log('err', err);\n+      }\n+    );\n+  }, 100);\n+\n+  // Trimming the top entries of logs will change the scroll height. This function will calculate the\n+  // delta of the scroll height to maintain the view.\n+  private trimTopExcessLogs() {\n+    const logsContainer = this.logsContainer.current;\n+    const offset = logsContainer.scrollHeight - logsContainer.scrollTop;\n+\n+    if (this.state.logs.length > MAX_LOG_ROWS) {\n+      this.setState(\n+        {\n+          logs: this.state.logs.slice(this.state.logs.length - MAX_LOG_ROWS),\n+        },\n+        () => {\n+          logsContainer.scrollTop = logsContainer.scrollHeight - offset;\n+          this.scrollPosition = logsContainer.scrollTop;\n+\n+          this.props.dataFetcher.onLogsTrim(\n+            this.state.logs[0],\n+            this.state.logs[this.state.logs.length - 1]\n+          );\n+        }\n+      );\n+    }\n+  }\n+\n+  private cleanUpWatchers = () => {\n+    this.io.disconnect();\n+    this.stopScrollWatch();\n+    this.stopPoll();\n+  };\n+\n+  private getLatestLogs = () => {\n+    this.cleanUpWatchers();\n+\n+    this.setState(\n+      () => {\n+        return {\n+          isFetching: true,\n+          isPolling: true,\n+        };\n+      },\n+      () => {\n+        this.props.dataFetcher.getLast().subscribe(this.processFirstResponse);\n+      }\n+    );\n+  };\n+\n+  private changeLogLevel = (level: LogLevelEnum) => {\n+    this.cleanUpWatchers();\n+\n+    this.setState(\n+      () => {\n+        return {", "originalCommit": "d43a6e1316e2e45dddbe27dd0703e6ec5cc87940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyOTc4NA==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446429784", "bodyText": "i was trying to fix a problem, and I thought it was because of React micro batching setState, but it was not. So this can be reverted", "author": "elfenheart", "createdAt": "2020-06-26T22:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTQ5Nw=="}], "type": "inlineReview"}, {"oid": "374d73a942fbe43599cbf606cc13229b5177bf29", "url": "https://github.com/cdapio/cdap/commit/374d73a942fbe43599cbf606cc13229b5177bf29", "message": "add error handling", "committedDate": "2020-06-27T00:14:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5ODgwMw==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r446598803", "bodyText": "Any specific reason why we are introducing a new error pattern? Can we reuse the Alert component? This way when we replace it with material alerts tomorrow we would be able identify all the usages of the errors and replace them for consistency.", "author": "ajainarayanan", "createdAt": "2020-06-28T04:31:20Z", "path": "cdap-ui/app/cdap/components/LogViewer/TopPanel.tsx", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import * as React from 'react';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import DataFetcher from 'components/LogViewer/DataFetcher';\n+import Button from '@material-ui/core/Button';\n+import FormControlLabel from '@material-ui/core/FormControlLabel';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import classnames from 'classnames';\n+import If from 'components/If';\n+import IconButton from '@material-ui/core/IconButton';\n+import Close from '@material-ui/icons/Close';\n+\n+export const TOP_PANEL_HEIGHT = '50px';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    root: {\n+      backgroundColor: theme.palette.grey[100],\n+      color: theme.palette.white[50],\n+      display: 'flex',\n+      justifyContent: 'flex-end',\n+      alignItems: 'center',\n+      height: TOP_PANEL_HEIGHT,\n+      paddingLeft: '20px',\n+      paddingRight: '20px',\n+      position: 'relative',\n+    },\n+    actionButton: {\n+      margin: theme.spacing(1),\n+\n+      '&:hover': {\n+        color: theme.palette.white[50],\n+        borderColor: theme.palette.white[50],\n+        backgroundColor: theme.palette.grey[200],\n+      },\n+\n+      '&$disabled': {\n+        // needed to beat specificity\n+        color: theme.palette.grey[50],\n+        cursor: 'not-allowed',\n+        backgroundColor: theme.palette.white[50],\n+      },\n+    },\n+    disabled: {},\n+    checkboxContainer: {\n+      margin: '0 40px',\n+      userSelect: 'none',\n+    },\n+    checkbox: {\n+      color: theme.palette.white[50],\n+    },\n+    error: {", "originalCommit": "374d73a942fbe43599cbf606cc13229b5177bf29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTE2NA==", "url": "https://github.com/cdapio/cdap/pull/12396#discussion_r451651164", "bodyText": "Might it make sense to pull this out as a constant?", "author": "yukiej", "createdAt": "2020-07-08T15:54:33Z", "path": "cdap-ui/app/cdap/components/LogViewer/DataFetcher/ProgramDataFetcher.ts", "diffHunk": "@@ -52,7 +62,7 @@ class ProgramDataFetcher implements DataFetcher {\n       programType: this.programType,\n       programId: this.programName,\n       runId: this.runId,\n-      max: 10,\n+      max: 50,", "originalCommit": "82db5ff838924398399b621909946bcdf132fac4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "032b5f010e6c3d4319b97c047194a2c23cf1dc10", "url": "https://github.com/cdapio/cdap/commit/032b5f010e6c3d4319b97c047194a2c23cf1dc10", "message": "[CDAP-16980] Add LogViewer Renderer", "committedDate": "2020-07-13T18:29:57Z", "type": "commit"}, {"oid": "032b5f010e6c3d4319b97c047194a2c23cf1dc10", "url": "https://github.com/cdapio/cdap/commit/032b5f010e6c3d4319b97c047194a2c23cf1dc10", "message": "[CDAP-16980] Add LogViewer Renderer", "committedDate": "2020-07-13T18:29:57Z", "type": "forcePushed"}]}