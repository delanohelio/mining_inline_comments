{"pr_number": 12359, "pr_title": "[CDAP-16690] Add record view when number of fields is large", "pr_createdAt": "2020-06-17T21:13:25Z", "pr_url": "https://github.com/cdapio/cdap/pull/12359", "timeline": [{"oid": "f85c58e6fa31b32a905d5df167171c51af5f4df4", "url": "https://github.com/cdapio/cdap/commit/f85c58e6fa31b32a905d5df167171c51af5f4df4", "message": "Make record table full width", "committedDate": "2020-06-17T21:41:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MDgxNQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444360815", "bodyText": "is this empty styles needed?", "author": "elfenheart", "createdAt": "2020-06-23T16:40:17Z", "path": "cdap-ui/app/cdap/components/PreviewData/DataView/Table.tsx", "diffHunk": "@@ -64,6 +70,7 @@ const styles = (theme) => ({\n     },\n   },\n   messageText: messageTextStyle,\n+  rowNumber: {},", "originalCommit": "f5b9277ce6a0c2c1f0e9eb3cff494734f7e441ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MjEwNw==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444472107", "bodyText": "Good catch! Removed", "author": "yukiej", "createdAt": "2020-06-23T19:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MDgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3Nzk1Nw==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444577957", "bodyText": "Nope! Removed", "author": "yukiej", "createdAt": "2020-06-24T00:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MDgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MTA3NQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444361075", "bodyText": "nit: <CustomTableCell />", "author": "elfenheart", "createdAt": "2020-06-23T16:40:40Z", "path": "cdap-ui/app/cdap/components/PreviewData/DataView/Table.tsx", "diffHunk": "@@ -110,6 +117,7 @@ const DataTableView: React.FC<IDataTableProps> = ({\n       <Table>\n         <TableHead>\n           <TableRow className={classes.row}>\n+            <CustomTableCell></CustomTableCell>", "originalCommit": "f5b9277ce6a0c2c1f0e9eb3cff494734f7e441ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MjQ1MQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444472451", "bodyText": "Updated", "author": "yukiej", "createdAt": "2020-06-23T19:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MTA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3Nzk4Mg==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444577982", "bodyText": "Fixed!", "author": "yukiej", "createdAt": "2020-06-24T00:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MTA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MjMwMQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444362301", "bodyText": "can this width 100% be on the actual component itself (preventing the use of named class)?", "author": "elfenheart", "createdAt": "2020-06-23T16:42:23Z", "path": "cdap-ui/app/cdap/components/PreviewData/DataView/TableContainer.tsx", "diffHunk": "@@ -43,6 +44,7 @@ const styles = (theme): StyleRules => ({\n     '& :last-of-type': {\n       borderRight: 0,\n     },\n+    '& .record-pane': { width: '100%' },", "originalCommit": "f5b9277ce6a0c2c1f0e9eb3cff494734f7e441ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3OTE3OQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444479179", "bodyText": "I don't think so - this is here because the 100% width needs to be applied to the tab-pane, and I couldn't figure out another way to style the element nested inside the tab.", "author": "yukiej", "createdAt": "2020-06-23T20:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MjMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NDQ2MA==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444364460", "bodyText": "for initialization type code, especially if it contains loops is better to be contained in a useEffect so it only executes when it needs to", "author": "elfenheart", "createdAt": "2020-06-23T16:45:54Z", "path": "cdap-ui/app/cdap/components/PreviewData/RecordView/Navigator.tsx", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import IconSVG from 'components/IconSVG';\n+import classnames from 'classnames';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import AbstractWidget from 'components/AbstractWidget';\n+\n+const styles = (theme): StyleRules => ({\n+  root: {\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    padding: '5px 10px',\n+    fontSize: '1.5rem',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+  },\n+  btnIcon: {\n+    padding: '10px',\n+  },\n+});\n+\n+interface IRecordNavigatorProps extends WithStyles<typeof styles> {\n+  selectedRecord: number;\n+  numRecords: number;\n+  updateRecord: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n+  prevOperation: () => void;\n+  nextOperation: () => void;\n+}\n+\n+const RecordNavigatorBase: React.FC<IRecordNavigatorProps> = ({\n+  classes,\n+  selectedRecord,\n+  numRecords,\n+  updateRecord,\n+  prevOperation,\n+  nextOperation,\n+}) => {\n+  const prevDisabled = selectedRecord - 1 < 1;\n+  const nextDisabled = selectedRecord + 1 > numRecords;\n+\n+  const selectOptions = [];\n+  for (let i = 1; i <= numRecords; i++) {\n+    const value = `Record ${i}`;\n+    selectOptions.push({ value, label: value });\n+  }", "originalCommit": "f5b9277ce6a0c2c1f0e9eb3cff494734f7e441ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3NzI4Nw==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444577287", "bodyText": "That is a good call. Moved to a useEffect!", "author": "yukiej", "createdAt": "2020-06-24T00:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NDQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NzU4OQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444367589", "bodyText": "can you investigate to see if perhaps using material-ui button icons would be easy to style? this would prevent additional disabled styling and onClick handling", "author": "elfenheart", "createdAt": "2020-06-23T16:51:00Z", "path": "cdap-ui/app/cdap/components/PreviewData/RecordView/Navigator.tsx", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import IconSVG from 'components/IconSVG';\n+import classnames from 'classnames';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import AbstractWidget from 'components/AbstractWidget';\n+\n+const styles = (theme): StyleRules => ({\n+  root: {\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    padding: '5px 10px',\n+    fontSize: '1.5rem',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+  },\n+  btnIcon: {\n+    padding: '10px',\n+  },\n+});\n+\n+interface IRecordNavigatorProps extends WithStyles<typeof styles> {\n+  selectedRecord: number;\n+  numRecords: number;\n+  updateRecord: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n+  prevOperation: () => void;\n+  nextOperation: () => void;\n+}\n+\n+const RecordNavigatorBase: React.FC<IRecordNavigatorProps> = ({\n+  classes,\n+  selectedRecord,\n+  numRecords,\n+  updateRecord,\n+  prevOperation,\n+  nextOperation,\n+}) => {\n+  const prevDisabled = selectedRecord - 1 < 1;\n+  const nextDisabled = selectedRecord + 1 > numRecords;\n+\n+  const selectOptions = [];\n+  for (let i = 1; i <= numRecords; i++) {\n+    const value = `Record ${i}`;\n+    selectOptions.push({ value, label: value });\n+  }\n+\n+  return (\n+    <div className={classes.root}>\n+      <span\n+        className={classnames('nav-icon', { disabled: prevDisabled })}\n+        onClick={!prevDisabled ? prevOperation : undefined}\n+      >\n+        <IconSVG name=\"icon-caret-left\" />\n+      </span>\n+      <span>\n+        <AbstractWidget\n+          value={`Record ${selectedRecord}`}\n+          type=\"select\"\n+          widgetProps={{ options: selectOptions }}\n+          onChange={(e) => updateRecord(e)}\n+        />\n+      </span>\n+      <span\n+        className={classnames('nav-icon', { disabled: nextDisabled })}\n+        onClick={!nextDisabled ? nextOperation : undefined}\n+      >\n+        <IconSVG name=\"icon-caret-right\" />\n+      </span>", "originalCommit": "f5b9277ce6a0c2c1f0e9eb3cff494734f7e441ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjExOQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r445032119", "bodyText": "Used material-ui IconButton component instead.", "author": "yukiej", "createdAt": "2020-06-24T16:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2NzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2OTYwMQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444369601", "bodyText": "edge case to test would be how overflow will be handled for the tabs (if there are a lot of inputs our outputs)", "author": "elfenheart", "createdAt": "2020-06-23T16:54:22Z", "path": "cdap-ui/app/cdap/components/PreviewData/RecordView/RecordContainer.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState } from 'react';\n+import ConfigurableTab from 'components/ConfigurableTab';\n+import { ITableData } from 'components/PreviewData';\n+import RecordNavigator from 'components/PreviewData/RecordView/Navigator';\n+import RecordTable from 'components/PreviewData/RecordView/RecordTable';\n+import { INode } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import { styles as tableStyles } from 'components/PreviewData/DataView/TableContainer';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import T from 'i18n-react';\n+import classnames from 'classnames';\n+\n+const I18N_PREFIX = 'features.PreviewData.RecordView.RecordContainer';\n+\n+const styles = (theme): StyleRules => ({\n+  ...tableStyles(theme),\n+});\n+\n+interface IRecordViewContainerProps extends WithStyles<typeof styles> {\n+  tableData: ITableData;\n+  selectedNode: INode;\n+  previewStatus?: string;\n+}\n+\n+const RecordViewBase: React.FC<IRecordViewContainerProps> = ({\n+  classes,\n+  tableData,\n+  selectedNode,\n+}) => {\n+  const [selectedRecord, setRecord] = useState(1);\n+  const [activeTab, setActiveTab] = useState(null);\n+\n+  const inputs = tableData.inputs;\n+  const outputs = tableData.outputs;\n+\n+  const numRecords = Math.max(tableData.inputFieldCount, tableData.outputFieldCount);\n+\n+  const updateRecord = (newVal: string) => {\n+    const recordNum = parseInt(newVal.split(' ')[1], 10);\n+    setRecord(recordNum);\n+  };\n+\n+  const showInputTabs = inputs.length > 1;\n+  const showOutputTabs = outputs.length > 1;\n+\n+  const handleTabClick = (id) => {\n+    setActiveTab(id);\n+  };\n+\n+  const getTabConfig = (stagesInfo, recordNum: number) => {\n+    const recordIndex = recordNum - 1;\n+    const tabs = stagesInfo.map(([stageName, recordInfo], index) => {\n+      return {\n+        id: index + 1,\n+        name: stageName,\n+        content: (\n+          <RecordTable headers={recordInfo.schemaFields} record={recordInfo.records[recordIndex]} />\n+        ),\n+        paneClassName: 'record-pane',\n+      };\n+    });\n+    return {\n+      defaultTab: 1,\n+      layout: 'horizontal',\n+      tabs,\n+    };\n+  };\n+\n+  const getTabs = (config) => {\n+    return <ConfigurableTab tabConfig={config} onTabClick={handleTabClick} activeTab={activeTab} />;\n+  };\n+\n+  return (\n+    <div>\n+      <RecordNavigator\n+        selectedRecord={selectedRecord}\n+        numRecords={numRecords}\n+        updateRecord={updateRecord}\n+        prevOperation={() => setRecord(selectedRecord - 1)}\n+        nextOperation={() => setRecord(selectedRecord + 1)}\n+      />\n+      <div className={classes.outerContainer}>\n+        <If condition={!selectedNode.isSource && !selectedNode.isCondition}>\n+          <div\n+            className={classnames(classes.innerContainer, {\n+              [classes.split]: !selectedNode.isSource && !selectedNode.isSink,\n+            })}\n+          >\n+            <h2 className={classes.h2Title}>{T.translate(`${I18N_PREFIX}.inputHeader`)}</h2>\n+            {showInputTabs\n+              ? getTabs(getTabConfig(inputs, selectedRecord))", "originalCommit": "f5b9277ce6a0c2c1f0e9eb3cff494734f7e441ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMjA2NA==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444532064", "bodyText": "Good call out! I've added styling to make sure the tabs scroll if there is overflow.", "author": "yukiej", "createdAt": "2020-06-23T21:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2OTYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3MDExNQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444370115", "bodyText": "is this empty intentional or should there be some message?", "author": "elfenheart", "createdAt": "2020-06-23T16:55:16Z", "path": "cdap-ui/app/cdap/components/PreviewData/RecordView/RecordContainer.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState } from 'react';\n+import ConfigurableTab from 'components/ConfigurableTab';\n+import { ITableData } from 'components/PreviewData';\n+import RecordNavigator from 'components/PreviewData/RecordView/Navigator';\n+import RecordTable from 'components/PreviewData/RecordView/RecordTable';\n+import { INode } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import { styles as tableStyles } from 'components/PreviewData/DataView/TableContainer';\n+import withStyles, { WithStyles, StyleRules } from '@material-ui/core/styles/withStyles';\n+import T from 'i18n-react';\n+import classnames from 'classnames';\n+\n+const I18N_PREFIX = 'features.PreviewData.RecordView.RecordContainer';\n+\n+const styles = (theme): StyleRules => ({\n+  ...tableStyles(theme),\n+});\n+\n+interface IRecordViewContainerProps extends WithStyles<typeof styles> {\n+  tableData: ITableData;\n+  selectedNode: INode;\n+  previewStatus?: string;\n+}\n+\n+const RecordViewBase: React.FC<IRecordViewContainerProps> = ({\n+  classes,\n+  tableData,\n+  selectedNode,\n+}) => {\n+  const [selectedRecord, setRecord] = useState(1);\n+  const [activeTab, setActiveTab] = useState(null);\n+\n+  const inputs = tableData.inputs;\n+  const outputs = tableData.outputs;\n+\n+  const numRecords = Math.max(tableData.inputFieldCount, tableData.outputFieldCount);\n+\n+  const updateRecord = (newVal: string) => {\n+    const recordNum = parseInt(newVal.split(' ')[1], 10);\n+    setRecord(recordNum);\n+  };\n+\n+  const showInputTabs = inputs.length > 1;\n+  const showOutputTabs = outputs.length > 1;\n+\n+  const handleTabClick = (id) => {\n+    setActiveTab(id);\n+  };\n+\n+  const getTabConfig = (stagesInfo, recordNum: number) => {\n+    const recordIndex = recordNum - 1;\n+    const tabs = stagesInfo.map(([stageName, recordInfo], index) => {\n+      return {\n+        id: index + 1,\n+        name: stageName,\n+        content: (\n+          <RecordTable headers={recordInfo.schemaFields} record={recordInfo.records[recordIndex]} />\n+        ),\n+        paneClassName: 'record-pane',\n+      };\n+    });\n+    return {\n+      defaultTab: 1,\n+      layout: 'horizontal',\n+      tabs,\n+    };\n+  };\n+\n+  const getTabs = (config) => {\n+    return <ConfigurableTab tabConfig={config} onTabClick={handleTabClick} activeTab={activeTab} />;\n+  };\n+\n+  return (\n+    <div>\n+      <RecordNavigator\n+        selectedRecord={selectedRecord}\n+        numRecords={numRecords}\n+        updateRecord={updateRecord}\n+        prevOperation={() => setRecord(selectedRecord - 1)}\n+        nextOperation={() => setRecord(selectedRecord + 1)}\n+      />\n+      <div className={classes.outerContainer}>\n+        <If condition={!selectedNode.isSource && !selectedNode.isCondition}>\n+          <div\n+            className={classnames(classes.innerContainer, {\n+              [classes.split]: !selectedNode.isSource && !selectedNode.isSink,\n+            })}\n+          >\n+            <h2 className={classes.h2Title}>{T.translate(`${I18N_PREFIX}.inputHeader`)}</h2>\n+            {showInputTabs\n+              ? getTabs(getTabConfig(inputs, selectedRecord))\n+              : inputs.map(([stageName, stageInfo]) => {\n+                  return (\n+                    <RecordTable\n+                      headers={stageInfo.schemaFields}\n+                      record={stageInfo.records[selectedRecord - 1]}\n+                    />\n+                  );\n+                })}\n+          </div>\n+        </If>\n+        <If condition={!selectedNode.isSink && !selectedNode.isCondition}>\n+          <div\n+            className={classnames(classes.innerContainer, {\n+              [classes.split]: !selectedNode.isSource && !selectedNode.isSink,\n+            })}\n+          >\n+            <h2 className={classes.h2Title}>{T.translate(`${I18N_PREFIX}.outputHeader`)}</h2>\n+            {showOutputTabs\n+              ? getTabs(getTabConfig(outputs, selectedRecord))\n+              : outputs.map(([stageName, stageInfo]) => {\n+                  return (\n+                    <RecordTable\n+                      headers={stageInfo.schemaFields}\n+                      record={stageInfo.records[selectedRecord - 1]}\n+                    />\n+                  );\n+                })}\n+          </div>\n+        </If>\n+        <If condition={!selectedNode.isSink && !selectedNode.isCondition && showOutputTabs}>\n+          <div></div>", "originalCommit": "f5b9277ce6a0c2c1f0e9eb3cff494734f7e441ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3NjkzMQ==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r444476931", "bodyText": "This shouldn't be there at all - I've removed this If component.", "author": "yukiej", "createdAt": "2020-06-23T20:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3MDExNQ=="}], "type": "inlineReview"}, {"oid": "2e531f813a83c6f87e6bd7c04c3f0cb12175cc48", "url": "https://github.com/cdapio/cdap/commit/2e531f813a83c6f87e6bd7c04c3f0cb12175cc48", "message": "Make changes to navigator buttons and state initiation", "committedDate": "2020-06-24T16:44:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3NTk4MA==", "url": "https://github.com/cdapio/cdap/pull/12359#discussion_r445175980", "bodyText": "nit: sort alphabetically", "author": "elfenheart", "createdAt": "2020-06-24T21:15:10Z", "path": "cdap-ui/app/cdap/text/text-en.yaml", "diffHunk": "@@ -2413,14 +2413,19 @@ features:\n     errorHeader: Error fetching preview data. Please try re-running preview.\n     loading: Fetching preview data \n     runPreview: Run preview to generate preview data.\n-    Table: \n-      noPreviewRunning: \"{recordType} records have not been generated. Please verify your logic or try sending more data.\"\n-      previewNotSupported: Preview data is not supported for condition stages.\n-      previewRunning: \"{recordType} records have not been generated yet. Please check again in a few minutes.\"\n-    TableContainer:\n-      conditionHeader: Input Records and Output Records\n-      inputHeader: Input Records\n-      outputHeader: Output Records\n+    DataView:", "originalCommit": "2e531f813a83c6f87e6bd7c04c3f0cb12175cc48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "27178488faff70557347d16d8b17038c471e62f9", "url": "https://github.com/cdapio/cdap/commit/27178488faff70557347d16d8b17038c471e62f9", "message": "Add record container and record table\n\nAdd tabs and tab logic\n\nCorrectly update record number in tabs\n\nCheck for non-string field names and values in record view", "committedDate": "2020-06-24T22:09:31Z", "type": "commit"}, {"oid": "27178488faff70557347d16d8b17038c471e62f9", "url": "https://github.com/cdapio/cdap/commit/27178488faff70557347d16d8b17038c471e62f9", "message": "Add record container and record table\n\nAdd tabs and tab logic\n\nCorrectly update record number in tabs\n\nCheck for non-string field names and values in record view", "committedDate": "2020-06-24T22:09:31Z", "type": "forcePushed"}]}