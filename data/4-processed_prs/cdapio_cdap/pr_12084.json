{"pr_number": 12084, "pr_title": "(CDAP-16521) Turn program start completely async", "pr_createdAt": "2020-04-19T01:28:02Z", "pr_url": "https://github.com/cdapio/cdap/pull/12084", "timeline": [{"oid": "f2b4be891149d9a0c979c538b2ec089d479882ad", "url": "https://github.com/cdapio/cdap/commit/f2b4be891149d9a0c979c538b2ec089d479882ad", "message": "(CDAP-16521) Turn program start completely async\n\n- Have a separate executor in the ProgramRuntimeService for program launching", "committedDate": "2020-04-19T01:27:25Z", "type": "commit"}, {"oid": "a0e6b35f4c79d491f47cfb15469137d531fab048", "url": "https://github.com/cdapio/cdap/commit/a0e6b35f4c79d491f47cfb15469137d531fab048", "message": "(CDAP-16369) Make provisioner executor size configurable\n\n- This is a small bug fix\n- ScheduledExecutor size shouldn't be 0", "committedDate": "2020-04-19T01:30:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNjcyNQ==", "url": "https://github.com/cdapio/cdap/pull/12084#discussion_r410816725", "bodyText": "Am going on a limb here, an we be more descriptive in what error happened here and what user should or can do to fix it.", "author": "nitinmotgi", "createdAt": "2020-04-19T05:03:50Z", "path": "cdap-app-fabric/src/main/java/io/cdap/cdap/app/runtime/AbstractProgramRuntimeService.java", "diffHunk": "@@ -148,30 +157,34 @@ public final RuntimeInfo run(ProgramDescriptor programDescriptor, ProgramOptions\n \n \n     File tempDir = createTempDirectory(programId, runId);\n-    Runnable cleanUpTask = createCleanupTask(tempDir, runner);\n-    try {\n-      // Get the artifact details and save it into the program options.\n-      ArtifactId artifactId = programDescriptor.getArtifactId();\n-      ArtifactDetail artifactDetail = getArtifactDetail(artifactId);\n-      ProgramOptions runtimeProgramOptions = updateProgramOptions(artifactId, programId, options, runId);\n-\n-      // Take a snapshot of all the plugin artifacts used by the program\n-      ProgramOptions optionsWithPlugins = createPluginSnapshot(runtimeProgramOptions, programId, tempDir,\n-                                                               programDescriptor.getApplicationSpecification());\n-\n-      // Create and run the program\n-      Program executableProgram = createProgram(cConf, runner, programDescriptor, artifactDetail, tempDir);\n-      cleanUpTask = createCleanupTask(cleanUpTask, executableProgram);\n-\n-      RuntimeInfo runtimeInfo = createRuntimeInfo(runner.run(executableProgram, optionsWithPlugins), programId,\n-                                                  cleanUpTask);\n-      monitorProgram(runtimeInfo, cleanUpTask);\n-      return runtimeInfo;\n-    } catch (Exception e) {\n-      cleanUpTask.run();\n-      LOG.error(\"Exception while trying to run program\", e);\n-      throw Throwables.propagate(e);\n-    }\n+    AtomicReference<Runnable> cleanUpTaskRef = new AtomicReference<>(createCleanupTask(tempDir, runner));\n+    DelayedProgramController controller = new DelayedProgramController(programRunId);\n+    RuntimeInfo runtimeInfo = createRuntimeInfo(controller, programId, () -> cleanUpTaskRef.get().run());\n+    monitorProgram(runtimeInfo, () -> cleanUpTaskRef.get().run());\n+\n+    executor.execute(() -> {\n+      try {\n+        // Get the artifact details and save it into the program options.\n+        ArtifactId artifactId = programDescriptor.getArtifactId();\n+        ArtifactDetail artifactDetail = getArtifactDetail(artifactId);\n+        ProgramOptions runtimeProgramOptions = updateProgramOptions(artifactId, programId, options, runId);\n+\n+        // Take a snapshot of all the plugin artifacts used by the program\n+        ProgramOptions optionsWithPlugins = createPluginSnapshot(runtimeProgramOptions, programId, tempDir,\n+                                                                 programDescriptor.getApplicationSpecification());\n+\n+        // Create and run the program\n+        Program executableProgram = createProgram(cConf, runner, programDescriptor, artifactDetail, tempDir);\n+        cleanUpTaskRef.set(createCleanupTask(cleanUpTaskRef.get(), executableProgram));\n+\n+        controller.setProgramController(runner.run(executableProgram, optionsWithPlugins));\n+      } catch (Exception e) {\n+        controller.failed(e);\n+        programStateWriter.error(programRunId, e);\n+        LOG.error(\"Exception while trying to run program\", e);", "originalCommit": "a0e6b35f4c79d491f47cfb15469137d531fab048", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzMDg4Mg==", "url": "https://github.com/cdapio/cdap/pull/12084#discussion_r410930882", "bodyText": "This is a systematic error that almost nothing the user can do to fix.", "author": "chtyim", "createdAt": "2020-04-19T15:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkzMTA2Mg==", "url": "https://github.com/cdapio/cdap/pull/12084#discussion_r410931062", "bodyText": "It is logged for CDAP developer to debug, rather than for the user.", "author": "chtyim", "createdAt": "2020-04-19T15:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNjcyNQ=="}], "type": "inlineReview"}]}