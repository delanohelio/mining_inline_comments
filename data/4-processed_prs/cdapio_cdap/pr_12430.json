{"pr_number": 12430, "pr_title": "[CDAP-17050] Add UI support for managing secure keys and viewing secure data (Secure Key Manager)", "pr_createdAt": "2020-07-01T19:29:06Z", "pr_url": "https://github.com/cdapio/cdap/pull/12430", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzE0MQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452627141", "bodyText": "the system font is not a monospace font, so it's better to stick with px, %, or vw", "author": "elfenheart", "createdAt": "2020-07-10T05:19:50Z", "path": "cdap-ui/app/cdap/components/SecureKeys/SecureKeyCreate/index.tsx", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Button from '@material-ui/core/Button';\n+import Dialog from '@material-ui/core/Dialog';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import TextField from '@material-ui/core/TextField';\n+import { MySecureKeyApi } from 'api/securekey';\n+import classnames from 'classnames';\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+import { SecureKeyStatus } from 'components/SecureKeys';\n+import { COMMON_DELIMITER, COMMON_KV_DELIMITER } from 'components/SecureKeys/constants';\n+import { Map } from 'immutable';\n+import React from 'react';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    margin: {\n+      margin: `${theme.Spacing(3)}px ${theme.spacing(1)}px`,\n+    },\n+    textField: {\n+      width: '45ch',\n+    },\n+    keyvalueField: {\n+      width: '60ch',", "originalCommit": "95c184e4156c61f75bff4f13148d4a36af6004e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMTAwNA==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452911004", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-10T15:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODAwMA==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452628000", "bodyText": "We have a ConfirmationModal component already", "author": "elfenheart", "createdAt": "2020-07-10T05:23:11Z", "path": "cdap-ui/app/cdap/components/SecureKeys/SecureKeyDelete/index.tsx", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Button from '@material-ui/core/Button';\n+import Dialog from '@material-ui/core/Dialog';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import { MySecureKeyApi } from 'api/securekey';\n+import If from 'components/If';\n+import { SecureKeyStatus } from 'components/SecureKeys';\n+import React from 'react';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+\n+interface ISecureKeyDeleteProps {\n+  state: any;\n+  dispatch: React.Dispatch<any>;\n+  open: boolean;\n+  handleClose: () => void;\n+}\n+\n+const SecureKeyDelete: React.FC<ISecureKeyDeleteProps> = ({\n+  state,\n+  dispatch,\n+  open,\n+  handleClose,\n+}) => {\n+  const { secureKeys, activeKeyIndex } = state;\n+\n+  const deleteSecureKey = () => {\n+    const key = secureKeys.get(activeKeyIndex).get('name');\n+\n+    const namespace = getCurrentNamespace();\n+    const params = {\n+      namespace,\n+      key,\n+    };\n+\n+    MySecureKeyApi.delete(params).subscribe(() => {\n+      handleClose();\n+      dispatch({ type: 'SET_ACTIVE_KEY_INDEX', activeKeyIndex: null });\n+      dispatch({ type: 'SET_SECURE_KEY_STATUS', secureKeyStatus: SecureKeyStatus.Success });\n+    });\n+  };\n+\n+  return (\n+    <If condition={open}>\n+      <Dialog open={open} onClose={handleClose}>", "originalCommit": "95c184e4156c61f75bff4f13148d4a36af6004e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxOTg2NQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452919865", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-10T15:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODI0OA==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452628248", "bodyText": "is this the actual data of the secure key? we should not be displaying the existing key. The edit modal should only allow the user to change the value, not to retrieve it", "author": "elfenheart", "createdAt": "2020-07-10T05:24:18Z", "path": "cdap-ui/app/cdap/components/SecureKeys/SecureKeyEdit/index.tsx", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Button from '@material-ui/core/Button';\n+import Dialog from '@material-ui/core/Dialog';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import TextField from '@material-ui/core/TextField';\n+import { MySecureKeyApi } from 'api/securekey';\n+import classnames from 'classnames';\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+import { SecureKeyStatus } from 'components/SecureKeys';\n+import { COMMON_DELIMITER, COMMON_KV_DELIMITER } from 'components/SecureKeys/constants';\n+import { Map } from 'immutable';\n+import isNil from 'lodash/isNil';\n+import React from 'react';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    margin: {\n+      margin: `${theme.Spacing(3)}px ${theme.spacing(1)}px`,\n+    },\n+    textField: {\n+      width: '45ch',\n+    },\n+    keyvalueField: {\n+      width: '60ch',\n+    },\n+  };\n+};\n+\n+interface ISecureKeyEditProps extends WithStyles<typeof styles> {\n+  state: any;\n+  dispatch: React.Dispatch<any>;\n+  open: boolean;\n+  handleClose: () => void;\n+}\n+\n+const SecureKeyEditView: React.FC<ISecureKeyEditProps> = ({\n+  classes,\n+  state,\n+  dispatch,\n+  open,\n+  handleClose,\n+}) => {\n+  const { secureKeys, activeKeyIndex } = state;\n+\n+  const keyMetadata = secureKeys.get(activeKeyIndex);\n+  const keyID = keyMetadata ? keyMetadata.get('name') : '';\n+  const [localDescription, setLocalDescription] = React.useState(\n+    keyMetadata ? keyMetadata.get('description') : ''\n+  );\n+  const [localData, setLocalData] = React.useState(keyMetadata ? keyMetadata.get('data') : '');", "originalCommit": "95c184e4156c61f75bff4f13148d4a36af6004e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMTA3MA==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452911070", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-10T15:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODk4Ng==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452628986", "bodyText": "the textfield for the data should allow multiline", "author": "elfenheart", "createdAt": "2020-07-10T05:27:06Z", "path": "cdap-ui/app/cdap/components/SecureKeys/SecureKeyCreate/index.tsx", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Button from '@material-ui/core/Button';\n+import Dialog from '@material-ui/core/Dialog';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import TextField from '@material-ui/core/TextField';\n+import { MySecureKeyApi } from 'api/securekey';\n+import classnames from 'classnames';\n+import WidgetWrapper from 'components/ConfigurationGroup/WidgetWrapper';\n+import { SecureKeyStatus } from 'components/SecureKeys';\n+import { COMMON_DELIMITER, COMMON_KV_DELIMITER } from 'components/SecureKeys/constants';\n+import { Map } from 'immutable';\n+import React from 'react';\n+import { getCurrentNamespace } from 'services/NamespaceStore';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    margin: {\n+      margin: `${theme.Spacing(3)}px ${theme.spacing(1)}px`,\n+    },\n+    textField: {\n+      width: '45ch',\n+    },\n+    keyvalueField: {\n+      width: '60ch',\n+    },\n+  };\n+};\n+\n+interface ISecureKeyCreateProps extends WithStyles<typeof styles> {\n+  state: any;\n+  dispatch: React.Dispatch<any>;\n+  open: boolean;\n+  handleClose: () => void;\n+}\n+\n+const SecureKeyCreateView: React.FC<ISecureKeyCreateProps> = ({\n+  classes,\n+  state,\n+  dispatch,\n+  open,\n+  handleClose,\n+}) => {\n+  const { secureKeys } = state;\n+\n+  const [localName, setLocalName] = React.useState('');\n+  const [localDescription, setLocalDescription] = React.useState('');\n+  const [localData, setLocalData] = React.useState('');\n+  // 'properties' are in key-value form, keep a state in string form\n+  const [localPropertiesInString, setLocalPropertiesInString] = React.useState('');\n+\n+  const [showData, setShowData] = React.useState(false);\n+\n+  const onLocalNameChange = (e) => {\n+    setLocalName(e.target.value);\n+  };\n+\n+  const onLocalDescriptionChange = (e) => {\n+    setLocalDescription(e.target.value);\n+  };\n+\n+  const onLocalDataChange = (e) => {\n+    setLocalData(e.target.value);\n+  };\n+\n+  const onLocalPropertiesChange = (keyvalue) => {\n+    setLocalPropertiesInString(keyvalue);\n+  };\n+\n+  const convertLocalPropertiesInString = (keyvalue: string) => {\n+    let keyvaluePairs = Map({});\n+    keyvalue.split(COMMON_DELIMITER).forEach((pair) => {\n+      const [key, value] = pair.split(COMMON_KV_DELIMITER);\n+      keyvaluePairs = keyvaluePairs.set(key, value);\n+    });\n+    return keyvaluePairs;\n+  };\n+\n+  const saveSecureKey = () => {\n+    // Duplicate key name should raise an error\n+    const keyIDs = secureKeys.map((key) => key.get('name'));\n+    if (keyIDs.includes(localName)) {\n+      dispatch({ type: 'SET_SECURE_KEY_STATUS', secureKeyStatus: SecureKeyStatus.Failure });\n+      return;\n+    }\n+\n+    addSecureKey();\n+  };\n+\n+  const addSecureKey = () => {\n+    const namespace = getCurrentNamespace();\n+\n+    const params = {\n+      namespace,\n+      key: localName,\n+    };\n+\n+    const requestBody = {\n+      description: localDescription,\n+      data: localData,\n+      properties: convertLocalPropertiesInString(localPropertiesInString),\n+    };\n+\n+    MySecureKeyApi.put(params, requestBody).subscribe(() => {\n+      setLocalName('');\n+      setLocalDescription('');\n+      setLocalData('');\n+      setLocalPropertiesInString('');\n+      dispatch({ type: 'SET_SECURE_KEY_STATUS', secureKeyStatus: SecureKeyStatus.Success });\n+      handleClose();\n+    });\n+  };\n+\n+  return (\n+    <Dialog open={open} onClose={handleClose}>\n+      <DialogTitle>Create secure key</DialogTitle>\n+      <DialogContent>\n+        <div className={classnames(classes.margin, classes.textField)}>\n+          <TextField\n+            variant=\"outlined\"\n+            label=\"Name\"\n+            defaultValue={localName}\n+            onChange={onLocalNameChange}\n+            InputProps={{\n+              className: classes.textField,\n+            }}\n+          />\n+        </div>\n+        <div className={classnames(classes.margin, classes.textField)}>\n+          <TextField\n+            variant=\"outlined\"\n+            label=\"Description\"\n+            defaultValue={localDescription}\n+            onChange={onLocalDescriptionChange}\n+            InputProps={{\n+              className: classes.textField,\n+            }}\n+          />\n+        </div>\n+        <div className={classnames(classes.margin, classes.textField)}>\n+          <TextField\n+            variant=\"outlined\"\n+            label=\"Data\"\n+            type={showData ? 'text' : 'password'}\n+            value={localData}\n+            onChange={onLocalDataChange}\n+            InputProps={{\n+              className: classes.textField,\n+            }}\n+          />", "originalCommit": "95c184e4156c61f75bff4f13148d4a36af6004e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMDkwNg==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452910906", "bodyText": "I don't think password textfield can be multiline.", "author": "jennac3", "createdAt": "2020-07-10T15:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyODk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyOTM4OQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452629389", "bodyText": "don't display the data", "author": "elfenheart", "createdAt": "2020-07-10T05:28:43Z", "path": "cdap-ui/app/cdap/components/SecureKeys/SecureKeyList/index.tsx", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Button from '@material-ui/core/Button';\n+import Paper from '@material-ui/core/Paper';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableCell from '@material-ui/core/TableCell';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import SecureKeyCreate from 'components/SecureKeys/SecureKeyCreate';\n+import SecureKeyActionButtons from 'components/SecureKeys/SecureKeyList/SecureKeyActionButtons';\n+import * as React from 'react';\n+\n+const styles = (theme): StyleRules => {\n+  return {\n+    secureKeysTitle: {\n+      paddingTop: theme.spacing(1),\n+    },\n+    secureKeyManager: {\n+      display: 'grid',\n+      alignItems: 'center',\n+      gridTemplateColumns: 'repeat(7, 1fr)',\n+    },\n+    addSecureKeyButton: {\n+      gridRow: '1',\n+      gridColumnStart: '1',\n+    },\n+    securityKeyRow: {\n+      cursor: 'pointer',\n+      hover: {\n+        cursor: 'pointer',\n+      },\n+    },\n+    nameCell: {\n+      width: '30%',\n+    },\n+    descriptionCell: {\n+      width: '40%',\n+    },\n+    dataCell: {\n+      width: '20%',\n+    },\n+    actionButtonsCell: {\n+      width: '10%',\n+    },\n+  };\n+};\n+\n+interface ISecureKeyListProps extends WithStyles<typeof styles> {\n+  state: any;\n+  dispatch: React.Dispatch<any>;\n+}\n+\n+const SecureKeyListView: React.FC<ISecureKeyListProps> = ({ classes, state, dispatch }) => {\n+  const { secureKeys } = state;\n+\n+  const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\n+\n+  const onSecureKeyClick = (keyIndex) => {\n+    return () => {\n+      dispatch({ type: 'SET_EDIT_MODE', editMode: true });\n+      dispatch({ type: 'SET_ACTIVE_KEY_INDEX', activeKeyIndex: keyIndex });\n+    };\n+  };\n+\n+  return (\n+    <div>\n+      <h1 className={classes.secureKeysTitle}>Secure keys</h1>\n+      <div className={classes.secureKeyManager}>\n+        <div className={classes.addSecureKeyButton}>\n+          <Button\n+            variant=\"outlined\"\n+            color=\"primary\"\n+            size=\"small\"\n+            onClick={() => setCreateDialogOpen(true)}\n+          >\n+            Add Secure Key\n+          </Button>\n+        </div>\n+      </div>\n+\n+      <Paper>\n+        <Table>\n+          <TableHead>\n+            <TableRow>\n+              <TableCell>Key</TableCell>\n+              <TableCell>Description</TableCell>\n+              <TableCell>Data</TableCell>\n+              <TableCell />\n+            </TableRow>\n+          </TableHead>\n+          <TableBody>\n+            {secureKeys.map((keyMetadata, keyIndex) => {\n+              const keyID = keyMetadata.get('name');\n+              return (\n+                <TableRow\n+                  key={keyMetadata.get('name')}\n+                  hover\n+                  selected\n+                  className={classes.securityKeyRow}\n+                  onClick={onSecureKeyClick(keyIndex)}\n+                >\n+                  <TableCell className={classes.nameCell}>{keyID}</TableCell>\n+                  <TableCell className={classes.descriptionCell}>\n+                    {keyMetadata.get('description')}\n+                  </TableCell>\n+                  <TableCell className={classes.dataCell}>{keyMetadata.get('data')}</TableCell>", "originalCommit": "95c184e4156c61f75bff4f13148d4a36af6004e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDczOA==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452914738", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-10T15:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyOTM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyOTczMg==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452629732", "bodyText": "you don't need to fetch the data. We don't want to give the ability to the user to view the content of the secure key. They should only be able to create the data or change it. Just like how it is with passwords.", "author": "elfenheart", "createdAt": "2020-07-10T05:30:04Z", "path": "cdap-ui/app/cdap/components/SecureKeys/index.tsx", "diffHunk": "@@ -14,166 +14,196 @@\n  * the License.\n  */\n \n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import { MySecureKeyApi } from 'api/securekey';\n+import Alert from 'components/Alert';\n+import If from 'components/If';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import SecureKeyDelete from 'components/SecureKeys/SecureKeyDelete';\n+import SecureKeyEdit from 'components/SecureKeys/SecureKeyEdit';\n+import SecureKeyList from 'components/SecureKeys/SecureKeyList';\n+import { fromJS, List } from 'immutable';\n import * as React from 'react';\n+import { BehaviorSubject } from 'rxjs';\n+import { forkJoin } from 'rxjs/observable/forkJoin';\n+import { distinctUntilChanged, flatMap, mergeMap } from 'rxjs/operators';\n+import { map } from 'rxjs/operators/map';\n import { getCurrentNamespace } from 'services/NamespaceStore';\n-import { MySecureKeyApi } from 'api/securekey';\n-import TextField from '@material-ui/core/TextField';\n-import Table from '@material-ui/core/Table';\n-import TableBody from '@material-ui/core/TableBody';\n-import TableCell from '@material-ui/core/TableCell';\n-import TableHead from '@material-ui/core/TableHead';\n-import TableRow from '@material-ui/core/TableRow';\n-import DeleteIcon from '@material-ui/icons/Delete';\n-import Button from '@material-ui/core/Button';\n-import IconButton from '@material-ui/core/IconButton';\n-import Paper from '@material-ui/core/Paper';\n-\n-interface IState {\n-  secureKeys: any[];\n-  name: string;\n+\n+interface ISecureKeyState {\n+  createdEpochMs?: number;\n   description: string;\n+  name: string;\n+  properties: Record<string, string>;\n   data: string;\n }\n \n-// Currently a hidden link to internally manage secure keys\n-export default class SecureKeys extends React.PureComponent<{}, IState> {\n-  public state = {\n-    secureKeys: [],\n-    name: '',\n-    description: '',\n-    data: '',\n-  };\n+export enum SecureKeyStatus {\n+  Normal = 'Normal',\n+  Success = 'SUCCESS',\n+  Failure = 'FAILURE',\n+}\n \n-  public componentDidMount() {\n-    this.fetchSecureKeys();\n+export const initialState = {\n+  secureKeys: List([]),\n+  secureKeyStatus: SecureKeyStatus.Normal,\n+  editMode: false,\n+  deleteMode: false,\n+  activeKeyIndex: null,\n+  loading: true,\n+};\n+\n+export function reducer(state, action) {\n+  switch (action.type) {\n+    case 'SET_SECURE_KEYS':\n+      return { ...state, secureKeys: action.secureKeys };\n+    case 'SET_SECURE_KEY_STATUS':\n+      return { ...state, secureKeyStatus: action.secureKeyStatus };\n+    case 'SET_EDIT_MODE':\n+      return { ...state, editMode: action.editMode };\n+    case 'SET_DELETE_MODE':\n+      return { ...state, deleteMode: action.deleteMode };\n+    case 'SET_ACTIVE_KEY_INDEX':\n+      return { ...state, activeKeyIndex: action.activeKeyIndex };\n+    case 'SET_LOADING':\n+      return { ...state, loading: action.loading };\n+    default:\n+      return state;\n   }\n+}\n \n-  private fetchSecureKeys = () => {\n-    const namespace = getCurrentNamespace();\n-\n-    MySecureKeyApi.list({ namespace }).subscribe((res) => {\n-      this.setState({\n-        secureKeys: res,\n-      });\n-    });\n-  };\n-\n-  private handleChange = (property) => {\n-    return (e) => {\n-      // @ts-ignore\n-      this.setState({\n-        [property]: e.target.value,\n-      });\n-    };\n+const styles = (): StyleRules => {\n+  return {\n+    content: {\n+      padding: '50px',\n+    },\n+    loadingBox: {\n+      width: '100%',\n+      height: '100%',\n+      display: 'flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+    },\n   };\n+};\n+\n+interface ISecureKeysProps extends WithStyles<typeof styles> {}\n+\n+const SecureKeysView: React.FC<ISecureKeysProps> = ({ classes }) => {\n+  const [state, dispatch] = React.useReducer(reducer, initialState);\n+\n+  const { secureKeyStatus, editMode, deleteMode, loading } = state;\n+\n+  const namespace = getCurrentNamespace();\n+\n+  // Observe `secureKeyStatus` with `useEffect` and forward the value to `secureKeyStatus$`\n+  const secureKeyStatusSubject = React.useRef(new BehaviorSubject(secureKeyStatus));\n+  React.useEffect(() => {\n+    secureKeyStatusSubject.current.next(secureKeyStatus);\n+  }, [secureKeyStatus]);\n+  const secureKeyStatus$ = React.useMemo(() => secureKeyStatusSubject.current.asObservable(), [\n+    secureKeyStatusSubject,\n+  ]);\n+\n+  // Update the states with incoming secure keys\n+  React.useEffect(() => {\n+    // Whenever user adds/edits/deletes a secure key, securekeyStatus$ emits a new value.\n+    // In such case, re-call MySecureKeyApi.list to reflect the changes\n+    const secureKeys$ = secureKeyStatus$\n+      .pipe(\n+        distinctUntilChanged(),\n+        flatMap((status) => {\n+          return MySecureKeyApi.list({ namespace }).pipe(\n+            mergeMap((keys: ISecureKeyState[]) => {\n+              return forkJoin(\n+                keys.map((k) =>\n+                  MySecureKeyApi.getSecureData({ namespace, key: k.name }).pipe(", "originalCommit": "95c184e4156c61f75bff4f13148d4a36af6004e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDc3Nw==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r452914777", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-10T15:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyOTczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTYwMQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r453831601", "bodyText": "Can we make this a little simpler?\nIf I understand correctly,\n\nWe pass dispatch of the store to other child components\nOn change in any component the component dispatches a status change\nand here we an observable and have a useRef on it for any changes\nand useEffect on the status\nand on each status change we use the observable to refetch the list of secure keys.\n\nInstead of all these can we pass in a callback to all the components (SecureKeysEdit, SecureKeysDelete and SecureKeysCreate), say onClose which will be called on unmounting  and here on the function we simply refetch all the keys?", "author": "ajainarayanan", "createdAt": "2020-07-13T18:01:48Z", "path": "cdap-ui/app/cdap/components/SecureKeys/index.tsx", "diffHunk": "@@ -14,166 +14,181 @@\n  * the License.\n  */\n \n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import { MySecureKeyApi } from 'api/securekey';\n+import Alert from 'components/Alert';\n+import If from 'components/If';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import SecureKeyDelete from 'components/SecureKeys/SecureKeyDelete';\n+import SecureKeyEdit from 'components/SecureKeys/SecureKeyEdit';\n+import SecureKeyList from 'components/SecureKeys/SecureKeyList';\n+import { fromJS, List } from 'immutable';\n import * as React from 'react';\n+import { BehaviorSubject } from 'rxjs';\n+import { distinctUntilChanged, flatMap } from 'rxjs/operators';\n import { getCurrentNamespace } from 'services/NamespaceStore';\n-import { MySecureKeyApi } from 'api/securekey';\n-import TextField from '@material-ui/core/TextField';\n-import Table from '@material-ui/core/Table';\n-import TableBody from '@material-ui/core/TableBody';\n-import TableCell from '@material-ui/core/TableCell';\n-import TableHead from '@material-ui/core/TableHead';\n-import TableRow from '@material-ui/core/TableRow';\n-import DeleteIcon from '@material-ui/icons/Delete';\n-import Button from '@material-ui/core/Button';\n-import IconButton from '@material-ui/core/IconButton';\n-import Paper from '@material-ui/core/Paper';\n-\n-interface IState {\n-  secureKeys: any[];\n-  name: string;\n+\n+interface ISecureKeyState {\n+  createdEpochMs?: number;\n   description: string;\n+  name: string;\n+  properties: Record<string, string>;\n   data: string;\n }\n \n-// Currently a hidden link to internally manage secure keys\n-export default class SecureKeys extends React.PureComponent<{}, IState> {\n-  public state = {\n-    secureKeys: [],\n-    name: '',\n-    description: '',\n-    data: '',\n-  };\n+export enum SecureKeyStatus {\n+  Normal = 'Normal',\n+  Success = 'SUCCESS',\n+  Failure = 'FAILURE',\n+}\n \n-  public componentDidMount() {\n-    this.fetchSecureKeys();\n+export const initialState = {\n+  secureKeys: List([]),\n+  secureKeyStatus: SecureKeyStatus.Normal,\n+  editMode: false,\n+  deleteMode: false,\n+  activeKeyIndex: null,\n+  loading: true,\n+};\n+\n+export function reducer(state, action) {\n+  switch (action.type) {\n+    case 'SET_SECURE_KEYS':\n+      return { ...state, secureKeys: action.secureKeys };\n+    case 'SET_SECURE_KEY_STATUS':\n+      return { ...state, secureKeyStatus: action.secureKeyStatus };\n+    case 'SET_EDIT_MODE':\n+      return { ...state, editMode: action.editMode };\n+    case 'SET_DELETE_MODE':\n+      return { ...state, deleteMode: action.deleteMode };\n+    case 'SET_ACTIVE_KEY_INDEX':\n+      return { ...state, activeKeyIndex: action.activeKeyIndex };\n+    case 'SET_LOADING':\n+      return { ...state, loading: action.loading };\n+    default:\n+      return state;\n   }\n+}\n \n-  private fetchSecureKeys = () => {\n-    const namespace = getCurrentNamespace();\n-\n-    MySecureKeyApi.list({ namespace }).subscribe((res) => {\n-      this.setState({\n-        secureKeys: res,\n-      });\n-    });\n-  };\n-\n-  private handleChange = (property) => {\n-    return (e) => {\n-      // @ts-ignore\n-      this.setState({\n-        [property]: e.target.value,\n-      });\n-    };\n+const styles = (): StyleRules => {\n+  return {\n+    content: {\n+      padding: '50px',\n+    },\n+    loadingBox: {\n+      width: '100%',\n+      height: '100%',\n+      display: 'flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+    },\n   };\n+};\n+\n+interface ISecureKeysProps extends WithStyles<typeof styles> {}\n+\n+const SecureKeysView: React.FC<ISecureKeysProps> = ({ classes }) => {\n+  const [state, dispatch] = React.useReducer(reducer, initialState);\n+\n+  const { secureKeyStatus, editMode, deleteMode, loading } = state;\n+\n+  const namespace = getCurrentNamespace();\n+\n+  // Observe `secureKeyStatus` with `useEffect` and forward the value to `secureKeyStatus$`\n+  const secureKeyStatusSubject = React.useRef(new BehaviorSubject(secureKeyStatus));", "originalCommit": "2ff0ca085a2f9177112f91f6a00a0e620a195419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMjI5MA==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r453832290", "bodyText": "This way we don't have to pass in the dispatch function. This will be problematic to track since in the future if we want to see where a change is happening. Events can be dispatched by any of the child components for a state maintained in the parent.", "author": "ajainarayanan", "createdAt": "2020-07-13T18:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNzI3Mg==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r455317272", "bodyText": "Resolved! Now dispatch only resides in the main component SecureKeys/index.tsx", "author": "jennac3", "createdAt": "2020-07-15T20:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjQ2Ng==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r457526466", "bodyText": "I think you don't need to use observable to watch for changes. The events are deterministic in this case, so you should be able to fetch the the list of secureKeys in a deterministic way on a callback. On update (add, edit, and delete), the modal will call handleClose. You can fetch the list of secure keys on the callback being passed to handleClose", "author": "elfenheart", "createdAt": "2020-07-20T16:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMTYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMzE1NQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r453833155", "bodyText": "what is the difference between the onSuccessAlertClose and onFailureAlertClose? Seems to be doing the same thing.", "author": "ajainarayanan", "createdAt": "2020-07-13T18:04:23Z", "path": "cdap-ui/app/cdap/components/SecureKeys/index.tsx", "diffHunk": "@@ -14,166 +14,181 @@\n  * the License.\n  */\n \n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+import { MySecureKeyApi } from 'api/securekey';\n+import Alert from 'components/Alert';\n+import If from 'components/If';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import SecureKeyDelete from 'components/SecureKeys/SecureKeyDelete';\n+import SecureKeyEdit from 'components/SecureKeys/SecureKeyEdit';\n+import SecureKeyList from 'components/SecureKeys/SecureKeyList';\n+import { fromJS, List } from 'immutable';\n import * as React from 'react';\n+import { BehaviorSubject } from 'rxjs';\n+import { distinctUntilChanged, flatMap } from 'rxjs/operators';\n import { getCurrentNamespace } from 'services/NamespaceStore';\n-import { MySecureKeyApi } from 'api/securekey';\n-import TextField from '@material-ui/core/TextField';\n-import Table from '@material-ui/core/Table';\n-import TableBody from '@material-ui/core/TableBody';\n-import TableCell from '@material-ui/core/TableCell';\n-import TableHead from '@material-ui/core/TableHead';\n-import TableRow from '@material-ui/core/TableRow';\n-import DeleteIcon from '@material-ui/icons/Delete';\n-import Button from '@material-ui/core/Button';\n-import IconButton from '@material-ui/core/IconButton';\n-import Paper from '@material-ui/core/Paper';\n-\n-interface IState {\n-  secureKeys: any[];\n-  name: string;\n+\n+interface ISecureKeyState {\n+  createdEpochMs?: number;\n   description: string;\n+  name: string;\n+  properties: Record<string, string>;\n   data: string;\n }\n \n-// Currently a hidden link to internally manage secure keys\n-export default class SecureKeys extends React.PureComponent<{}, IState> {\n-  public state = {\n-    secureKeys: [],\n-    name: '',\n-    description: '',\n-    data: '',\n-  };\n+export enum SecureKeyStatus {\n+  Normal = 'Normal',\n+  Success = 'SUCCESS',\n+  Failure = 'FAILURE',\n+}\n \n-  public componentDidMount() {\n-    this.fetchSecureKeys();\n+export const initialState = {\n+  secureKeys: List([]),\n+  secureKeyStatus: SecureKeyStatus.Normal,\n+  editMode: false,\n+  deleteMode: false,\n+  activeKeyIndex: null,\n+  loading: true,\n+};\n+\n+export function reducer(state, action) {\n+  switch (action.type) {\n+    case 'SET_SECURE_KEYS':\n+      return { ...state, secureKeys: action.secureKeys };\n+    case 'SET_SECURE_KEY_STATUS':\n+      return { ...state, secureKeyStatus: action.secureKeyStatus };\n+    case 'SET_EDIT_MODE':\n+      return { ...state, editMode: action.editMode };\n+    case 'SET_DELETE_MODE':\n+      return { ...state, deleteMode: action.deleteMode };\n+    case 'SET_ACTIVE_KEY_INDEX':\n+      return { ...state, activeKeyIndex: action.activeKeyIndex };\n+    case 'SET_LOADING':\n+      return { ...state, loading: action.loading };\n+    default:\n+      return state;\n   }\n+}\n \n-  private fetchSecureKeys = () => {\n-    const namespace = getCurrentNamespace();\n-\n-    MySecureKeyApi.list({ namespace }).subscribe((res) => {\n-      this.setState({\n-        secureKeys: res,\n-      });\n-    });\n-  };\n-\n-  private handleChange = (property) => {\n-    return (e) => {\n-      // @ts-ignore\n-      this.setState({\n-        [property]: e.target.value,\n-      });\n-    };\n+const styles = (): StyleRules => {\n+  return {\n+    content: {\n+      padding: '50px',\n+    },\n+    loadingBox: {\n+      width: '100%',\n+      height: '100%',\n+      display: 'flex',\n+      alignItems: 'center',\n+      justifyContent: 'center',\n+    },\n   };\n+};\n+\n+interface ISecureKeysProps extends WithStyles<typeof styles> {}\n+\n+const SecureKeysView: React.FC<ISecureKeysProps> = ({ classes }) => {\n+  const [state, dispatch] = React.useReducer(reducer, initialState);\n+\n+  const { secureKeyStatus, editMode, deleteMode, loading } = state;\n+\n+  const namespace = getCurrentNamespace();\n+\n+  // Observe `secureKeyStatus` with `useEffect` and forward the value to `secureKeyStatus$`\n+  const secureKeyStatusSubject = React.useRef(new BehaviorSubject(secureKeyStatus));\n+  React.useEffect(() => {\n+    secureKeyStatusSubject.current.next(secureKeyStatus);\n+  }, [secureKeyStatus]);\n+  const secureKeyStatus$ = React.useMemo(() => secureKeyStatusSubject.current.asObservable(), [\n+    secureKeyStatusSubject,\n+  ]);\n+\n+  // Update the states with incoming secure keys\n+  React.useEffect(() => {\n+    // Whenever user adds/edits/deletes a secure key, securekeyStatus$ emits a new value.\n+    // In such case, re-call MySecureKeyApi.list to reflect the changes\n+    const secureKeys$ = secureKeyStatus$\n+      .pipe(\n+        distinctUntilChanged(),\n+        flatMap(() => {\n+          return MySecureKeyApi.list({ namespace });\n+        })\n+      )\n+      .publishReplay(1)\n+      .refCount();\n+\n+    const subscription = secureKeys$.subscribe((keys: ISecureKeyState[]) => {\n+      dispatch({ type: 'SET_LOADING', loading: true });\n+      if (!keys) {\n+        return;\n+      }\n+\n+      // Populate the table with matched secure keys\n+      dispatch({ type: 'SET_SECURE_KEYS', secureKeys: fromJS(keys) });\n+      dispatch({ type: 'SET_LOADING', loading: false });\n+    });\n \n-  private addKey = () => {\n-    const { name, description, data } = this.state;\n-\n-    if (!name || !data) {\n-      return;\n-    }\n-\n-    const namespace = getCurrentNamespace();\n-\n-    const params = {\n-      namespace,\n-      key: name,\n-    };\n-\n-    const requestBody = {\n-      description,\n-      data,\n+    return () => {\n+      return subscription.unsubscribe();\n     };\n+  }, []);\n \n-    MySecureKeyApi.add(params, requestBody).subscribe(() => {\n-      this.setState({\n-        name: '',\n-        description: '',\n-        data: '',\n-      });\n-      this.fetchSecureKeys();\n-    });\n+  // Success Alert component always closes after 3000ms.\n+  // After a timeout for 3000ms, reset status to make a success Alert component disappear\n+  const onSuccessAlertClose = () => {", "originalCommit": "2ff0ca085a2f9177112f91f6a00a0e620a195419", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2OTIwOQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r455169209", "bodyText": "Resolved", "author": "jennac3", "createdAt": "2020-07-15T16:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMzE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNjc3MQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r457516771", "bodyText": "use a named import, import BehaviorSubject from 'rxjs/BehaviorSubject.\nDoing import { BehaviorSubject }, will import the entire rxjs library", "author": "elfenheart", "createdAt": "2020-07-20T15:54:44Z", "path": "cdap-ui/app/cdap/components/SecureKeys/index.tsx", "diffHunk": "@@ -15,165 +15,212 @@\n  */\n \n import * as React from 'react';\n-import { getCurrentNamespace } from 'services/NamespaceStore';\n+\n+import { List, fromJS } from 'immutable';\n+import { distinctUntilChanged, flatMap } from 'rxjs/operators';\n+import withStyles, { StyleRules, WithStyles } from '@material-ui/core/styles/withStyles';\n+\n+import Alert from 'components/Alert';\n+import { BehaviorSubject } from 'rxjs';", "originalCommit": "282214701ae672f20a61cf0a1a7ceb9d976c0451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3OTc5MQ==", "url": "https://github.com/cdapio/cdap/pull/12430#discussion_r457579791", "bodyText": "I will try to see if I can delete BehaviorSubject", "author": "jennac3", "createdAt": "2020-07-20T17:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNjc3MQ=="}], "type": "inlineReview"}, {"oid": "be8ea15b8e848de99b0982f76f46e90d20829e48", "url": "https://github.com/cdapio/cdap/commit/be8ea15b8e848de99b0982f76f46e90d20829e48", "message": "[CDAP-17050] Add UI support for managing secure keys and viewing secure data (Secure Key Manager)", "committedDate": "2020-07-20T22:05:16Z", "type": "commit"}, {"oid": "be8ea15b8e848de99b0982f76f46e90d20829e48", "url": "https://github.com/cdapio/cdap/commit/be8ea15b8e848de99b0982f76f46e90d20829e48", "message": "[CDAP-17050] Add UI support for managing secure keys and viewing secure data (Secure Key Manager)", "committedDate": "2020-07-20T22:05:16Z", "type": "forcePushed"}]}