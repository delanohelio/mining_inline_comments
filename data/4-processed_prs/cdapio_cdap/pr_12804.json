{"pr_number": 12804, "pr_title": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "pr_createdAt": "2020-10-12T21:30:45Z", "pr_url": "https://github.com/cdapio/cdap/pull/12804", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4Njk3OQ==", "url": "https://github.com/cdapio/cdap/pull/12804#discussion_r508086979", "bodyText": "Should this be getFirst?", "author": "njbriggs", "createdAt": "2020-10-19T21:58:32Z", "path": "cdap-ui/app/cdap/components/LogViewer/DataFetcher/__tests__/PreviewDataFetcher.test.ts", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+jest.unmock('components/LogViewer/DataFetcher/PreviewDataFetcher');\n+import PreviewDataFetcher from 'components/LogViewer/DataFetcher/PreviewDataFetcher';\n+import { LogLevel } from 'components/LogViewer/types';\n+import { MyPreviewApi } from 'api/preview';\n+\n+const PREVIEW_INFO = {\n+  namespace: 'default',\n+  previewId: 'preview-id',\n+};\n+\n+const BASE_FILTER = 'AND .origin=plugin OR MDC:eventType=lifecycle OR MDC:eventType=userLog';\n+const BASE_LOGS_PARAMS = {\n+  namespace: PREVIEW_INFO.namespace,\n+  previewId: PREVIEW_INFO.previewId,\n+  max: 50,\n+  format: 'json',\n+  filter: `loglevel=INFO ${BASE_FILTER}`,\n+};\n+\n+describe('LogViewer - Preview DataFetcher', () => {\n+  let dataFetcher: PreviewDataFetcher;\n+\n+  beforeEach(() => {\n+    dataFetcher = new PreviewDataFetcher(PREVIEW_INFO);\n+  });\n+\n+  it('should initialize without system logs', () => {\n+    expect(dataFetcher.getIncludeSystemLogs()).toBe(false);\n+  });\n+\n+  it('should be able to include system logs', () => {\n+    const initSpy = jest.spyOn(dataFetcher, 'init');\n+    const prevLogsSpy = jest.spyOn(MyPreviewApi, 'prevLogs');\n+    dataFetcher.setIncludeSystemLogs(true).subscribe();\n+    expect(dataFetcher.getIncludeSystemLogs()).toBe(true);\n+    expect(initSpy).toHaveBeenCalled();\n+    expect(prevLogsSpy).toHaveBeenCalledWith({\n+      ...BASE_LOGS_PARAMS,\n+      filter: 'loglevel=INFO',\n+    });\n+    initSpy.mockRestore();\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('should default log level to INFO', () => {\n+    expect(dataFetcher.getLogLevel()).toBe(LogLevel.INFO);\n+  });\n+\n+  it('should set correct log level', () => {\n+    const initSpy = jest.spyOn(dataFetcher, 'init');\n+    const prevLogsSpy = jest.spyOn(MyPreviewApi, 'prevLogs');\n+    dataFetcher.setLogLevel(LogLevel.TRACE).subscribe();\n+    expect(dataFetcher.getLogLevel()).toBe(LogLevel.TRACE);\n+    expect(initSpy).toHaveBeenCalled();\n+    expect(prevLogsSpy).toHaveBeenCalledWith({\n+      ...BASE_LOGS_PARAMS,\n+      filter: `loglevel=TRACE ${BASE_FILTER}`,\n+    });\n+    initSpy.mockRestore();\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('should fetch the next set of logs', () => {\n+    const nextLogsSpy = jest.spyOn(MyPreviewApi, 'nextLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getNext().subscribe();\n+      expect(nextLogsSpy).toHaveBeenCalledWith({\n+        ...BASE_LOGS_PARAMS,\n+        fromOffset: '2',\n+      });\n+    });\n+    nextLogsSpy.mockRestore();\n+  });\n+\n+  it('should fetch the previous set of logs', () => {\n+    const prevLogsSpy = jest.spyOn(MyPreviewApi, 'prevLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getNext().subscribe();\n+      expect(prevLogsSpy).toHaveBeenCalledWith({\n+        ...BASE_LOGS_PARAMS,\n+        fromOffset: '1',\n+      });\n+    });\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('getLast should fetch logs without offset', () => {\n+    const prevLogsSpy = jest.spyOn(MyPreviewApi, 'prevLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getLast().subscribe();\n+      expect(prevLogsSpy).toHaveBeenCalledWith(BASE_LOGS_PARAMS);\n+    });\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('getFirst should fetch logs without offset', () => {\n+    const nextLogsSpy = jest.spyOn(MyPreviewApi, 'nextLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getLast().subscribe();", "originalCommit": "5986fbd68a518ce4397ea3842ad0f4616a7aebbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4OTY5Ng==", "url": "https://github.com/cdapio/cdap/pull/12804#discussion_r508089696", "bodyText": "Here too?", "author": "njbriggs", "createdAt": "2020-10-19T22:04:52Z", "path": "cdap-ui/app/cdap/components/LogViewer/DataFetcher/__tests__/ProgramDataFetcher.test.ts", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+jest.unmock('components/LogViewer/DataFetcher/ProgramDataFetcher');\n+import ProgramDataFetcher from 'components/LogViewer/DataFetcher/ProgramDataFetcher';\n+import { LogLevel } from 'components/LogViewer/types';\n+import { MyProgramApi } from 'api/program';\n+\n+const PROGRAM_INFO = {\n+  namespace: 'namespace',\n+  application: 'application',\n+  programType: 'programType',\n+  programName: 'programName',\n+  runId: 'run-1',\n+};\n+\n+const BASE_FILTER = 'AND .origin=plugin OR .origin=program';\n+const BASE_LOGS_PARAMS = {\n+  namespace: PROGRAM_INFO.namespace,\n+  appId: PROGRAM_INFO.application,\n+  programType: PROGRAM_INFO.programType,\n+  programId: PROGRAM_INFO.programName,\n+  runId: PROGRAM_INFO.runId,\n+  max: 50,\n+  format: 'json',\n+  filter: `loglevel=INFO ${BASE_FILTER}`,\n+};\n+\n+describe('LogViewer - Program DataFetcher', () => {\n+  let dataFetcher: ProgramDataFetcher;\n+  beforeEach(() => {\n+    dataFetcher = new ProgramDataFetcher(PROGRAM_INFO);\n+  });\n+\n+  it('should initialize without system logs', () => {\n+    expect(dataFetcher.getIncludeSystemLogs()).toBe(false);\n+  });\n+\n+  it('should be able to include system logs', () => {\n+    const initSpy = jest.spyOn(dataFetcher, 'init');\n+    const prevLogsSpy = jest.spyOn(MyProgramApi, 'prevLogs');\n+    dataFetcher.setIncludeSystemLogs(true).subscribe();\n+    expect(dataFetcher.getIncludeSystemLogs()).toBe(true);\n+    expect(initSpy).toHaveBeenCalled();\n+    expect(prevLogsSpy).toHaveBeenCalledWith({\n+      ...BASE_LOGS_PARAMS,\n+      filter: 'loglevel=INFO',\n+    });\n+    initSpy.mockRestore();\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('should default log level to INFO', () => {\n+    expect(dataFetcher.getLogLevel()).toBe(LogLevel.INFO);\n+  });\n+\n+  it('should set correct log level', () => {\n+    const initSpy = jest.spyOn(dataFetcher, 'init');\n+    const prevLogsSpy = jest.spyOn(MyProgramApi, 'prevLogs');\n+    dataFetcher.setLogLevel(LogLevel.TRACE).subscribe();\n+    expect(dataFetcher.getLogLevel()).toBe(LogLevel.TRACE);\n+    expect(initSpy).toHaveBeenCalled();\n+    expect(prevLogsSpy).toHaveBeenCalledWith({\n+      ...BASE_LOGS_PARAMS,\n+      filter: `loglevel=TRACE ${BASE_FILTER}`,\n+    });\n+    initSpy.mockRestore();\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('should fetch the next set of logs', () => {\n+    const nextLogsSpy = jest.spyOn(MyProgramApi, 'nextLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getNext().subscribe();\n+      expect(nextLogsSpy).toHaveBeenCalledWith({\n+        ...BASE_LOGS_PARAMS,\n+        fromOffset: '2',\n+      });\n+    });\n+    nextLogsSpy.mockRestore();\n+  });\n+\n+  it('should fetch the previous set of logs', () => {\n+    const prevLogsSpy = jest.spyOn(MyProgramApi, 'prevLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getNext().subscribe();\n+      expect(prevLogsSpy).toHaveBeenCalledWith({\n+        ...BASE_LOGS_PARAMS,\n+        fromOffset: '1',\n+      });\n+    });\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('getLast should fetch logs without offset', () => {\n+    const prevLogsSpy = jest.spyOn(MyProgramApi, 'prevLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getLast().subscribe();\n+      expect(prevLogsSpy).toHaveBeenCalledWith(BASE_LOGS_PARAMS);\n+    });\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('getFirst should fetch logs without offset', () => {\n+    const nextLogsSpy = jest.spyOn(MyProgramApi, 'nextLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getLast().subscribe();", "originalCommit": "5986fbd68a518ce4397ea3842ad0f4616a7aebbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f5f14abe423a154faf6a2118c39283708221afd", "url": "https://github.com/cdapio/cdap/commit/0f5f14abe423a154faf6a2118c39283708221afd", "message": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "committedDate": "2020-10-30T22:53:45Z", "type": "forcePushed"}, {"oid": "4168c4f40c5bd97ea9cdf54f6c61b99cae922493", "url": "https://github.com/cdapio/cdap/commit/4168c4f40c5bd97ea9cdf54f6c61b99cae922493", "message": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "committedDate": "2020-10-30T22:55:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTExNg==", "url": "https://github.com/cdapio/cdap/pull/12804#discussion_r515435116", "bodyText": "Should this be getPrev? (sorry I missed this before)", "author": "njbriggs", "createdAt": "2020-10-31T00:47:36Z", "path": "cdap-ui/app/cdap/components/LogViewer/DataFetcher/__tests__/PreviewDataFetcher.test.ts", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+jest.unmock('components/LogViewer/DataFetcher/PreviewDataFetcher');\n+import PreviewDataFetcher from 'components/LogViewer/DataFetcher/PreviewDataFetcher';\n+import { LogLevel } from 'components/LogViewer/types';\n+import { MyPreviewApi } from 'api/preview';\n+\n+const PREVIEW_INFO = {\n+  namespace: 'default',\n+  previewId: 'preview-id',\n+};\n+\n+const BASE_FILTER = 'AND .origin=plugin OR MDC:eventType=lifecycle OR MDC:eventType=userLog';\n+const BASE_LOGS_PARAMS = {\n+  namespace: PREVIEW_INFO.namespace,\n+  previewId: PREVIEW_INFO.previewId,\n+  max: 50,\n+  format: 'json',\n+  filter: `loglevel=INFO ${BASE_FILTER}`,\n+};\n+\n+describe('LogViewer - Preview DataFetcher', () => {\n+  let dataFetcher: PreviewDataFetcher;\n+\n+  beforeEach(() => {\n+    dataFetcher = new PreviewDataFetcher(PREVIEW_INFO);\n+  });\n+\n+  it('should initialize without system logs', () => {\n+    expect(dataFetcher.getIncludeSystemLogs()).toBe(false);\n+  });\n+\n+  it('should be able to include system logs', () => {\n+    const initSpy = jest.spyOn(dataFetcher, 'init');\n+    const prevLogsSpy = jest.spyOn(MyPreviewApi, 'prevLogs');\n+    dataFetcher.setIncludeSystemLogs(true).subscribe();\n+    expect(dataFetcher.getIncludeSystemLogs()).toBe(true);\n+    expect(initSpy).toHaveBeenCalled();\n+    expect(prevLogsSpy).toHaveBeenCalledWith({\n+      ...BASE_LOGS_PARAMS,\n+      filter: 'loglevel=INFO',\n+    });\n+    initSpy.mockRestore();\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('should default log level to INFO', () => {\n+    expect(dataFetcher.getLogLevel()).toBe(LogLevel.INFO);\n+  });\n+\n+  it('should set correct log level', () => {\n+    const initSpy = jest.spyOn(dataFetcher, 'init');\n+    const prevLogsSpy = jest.spyOn(MyPreviewApi, 'prevLogs');\n+    dataFetcher.setLogLevel(LogLevel.TRACE).subscribe();\n+    expect(dataFetcher.getLogLevel()).toBe(LogLevel.TRACE);\n+    expect(initSpy).toHaveBeenCalled();\n+    expect(prevLogsSpy).toHaveBeenCalledWith({\n+      ...BASE_LOGS_PARAMS,\n+      filter: `loglevel=TRACE ${BASE_FILTER}`,\n+    });\n+    initSpy.mockRestore();\n+    prevLogsSpy.mockRestore();\n+  });\n+\n+  it('should fetch the next set of logs', () => {\n+    const nextLogsSpy = jest.spyOn(MyPreviewApi, 'nextLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getNext().subscribe();\n+      expect(nextLogsSpy).toHaveBeenCalledWith({\n+        ...BASE_LOGS_PARAMS,\n+        fromOffset: '2',\n+      });\n+    });\n+    nextLogsSpy.mockRestore();\n+  });\n+\n+  it('should fetch the previous set of logs', () => {\n+    const prevLogsSpy = jest.spyOn(MyPreviewApi, 'prevLogs');\n+    dataFetcher.init().subscribe(() => {\n+      dataFetcher.getNext().subscribe();", "originalCommit": "4168c4f40c5bd97ea9cdf54f6c61b99cae922493", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0MDk3OQ==", "url": "https://github.com/cdapio/cdap/pull/12804#discussion_r515440979", "bodyText": "fixed for both", "author": "elfenheart", "createdAt": "2020-10-31T01:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTExNg=="}], "type": "inlineReview"}, {"oid": "933fb376f24ceb99fc9ae892fab69b5824b4d361", "url": "https://github.com/cdapio/cdap/commit/933fb376f24ceb99fc9ae892fab69b5824b4d361", "message": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "committedDate": "2020-10-31T01:33:57Z", "type": "forcePushed"}, {"oid": "8a1f82d2ba13f53403719daa52fa2b8a222e2e1b", "url": "https://github.com/cdapio/cdap/commit/8a1f82d2ba13f53403719daa52fa2b8a222e2e1b", "message": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "committedDate": "2020-11-01T17:46:36Z", "type": "forcePushed"}, {"oid": "32fdf79e558493a47ae1577218b85318ba864704", "url": "https://github.com/cdapio/cdap/commit/32fdf79e558493a47ae1577218b85318ba864704", "message": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "committedDate": "2020-11-01T18:07:21Z", "type": "forcePushed"}, {"oid": "57e01817a8a5f7e00d3c95139a442c7282a702e4", "url": "https://github.com/cdapio/cdap/commit/57e01817a8a5f7e00d3c95139a442c7282a702e4", "message": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "committedDate": "2020-11-03T19:42:32Z", "type": "commit"}, {"oid": "57e01817a8a5f7e00d3c95139a442c7282a702e4", "url": "https://github.com/cdapio/cdap/commit/57e01817a8a5f7e00d3c95139a442c7282a702e4", "message": "[CDAP-17334] Add Unit Tests for LogViewer DataFetchers", "committedDate": "2020-11-03T19:42:32Z", "type": "forcePushed"}]}