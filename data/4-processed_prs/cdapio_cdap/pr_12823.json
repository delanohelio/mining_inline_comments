{"pr_number": 12823, "pr_title": "[CDAP-16889] replication unit tests", "pr_createdAt": "2020-10-26T20:35:50Z", "pr_url": "https://github.com/cdapio/cdap/pull/12823", "timeline": [{"oid": "01119155912d9932aa5685c7326e86b39e1520b2", "url": "https://github.com/cdapio/cdap/commit/01119155912d9932aa5685c7326e86b39e1520b2", "message": "[CDAP-16889] Add unit tests for replication utilities", "committedDate": "2020-12-14T20:54:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc5NTc2OQ==", "url": "https://github.com/cdapio/cdap/pull/12823#discussion_r542795769", "bodyText": "nit: Since there are 3 arguments can there be testcases for individual validations?  For instance,\n\nWhat happens if tables is provided as an empty array?\nCan the tables be passed but with no columns?\ncan dmlBlacklist be an empty map or object?\n\nI am sure the type checks are handled by ts but since the tables and columns are something that we fetch from backend checking if we need additional validations", "author": "ajainarayanan", "createdAt": "2020-12-14T21:15:08Z", "path": "cdap-ui/app/cdap/components/Replicator/utilities/__tests__/utilities.test.ts", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { generateTableKey, constructTablesSelection, DML } from 'components/Replicator/utilities';\n+import { List, Map, Set } from 'immutable';\n+\n+type IColumn = Map<string, string>;\n+\n+describe('Replication Utilities', () => {\n+  describe('Generate Table Key', () => {\n+    const DB = 'dbName';\n+    const TABLE = 'tableName';\n+\n+    const CORRECT_KEY = `db-${DB}-table-${TABLE}`;\n+\n+    it('should generate correct key when tableInfo is plain object', () => {\n+      const tableInfo = {\n+        database: DB,\n+        table: TABLE,\n+      };\n+\n+      const key = generateTableKey(tableInfo);\n+      expect(key).toBe(CORRECT_KEY);\n+    });\n+\n+    it('should  generate correct key when tableInfo is an Immutable Map', () => {\n+      const tableInfo = Map({\n+        database: DB,\n+        table: TABLE,\n+      });\n+\n+      const key = generateTableKey(tableInfo);\n+      expect(key).toBe(CORRECT_KEY);\n+    });\n+  });\n+\n+  describe('Construct Table Selection', () => {\n+    let tables: Map<string, Map<string, string>> = Map();\n+    let columns: Map<string, List<IColumn>> = Map();\n+    const dmlBlacklist: Map<string, Set<DML>> = Map();\n+\n+    beforeAll(() => {\n+      // Generate tables\n+      const rawTable = [\n+        {\n+          database: 'db1',\n+          table: 'table1',\n+          schema: 'schema1',\n+        },\n+        {\n+          database: 'db1',\n+          table: 'table2',\n+          schema: 'schema1',\n+        },\n+        {\n+          database: 'db1',\n+          table: 'table3',\n+          schema: 'schema1',\n+        },\n+      ];\n+\n+      rawTable.forEach((tableInfo) => {\n+        const key = generateTableKey(tableInfo);\n+        tables = tables.set(key, Map(tableInfo));\n+\n+        let rawColumns = List<IColumn>();\n+        rawColumns = rawColumns.push(\n+          Map({\n+            name: `col-${tableInfo.table}-1`,\n+            type: 'string',\n+          })\n+        );\n+        rawColumns = rawColumns.push(\n+          Map({\n+            name: `col-${tableInfo.table}-2`,\n+            type: 'string',\n+          })\n+        );\n+\n+        columns = columns.set(key, rawColumns);\n+      });\n+    });\n+\n+    it('should return empty array when no table is selected', () => {\n+      const result = constructTablesSelection(null, null, null);", "originalCommit": "01119155912d9932aa5685c7326e86b39e1520b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzNDM1OQ==", "url": "https://github.com/cdapio/cdap/pull/12823#discussion_r542834359", "bodyText": "added more tests", "author": "elfenheart", "createdAt": "2020-12-14T21:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc5NTc2OQ=="}], "type": "inlineReview"}, {"oid": "f9f603aa93529960b73ce4b91dc81ba927a04244", "url": "https://github.com/cdapio/cdap/commit/f9f603aa93529960b73ce4b91dc81ba927a04244", "message": "[CDAP-16889] Add unit tests for replication utilities", "committedDate": "2020-12-14T21:50:35Z", "type": "commit"}, {"oid": "f9f603aa93529960b73ce4b91dc81ba927a04244", "url": "https://github.com/cdapio/cdap/commit/f9f603aa93529960b73ce4b91dc81ba927a04244", "message": "[CDAP-16889] Add unit tests for replication utilities", "committedDate": "2020-12-14T21:50:35Z", "type": "forcePushed"}]}