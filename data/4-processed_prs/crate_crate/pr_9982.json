{"pr_number": 9982, "pr_title": "Add cast support for the string type with the length limit.", "pr_createdAt": "2020-05-22T12:08:18Z", "pr_url": "https://github.com/crate/crate/pull/9982", "timeline": [{"oid": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee", "url": "https://github.com/crate/crate/commit/29b28869a2bbdfe2547c1059e2e97d7f87ca69ee", "message": "Add cast support for the string type with the length limit.", "committedDate": "2020-05-22T12:09:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNDExNg==", "url": "https://github.com/crate/crate/pull/9982#discussion_r429224116", "bodyText": "maybe we can optimize by creating two a dedicated unbound string type?", "author": "kovrus", "createdAt": "2020-05-22T12:44:37Z", "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -123,39 +123,37 @@ public String value(Object value) {\n         if (value == null) {\n             return null;\n         }\n+        final String str;\n         if (value instanceof String) {\n-            return (String) value;\n-        }\n-        if (value instanceof BytesRef) {\n-            return ((BytesRef) value).utf8ToString();\n-        }\n-        if (value instanceof Boolean) {\n-            if ((boolean) value) {\n-                return T;\n-            } else {\n-                return F;\n-            }\n-        }\n-        if (value instanceof Map) {\n+            str = (String) value;\n+        } else if (value instanceof BytesRef) {\n+            str = ((BytesRef) value).utf8ToString();\n+        } else if (value instanceof Boolean) {\n+            str = (boolean) value ? T : F;\n+        } else if (value instanceof Map) {\n             try {\n                 //noinspection unchecked\n-                return Strings.toString(XContentFactory.jsonBuilder().map((Map<String, ?>) value));\n+                str = Strings.toString(XContentFactory.jsonBuilder().map((Map<String, ?>) value));\n             } catch (IOException e) {\n                 throw new IllegalArgumentException(\"Cannot cast `\" + value + \"` to type TEXT\", e);\n             }\n-        }\n-        if (value instanceof Collection) {\n+        } else if (value instanceof Collection) {\n             throw new IllegalArgumentException(\n                 String.format(Locale.ENGLISH, \"Cannot cast %s to type TEXT\", value));\n-        }\n-        if (value.getClass().isArray()) {\n+        } else if (value.getClass().isArray()) {\n             throw new IllegalArgumentException(\n                 String.format(Locale.ENGLISH, \"Cannot cast %s to type TEXT\", Arrays.toString((Object[]) value)));\n+        } else if (value instanceof TimeValue) {\n+            str = ((TimeValue) value).getStringRep();\n+        } else {\n+            str = value.toString();\n         }\n-        if (value instanceof TimeValue) {\n-            return ((TimeValue) value).getStringRep();\n+\n+        if (unbound() || str.length() <= lengthLimit) {", "originalCommit": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMDQ3Mg==", "url": "https://github.com/crate/crate/pull/9982#discussion_r429230472", "bodyText": "Not sure if it is worth it. Maybe do a quick JMH benchmark to get a feeling of the impact?", "author": "mfussenegger", "createdAt": "2020-05-22T12:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNDExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MTkyOA==", "url": "https://github.com/crate/crate/pull/9982#discussion_r429261928", "bodyText": "The benchmark shows no difference.\n# Warmup: 5 iterations, 10 s each\n# Measurement: 5 iterations, 10 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Average time, time/op\n\nBenchmark                                          Mode  Cnt   Score    Error  Units\nStringTypeTest.withoueUnboundOrLengthLimitCheck    avgt   25  \u2248 10\u207b\u2075           ms/op\nStringTypeTest.withUnboundOrLengthLimitCheck       avgt   25  \u2248 10\u207b\u2075           ms/op", "author": "kovrus", "createdAt": "2020-05-22T13:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNDExNg=="}], "type": "inlineReview"}, {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "url": "https://github.com/crate/crate/commit/8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "message": "Add cast support for the string type with the length limit.", "committedDate": "2020-05-22T14:06:24Z", "type": "commit"}, {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "url": "https://github.com/crate/crate/commit/8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "message": "Add cast support for the string type with the length limit.", "committedDate": "2020-05-22T14:06:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2ODQ2MQ==", "url": "https://github.com/crate/crate/pull/9982#discussion_r429268461", "bodyText": "i've added another assertion with a string literal that contains whitespaces, but it shouldn't be different from any other literal at this point. I am not sure whether now it needs a dedicated use test scenario.", "author": "kovrus", "createdAt": "2020-05-22T14:08:25Z", "path": "server/src/test/java/io/crate/types/StringTypeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.test.integration.CrateUnitTest;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StringTypeTest extends CrateUnitTest {\n+\n+    @Test\n+    public void test_convert_boolean_to_text() {\n+        assertThat(DataTypes.STRING.value(true), is(\"t\"));\n+        assertThat(DataTypes.STRING.value(false), is(\"f\"));\n+    }\n+\n+    @Test\n+    public void test_convert_long_to_text() {\n+        assertThat(DataTypes.STRING.value(123L), is(\"123\"));\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_length_limit() {\n+        var stringDataType = StringType.of(10);\n+        assertThat(stringDataType.unbound(), is(false));\n+        assertThat(stringDataType.lengthLimit(), is(10));\n+    }\n+\n+    @Test\n+    public void test_text_type_without_length_limit_on_string_literal() {\n+        assertThat(StringType.INSTANCE.value(\"abc\"), is(\"abc\"));\n+    }\n+\n+    @Test\n+    public void test_text_type_with_length_on_string_literal_of_length_gt_length_limit_truncates_chars() {\n+        assertThat(StringType.of(1).value(\"abcde\"), is(\"a\"));\n+        assertThat(StringType.of(2).value(\"a    \"), is(\"a \"));", "originalCommit": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwNDQ0Mg==", "url": "https://github.com/crate/crate/pull/9982#discussion_r429304442", "bodyText": "I realize that the test case was just moved, but maybe for a separate commit or a follow up:\nMaybe the error could also give a hint on what would be correct. E.g. StringType can only have a single parameter value, received: ...\nAlso in the other error messages. E.g. with 0 it could point out that it must be > 0.", "author": "mfussenegger", "createdAt": "2020-05-22T15:10:27Z", "path": "server/src/test/java/io/crate/types/StringTypeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.test.integration.CrateUnitTest;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StringTypeTest extends CrateUnitTest {\n+\n+    @Test\n+    public void test_convert_boolean_to_text() {\n+        assertThat(DataTypes.STRING.value(true), is(\"t\"));\n+        assertThat(DataTypes.STRING.value(false), is(\"f\"));\n+    }\n+\n+    @Test\n+    public void test_convert_long_to_text() {\n+        assertThat(DataTypes.STRING.value(123L), is(\"123\"));\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_length_limit() {\n+        var stringDataType = StringType.of(10);\n+        assertThat(stringDataType.unbound(), is(false));\n+        assertThat(stringDataType.lengthLimit(), is(10));\n+    }\n+\n+    @Test\n+    public void test_text_type_without_length_limit_on_string_literal() {\n+        assertThat(StringType.INSTANCE.value(\"abc\"), is(\"abc\"));\n+    }\n+\n+    @Test\n+    public void test_text_type_with_length_on_string_literal_of_length_gt_length_limit_truncates_chars() {\n+        assertThat(StringType.of(1).value(\"abcde\"), is(\"a\"));\n+        assertThat(StringType.of(2).value(\"a    \"), is(\"a \"));\n+    }\n+\n+    @Test\n+    public void test_text_type_with_length_on_string_literal_of_length_lte_length() {\n+        assertThat(StringType.of(5).value(\"abc\"), is(\"abc\"));\n+        assertThat(StringType.of(1).value(\"a\"), is(\"a\"));\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_negative_length_limit_throws_exception() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"Invalid text data type length limit: -1\");\n+        StringType.of(-1);\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_zero_length_limit_throws_exception() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"Invalid text data type length limit: 0\");\n+        StringType.of(0);\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_wrong_number_of_parameters_throws_exception() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"The number of parameters for the text data is wrong: 2\");", "originalCommit": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "url": "https://github.com/crate/crate/commit/1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "message": "Improve error messages for StringType#of preconditions.", "committedDate": "2020-05-25T08:33:03Z", "type": "commit"}, {"oid": "1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "url": "https://github.com/crate/crate/commit/1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "message": "Improve error messages for StringType#of preconditions.", "committedDate": "2020-05-25T08:33:03Z", "type": "forcePushed"}]}