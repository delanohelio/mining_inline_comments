{"pr_number": 9829, "pr_title": "Refactor all array scalars to new function registry", "pr_createdAt": "2020-03-30T14:59:50Z", "pr_url": "https://github.com/crate/crate/pull/9829", "timeline": [{"oid": "21f3083fad883910c0176d6e2fc3fc01951430d6", "url": "https://github.com/crate/crate/commit/21f3083fad883910c0176d6e2fc3fc01951430d6", "message": "Refactor all array scalars to new function registry", "committedDate": "2020-03-30T15:24:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzg3NQ==", "url": "https://github.com/crate/crate/pull/9829#discussion_r400317875", "bodyText": "The rule that the first array dictates the array element type currently isn't supported by the new signature binder.\nWe also documented it here https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#array-unique-first-array-second-array, I didn't know. This doctest fails now.\nCurrently the precedence dictates the common type and thus element type. I wonder why we've implemented array_unique it like that, any input here? I couldn't find any resource defining/describing this behaviour.", "author": "seut", "createdAt": "2020-03-30T16:14:11Z", "path": "sql/src/test/java/io/crate/expression/scalar/ArrayUniqueFunctionTest.java", "diffHunk": "@@ -99,7 +99,7 @@ public void testOneArgument() throws Exception {\n \n     @Test\n     public void testDifferentButConvertableInnerTypes() throws Exception {\n-        assertEvaluate(\"array_unique([10, 20], [10.1, 20.0])\", Arrays.asList(10L, 20L));", "originalCommit": "21f3083fad883910c0176d6e2fc3fc01951430d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxNzU2Mw==", "url": "https://github.com/crate/crate/pull/9829#discussion_r400717563", "bodyText": "I don't think there was a good reason for the behaviour.\nNot sure  if it's worth keeping the behaviour for BWC. Breaking changes entry?", "author": "mfussenegger", "createdAt": "2020-03-31T08:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NTc4MA==", "url": "https://github.com/crate/crate/pull/9829#discussion_r400745780", "bodyText": "+1 for changing with a breaking change.\nI've also checked the code history and found no argument to that behaviour. I think this was related to missing precedence support at the time when this was implemented.\nSupporting it would add (quite) some extra complexity to the signature binder.\nSo I'd adjust the documentation and add a breaking changes entry.", "author": "seut", "createdAt": "2020-03-31T08:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxNzg3NQ=="}], "type": "inlineReview"}, {"oid": "2415e47e82113792da10422f4b465f7119be8612", "url": "https://github.com/crate/crate/commit/2415e47e82113792da10422f4b465f7119be8612", "message": "fixup! Refactor all array scalars to new function registry", "committedDate": "2020-03-31T13:32:00Z", "type": "forcePushed"}, {"oid": "b85fbd8f256b70c725d51e132bf234425fbc2c5f", "url": "https://github.com/crate/crate/commit/b85fbd8f256b70c725d51e132bf234425fbc2c5f", "message": "Refactor all array scalars to new function registry", "committedDate": "2020-03-31T13:41:28Z", "type": "forcePushed"}, {"oid": "eddb7cc3a245b971e4446145cc3ea36bd927e66a", "url": "https://github.com/crate/crate/commit/eddb7cc3a245b971e4446145cc3ea36bd927e66a", "message": "Refactor all array scalars to new function registry", "committedDate": "2020-03-31T14:56:23Z", "type": "commit"}, {"oid": "eddb7cc3a245b971e4446145cc3ea36bd927e66a", "url": "https://github.com/crate/crate/commit/eddb7cc3a245b971e4446145cc3ea36bd927e66a", "message": "Refactor all array scalars to new function registry", "committedDate": "2020-03-31T14:56:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MzU1Mg==", "url": "https://github.com/crate/crate/pull/9829#discussion_r401043552", "bodyText": "uses*", "author": "matthijskrul", "createdAt": "2020-03-31T16:19:11Z", "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -42,6 +42,10 @@ Unreleased Changes\n Breaking Changes\n ================\n \n+- The ``array_unique`` scalar function use a common element type based on the", "originalCommit": "eddb7cc3a245b971e4446145cc3ea36bd927e66a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}