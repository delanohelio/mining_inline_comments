{"pr_number": 9944, "pr_title": "Session based optimizer configuration", "pr_createdAt": "2020-05-13T10:03:59Z", "pr_url": "https://github.com/crate/crate/pull/9944", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMzQ5MQ==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424403491", "bodyText": "A volatile would also work - no CAS operation are used.", "author": "mfussenegger", "createdAt": "2020-05-13T12:39:08Z", "path": "sql/src/main/java/io/crate/planner/operators/RewriteInsertFromSubQueryToInsertFromValues.java", "diffHunk": "@@ -23,22 +23,26 @@\n package io.crate.planner.operators;\n \n import io.crate.expression.tablefunctions.ValuesFunction;\n+import io.crate.metadata.Functions;\n import io.crate.metadata.TransactionContext;\n import io.crate.planner.optimizer.Rule;\n import io.crate.planner.optimizer.matcher.Capture;\n import io.crate.planner.optimizer.matcher.Captures;\n import io.crate.planner.optimizer.matcher.Pattern;\n import io.crate.statistics.TableStats;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n import static io.crate.planner.optimizer.matcher.Pattern.typeOf;\n import static io.crate.planner.optimizer.matcher.Patterns.source;\n \n public class RewriteInsertFromSubQueryToInsertFromValues implements Rule<Insert> {\n \n     private final Capture<TableFunction> capture;\n     private final Pattern<Insert> pattern;\n+    private final AtomicBoolean enabled = new AtomicBoolean(true);", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwMzc4MQ==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424403781", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String OPTIMIZER_RULE = \"optimizer_\";\n          \n          \n            \n                private static final String OPTIMIZER_SETTING_PREFIX = \"optimizer_\";", "author": "mfussenegger", "createdAt": "2020-05-13T12:39:38Z", "path": "sql/src/main/java/io/crate/planner/optimizer/LoadedRules.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.CaseFormat;\n+import io.crate.common.collections.Lists2;\n+import io.crate.metadata.settings.session.SessionSetting;\n+import io.crate.metadata.settings.session.SessionSettingProvider;\n+import io.crate.planner.operators.RewriteInsertFromSubQueryToInsertFromValues;\n+import io.crate.planner.optimizer.rule.DeduplicateOrder;\n+import io.crate.planner.optimizer.rule.MergeAggregateAndCollectToCount;\n+import io.crate.planner.optimizer.rule.MergeFilterAndCollect;\n+import io.crate.planner.optimizer.rule.MergeFilters;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathFetchOrEval;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathGroupBy;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathHashJoin;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathNestedLoop;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathOrder;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathProjectSet;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathRename;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathUnion;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathWindowAgg;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathFetchOrEval;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathNestedLoop;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathRename;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathUnion;\n+import io.crate.planner.optimizer.rule.RemoveRedundantFetchOrEval;\n+import io.crate.planner.optimizer.rule.RewriteCollectToGet;\n+import io.crate.planner.optimizer.rule.RewriteFilterOnOuterJoinToInnerJoin;\n+import io.crate.planner.optimizer.rule.RewriteGroupByKeysLimitToTopNDistinct;\n+import io.crate.planner.optimizer.rule.RewriteToQueryThenFetch;\n+import io.crate.types.DataTypes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class LoadedRules implements SessionSettingProvider {\n+\n+    private static final String OPTIMIZER_RULE = \"optimizer_\";", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNDc3NQ==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424404775", "bodyText": "Maybe would be worth adding some docs to explain what this is for", "author": "mfussenegger", "createdAt": "2020-05-13T12:41:08Z", "path": "sql/src/main/java/io/crate/metadata/settings/session/SessionSettingProvider.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.metadata.settings.session;\n+\n+import io.crate.planner.optimizer.Rule;\n+\n+import java.util.List;\n+\n+public interface SessionSettingProvider {", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNTI5OQ==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424405299", "bodyText": "Would a HashMap also do? Or where is the stable ordering requirement coming from?", "author": "mfussenegger", "createdAt": "2020-05-13T12:41:52Z", "path": "sql/src/main/java/io/crate/metadata/settings/session/SessionSettingRegistry.java", "diffHunk": "@@ -104,7 +111,18 @@\n                     DataTypes.STRING.getName()\n                 )\n             )\n-            .build();\n+        .putAll(getSessionSettings())\n+        .build();\n+\n+    private static Map<String, SessionSetting<?>> getSessionSettings() {\n+        var result = new LinkedHashMap<String, SessionSetting<?>>();", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNzgyOA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424407828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.rules = loadRules(rulesToInclude);\n          \n          \n            \n                this.rules = new LoadedRules().getRules(rulesToInclude);\n          \n      \n    \n    \n  \n\nloadRules is a shallow method. I don't think there is a benefit in having a separate method?", "author": "mfussenegger", "createdAt": "2020-05-13T12:46:00Z", "path": "sql/src/main/java/io/crate/planner/optimizer/Optimizer.java", "diffHunk": "@@ -41,22 +42,25 @@\n \n     private final List<Rule<?>> rules;\n     private final Supplier<Version> minNodeVersionInCluster;\n+    private final Functions functions;\n \n-    public Optimizer(List<Rule<?>> rules, Supplier<Version> minNodeVersionInCluster) {\n-        this.rules = rules;\n+    public Optimizer(Functions functions, Supplier<Version> minNodeVersionInCluster, List<Class<? extends Rule<?>>> rulesToInclude) {\n+        this.rules = loadRules(rulesToInclude);", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwODUwMA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424408500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LogicalPlan optimizedRoot = tryApplyRules(rules, plan, tableStats, txnCtx);\n          \n          \n            \n                    LogicalPlan optimizedRoot = tryApplyRules(plan, tableStats, txnCtx);\n          \n      \n    \n    \n  \n\nThere is still a rules attribute.", "author": "mfussenegger", "createdAt": "2020-05-13T12:47:08Z", "path": "sql/src/main/java/io/crate/planner/optimizer/Optimizer.java", "diffHunk": "@@ -41,22 +42,25 @@\n \n     private final List<Rule<?>> rules;\n     private final Supplier<Version> minNodeVersionInCluster;\n+    private final Functions functions;\n \n-    public Optimizer(List<Rule<?>> rules, Supplier<Version> minNodeVersionInCluster) {\n-        this.rules = rules;\n+    public Optimizer(Functions functions, Supplier<Version> minNodeVersionInCluster, List<Class<? extends Rule<?>>> rulesToInclude) {\n+        this.rules = loadRules(rulesToInclude);\n         this.minNodeVersionInCluster = minNodeVersionInCluster;\n+        this.functions = functions;\n     }\n \n     public LogicalPlan optimize(LogicalPlan plan, TableStats tableStats, TransactionContext txnCtx) {\n-        LogicalPlan optimizedRoot = tryApplyRules(plan, tableStats, txnCtx);\n+        LogicalPlan optimizedRoot = tryApplyRules(rules, plan, tableStats, txnCtx);", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwODU4OA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424408588", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        rules,", "author": "mfussenegger", "createdAt": "2020-05-13T12:47:16Z", "path": "sql/src/main/java/io/crate/planner/optimizer/Optimizer.java", "diffHunk": "@@ -41,22 +42,25 @@\n \n     private final List<Rule<?>> rules;\n     private final Supplier<Version> minNodeVersionInCluster;\n+    private final Functions functions;\n \n-    public Optimizer(List<Rule<?>> rules, Supplier<Version> minNodeVersionInCluster) {\n-        this.rules = rules;\n+    public Optimizer(Functions functions, Supplier<Version> minNodeVersionInCluster, List<Class<? extends Rule<?>>> rulesToInclude) {\n+        this.rules = loadRules(rulesToInclude);\n         this.minNodeVersionInCluster = minNodeVersionInCluster;\n+        this.functions = functions;\n     }\n \n     public LogicalPlan optimize(LogicalPlan plan, TableStats tableStats, TransactionContext txnCtx) {\n-        LogicalPlan optimizedRoot = tryApplyRules(plan, tableStats, txnCtx);\n+        LogicalPlan optimizedRoot = tryApplyRules(rules, plan, tableStats, txnCtx);\n         return tryApplyRules(\n+            rules,", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwODcwMg==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424408702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private LogicalPlan tryApplyRules(List<Rule<?>> rules, LogicalPlan plan, TableStats tableStats, TransactionContext txnCtx) {\n          \n          \n            \n                private LogicalPlan tryApplyRules(LogicalPlan plan, TableStats tableStats, TransactionContext txnCtx) {", "author": "mfussenegger", "createdAt": "2020-05-13T12:47:27Z", "path": "sql/src/main/java/io/crate/planner/optimizer/Optimizer.java", "diffHunk": "@@ -41,22 +42,25 @@\n \n     private final List<Rule<?>> rules;\n     private final Supplier<Version> minNodeVersionInCluster;\n+    private final Functions functions;\n \n-    public Optimizer(List<Rule<?>> rules, Supplier<Version> minNodeVersionInCluster) {\n-        this.rules = rules;\n+    public Optimizer(Functions functions, Supplier<Version> minNodeVersionInCluster, List<Class<? extends Rule<?>>> rulesToInclude) {\n+        this.rules = loadRules(rulesToInclude);\n         this.minNodeVersionInCluster = minNodeVersionInCluster;\n+        this.functions = functions;\n     }\n \n     public LogicalPlan optimize(LogicalPlan plan, TableStats tableStats, TransactionContext txnCtx) {\n-        LogicalPlan optimizedRoot = tryApplyRules(plan, tableStats, txnCtx);\n+        LogicalPlan optimizedRoot = tryApplyRules(rules, plan, tableStats, txnCtx);\n         return tryApplyRules(\n+            rules,\n             optimizedRoot.replaceSources(Lists2.map(optimizedRoot.sources(), x -> optimize(x, tableStats, txnCtx))),\n             tableStats,\n             txnCtx\n         );\n     }\n \n-    private LogicalPlan tryApplyRules(LogicalPlan plan, TableStats tableStats, TransactionContext txnCtx) {\n+    private LogicalPlan tryApplyRules(List<Rule<?>> rules, LogicalPlan plan, TableStats tableStats, TransactionContext txnCtx) {", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwOTYzNw==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424409637", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private List<Rule<?>> loadRules(List<Class<? extends Rule<?>>> rulesToInclude) {\n          \n          \n            \n                    return new LoadedRules().getRules(rulesToInclude);\n          \n          \n            \n                }", "author": "mfussenegger", "createdAt": "2020-05-13T12:48:54Z", "path": "sql/src/main/java/io/crate/planner/optimizer/Optimizer.java", "diffHunk": "@@ -92,4 +102,8 @@ private LogicalPlan tryApplyRules(LogicalPlan plan, TableStats tableStats, Trans\n             : \"Optimizer reached 10_000 iterations safety guard. This is an indication of a broken rule that matches again and again\";\n         return node;\n     }\n+\n+    private List<Rule<?>> loadRules(List<Class<? extends Rule<?>>> rulesToInclude) {\n+        return new LoadedRules().getRules(rulesToInclude);\n+    }", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxMDU0NQ==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424410545", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean couldMatchOnNull(@Nullable Symbol query, EvaluatingNormalizer normalizer) {\n          \n          \n            \n                private static boolean couldMatchOnNull(@Nullable Symbol query, EvaluatingNormalizer normalizer) {", "author": "mfussenegger", "createdAt": "2020-05-13T12:50:19Z", "path": "sql/src/main/java/io/crate/planner/optimizer/rule/RewriteFilterOnOuterJoinToInnerJoin.java", "diffHunk": "@@ -264,7 +276,7 @@ public LogicalPlan apply(Filter filter,\n         return splitQueries.isEmpty() ? newJoin : new Filter(newJoin, AndOperator.join(splitQueries.values()));\n     }\n \n-    private boolean couldMatchOnNull(@Nullable Symbol query) {\n+    private boolean couldMatchOnNull(@Nullable Symbol query, EvaluatingNormalizer normalizer) {", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxMjY5OA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r424412698", "bodyText": "I wonder if these should actually be instance local, and if we should have the Optimizer and SessionRegistry use the same instance. Otherwise in our tests where we simulate multiple nodes  within the same JVM we will have session settings shared across nodes. So our tests won't reflect real-world scenarios.", "author": "mfussenegger", "createdAt": "2020-05-13T12:53:37Z", "path": "sql/src/main/java/io/crate/planner/optimizer/LoadedRules.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.CaseFormat;\n+import io.crate.common.collections.Lists2;\n+import io.crate.metadata.settings.session.SessionSetting;\n+import io.crate.metadata.settings.session.SessionSettingProvider;\n+import io.crate.planner.operators.RewriteInsertFromSubQueryToInsertFromValues;\n+import io.crate.planner.optimizer.rule.DeduplicateOrder;\n+import io.crate.planner.optimizer.rule.MergeAggregateAndCollectToCount;\n+import io.crate.planner.optimizer.rule.MergeFilterAndCollect;\n+import io.crate.planner.optimizer.rule.MergeFilters;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathFetchOrEval;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathGroupBy;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathHashJoin;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathNestedLoop;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathOrder;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathProjectSet;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathRename;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathUnion;\n+import io.crate.planner.optimizer.rule.MoveFilterBeneathWindowAgg;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathFetchOrEval;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathNestedLoop;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathRename;\n+import io.crate.planner.optimizer.rule.MoveOrderBeneathUnion;\n+import io.crate.planner.optimizer.rule.RemoveRedundantFetchOrEval;\n+import io.crate.planner.optimizer.rule.RewriteCollectToGet;\n+import io.crate.planner.optimizer.rule.RewriteFilterOnOuterJoinToInnerJoin;\n+import io.crate.planner.optimizer.rule.RewriteGroupByKeysLimitToTopNDistinct;\n+import io.crate.planner.optimizer.rule.RewriteToQueryThenFetch;\n+import io.crate.types.DataTypes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class LoadedRules implements SessionSettingProvider {\n+\n+    private static final String OPTIMIZER_RULE = \"optimizer_\";\n+\n+    private static final List<Rule<?>> RULES = List.of(", "originalCommit": "121dd8cb86c8271a7c3e1a9521020a818b979164", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzMjkyOA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426432928", "bodyText": "The idea behind this is, to add more providers for other session settings.", "author": "mkleen", "createdAt": "2020-05-18T07:53:45Z", "path": "sql/src/main/java/io/crate/metadata/settings/session/SessionSettingModule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.metadata.settings.session;\n+\n+import io.crate.planner.optimizer.LoadedRules;\n+import org.elasticsearch.common.inject.AbstractModule;\n+import org.elasticsearch.common.inject.multibindings.Multibinder;\n+\n+public class SessionSettingModule extends AbstractModule {\n+\n+    @Override\n+    protected void configure() {\n+        bind(SessionSettingRegistry.class).asEagerSingleton();", "originalCommit": "4937d31b34e5dd5572ed6f48302993cae7a4e27b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MTUxNg==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426451516", "bodyText": "Could the loadedrules.rules(rulesToInclude) call be done on the call-site? The call-site already has both components available. It would have the advantage that the Optimizer could be more easily unit-tested as the dependencies stay smaller.", "author": "mfussenegger", "createdAt": "2020-05-18T08:25:23Z", "path": "sql/src/main/java/io/crate/planner/optimizer/Optimizer.java", "diffHunk": "@@ -41,10 +42,15 @@\n \n     private final List<Rule<?>> rules;\n     private final Supplier<Version> minNodeVersionInCluster;\n+    private final Functions functions;\n \n-    public Optimizer(List<Rule<?>> rules, Supplier<Version> minNodeVersionInCluster) {\n-        this.rules = rules;\n+    public Optimizer(Functions functions,\n+                     Supplier<Version> minNodeVersionInCluster,\n+                     LoadedRules loadedRules,\n+                     List<Class<? extends Rule<?>>> rulesToInclude) {", "originalCommit": "4937d31b34e5dd5572ed6f48302993cae7a4e27b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ4NDIwNA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426484204", "bodyText": "@Nomi @infoverload please have a look at this docs contribution.", "author": "mkleen", "createdAt": "2020-05-18T09:17:38Z", "path": "docs/config/session.rst", "diffHunk": "@@ -105,12 +104,24 @@ Supported session settings\n .. _conf-session-server_version:\n \n **server_version**\n-\n   | *Default:* ``10.5``\n   | *Modifiable:* ``no``\n \n   Shows the emulated ``PostgreSQL`` server version.\n \n+**optimizer**", "originalCommit": "5dbc0de5a1cb0526e93d7ef5984291a514141507", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9ab82f3feb9b247387bb9868c84dfdfd2f0b5ac", "url": "https://github.com/crate/crate/commit/d9ab82f3feb9b247387bb9868c84dfdfd2f0b5ac", "message": "Add documentation for optimizer session setting", "committedDate": "2020-05-18T12:48:09Z", "type": "forcePushed"}, {"oid": "3b82acf290bb78f2f4cc39773a7006f75a1cb632", "url": "https://github.com/crate/crate/commit/3b82acf290bb78f2f4cc39773a7006f75a1cb632", "message": "Add documentation for optimizer session setting", "committedDate": "2020-05-18T13:52:28Z", "type": "forcePushed"}, {"oid": "effbe61dbe3eae6d7251b9aca17d62e010dc4261", "url": "https://github.com/crate/crate/commit/effbe61dbe3eae6d7251b9aca17d62e010dc4261", "message": "Add session basesd optimizer configuration", "committedDate": "2020-05-18T14:18:44Z", "type": "forcePushed"}, {"oid": "d1bcead77a816697d24b31a8d2ba4f0e6a74c8c6", "url": "https://github.com/crate/crate/commit/d1bcead77a816697d24b31a8d2ba4f0e6a74c8c6", "message": "Add session basesd optimizer configuration", "committedDate": "2020-05-18T14:46:17Z", "type": "forcePushed"}, {"oid": "3f8fddfed7ecbb586b5f16a1beb625b94c9977c2", "url": "https://github.com/crate/crate/commit/3f8fddfed7ecbb586b5f16a1beb625b94c9977c2", "message": "Add session setting to configure optimizer rules.", "committedDate": "2020-05-18T14:47:56Z", "type": "forcePushed"}, {"oid": "d90676b5fe341b05dce6592fff841101e6752cb5", "url": "https://github.com/crate/crate/commit/d90676b5fe341b05dce6592fff841101e6752cb5", "message": "Add session setting to configure optimizer rules.", "committedDate": "2020-05-18T14:49:16Z", "type": "forcePushed"}, {"oid": "b7f55cc88f828c23097e4b63df7049a775c24227", "url": "https://github.com/crate/crate/commit/b7f55cc88f828c23097e4b63df7049a775c24227", "message": "Add `optimizer` session setting to configure optimizer rules.", "committedDate": "2020-05-18T14:50:53Z", "type": "forcePushed"}, {"oid": "c3ca28e5f3a9e99dbaf4324990f3a01039394f71", "url": "https://github.com/crate/crate/commit/c3ca28e5f3a9e99dbaf4324990f3a01039394f71", "message": "Add `optimizer` session setting to configure query optimizer rules.", "committedDate": "2020-05-18T14:55:40Z", "type": "forcePushed"}, {"oid": "cd0446915a55f7b39df46ed5c163d42df3e13a21", "url": "https://github.com/crate/crate/commit/cd0446915a55f7b39df46ed5c163d42df3e13a21", "message": "Add `optimizer` session setting to configure query optimizer rules.", "committedDate": "2020-05-18T14:58:14Z", "type": "forcePushed"}, {"oid": "fa2297c8c13625516287aa580930d3f3581dc54b", "url": "https://github.com/crate/crate/commit/fa2297c8c13625516287aa580930d3f3581dc54b", "message": "Add `optimizer` session setting to configure query optimizer rules.", "committedDate": "2020-05-18T17:48:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTY1Mw==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426825653", "bodyText": "user defined = user-defined", "author": "infoverload", "createdAt": "2020-05-18T18:46:19Z", "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -69,6 +69,9 @@ None\n Changes\n =======\n \n+- Added the :ref:`optimizer <conf-session-optimizer>` session setting\n+  to configure query optimizer rules.\n+\n - The JavaScript user defined function language is now enabled by default in", "originalCommit": "fa2297c8c13625516287aa580930d3f3581dc54b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTkzMA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426825930", "bodyText": "enterprise edition = Enterprise Edition", "author": "infoverload", "createdAt": "2020-05-18T18:46:58Z", "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -69,6 +69,9 @@ None\n Changes\n =======\n \n+- Added the :ref:`optimizer <conf-session-optimizer>` session setting\n+  to configure query optimizer rules.\n+\n - The JavaScript user defined function language is now enabled by default in\n   the CrateDB enterprise edition.", "originalCommit": "fa2297c8c13625516287aa580930d3f3581dc54b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNzM0NA==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426827344", "bodyText": "if = whether", "author": "infoverload", "createdAt": "2020-05-18T18:49:40Z", "path": "docs/config/session.rst", "diffHunk": "@@ -105,12 +104,26 @@ Supported session settings\n .. _conf-session-server_version:\n \n **server_version**\n-\n   | *Default:* ``10.5``\n   | *Modifiable:* ``no``\n \n   Shows the emulated ``PostgreSQL`` server version.\n \n+.. _conf-session-optimizer:\n+\n+**optimizer**\n+  | *Default:* ``true``\n+  | *Modifiable:* ``yes``\n+\n+  This setting indicates if a query optimizer rule is activated. The name of", "originalCommit": "fa2297c8c13625516287aa580930d3f3581dc54b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNzY0Mg==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426827642", "bodyText": "as suffix = as a suffix", "author": "infoverload", "createdAt": "2020-05-18T18:50:12Z", "path": "docs/config/session.rst", "diffHunk": "@@ -105,12 +104,26 @@ Supported session settings\n .. _conf-session-server_version:\n \n **server_version**\n-\n   | *Default:* ``10.5``\n   | *Modifiable:* ``no``\n \n   Shows the emulated ``PostgreSQL`` server version.\n \n+.. _conf-session-optimizer:\n+\n+**optimizer**\n+  | *Default:* ``true``\n+  | *Modifiable:* ``yes``\n+\n+  This setting indicates if a query optimizer rule is activated. The name of\n+  the query optimizer rule has to be provided as suffix as part of the setting", "originalCommit": "fa2297c8c13625516287aa580930d3f3581dc54b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyOTkzMg==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426829932", "bodyText": "For consistency, could say:\n\"The :ref:optimizer <conf-session-optimizer> session setting to configure query optimizer rules has been added.", "author": "infoverload", "createdAt": "2020-05-18T18:54:27Z", "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -69,6 +69,9 @@ None\n Changes\n =======\n \n+- Added the :ref:`optimizer <conf-session-optimizer>` session setting\n+  to configure query optimizer rules.", "originalCommit": "fa2297c8c13625516287aa580930d3f3581dc54b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMDU0Nw==", "url": "https://github.com/crate/crate/pull/9944#discussion_r426830547", "bodyText": "expert = advanced\nbehaviour = behavior", "author": "infoverload", "createdAt": "2020-05-18T18:55:34Z", "path": "docs/config/session.rst", "diffHunk": "@@ -105,12 +104,26 @@ Supported session settings\n .. _conf-session-server_version:\n \n **server_version**\n-\n   | *Default:* ``10.5``\n   | *Modifiable:* ``no``\n \n   Shows the emulated ``PostgreSQL`` server version.\n \n+.. _conf-session-optimizer:\n+\n+**optimizer**\n+  | *Default:* ``true``\n+  | *Modifiable:* ``yes``\n+\n+  This setting indicates if a query optimizer rule is activated. The name of\n+  the query optimizer rule has to be provided as suffix as part of the setting\n+  e.g. ``SET optimizer_rewrite_collect_to_get = false``.\n+\n+  .. NOTE::\n+   The optimizer setting is for expert use only and can significantly impact\n+   the performance behaviour of the queries.", "originalCommit": "fa2297c8c13625516287aa580930d3f3581dc54b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "532018f44973db74c06c4d297eaa297c02e0c161", "url": "https://github.com/crate/crate/commit/532018f44973db74c06c4d297eaa297c02e0c161", "message": "Add `optimizer` session setting to configure query optimizer rules.", "committedDate": "2020-05-19T09:29:16Z", "type": "forcePushed"}, {"oid": "878c458b66950beb8df690a9679d8f29db823758", "url": "https://github.com/crate/crate/commit/878c458b66950beb8df690a9679d8f29db823758", "message": "Add `optimizer` session setting to configure query optimizer rules.", "committedDate": "2020-05-19T09:36:45Z", "type": "commit"}, {"oid": "878c458b66950beb8df690a9679d8f29db823758", "url": "https://github.com/crate/crate/commit/878c458b66950beb8df690a9679d8f29db823758", "message": "Add `optimizer` session setting to configure query optimizer rules.", "committedDate": "2020-05-19T09:36:45Z", "type": "forcePushed"}, {"oid": "60cde423517eecfd2a75c0e58c256b48372c3d33", "url": "https://github.com/crate/crate/commit/60cde423517eecfd2a75c0e58c256b48372c3d33", "message": "Merge branch 'master' into mkleen/optimizer_rules_v2", "committedDate": "2020-05-19T10:10:45Z", "type": "commit"}, {"oid": "19b7ebbbd94cec554534bbd4d7fab8a5038aaf3c", "url": "https://github.com/crate/crate/commit/19b7ebbbd94cec554534bbd4d7fab8a5038aaf3c", "message": "Merge branch 'master' into mkleen/optimizer_rules_v2", "committedDate": "2020-05-19T10:44:31Z", "type": "commit"}]}