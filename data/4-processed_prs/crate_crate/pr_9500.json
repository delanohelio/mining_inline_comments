{"pr_number": 9500, "pr_title": "Add a pg_get_keywords table function", "pr_createdAt": "2020-01-10T15:20:55Z", "pr_url": "https://github.com/crate/crate/pull/9500", "timeline": [{"oid": "a07001bda8fffc4f4e17a3da7573eb78401f3ff2", "url": "https://github.com/crate/crate/commit/a07001bda8fffc4f4e17a3da7573eb78401f3ff2", "message": "Support table functions with schema in the parser", "committedDate": "2020-01-10T13:13:49Z", "type": "commit"}, {"oid": "d0954dda89a12f87cc608e6a5c8dd51850f6c3be", "url": "https://github.com/crate/crate/commit/d0954dda89a12f87cc608e6a5c8dd51850f6c3be", "message": "WIP: Add a pg_get_keywords table function", "committedDate": "2020-01-10T21:14:12Z", "type": "forcePushed"}, {"oid": "b03ed9c811de92d28cd250369f73fa8c1d62b1ac", "url": "https://github.com/crate/crate/commit/b03ed9c811de92d28cd250369f73fa8c1d62b1ac", "message": "Add a pg_get_keywords table function", "committedDate": "2020-01-13T09:54:18Z", "type": "forcePushed"}, {"oid": "314060da1cc3b0ae442fa9a7bf44316f377feafc", "url": "https://github.com/crate/crate/commit/314060da1cc3b0ae442fa9a7bf44316f377feafc", "message": "Add a pg_get_keywords table function\n\nFor better compatibility with PostgreSQL.\n\nThe function is used in the PostgreSQL JDBC client in a query that is\ninvoked when `getSQLKeywords` on `DatabaseMetaData` is called.\n\nWe could also use the information in `crash` or the admin-ui for keyword\nhighlighting and completion.", "committedDate": "2020-01-13T09:57:17Z", "type": "forcePushed"}, {"oid": "4a7f646e7282ba80d465abd4a589f555a9baadc9", "url": "https://github.com/crate/crate/commit/4a7f646e7282ba80d465abd4a589f555a9baadc9", "message": "Add a pg_get_keywords table function\n\nFor better compatibility with PostgreSQL.\n\nThe function is used in the PostgreSQL JDBC client in a query that is\ninvoked when `getSQLKeywords` on `DatabaseMetaData` is called.\n\nWe could also use the information in `crash` or the admin-ui for keyword\nhighlighting and completion.", "committedDate": "2020-01-13T10:16:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MjIxMA==", "url": "https://github.com/crate/crate/pull/9500#discussion_r365792210", "bodyText": "wouldn't it make sense to store this map result into a static var?", "author": "seut", "createdAt": "2020-01-13T13:04:31Z", "path": "sql/src/main/java/io/crate/expression/tablefunctions/PgGetKeywordsFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.action.sql.SessionContext;\n+import io.crate.analyze.WhereClause;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.metadata.BaseFunctionResolver;\n+import io.crate.metadata.ColumnIdent;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.ReferenceIdent;\n+import io.crate.metadata.RelationName;\n+import io.crate.metadata.Routing;\n+import io.crate.metadata.RoutingProvider;\n+import io.crate.metadata.RowGranularity;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.pgcatalog.PgCatalogSchemaInfo;\n+import io.crate.metadata.table.StaticTableInfo;\n+import io.crate.metadata.table.TableInfo;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.sql.Identifiers;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import io.crate.types.ObjectType;\n+import org.elasticsearch.cluster.ClusterState;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Locale;\n+\n+public final class PgGetKeywordsFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"pg_get_keywords\";\n+    private static final FunctionName FUNCTION_NAME = new FunctionName(PgCatalogSchemaInfo.NAME, NAME);\n+    private static final RelationName REL_NAME = new RelationName(PgCatalogSchemaInfo.NAME, NAME);\n+    private static final PgGetKeywordsFunction INSTANCE = new PgGetKeywordsFunction();\n+    private final FunctionInfo info;\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            FUNCTION_NAME,\n+            new BaseFunctionResolver(FuncParams.NONE) {\n+\n+                @Override\n+                public FunctionImplementation getForTypes(List<DataType> argTypes) throws IllegalArgumentException {\n+                    assert argTypes.isEmpty() : \"argument types for pg_get_keywords must be empty due to FuncParams definition\";\n+                    return PgGetKeywordsFunction.INSTANCE;\n+                }\n+            }\n+        );\n+    }\n+\n+    static class Columns {\n+        static final ColumnIdent WORD = new ColumnIdent(\"word\");\n+        static final ColumnIdent CATCODE = new ColumnIdent(\"catcode\");\n+        static final ColumnIdent CATDESC = new ColumnIdent(\"catdesc\");\n+    }\n+\n+    public PgGetKeywordsFunction() {\n+        info = new FunctionInfo(\n+            new FunctionIdent(FUNCTION_NAME, List.of()),\n+            ObjectType.untyped(),\n+            FunctionInfo.Type.TABLE\n+        );\n+    }\n+\n+    @Override\n+    public TableInfo createTableInfo() {\n+        LinkedHashMap<ColumnIdent, Reference> columnMap = new LinkedHashMap<>();\n+        columnMap.put(\n+            Columns.WORD,\n+            new Reference(new ReferenceIdent(REL_NAME, Columns.WORD), RowGranularity.DOC, DataTypes.STRING, 0, null)\n+        );\n+        columnMap.put(\n+            Columns.CATCODE,\n+            new Reference(new ReferenceIdent(REL_NAME, Columns.CATCODE), RowGranularity.DOC, DataTypes.STRING, 1, null)\n+        );\n+        columnMap.put(\n+            Columns.CATDESC,\n+            new Reference(new ReferenceIdent(REL_NAME, Columns.CATDESC), RowGranularity.DOC, DataTypes.STRING, 2, null)\n+        );\n+        return new StaticTableInfo<>(REL_NAME, columnMap, columnMap.values(), List.of()) {\n+\n+            @Override\n+            public Routing getRouting(ClusterState state,\n+                                      RoutingProvider routingProvider,\n+                                      WhereClause whereClause,\n+                                      RoutingProvider.ShardSelection shardSelection,\n+                                      SessionContext sessionContext) {\n+                return Routing.forTableOnSingleNode(REL_NAME, state.getNodes().getLocalNodeId());\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public Iterable<Row> evaluate(TransactionContext txnCtx, Input<List<Object>>... args) {\n+        return () -> Identifiers.KEYWORDS.stream()\n+            .map(keyword -> (Row) new RowN(\n+                keyword.getWord().toLowerCase(Locale.ENGLISH),\n+                keyword.isReserved() ? \"R\" : \"U\",\n+                keyword.isReserved() ? \"reserved\" : \"unreserved\"\n+            ))", "originalCommit": "4a7f646e7282ba80d465abd4a589f555a9baadc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5NDM5NQ==", "url": "https://github.com/crate/crate/pull/9500#discussion_r365794395", "bodyText": "I was considering it, but felt that the function is likely not used often and the performance overhead is small enough. So it does not justify having another List of rows as permanent memory footprint.\nI was also wondering if I should add categoryCode() and categoryDescription getters to the Keyword class. But the output felt to be specific to pg_get_keywords, so I put it here.\nBut I could change it to use a shared row object. What do you think?", "author": "mfussenegger", "createdAt": "2020-01-13T13:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MjIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgwNDMxNQ==", "url": "https://github.com/crate/crate/pull/9500#discussion_r365804315", "bodyText": "I see, shared row sounds good.", "author": "seut", "createdAt": "2020-01-13T13:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MjIxMA=="}], "type": "inlineReview"}, {"oid": "02ae07d742cd812ed8c0f078eb276d8f85bc034a", "url": "https://github.com/crate/crate/commit/02ae07d742cd812ed8c0f078eb276d8f85bc034a", "message": "Add a pg_get_keywords table function\n\nFor better compatibility with PostgreSQL.\n\nThe function is used in the PostgreSQL JDBC client in a query that is\ninvoked when `getSQLKeywords` on `DatabaseMetaData` is called.\n\nWe could also use the information in `crash` or the admin-ui for keyword\nhighlighting and completion.", "committedDate": "2020-01-13T13:51:50Z", "type": "commit"}, {"oid": "02ae07d742cd812ed8c0f078eb276d8f85bc034a", "url": "https://github.com/crate/crate/commit/02ae07d742cd812ed8c0f078eb276d8f85bc034a", "message": "Add a pg_get_keywords table function\n\nFor better compatibility with PostgreSQL.\n\nThe function is used in the PostgreSQL JDBC client in a query that is\ninvoked when `getSQLKeywords` on `DatabaseMetaData` is called.\n\nWe could also use the information in `crash` or the admin-ui for keyword\nhighlighting and completion.", "committedDate": "2020-01-13T13:51:50Z", "type": "forcePushed"}]}