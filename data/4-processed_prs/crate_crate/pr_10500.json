{"pr_number": 10500, "pr_title": "Improve error handling when group by with an undefined type", "pr_createdAt": "2020-09-08T11:22:47Z", "pr_url": "https://github.com/crate/crate/pull/10500", "timeline": [{"oid": "19c0d3184532fbe4664a2c953d0ce12ed2f642c2", "url": "https://github.com/crate/crate/commit/19c0d3184532fbe4664a2c953d0ce12ed2f642c2", "message": "Improve error handling when group by unknown column", "committedDate": "2020-09-08T12:49:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5NDI5OA==", "url": "https://github.com/crate/crate/pull/10500#discussion_r484894298", "bodyText": "psql returns a 42703 undefined_column in the case of an unknown column but i think this is a bit different here. We mention in the docs that the type object ignored cannot not be used for grouping https://crate.io/docs/crate/reference/en/4.2/general/ddl/data-types.html#ignored", "author": "mkleen", "createdAt": "2020-09-08T12:57:36Z", "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "diffHunk": "@@ -673,9 +674,9 @@ public void testGroupByUnknownResultColumn() throws Exception {\n     @Test\n     public void testGroupByUnknownGroupByColumn() throws Exception {\n         this.setup.groupBySetup();\n-        Assertions.assertThrows(Exception.class,\n-                                () -> execute(\"select max(birthdate) from characters group by details_ignored['lol']\",\n-                                              \"Cannot GROUP BY type: undefined\"));\n+        assertThrows(() -> execute(\"select max(age) from characters group by details_ignored['lol']\"),\n+                     isSQLError(is(\"Using column type ignored 'details_ignored['lol']' for grouping or aggregations is not allowed\"),\n+                                INTERNAL_ERROR, BAD_REQUEST, 4000));", "originalCommit": "19c0d3184532fbe4664a2c953d0ce12ed2f642c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "643a65b3884831512ba661664a69d5dafd6a030d", "url": "https://github.com/crate/crate/commit/643a65b3884831512ba661664a69d5dafd6a030d", "message": "Improve error handling when group by unknown column", "committedDate": "2020-09-08T13:02:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5ODczMw==", "url": "https://github.com/crate/crate/pull/10500#discussion_r484898733", "bodyText": "We could probably just go with the analyzer test and remove the integration test.", "author": "mkleen", "createdAt": "2020-09-08T13:04:48Z", "path": "server/src/test/java/io/crate/analyze/GroupByAnalyzerTest.java", "diffHunk": "@@ -118,6 +121,13 @@ public void testGroupByWithDistinctAggregation() throws Exception {\n         analyze(\"select count(DISTINCT name) from sys.nodes group by 1\");\n     }\n \n+    @Test\n+    public void test_group_by_unknown_column() {\n+        Assertions.assertThrows(IllegalArgumentException.class,\n+                                () -> analyze(\"select max(age) from foo.users group by details_ignored['lol']\"),\n+                                \"Using column type ignored 'details_ignored['lol']' for grouping or aggregations is not allowed\");\n+    }", "originalCommit": "643a65b3884831512ba661664a69d5dafd6a030d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1NDIzOQ==", "url": "https://github.com/crate/crate/pull/10500#discussion_r484954239", "bodyText": "Yep agreed", "author": "mfussenegger", "createdAt": "2020-09-08T14:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5ODczMw=="}], "type": "inlineReview"}, {"oid": "670bfa46b095620ef3f49172425f145c4fb94d4e", "url": "https://github.com/crate/crate/commit/670bfa46b095620ef3f49172425f145c4fb94d4e", "message": "Improve error handling when group by unknown column", "committedDate": "2020-09-08T13:07:41Z", "type": "forcePushed"}, {"oid": "1746b949585ff096a23f9623745c54fc90c4a96c", "url": "https://github.com/crate/crate/commit/1746b949585ff096a23f9623745c54fc90c4a96c", "message": "Improve error handling when group by unknown column", "committedDate": "2020-09-08T13:22:15Z", "type": "forcePushed"}, {"oid": "b08bb8914c6de8fdde8ecf9e709c3eccd76ae014", "url": "https://github.com/crate/crate/commit/b08bb8914c6de8fdde8ecf9e709c3eccd76ae014", "message": "Improve error handling when group by unknown column", "committedDate": "2020-09-08T13:44:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkxNDk5Ng==", "url": "https://github.com/crate/crate/pull/10500#discussion_r484914996", "bodyText": "If there is an alias involved or some form of sub-query we'd have a Field instead of a Reference here and I think in that case the validation would be by-passed.\nI also wonder if we're too restrictive here - or rather, fail for the wrong reason. The problem is that we don't know the type and that it may be mixed, not that the column policy is ignored.\nSee the conversation here - we tell users that they can use aggregations on ignored columns if they use casts, the same applies for GROUP BY:\ncreate table tbl (obj object (ignored));\ninsert into tbl (obj) values ({x=10}), ({x=10}), ({x=20});\nselect obj['x'], count(*) from tbl group by 1;\nUnsupportedFeatureException[Cannot GROUP BY type: undefined]\n\ncr> select obj['x']::integer, count(*) from tbl group by 1;\n+---------------------------+----------+\n| cast(obj['x'] AS integer) | count(*) |\n+---------------------------+----------+\n|                        10 |        2 |\n|                        20 |        1 |\n+---------------------------+----------+\nWe could change the check to assert that there is a type, and the error could also point users to adding an explicit cast (+ pointing out a performance impact)", "author": "mfussenegger", "createdAt": "2020-09-08T13:25:06Z", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,17 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        if (groupBy instanceof Reference) {", "originalCommit": "1746b949585ff096a23f9623745c54fc90c4a96c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d9e407f03fbe1651b3f55980d7df59d3e7445cc6", "url": "https://github.com/crate/crate/commit/d9e407f03fbe1651b3f55980d7df59d3e7445cc6", "message": "Change validation for group", "committedDate": "2020-09-08T15:37:15Z", "type": "forcePushed"}, {"oid": "3a1e83baed6a38f85aef5b8c5269c169eb00c49f", "url": "https://github.com/crate/crate/commit/3a1e83baed6a38f85aef5b8c5269c169eb00c49f", "message": "Change validation for group by column", "committedDate": "2020-09-08T15:43:47Z", "type": "forcePushed"}, {"oid": "acc3a65917810b7d59ec9110b05d85c1d644960a", "url": "https://github.com/crate/crate/commit/acc3a65917810b7d59ec9110b05d85c1d644960a", "message": "Change validation for group by column", "committedDate": "2020-09-08T15:46:17Z", "type": "forcePushed"}, {"oid": "ca2f460dcc24450ad5abf87958165e52f2ce61fa", "url": "https://github.com/crate/crate/commit/ca2f460dcc24450ad5abf87958165e52f2ce61fa", "message": "Change validation for group by column", "committedDate": "2020-09-08T15:50:11Z", "type": "forcePushed"}, {"oid": "f674a1af7007998760608863a6f92b0ee76d2536", "url": "https://github.com/crate/crate/commit/f674a1af7007998760608863a6f92b0ee76d2536", "message": "Add visitor to validate symbol type", "committedDate": "2020-09-08T18:44:19Z", "type": "forcePushed"}, {"oid": "663a88c8159df8f5fa10e64a2236d6d046a58a63", "url": "https://github.com/crate/crate/commit/663a88c8159df8f5fa10e64a2236d6d046a58a63", "message": "Add visitor to validate symbol type", "committedDate": "2020-09-08T18:53:36Z", "type": "forcePushed"}, {"oid": "8787ba944fc48f0234c1f5907c489e6e12766f9b", "url": "https://github.com/crate/crate/commit/8787ba944fc48f0234c1f5907c489e6e12766f9b", "message": "Add visitor to validate symbol type", "committedDate": "2020-09-09T07:43:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwOTM0Ng==", "url": "https://github.com/crate/crate/pull/10500#discussion_r485409346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return visitSymbol(symbol, context);\n          \n          \n            \n                        return null;\n          \n      \n    \n    \n  \n\nvisitSymbol would do the valueType() == UNDEFINED check again.", "author": "mfussenegger", "createdAt": "2020-09-09T07:51:20Z", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,40 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        groupBy.accept(SymbolTypeValidator.INSTANCE, null);\n+    }\n+\n+    private static class SymbolTypeValidator extends SymbolVisitor<Void, Void> {\n+\n+        static final SymbolTypeValidator INSTANCE = new SymbolTypeValidator();\n+\n+        @Override\n+        public Void visitSymbol(Symbol symbol, Void context) {\n+            if (symbol.valueType() == DataTypes.UNDEFINED) {\n+                throw new IllegalArgumentException(\n+                    \"Cannot group or aggregate on '\" + symbol.toString() + \"' efficiently with an undefined type.\" +\n+                    \" Use an explicit type cast.\"\n+                );\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public Void visitLiteral(Literal symbol, Void context) {\n+            if (symbol.valueType() == DataTypes.UNDEFINED && symbol.value() == null) {\n+                // `NULL` is a valid case\n+                return null;\n+            }\n+            return visitSymbol(symbol, context);", "originalCommit": "8787ba944fc48f0234c1f5907c489e6e12766f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMDY1OQ==", "url": "https://github.com/crate/crate/pull/10500#discussion_r485410659", "bodyText": "I think the error is a bit misleading. It's not that it cannot do it efficiently without a defined type, it can't do it at all.\nIt works with casts, but the cast has a bit of overhead and given that it's most likely to be undefined because of being an ignored column it won't have a column-store (docvalues) available and it will use a source lookup and other more expensive code paths.", "author": "mfussenegger", "createdAt": "2020-09-09T07:53:22Z", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,40 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        groupBy.accept(SymbolTypeValidator.INSTANCE, null);\n+    }\n+\n+    private static class SymbolTypeValidator extends SymbolVisitor<Void, Void> {\n+\n+        static final SymbolTypeValidator INSTANCE = new SymbolTypeValidator();\n+\n+        @Override\n+        public Void visitSymbol(Symbol symbol, Void context) {\n+            if (symbol.valueType() == DataTypes.UNDEFINED) {\n+                throw new IllegalArgumentException(\n+                    \"Cannot group or aggregate on '\" + symbol.toString() + \"' efficiently with an undefined type.\" +\n+                    \" Use an explicit type cast.\"", "originalCommit": "8787ba944fc48f0234c1f5907c489e6e12766f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMTM2Ng==", "url": "https://github.com/crate/crate/pull/10500#discussion_r485411366", "bodyText": "Maybe we could make the names a bit specific. E.g. ensurehasDefinedType and EnsureTypedGroupKey or something like that.\nvalidator and validate is always a bit vague in that it doesn't indicate what constraints or conditions need to be met for it to be valid", "author": "mfussenegger", "createdAt": "2020-09-09T07:54:31Z", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,40 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        groupBy.accept(SymbolTypeValidator.INSTANCE, null);\n+    }\n+\n+    private static class SymbolTypeValidator extends SymbolVisitor<Void, Void> {", "originalCommit": "8787ba944fc48f0234c1f5907c489e6e12766f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMTcyOA==", "url": "https://github.com/crate/crate/pull/10500#discussion_r485411728", "bodyText": "On second thought, maybe we could keep the integration test but change it to use a cast, so we make sure to verify that it works.", "author": "mfussenegger", "createdAt": "2020-09-09T07:55:05Z", "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "diffHunk": "@@ -670,14 +665,6 @@ public void testGroupByUnknownResultColumn() throws Exception {\n                                 \"'details_ignored['lol']' must appear in the GROUP BY clause\");\n     }\n \n-    @Test\n-    public void testGroupByUnknownGroupByColumn() throws Exception {\n-        this.setup.groupBySetup();\n-        Assertions.assertThrows(Exception.class,\n-                                () -> execute(\"select max(birthdate) from characters group by details_ignored['lol']\",", "originalCommit": "8787ba944fc48f0234c1f5907c489e6e12766f9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6683766e091e933ebbb1ece4eb82ece70d08536", "url": "https://github.com/crate/crate/commit/d6683766e091e933ebbb1ece4eb82ece70d08536", "message": "Improve groupBy symbol validation", "committedDate": "2020-09-09T12:11:45Z", "type": "forcePushed"}, {"oid": "29d80a37d457eb57bfccd81b52be7cf97ec49bce", "url": "https://github.com/crate/crate/commit/29d80a37d457eb57bfccd81b52be7cf97ec49bce", "message": "Improve groupBy symbol validation", "committedDate": "2020-09-09T12:40:20Z", "type": "forcePushed"}, {"oid": "942dc0b4e0c5350da108d0a4474a801138d59909", "url": "https://github.com/crate/crate/commit/942dc0b4e0c5350da108d0a4474a801138d59909", "message": "Improve groupBy symbol validation", "committedDate": "2020-09-09T12:48:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MzM2Mw==", "url": "https://github.com/crate/crate/pull/10500#discussion_r485673363", "bodyText": "I meant to change the query to have a cast. For the error case the analyzer test is good enough. But a integration test that confirms that it works with cast should be here additionally", "author": "mfussenegger", "createdAt": "2020-09-09T14:49:34Z", "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "diffHunk": "@@ -673,9 +672,10 @@ public void testGroupByUnknownResultColumn() throws Exception {\n     @Test\n     public void testGroupByUnknownGroupByColumn() throws Exception {\n         this.setup.groupBySetup();\n-        Assertions.assertThrows(Exception.class,\n-                                () -> execute(\"select max(birthdate) from characters group by details_ignored['lol']\",\n-                                              \"Cannot GROUP BY type: undefined\"));\n+        assertThrows(() -> execute(\"select max(age) from characters group by details_ignored['lol']\"),", "originalCommit": "942dc0b4e0c5350da108d0a4474a801138d59909", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxODA4NA==", "url": "https://github.com/crate/crate/pull/10500#discussion_r485718084", "bodyText": "Sorry i missed that.", "author": "mkleen", "createdAt": "2020-09-09T15:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MzM2Mw=="}], "type": "inlineReview"}, {"oid": "404e88c6b8acdab5c8a6492a6ea4b0894b9cc249", "url": "https://github.com/crate/crate/commit/404e88c6b8acdab5c8a6492a6ea4b0894b9cc249", "message": "Improve error handling when group by unknown column", "committedDate": "2020-09-09T18:48:30Z", "type": "forcePushed"}, {"oid": "b00c33ce549d9e93b1e8abd65252523234245b6f", "url": "https://github.com/crate/crate/commit/b00c33ce549d9e93b1e8abd65252523234245b6f", "message": "Improve error handling when group by with undefined type", "committedDate": "2020-09-09T18:49:24Z", "type": "commit"}, {"oid": "b00c33ce549d9e93b1e8abd65252523234245b6f", "url": "https://github.com/crate/crate/commit/b00c33ce549d9e93b1e8abd65252523234245b6f", "message": "Improve error handling when group by with undefined type", "committedDate": "2020-09-09T18:49:24Z", "type": "forcePushed"}]}