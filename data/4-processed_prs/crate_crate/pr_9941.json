{"pr_number": 9941, "pr_title": "Make column value lookup lazy", "pr_createdAt": "2020-05-13T08:53:51Z", "pr_url": "https://github.com/crate/crate/pull/9941", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4ODMwMQ==", "url": "https://github.com/crate/crate/pull/9941#discussion_r424388301", "bodyText": "Looks like we could remove the exception annotation from the parent class?", "author": "seut", "createdAt": "2020-05-13T12:13:42Z", "path": "server/src/main/java/io/crate/expression/reference/doc/lucene/BooleanColumnReference.java", "diffHunk": "@@ -29,38 +29,41 @@\n import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n \n import java.io.IOException;\n+import java.io.UncheckedIOException;\n \n public class BooleanColumnReference extends LuceneCollectorExpression<Boolean> {\n \n     private static final BytesRef TRUE_BYTESREF = new BytesRef(\"1\");\n     private final String columnName;\n     private SortedBinaryDocValues values;\n-    private Boolean value;\n+    private int docId;\n \n     public BooleanColumnReference(String columnName) {\n         this.columnName = columnName;\n     }\n \n     @Override\n     public Boolean value() {\n-        return value;\n+        try {\n+            if (values.advanceExact(docId)) {\n+                switch (values.docValueCount()) {\n+                    case 1:\n+                        return values.nextValue().compareTo(TRUE_BYTESREF) == 0;\n+\n+                    default:\n+                        throw new GroupByOnArrayUnsupportedException(columnName);\n+                }\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n     }\n \n     @Override\n     public void setNextDocId(int docId) throws IOException {", "originalCommit": "fe64bbb6162b7c795a312211b8717e4d13591819", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNTMzMA==", "url": "https://github.com/crate/crate/pull/9941#discussion_r424425330", "bodyText": "yep you're right. I actually had also missed the short column reference. Pushed a fixup", "author": "mfussenegger", "createdAt": "2020-05-13T13:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4ODMwMQ=="}], "type": "inlineReview"}, {"oid": "aa80905660ccc064adf458c01ed4795994a1af08", "url": "https://github.com/crate/crate/commit/aa80905660ccc064adf458c01ed4795994a1af08", "message": "fixup! Make column value lookup lazy", "committedDate": "2020-05-13T13:12:01Z", "type": "forcePushed"}, {"oid": "12a32c1ea1d164496babf3d46d9ae121757e3d36", "url": "https://github.com/crate/crate/commit/12a32c1ea1d164496babf3d46d9ae121757e3d36", "message": "Make column value lookup lazy\n\nThe `LuceneCollectorExpression` implementations already loaded the\nvalues on `setNextDocId`. This is a huge performance cost if the value\nis not used.\n\nThis is for example the case in the `GroupByOptimizedIterator` when the\ngroup-key doesn't appear in an aggregation.\n\nIt is also the case for aggregations like `arbitrary` or could be the\ncase when `HAVING` and a sub-set of the row is used to determine if the\nrow should be excluded.\n\n    Q: select \"TagKey\" from texttest group by 1\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |     2660.127 \u00b1  349.842 |   2400.170 |   2551.109 |   2616.811 |   3955.798 |\n    |   V2    |      232.981 \u00b1   34.012 |    174.144 |    238.127 |    247.981 |    343.805 |\n    mean:   - 167.79%\n    median: - 165.85%", "committedDate": "2020-05-13T13:28:47Z", "type": "commit"}, {"oid": "12a32c1ea1d164496babf3d46d9ae121757e3d36", "url": "https://github.com/crate/crate/commit/12a32c1ea1d164496babf3d46d9ae121757e3d36", "message": "Make column value lookup lazy\n\nThe `LuceneCollectorExpression` implementations already loaded the\nvalues on `setNextDocId`. This is a huge performance cost if the value\nis not used.\n\nThis is for example the case in the `GroupByOptimizedIterator` when the\ngroup-key doesn't appear in an aggregation.\n\nIt is also the case for aggregations like `arbitrary` or could be the\ncase when `HAVING` and a sub-set of the row is used to determine if the\nrow should be excluded.\n\n    Q: select \"TagKey\" from texttest group by 1\n    C: 1\n    | Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n    |   V1    |     2660.127 \u00b1  349.842 |   2400.170 |   2551.109 |   2616.811 |   3955.798 |\n    |   V2    |      232.981 \u00b1   34.012 |    174.144 |    238.127 |    247.981 |    343.805 |\n    mean:   - 167.79%\n    median: - 165.85%", "committedDate": "2020-05-13T13:28:47Z", "type": "forcePushed"}]}