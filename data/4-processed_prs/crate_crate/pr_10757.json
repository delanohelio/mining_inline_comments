{"pr_number": 10757, "pr_title": "Add the empty_string_as_null option for ``COPY FROM``.", "pr_createdAt": "2020-11-10T11:19:47Z", "pr_url": "https://github.com/crate/crate/pull/10757", "timeline": [{"oid": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "url": "https://github.com/crate/crate/commit/8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "message": "Add the empty_string_as_null option for ``COPY FROM``.\n\nIf ``empty_string_as_null`` is ``true``, then all column's values\nrepresented by an empty string, including a quoted empty string,\nare set to``NULL``.", "committedDate": "2020-11-16T09:17:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MDk4NA==", "url": "https://github.com/crate/crate/pull/10757#discussion_r524050984", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void test_file_uri_collect_phase_before_4_4_0() throws IOException {\n          \n          \n            \n                public void test_streaming_of_file_uri_collect_phase_before_4_4_0() throws IOException {", "author": "seut", "createdAt": "2020-11-16T09:54:54Z", "path": "server/src/test/java/io/crate/execution/dsl/phases/FileUriCollectPhaseTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dsl.phases;\n+\n+\n+import io.crate.analyze.CopyFromParserProperties;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.types.DataTypes;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static io.crate.testing.TestingHelpers.createReference;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+public class FileUriCollectPhaseTest {\n+\n+    @Test\n+    public void test_file_uri_collect_phase_before_4_4_0() throws IOException {", "originalCommit": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MTM1Ng==", "url": "https://github.com/crate/crate/pull/10757#discussion_r524051356", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void test_file_uri_collect_phase_after_or_on_4_4_0() throws IOException {\n          \n          \n            \n                public void test_streaming_of_file_uri_collect_phase_after_or_on_4_4_0() throws IOException {", "author": "seut", "createdAt": "2020-11-16T09:55:12Z", "path": "server/src/test/java/io/crate/execution/dsl/phases/FileUriCollectPhaseTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dsl.phases;\n+\n+\n+import io.crate.analyze.CopyFromParserProperties;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.types.DataTypes;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static io.crate.testing.TestingHelpers.createReference;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+public class FileUriCollectPhaseTest {\n+\n+    @Test\n+    public void test_file_uri_collect_phase_before_4_4_0() throws IOException {\n+        var expected = new FileUriCollectPhase(\n+            UUID.randomUUID(),\n+            0,\n+            \"test\",\n+            Collections.singletonList(\"noop_id\"),\n+            Literal.of(\"uri\"),\n+            List.of(createReference(\"name\", DataTypes.STRING)),\n+            Collections.emptyList(),\n+            null,\n+            false,\n+            new CopyFromParserProperties(true),\n+            FileUriCollectPhase.InputFormat.CSV\n+        );\n+\n+        BytesStreamOutput output = new BytesStreamOutput();\n+        output.setVersion(Version.V_4_3_0);\n+        expected.writeTo(output);\n+\n+        StreamInput input = output.bytes().streamInput();\n+        input.setVersion(Version.V_4_3_0);\n+        var actual = new FileUriCollectPhase(input);\n+\n+        assertThat(expected.nodeIds(), is(actual.nodeIds()));\n+        assertThat(expected.distributionInfo(), is(actual.distributionInfo()));\n+        assertThat(expected.targetUri(), is(actual.targetUri()));\n+        assertThat(expected.toCollect(), is(actual.toCollect()));\n+\n+        // parser properties option serialization implemented in crate >= 4.4.0\n+        assertThat(expected.parserProperties().emptyStringAsNull(), is(true));\n+        assertThat(actual.parserProperties().emptyStringAsNull(), is(false));\n+        assertThat(expected.inputFormat(), is(actual.inputFormat()));\n+        assertThat(expected.compression(), is(actual.compression()));\n+        assertThat(expected.sharedStorage(), is(actual.sharedStorage()));\n+    }\n+\n+    @Test\n+    public void test_file_uri_collect_phase_after_or_on_4_4_0() throws IOException {", "originalCommit": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2MzcwMg==", "url": "https://github.com/crate/crate/pull/10757#discussion_r524063702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            meaning that no action will be taken on empty string during the COPY FROM\n          \n          \n            \n            meaning that no action will be taken on empty strings during the COPY FROM", "author": "seut", "createdAt": "2020-11-16T10:05:54Z", "path": "docs/sql/statements/copy-from.rst", "diffHunk": "@@ -323,6 +323,17 @@ Default: false\n ``COPY FROM`` by default won't overwrite rows if a document with the same\n primary key already exists. Set to true to overwrite duplicate rows.\n \n+``empty_string_as_null``\n+''''''''''''''''''''''''\n+\n+If set to ``true`` the ``empty_string_as_null`` option enables conversion\n+of un-/quoted empty strings into ``NULL``. The default value is ``false``\n+meaning that no action will be taken on empty string during the COPY FROM", "originalCommit": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2NTA2Ng==", "url": "https://github.com/crate/crate/pull/10757#discussion_r524065066", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              including a quoted empty string, are set to``NULL``.\n          \n          \n            \n              including a quoted empty string, are set to ``NULL``.", "author": "seut", "createdAt": "2020-11-16T10:07:15Z", "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -53,6 +53,10 @@ None\n Changes\n =======\n \n+- Added the ``empty_string_as_null`` option for :ref:`copy_from` CSV files.\n+  If the option is enabled, all column's values represented by an empty string,\n+  including a quoted empty string, are set to``NULL``.", "originalCommit": "8192e784b6e6b4436b3d8d3ac6b904bb3217d9f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70386961cca915456eea5b8c8baa8a7a35eeb1b8", "url": "https://github.com/crate/crate/commit/70386961cca915456eea5b8c8baa8a7a35eeb1b8", "message": "Add the empty_string_as_null option for ``COPY FROM``.\n\nIf ``empty_string_as_null`` is ``true``, then all column's values\nrepresented by an empty string, including a quoted empty string,\nare set to``NULL``.", "committedDate": "2020-11-16T10:10:45Z", "type": "commit"}, {"oid": "70386961cca915456eea5b8c8baa8a7a35eeb1b8", "url": "https://github.com/crate/crate/commit/70386961cca915456eea5b8c8baa8a7a35eeb1b8", "message": "Add the empty_string_as_null option for ``COPY FROM``.\n\nIf ``empty_string_as_null`` is ``true``, then all column's values\nrepresented by an empty string, including a quoted empty string,\nare set to``NULL``.", "committedDate": "2020-11-16T10:10:45Z", "type": "forcePushed"}]}