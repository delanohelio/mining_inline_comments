{"pr_number": 9747, "pr_title": "String scalar functions: repeat and length.", "pr_createdAt": "2020-03-06T23:19:59Z", "pr_url": "https://github.com/crate/crate/pull/9747", "timeline": [{"oid": "83503967183ace4a0400b13da51ad6fdaf46d3bb", "url": "https://github.com/crate/crate/commit/83503967183ace4a0400b13da51ad6fdaf46d3bb", "message": "Add the repeat scalar function.", "committedDate": "2020-03-08T15:00:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MDU3Mg==", "url": "https://github.com/crate/crate/pull/9747#discussion_r389540572", "bodyText": "This will fail on null", "author": "mfussenegger", "createdAt": "2020-03-09T09:22:36Z", "path": "sql/src/main/java/io/crate/expression/scalar/string/StringRepeatFunction.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.types.DataTypes;\n+\n+import java.util.List;\n+\n+public final class StringRepeatFunction extends Scalar<String, Object> {\n+\n+    private static final FunctionInfo INFO = new FunctionInfo(\n+        new FunctionIdent(\n+            \"repeat\",\n+            List.of(DataTypes.STRING, DataTypes.INTEGER)\n+        ),\n+        DataTypes.STRING\n+    );\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(new StringRepeatFunction());\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, Input<Object>[] args) {\n+        assert args.length == 2 : \"repeat takes exactly two arguments\";\n+        var text = (String) args[0].value();\n+        if (text == null) {\n+            return null;\n+        }\n+        var repetitions = (int) args[1].value();", "originalCommit": "83503967183ace4a0400b13da51ad6fdaf46d3bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2MDE0Ng==", "url": "https://github.com/crate/crate/pull/9747#discussion_r389560146", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ``length('string')``\n          \n          \n            \n            ``length(text)``", "author": "seut", "createdAt": "2020-03-09T10:00:03Z", "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -129,6 +129,15 @@ Each character counts only once, regardless of its byte size.\n     +-------------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar-length:\n+\n+``length('string')``", "originalCommit": "c44d202b6470c144cca91c4db063c5ec47ae88d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2MDQyOA==", "url": "https://github.com/crate/crate/pull/9747#discussion_r389560428", "bodyText": "What is the return type?", "author": "seut", "createdAt": "2020-03-09T10:00:34Z", "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -129,6 +129,15 @@ Each character counts only once, regardless of its byte size.\n     +-------------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar-length:\n+\n+``length('string')``\n+--------------------\n+\n+Returns the number of characters in a string.", "originalCommit": "c44d202b6470c144cca91c4db063c5ec47ae88d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2MTAwMQ==", "url": "https://github.com/crate/crate/pull/9747#discussion_r389561001", "bodyText": "Ah already solved by referencing to char_length, ignore my comment ;)", "author": "seut", "createdAt": "2020-03-09T10:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU2MDQyOA=="}], "type": "inlineReview"}, {"oid": "38829a8c644f68b6dddcbdb7ad640b1a26818c20", "url": "https://github.com/crate/crate/commit/38829a8c644f68b6dddcbdb7ad640b1a26818c20", "message": "Add the length scalar function.", "committedDate": "2020-03-09T10:05:21Z", "type": "commit"}, {"oid": "2b277a41d9f46984c11a08843ad2740ad22dd72a", "url": "https://github.com/crate/crate/commit/2b277a41d9f46984c11a08843ad2740ad22dd72a", "message": "Add the repeat scalar function.", "committedDate": "2020-03-09T10:05:21Z", "type": "commit"}, {"oid": "2b277a41d9f46984c11a08843ad2740ad22dd72a", "url": "https://github.com/crate/crate/commit/2b277a41d9f46984c11a08843ad2740ad22dd72a", "message": "Add the repeat scalar function.", "committedDate": "2020-03-09T10:05:21Z", "type": "forcePushed"}]}