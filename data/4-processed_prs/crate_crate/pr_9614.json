{"pr_number": 9614, "pr_title": "Merge InsertFromSubQuery into Insert", "pr_createdAt": "2020-01-31T10:17:29Z", "pr_url": "https://github.com/crate/crate/pull/9614", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwNzgwOA==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373407808", "bodyText": "I think we should not rename InsertFromSubQueryPlanner. Otherwise, we end up with InsertPlanner and InsertFromValues plan.", "author": "kovrus", "createdAt": "2020-01-31T10:20:09Z", "path": "sql/src/main/java/io/crate/planner/consumer/InsertPlanner.java", "diffHunk": "@@ -45,12 +45,12 @@\n import java.util.List;\n \n \n-public final class InsertFromSubQueryPlanner {", "originalCommit": "d3ac65304b4d9366ea64eca00937f10206ddc847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwODY2OQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373408669", "bodyText": "Not sure about this renaming as well", "author": "kovrus", "createdAt": "2020-01-31T10:22:13Z", "path": "sql/src/main/java/io/crate/planner/operators/LogicalPlanner.java", "diffHunk": "@@ -143,7 +143,7 @@ public LogicalPlanner(Functions functions, TableStats tableStats, Supplier<Versi\n             minNodeVersionInCluster\n         );\n         this.writeOptimizer = new Optimizer(\n-            List.of(new RewriteInsertFromSubQueryToInsertFromValues()),\n+            List.of(new RewriteInsertToInsertFromValues()),", "originalCommit": "d3ac65304b4d9366ea64eca00937f10206ddc847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwOTI1MQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373409251", "bodyText": "Is the DuplicateKeyContext left out on purpose from equals/hashcode/toString ?", "author": "mkleen", "createdAt": "2020-01-31T10:23:30Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/Insert.java", "diffHunk": "@@ -46,13 +49,17 @@ public Table table() {\n         return columns;\n     }\n \n-    public DuplicateKeyContext<T> getDuplicateKeyContext() {\n+    public Query subQuery() {\n+        return subQuery;\n+    }\n+\n+    public DuplicateKeyContext<T> duplicateKeyContext() {\n         return duplicateKeyContext;\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(table, columns);\n+        return Objects.hashCode(table, columns, subQuery);", "originalCommit": "d3ac65304b4d9366ea64eca00937f10206ddc847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwOTMyMg==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373409322", "bodyText": "in the test names we still want to keep the knowledge of what we are testing. imho, testInsertFromSubQueryNonDistributedGroupBy was alright. Also, it is related to all other renamed tests.", "author": "kovrus", "createdAt": "2020-01-31T10:23:41Z", "path": "sql/src/test/java/io/crate/planner/InsertPlannerTest.java", "diffHunk": "@@ -94,7 +94,7 @@ public void prepare() throws IOException {\n     }\n \n     @Test\n-    public void testInsertFromSubQueryNonDistributedGroupBy() {", "originalCommit": "d3ac65304b4d9366ea64eca00937f10206ddc847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxOTIxNA==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373419214", "bodyText": "I was not finished yet with this pr, currently going through all the testmethods.", "author": "mkleen", "createdAt": "2020-01-31T10:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwOTMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxOTQ0OA==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373419448", "bodyText": "And yes, you are right ;-)", "author": "mkleen", "createdAt": "2020-01-31T10:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwOTMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxOTQ2MQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373419461", "bodyText": "oops, sorry :)", "author": "kovrus", "createdAt": "2020-01-31T10:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwOTMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyMjY2Mw==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373422663", "bodyText": "So I renamed now only these testcases where subqueries are actually involved.", "author": "mkleen", "createdAt": "2020-01-31T10:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQwOTMyMg=="}], "type": "inlineReview"}, {"oid": "ed3f29b6fc92ac6b0ff6013f32488b53e6d8d18c", "url": "https://github.com/crate/crate/commit/ed3f29b6fc92ac6b0ff6013f32488b53e6d8d18c", "message": "Make subquery nullable and add checks", "committedDate": "2020-01-31T10:44:28Z", "type": "forcePushed"}, {"oid": "3e9c26395fa59208adeba5610c971eac879667d4", "url": "https://github.com/crate/crate/commit/3e9c26395fa59208adeba5610c971eac879667d4", "message": "Make subquery nullable and add checks", "committedDate": "2020-01-31T10:52:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyMTg0OA==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373421848", "bodyText": "As far as I understand subquery can be null, right ?", "author": "mkleen", "createdAt": "2020-01-31T10:53:17Z", "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -560,9 +560,10 @@ public Node visitInsert(SqlBaseParser.InsertContext context) {\n             }\n             throw e;\n         }\n-        return new Insert(\n+        Node subquery = visit(context.insertSource().query());\n+        return new Insert<>(\n             table,\n-            (Query) visit(context.insertSource().query()),\n+            subquery == null ? null : (Query) subquery,", "originalCommit": "3e9c26395fa59208adeba5610c971eac879667d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNTk5OQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373425999", "bodyText": "null would mean that the insert source is missing https://github.com/crate/crate/blob/master/sql-parser/src/main/antlr/SqlBase.g4#L441-L442 . I don't think that can be a case.\nAlso, do we want to keep calling it subquery? insertSource().query() can be either querySpec (subqquery) or values, therefore I am not sure that it is suitable name.", "author": "kovrus", "createdAt": "2020-01-31T11:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyMTg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyMjE0MQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373422141", "bodyText": "As far as I understand subquery can be null, right ?", "author": "mkleen", "createdAt": "2020-01-31T10:53:55Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/Insert.java", "diffHunk": "@@ -32,9 +33,10 @@\n     private final Table<T> table;\n     private final DuplicateKeyContext<T> duplicateKeyContext;\n     private final List<String> columns;\n+    @Nullable\n     private final Query subQuery;", "originalCommit": "3e9c26395fa59208adeba5610c971eac879667d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjUzNg==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373426536", "bodyText": "see the comment above", "author": "kovrus", "createdAt": "2020-01-31T11:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyMjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjMxOQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373426319", "bodyText": "there always should be an insert source.", "author": "kovrus", "createdAt": "2020-01-31T11:04:13Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/DefaultTraversalVisitor.java", "diffHunk": "@@ -325,9 +325,11 @@ public R visitAlterTable(AlterTable<?> node, C context) {\n     }\n \n     @Override\n-    public R visitInsertFromSubquery(InsertFromSubquery<?> node, C context) {\n+    public R visitInsert(Insert<?> node, C context) {\n         node.table().accept(this, context);\n-        node.subQuery().accept(this, context);\n+        if (node.subQuery() != null) {", "originalCommit": "3e9c26395fa59208adeba5610c971eac879667d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNzgzNQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373427835", "bodyText": "Great! thanks for the clarification, i wasn't sure about this. Will drop the null checks etc. then.", "author": "mkleen", "createdAt": "2020-01-31T11:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyODA5Nw==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373428097", "bodyText": "we can keep the old test names here and for the tests bellow", "author": "kovrus", "createdAt": "2020-01-31T11:08:29Z", "path": "sql/src/test/java/io/crate/integrationtests/InsertIntoIntegrationTest.java", "diffHunk": "@@ -1239,7 +1239,7 @@ public void testInsertGeneratedPrimaryKeyValueGiven() throws Exception {\n     }\n \n     @Test\n-    public void testInsertFromSubQueryMissingPrimaryKeyValues() throws Exception {", "originalCommit": "3e9c26395fa59208adeba5610c971eac879667d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d904f02b2cc2fd7e0b53de593731a42012d90ee1", "url": "https://github.com/crate/crate/commit/d904f02b2cc2fd7e0b53de593731a42012d90ee1", "message": "Revert renaming of planner and operator", "committedDate": "2020-01-31T11:31:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2NjI3NA==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373466274", "bodyText": "maybe insertSource, just query or smth else? Because it can a bit confusing when you have values in there, but the variable is called subQuery.\nOtherwise, lgtm", "author": "kovrus", "createdAt": "2020-01-31T12:56:45Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/Insert.java", "diffHunk": "@@ -21,20 +21,23 @@\n \n package io.crate.sql.tree;\n \n+import com.google.common.base.MoreObjects;\n import com.google.common.base.Objects;\n \n import java.util.Collections;\n import java.util.List;\n \n-public abstract class Insert<T> extends Statement {\n+public final class Insert<T> extends Statement {\n \n-    protected final Table<T> table;\n+    private final Table<T> table;\n     private final DuplicateKeyContext<T> duplicateKeyContext;\n-    protected final List<String> columns;\n+    private final List<String> columns;\n+    private final Query subQuery;\n \n-    Insert(Table<T> table, List<String> columns, DuplicateKeyContext<T> duplicateKeyContext) {\n+    public Insert(Table<T> table, Query subQuery, List<String> columns, DuplicateKeyContext<T> duplicateKeyContext) {\n         this.table = table;\n         this.columns = columns;\n+        this.subQuery = subQuery;", "originalCommit": "d904f02b2cc2fd7e0b53de593731a42012d90ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2NzcyMQ==", "url": "https://github.com/crate/crate/pull/9614#discussion_r373467721", "bodyText": "the null check is not needed", "author": "kovrus", "createdAt": "2020-01-31T13:00:42Z", "path": "sql-parser/src/main/java/io/crate/sql/tree/Insert.java", "diffHunk": "@@ -66,10 +73,23 @@ public boolean equals(Object o) {\n             return false;\n         if (table != null ? !table.equals(insert.table) : insert.table != null)\n             return false;\n+        if (subQuery != null ? !subQuery.equals(insert.subQuery) : insert.subQuery != null)", "originalCommit": "d904f02b2cc2fd7e0b53de593731a42012d90ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7f7606b3fb3ff8450fa5bc8652578faa390b8c82", "url": "https://github.com/crate/crate/commit/7f7606b3fb3ff8450fa5bc8652578faa390b8c82", "message": "Merge InsertFromSubQuery into Insert", "committedDate": "2020-01-31T13:35:47Z", "type": "forcePushed"}, {"oid": "7859f090d7dd384337913d937ac6a202991ca743", "url": "https://github.com/crate/crate/commit/7859f090d7dd384337913d937ac6a202991ca743", "message": "Merge InsertFromSubQuery into Insert\n\nThis merges InsertFromSubQuery into Insert and related functions\nusing these types.", "committedDate": "2020-01-31T13:36:54Z", "type": "forcePushed"}, {"oid": "0d539509d7ede9628f58ef19f5f627a456ad8c0e", "url": "https://github.com/crate/crate/commit/0d539509d7ede9628f58ef19f5f627a456ad8c0e", "message": "Merge InsertFromSubQuery into Insert\n\nThis merges InsertFromSubQuery into Insert and related functions\nusing these types.", "committedDate": "2020-01-31T13:47:39Z", "type": "forcePushed"}, {"oid": "bd3101eb7fb2c10a4a39b1a57283053caae30d9b", "url": "https://github.com/crate/crate/commit/bd3101eb7fb2c10a4a39b1a57283053caae30d9b", "message": "Merge InsertFromSubQuery into Insert\n\nThis merges InsertFromSubQuery into Insert and related functions\nusing these types.", "committedDate": "2020-01-31T14:13:37Z", "type": "commit"}, {"oid": "bd3101eb7fb2c10a4a39b1a57283053caae30d9b", "url": "https://github.com/crate/crate/commit/bd3101eb7fb2c10a4a39b1a57283053caae30d9b", "message": "Merge InsertFromSubQuery into Insert\n\nThis merges InsertFromSubQuery into Insert and related functions\nusing these types.", "committedDate": "2020-01-31T14:13:37Z", "type": "forcePushed"}]}