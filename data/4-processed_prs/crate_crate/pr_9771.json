{"pr_number": 9771, "pr_title": "Improve encapsulation of components used in FetchBatchAccumulator", "pr_createdAt": "2020-03-17T16:56:01Z", "pr_url": "https://github.com/crate/crate/pull/9771", "timeline": [{"oid": "b634ef1cebe0ad3fc04619c38be0d1abecf19ccb", "url": "https://github.com/crate/crate/commit/b634ef1cebe0ad3fc04619c38be0d1abecf19ccb", "message": "Improve encapsulation of components used in FetchBatchAccumulator\n\n- Renames `FetchProjectorContext` \u2192 `ReaderBuckets`. Is now used only\nfor partitioning of the `_fetchId`s by `_readerId` into a `_docId` +\n  later carry the result for the fetched values for the doc-ids.\n\n- `FetchRowInputSymbolVisitor` leaked a lot of the workings into the\n`FetchBatchAccumulator`. This is now encapsulated via `FetchRows`.", "committedDate": "2020-03-17T18:08:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQ1MA==", "url": "https://github.com/crate/crate/pull/9771#discussion_r394218450", "bodyText": "It is a bit tricky to see the flatmap here, seems like this only provides the map operation yielding the Iterator<O> and the flattening happens in AsyncFlatMapBatchIterator. However this makes all sense. Maybe a few lines of documentation/comments would be good, otherwise it will be hard to use it for everyone who is not so familiar with all the concepts and internals.", "author": "mkleen", "createdAt": "2020-03-18T09:45:12Z", "path": "dex/src/main/java/io/crate/data/AsyncFlatMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.data;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface AsyncFlatMapper<I, O> extends AutoCloseable {\n+\n+    CompletableFuture<? extends Iterator<O>> apply(I item, boolean isLastCall);", "originalCommit": "ebf25b710404e4cadf159cc0e7938ea6af4c5ccf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0MzE0NQ==", "url": "https://github.com/crate/crate/pull/9771#discussion_r394243145", "bodyText": "Yep, this is modelled after the stream API:\nflatMap(Function<...,? extends Stream<? extends R>> mapper) : Stream<R>\n\nThe function that does the mapping is called mapper.\nI will add some more docs to clarify that.", "author": "mfussenegger", "createdAt": "2020-03-18T10:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MzczMA==", "url": "https://github.com/crate/crate/pull/9771#discussion_r394293730", "bodyText": "I tried to add something, but it read as a repitition of the signature, so I'll keep it as it is for now.", "author": "mfussenegger", "createdAt": "2020-03-18T11:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMjk0Mw==", "url": "https://github.com/crate/crate/pull/9771#discussion_r394232943", "bodyText": "Very nice!", "author": "mkleen", "createdAt": "2020-03-18T10:08:55Z", "path": "sql/src/main/java/io/crate/execution/engine/fetch/FetchMapper.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.fetch;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.carrotsearch.hppc.IntContainer;\n+import com.carrotsearch.hppc.IntObjectHashMap;\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.carrotsearch.hppc.IntSet;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import io.crate.concurrent.CompletableFutures;\n+import io.crate.data.AsyncFlatMapper;\n+import io.crate.data.Bucket;\n+import io.crate.data.Row;\n+\n+public class FetchMapper implements AsyncFlatMapper<ReaderBuckets, Row> {", "originalCommit": "ebf25b710404e4cadf159cc0e7938ea6af4c5ccf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c3c3d44e3e21b4ef39a3f298b449a79c4b04dc6", "url": "https://github.com/crate/crate/commit/3c3c3d44e3e21b4ef39a3f298b449a79c4b04dc6", "message": "Improve encapsulation of components used in FetchBatchAccumulator\n\n- Renames `FetchProjectorContext` \u2192 `ReaderBuckets`. Is now used only\nfor partitioning of the `_fetchId`s by `_readerId` into a `_docId` +\n  later carry the result for the fetched values for the doc-ids.\n\n- `FetchRowInputSymbolVisitor` leaked a lot of the workings into the\n`FetchBatchAccumulator`. This is now encapsulated via `FetchRows`.", "committedDate": "2020-03-18T11:58:52Z", "type": "commit"}, {"oid": "81c9fb3abde39855424a3630526f79e6049db1c8", "url": "https://github.com/crate/crate/commit/81c9fb3abde39855424a3630526f79e6049db1c8", "message": "Replace AsyncOperationBatchIterator with AsyncFlatMapBatchIterator\n\nThe AsyncOperationBatchIterator was a combination of two things:\n\n- Building chunks (batches)\n- Async invocation of an operation, and generating rows based on the\nresult of this operation.\n\nThis introduces a new `AsyncFlatMapBatchIterator` that is similar to\n`FlatMapBatchIterator`, but takes a mapper that returns a future.\n\nThe \"building chunks\" part is separated by using\n`BatchIterators.partition`.", "committedDate": "2020-03-18T11:58:52Z", "type": "commit"}, {"oid": "81c9fb3abde39855424a3630526f79e6049db1c8", "url": "https://github.com/crate/crate/commit/81c9fb3abde39855424a3630526f79e6049db1c8", "message": "Replace AsyncOperationBatchIterator with AsyncFlatMapBatchIterator\n\nThe AsyncOperationBatchIterator was a combination of two things:\n\n- Building chunks (batches)\n- Async invocation of an operation, and generating rows based on the\nresult of this operation.\n\nThis introduces a new `AsyncFlatMapBatchIterator` that is similar to\n`FlatMapBatchIterator`, but takes a mapper that returns a future.\n\nThe \"building chunks\" part is separated by using\n`BatchIterators.partition`.", "committedDate": "2020-03-18T11:58:52Z", "type": "forcePushed"}]}