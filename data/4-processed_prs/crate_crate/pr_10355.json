{"pr_number": 10355, "pr_title": "Introduce new error handling for http/psql client", "pr_createdAt": "2020-08-12T12:05:44Z", "pr_url": "https://github.com/crate/crate/pull/10355", "timeline": [{"oid": "db2704511605149fe9a96f4d7b507bda25d73680", "url": "https://github.com/crate/crate/commit/db2704511605149fe9a96f4d7b507bda25d73680", "message": "Remove SqlActionException", "committedDate": "2020-08-12T12:27:41Z", "type": "forcePushed"}, {"oid": "b55d5acc9f5379dec7ebe71931938be1abba16de", "url": "https://github.com/crate/crate/commit/b55d5acc9f5379dec7ebe71931938be1abba16de", "message": "fix all tests", "committedDate": "2020-08-12T15:18:31Z", "type": "forcePushed"}, {"oid": "d938757182fc9d3a238f7e8c98bd4202a3d45d8c", "url": "https://github.com/crate/crate/commit/d938757182fc9d3a238f7e8c98bd4202a3d45d8c", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException.", "committedDate": "2020-08-12T16:01:58Z", "type": "forcePushed"}, {"oid": "461cb099051a575c96c33934f6807097e2b04d93", "url": "https://github.com/crate/crate/commit/461cb099051a575c96c33934f6807097e2b04d93", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException.", "committedDate": "2020-08-12T16:02:59Z", "type": "forcePushed"}, {"oid": "a2cdd32527c8e13e5b1f7947b63b6fd2738f998e", "url": "https://github.com/crate/crate/commit/a2cdd32527c8e13e5b1f7947b63b6fd2738f998e", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException.", "committedDate": "2020-08-12T16:08:47Z", "type": "forcePushed"}, {"oid": "c0a43d6bdb34baac2d871678b0977b0df4806ab5", "url": "https://github.com/crate/crate/commit/c0a43d6bdb34baac2d871678b0977b0df4806ab5", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException.", "committedDate": "2020-08-12T16:10:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4MTE0Nw==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469381147", "bodyText": "Error code 4040 does not exist in the crate documentation, i assume 4041 Relationship unknown is the one we want here. https://crate.io/docs/crate/reference/en/4.2/interfaces/http.html", "author": "mkleen", "createdAt": "2020-08-12T16:17:32Z", "path": "server/src/test/java/io/crate/integrationtests/ViewsITest.java", "diffHunk": "@@ -170,7 +170,7 @@ public void testDropViewFailsIfViewIsMissing() {\n                      isSQLError(containsString(\"Relations not found: \" + sqlExecutor.getCurrentSchema() + \".v1\"),\n                                 INTERNAL_ERROR,\n                                 NOT_FOUND,\n-                                4040));", "originalCommit": "c0a43d6bdb34baac2d871678b0977b0df4806ab5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c82fd5b04b3dd358e7eb7416776bac723db226ed", "url": "https://github.com/crate/crate/commit/c82fd5b04b3dd358e7eb7416776bac723db226ed", "message": "Fix last test", "committedDate": "2020-08-13T12:02:54Z", "type": "forcePushed"}, {"oid": "7a720d64723d6d6c4fb97d21bf6f468638e0d989", "url": "https://github.com/crate/crate/commit/7a720d64723d6d6c4fb97d21bf6f468638e0d989", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage.", "committedDate": "2020-08-13T12:10:26Z", "type": "forcePushed"}, {"oid": "e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd", "url": "https://github.com/crate/crate/commit/e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage.", "committedDate": "2020-08-13T12:12:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwNzk3Mg==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469907972", "bodyText": "InvalidRequest was only introduced to handle this case here, is there a simpler way to do this ?", "author": "mkleen", "createdAt": "2020-08-13T12:17:52Z", "path": "server/src/main/java/io/crate/rest/action/SqlHttpHandler.java", "diffHunk": "@@ -199,8 +202,8 @@ private void sendResponse(Session session,\n         List<Object> args = parseContext.args();\n         List<List<Object>> bulkArgs = parseContext.bulkArgs();\n         if (bothProvided(args, bulkArgs)) {\n-            return CompletableFuture.failedFuture(new SQLActionException(\n-                \"request body contains args and bulk_args. It's forbidden to provide both\", 4000, HttpResponseStatus.BAD_REQUEST));\n+            return CompletableFuture.failedFuture(new InvalidRequest(", "originalCommit": "e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2NDMzMw==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469964333", "bodyText": "IllegalArgumentException wouldn't fit?", "author": "mfussenegger", "createdAt": "2020-08-13T13:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwNzk3Mg=="}], "type": "inlineReview"}, {"oid": "6fbec0e106c3736f40c9666a055d1e2d007c84be", "url": "https://github.com/crate/crate/commit/6fbec0e106c3736f40c9666a055d1e2d007c84be", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage.", "committedDate": "2020-08-13T12:32:10Z", "type": "forcePushed"}, {"oid": "a6fd6c3cd301217b829cfa483cdcdd5b753c66ff", "url": "https://github.com/crate/crate/commit/a6fd6c3cd301217b829cfa483cdcdd5b753c66ff", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message.", "committedDate": "2020-08-13T12:32:50Z", "type": "forcePushed"}, {"oid": "9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549", "url": "https://github.com/crate/crate/commit/9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message.", "committedDate": "2020-08-13T12:40:45Z", "type": "forcePushed"}, {"oid": "4188158b96335b755cda9357f27d87bf39171132", "url": "https://github.com/crate/crate/commit/4188158b96335b755cda9357f27d87bf39171132", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message.", "committedDate": "2020-08-13T13:40:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1ODA4Mw==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469958083", "bodyText": "We currently don't consider error messages to be stable, so I think this could be moved to the changes section instead of the breaking changes section.", "author": "mfussenegger", "createdAt": "2020-08-13T13:39:09Z", "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -42,6 +42,10 @@ Unreleased Changes\n Breaking Changes\n ================\n \n+- Changed the error handling so it returns the error message and the related", "originalCommit": "9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MDI4Ng==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469960286", "bodyText": "handle is a bit generic and there is no hint how it is handling the exception. Maybe this could also be called forWireTransmission ? Or we rename all 3 methods to prepareForClientTransmission or something like that?", "author": "mfussenegger", "createdAt": "2020-08-13T13:42:23Z", "path": "server/src/main/java/io/crate/exceptions/SQLExceptions.java", "diffHunk": "@@ -111,81 +106,28 @@ public static boolean isShardFailure(Throwable e) {\n     }\n \n     public static Function<Throwable, Exception> forWireTransmission(AccessControl accessControl) {\n-        return e -> createSQLActionException(e, accessControl::ensureMaySee);\n+        return e -> handleException(e, accessControl::ensureMaySee);\n     }\n \n-    public static SQLActionException forWireTransmission(AccessControl accessControl, Throwable e) {\n-        return createSQLActionException(e, accessControl::ensureMaySee);\n+    public static RuntimeException forWireTransmission(AccessControl accessControl, Throwable e) {\n+        return handleException(e, accessControl::ensureMaySee);\n     }\n \n-    /**\n-     * Create a {@link SQLActionException} out of a {@link Throwable}.\n-     * If concrete {@link ElasticsearchException} is found, first transform it\n-     * to a {@link CrateException}\n-     */\n-    public static SQLActionException createSQLActionException(Throwable e, Consumer<Throwable> maskSensitiveInformation) {\n-        // ideally this method would be a static factory method in SQLActionException,\n-        // but that would pull too many dependencies for the client\n-\n-        if (e instanceof SQLActionException) {\n-            return (SQLActionException) e;\n-        }\n+    public static RuntimeException handleException(Throwable e, @Nullable Consumer<Throwable> maskSensitiveInformation) {", "originalCommit": "4188158b96335b755cda9357f27d87bf39171132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTIyMA==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469961220", "bodyText": "Either the argument should be annotated with Nullable or this check is not needed. (In which case the PGError.fromThrowable(..) call earlier may be strange as well?", "author": "mfussenegger", "createdAt": "2020-08-13T13:43:41Z", "path": "server/src/main/java/io/crate/protocols/postgres/Messages.java", "diffHunk": "@@ -179,40 +173,34 @@ static void sendParameterStatus(Channel channel, final String name, final String\n     static void sendAuthenticationError(Channel channel, String message) {\n         LOGGER.warn(message);\n         byte[] msg = message.getBytes(StandardCharsets.UTF_8);\n-        sendErrorResponse(channel, message, msg, SEVERITY_FATAL, null, null,\n-            METHOD_NAME_CLIENT_AUTH, ERROR_CODE_INVALID_AUTHORIZATION_SPECIFICATION);\n+        byte[] errorCode = PGErrorStatus.INVALID_AUTHORIZATION_SPECIFICATION.code().getBytes(StandardCharsets.UTF_8);\n+\n+        sendErrorResponse(channel, message, msg, PGError.SEVERITY_FATAL, null, null,\n+                          METHOD_NAME_CLIENT_AUTH, errorCode);\n     }\n \n     static ChannelFuture sendErrorResponse(Channel channel, Throwable throwable) {\n-        final String message = SQLExceptions.messageOf(throwable);\n-        byte[] msg = message.getBytes(StandardCharsets.UTF_8);\n+        var error = PGError.fromThrowable(throwable);\n+        byte[] msg = error.message().getBytes(StandardCharsets.UTF_8);\n+        byte[] errorCode = error.status().code().getBytes(StandardCharsets.UTF_8);\n         byte[] lineNumber = null;\n         byte[] fileName = null;\n         byte[] methodName = null;\n \n-        StackTraceElement[] stackTrace = throwable.getStackTrace();\n-        if (stackTrace != null && stackTrace.length > 0) {\n-            StackTraceElement stackTraceElement = stackTrace[0];\n-            lineNumber = String.valueOf(stackTraceElement.getLineNumber()).getBytes(StandardCharsets.UTF_8);\n-            if (stackTraceElement.getFileName() != null) {\n-                fileName = stackTraceElement.getFileName().getBytes(StandardCharsets.UTF_8);\n-            }\n-            if (stackTraceElement.getMethodName() != null) {\n-                methodName = stackTraceElement.getMethodName().getBytes(StandardCharsets.UTF_8);\n+        if (throwable != null) {", "originalCommit": "4188158b96335b755cda9357f27d87bf39171132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2Mjc2Mw==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469962763", "bodyText": "Wouldn't the logic from\nhttps://github.com/crate/crate/pull/10355/files#diff-d29c0eca9190fb553abe986177c7c87cR224\nalso make sense here?", "author": "mfussenegger", "createdAt": "2020-08-13T13:45:52Z", "path": "server/src/main/java/io/crate/protocols/postgres/PGError.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres;\n+\n+import io.crate.exceptions.SQLExceptions;\n+\n+import javax.annotation.Nullable;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class PGError {\n+\n+    public static final byte[] SEVERITY_FATAL = \"FATAL\".getBytes(StandardCharsets.UTF_8);\n+    public static final byte[] SEVERITY_ERROR = \"ERROR\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final PGErrorStatus status;\n+    private final String message;\n+\n+    @Nullable\n+    private final Throwable throwable;\n+\n+    public PGError(PGErrorStatus status, String message, @Nullable Throwable throwable) {\n+        this.status = status;\n+        this.message = message;\n+        this.throwable = throwable;\n+\n+    }\n+\n+    public PGErrorStatus status() {\n+        return status;\n+    }\n+\n+    @Nullable\n+    public Throwable throwable() {\n+        return throwable;\n+    }\n+\n+    public String message() {\n+        return message;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PGError{\" +\n+               \"status=\" + status +\n+               \", message='\" + message + '\\'' +\n+               \", throwable=\" + throwable +\n+               '}';\n+    }\n+\n+    public static PGError fromThrowable(Throwable throwable) {\n+        var status = PGErrorStatus.INTERNAL_ERROR;\n+        if (throwable instanceof IllegalArgumentException || throwable instanceof UnsupportedOperationException) {\n+            status = PGErrorStatus.FEATURE_NOT_SUPPORTED;\n+        }\n+        return new PGError(status, SQLExceptions.messageOf(throwable), throwable);", "originalCommit": "4188158b96335b755cda9357f27d87bf39171132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MzgwNg==", "url": "https://github.com/crate/crate/pull/10355#discussion_r469963806", "bodyText": "Do we use the message from here?\nLooks like we have 2 sources of messages, once from the exception and once from the definition here. I think we should stick to the one from the exception and only add/annotate the response status and error code", "author": "mfussenegger", "createdAt": "2020-08-13T13:47:21Z", "path": "server/src/main/java/io/crate/rest/action/HttpErrorStatus.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.rest.action;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+public enum HttpErrorStatus {\n+\n+    STATEMENT_INVALID_OR_UNSUPPORTED_SYNTAX(HttpResponseStatus.BAD_REQUEST, 4000, \"The statement contains an invalid syntax or unsupported SQL statement\"),\n+    STATEMENT_INVALID_ANALYZER_DEFINITION(HttpResponseStatus.BAD_REQUEST, 4001, \"The statement contains an invalid analyzer definition.\"),\n+    RELATION_INVALID_NAME(HttpResponseStatus.BAD_REQUEST, 4002, \"The name of the relation is invalid\"),\n+    FIELD_VALIDATION_FAILED(HttpResponseStatus.BAD_REQUEST,4003, \"Field type validation failed\"),\n+    POSSIBLE_FEATURE_NOT_SUPPROTED_YET(HttpResponseStatus.BAD_REQUEST,4004, \"Possible feature not supported (yet)\"),\n+    ALTER_TABLE_USING_ALIAS_NOT_SUPPORTED(HttpResponseStatus.BAD_REQUEST, 4005, \"Alter table using a table alias is not supported.\"),\n+    COLUMN_ALIAS_IS_AMBIGUOUS(HttpResponseStatus.BAD_REQUEST, 4006, \"The used column alias is ambiguous.\"),\n+    RELATION_OPERATION_NOT_SUPPORTED(HttpResponseStatus.BAD_REQUEST,4007, \"The operation is not supported on this relation, as it is not accessible\"),\n+    COLUMN_NAME_INVALID(HttpResponseStatus.BAD_REQUEST,4008, \"The name of the column is invalid\"),\n+    LICENSE_EXPIRED(HttpResponseStatus.BAD_REQUEST,4009, \"CrateDB License is expired\"),\n+    USER_NOT_AUTHORIZED_TO_PERFORM_STATEMENT(HttpResponseStatus.UNAUTHORIZED, 4010, \"User is not authorized to perform the SQL statement\"),\n+    MISSING_USER_PRIVILEGES(HttpResponseStatus.UNAUTHORIZED, 4011, \"Missing privilege for user\"),\n+    ONLY_READ_OPERATION_ALLOWED_ON_THIS_NODE(HttpResponseStatus.FORBIDDEN, 4031, \"Only read operations are allowed on this node\"),\n+    RELATION_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4041, \"Unknown Relation\"),\n+    ANALYZER_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4042, \"Unknown Analyzer\"),\n+    COLUMN_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4043, \"Unknown Column\"),\n+    TYPE_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4044, \"Unknown Type\"),\n+    SCHEMA_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4045, \"Unknown Schema\"),\n+    PARTITION_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4046, \"Unknown Partition\"),\n+    REPOSITORY_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4047, \"Unknown Repository\"),\n+    SNAPSHOT_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4048, \"Unknown Snapshot\"),\n+    USER_DEFINED_FUNCTION_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4049, \"Unknown user-defined function\"),\n+    USER_UNKNOWN(HttpResponseStatus.NOT_FOUND, 40410, \"Unknown user\"),\n+    DOCUMENT_WITH_THE_SAME_PRIMARY_KEY_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4091, \"A document with the same primary key exists already\"),\n+    VERSION_CONFLICT(HttpResponseStatus.CONFLICT,4092, \"A VersionConflict. Might be thrown if an attempt was made to update the same document concurrently\"),\n+    RELATION_WITH_THE_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4093, \"A relation with the same name exists already\"),\n+    TABLE_ALIAS_CONTAINS_TABLES_WITH_DIFFERENT_SCHEMA(HttpResponseStatus.CONFLICT,4094, \"The used table alias contains tables with different schema\"),\n+    REPOSITORY_WITH_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4095, \"A repository with the same name exists already\"),\n+    SNAPSHOT_WITH_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4096, \"A snapshot with the same name already exists in the repository\"),\n+    PARTITION_FOR_THE_SAME_VALUE_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4097, \"A partition for the same values already exists in this table\"),\n+    USER_DEFINED_FUNCTION_WITH_SAME_SIGNATURE_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4098, \"A user-defined function with the same signature already exists\"),\n+    USER_WITH_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4099, \"A user with the same name already exists\"),\n+    UNHANDLED_SERVER_ERROR(HttpResponseStatus.INTERNAL_SERVER_ERROR, 5000, \"Unhandled server error\"),\n+    EXECUTION_OF_TASK_FAILED(HttpResponseStatus.INTERNAL_SERVER_ERROR,5001, \"The execution of one or more tasks failed\"),\n+    ONE_OR_MORE_SHARDS_NOT_AVAILABLE(HttpResponseStatus.INTERNAL_SERVER_ERROR,5002, \"One or more shards are not available\"),\n+    QUERY_FAILED_ON_ONE_OR_MORE_SHARDS(HttpResponseStatus.INTERNAL_SERVER_ERROR,5003, \"The query failed on one or more shards\"),\n+    CREATING_SNAPSHOT_FAILED(HttpResponseStatus.INTERNAL_SERVER_ERROR,5004, \"Creating a snapshot failed\"),\n+    QUERY_KILLED_BY_STATEMENT(HttpResponseStatus.INTERNAL_SERVER_ERROR, 5030, \"The query was killed by a kill statement\");\n+\n+    private final HttpResponseStatus httpResponseStatus;\n+    private final int errorCode;\n+    private final String message;\n+\n+    HttpErrorStatus(HttpResponseStatus httpResponseStatus, int erroCode, String message) {\n+        this.httpResponseStatus = httpResponseStatus;\n+        this.errorCode = erroCode;\n+        this.message = message;\n+    }\n+\n+    public HttpResponseStatus httpResponseStatus() {\n+        return httpResponseStatus;\n+    }\n+\n+    public int errorCode() {\n+        return errorCode;\n+    }\n+\n+    public String message() {", "originalCommit": "4188158b96335b755cda9357f27d87bf39171132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a1596d2472f807954f37c7073bdd332c8e41c87d", "url": "https://github.com/crate/crate/commit/a1596d2472f807954f37c7073bdd332c8e41c87d", "message": "Update changes file", "committedDate": "2020-08-13T15:01:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzY5MA==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470033690", "bodyText": "message will never be null here because of how messageOf is implemented.\nMaybe it would be an option to integrate the strack-trace element logic into messageOf?, not sure what else would be affected by that.", "author": "mfussenegger", "createdAt": "2020-08-13T15:22:32Z", "path": "server/src/main/java/io/crate/protocols/postgres/PGError.java", "diffHunk": "@@ -74,6 +76,21 @@ public static PGError fromThrowable(Throwable throwable) {\n         if (throwable instanceof IllegalArgumentException || throwable instanceof UnsupportedOperationException) {\n             status = PGErrorStatus.FEATURE_NOT_SUPPORTED;\n         }\n-        return new PGError(status, SQLExceptions.messageOf(throwable), throwable);\n+        String message = SQLExceptions.messageOf(throwable);\n+        if (message == null) {", "originalCommit": "e5a025635316373a5af03472713c858b3dcc0382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDIxNw==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470450217", "bodyText": "What do you think about the idea to only add the stacktrace based on the error_trace flag similiar we do at the http client ? \n  \n    \n      crate/server/src/main/java/io/crate/rest/action/SqlHttpHandler.java\n    \n    \n         Line 169\n      in\n      eedbca0\n    \n    \n    \n    \n\n        \n          \n           boolean includeErrorTrace = paramContainFlag(parameters, \"error_trace\");", "author": "mkleen", "createdAt": "2020-08-14T07:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MTM1Mg==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470451352", "bodyText": "How would a PostgreSQL client set that flag?\nThe logic there wasn't meant to include the full stacktrace, but to have an error message that is a bit more meaningful. For example NullPointerException often don't have a message.\nFor including the stacktrace we should actually additionally look into adding the W parts from here", "author": "mfussenegger", "createdAt": "2020-08-14T07:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1NzU0NA==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470457544", "bodyText": "How would a PostgreSQL client set that flag?\n\nOh, my assumption was it was a server side parameter.\n\nThe logic there wasn't meant to include the full stacktrace, but to have an error message that is a bit more meaningful. For example NullPointerException often don't have a message.\n\nOk, I will try to come up with something meaningful.", "author": "mkleen", "createdAt": "2020-08-14T07:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NjAyOQ==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470466029", "bodyText": "This provides a message in the following format (take from a broken test):\nRelationUnknown 'Relation 'sys.nodes' unknown' thrown at io.crate.analyze.relations.FullQualifiedNameFieldProvider.resolveField(FullQualifiedNameFieldProvider.java:113)'\n\nThe only downside here is that the position could change based on the code, so for unit testing, we could either go with startsWith matching, or provide a message for testing without this additional information. The tests need to be adapted, which i will do once we finalise the error message.", "author": "mkleen", "createdAt": "2020-08-14T07:49:27Z", "path": "server/src/main/java/io/crate/exceptions/SQLExceptions.java", "diffHunk": "@@ -91,6 +92,22 @@ public static Throwable unwrap(@Nonnull Throwable t) {\n         return unwrap(t, null);\n     }\n \n+    public static String detailedMessageOf(@Nullable Throwable t) {", "originalCommit": "adae411e6fbf21af3d78cfd3d4a36ce42cc41462", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ4MDAxMQ==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470480011", "bodyText": "That's not what I meant.\nMy intention was to keep the original logic:\nString message = throwable.getMessage();\nif (message == null) {\n    if (throwable instanceof CrateException && throwable.getCause() != null) {\n        throwable = throwable.getCause();   // use cause because it contains a more meaningful error in most cases\n    }\n    StackTraceElement[] stackTraceElements = throwable.getStackTrace();\n    if (stackTraceElements.length > 0) {\n        message = String.format(Locale.ENGLISH,\n                                \"%s in %s\",\n                                throwable.getClass().getSimpleName(),\n                                stackTraceElements[0]);\n    } else {\n        message = \"Error in \" + throwable.getClass().getSimpleName();\n    }\n}\nand use that in both, the HTTP and PostgreSQL case.\nNote that:\n\nThis only populates the message\nIt only uses the stacktrace information if the message of the throwable is null.\n\nBasically, I think if we extended the if (t == null) case in messageOf to utilize the stacktrace, we could just use messageOf(t) in both HTTP and PostgreSQL and not need any new method.", "author": "mfussenegger", "createdAt": "2020-08-14T08:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5OTM1NQ==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470499355", "bodyText": "Ah, thanks for explaining \ud83d\udc4d", "author": "mkleen", "createdAt": "2020-08-14T08:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NjAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzMDUzNQ==", "url": "https://github.com/crate/crate/pull/10355#discussion_r470530535", "bodyText": "I hope this version makes sense now.", "author": "mkleen", "createdAt": "2020-08-14T09:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NjAyOQ=="}], "type": "inlineReview"}, {"oid": "8e360bdef5129761599039e149cf662b975424b0", "url": "https://github.com/crate/crate/commit/8e360bdef5129761599039e149cf662b975424b0", "message": "Provide better error message", "committedDate": "2020-08-14T08:07:50Z", "type": "forcePushed"}, {"oid": "4f3ac8cdc05e0a26368a18307ce738012116f041", "url": "https://github.com/crate/crate/commit/4f3ac8cdc05e0a26368a18307ce738012116f041", "message": "Provide better error message", "committedDate": "2020-08-14T08:09:49Z", "type": "forcePushed"}, {"oid": "074caed9dc56ee2a55b949f51ccd81adf66e1ce4", "url": "https://github.com/crate/crate/commit/074caed9dc56ee2a55b949f51ccd81adf66e1ce4", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message.", "committedDate": "2020-08-14T12:21:26Z", "type": "forcePushed"}, {"oid": "37c2c5c439c7e8202c009d40c53040e6419c4740", "url": "https://github.com/crate/crate/commit/37c2c5c439c7e8202c009d40c53040e6419c4740", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message.", "committedDate": "2020-08-14T12:31:45Z", "type": "commit"}, {"oid": "37c2c5c439c7e8202c009d40c53040e6419c4740", "url": "https://github.com/crate/crate/commit/37c2c5c439c7e8202c009d40c53040e6419c4740", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message.", "committedDate": "2020-08-14T12:31:45Z", "type": "forcePushed"}]}