{"pr_number": 9845, "pr_title": "Add unreleased notes and documentation on the constraints section", "pr_createdAt": "2020-04-02T14:13:05Z", "pr_url": "https://github.com/crate/crate/pull/9845", "timeline": [{"oid": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "url": "https://github.com/crate/crate/commit/0c038adbd79bdbd8bb2ead12c180b021866927a3", "message": "Add unreleased notes and documentation on the constraints section", "committedDate": "2020-04-03T11:42:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2NjA5NQ==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402966095", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The check constraint can be used on any column, it prevents inserts and\n          \n          \n            \n            updates of values that do not pass the check test.\n          \n          \n            \n            \n          \n          \n            \n            Example::\n          \n          \n            \n            \n          \n          \n            \n                cr> create table my_table3 (\n          \n          \n            \n                ...   first_column integer primary key,\n          \n          \n            \n                ...   second_column integer check(second_column >= 0),\n          \n          \n            \n                ...   third_column string constraint not_you check(third_column <> 'me'),\n          \n          \n            \n                ...   check(first_column >= 100),\n          \n          \n            \n                ...   constraint is_even check(second_column % 2 = 0)\n          \n          \n            \n                ... );\n          \n          \n            \n                CREATE OK, 1 row affected  (... sec)\n          \n          \n            \n            A check constraint allows you to specify that the values in a certain column\n          \n          \n            \n            must satisfy a boolean expression. This can be used to ensure data integrity. For example: If you have a table to store metrics from sensors and you want to ensure that negative values are rejected::\n          \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                cr> create table metrics (\n          \n          \n            \n                ...   id TEXT PRIMARY KEY,\n          \n          \n            \n                ...   weight double CHECK (weight >= 0)\n          \n          \n            \n                ... );\n          \n          \n            \n                CREATE OK, 1 row affected  (... sec)\n          \n      \n    \n    \n  \n\nI think for the teasing example it is better to keep it simple - only one\nconstraint of many. The other document then elaborates on the different\nvariants.\nI also think we should try to stop using my_table..., but try to come up with a IoT or other real-world examples.", "author": "mfussenegger", "createdAt": "2020-04-03T12:22:26Z", "path": "docs/general/ddl/constraints.rst", "diffHunk": "@@ -65,9 +65,40 @@ Example::\n     ... );\n     CREATE OK, 1 row affected (... sec)\n \n+.. NOTE::\n+\n+   For further details see :ref:`not_null_constraint`.\n+\n+Check\n+=====\n+\n+The check constraint can be used on any column, it prevents inserts and\n+updates of values that do not pass the check test.\n+\n+Example::\n+\n+    cr> create table my_table3 (\n+    ...   first_column integer primary key,\n+    ...   second_column integer check(second_column >= 0),\n+    ...   third_column string constraint not_you check(third_column <> 'me'),\n+    ...   check(first_column >= 100),\n+    ...   constraint is_even check(second_column % 2 = 0)\n+    ... );\n+    CREATE OK, 1 row affected  (... sec)", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2NzIzMQ==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402967231", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              check(boolean_expression)\n          \n          \n            \n              constraint <name> check(boolean_expression)\n          \n          \n            \n              [CONSTRAINT <name>] CHECK (boolean_expression)", "author": "mfussenegger", "createdAt": "2020-04-03T12:24:31Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,75 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  check(boolean_expression)\n+  constraint <name> check(boolean_expression)", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MDk1Mw==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402970953", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               CHECK constraint conditions must be immutable, always giving the same\n          \n          \n            \n               CHECK constraint conditions must be deterministic, always yielding the same", "author": "mfussenegger", "createdAt": "2020-04-03T12:31:21Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,75 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  check(boolean_expression)\n+  constraint <name> check(boolean_expression)\n+\n+With two options:\n+\n+1) As many check constraints as required, as additional elements of\n+   a create table statement.\n+   When name is omitted, one is generated with pattern `fqtn_check_uuid`,\n+   where:\n+\n+   - `fqtb`: full qualified table name.\n+   - `check`: \"check\".\n+   - `uuid`: 6 random hexadecimal digits (2 octets),\n+     e.g. doc_my_table_check_bd3f57640937.\n+\n+2) A single check constraint is allowed as part of a column definition.\n+   When name is omitted, the pattern is `fqtn_column_check_uuid`,\n+   where:\n+\n+   - `column`: column name.\n+\n+Example:\n+\n+::\n+\n+  cr> create table my_table (\n+  ...    first_column integer primary key,\n+  ...    second_column integer check(second_column >= 0),\n+  ...    third_column string constraint not_you check(third_column <> 'me'),\n+  ...    check(first_column >= 100),\n+  ...    constraint is_even check(second_column % 2 = 0)\n+  ...);\n+  CREATE OK, 1 row affected  (... sec)\n+\n+::\n+\n+  cr> select table_schema, table_name, constraint_type, constraint_name\n+  ...     from information_schema.table_constraints\n+  ...     where table_name = 'my_table';\n+\n+.. WARNING::\n+\n+   CHECK constraint conditions must be immutable, always giving the same", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MTEyNw==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402971127", "bodyText": "Not sure if we should include hints how to break the system.", "author": "mfussenegger", "createdAt": "2020-04-03T12:31:42Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,75 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  check(boolean_expression)\n+  constraint <name> check(boolean_expression)\n+\n+With two options:\n+\n+1) As many check constraints as required, as additional elements of\n+   a create table statement.\n+   When name is omitted, one is generated with pattern `fqtn_check_uuid`,\n+   where:\n+\n+   - `fqtb`: full qualified table name.\n+   - `check`: \"check\".\n+   - `uuid`: 6 random hexadecimal digits (2 octets),\n+     e.g. doc_my_table_check_bd3f57640937.\n+\n+2) A single check constraint is allowed as part of a column definition.\n+   When name is omitted, the pattern is `fqtn_column_check_uuid`,\n+   where:\n+\n+   - `column`: column name.\n+\n+Example:\n+\n+::\n+\n+  cr> create table my_table (\n+  ...    first_column integer primary key,\n+  ...    second_column integer check(second_column >= 0),\n+  ...    third_column string constraint not_you check(third_column <> 'me'),\n+  ...    check(first_column >= 100),\n+  ...    constraint is_even check(second_column % 2 = 0)\n+  ...);\n+  CREATE OK, 1 row affected  (... sec)\n+\n+::\n+\n+  cr> select table_schema, table_name, constraint_type, constraint_name\n+  ...     from information_schema.table_constraints\n+  ...     where table_name = 'my_table';\n+\n+.. WARNING::\n+\n+   CHECK constraint conditions must be immutable, always giving the same\n+   result for the same input.\n+   A way to break this is to reference a user-defined function in a CHECK\n+   expression, and then change the behavior of that function. Some existing\n+   rows in the table could now violate the CHECK constraint. That would\n+   cause a subsequent database dump and reload to fail.", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MTY3MA==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402971670", "bodyText": "I think this is a bit hard to understand. How about:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With two options:\n          \n          \n            \n            \n          \n          \n            \n            1) As many check constraints as required, as additional elements of\n          \n          \n            \n               a create table statement.\n          \n          \n            \n               When name is omitted, one is generated with pattern `fqtn_check_uuid`,\n          \n          \n            \n               where:\n          \n          \n            \n            \n          \n          \n            \n               - `fqtb`: full qualified table name.\n          \n          \n            \n               - `check`: \"check\".\n          \n          \n            \n               - `uuid`: 6 random hexadecimal digits (2 octets),\n          \n          \n            \n                 e.g. doc_my_table_check_bd3f57640937.\n          \n          \n            \n            \n          \n          \n            \n            2) A single check constraint is allowed as part of a column definition.\n          \n          \n            \n               When name is omitted, the pattern is `fqtn_column_check_uuid`,\n          \n          \n            \n               where:\n          \n          \n            \n            \n          \n          \n            \n               - `column`: column name.\n          \n          \n            \n            \n          \n          \n            \n            Example:\n          \n          \n            \n            If `CONSTAINT <name>` is omitted, CrateDB generates a unique name automatically. This name is visible in :ref:`.. ref to information_schema table` and can be used to :ref:`ALTER TABLE DROP` a constraint.\n          \n      \n    \n    \n  \n\nLeave out the implementation details of the name generation. (Not that interesting, and allows us to change it later on - as we can treat this as an implementation detail).\nThe CONSTRAINT definition can either be inline with a column, like this::\n\n    cr> CREATE TABLE metrics1 (\n    ...     weight REAL CONSTRAINT weight_is_positive CHECK (weight >= 0),\n    ... );\n\nOr, also inline, but without explicit name::\n\n    cr> CREATE TABLE metrics2 (\n    ...     weight REAL CHECK (weight >= 0),\n    ... );\n\n\nOr on a table level, in which case the `CONSTRAINT` keyword and constraint name is required:\n\n\n    cr> CREATE TABLE metrics3 (\n    ...     weight REAL,\n    ...     CONSTRAINT weight_is_positive CHECK (weight >= 0),\n    ... );\n\n\nMaybe another example which points out that multiple columns can be referenced.", "author": "mfussenegger", "createdAt": "2020-04-03T12:32:43Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,75 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  check(boolean_expression)\n+  constraint <name> check(boolean_expression)\n+\n+With two options:\n+\n+1) As many check constraints as required, as additional elements of\n+   a create table statement.\n+   When name is omitted, one is generated with pattern `fqtn_check_uuid`,\n+   where:\n+\n+   - `fqtb`: full qualified table name.\n+   - `check`: \"check\".\n+   - `uuid`: 6 random hexadecimal digits (2 octets),\n+     e.g. doc_my_table_check_bd3f57640937.\n+\n+2) A single check constraint is allowed as part of a column definition.\n+   When name is omitted, the pattern is `fqtn_column_check_uuid`,\n+   where:\n+\n+   - `column`: column name.\n+\n+Example:", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MjEwMQ==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402972101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Remove a :ref:`check_constraint` constraont from the table.\n          \n          \n            \n            Remove a :ref:`check_constraint` constraint from a table.", "author": "mfussenegger", "createdAt": "2020-04-03T12:33:25Z", "path": "docs/sql/statements/drop-constraint.rst", "diffHunk": "@@ -0,0 +1,33 @@\n+.. _drop-constraint:\n+\n+===================\n+``DROP CONSTRAINT``\n+===================\n+\n+Remove a :ref:`check_constraint` constraont from the table.", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MjM1Mw==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402972353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ALTER TABLE table_ident DROP CONSTRAINT check_ident\n          \n          \n            \n                ALTER TABLE table_ident DROP CONSTRAINT check_name\n          \n      \n    \n    \n  \n\nTo match the synposis definition used elsewhere constraint <name> check(boolean_expression)", "author": "mfussenegger", "createdAt": "2020-04-03T12:33:51Z", "path": "docs/sql/statements/drop-constraint.rst", "diffHunk": "@@ -0,0 +1,33 @@\n+.. _drop-constraint:\n+\n+===================\n+``DROP CONSTRAINT``\n+===================\n+\n+Remove a :ref:`check_constraint` constraont from the table.\n+\n+.. rubric:: Table of contents\n+\n+.. contents::\n+   :local:\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    ALTER TABLE table_ident DROP CONSTRAINT check_ident", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk3MjQ0MA==", "url": "https://github.com/crate/crate/pull/9845#discussion_r402972440", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            :check_ident:\n          \n          \n            \n            :check_name:", "author": "mfussenegger", "createdAt": "2020-04-03T12:34:02Z", "path": "docs/sql/statements/drop-constraint.rst", "diffHunk": "@@ -0,0 +1,33 @@\n+.. _drop-constraint:\n+\n+===================\n+``DROP CONSTRAINT``\n+===================\n+\n+Remove a :ref:`check_constraint` constraont from the table.\n+\n+.. rubric:: Table of contents\n+\n+.. contents::\n+   :local:\n+\n+Synopsis\n+========\n+\n+.. code-block:: sql\n+\n+    ALTER TABLE table_ident DROP CONSTRAINT check_ident\n+\n+Description\n+===========\n+\n+Removes CHECK constraints from the table.\n+\n+Parameters\n+==========\n+\n+:table_ident:\n+  The name (optionally schema-qualified) of the table.\n+\n+:check_ident:", "originalCommit": "0c038adbd79bdbd8bb2ead12c180b021866927a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b8bbcf5ac015d044308b6c8044eda53df5fe35e5", "url": "https://github.com/crate/crate/commit/b8bbcf5ac015d044308b6c8044eda53df5fe35e5", "message": "Add Jordi's feddback", "committedDate": "2020-04-03T13:29:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNDY3OA==", "url": "https://github.com/crate/crate/pull/9845#discussion_r403014678", "bodyText": "please correct the ref to point to the relevant table.. sorry I was too lazy in the suggestion to look it up.", "author": "mfussenegger", "createdAt": "2020-04-03T13:43:52Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,104 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  [CONSTRAINT <name>] CHECK (boolean_expression)\n+\n+If `CONSTAINT <name>` is omitted, CrateDB generates a unique name automatically.\n+This name is visible in :ref:`information_schema` and can be used to", "originalCommit": "49161f4946c105d4fd6c65749925bc112734aff9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNTExNQ==", "url": "https://github.com/crate/crate/pull/9845#discussion_r403015115", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or, on a table level with explicit name:\n          \n          \n            \n            Or, on a table level with explicit name::", "author": "mfussenegger", "createdAt": "2020-04-03T13:44:32Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,104 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  [CONSTRAINT <name>] CHECK (boolean_expression)\n+\n+If `CONSTAINT <name>` is omitted, CrateDB generates a unique name automatically.\n+This name is visible in :ref:`information_schema` and can be used to\n+:ref:`ALTER TABLE DROP` a constraint.\n+\n+::\n+\n+  cr> select table_schema, table_name, constraint_type, constraint_name\n+  ...     from information_schema.table_constraints\n+  ...     where table_name = 'metrics1';\n+\n+The CONSTRAINT definition can either be inline with a column, like this::\n+\n+    cr> CREATE TABLE metrics1 (\n+    ...     weight REAL CONSTRAINT weight_is_positive CHECK (weight >= 0),\n+    ... );\n+\n+Or, also inline, but without explicit name::\n+\n+    cr> CREATE TABLE metrics2 (\n+    ...     weight REAL CHECK (weight >= 0),\n+    ... );\n+\n+Or, on a table level with explicit name:", "originalCommit": "49161f4946c105d4fd6c65749925bc112734aff9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNTM3OA==", "url": "https://github.com/crate/crate/pull/9845#discussion_r403015378", "bodyText": "The examples should be runnable and have the outputs asserted, no?", "author": "mfussenegger", "createdAt": "2020-04-03T13:44:58Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,104 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  [CONSTRAINT <name>] CHECK (boolean_expression)\n+\n+If `CONSTAINT <name>` is omitted, CrateDB generates a unique name automatically.\n+This name is visible in :ref:`information_schema` and can be used to\n+:ref:`ALTER TABLE DROP` a constraint.\n+\n+::\n+\n+  cr> select table_schema, table_name, constraint_type, constraint_name\n+  ...     from information_schema.table_constraints\n+  ...     where table_name = 'metrics1';\n+\n+The CONSTRAINT definition can either be inline with a column, like this::\n+\n+    cr> CREATE TABLE metrics1 (\n+    ...     weight REAL CONSTRAINT weight_is_positive CHECK (weight >= 0),\n+    ... );\n+\n+Or, also inline, but without explicit name::\n+\n+    cr> CREATE TABLE metrics2 (\n+    ...     weight REAL CHECK (weight >= 0),\n+    ... );", "originalCommit": "49161f4946c105d4fd6c65749925bc112734aff9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNTQ1NA==", "url": "https://github.com/crate/crate/pull/9845#discussion_r403015454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or without name:\n          \n          \n            \n            Or without name::", "author": "mfussenegger", "createdAt": "2020-04-03T13:45:05Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,104 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  [CONSTRAINT <name>] CHECK (boolean_expression)\n+\n+If `CONSTAINT <name>` is omitted, CrateDB generates a unique name automatically.\n+This name is visible in :ref:`information_schema` and can be used to\n+:ref:`ALTER TABLE DROP` a constraint.\n+\n+::\n+\n+  cr> select table_schema, table_name, constraint_type, constraint_name\n+  ...     from information_schema.table_constraints\n+  ...     where table_name = 'metrics1';\n+\n+The CONSTRAINT definition can either be inline with a column, like this::\n+\n+    cr> CREATE TABLE metrics1 (\n+    ...     weight REAL CONSTRAINT weight_is_positive CHECK (weight >= 0),\n+    ... );\n+\n+Or, also inline, but without explicit name::\n+\n+    cr> CREATE TABLE metrics2 (\n+    ...     weight REAL CHECK (weight >= 0),\n+    ... );\n+\n+Or, on a table level with explicit name:\n+\n+    cr> CREATE TABLE metrics3 (\n+    ...     weight REAL,\n+    ...     CONSTRAINT weight_is_positive CHECK (weight >= 0),\n+    ... );\n+\n+Or without name:", "originalCommit": "49161f4946c105d4fd6c65749925bc112734aff9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxNTk0OA==", "url": "https://github.com/crate/crate/pull/9845#discussion_r403015948", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                cr> CREATE TABLE metrics6 (\n          \n          \n            \n                ...     weight REAL,\n          \n          \n            \n                ...     qty INTEGER CHECK (qty * weight != 1918)\n          \n          \n            \n                ... );\n          \n          \n            \n            \n          \n          \n            \n                cr> CREATE TABLE metrics7 (\n          \n          \n            \n                ...     weight REAL,\n          \n          \n            \n                ...     qty INTEGER,\n          \n          \n            \n                ...     CHECK (qty * weight != 1918)\n          \n          \n            \n                ... );\n          \n      \n    \n    \n  \n\nI think one example is enough to illustrate that point. I don't think we need to show all permutations.", "author": "mfussenegger", "createdAt": "2020-04-03T13:45:46Z", "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,104 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy\n+a boolean expression on insert and update.\n+\n+Syntax:\n+\n+::\n+\n+  [CONSTRAINT <name>] CHECK (boolean_expression)\n+\n+If `CONSTAINT <name>` is omitted, CrateDB generates a unique name automatically.\n+This name is visible in :ref:`information_schema` and can be used to\n+:ref:`ALTER TABLE DROP` a constraint.\n+\n+::\n+\n+  cr> select table_schema, table_name, constraint_type, constraint_name\n+  ...     from information_schema.table_constraints\n+  ...     where table_name = 'metrics1';\n+\n+The CONSTRAINT definition can either be inline with a column, like this::\n+\n+    cr> CREATE TABLE metrics1 (\n+    ...     weight REAL CONSTRAINT weight_is_positive CHECK (weight >= 0),\n+    ... );\n+\n+Or, also inline, but without explicit name::\n+\n+    cr> CREATE TABLE metrics2 (\n+    ...     weight REAL CHECK (weight >= 0),\n+    ... );\n+\n+Or, on a table level with explicit name:\n+\n+    cr> CREATE TABLE metrics3 (\n+    ...     weight REAL,\n+    ...     CONSTRAINT weight_is_positive CHECK (weight >= 0),\n+    ... );\n+\n+Or without name:\n+\n+    cr> CREATE TABLE metrics4 (\n+    ...     weight REAL,\n+    ...     CHECK (weight >= 0),\n+    ... );\n+\n+Multiple columns can be referenced:\n+\n+    cr> CREATE TABLE metrics5 (\n+    ...     weight REAL,\n+    ...     qty INTEGER,\n+    ...     CHECK (weight * qty != 1918),\n+    ... );\n+\n+    cr> CREATE TABLE metrics6 (\n+    ...     weight REAL,\n+    ...     qty INTEGER CHECK (qty * weight != 1918)\n+    ... );\n+\n+    cr> CREATE TABLE metrics7 (\n+    ...     weight REAL,\n+    ...     qty INTEGER,\n+    ...     CHECK (qty * weight != 1918)\n+    ... );", "originalCommit": "49161f4946c105d4fd6c65749925bc112734aff9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a880343c623174910a113e74635b6586631786c8", "url": "https://github.com/crate/crate/commit/a880343c623174910a113e74635b6586631786c8", "message": "Add unreleased notes and documentation on the constraints section", "committedDate": "2020-04-03T14:39:10Z", "type": "commit"}, {"oid": "a880343c623174910a113e74635b6586631786c8", "url": "https://github.com/crate/crate/commit/a880343c623174910a113e74635b6586631786c8", "message": "Add unreleased notes and documentation on the constraints section", "committedDate": "2020-04-03T14:39:10Z", "type": "forcePushed"}]}