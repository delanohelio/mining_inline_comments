{"pr_number": 9864, "pr_title": "Use new func registry for temporal arithmetic functions.", "pr_createdAt": "2020-04-16T14:31:37Z", "pr_url": "https://github.com/crate/crate/pull/9864", "timeline": [{"oid": "3237b3279c4222869797e28fbf1a1cbeebdbb554", "url": "https://github.com/crate/crate/commit/3237b3279c4222869797e28fbf1a1cbeebdbb554", "message": "Use new func registry for temporal arithmetic functions.\n\n- interval and timestamps", "committedDate": "2020-04-16T14:34:49Z", "type": "forcePushed"}, {"oid": "abb21a265147bc015a4cf523d4daf316635e6734", "url": "https://github.com/crate/crate/commit/abb21a265147bc015a4cf523d4daf316635e6734", "message": "Use new func registry for temporal arithmetic functions.\n\n- interval and timestamps", "committedDate": "2020-04-17T08:42:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNDMyMA==", "url": "https://github.com/crate/crate/pull/9864#discussion_r410114320", "bodyText": "only + and - should be allowed", "author": "kovrus", "createdAt": "2020-04-17T09:46:03Z", "path": "sql/src/test/java/io/crate/expression/scalar/arithmetic/IntervalFunctionTest.java", "diffHunk": "@@ -50,14 +51,15 @@ public void test_out_of_range_value() {\n     public void test_null_interval() {\n         assertEvaluate(\"null + interval '1 second'\", Matchers.nullValue());\n         assertEvaluate(\"null - interval '1 second'\", Matchers.nullValue());\n-        assertEvaluate(\"null * interval '1 second'\", Matchers.nullValue());", "originalCommit": "abb21a265147bc015a4cf523d4daf316635e6734", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NjMxMg==", "url": "https://github.com/crate/crate/pull/9864#discussion_r410146312", "bodyText": "Timestamp + interval should return a timestamp,  no?", "author": "mfussenegger", "createdAt": "2020-04-17T10:51:30Z", "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/IntervalTimestampArithmeticScalar.java", "diffHunk": "@@ -23,29 +23,82 @@\n package io.crate.expression.scalar.arithmetic;\n \n import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n import io.crate.metadata.FunctionIdent;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n import io.crate.types.IntervalType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n \n-import java.util.Arrays;\n+import java.util.List;\n import java.util.function.BiFunction;\n \n-public class IntervalTimestampScalar extends Scalar<Long, Object> implements BiFunction<Long, Period, Long> {\n+public class IntervalTimestampArithmeticScalar extends Scalar<Long, Object> implements BiFunction<Long, Period, Long> {\n+\n+    public static void register(ScalarFunctionModule module) {\n+        for (var timestampType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.scalar(\n+                    ArithmeticFunctions.Names.ADD,\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    timestampType.getTypeSignature(),\n+                    timestampType.getTypeSignature()\n+                ).withForbiddenCoercion(),\n+                args -> new IntervalTimestampArithmeticScalar(\n+                    \"+\",\n+                    ArithmeticFunctions.Names.ADD,\n+                    args,\n+                    args.get(1))\n+            );\n+            module.register(\n+                Signature.scalar(\n+                    ArithmeticFunctions.Names.ADD,\n+                    timestampType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature()", "originalCommit": "abb21a265147bc015a4cf523d4daf316635e6734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NzI0OA==", "url": "https://github.com/crate/crate/pull/9864#discussion_r410157248", "bodyText": "yes, that's right, pushed the fixup. it wasn't failing coz the return type of signature is not used. instead, we use the first arg data type like b6348ce#diff-97b9d1e99e7fb4ad3e7374a71e373f83L70", "author": "kovrus", "createdAt": "2020-04-17T11:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NjMxMg=="}], "type": "inlineReview"}, {"oid": "2ddae1ee942a683efe38678270cfc83c544158d8", "url": "https://github.com/crate/crate/commit/2ddae1ee942a683efe38678270cfc83c544158d8", "message": "Use new func registry for temporal arithmetic functions.\n\n- interval and timestamps", "committedDate": "2020-04-17T13:13:23Z", "type": "commit"}, {"oid": "2ddae1ee942a683efe38678270cfc83c544158d8", "url": "https://github.com/crate/crate/commit/2ddae1ee942a683efe38678270cfc83c544158d8", "message": "Use new func registry for temporal arithmetic functions.\n\n- interval and timestamps", "committedDate": "2020-04-17T13:13:23Z", "type": "forcePushed"}]}