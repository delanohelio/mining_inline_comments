{"pr_number": 3045, "pr_title": "Add Support For Oracle Cloud Vault", "pr_createdAt": "2020-04-10T20:47:23Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/3045", "timeline": [{"oid": "3b0c907f165d781841679bed9add929217986f05", "url": "https://github.com/micronaut-projects/micronaut-core/commit/3b0c907f165d781841679bed9add929217986f05", "message": "oraclecloud-vault", "committedDate": "2020-04-09T20:32:27Z", "type": "commit"}, {"oid": "6dcde9ddbfb202506d6dc4bc0b761dc392902f88", "url": "https://github.com/micronaut-projects/micronaut-core/commit/6dcde9ddbfb202506d6dc4bc0b761dc392902f88", "message": "add support for loading configuration from oracle cloud vault", "committedDate": "2020-04-10T18:29:32Z", "type": "commit"}, {"oid": "7c4f78e5d8eba08074712aa2c563a57a581ef1a4", "url": "https://github.com/micronaut-projects/micronaut-core/commit/7c4f78e5d8eba08074712aa2c563a57a581ef1a4", "message": "use getEnvironment() instead of environment because the Bootstrap context sets bootstrapEnvironment instead.\nlog amount of secrets retrieved", "committedDate": "2020-04-10T18:45:17Z", "type": "commit"}, {"oid": "5f98ec4d9e9ba74bd7de23630e36d1480031fb78", "url": "https://github.com/micronaut-projects/micronaut-core/commit/5f98ec4d9e9ba74bd7de23630e36d1480031fb78", "message": "address checkstyle issues", "committedDate": "2020-04-10T20:19:54Z", "type": "commit"}, {"oid": "43d33ec09967ab549273d7fcaf432c01f609da35", "url": "https://github.com/micronaut-projects/micronaut-core/commit/43d33ec09967ab549273d7fcaf432c01f609da35", "message": "update javadocs to properly link to inner class and external doc", "committedDate": "2020-04-13T14:45:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1MTMyNA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3045#discussion_r408151324", "bodyText": "Could you log this exception instead of dumping the stack trace?", "author": "graemerocher", "createdAt": "2020-04-14T13:50:18Z", "path": "discovery-client/src/main/java/io/micronaut/discovery/oraclecloud/vault/config/OracleCloudVaultConfigurationClient.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.discovery.oraclecloud.vault.config;\n+\n+import com.oracle.bmc.Region;\n+import com.oracle.bmc.auth.BasicAuthenticationDetailsProvider;\n+import com.oracle.bmc.auth.ConfigFileAuthenticationDetailsProvider;\n+import com.oracle.bmc.auth.InstancePrincipalsAuthenticationDetailsProvider;\n+import com.oracle.bmc.secrets.SecretsClient;\n+import com.oracle.bmc.secrets.model.Base64SecretBundleContentDetails;\n+import com.oracle.bmc.secrets.requests.GetSecretBundleRequest;\n+import com.oracle.bmc.secrets.responses.GetSecretBundleResponse;\n+import com.oracle.bmc.vault.VaultsClient;\n+import com.oracle.bmc.vault.model.SecretSummary;\n+import com.oracle.bmc.vault.requests.ListSecretsRequest;\n+import com.oracle.bmc.vault.responses.ListSecretsResponse;\n+import io.micronaut.context.annotation.BootstrapContextCompatible;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.context.env.Environment;\n+import io.micronaut.context.env.PropertySource;\n+import io.micronaut.discovery.config.ConfigurationClient;\n+import io.micronaut.runtime.ApplicationConfiguration;\n+import io.micronaut.scheduling.TaskExecutors;\n+import io.reactivex.Flowable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.schedulers.Schedulers;\n+import org.apache.commons.codec.binary.Base64;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Named;\n+import javax.inject.Singleton;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ *  A {@link ConfigurationClient} for Oracle Cloud Vault Configuration.\n+ *\n+ *  @author toddsharp\n+ *  @since 2.0.0\n+ */\n+@Singleton\n+@Requires(classes = {\n+        SecretsClient.class,\n+        VaultsClient.class,\n+        InstancePrincipalsAuthenticationDetailsProvider.class,\n+        ConfigFileAuthenticationDetailsProvider.class\n+})\n+@BootstrapContextCompatible\n+public class OracleCloudVaultConfigurationClient implements ConfigurationClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OracleCloudVaultConfigurationClient.class);\n+\n+    private final OracleCloudVaultClientConfiguration oracleCloudVaultClientConfiguration;\n+    private final ApplicationConfiguration applicationConfiguration;\n+    private final ExecutorService executorService;\n+    private final SecretsClient secretsClient;\n+    private final VaultsClient vaultsClient;\n+\n+    /**\n+     * Default Constructor.\n+     *\n+     * @param oracleCloudVaultClientConfiguration   Oracle CloudVault Client Configuration\n+     * @param applicationConfiguration              The application configuration\n+     * @param executorService                       Executor Service\n+     * @throws Exception                            If no configuration is provided\n+     */\n+    public OracleCloudVaultConfigurationClient(OracleCloudVaultClientConfiguration oracleCloudVaultClientConfiguration,\n+                                    ApplicationConfiguration applicationConfiguration,\n+                                    @Named(TaskExecutors.IO) @Nullable ExecutorService executorService) throws Exception {\n+        this.oracleCloudVaultClientConfiguration = oracleCloudVaultClientConfiguration;\n+        this.applicationConfiguration = applicationConfiguration;\n+        this.executorService = executorService;\n+\n+        BasicAuthenticationDetailsProvider provider = null;\n+        if (oracleCloudVaultClientConfiguration.isUseInstancePrincipal()) {\n+            provider = InstancePrincipalsAuthenticationDetailsProvider.builder().build();\n+        } else {\n+            try {\n+                provider = new ConfigFileAuthenticationDetailsProvider(oracleCloudVaultClientConfiguration.getPathToConfig(), oracleCloudVaultClientConfiguration.getProfile());\n+            } catch (IOException e) {\n+                e.printStackTrace();", "originalCommit": "43d33ec09967ab549273d7fcaf432c01f609da35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MzA1NA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3045#discussion_r408463054", "bodyText": "Fixed in a2b03f3", "author": "recursivecodes", "createdAt": "2020-04-14T22:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1MTMyNA=="}], "type": "inlineReview"}, {"oid": "a2b03f3d41e66db97edc2a67ee028a7fb1ae8d38", "url": "https://github.com/micronaut-projects/micronaut-core/commit/a2b03f3d41e66db97edc2a67ee028a7fb1ae8d38", "message": "LOG error instead of dumping stack trace per Graeme's request", "committedDate": "2020-04-14T22:02:30Z", "type": "commit"}]}