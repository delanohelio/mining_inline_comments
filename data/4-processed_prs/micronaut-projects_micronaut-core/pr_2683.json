{"pr_number": 2683, "pr_title": "Custom port per controller. Fixes #2532", "pr_createdAt": "2020-01-22T16:03:31Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/2683", "timeline": [{"oid": "6414e216b89de1611969162af7ccf2d83bea7850", "url": "https://github.com/micronaut-projects/micronaut-core/commit/6414e216b89de1611969162af7ccf2d83bea7850", "message": "Custom port per controller. Fixes #2532", "committedDate": "2020-01-22T16:02:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1NzA4OA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/2683#discussion_r369657088", "bodyText": "Shouldn't there be a test for two controllers with two different ports that requests to one doesn't get to a route the other one has? And what happens when a port isn't specified on a particular Controller? Does it default to port 80 or a random port?", "author": "dave08", "createdAt": "2020-01-22T16:14:47Z", "path": "http-server-netty/src/test/groovy/io/micronaut/http/server/netty/ports/ControllerPortSpec.groovy", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.micronaut.http.server.netty.ports\n+\n+import io.micronaut.context.ApplicationContext\n+import io.micronaut.core.io.socket.SocketUtils\n+import io.micronaut.http.HttpStatus\n+import io.micronaut.http.annotation.Controller\n+import io.micronaut.http.annotation.Get\n+import io.micronaut.http.client.RxHttpClient\n+import io.micronaut.http.client.exceptions.HttpClientResponseException\n+import io.micronaut.runtime.server.EmbeddedServer\n+import spock.lang.Retry\n+import spock.lang.Specification\n+\n+class ControllerPortSpec extends Specification {\n+\n+\n+    @Retry // try because a port binding issue could occur on CI\n+    void \"test custom controller port\"() {\n+\n+        given:\n+        def customPort = SocketUtils.findAvailableTcpPort()\n+        EmbeddedServer embeddedServer = ApplicationContext.run(\n+                EmbeddedServer,\n+                ['my.controller.port': customPort]\n+        )\n+        def client = embeddedServer.applicationContext.createBean(RxHttpClient, new URL(\"http://localhost:$customPort\"))\n+        def client2 = embeddedServer.applicationContext.createBean(RxHttpClient, embeddedServer.getURL())\n+\n+        when:\n+        def response = client.toBlocking().retrieve(\"/custom-port1\")\n+\n+        then:\n+        response == 'ok'\n+\n+        when:\n+        client2.toBlocking().retrieve(\"/custom-port1\")\n+\n+        then:\n+        def e = thrown(HttpClientResponseException)\n+        e.response.status() == HttpStatus.NOT_FOUND\n+\n+\n+        cleanup:\n+        embeddedServer.close()\n+        client.close()\n+        client2.close()\n+    }\n+\n+    @Controller(value = \"/custom-port1\", port='${my.controller.port}')", "originalCommit": "6414e216b89de1611969162af7ccf2d83bea7850", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1ODk0Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/2683#discussion_r369658947", "bodyText": "the test is already doing that be ensuring a 404 is returned for same route for the default port.\nWhen a port is not specified it behaves the same as it does now", "author": "graemerocher", "createdAt": "2020-01-22T16:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1NzA4OA=="}], "type": "inlineReview"}, {"oid": "4c3910504dc35323e5a49ae346e329f02c510b80", "url": "https://github.com/micronaut-projects/micronaut-core/commit/4c3910504dc35323e5a49ae346e329f02c510b80", "message": "Fix tests", "committedDate": "2020-01-22T16:37:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczNDA2MQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/2683#discussion_r369734061", "bodyText": "perhaps log an error here?", "author": "jameskleeh", "createdAt": "2020-01-22T18:39:50Z", "path": "inject/src/main/java/io/micronaut/inject/annotation/DefaultAnnotationMetadata.java", "diffHunk": "@@ -528,6 +528,13 @@ public OptionalInt intValue(@Nonnull String annotation, @Nonnull String member,\n         Object rawValue = getRawSingleValue(annotation, member, valueMapper);\n         if (rawValue instanceof Number) {\n             return OptionalInt.of(((Number) rawValue).intValue());\n+        } else if (rawValue instanceof CharSequence) {\n+            try {\n+                final int i = Integer.parseInt(rawValue.toString());\n+                return OptionalInt.of(i);\n+            } catch (NumberFormatException e) {\n+                return OptionalInt.empty();", "originalCommit": "4c3910504dc35323e5a49ae346e329f02c510b80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "25d5ebe0bbec7565cfd7e6e2033fdd4ebd96df9a", "url": "https://github.com/micronaut-projects/micronaut-core/commit/25d5ebe0bbec7565cfd7e6e2033fdd4ebd96df9a", "message": "Rethrow exception instead of swallowing", "committedDate": "2020-01-23T07:49:46Z", "type": "commit"}]}