{"pr_number": 3276, "pr_title": "Not export links to unexported children", "pr_createdAt": "2020-03-10T07:33:34Z", "pr_url": "https://github.com/kitodo/kitodo-production/pull/3276", "timeline": [{"oid": "f76063fe7002faa4ad6279abb73ff8dfbc57d33f", "url": "https://github.com/kitodo/kitodo-production/commit/f76063fe7002faa4ad6279abb73ff8dfbc57d33f", "message": "Not export links to unexported children", "committedDate": "2020-03-10T07:31:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTM0OQ==", "url": "https://github.com/kitodo/kitodo-production/pull/3276#discussion_r390305349", "bodyText": "If it is not exported, then the childLinksForExport should not be converted. So \"false\" is more intuitive here, isn't it?", "author": "Kathrin-Huber", "createdAt": "2020-03-10T13:18:45Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/schema/SchemaService.java", "diffHunk": "@@ -225,18 +226,24 @@ private void addUse(Subfolder useFolder, String canonical, MediaUnit mediaUnit)\n         mediaUnit.getMediaFiles().put(mediaVariant, mediaFile);\n     }\n \n-    private void convertChildrenLinksForExport(Workpiece workpiece, IncludedStructuralElement structure,\n+    private boolean convertChildrenLinksForExport(Workpiece workpiece, IncludedStructuralElement structure,\n                                                LegacyPrefsHelper prefs) throws DAOException, IOException {\n \n         LinkedMetsResource link = structure.getLink();\n         if (Objects.nonNull(link)) {\n             int linkedProcessId = ServiceManager.getProcessService().processIdFromUri(link.getUri());\n             Process process = ServiceManager.getProcessService().getById(linkedProcessId);\n+            if (!process.isExported()) {\n+                return true;", "originalCommit": "f76063fe7002faa4ad6279abb73ff8dfbc57d33f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkxNjY3Nw==", "url": "https://github.com/kitodo/kitodo-production/pull/3276#discussion_r390916677", "bodyText": "This is to avoid negative conditionals.", "author": "matthias-ronge", "createdAt": "2020-03-11T11:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4MDAwMQ==", "url": "https://github.com/kitodo/kitodo-production/pull/3276#discussion_r390980001", "bodyText": "if (!process.isExported()) is a \"negative conditional\", isn't it?", "author": "solth", "createdAt": "2020-03-11T13:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4ODkwNw==", "url": "https://github.com/kitodo/kitodo-production/pull/3276#discussion_r390988907", "bodyText": "Would you prefer a process.isNotYetExported()?", "author": "matthias-ronge", "createdAt": "2020-03-11T13:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5MDI1Nw==", "url": "https://github.com/kitodo/kitodo-production/pull/3276#discussion_r390990257", "bodyText": "What is wrong about\nif (process.isExported()) {\n    return false;\n}\n\n?", "author": "solth", "createdAt": "2020-03-11T14:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTM0OQ=="}], "type": "inlineReview"}, {"oid": "f94367d0fce65f89a1643b781472933ed3d4921f", "url": "https://github.com/kitodo/kitodo-production/commit/f94367d0fce65f89a1643b781472933ed3d4921f", "message": "Reverse if condition", "committedDate": "2020-03-12T06:55:07Z", "type": "commit"}, {"oid": "f94367d0fce65f89a1643b781472933ed3d4921f", "url": "https://github.com/kitodo/kitodo-production/commit/f94367d0fce65f89a1643b781472933ed3d4921f", "message": "Reverse if condition", "committedDate": "2020-03-12T06:55:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzODg2Nw==", "url": "https://github.com/kitodo/kitodo-production/pull/3276#discussion_r393538867", "bodyText": "now you have even two negative conditions. Please swap the if contents", "author": "Kathrin-Huber", "createdAt": "2020-03-17T09:18:36Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/schema/SchemaService.java", "diffHunk": "@@ -226,24 +226,38 @@ private void addUse(Subfolder useFolder, String canonical, MediaUnit mediaUnit)\n         mediaUnit.getMediaFiles().put(mediaVariant, mediaFile);\n     }\n \n-    private boolean convertChildrenLinksForExport(Workpiece workpiece, IncludedStructuralElement structure,\n+    /**\n+     * Replaces internal links in child structure elements with a publicly\n+     * resolvable link. Checks whether the linked process has not yet been\n+     * exported, in which case false is returned to delete the link from the\n+     * parental list.\n+     *\n+     * @param workpiece\n+     *            current workpiece\n+     * @param structure\n+     *            current structure\n+     * @param prefs\n+     *            legacy ruleset wrapper\n+     * @return whether the current structure shall not be deleted\n+     */\n+    private boolean convertChildrenLinksForExportRecursive(Workpiece workpiece, IncludedStructuralElement structure,\n                                                LegacyPrefsHelper prefs) throws DAOException, IOException {\n \n         LinkedMetsResource link = structure.getLink();\n         if (Objects.nonNull(link)) {\n             int linkedProcessId = ServiceManager.getProcessService().processIdFromUri(link.getUri());\n             Process process = ServiceManager.getProcessService().getById(linkedProcessId);\n             if (!process.isExported()) {\n-                return true;\n+                return false;\n             }\n             setLinkForExport(structure, process, prefs, workpiece);\n         }\n         for (Iterator<IncludedStructuralElement> iterator = structure.getChildren().iterator(); iterator.hasNext();) {\n-            if (convertChildrenLinksForExport(workpiece, iterator.next(), prefs)) {\n+            if (!convertChildrenLinksForExportRecursive(workpiece, iterator.next(), prefs)) {", "originalCommit": "f94367d0fce65f89a1643b781472933ed3d4921f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTA5Ng==", "url": "https://github.com/kitodo/kitodo-production/pull/3276#discussion_r393539096", "bodyText": "please don't use the word \"recursive\" in a method.", "author": "Kathrin-Huber", "createdAt": "2020-03-17T09:19:02Z", "path": "Kitodo/src/main/java/org/kitodo/production/services/schema/SchemaService.java", "diffHunk": "@@ -86,7 +86,7 @@\n         set(workpiece, MdSec.TECH_MD, \"purlUrl\", vp.replace(process.getProject().getMetsPurl()));\n         set(workpiece, MdSec.TECH_MD, \"contentIDs\", vp.replace(process.getProject().getMetsContentIDs()));\n \n-        convertChildrenLinksForExport(workpiece, workpiece.getRootElement(), prefs);\n+        convertChildrenLinksForExportRecursive(workpiece, workpiece.getRootElement(), prefs);", "originalCommit": "f94367d0fce65f89a1643b781472933ed3d4921f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2d8d01f58c411ae07948eb1845d4b62346e5bc1", "url": "https://github.com/kitodo/kitodo-production/commit/b2d8d01f58c411ae07948eb1845d4b62346e5bc1", "message": "Reverse if condition", "committedDate": "2020-03-19T10:13:59Z", "type": "commit"}]}