{"pr_number": 273, "pr_title": "Add support for Android Keyboard.", "pr_createdAt": "2020-01-15T13:15:09Z", "pr_url": "https://github.com/gluonhq/substrate/pull/273", "timeline": [{"oid": "5f9eb2a98d58d815b7e4e9f5e9dc2170cc0c429c", "url": "https://github.com/gluonhq/substrate/commit/5f9eb2a98d58d815b7e4e9f5e9dc2170cc0c429c", "message": "Add support for Android Keyboard.\nThis fixes #254", "committedDate": "2020-01-15T13:14:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3Mjk1Ng==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366872956", "bodyText": "do we need this class in the jni config file?\nAlso, do we have to replace this package name before compiling?", "author": "jperedadnr", "createdAt": "2020-01-15T13:25:56Z", "path": "src/main/resources/native/android/c/launcher.c", "diffHunk": "@@ -53,12 +64,30 @@ char** createArgs() {\n     strcat(tmpArgs,appDataDir);\n     result[origSize]=tmpArgs;\n     argsize++;\n+LOGE(stderr, \"CREATE ARGS done\");\n     return result;\n }\n+\n+void registerMethodHandles (JNIEnv *aenv) {\n+    activityClass = (*aenv)->NewGlobalRef(aenv, \n+          (*aenv)->FindClass(aenv, \"com/gluonhq/helloandroid/MainActivity\"));", "originalCommit": "5f9eb2a98d58d815b7e4e9f5e9dc2170cc0c429c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NTI4MQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366875281", "bodyText": "no, this method is called from the JNI_OnLoad from the Android code, hence it is running in the Android VM (not in the GraalVM).\nThe package name here is unrelated to the package name of the developer application, so this can be constant.", "author": "johanvos", "createdAt": "2020-01-15T13:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3Mjk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NzE1MQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366877151", "bodyText": "why is this done (again) now in link?", "author": "jperedadnr", "createdAt": "2020-01-15T13:35:22Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -128,6 +128,9 @@ public boolean link() throws IOException, InterruptedException {\n         if (ndk == null) throw new IOException (\"Can't find an Android NDK on your system. Set the environment property ANDROID_NDK\");\n         if (clang == null) throw new IOException (\"You specified an android ndk, but it doesn't contain \"+ndk+\"/toolchains/llvm/prebuilt/linux-x86_64/bin/clang\");\n         if (sdk == null) throw new IOException (\"Can't find an Android SDK on your system. Set the environment property ANDROID_SDK\");\n+\n+        compileAdditionalSources();", "originalCommit": "5f9eb2a98d58d815b7e4e9f5e9dc2170cc0c429c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg4MDE2NA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366880164", "bodyText": "this is mainly done for Substrate development. In many cases, the launcher.c class is modified. If this is only compiled at compile time, it requires very long cycles.\nBut I'm ok removing it from the code, if nobody else is working on this.", "author": "johanvos", "createdAt": "2020-01-15T13:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NzE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg4OTA0OA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366889048", "bodyText": "I usually have the same issue on iOS. I need to call to compileAdditionalSources, but not the rest of the compile task.\nMaybe we need a development flag, and when set, call this method also from AbstractTargetConfiguration::link?", "author": "jperedadnr", "createdAt": "2020-01-15T13:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NzE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg5NTg5NQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366895895", "bodyText": "or we can just move it to link in general (for ios and android at least). Or have both.\nThe compile time for these additional resources is very small compared to the AOT compile time.", "author": "johanvos", "createdAt": "2020-01-15T14:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NzE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkwMDU3Mw==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366900573", "bodyText": "Probably the latter (doing it as well from link) won't hurt in any case.", "author": "jperedadnr", "createdAt": "2020-01-15T14:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NzE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5NTEyOA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r366995128", "bodyText": "... which is exactly what we have here :)", "author": "johanvos", "createdAt": "2020-01-15T17:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NzE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNjEwNA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367006104", "bodyText": "yes, but only for Android, so maybe it should be for all platforms, in AbstractTargetConfiguration.", "author": "jperedadnr", "createdAt": "2020-01-15T17:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg3NzE1MQ=="}], "type": "inlineReview"}, {"oid": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "url": "https://github.com/gluonhq/substrate/commit/29a9ee805c4a859553233fd6cb207fc28ac989d1", "message": "always compile addtional sources in link phase", "committedDate": "2020-01-15T21:01:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjE4MQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106181", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:04:56Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;\n+    public final static int RELEASE = 112;\n+    public final static int TYPED   = 113; ", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjE5Mg==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106192", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:04:57Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;\n+    public final static int RELEASE = 112;\n+    public final static int TYPED   = 113; \n+\n+    private int deadKey = 0;\n+\n+    void processAndroidKeyEvent (KeyEvent event) {\n+        System.out.println(\"KeyEvent: \" + event+\" with action = \"+event.getAction());\n+        int jfxModifiers = mapAndroidModifierToJfx(event.getMetaState());\n+        switch (event.getAction()) {\n+            case KeyEvent.ACTION_DOWN:\n+                KeyCode jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+System.out.println (\"[JVDBG] eventkeycode = \"+event.getKeyCode()+\" and jfxkc = \"+jfxKeyCode+\" with code \"+ jfxKeyCode.impl_getCode());\n+                nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                break;\n+\n+            case KeyEvent.ACTION_UP:\n+                jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                int unicodeChar = event.getUnicodeChar();\n+                if ((unicodeChar & KeyCharacterMap.COMBINING_ACCENT) != 0) {\n+                    deadKey = unicodeChar & KeyCharacterMap.COMBINING_ACCENT_MASK;\n+                    return;\n+                }\n+\n+                if (deadKey != 0 && unicodeChar != 0) {\n+                    unicodeChar = KeyCharacterMap.getDeadChar(deadKey, unicodeChar);\n+                    deadKey = 0;\n+                }\n+\n+                if (unicodeChar != 0) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), Character.toChars(unicodeChar), 1, jfxModifiers);\n+                }\n+\n+                break;\n+\n+            case KeyEvent.ACTION_MULTIPLE:\n+                if (event.getKeyCode() == KeyEvent.KEYCODE_UNKNOWN) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), event.getCharacters().toCharArray(), event.getCharacters().toCharArray().length,    jfxModifiers);\n+                } else {\n+                    jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                    for (int i = 0; i < event.getRepeatCount(); i++) {\n+                        nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(TYPED, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                    }\n+                }\n+\n+                break;\n+            default:\n+                System.err.println(\"DalvikInput.onKeyEvent Unknown Action \" + event.getAction());\n+                break;\n+        }\n+    }\n+\n+    private final static int MODIFIER_SHIFT = 1;\n+    private final static int MODIFIER_CONTROL = 2;\n+    private final static int MODIFIER_ALT = 4;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjIwMQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106201", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:04:58Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;\n+    public final static int RELEASE = 112;\n+    public final static int TYPED   = 113; \n+\n+    private int deadKey = 0;\n+\n+    void processAndroidKeyEvent (KeyEvent event) {\n+        System.out.println(\"KeyEvent: \" + event+\" with action = \"+event.getAction());\n+        int jfxModifiers = mapAndroidModifierToJfx(event.getMetaState());\n+        switch (event.getAction()) {\n+            case KeyEvent.ACTION_DOWN:\n+                KeyCode jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+System.out.println (\"[JVDBG] eventkeycode = \"+event.getKeyCode()+\" and jfxkc = \"+jfxKeyCode+\" with code \"+ jfxKeyCode.impl_getCode());\n+                nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                break;\n+\n+            case KeyEvent.ACTION_UP:\n+                jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                int unicodeChar = event.getUnicodeChar();\n+                if ((unicodeChar & KeyCharacterMap.COMBINING_ACCENT) != 0) {\n+                    deadKey = unicodeChar & KeyCharacterMap.COMBINING_ACCENT_MASK;\n+                    return;\n+                }\n+\n+                if (deadKey != 0 && unicodeChar != 0) {\n+                    unicodeChar = KeyCharacterMap.getDeadChar(deadKey, unicodeChar);\n+                    deadKey = 0;\n+                }\n+\n+                if (unicodeChar != 0) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), Character.toChars(unicodeChar), 1, jfxModifiers);\n+                }\n+\n+                break;\n+\n+            case KeyEvent.ACTION_MULTIPLE:\n+                if (event.getKeyCode() == KeyEvent.KEYCODE_UNKNOWN) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), event.getCharacters().toCharArray(), event.getCharacters().toCharArray().length,    jfxModifiers);\n+                } else {\n+                    jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                    for (int i = 0; i < event.getRepeatCount(); i++) {\n+                        nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(TYPED, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                    }\n+                }\n+\n+                break;\n+            default:\n+                System.err.println(\"DalvikInput.onKeyEvent Unknown Action \" + event.getAction());\n+                break;\n+        }\n+    }\n+\n+    private final static int MODIFIER_SHIFT = 1;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjIxMQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106211", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:04:59Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;\n+    public final static int RELEASE = 112;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjIyMw==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106223", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:01Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;\n+        private static final int DIGIT = 1 << 5;\n+        private static final int KEYPAD = 1 << 6;\n+        private static final int WHITESPACE = 1 << 7;\n+        private static final int MEDIA = 1 << 8;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjIzMg==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106232", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:02Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjI0NQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106245", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:03Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjI0OQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106249", "bodyText": "Issue found: Unused import - android.view.inputmethod.InputConnection.", "author": "eugener", "createdAt": "2020-01-15T21:05:05Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -9,7 +9,12 @@\n import android.os.Bundle;\n import android.util.DisplayMetrics;\n import android.util.Log;\n+\n+import android.view.inputmethod.InputConnection;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjI1NQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106255", "bodyText": "Issue found: Avoid unnecessary constructors - the compiler will generate these for you", "author": "eugener", "createdAt": "2020-01-15T21:05:06Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjI2NA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106264", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:08Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjI3Mw==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106273", "bodyText": "Issue found: Avoid unused private methods such as 'hideIME()'.", "author": "eugener", "createdAt": "2020-01-15T21:05:09Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -124,13 +134,29 @@ public void surfaceRedrawNeeded(SurfaceHolder holder) {\n         Log.v(TAG, \"surfaceredraw needed (and wait) done\");\n     }\n \n+    private static void showIME() {\n+        Log.v(TAG, \"Called notify_showIME, DONT show input for imm = \"+imm+\", mv = \"+mView);\n+        mView.requestFocus();\n+        boolean answer = imm.showSoftInput(mView, 0);\n+        Log.v(TAG, \"Done calling notify_showIME, result = \"+answer);\n+    }\n+\n+    private static void hideIME() {", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjI4NQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106285", "bodyText": "Issue found: The instance method name 'impl_getCode' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "eugener", "createdAt": "2020-01-15T21:05:10Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;\n+        private static final int DIGIT = 1 << 5;\n+        private static final int KEYPAD = 1 << 6;\n+        private static final int WHITESPACE = 1 << 7;\n+        private static final int MEDIA = 1 << 8;\n+    }\n+\n+    private KeyCode(int code, String name, int mask) {\n+        this.code = code;\n+        this.name = name;\n+        this.mask = mask;\n+        // ch = new String(Character.toChars(code));\n+        ch = String.valueOf((char)code);\n+    }\n+\n+    private KeyCode(int code, String name) {\n+        this(code, name, 0);\n+    }\n+\n+    /**\n+     * Function keys like F1, F2, etc...\n+     * @return true if this key code corresponds to a functional key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isFunctionKey() {\n+        return (mask & KeyCodeClass.FUNCTION) != 0;\n+    }\n+\n+    /**\n+     * Navigation keys are arrow keys and Page Down, Page Up, Home, End\n+     * (including keypad keys)\n+     * @return true if this key code corresponds to a navigation key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isNavigationKey() {\n+        return (mask & KeyCodeClass.NAVIGATION) != 0;\n+    }\n+\n+    /**\n+     * Left, right, up, down keys (including the keypad arrows)\n+     * @return true if this key code corresponds to an arrow key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isArrowKey() {\n+        return (mask & KeyCodeClass.ARROW) != 0;\n+    }\n+\n+    /**\n+     * Keys that could act as a modifier\n+     * @return true if this key code corresponds to a modifier key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isModifierKey() {\n+        return (mask & KeyCodeClass.MODIFIER) != 0;\n+    }\n+\n+    /**\n+     * All keys with letters\n+     * @return true if this key code corresponds to a letter key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isLetterKey() {\n+        return (mask & KeyCodeClass.LETTER) != 0;\n+    }\n+\n+    /**\n+     * All Digit keys (including the keypad digits)\n+     * @return true if this key code corresponds to a digit key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isDigitKey() {\n+        return (mask & KeyCodeClass.DIGIT) != 0;\n+    }\n+\n+    /**\n+     * All keys on the keypad\n+     * @return true if this key code corresponds to a keypad key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isKeypadKey() {\n+        return (mask & KeyCodeClass.KEYPAD) != 0;\n+    }\n+\n+    /**\n+     * Space, tab and enter\n+     * @return true if this key code corresponds to a whitespace key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isWhitespaceKey() {\n+        return (mask & KeyCodeClass.WHITESPACE) != 0;\n+    }\n+\n+    /**\n+     * All multimedia keys (channel up/down, volume control, etc...)\n+     * @return true if this key code corresponds to a media key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isMediaKey() {\n+        return (mask & KeyCodeClass.MEDIA) != 0;\n+    }\n+\n+    /**\n+     * Gets name of this key code.\n+     * @return Name of this key code\n+     */\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @treatAsPrivate implementation detail\n+     * @deprecated This is an internal API that is not intended for use and will be removed in the next version\n+     */\n+    @Deprecated\n+    public String impl_getChar() {\n+        return ch;\n+    }\n+\n+    /**\n+     * @treatAsPrivate implementation detail\n+     * @deprecated This is an internal API that is not intended for use and will be removed in the next version\n+     */\n+    // SB-dependency: RT-22749 has been filed to track this\n+    @Deprecated\n+    public int impl_getCode() {", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjI5NA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106294", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:11Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;\n+        private static final int DIGIT = 1 << 5;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjMwNw==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106307", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:13Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjMxNw==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106317", "bodyText": "Issue found: The instance method name 'impl_getChar' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "eugener", "createdAt": "2020-01-15T21:05:14Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;\n+        private static final int DIGIT = 1 << 5;\n+        private static final int KEYPAD = 1 << 6;\n+        private static final int WHITESPACE = 1 << 7;\n+        private static final int MEDIA = 1 << 8;\n+    }\n+\n+    private KeyCode(int code, String name, int mask) {\n+        this.code = code;\n+        this.name = name;\n+        this.mask = mask;\n+        // ch = new String(Character.toChars(code));\n+        ch = String.valueOf((char)code);\n+    }\n+\n+    private KeyCode(int code, String name) {\n+        this(code, name, 0);\n+    }\n+\n+    /**\n+     * Function keys like F1, F2, etc...\n+     * @return true if this key code corresponds to a functional key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isFunctionKey() {\n+        return (mask & KeyCodeClass.FUNCTION) != 0;\n+    }\n+\n+    /**\n+     * Navigation keys are arrow keys and Page Down, Page Up, Home, End\n+     * (including keypad keys)\n+     * @return true if this key code corresponds to a navigation key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isNavigationKey() {\n+        return (mask & KeyCodeClass.NAVIGATION) != 0;\n+    }\n+\n+    /**\n+     * Left, right, up, down keys (including the keypad arrows)\n+     * @return true if this key code corresponds to an arrow key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isArrowKey() {\n+        return (mask & KeyCodeClass.ARROW) != 0;\n+    }\n+\n+    /**\n+     * Keys that could act as a modifier\n+     * @return true if this key code corresponds to a modifier key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isModifierKey() {\n+        return (mask & KeyCodeClass.MODIFIER) != 0;\n+    }\n+\n+    /**\n+     * All keys with letters\n+     * @return true if this key code corresponds to a letter key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isLetterKey() {\n+        return (mask & KeyCodeClass.LETTER) != 0;\n+    }\n+\n+    /**\n+     * All Digit keys (including the keypad digits)\n+     * @return true if this key code corresponds to a digit key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isDigitKey() {\n+        return (mask & KeyCodeClass.DIGIT) != 0;\n+    }\n+\n+    /**\n+     * All keys on the keypad\n+     * @return true if this key code corresponds to a keypad key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isKeypadKey() {\n+        return (mask & KeyCodeClass.KEYPAD) != 0;\n+    }\n+\n+    /**\n+     * Space, tab and enter\n+     * @return true if this key code corresponds to a whitespace key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isWhitespaceKey() {\n+        return (mask & KeyCodeClass.WHITESPACE) != 0;\n+    }\n+\n+    /**\n+     * All multimedia keys (channel up/down, volume control, etc...)\n+     * @return true if this key code corresponds to a media key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isMediaKey() {\n+        return (mask & KeyCodeClass.MEDIA) != 0;\n+    }\n+\n+    /**\n+     * Gets name of this key code.\n+     * @return Name of this key code\n+     */\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @treatAsPrivate implementation detail\n+     * @deprecated This is an internal API that is not intended for use and will be removed in the next version\n+     */\n+    @Deprecated\n+    public String impl_getChar() {", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjMyNg==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106326", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:15Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;\n+        private static final int DIGIT = 1 << 5;\n+        private static final int KEYPAD = 1 << 6;\n+        private static final int WHITESPACE = 1 << 7;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjMzMw==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106333", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:16Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;\n+        private static final int DIGIT = 1 << 5;\n+        private static final int KEYPAD = 1 << 6;\n+        private static final int WHITESPACE = 1 << 7;\n+        private static final int MEDIA = 1 << 8;\n+    }\n+\n+    private KeyCode(int code, String name, int mask) {\n+        this.code = code;\n+        this.name = name;\n+        this.mask = mask;\n+        // ch = new String(Character.toChars(code));\n+        ch = String.valueOf((char)code);\n+    }\n+\n+    private KeyCode(int code, String name) {\n+        this(code, name, 0);\n+    }\n+\n+    /**\n+     * Function keys like F1, F2, etc...\n+     * @return true if this key code corresponds to a functional key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isFunctionKey() {\n+        return (mask & KeyCodeClass.FUNCTION) != 0;\n+    }\n+\n+    /**\n+     * Navigation keys are arrow keys and Page Down, Page Up, Home, End\n+     * (including keypad keys)\n+     * @return true if this key code corresponds to a navigation key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isNavigationKey() {\n+        return (mask & KeyCodeClass.NAVIGATION) != 0;\n+    }\n+\n+    /**\n+     * Left, right, up, down keys (including the keypad arrows)\n+     * @return true if this key code corresponds to an arrow key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isArrowKey() {\n+        return (mask & KeyCodeClass.ARROW) != 0;\n+    }\n+\n+    /**\n+     * Keys that could act as a modifier\n+     * @return true if this key code corresponds to a modifier key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isModifierKey() {\n+        return (mask & KeyCodeClass.MODIFIER) != 0;\n+    }\n+\n+    /**\n+     * All keys with letters\n+     * @return true if this key code corresponds to a letter key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isLetterKey() {\n+        return (mask & KeyCodeClass.LETTER) != 0;\n+    }\n+\n+    /**\n+     * All Digit keys (including the keypad digits)\n+     * @return true if this key code corresponds to a digit key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isDigitKey() {\n+        return (mask & KeyCodeClass.DIGIT) != 0;\n+    }\n+\n+    /**\n+     * All keys on the keypad\n+     * @return true if this key code corresponds to a keypad key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isKeypadKey() {\n+        return (mask & KeyCodeClass.KEYPAD) != 0;\n+    }\n+\n+    /**\n+     * Space, tab and enter\n+     * @return true if this key code corresponds to a whitespace key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isWhitespaceKey() {\n+        return (mask & KeyCodeClass.WHITESPACE) != 0;\n+    }\n+\n+    /**\n+     * All multimedia keys (channel up/down, volume control, etc...)\n+     * @return true if this key code corresponds to a media key\n+     * @since JavaFX 2.2\n+     */\n+    public final boolean isMediaKey() {\n+        return (mask & KeyCodeClass.MEDIA) != 0;\n+    }\n+\n+    /**\n+     * Gets name of this key code.\n+     * @return Name of this key code\n+     */\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * @treatAsPrivate implementation detail\n+     * @deprecated This is an internal API that is not intended for use and will be removed in the next version\n+     */\n+    @Deprecated\n+    public String impl_getChar() {\n+        return ch;\n+    }\n+\n+    /**\n+     * @treatAsPrivate implementation detail\n+     * @deprecated This is an internal API that is not intended for use and will be removed in the next version\n+     */\n+    // SB-dependency: RT-22749 has been filed to track this\n+    @Deprecated\n+    public int impl_getCode() {\n+        return code;\n+    }\n+\n+   \n+    private static final Map<String, KeyCode> nameMap;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM0NA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106344", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:18Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;\n+    public final static int RELEASE = 112;\n+    public final static int TYPED   = 113; \n+\n+    private int deadKey = 0;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM0OQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106349", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:19Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM1NQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106355", "bodyText": "Issue found: Avoid unused imports such as 'android.view.inputmethod.InputConnection'", "author": "eugener", "createdAt": "2020-01-15T21:05:20Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -9,7 +9,12 @@\n import android.os.Bundle;\n import android.util.DisplayMetrics;\n import android.util.Log;\n+\n+import android.view.inputmethod.InputConnection;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM2Mg==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106362", "bodyText": "Issue found: Avoid really long methods.", "author": "eugener", "createdAt": "2020-01-15T21:05:21Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;\n+    public final static int RELEASE = 112;\n+    public final static int TYPED   = 113; \n+\n+    private int deadKey = 0;\n+\n+    void processAndroidKeyEvent (KeyEvent event) {\n+        System.out.println(\"KeyEvent: \" + event+\" with action = \"+event.getAction());\n+        int jfxModifiers = mapAndroidModifierToJfx(event.getMetaState());\n+        switch (event.getAction()) {\n+            case KeyEvent.ACTION_DOWN:\n+                KeyCode jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+System.out.println (\"[JVDBG] eventkeycode = \"+event.getKeyCode()+\" and jfxkc = \"+jfxKeyCode+\" with code \"+ jfxKeyCode.impl_getCode());\n+                nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                break;\n+\n+            case KeyEvent.ACTION_UP:\n+                jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                int unicodeChar = event.getUnicodeChar();\n+                if ((unicodeChar & KeyCharacterMap.COMBINING_ACCENT) != 0) {\n+                    deadKey = unicodeChar & KeyCharacterMap.COMBINING_ACCENT_MASK;\n+                    return;\n+                }\n+\n+                if (deadKey != 0 && unicodeChar != 0) {\n+                    unicodeChar = KeyCharacterMap.getDeadChar(deadKey, unicodeChar);\n+                    deadKey = 0;\n+                }\n+\n+                if (unicodeChar != 0) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), Character.toChars(unicodeChar), 1, jfxModifiers);\n+                }\n+\n+                break;\n+\n+            case KeyEvent.ACTION_MULTIPLE:\n+                if (event.getKeyCode() == KeyEvent.KEYCODE_UNKNOWN) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), event.getCharacters().toCharArray(), event.getCharacters().toCharArray().length,    jfxModifiers);\n+                } else {\n+                    jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                    for (int i = 0; i < event.getRepeatCount(); i++) {\n+                        nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(TYPED, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                    }\n+                }\n+\n+                break;\n+            default:\n+                System.err.println(\"DalvikInput.onKeyEvent Unknown Action \" + event.getAction());\n+                break;\n+        }\n+    }\n+\n+    private final static int MODIFIER_SHIFT = 1;\n+    private final static int MODIFIER_CONTROL = 2;\n+    private final static int MODIFIER_ALT = 4;\n+    private final static int MODIFIER_WINDOWS = 8;\n+\n+\n+    private static int mapAndroidModifierToJfx(int androidMetaStates) {\n+        int jfxModifiers = 0;\n+\n+        if ((androidMetaStates & KeyEvent.META_SHIFT_MASK) != 0) {\n+            jfxModifiers += MODIFIER_SHIFT;\n+        }\n+\n+        if ((androidMetaStates & KeyEvent.META_CTRL_MASK) != 0) {\n+            jfxModifiers += MODIFIER_CONTROL;\n+        }\n+\n+        if ((androidMetaStates & KeyEvent.META_ALT_MASK) != 0) {\n+            jfxModifiers += MODIFIER_ALT;\n+        }\n+\n+        if ((androidMetaStates & KeyEvent.META_META_ON) != 0) {\n+            jfxModifiers += MODIFIER_WINDOWS;\n+        }\n+        return jfxModifiers;\n+    }\n+\n+\n+    private static KeyCode mapAndroidKeyCodeToJfx(int keycode) {", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM2OA==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106368", "bodyText": "Issue found: Avoid unused private methods such as 'showIME()'.", "author": "eugener", "createdAt": "2020-01-15T21:05:22Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -124,13 +134,29 @@ public void surfaceRedrawNeeded(SurfaceHolder holder) {\n         Log.v(TAG, \"surfaceredraw needed (and wait) done\");\n     }\n \n+    private static void showIME() {", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM3OQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106379", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:24Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;\n+    public final static int RELEASE = 112;\n+    public final static int TYPED   = 113; \n+\n+    private int deadKey = 0;\n+\n+    void processAndroidKeyEvent (KeyEvent event) {\n+        System.out.println(\"KeyEvent: \" + event+\" with action = \"+event.getAction());\n+        int jfxModifiers = mapAndroidModifierToJfx(event.getMetaState());\n+        switch (event.getAction()) {\n+            case KeyEvent.ACTION_DOWN:\n+                KeyCode jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+System.out.println (\"[JVDBG] eventkeycode = \"+event.getKeyCode()+\" and jfxkc = \"+jfxKeyCode+\" with code \"+ jfxKeyCode.impl_getCode());\n+                nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                break;\n+\n+            case KeyEvent.ACTION_UP:\n+                jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), jfxKeyCode.impl_getChar().toCharArray(), jfxKeyCode.impl_getChar().toCharArray().length, jfxModifiers);\n+                int unicodeChar = event.getUnicodeChar();\n+                if ((unicodeChar & KeyCharacterMap.COMBINING_ACCENT) != 0) {\n+                    deadKey = unicodeChar & KeyCharacterMap.COMBINING_ACCENT_MASK;\n+                    return;\n+                }\n+\n+                if (deadKey != 0 && unicodeChar != 0) {\n+                    unicodeChar = KeyCharacterMap.getDeadChar(deadKey, unicodeChar);\n+                    deadKey = 0;\n+                }\n+\n+                if (unicodeChar != 0) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), Character.toChars(unicodeChar), 1, jfxModifiers);\n+                }\n+\n+                break;\n+\n+            case KeyEvent.ACTION_MULTIPLE:\n+                if (event.getKeyCode() == KeyEvent.KEYCODE_UNKNOWN) {\n+                    nativedispatchKeyEvent(TYPED, KeyCode.UNDEFINED.impl_getCode(), event.getCharacters().toCharArray(), event.getCharacters().toCharArray().length,    jfxModifiers);\n+                } else {\n+                    jfxKeyCode = mapAndroidKeyCodeToJfx(event.getKeyCode());\n+                    for (int i = 0; i < event.getRepeatCount(); i++) {\n+                        nativedispatchKeyEvent(PRESS, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(RELEASE, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                        nativedispatchKeyEvent(TYPED, jfxKeyCode.impl_getCode(), null, 0, jfxModifiers);\n+                    }\n+                }\n+\n+                break;\n+            default:\n+                System.err.println(\"DalvikInput.onKeyEvent Unknown Action \" + event.getAction());\n+                break;\n+        }\n+    }\n+\n+    private final static int MODIFIER_SHIFT = 1;\n+    private final static int MODIFIER_CONTROL = 2;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM5MQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106391", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:25Z", "path": "src/main/resources/native/android/dalvik/KeyCode.java", "diffHunk": "@@ -0,0 +1,1331 @@\n+/*\n+ * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package javafx.scene.input;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Set of key codes for {@link KeyEvent} objects.\n+ * @since JavaFX 2.0\n+ */\n+public enum KeyCode {\n+\n+    /**\n+     * Constant for the {@code Enter} key.\n+     */\n+    ENTER(0x0A, \"Enter\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Backspace} key.\n+     */\n+    BACK_SPACE(0x08, \"Backspace\"),\n+\n+    /**\n+     * Constant for the {@code Tab} key.\n+     */\n+    TAB(0x09, \"Tab\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Cancel} key.\n+     */\n+    CANCEL(0x03, \"Cancel\"),\n+\n+    /**\n+     * Constant for the {@code Clear} key.\n+     */\n+    CLEAR(0x0C, \"Clear\"),\n+\n+    /**\n+     * Constant for the {@code Shift} key.\n+     */\n+    SHIFT(0x10, \"Shift\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Ctrl} key.\n+     */\n+    CONTROL(0x11, \"Ctrl\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Alt} key.\n+     */\n+    ALT(0x12, \"Alt\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Pause} key.\n+     */\n+    PAUSE(0x13, \"Pause\"),\n+\n+    /**\n+     * Constant for the {@code Caps Lock} key.\n+     */\n+    CAPS(0x14, \"Caps Lock\"),\n+\n+    /**\n+     * Constant for the {@code Esc} key.\n+     */\n+    ESCAPE(0x1B, \"Esc\"),\n+\n+    /**\n+     * Constant for the {@code Space} key.\n+     */\n+    SPACE(0x20, \"Space\", KeyCodeClass.WHITESPACE),\n+\n+    /**\n+     * Constant for the {@code Page Up} key.\n+     */\n+    PAGE_UP(0x21, \"Page Up\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Page Down} key.\n+     */\n+    PAGE_DOWN(0x22, \"Page Down\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code End} key.\n+     */\n+    END(0x23, \"End\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the {@code Home} key.\n+     */\n+    HOME(0x24, \"Home\", KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>left</b> arrow key.\n+     */\n+    LEFT(0x25, \"Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>up</b> arrow key.\n+     */\n+    UP(0x26, \"Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>right</b> arrow key.\n+     */\n+    RIGHT(0x27, \"Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the non-numpad <b>down</b> arrow key.\n+     */\n+    DOWN(0x28, \"Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION),\n+\n+    /**\n+     * Constant for the comma key, \",\"\n+     */\n+    COMMA(0x2C, \"Comma\"),\n+\n+    /**\n+     * Constant for the minus key, \"-\"\n+     */\n+    MINUS(0x2D, \"Minus\"),\n+\n+    /**\n+     * Constant for the period key, \".\"\n+     */\n+    PERIOD(0x2E, \"Period\"),\n+\n+    /**\n+     * Constant for the forward slash key, \"/\"\n+     */\n+    SLASH(0x2F, \"Slash\"),\n+\n+    /**\n+     * Constant for the {@code 0} key.\n+     */\n+    DIGIT0(0x30, \"0\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 1} key.\n+     */\n+    DIGIT1(0x31, \"1\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 2} key.\n+     */\n+    DIGIT2(0x32, \"2\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 3} key.\n+     */\n+    DIGIT3(0x33, \"3\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 4} key.\n+     */\n+    DIGIT4(0x34, \"4\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 5} key.\n+     */\n+    DIGIT5(0x35, \"5\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 6} key.\n+     */\n+    DIGIT6(0x36, \"6\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 7} key.\n+     */\n+    DIGIT7(0x37, \"7\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 8} key.\n+     */\n+    DIGIT8(0x38, \"8\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the {@code 9} key.\n+     */\n+    DIGIT9(0x39, \"9\", KeyCodeClass.DIGIT),\n+\n+    /**\n+     * Constant for the semicolon key, \";\"\n+     */\n+    SEMICOLON(0x3B, \"Semicolon\"),\n+\n+    /**\n+     * Constant for the equals key, \"=\"\n+     */\n+    EQUALS(0x3D, \"Equals\"),\n+\n+    /**\n+     * Constant for the {@code A} key.\n+     */\n+    A(0x41, \"A\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code B} key.\n+     */\n+    B(0x42, \"B\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code C} key.\n+     */\n+    C(0x43, \"C\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code D} key.\n+     */\n+    D(0x44, \"D\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code E} key.\n+     */\n+    E(0x45, \"E\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code F} key.\n+     */\n+    F(0x46, \"F\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code G} key.\n+     */\n+    G(0x47, \"G\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code H} key.\n+     */\n+    H(0x48, \"H\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code I} key.\n+     */\n+    I(0x49, \"I\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code J} key.\n+     */\n+    J(0x4A, \"J\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code K} key.\n+     */\n+    K(0x4B, \"K\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code L} key.\n+     */\n+    L(0x4C, \"L\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code M} key.\n+     */\n+    M(0x4D, \"M\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code N} key.\n+     */\n+    N(0x4E, \"N\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code O} key.\n+     */\n+    O(0x4F, \"O\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code P} key.\n+     */\n+    P(0x50, \"P\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Q} key.\n+     */\n+    Q(0x51, \"Q\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code R} key.\n+     */\n+    R(0x52, \"R\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code S} key.\n+     */\n+    S(0x53, \"S\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code T} key.\n+     */\n+    T(0x54, \"T\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code U} key.\n+     */\n+    U(0x55, \"U\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code V} key.\n+     */\n+    V(0x56, \"V\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code W} key.\n+     */\n+    W(0x57, \"W\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code X} key.\n+     */\n+    X(0x58, \"X\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Y} key.\n+     */\n+    Y(0x59, \"Y\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the {@code Z} key.\n+     */\n+    Z(0x5A, \"Z\", KeyCodeClass.LETTER),\n+\n+    /**\n+     * Constant for the open bracket key, \"[\"\n+     */\n+    OPEN_BRACKET(0x5B, \"Open Bracket\"),\n+\n+    /**\n+     * Constant for the back slash key, \"\\\"\n+     */\n+    BACK_SLASH(0x5C, \"Back Slash\"),\n+\n+    /**\n+     * Constant for the close bracket key, \"]\"\n+     */\n+    CLOSE_BRACKET(0x5D, \"Close Bracket\"),\n+\n+    /**\n+     * Constant for the {@code Numpad 0} key.\n+     */\n+    NUMPAD0(0x60, \"Numpad 0\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 1} key.\n+     */\n+    NUMPAD1(0x61, \"Numpad 1\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 2} key.\n+     */\n+    NUMPAD2(0x62, \"Numpad 2\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 3} key.\n+     */\n+    NUMPAD3(0x63, \"Numpad 3\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 4} key.\n+     */\n+    NUMPAD4(0x64, \"Numpad 4\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 5} key.\n+     */\n+    NUMPAD5(0x65, \"Numpad 5\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 6} key.\n+     */\n+    NUMPAD6(0x66, \"Numpad 6\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 7} key.\n+     */\n+    NUMPAD7(0x67, \"Numpad 7\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 8} key.\n+     */\n+    NUMPAD8(0x68, \"Numpad 8\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Numpad 9} key.\n+     */\n+    NUMPAD9(0x69, \"Numpad 9\", KeyCodeClass.DIGIT | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Multiply} key.\n+     */\n+    MULTIPLY(0x6A, \"Multiply\"),\n+\n+    /**\n+     * Constant for the {@code Add} key.\n+     */\n+    ADD(0x6B, \"Add\"),\n+\n+    /**\n+     * Constant for the Numpad Separator key.\n+     */\n+    SEPARATOR(0x6C, \"Separator\"),\n+\n+    /**\n+     * Constant for the {@code Subtract} key.\n+     */\n+    SUBTRACT(0x6D, \"Subtract\"),\n+\n+    /**\n+     * Constant for the {@code Decimal} key.\n+     */\n+    DECIMAL(0x6E, \"Decimal\"),\n+\n+    /**\n+     * Constant for the {@code Divide} key.\n+     */\n+    DIVIDE(0x6F, \"Divide\"),\n+\n+    /**\n+     * Constant for the {@code Delete} key.\n+     */\n+    DELETE(0x7F, \"Delete\"), /* ASCII:Integer   DEL */\n+\n+    /**\n+     * Constant for the {@code Num Lock} key.\n+     */\n+    NUM_LOCK(0x90, \"Num Lock\"),\n+\n+    /**\n+     * Constant for the {@code Scroll Lock} key.\n+     */\n+    SCROLL_LOCK(0x91, \"Scroll Lock\"),\n+\n+    /**\n+     * Constant for the F1 function key.\n+     */\n+    F1(0x70, \"F1\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F2 function key.\n+     */\n+    F2(0x71, \"F2\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F3 function key.\n+     */\n+    F3(0x72, \"F3\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F4 function key.\n+     */\n+    F4(0x73, \"F4\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F5 function key.\n+     */\n+    F5(0x74, \"F5\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F6 function key.\n+     */\n+    F6(0x75, \"F6\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F7 function key.\n+     */\n+    F7(0x76, \"F7\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F8 function key.\n+     */\n+    F8(0x77, \"F8\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F9 function key.\n+     */\n+    F9(0x78, \"F9\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F10 function key.\n+     */\n+    F10(0x79, \"F10\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F11 function key.\n+     */\n+    F11(0x7A, \"F11\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F12 function key.\n+     */\n+    F12(0x7B, \"F12\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F13 function key.\n+     */\n+    F13(0xF000, \"F13\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F14 function key.\n+     */\n+    F14(0xF001, \"F14\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F15 function key.\n+     */\n+    F15(0xF002, \"F15\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F16 function key.\n+     */\n+    F16(0xF003, \"F16\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F17 function key.\n+     */\n+    F17(0xF004, \"F17\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F18 function key.\n+     */\n+    F18(0xF005, \"F18\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F19 function key.\n+     */\n+    F19(0xF006, \"F19\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F20 function key.\n+     */\n+    F20(0xF007, \"F20\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F21 function key.\n+     */\n+    F21(0xF008, \"F21\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F22 function key.\n+     */\n+    F22(0xF009, \"F22\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F23 function key.\n+     */\n+    F23(0xF00A, \"F23\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the F24 function key.\n+     */\n+    F24(0xF00B, \"F24\", KeyCodeClass.FUNCTION),\n+\n+    /**\n+     * Constant for the {@code Print Screen} key.\n+     */\n+    PRINTSCREEN(0x9A, \"Print Screen\"),\n+\n+    /**\n+     * Constant for the {@code Insert} key.\n+     */\n+    INSERT(0x9B, \"Insert\"),\n+\n+    /**\n+     * Constant for the {@code Help} key.\n+     */\n+    HELP(0x9C, \"Help\"),\n+\n+    /**\n+     * Constant for the {@code Meta} key.\n+     */\n+    META(0x9D, \"Meta\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the {@code Back Quote} key.\n+     */\n+    BACK_QUOTE(0xC0, \"Back Quote\"),\n+\n+    /**\n+     * Constant for the {@code Quote} key.\n+     */\n+    QUOTE(0xDE, \"Quote\"),\n+\n+    /**\n+     * Constant for the numeric keypad <b>up</b> arrow key.\n+     */\n+    KP_UP(0xE0, \"Numpad Up\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>down</b> arrow key.\n+     */\n+    KP_DOWN(0xE1, \"Numpad Down\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>left</b> arrow key.\n+     */\n+    KP_LEFT(0xE2, \"Numpad Left\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the numeric keypad <b>right</b> arrow key.\n+     */\n+    KP_RIGHT(0xE3, \"Numpad Right\", KeyCodeClass.ARROW | KeyCodeClass.NAVIGATION | KeyCodeClass.KEYPAD),\n+\n+    /**\n+     * Constant for the {@code Dead Grave} key.\n+     */\n+    DEAD_GRAVE(0x80, \"Dead Grave\"),\n+\n+    /**\n+     * Constant for the {@code Dead Acute} key.\n+     */\n+    DEAD_ACUTE(0x81, \"Dead Acute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Circumflex} key.\n+     */\n+    DEAD_CIRCUMFLEX(0x82, \"Dead Circumflex\"),\n+\n+    /**\n+     * Constant for the {@code Dead Tilde} key.\n+     */\n+    DEAD_TILDE(0x83, \"Dead Tilde\"),\n+\n+    /**\n+     * Constant for the {@code Dead Macron} key.\n+     */\n+    DEAD_MACRON(0x84, \"Dead Macron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Breve} key.\n+     */\n+    DEAD_BREVE(0x85, \"Dead Breve\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovedot} key.\n+     */\n+    DEAD_ABOVEDOT(0x86, \"Dead Abovedot\"),\n+\n+    /**\n+     * Constant for the {@code Dead Diaeresis} key.\n+     */\n+    DEAD_DIAERESIS(0x87, \"Dead Diaeresis\"),\n+\n+    /**\n+     * Constant for the {@code Dead Abovering} key.\n+     */\n+    DEAD_ABOVERING(0x88, \"Dead Abovering\"),\n+\n+    /**\n+     * Constant for the {@code Dead Doubleacute} key.\n+     */\n+    DEAD_DOUBLEACUTE(0x89, \"Dead Doubleacute\"),\n+\n+    /**\n+     * Constant for the {@code Dead Caron} key.\n+     */\n+    DEAD_CARON(0x8a, \"Dead Caron\"),\n+\n+    /**\n+     * Constant for the {@code Dead Cedilla} key.\n+     */\n+    DEAD_CEDILLA(0x8b, \"Dead Cedilla\"),\n+\n+    /**\n+     * Constant for the {@code Dead Ogonek} key.\n+     */\n+    DEAD_OGONEK(0x8c, \"Dead Ogonek\"),\n+\n+    /**\n+     * Constant for the {@code Dead Iota} key.\n+     */\n+    DEAD_IOTA(0x8d, \"Dead Iota\"),\n+\n+    /**\n+     * Constant for the {@code Dead Voiced Sound} key.\n+     */\n+    DEAD_VOICED_SOUND(0x8e, \"Dead Voiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Dead Semivoiced Sound} key.\n+     */\n+    DEAD_SEMIVOICED_SOUND(0x8f, \"Dead Semivoiced Sound\"),\n+\n+    /**\n+     * Constant for the {@code Ampersand} key.\n+     */\n+    AMPERSAND(0x96, \"Ampersand\"),\n+\n+    /**\n+     * Constant for the {@code Asterisk} key.\n+     */\n+    ASTERISK(0x97, \"Asterisk\"),\n+\n+    /**\n+     * Constant for the {@code Double Quote} key.\n+     */\n+    QUOTEDBL(0x98, \"Double Quote\"),\n+\n+    /**\n+     * Constant for the {@code Less} key.\n+     */\n+    LESS(0x99, \"Less\"),\n+\n+    /**\n+     * Constant for the {@code Greater} key.\n+     */\n+    GREATER(0xa0, \"Greater\"),\n+\n+    /**\n+     * Constant for the {@code Left Brace} key.\n+     */\n+    BRACELEFT(0xa1, \"Left Brace\"),\n+\n+    /**\n+     * Constant for the {@code Right Brace} key.\n+     */\n+    BRACERIGHT(0xa2, \"Right Brace\"),\n+\n+    /**\n+     * Constant for the \"@\" key.\n+     */\n+    AT(0x0200, \"At\"),\n+\n+    /**\n+     * Constant for the \":\" key.\n+     */\n+    COLON(0x0201, \"Colon\"),\n+\n+    /**\n+     * Constant for the \"^\" key.\n+     */\n+    CIRCUMFLEX(0x0202, \"Circumflex\"),\n+\n+    /**\n+     * Constant for the \"$\" key.\n+     */\n+    DOLLAR(0x0203, \"Dollar\"),\n+\n+    /**\n+     * Constant for the Euro currency sign key.\n+     */\n+    EURO_SIGN(0x0204, \"Euro Sign\"),\n+\n+    /**\n+     * Constant for the \"!\" key.\n+     */\n+    EXCLAMATION_MARK(0x0205, \"Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the inverted exclamation mark key.\n+     */\n+    INVERTED_EXCLAMATION_MARK(0x0206, \"Inverted Exclamation Mark\"),\n+\n+    /**\n+     * Constant for the \"(\" key.\n+     */\n+    LEFT_PARENTHESIS(0x0207, \"Left Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"#\" key.\n+     */\n+    NUMBER_SIGN(0x0208, \"Number Sign\"),\n+\n+    /**\n+     * Constant for the \"+\" key.\n+     */\n+    PLUS(0x0209, \"Plus\"),\n+\n+    /**\n+     * Constant for the \")\" key.\n+     */\n+    RIGHT_PARENTHESIS(0x020A, \"Right Parenthesis\"),\n+\n+    /**\n+     * Constant for the \"_\" key.\n+     */\n+    UNDERSCORE(0x020B, \"Underscore\"),\n+\n+    /**\n+     * Constant for the Microsoft Windows \"Windows\" key.\n+     * It is used for both the left and right version of the key.\n+     */\n+    WINDOWS(0x020C, \"Windows\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Microsoft Windows Context Menu key.\n+     */\n+    CONTEXT_MENU(0x020D, \"Context Menu\"),\n+\n+    /**\n+     * Constant for input method support on Asian Keyboards.\n+     */\n+    FINAL(0x0018, \"Final\"),\n+\n+    /**\n+     * Constant for the Convert function key.\n+     */\n+    CONVERT(0x001C, \"Convert\"),\n+\n+    /**\n+     * Constant for the Don't Convert function key.\n+     */\n+    NONCONVERT(0x001D, \"Nonconvert\"),\n+\n+    /**\n+     * Constant for the Accept or Commit function key.\n+     */\n+    ACCEPT(0x001E, \"Accept\"),\n+\n+    /**\n+     * Constant for the {@code Mode Change} key.\n+     */\n+    MODECHANGE(0x001F, \"Mode Change\"),\n+    /**\n+     * Constant for the {@code Kana} key.\n+     */\n+    KANA(0x0015, \"Kana\"),\n+    /**\n+     * Constant for the {@code Kanji} key.\n+     */\n+    KANJI(0x0019, \"Kanji\"),\n+\n+    /**\n+     * Constant for the Alphanumeric function key.\n+     */\n+    ALPHANUMERIC(0x00F0, \"Alphanumeric\"),\n+\n+    /**\n+     * Constant for the Katakana function key.\n+     */\n+    KATAKANA(0x00F1, \"Katakana\"),\n+\n+    /**\n+     * Constant for the Hiragana function key.\n+     */\n+    HIRAGANA(0x00F2, \"Hiragana\"),\n+\n+    /**\n+     * Constant for the Full-Width Characters function key.\n+     */\n+    FULL_WIDTH(0x00F3, \"Full Width\"),\n+\n+    /**\n+     * Constant for the Half-Width Characters function key.\n+     */\n+    HALF_WIDTH(0x00F4, \"Half Width\"),\n+\n+    /**\n+     * Constant for the Roman Characters function key.\n+     */\n+    ROMAN_CHARACTERS(0x00F5, \"Roman Characters\"),\n+\n+    /**\n+     * Constant for the All Candidates function key.\n+     */\n+    ALL_CANDIDATES(0x0100, \"All Candidates\"),\n+\n+    /**\n+     * Constant for the Previous Candidate function key.\n+     */\n+    PREVIOUS_CANDIDATE(0x0101, \"Previous Candidate\"),\n+\n+    /**\n+     * Constant for the Code Input function key.\n+     */\n+    CODE_INPUT(0x0102, \"Code Input\"),\n+\n+    /**\n+     * Constant for the Japanese-Katakana function key.\n+     * This key switches to a Japanese input method and selects its Katakana input mode.\n+     */\n+    JAPANESE_KATAKANA(0x0103, \"Japanese Katakana\"),\n+\n+    /**\n+     * Constant for the Japanese-Hiragana function key.\n+     * This key switches to a Japanese input method and selects its Hiragana input mode.\n+     */\n+    JAPANESE_HIRAGANA(0x0104, \"Japanese Hiragana\"),\n+\n+    /**\n+     * Constant for the Japanese-Roman function key.\n+     * This key switches to a Japanese input method and selects its Roman-Direct input mode.\n+     */\n+    JAPANESE_ROMAN(0x0105, \"Japanese Roman\"),\n+\n+    /**\n+     * Constant for the locking Kana function key.\n+     * This key locks the keyboard into a Kana layout.\n+     */\n+    KANA_LOCK(0x0106, \"Kana Lock\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    INPUT_METHOD_ON_OFF(0x0107, \"Input Method On/Off\"),\n+\n+    /**\n+     * Constant for the {@code Cut} key.\n+     */\n+    CUT(0xFFD1, \"Cut\"),\n+\n+    /**\n+     * Constant for the {@code Copy} key.\n+     */\n+    COPY(0xFFCD, \"Copy\"),\n+\n+    /**\n+     * Constant for the {@code Paste} key.\n+     */\n+    PASTE(0xFFCF, \"Paste\"),\n+\n+    /**\n+     * Constant for the {@code Undo} key.\n+     */\n+    UNDO(0xFFCB, \"Undo\"),\n+\n+    /**\n+     * Constant for the {@code Again} key.\n+     */\n+    AGAIN(0xFFC9, \"Again\"),\n+\n+    /**\n+     * Constant for the {@code Find} key.\n+     */\n+    FIND(0xFFD0, \"Find\"),\n+\n+    /**\n+     * Constant for the {@code Properties} key.\n+     */\n+    PROPS(0xFFCA, \"Properties\"),\n+\n+    /**\n+     * Constant for the {@code Stop} key.\n+     */\n+    STOP(0xFFC8, \"Stop\"),\n+\n+    /**\n+     * Constant for the input method on/off key.\n+     */\n+    COMPOSE(0xFF20, \"Compose\"),\n+\n+    /**\n+     * Constant for the AltGraph function key.\n+     */\n+    ALT_GRAPH(0xFF7E, \"Alt Graph\", KeyCodeClass.MODIFIER),\n+\n+    /**\n+     * Constant for the Begin key.\n+     */\n+    BEGIN(0xFF58, \"Begin\"),\n+\n+    /**\n+     * This value is used to indicate that the keyCode is unknown.\n+     * Key typed events do not have a keyCode value; this value\n+     * is used instead.\n+     */\n+    UNDEFINED(0x0, \"Undefined\"),\n+\n+\n+    //--------------------------------------------------------------\n+    //\n+    // Mobile and Embedded Specific Key Codes\n+    //\n+    //--------------------------------------------------------------\n+\n+    /**\n+     * Constant for the {@code Softkey 0} key.\n+     */\n+    SOFTKEY_0(0x1000, \"Softkey 0\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 1} key.\n+     */\n+    SOFTKEY_1(0x1001, \"Softkey 1\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 2} key.\n+     */\n+    SOFTKEY_2(0x1002, \"Softkey 2\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 3} key.\n+     */\n+    SOFTKEY_3(0x1003, \"Softkey 3\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 4} key.\n+     */\n+    SOFTKEY_4(0x1004, \"Softkey 4\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 5} key.\n+     */\n+    SOFTKEY_5(0x1005, \"Softkey 5\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 6} key.\n+     */\n+    SOFTKEY_6(0x1006, \"Softkey 6\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 7} key.\n+     */\n+    SOFTKEY_7(0x1007, \"Softkey 7\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 8} key.\n+     */\n+    SOFTKEY_8(0x1008, \"Softkey 8\"),\n+\n+    /**\n+     * Constant for the {@code Softkey 9} key.\n+     */\n+    SOFTKEY_9(0x1009, \"Softkey 9\"),\n+\n+    /**\n+     * Constant for the {@code Game A} key.\n+     */\n+    GAME_A(0x100A, \"Game A\"),\n+\n+    /**\n+     * Constant for the {@code Game B} key.\n+     */\n+    GAME_B(0x100B, \"Game B\"),\n+\n+    /**\n+     * Constant for the {@code Game C} key.\n+     */\n+    GAME_C(0x100C, \"Game C\"),\n+\n+    /**\n+     * Constant for the {@code Game D} key.\n+     */\n+    GAME_D(0x100D, \"Game D\"),\n+\n+    /**\n+     * Constant for the {@code Star} key.\n+     */\n+    STAR(0x100E, \"Star\"),\n+\n+    /**\n+     * Constant for the {@code Pound} key.\n+     */\n+    POUND(0x100F, \"Pound\"),\n+\n+    /**\n+     * Constant for the {@code Power} key.\n+     */\n+    POWER(0x199, \"Power\"),\n+\n+    /**\n+     * Constant for the {@code Info} key.\n+     */\n+    INFO(0x1C9, \"Info\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 0} key.\n+     */\n+    COLORED_KEY_0(0x193, \"Colored Key 0\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 1} key.\n+     */\n+    COLORED_KEY_1(0x194, \"Colored Key 1\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 2} key.\n+     */\n+    COLORED_KEY_2(0x195, \"Colored Key 2\"),\n+\n+    /**\n+     * Constant for the {@code Colored Key 3} key.\n+     */\n+    COLORED_KEY_3(0x196, \"Colored Key 3\"),\n+\n+    /**\n+     * Constant for the {@code Eject} key.\n+     */\n+    EJECT_TOGGLE(0x19E, \"Eject\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Play} key.\n+     */\n+    PLAY(0x19F, \"Play\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Record} key.\n+     */\n+    RECORD(0x1A0, \"Record\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Fast Forward} key.\n+     */\n+    FAST_FWD(0x1A1, \"Fast Forward\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Rewind} key.\n+     */\n+    REWIND(0x19C, \"Rewind\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Previous Track} key.\n+     */\n+    TRACK_PREV(0x1A8, \"Previous Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Next Track} key.\n+     */\n+    TRACK_NEXT(0x1A9, \"Next Track\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Up} key.\n+     */\n+    CHANNEL_UP(0x1AB, \"Channel Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Channel Down} key.\n+     */\n+    CHANNEL_DOWN(0x1AC, \"Channel Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Up} key.\n+     */\n+    VOLUME_UP(0x1bf, \"Volume Up\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Volume Down} key.\n+     */\n+    VOLUME_DOWN(0x1C0, \"Volume Down\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the {@code Mute} key.\n+     */\n+    MUTE(0x1C1, \"Mute\", KeyCodeClass.MEDIA),\n+\n+    /**\n+     * Constant for the Apple {@code Command} key. \n+     * @since JavaFX 2.1\n+     */\n+    COMMAND(0x300, \"Command\", KeyCodeClass.MODIFIER),\n+    \n+    /**\n+     * Constant for the {@code Shortcut} key.\n+     */\n+    SHORTCUT(-1, \"Shortcut\");\n+\n+    final int code;\n+    final String ch;\n+    final String name;\n+    private int mask;\n+\n+    // Need to bundle this in another class to avoid \"forward reference\" compiler error\n+    private static class KeyCodeClass {\n+        private KeyCodeClass() {}\n+\n+        private static final int FUNCTION = 1;\n+        private static final int NAVIGATION = 1 << 1;\n+        private static final int ARROW = 1 << 2;\n+        private static final int MODIFIER = 1 << 3;\n+        private static final int LETTER = 1 << 4;\n+        private static final int DIGIT = 1 << 5;\n+        private static final int KEYPAD = 1 << 6;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjM5NQ==", "url": "https://github.com/gluonhq/substrate/pull/273#discussion_r367106395", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "author": "eugener", "createdAt": "2020-01-15T21:05:26Z", "path": "src/main/resources/native/android/dalvik/MainActivity.java", "diffHunk": "@@ -228,5 +255,239 @@ protected void onStop() {\n         super.onStop();\n     }\n \n+    public final static int PRESS   = 111;", "originalCommit": "29a9ee805c4a859553233fd6cb207fc28ac989d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}