{"pr_number": 814, "pr_title": "Add WebView support to iOS and Android", "pr_createdAt": "2020-10-20T09:58:29Z", "pr_url": "https://github.com/gluonhq/substrate/pull/814", "timeline": [{"oid": "03aa95bb340ed1006df819293056bf8b67cb04c7", "url": "https://github.com/gluonhq/substrate/commit/03aa95bb340ed1006df819293056bf8b67cb04c7", "message": "Add js resource files and use WebKit", "committedDate": "2020-07-01T09:22:51Z", "type": "commit"}, {"oid": "15a702201440b960bb363963ca793f8109481cb1", "url": "https://github.com/gluonhq/substrate/commit/15a702201440b960bb363963ca793f8109481cb1", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 686-webios", "committedDate": "2020-07-08T09:32:31Z", "type": "commit"}, {"oid": "518a3ec977d9e5da5ce2e89f69b45f24c9fcb428", "url": "https://github.com/gluonhq/substrate/commit/518a3ec977d9e5da5ce2e89f69b45f24c9fcb428", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 686-webios", "committedDate": "2020-07-28T15:34:00Z", "type": "commit"}, {"oid": "723162a29933d68abee9c24e8fb50c2d07932ede", "url": "https://github.com/gluonhq/substrate/commit/723162a29933d68abee9c24e8fb50c2d07932ede", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 686-webios", "committedDate": "2020-10-14T17:48:54Z", "type": "commit"}, {"oid": "c4ec6687e4a48d55cc9bb0da7dba1e9829d7fae9", "url": "https://github.com/gluonhq/substrate/commit/c4ec6687e4a48d55cc9bb0da7dba1e9829d7fae9", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 686-webios", "committedDate": "2020-10-15T08:55:13Z", "type": "commit"}, {"oid": "403377e2dee1714d100612d120ad2e6c7ad5cec1", "url": "https://github.com/gluonhq/substrate/commit/403377e2dee1714d100612d120ad2e6c7ad5cec1", "message": "Update native library name", "committedDate": "2020-10-20T09:41:10Z", "type": "commit"}, {"oid": "899b9ef58bad19bbdb87dafcf465e17afd7ea321", "url": "https://github.com/gluonhq/substrate/commit/899b9ef58bad19bbdb87dafcf465e17afd7ea321", "message": "Add Android support for WebView", "committedDate": "2020-10-20T09:54:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MTEzNw==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r508371137", "bodyText": "Any specific reason why these are public? I don't see their usage outside this class.", "author": "abhinayagarwal", "createdAt": "2020-10-20T10:01:01Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -70,6 +70,8 @@\n     private static final String ANDROID_TRIPLET = new Triplet(Constants.Profile.ANDROID).toString();\n     private static final String ANDROID_MIN_SDK_VERSION = \"21\";\n     private static final List<String> ANDROID_KEYSTORE_EXTENSIONS = List.of(\".keystore\", \".jks\");\n+    public static final String WL_WHOLE_ARCHIVE = \"-Wl,--whole-archive\";\n+    public static final String WL_NO_WHOLE_ARCHIVE = \"-Wl,--no-whole-archive\";", "originalCommit": "899b9ef58bad19bbdb87dafcf465e17afd7ea321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjAwMw==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r508376003", "bodyText": "Fixed", "author": "jperedadnr", "createdAt": "2020-10-20T10:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MTEzNw=="}], "type": "inlineReview"}, {"oid": "1da5eddbf57a64b4e4341d4b50a2e5f1e055ca94", "url": "https://github.com/gluonhq/substrate/commit/1da5eddbf57a64b4e4341d4b50a2e5f1e055ca94", "message": "Changes based on feedback", "committedDate": "2020-10-20T10:08:27Z", "type": "commit"}, {"oid": "43268c5a2f7410cca613dce2aa067094dc4574fb", "url": "https://github.com/gluonhq/substrate/commit/43268c5a2f7410cca613dce2aa067094dc4574fb", "message": "Remove unused import", "committedDate": "2020-10-20T10:58:48Z", "type": "commit"}, {"oid": "93a4b58961739d3294bfd25b70e272d10db72531", "url": "https://github.com/gluonhq/substrate/commit/93a4b58961739d3294bfd25b70e272d10db72531", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 686-webios", "committedDate": "2020-10-21T13:45:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1MzU1OQ==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509653559", "bodyText": "This is dangerous. It's better to fit the lib between whole-archive/no-whole-archive options, so that it keeps working in case there is more than 1 occurrence of whole-archive", "author": "johanvos", "createdAt": "2020-10-21T20:14:38Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -255,7 +258,9 @@ String getLinker() {\n         if (!useJavaFX) return linkFlags;\n         List<String> answer = new ArrayList<>();\n         answer.addAll(linkFlags);\n-        answer.addAll(javafxLinkFlags);\n+        if (projectConfiguration.getClasspath().contains(\"javafx-web\")) {\n+            javafxLinkFlags.add(javafxLinkFlags.indexOf(WL_NO_WHOLE_ARCHIVE) - 1, javafxWebLib);", "originalCommit": "93a4b58961739d3294bfd25b70e272d10db72531", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NzM1OQ==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509667359", "bodyText": "I've fixed this by adding it to the end.", "author": "jperedadnr", "createdAt": "2020-10-21T20:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1MzU1OQ=="}], "type": "inlineReview"}, {"oid": "eba534cda775338966f2cbb211f6b250e18bb0a2", "url": "https://github.com/gluonhq/substrate/commit/eba534cda775338966f2cbb211f6b250e18bb0a2", "message": "Merge branch 'master' of https://github.com/gluonhq/substrate into 686-webios", "committedDate": "2020-10-21T20:16:39Z", "type": "commit"}, {"oid": "6e0e8615ed178e73419c8004c943bab10bc2bce5", "url": "https://github.com/gluonhq/substrate/commit/6e0e8615ed178e73419c8004c943bab10bc2bce5", "message": "Changes based on feedback", "committedDate": "2020-10-21T20:26:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2ODY0OQ==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509668649", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setWidth(double)'.", "author": "eugener", "createdAt": "2020-10-21T20:28:58Z", "path": "src/main/resources/native/android/android_project/app/src/main/java/com/gluonhq/helloandroid/NativeWebView.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.helloandroid;\n+\n+import android.graphics.Bitmap;\n+import android.net.http.SslError;\n+import android.os.Build;\n+import android.support.annotation.RequiresApi;\n+import android.util.Log;\n+import android.view.Gravity;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.webkit.SslErrorHandler;\n+import android.webkit.ValueCallback;\n+import android.webkit.WebChromeClient;\n+import android.webkit.WebResourceError;\n+import android.webkit.WebResourceRequest;\n+import android.webkit.WebResourceResponse;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.webkit.WebViewClient;\n+\n+import java.io.StringReader;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class NativeWebView {\n+\n+    private static final String TAG     = \"GraalActivity\";\n+\n+    private static MainActivity instance;\n+    private WebView webView;\n+    private boolean inlayout = false;\n+    private boolean layoutStarted = false;\n+    private double width = 0;\n+    private double height = 0;\n+    private int x = 0;\n+    private int y = 0;\n+    private boolean visible = true;\n+    private String scriptResult;\n+\n+    public NativeWebView() {\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor starts\");\n+        instance = MainActivity.getInstance();\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView = new WebView(instance);\n+                NativeWebView.this.webView.setWebChromeClient(new WebChromeClient());\n+                NativeWebView.this.webView.setWebViewClient(new WebViewClient() {\n+                    @Override\n+                    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n+                        super.onPageStarted(view, url, favicon);\n+                        Log.d(TAG, \"Page started: \" + url);\n+                        nativeStartURL(url);\n+                    }\n+\n+                    @Override\n+                    public void onPageFinished(WebView view, final String url) {\n+                        Log.v(TAG, \"Page finished: \" + url);\n+                        NativeWebView.this.webView.evaluateJavascript(\"document.documentElement.innerHTML\", new ValueCallback<String>() {\n+                            @Override\n+                            public void onReceiveValue(String s) {\n+                                Properties p = new Properties();\n+                                try {\n+                                    p.load(new StringReader(\"innerHtmlKey=\" + s));\n+                                } catch (Exception e) {\n+\n+                                }\n+                                nativeFinishURL(url, p.getProperty(\"innerHtmlKey\"));\n+                            }\n+                        });\n+                    }\n+\n+                    @RequiresApi(api = Build.VERSION_CODES.M)\n+                    @Override\n+                    public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n+                        Log.v(TAG, \"LOAD onReceivedError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedError: errorResponse: \" + error.getDescription());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: errorResponse: \" + errorResponse.getReasonPhrase());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n+                        Log.v(TAG, \"onReceivedSslError, skipping error: \" + error);\n+                        handler.proceed();\n+                    }\n+                });\n+\n+                WebSettings webSettings = NativeWebView.this.webView.getSettings();\n+                // TODO, pass from Java\n+                webSettings.setJavaScriptEnabled(true);\n+                webSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n+                webSettings.setDomStorageEnabled(true);\n+                webSettings.setUseWideViewPort(true);\n+                webSettings.setLoadWithOverviewMode(true);\n+\n+                Log.v(TAG, \"NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+                Log.v(TAG, \"finally, NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+            }\n+        });\n+        reLayout();\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor returns: \"+this);\n+    }\n+\n+    public void loadUrl(final String url) {\n+        Log.v(TAG, \"in dalvik, loadUrl called wwith url = \"+url+\" and webView = \"+this.webView);\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView.loadUrl(url);\n+            }\n+        });\n+    }\n+\n+    public String executeScript(final String script) {\n+        Log.v(TAG, \"in dalvik, loadUrl called with script  and webView = \"+this.webView);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        scriptResult = null;\n+        Runnable action = new Runnable() {\n+            @Override\n+            public void run() {\n+                NativeWebView.this.webView.evaluateJavascript(script, new ValueCallback<String>() {\n+                    @Override\n+                    public void onReceiveValue(String s) {\n+                        Log.v(TAG, \"in dalvik, script result: \" + s);\n+                        scriptResult = s;\n+                        latch.countDown();\n+                    }\n+                });\n+            }\n+        };\n+        webView.post(action);\n+        try {\n+            latch.await();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        Log.v(TAG, \"in dalvik, loadUrl script result = \" + scriptResult);\n+        return scriptResult;\n+    }\n+\n+    private void setVisible(boolean visible) {\n+        if (this.visible != visible) {\n+            this.visible = visible;\n+            Log.v(TAG, \"in dalvik, set visible = \" + visible);\n+            instance.runOnUiThread(new Runnable() {\n+                public void run() {\n+                    if (NativeWebView.this.visible) {\n+                        NativeWebView.this.webView.setVisibility(View.VISIBLE);\n+                    } else {\n+                        NativeWebView.this.webView.setVisibility(View.GONE);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void setX(double x) {\n+        if (this.x != (int) x) {\n+            this.x = (int) x;\n+            reLayout();\n+        }\n+    }\n+\n+    private void setY(double y) {\n+        if (this.y != (int) y) {\n+            this.y = (int) y;\n+            reLayout();\n+        }\n+    }\n+\n+    private void setWidth(double width) {", "originalCommit": "6e0e8615ed178e73419c8004c943bab10bc2bce5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2ODY2NQ==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509668665", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setVisible(boolean)'.", "author": "eugener", "createdAt": "2020-10-21T20:28:59Z", "path": "src/main/resources/native/android/android_project/app/src/main/java/com/gluonhq/helloandroid/NativeWebView.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.helloandroid;\n+\n+import android.graphics.Bitmap;\n+import android.net.http.SslError;\n+import android.os.Build;\n+import android.support.annotation.RequiresApi;\n+import android.util.Log;\n+import android.view.Gravity;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.webkit.SslErrorHandler;\n+import android.webkit.ValueCallback;\n+import android.webkit.WebChromeClient;\n+import android.webkit.WebResourceError;\n+import android.webkit.WebResourceRequest;\n+import android.webkit.WebResourceResponse;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.webkit.WebViewClient;\n+\n+import java.io.StringReader;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class NativeWebView {\n+\n+    private static final String TAG     = \"GraalActivity\";\n+\n+    private static MainActivity instance;\n+    private WebView webView;\n+    private boolean inlayout = false;\n+    private boolean layoutStarted = false;\n+    private double width = 0;\n+    private double height = 0;\n+    private int x = 0;\n+    private int y = 0;\n+    private boolean visible = true;\n+    private String scriptResult;\n+\n+    public NativeWebView() {\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor starts\");\n+        instance = MainActivity.getInstance();\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView = new WebView(instance);\n+                NativeWebView.this.webView.setWebChromeClient(new WebChromeClient());\n+                NativeWebView.this.webView.setWebViewClient(new WebViewClient() {\n+                    @Override\n+                    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n+                        super.onPageStarted(view, url, favicon);\n+                        Log.d(TAG, \"Page started: \" + url);\n+                        nativeStartURL(url);\n+                    }\n+\n+                    @Override\n+                    public void onPageFinished(WebView view, final String url) {\n+                        Log.v(TAG, \"Page finished: \" + url);\n+                        NativeWebView.this.webView.evaluateJavascript(\"document.documentElement.innerHTML\", new ValueCallback<String>() {\n+                            @Override\n+                            public void onReceiveValue(String s) {\n+                                Properties p = new Properties();\n+                                try {\n+                                    p.load(new StringReader(\"innerHtmlKey=\" + s));\n+                                } catch (Exception e) {\n+\n+                                }\n+                                nativeFinishURL(url, p.getProperty(\"innerHtmlKey\"));\n+                            }\n+                        });\n+                    }\n+\n+                    @RequiresApi(api = Build.VERSION_CODES.M)\n+                    @Override\n+                    public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n+                        Log.v(TAG, \"LOAD onReceivedError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedError: errorResponse: \" + error.getDescription());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: errorResponse: \" + errorResponse.getReasonPhrase());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n+                        Log.v(TAG, \"onReceivedSslError, skipping error: \" + error);\n+                        handler.proceed();\n+                    }\n+                });\n+\n+                WebSettings webSettings = NativeWebView.this.webView.getSettings();\n+                // TODO, pass from Java\n+                webSettings.setJavaScriptEnabled(true);\n+                webSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n+                webSettings.setDomStorageEnabled(true);\n+                webSettings.setUseWideViewPort(true);\n+                webSettings.setLoadWithOverviewMode(true);\n+\n+                Log.v(TAG, \"NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+                Log.v(TAG, \"finally, NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+            }\n+        });\n+        reLayout();\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor returns: \"+this);\n+    }\n+\n+    public void loadUrl(final String url) {\n+        Log.v(TAG, \"in dalvik, loadUrl called wwith url = \"+url+\" and webView = \"+this.webView);\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView.loadUrl(url);\n+            }\n+        });\n+    }\n+\n+    public String executeScript(final String script) {\n+        Log.v(TAG, \"in dalvik, loadUrl called with script  and webView = \"+this.webView);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        scriptResult = null;\n+        Runnable action = new Runnable() {\n+            @Override\n+            public void run() {\n+                NativeWebView.this.webView.evaluateJavascript(script, new ValueCallback<String>() {\n+                    @Override\n+                    public void onReceiveValue(String s) {\n+                        Log.v(TAG, \"in dalvik, script result: \" + s);\n+                        scriptResult = s;\n+                        latch.countDown();\n+                    }\n+                });\n+            }\n+        };\n+        webView.post(action);\n+        try {\n+            latch.await();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        Log.v(TAG, \"in dalvik, loadUrl script result = \" + scriptResult);\n+        return scriptResult;\n+    }\n+\n+    private void setVisible(boolean visible) {", "originalCommit": "6e0e8615ed178e73419c8004c943bab10bc2bce5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2ODY3Nw==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509668677", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setY(double)'.", "author": "eugener", "createdAt": "2020-10-21T20:29:00Z", "path": "src/main/resources/native/android/android_project/app/src/main/java/com/gluonhq/helloandroid/NativeWebView.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.helloandroid;\n+\n+import android.graphics.Bitmap;\n+import android.net.http.SslError;\n+import android.os.Build;\n+import android.support.annotation.RequiresApi;\n+import android.util.Log;\n+import android.view.Gravity;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.webkit.SslErrorHandler;\n+import android.webkit.ValueCallback;\n+import android.webkit.WebChromeClient;\n+import android.webkit.WebResourceError;\n+import android.webkit.WebResourceRequest;\n+import android.webkit.WebResourceResponse;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.webkit.WebViewClient;\n+\n+import java.io.StringReader;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class NativeWebView {\n+\n+    private static final String TAG     = \"GraalActivity\";\n+\n+    private static MainActivity instance;\n+    private WebView webView;\n+    private boolean inlayout = false;\n+    private boolean layoutStarted = false;\n+    private double width = 0;\n+    private double height = 0;\n+    private int x = 0;\n+    private int y = 0;\n+    private boolean visible = true;\n+    private String scriptResult;\n+\n+    public NativeWebView() {\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor starts\");\n+        instance = MainActivity.getInstance();\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView = new WebView(instance);\n+                NativeWebView.this.webView.setWebChromeClient(new WebChromeClient());\n+                NativeWebView.this.webView.setWebViewClient(new WebViewClient() {\n+                    @Override\n+                    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n+                        super.onPageStarted(view, url, favicon);\n+                        Log.d(TAG, \"Page started: \" + url);\n+                        nativeStartURL(url);\n+                    }\n+\n+                    @Override\n+                    public void onPageFinished(WebView view, final String url) {\n+                        Log.v(TAG, \"Page finished: \" + url);\n+                        NativeWebView.this.webView.evaluateJavascript(\"document.documentElement.innerHTML\", new ValueCallback<String>() {\n+                            @Override\n+                            public void onReceiveValue(String s) {\n+                                Properties p = new Properties();\n+                                try {\n+                                    p.load(new StringReader(\"innerHtmlKey=\" + s));\n+                                } catch (Exception e) {\n+\n+                                }\n+                                nativeFinishURL(url, p.getProperty(\"innerHtmlKey\"));\n+                            }\n+                        });\n+                    }\n+\n+                    @RequiresApi(api = Build.VERSION_CODES.M)\n+                    @Override\n+                    public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n+                        Log.v(TAG, \"LOAD onReceivedError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedError: errorResponse: \" + error.getDescription());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: errorResponse: \" + errorResponse.getReasonPhrase());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n+                        Log.v(TAG, \"onReceivedSslError, skipping error: \" + error);\n+                        handler.proceed();\n+                    }\n+                });\n+\n+                WebSettings webSettings = NativeWebView.this.webView.getSettings();\n+                // TODO, pass from Java\n+                webSettings.setJavaScriptEnabled(true);\n+                webSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n+                webSettings.setDomStorageEnabled(true);\n+                webSettings.setUseWideViewPort(true);\n+                webSettings.setLoadWithOverviewMode(true);\n+\n+                Log.v(TAG, \"NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+                Log.v(TAG, \"finally, NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+            }\n+        });\n+        reLayout();\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor returns: \"+this);\n+    }\n+\n+    public void loadUrl(final String url) {\n+        Log.v(TAG, \"in dalvik, loadUrl called wwith url = \"+url+\" and webView = \"+this.webView);\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView.loadUrl(url);\n+            }\n+        });\n+    }\n+\n+    public String executeScript(final String script) {\n+        Log.v(TAG, \"in dalvik, loadUrl called with script  and webView = \"+this.webView);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        scriptResult = null;\n+        Runnable action = new Runnable() {\n+            @Override\n+            public void run() {\n+                NativeWebView.this.webView.evaluateJavascript(script, new ValueCallback<String>() {\n+                    @Override\n+                    public void onReceiveValue(String s) {\n+                        Log.v(TAG, \"in dalvik, script result: \" + s);\n+                        scriptResult = s;\n+                        latch.countDown();\n+                    }\n+                });\n+            }\n+        };\n+        webView.post(action);\n+        try {\n+            latch.await();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        Log.v(TAG, \"in dalvik, loadUrl script result = \" + scriptResult);\n+        return scriptResult;\n+    }\n+\n+    private void setVisible(boolean visible) {\n+        if (this.visible != visible) {\n+            this.visible = visible;\n+            Log.v(TAG, \"in dalvik, set visible = \" + visible);\n+            instance.runOnUiThread(new Runnable() {\n+                public void run() {\n+                    if (NativeWebView.this.visible) {\n+                        NativeWebView.this.webView.setVisibility(View.VISIBLE);\n+                    } else {\n+                        NativeWebView.this.webView.setVisibility(View.GONE);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void setX(double x) {\n+        if (this.x != (int) x) {\n+            this.x = (int) x;\n+            reLayout();\n+        }\n+    }\n+\n+    private void setY(double y) {", "originalCommit": "6e0e8615ed178e73419c8004c943bab10bc2bce5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2ODcwMA==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509668700", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setHeight(double)'.", "author": "eugener", "createdAt": "2020-10-21T20:29:01Z", "path": "src/main/resources/native/android/android_project/app/src/main/java/com/gluonhq/helloandroid/NativeWebView.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.helloandroid;\n+\n+import android.graphics.Bitmap;\n+import android.net.http.SslError;\n+import android.os.Build;\n+import android.support.annotation.RequiresApi;\n+import android.util.Log;\n+import android.view.Gravity;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.webkit.SslErrorHandler;\n+import android.webkit.ValueCallback;\n+import android.webkit.WebChromeClient;\n+import android.webkit.WebResourceError;\n+import android.webkit.WebResourceRequest;\n+import android.webkit.WebResourceResponse;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.webkit.WebViewClient;\n+\n+import java.io.StringReader;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class NativeWebView {\n+\n+    private static final String TAG     = \"GraalActivity\";\n+\n+    private static MainActivity instance;\n+    private WebView webView;\n+    private boolean inlayout = false;\n+    private boolean layoutStarted = false;\n+    private double width = 0;\n+    private double height = 0;\n+    private int x = 0;\n+    private int y = 0;\n+    private boolean visible = true;\n+    private String scriptResult;\n+\n+    public NativeWebView() {\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor starts\");\n+        instance = MainActivity.getInstance();\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView = new WebView(instance);\n+                NativeWebView.this.webView.setWebChromeClient(new WebChromeClient());\n+                NativeWebView.this.webView.setWebViewClient(new WebViewClient() {\n+                    @Override\n+                    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n+                        super.onPageStarted(view, url, favicon);\n+                        Log.d(TAG, \"Page started: \" + url);\n+                        nativeStartURL(url);\n+                    }\n+\n+                    @Override\n+                    public void onPageFinished(WebView view, final String url) {\n+                        Log.v(TAG, \"Page finished: \" + url);\n+                        NativeWebView.this.webView.evaluateJavascript(\"document.documentElement.innerHTML\", new ValueCallback<String>() {\n+                            @Override\n+                            public void onReceiveValue(String s) {\n+                                Properties p = new Properties();\n+                                try {\n+                                    p.load(new StringReader(\"innerHtmlKey=\" + s));\n+                                } catch (Exception e) {\n+\n+                                }\n+                                nativeFinishURL(url, p.getProperty(\"innerHtmlKey\"));\n+                            }\n+                        });\n+                    }\n+\n+                    @RequiresApi(api = Build.VERSION_CODES.M)\n+                    @Override\n+                    public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n+                        Log.v(TAG, \"LOAD onReceivedError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedError: errorResponse: \" + error.getDescription());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: errorResponse: \" + errorResponse.getReasonPhrase());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n+                        Log.v(TAG, \"onReceivedSslError, skipping error: \" + error);\n+                        handler.proceed();\n+                    }\n+                });\n+\n+                WebSettings webSettings = NativeWebView.this.webView.getSettings();\n+                // TODO, pass from Java\n+                webSettings.setJavaScriptEnabled(true);\n+                webSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n+                webSettings.setDomStorageEnabled(true);\n+                webSettings.setUseWideViewPort(true);\n+                webSettings.setLoadWithOverviewMode(true);\n+\n+                Log.v(TAG, \"NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+                Log.v(TAG, \"finally, NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+            }\n+        });\n+        reLayout();\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor returns: \"+this);\n+    }\n+\n+    public void loadUrl(final String url) {\n+        Log.v(TAG, \"in dalvik, loadUrl called wwith url = \"+url+\" and webView = \"+this.webView);\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView.loadUrl(url);\n+            }\n+        });\n+    }\n+\n+    public String executeScript(final String script) {\n+        Log.v(TAG, \"in dalvik, loadUrl called with script  and webView = \"+this.webView);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        scriptResult = null;\n+        Runnable action = new Runnable() {\n+            @Override\n+            public void run() {\n+                NativeWebView.this.webView.evaluateJavascript(script, new ValueCallback<String>() {\n+                    @Override\n+                    public void onReceiveValue(String s) {\n+                        Log.v(TAG, \"in dalvik, script result: \" + s);\n+                        scriptResult = s;\n+                        latch.countDown();\n+                    }\n+                });\n+            }\n+        };\n+        webView.post(action);\n+        try {\n+            latch.await();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        Log.v(TAG, \"in dalvik, loadUrl script result = \" + scriptResult);\n+        return scriptResult;\n+    }\n+\n+    private void setVisible(boolean visible) {\n+        if (this.visible != visible) {\n+            this.visible = visible;\n+            Log.v(TAG, \"in dalvik, set visible = \" + visible);\n+            instance.runOnUiThread(new Runnable() {\n+                public void run() {\n+                    if (NativeWebView.this.visible) {\n+                        NativeWebView.this.webView.setVisibility(View.VISIBLE);\n+                    } else {\n+                        NativeWebView.this.webView.setVisibility(View.GONE);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void setX(double x) {\n+        if (this.x != (int) x) {\n+            this.x = (int) x;\n+            reLayout();\n+        }\n+    }\n+\n+    private void setY(double y) {\n+        if (this.y != (int) y) {\n+            this.y = (int) y;\n+            reLayout();\n+        }\n+    }\n+\n+    private void setWidth(double width) {\n+        if (this.width != width) {\n+            this.width = width;\n+            reLayout();\n+        }\n+    }\n+\n+    private void setHeight(double height) {", "originalCommit": "6e0e8615ed178e73419c8004c943bab10bc2bce5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2ODcxNQ==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509668715", "bodyText": "Codacy found an issue: Possible unsafe assignment to a non-final static field in a constructor.", "author": "eugener", "createdAt": "2020-10-21T20:29:02Z", "path": "src/main/resources/native/android/android_project/app/src/main/java/com/gluonhq/helloandroid/NativeWebView.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.helloandroid;\n+\n+import android.graphics.Bitmap;\n+import android.net.http.SslError;\n+import android.os.Build;\n+import android.support.annotation.RequiresApi;\n+import android.util.Log;\n+import android.view.Gravity;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.webkit.SslErrorHandler;\n+import android.webkit.ValueCallback;\n+import android.webkit.WebChromeClient;\n+import android.webkit.WebResourceError;\n+import android.webkit.WebResourceRequest;\n+import android.webkit.WebResourceResponse;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.webkit.WebViewClient;\n+\n+import java.io.StringReader;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class NativeWebView {\n+\n+    private static final String TAG     = \"GraalActivity\";\n+\n+    private static MainActivity instance;\n+    private WebView webView;\n+    private boolean inlayout = false;\n+    private boolean layoutStarted = false;\n+    private double width = 0;\n+    private double height = 0;\n+    private int x = 0;\n+    private int y = 0;\n+    private boolean visible = true;\n+    private String scriptResult;\n+\n+    public NativeWebView() {\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor starts\");\n+        instance = MainActivity.getInstance();", "originalCommit": "6e0e8615ed178e73419c8004c943bab10bc2bce5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2ODcyNA==", "url": "https://github.com/gluonhq/substrate/pull/814#discussion_r509668724", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'setX(double)'.", "author": "eugener", "createdAt": "2020-10-21T20:29:03Z", "path": "src/main/resources/native/android/android_project/app/src/main/java/com/gluonhq/helloandroid/NativeWebView.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.helloandroid;\n+\n+import android.graphics.Bitmap;\n+import android.net.http.SslError;\n+import android.os.Build;\n+import android.support.annotation.RequiresApi;\n+import android.util.Log;\n+import android.view.Gravity;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.FrameLayout;\n+import android.webkit.SslErrorHandler;\n+import android.webkit.ValueCallback;\n+import android.webkit.WebChromeClient;\n+import android.webkit.WebResourceError;\n+import android.webkit.WebResourceRequest;\n+import android.webkit.WebResourceResponse;\n+import android.webkit.WebSettings;\n+import android.webkit.WebView;\n+import android.webkit.WebViewClient;\n+\n+import java.io.StringReader;\n+import java.util.Properties;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class NativeWebView {\n+\n+    private static final String TAG     = \"GraalActivity\";\n+\n+    private static MainActivity instance;\n+    private WebView webView;\n+    private boolean inlayout = false;\n+    private boolean layoutStarted = false;\n+    private double width = 0;\n+    private double height = 0;\n+    private int x = 0;\n+    private int y = 0;\n+    private boolean visible = true;\n+    private String scriptResult;\n+\n+    public NativeWebView() {\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor starts\");\n+        instance = MainActivity.getInstance();\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView = new WebView(instance);\n+                NativeWebView.this.webView.setWebChromeClient(new WebChromeClient());\n+                NativeWebView.this.webView.setWebViewClient(new WebViewClient() {\n+                    @Override\n+                    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n+                        super.onPageStarted(view, url, favicon);\n+                        Log.d(TAG, \"Page started: \" + url);\n+                        nativeStartURL(url);\n+                    }\n+\n+                    @Override\n+                    public void onPageFinished(WebView view, final String url) {\n+                        Log.v(TAG, \"Page finished: \" + url);\n+                        NativeWebView.this.webView.evaluateJavascript(\"document.documentElement.innerHTML\", new ValueCallback<String>() {\n+                            @Override\n+                            public void onReceiveValue(String s) {\n+                                Properties p = new Properties();\n+                                try {\n+                                    p.load(new StringReader(\"innerHtmlKey=\" + s));\n+                                } catch (Exception e) {\n+\n+                                }\n+                                nativeFinishURL(url, p.getProperty(\"innerHtmlKey\"));\n+                            }\n+                        });\n+                    }\n+\n+                    @RequiresApi(api = Build.VERSION_CODES.M)\n+                    @Override\n+                    public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n+                        Log.v(TAG, \"LOAD onReceivedError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedError: errorResponse: \" + error.getDescription());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: request: \" + request.getMethod());\n+                        Log.v(TAG, \"LOAD onReceivedHttpError: errorResponse: \" + errorResponse.getReasonPhrase());\n+                        nativeFailedURL(request.getUrl().toString());\n+                    }\n+\n+                    @Override\n+                    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n+                        Log.v(TAG, \"onReceivedSslError, skipping error: \" + error);\n+                        handler.proceed();\n+                    }\n+                });\n+\n+                WebSettings webSettings = NativeWebView.this.webView.getSettings();\n+                // TODO, pass from Java\n+                webSettings.setJavaScriptEnabled(true);\n+                webSettings.setJavaScriptCanOpenWindowsAutomatically(true);\n+                webSettings.setDomStorageEnabled(true);\n+                webSettings.setUseWideViewPort(true);\n+                webSettings.setLoadWithOverviewMode(true);\n+\n+                Log.v(TAG, \"NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+                Log.v(TAG, \"finally, NATIVEWEBVIEW wv = \"+NativeWebView.this.webView);\n+            }\n+        });\n+        reLayout();\n+        Log.v(TAG, \"NATIVEWEBVIEW constructor returns: \"+this);\n+    }\n+\n+    public void loadUrl(final String url) {\n+        Log.v(TAG, \"in dalvik, loadUrl called wwith url = \"+url+\" and webView = \"+this.webView);\n+        instance.runOnUiThread(new Runnable () {\n+            public void run() {\n+                NativeWebView.this.webView.loadUrl(url);\n+            }\n+        });\n+    }\n+\n+    public String executeScript(final String script) {\n+        Log.v(TAG, \"in dalvik, loadUrl called with script  and webView = \"+this.webView);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        scriptResult = null;\n+        Runnable action = new Runnable() {\n+            @Override\n+            public void run() {\n+                NativeWebView.this.webView.evaluateJavascript(script, new ValueCallback<String>() {\n+                    @Override\n+                    public void onReceiveValue(String s) {\n+                        Log.v(TAG, \"in dalvik, script result: \" + s);\n+                        scriptResult = s;\n+                        latch.countDown();\n+                    }\n+                });\n+            }\n+        };\n+        webView.post(action);\n+        try {\n+            latch.await();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        Log.v(TAG, \"in dalvik, loadUrl script result = \" + scriptResult);\n+        return scriptResult;\n+    }\n+\n+    private void setVisible(boolean visible) {\n+        if (this.visible != visible) {\n+            this.visible = visible;\n+            Log.v(TAG, \"in dalvik, set visible = \" + visible);\n+            instance.runOnUiThread(new Runnable() {\n+                public void run() {\n+                    if (NativeWebView.this.visible) {\n+                        NativeWebView.this.webView.setVisibility(View.VISIBLE);\n+                    } else {\n+                        NativeWebView.this.webView.setVisibility(View.GONE);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void setX(double x) {", "originalCommit": "6e0e8615ed178e73419c8004c943bab10bc2bce5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}