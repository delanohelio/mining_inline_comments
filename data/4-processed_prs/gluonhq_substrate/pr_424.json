{"pr_number": 424, "pr_title": "packaging step for android split from link step", "pr_createdAt": "2020-03-10T12:19:31Z", "pr_url": "https://github.com/gluonhq/substrate/pull/424", "timeline": [{"oid": "5ff7870fffa13866b6c09006f240b999a3f72bb7", "url": "https://github.com/gluonhq/substrate/commit/5ff7870fffa13866b6c09006f240b999a3f72bb7", "message": "packaging step for android split from link step", "committedDate": "2020-03-12T09:58:58Z", "type": "commit"}, {"oid": "cb831795956f808416dc1da132984f508a8af837", "url": "https://github.com/gluonhq/substrate/commit/cb831795956f808416dc1da132984f508a8af837", "message": "break up long methods", "committedDate": "2020-03-12T09:58:58Z", "type": "commit"}, {"oid": "113df339a3d49e630f52bd4a80f8bd5bb9fbb5d7", "url": "https://github.com/gluonhq/substrate/commit/113df339a3d49e630f52bd4a80f8bd5bb9fbb5d7", "message": "pass classpath to ProjectConfiguration", "committedDate": "2020-03-12T09:58:58Z", "type": "commit"}, {"oid": "40b3cb579cfd6c72aebaf30bbbc568c600a91ad5", "url": "https://github.com/gluonhq/substrate/commit/40b3cb579cfd6c72aebaf30bbbc568c600a91ad5", "message": "print configuration when verbose", "committedDate": "2020-03-12T09:58:58Z", "type": "commit"}, {"oid": "d8782fd29e60f81fdaf9f7575ffd78b3ceb271e1", "url": "https://github.com/gluonhq/substrate/commit/d8782fd29e60f81fdaf9f7575ffd78b3ceb271e1", "message": "fix test code", "committedDate": "2020-03-12T09:58:58Z", "type": "commit"}, {"oid": "6c2b9f51c7b6b9826af5527aa4e92ab0da2b8c8e", "url": "https://github.com/gluonhq/substrate/commit/6c2b9f51c7b6b9826af5527aa4e92ab0da2b8c8e", "message": "simplify compile() method", "committedDate": "2020-03-12T09:58:58Z", "type": "commit"}, {"oid": "4d50182774007066da2d6b5f735b28eaeda9210e", "url": "https://github.com/gluonhq/substrate/commit/4d50182774007066da2d6b5f735b28eaeda9210e", "message": "small code improvements", "committedDate": "2020-03-12T09:58:58Z", "type": "commit"}, {"oid": "4d50182774007066da2d6b5f735b28eaeda9210e", "url": "https://github.com/gluonhq/substrate/commit/4d50182774007066da2d6b5f735b28eaeda9210e", "message": "small code improvements", "committedDate": "2020-03-12T09:58:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNzg3NQ==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391517875", "bodyText": "can this be final?", "author": "johanvos", "createdAt": "2020-03-12T10:11:03Z", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -62,19 +62,32 @@\n     private String appId;\n     private String appName;\n     private String mainClassName;\n+    private String classpath;", "originalCommit": "4d50182774007066da2d6b5f735b28eaeda9210e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxOTA0Ng==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391519046", "bodyText": "print t as well (t.getMessage() is not shown in stacktraces, but may contain relevant info)", "author": "johanvos", "createdAt": "2020-03-12T10:13:21Z", "path": "src/main/java/com/gluonhq/substrate/SubstrateDispatcher.java", "diffHunk": "@@ -116,20 +189,45 @@ public static void main(String[] args) throws Exception {\n             t.printStackTrace();\n             System.exit(1);\n         }\n+    }\n+\n+    private static void executePackageStep(SubstrateDispatcher dispatcher) {\n+        System.err.println(\"Packaging...\");\n+        try {\n+            dispatcher.nativePackage();\n+        } catch (Throwable t) {\n+            System.err.println(\"Packaging failed with an exception\");", "originalCommit": "4d50182774007066da2d6b5f735b28eaeda9210e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyMTQwMA==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391521400", "bodyText": "The full stack trace is printed the line below, which also prints the message exception. I can revert the statements, so that the exception is printed first, and then the println?", "author": "tiainen", "createdAt": "2020-03-12T10:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxOTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyNjI0Mw==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391526243", "bodyText": "not sure this is still needed or wanted, but that is probably food for another PR", "author": "johanvos", "createdAt": "2020-03-12T10:26:11Z", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -79,12 +79,24 @@\n             \"org.graalvm.home.HomeFinderFeature\"\n     );\n \n+    private static final List<String> baseNativeImageArguments = Arrays.asList(\n+            \"--report-unsupported-elements-at-runtime\",\n+            \"-Djdk.internal.lambda.eagerlyInitialize=false\",\n+            \"--no-server\",", "originalCommit": "4d50182774007066da2d6b5f735b28eaeda9210e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzc3MA==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391707770", "bodyText": "Indeed, cleanup of the arguments is work for another issue.", "author": "tiainen", "createdAt": "2020-03-12T15:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyNjI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5MzExMg==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391493112", "bodyText": "final? (Same for mainClassName?)", "author": "jperedadnr", "createdAt": "2020-03-12T09:27:13Z", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -62,19 +62,32 @@\n     private String appId;\n     private String appName;\n     private String mainClassName;\n+    private String classpath;", "originalCommit": "fff15f9aeaceda18268af247f6bb8dd10683668d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5NTc1Ng==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391495756", "bodyText": "We should move all System.err, System.out to Logger.log", "author": "jperedadnr", "createdAt": "2020-03-12T09:32:09Z", "path": "src/main/java/com/gluonhq/substrate/SubstrateDispatcher.java", "diffHunk": "@@ -77,14 +123,48 @@ public static void main(String[] args) throws Exception {\n         config.setJniList(Strings.split(System.getProperty(\"jnilist\")));\n         config.setBundlesList(Strings.split(System.getProperty(\"bundleslist\")));\n         config.setVerbose(verbose);\n-        config.setUsePrismSW(Boolean.parseBoolean(System.getProperty(\"prism.sw\", \"false\")));\n-        config.setUsePrecompiledCode(Boolean.parseBoolean(System.getProperty(\"usePrecompiledCode\", \"true\")));\n+        config.setUsePrismSW(usePrismSW);\n+        config.setUsePrecompiledCode(usePrecompiledCode);\n+        return config;\n+    }\n \n-        Path buildRoot = Paths.get(System.getProperty(\"user.dir\"), \"build\", \"autoclient\");\n+    private static Step getStepToExecute() {\n+        return Optional.ofNullable(System.getProperty(\"step\"))\n+                .map(stepProperty -> {\n+                    try {\n+                        return Step.valueOf(stepProperty.toUpperCase(Locale.ROOT));\n+                    } catch (IllegalArgumentException e) {\n+                        printUsage();\n+                        throw new IllegalArgumentException(String.format(\"Invalid value for 'step' specified. Possible values: %s\", Arrays.toString(Step.values())));\n+                    }\n+                })\n+                .orElse(Step.RUN);\n+    }\n+\n+    public static void executeCompileStep(SubstrateDispatcher dispatcher) {\n+        System.err.println(\"Compiling...\");", "originalCommit": "fff15f9aeaceda18268af247f6bb8dd10683668d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwMTIzNw==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391501237", "bodyText": "This is only required when usePrecompiledCode is set to false", "author": "jperedadnr", "createdAt": "2020-03-12T09:41:52Z", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -384,10 +301,188 @@ boolean useGraalVMJavaStaticLibraries() {\n         return false;\n     }\n \n-   /*\n-    * Copies the .cap files from the jar resource and store them in\n-    * a directory. Return that directory\n-    */\n+    private Path getApkPath() {\n+        return paths.getGvmPath().resolve(Constants.APK_PATH);\n+    }\n+\n+    private Path getApkBinPath() {\n+        return getApkPath().resolve(\"bin\");\n+    }\n+\n+    private Path getApkClassPath() {\n+        return getApkPath().resolve(\"class\");\n+    }\n+\n+    private Path getApkLibPath() {\n+        return getApkPath().resolve(\"lib\");\n+    }\n+\n+    private Path getApkLibArm64Path() {\n+        return getApkLibPath().resolve(\"arm64-v8a\");\n+    }\n+\n+    private Path getApkAndroidSourcePath() {\n+        return getApkPath().resolve(\"android-source\");\n+    }\n+\n+    private void ensureApkOutputDirectoriesExist() throws IOException {\n+        Files.createDirectories(getApkPath());\n+        Files.createDirectories(getApkBinPath());\n+        Files.createDirectories(getApkClassPath());\n+        Files.createDirectories(getApkLibPath());\n+        Files.createDirectories(getApkLibArm64Path());\n+        Files.createDirectories(getApkAndroidSourcePath());", "originalCommit": "fff15f9aeaceda18268af247f6bb8dd10683668d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDAyNg==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391504026", "bodyText": "did you mean isUseJavaFX()?", "author": "jperedadnr", "createdAt": "2020-03-12T09:46:41Z", "path": "src/test/java/com/gluonhq/substrate/SubstrateTest.java", "diffHunk": "@@ -67,40 +67,58 @@ void testWindowsTriplet() {\n     void testIOSTripletOnLinux() throws IOException {\n         assumeTrue(Triplet.fromCurrentOS().getOs().indexOf(\"nux\") > 0);\n         Triplet iosTriplet = new Triplet(Constants.Profile.IOS);\n-        ProjectConfiguration config = new ProjectConfiguration(\"\");\n+        ProjectConfiguration config = new ProjectConfiguration(\"\", \"\");\n         config.setTarget(iosTriplet);\n         config.setGraalPath(Path.of(System.getenv(\"GRAALVM_HOME\")));\n \n         var dispatcher = new SubstrateDispatcher(Path.of(System.getProperty(\"user.home\")), config);\n         // when on linux, nativeCompile should throw an illegalArgumentException\n-        assertThrows(IllegalArgumentException.class, () -> dispatcher.nativeCompile(\"\"));\n+        assertThrows(IllegalArgumentException.class, () -> dispatcher.nativeCompile());\n     }\n \n     @Test\n     void testAssertGraal() {\n-        ProjectConfiguration publicConfig = new ProjectConfiguration(\"\");\n+        ProjectConfiguration publicConfig = new ProjectConfiguration(\"\", \"\");\n         InternalProjectConfiguration config = new InternalProjectConfiguration(publicConfig);\n         assertThrows(NullPointerException.class, config::canRunNativeImage);\n     }\n \n     @Test\n     void testMainClassName() {\n-        assertThrows(NullPointerException.class, () -> new ProjectConfiguration(null));;\n-        var config = new InternalProjectConfiguration( new ProjectConfiguration(\"a.b.Foo\"));\n+        assertThrows(NullPointerException.class, () -> new ProjectConfiguration(null, \"\"));\n+        var config = new InternalProjectConfiguration(new ProjectConfiguration(\"a.b.Foo\", \"a.b-1.0.jar\"));\n         assertEquals(\"a.b.Foo\", config.getMainClassName());\n-        config = new InternalProjectConfiguration( new ProjectConfiguration(\"name/a.b.Foo\"));\n+        config = new InternalProjectConfiguration(new ProjectConfiguration(\"name/a.b.Foo\", \"\"));\n         assertEquals(\"a.b.Foo\", config.getMainClassName());\n     }\n \n+    @Test\n+    void testClasspath() {\n+        assertThrows(NullPointerException.class, () -> new ProjectConfiguration(\"\", null));\n+        var config = new InternalProjectConfiguration(new ProjectConfiguration(\"\", \"a.b-1.0.jar\"));\n+        assertEquals(\"a.b-1.0.jar\", config.getClasspath());\n+    }\n+\n     @Test\n     void testAssertSW() {\n-        ProjectConfiguration publicConfig = new ProjectConfiguration(\"a.b.Foo\");\n+        ProjectConfiguration publicConfig = new ProjectConfiguration(\"a.b.Foo\", \"\");\n         InternalProjectConfiguration config = new InternalProjectConfiguration(publicConfig);\n         assertFalse(config.isUsePrismSW());\n \n-        publicConfig = new ProjectConfiguration(\"a.b.Foo\");\n+        publicConfig = new ProjectConfiguration(\"a.b.Foo\", \"\");\n         publicConfig.setUsePrismSW(true);\n         config = new InternalProjectConfiguration(publicConfig);\n         assertTrue(config.isUsePrismSW());\n     }\n+\n+    @Test\n+    void testAssertUseJavaFX() {\n+        ProjectConfiguration publicConfig = new ProjectConfiguration(\"\", \"javafx-base-14-linux.jar\");\n+        InternalProjectConfiguration config = new InternalProjectConfiguration(publicConfig);\n+        assertTrue(config.isUseJavaFX());\n+\n+        publicConfig = new ProjectConfiguration(\"\", \"apache-commons.jar\");\n+        config = new InternalProjectConfiguration(publicConfig);\n+        assertFalse(config.isUsePrismSW());", "originalCommit": "fff15f9aeaceda18268af247f6bb8dd10683668d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxMzgyNQ==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391513825", "bodyText": "Add JavaDoc?", "author": "jperedadnr", "createdAt": "2020-03-12T10:03:44Z", "path": "src/main/java/com/gluonhq/substrate/SubstrateDispatcher.java", "diffHunk": "@@ -50,25 +51,70 @@\n \n public class SubstrateDispatcher {\n \n-    private static volatile boolean run = true;\n+    private enum Step {", "originalCommit": "4d50182774007066da2d6b5f735b28eaeda9210e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyODYzMw==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391528633", "bodyText": "I see that you don't do anything with INSTALL yet, so I guess that's for a follow up PR?", "author": "jperedadnr", "createdAt": "2020-03-12T10:30:38Z", "path": "src/main/java/com/gluonhq/substrate/SubstrateDispatcher.java", "diffHunk": "@@ -50,25 +51,70 @@\n \n public class SubstrateDispatcher {\n \n-    private static volatile boolean run = true;\n+    private enum Step {\n+        COMPILE(),\n+        LINK(COMPILE),\n+        PACKAGE(LINK),\n+        INSTALL(PACKAGE),", "originalCommit": "4d50182774007066da2d6b5f735b28eaeda9210e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0NTg3NQ==", "url": "https://github.com/gluonhq/substrate/pull/424#discussion_r391545875", "bodyText": "Actually, it can be done in this PR, because at the moment run on the android target is actually install and run combined. So it's indeed best to split that functionality now as well.", "author": "tiainen", "createdAt": "2020-03-12T11:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyODYzMw=="}], "type": "inlineReview"}, {"oid": "c41527ecc07b5893c15d5c5d0cb022ffa5de1407", "url": "https://github.com/gluonhq/substrate/commit/c41527ecc07b5893c15d5c5d0cb022ffa5de1407", "message": "make fields final", "committedDate": "2020-03-12T13:37:00Z", "type": "commit"}, {"oid": "63549c663b5e57682431277dc4bfab1f1923d579", "url": "https://github.com/gluonhq/substrate/commit/63549c663b5e57682431277dc4bfab1f1923d579", "message": "add javadoc, use logger and implement install step", "committedDate": "2020-03-12T13:37:42Z", "type": "commit"}, {"oid": "324d1c4fb735672b044b6fe948021ab3e3737af9", "url": "https://github.com/gluonhq/substrate/commit/324d1c4fb735672b044b6fe948021ab3e3737af9", "message": "test isUseJavaFX method instead", "committedDate": "2020-03-12T13:38:07Z", "type": "commit"}, {"oid": "ca3c22351a8558be75eeb1edfdf15fad3cf7a053", "url": "https://github.com/gluonhq/substrate/commit/ca3c22351a8558be75eeb1edfdf15fad3cf7a053", "message": "Merge remote-tracking branch 'upstream/master' into 407-substrate-steps", "committedDate": "2020-03-12T15:34:35Z", "type": "commit"}, {"oid": "d0c6433813e58c12318a26c6dcd505eb2c87d667", "url": "https://github.com/gluonhq/substrate/commit/d0c6433813e58c12318a26c6dcd505eb2c87d667", "message": "Merge remote-tracking branch 'origin/master' into 407-substrate-steps\n\nConflicts:\n\tsrc/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n\tsrc/main/resources/native/android/dalvik/precompiled/class/com/gluonhq/helloandroid/MainActivity.class", "committedDate": "2020-03-13T13:48:09Z", "type": "commit"}]}