{"pr_number": 3220, "pr_title": "Wip/6.0 Disallow FQN entity name in JPA compliance mode", "pr_createdAt": "2020-02-06T04:22:40Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3220", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNDUyNA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3220#discussion_r375634524", "bodyText": "found unused import. maybe we can include associated rule into check style.", "author": "NathanQingyangXu", "createdAt": "2020-02-06T04:23:29Z", "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -167,7 +167,6 @@\n import static org.hibernate.grammars.hql.HqlParser.IDENTIFIER;\n import static org.hibernate.query.TemporalUnit.*;\n import static org.hibernate.type.descriptor.DateTimeUtils.DATE_TIME;\n-import static org.hibernate.type.descriptor.DateTimeUtils.OFFSET_DATE_TIME;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNDU3OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3220#discussion_r375634579", "bodyText": "not too sure, however", "author": "NathanQingyangXu", "createdAt": "2020-02-06T04:23:48Z", "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -264,7 +263,7 @@ else if ( ctx.deleteStatement() != null ) {\n \n \n \t// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\t// To-level statements\n+\t// Top-level statements", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg4OTc4MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3220#discussion_r375889780", "bodyText": "The check here should be based on reference.getName() like I said on the other one.\nWhy?  Well conceptually it is more correct.  And practically it would allow the exception message to include the entity name they should use in \"compliance mode\".  Right now, your error message does not tell them the corrective action.\nAlso, getCreationOptions().useStrictJpaCompliance() is a more performant check compared to the String comparison - it should come first.", "author": "sebersole", "createdAt": "2020-02-06T15:08:48Z", "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -832,12 +831,18 @@ private SortOrder interpretSortOrder(String value) {\n \t\treturn entityReference;\n \t}\n \n-\tprivate EntityDomainType resolveEntityReference(String entityName) {\n+\tprivate EntityDomainType resolveEntityReference(final String entityName) {\n \t\tlog.debugf( \"Attempting to resolve path [%s] as entity reference...\", entityName );\n \t\tEntityDomainType reference = null;\n \t\ttry {\n-\t\t\tentityName = creationContext.getJpaMetamodel().qualifyImportableName( entityName );\n-\t\t\treference = creationContext.getJpaMetamodel().entity( entityName );\n+\t\t\tString importName = creationContext.getJpaMetamodel().qualifyImportableName( entityName );\n+\t\t\tif ( entityName.equals( importName ) && getCreationOptions().useStrictJpaCompliance() ) {\n+\t\t\t\tthrow new StrictJpaComplianceViolation(\n+\t\t\t\t\t\t\"Encountered FQN entity name [\" + entityName + \"], but strict JPQL compliance was requested\",\n+\t\t\t\t\t\tStrictJpaComplianceViolation.Type.FQN_ENTITY_NAME\n+\t\t\t\t);\n+\t\t\t}\n+\t\t\treference = creationContext.getJpaMetamodel().entity( importName );", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5MDY4Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3220#discussion_r375890683", "bodyText": "This is close, but the check really should be:\nif ( getCreationOptions().useStrictJpaCompliance()\n        && ! name.equals( entityDescriptor.getName() ) {\n    ...\n}", "author": "sebersole", "createdAt": "2020-02-06T15:10:08Z", "path": "hibernate-core/src/main/java/org/hibernate/query/hql/internal/SemanticQueryBuilder.java", "diffHunk": "@@ -894,6 +899,13 @@ public SqmRoot visitPathRoot(HqlParser.PathRootContext ctx) {\n \t\tfinal EntityDomainType entityDescriptor = getCreationContext().getJpaMetamodel().resolveHqlEntityReference(\n \t\t\t\tname\n \t\t);\n+\t\t\n+\t\tif ( name.equals( entityDescriptor.getHibernateEntityName() ) && getCreationOptions().useStrictJpaCompliance() ) {\n+\t\t\tthrow new StrictJpaComplianceViolation(\n+\t\t\t\t\t\"Encountered FQN entity name [\" + name + \"], but strict JPQL compliance was requested\",\n+\t\t\t\t\tStrictJpaComplianceViolation.Type.FQN_ENTITY_NAME\n+\t\t\t);\n+\t\t}", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "36d807f59b65606e9b9b9585b852a24fd20f06f8", "url": "https://github.com/hibernate/hibernate-orm/commit/36d807f59b65606e9b9b9585b852a24fd20f06f8", "message": "Disallow FQN as entity name in Jpa compliance mode", "committedDate": "2020-02-08T22:55:17Z", "type": "commit"}, {"oid": "36d807f59b65606e9b9b9585b852a24fd20f06f8", "url": "https://github.com/hibernate/hibernate-orm/commit/36d807f59b65606e9b9b9585b852a24fd20f06f8", "message": "Disallow FQN as entity name in Jpa compliance mode", "committedDate": "2020-02-08T22:55:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0MDAwMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3220#discussion_r376740000", "bodyText": "A little bit surprised @Nested is not allowed (seems @Test is the only expected annotation on top level). So I had to abandon my original plan to name the class to generic JpaCompliancTest to accommodate all kinds of violations.", "author": "NathanQingyangXu", "createdAt": "2020-02-08T23:01:41Z", "path": "hibernate-core/src/test/java/org/hibernate/orm/test/query/hql/JpaComplianceDisallowFQNTests.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.hibernate.orm.test.query.hql;\n+\n+import org.hibernate.orm.test.query.sqm.BaseSqmUnitTest;\n+import org.hibernate.orm.test.query.sqm.domain.Person;\n+import org.hibernate.query.sqm.StrictJpaComplianceViolation;\n+import org.hibernate.testing.orm.junit.ExpectedException;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * @author Nahtan Xu\n+ */\n+@SuppressWarnings(\"WeakerAccess\")\n+public class JpaComplianceDisallowFQNTests extends BaseSqmUnitTest {\n+\n+\t@Override\n+\tprotected boolean strictJpaCompliance() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tprotected Class[] getAnnotatedClasses() {\n+\t\treturn new Class[] { Person.class };\n+\t}\n+\n+\t@Test\n+\t@ExpectedException(StrictJpaComplianceViolation.class)\n+\tpublic void testQuery() {\n+\t\tinterpretSelect( String.format( \"select p from %s p\", Person.class.getName() ) );\n+\t}\n+\t\n+\t@Test\n+\t@ExpectedException(StrictJpaComplianceViolation.class)\n+\tpublic void testUpdate() {\n+\t\tinterpretSelect( String.format( \"update %s set numberOfToes = 0\", Person.class.getName() ) );\n+\t}\n+\t\n+\t@Test\n+\t@ExpectedException(StrictJpaComplianceViolation.class)\n+\tpublic void testDelete() {\n+\t\tinterpretSelect( String.format( \"delete %s\", Person.class.getName() ) );\n+\t}\n+\t\n+}", "originalCommit": "36d807f59b65606e9b9b9585b852a24fd20f06f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}