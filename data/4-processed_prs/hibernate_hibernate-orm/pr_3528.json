{"pr_number": 3528, "pr_title": "HHH-13058 Fix issue left join root cannot be replaced by correlated parent in subquery", "pr_createdAt": "2020-08-26T18:44:21Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3528", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNTkzMg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r480235932", "bodyText": "I'm not sure this will generate the correct HQL. Maybe this should be the following\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif ( getAlias() == null ) {\n          \n          \n            \n            \t\tif ( super.getAlias() == null ) {\n          \n      \n    \n    \n  \n\nand you should revert the other changes in this file", "author": "beikov", "createdAt": "2020-08-31T16:12:58Z", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/path/AbstractFromImpl.java", "diffHunk": "@@ -81,12 +81,7 @@ protected boolean canBeDereferenced() {\n \t@Override\n \tpublic void prepareAlias(RenderingContext renderingContext) {\n \t\tif ( getAlias() == null ) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjI4NA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r480432284", "bodyText": "I think it should be fine. I removed the getAlias() overloading method in this class (to ensure new alias is generated rather than reusing the correlated parent's alias), so both getAlias() and 'setAlias()` would be from the parent class.\nBut as you suggested, we need to revert back partially to the previous implementation for performance reason (only create new alias when the correlated root is of LEFT JOIN), then I need to reconsider the issue.", "author": "NathanQingyangXu", "createdAt": "2020-08-31T22:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNTkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MTU2Nw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r480241567", "bodyText": "IMO this should be reverted and we should specially handle the left join case instead as this kind of querying might result in worse performance for some cases. A subquery like select ... from alias.elementCollection will only use the join table in the SQL. AFAIU, the changes you are doing here will always use the owner entity table in the from clause and then join the join table.", "author": "beikov", "createdAt": "2020-08-31T16:22:31Z", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -286,52 +287,17 @@ private FromImplementor locateImplicitSelection() {\n \t\treturn implicitSelection;\n \t}\n \n-\t@SuppressWarnings({ \"unchecked\" })\n \tprivate void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderingContext) {\n \t\trenderingContext.getClauseStack().push( Clause.FROM );\n \n \t\ttry {\n \t\t\tjpaqlQuery.append( \" from \" );\n-\t\t\tString sep = \"\";\n-\t\t\tfor ( Root root : getRoots() ) {\n-\t\t\t\t( (FromImplementor) root ).prepareAlias( renderingContext );\n-\t\t\t\tjpaqlQuery.append( sep );\n-\t\t\t\tsep = \", \";\n-\t\t\t\tjpaqlQuery.append( ( (FromImplementor) root ).renderTableExpression( renderingContext ) );\n-\t\t\t}\n \n-\t\t\tfor ( Root root : getRoots() ) {\n-\t\t\t\trenderJoins( jpaqlQuery, renderingContext, root.getJoins() );\n-\t\t\t\tif ( root instanceof RootImpl ) {\n-\t\t\t\t\tSet<TreatedRoot> treats = ( (RootImpl) root ).getTreats();\n-\t\t\t\t\tfor ( TreatedRoot treat : treats ) {\n-\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, treat.getJoins() );\n-\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\trenderFetches( jpaqlQuery, renderingContext, root.getFetches() );\n-\t\t\t}\n+\t\t\tdoRenderFrom( getRoots(), jpaqlQuery, renderingContext );\n \n \t\t\tif ( isSubQuery ) {\n \t\t\t\tif ( correlationRoots != null ) {\n-\t\t\t\t\tfor ( FromImplementor<?, ?> correlationRoot : correlationRoots ) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNDA4NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r480434085", "bodyText": "yeah, that is the gist of the original implementation plan. I agree we should consider the LEFT JOIN correlated root as a special case to boost performance, though the downside is the code might be harder to read and maintain.\nWill do as you suggested. Again, this PR might involve lots of back and forth.", "author": "NathanQingyangXu", "createdAt": "2020-08-31T22:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0MTIxNQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481241215", "bodyText": "After investigation, I found HHH-14197 has different root cause so I exclude that ticket outside this PR and will create its own PR in near future.\nUpdated as your suggestion. Thanks.", "author": "NathanQingyangXu", "createdAt": "2020-09-01T15:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MTU2Nw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTg1MQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481335851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tjpaqlQuery.append( \" and (\" );\n          \n          \n            \n            \t\t\t\t\tjpaqlQuery.append( \" and \" );", "author": "beikov", "createdAt": "2020-09-01T18:09:01Z", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -341,20 +358,48 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t}\n \n \tprotected void renderWhereClause(StringBuilder jpaqlQuery, RenderingContext renderingContext) {\n-\t\tif ( getRestriction() == null ) {\n+\t\tfinal String correlationRestrictionWhereFragment = getCorrelationRestrictionsWhereFragment();\n+\t\tif ( getRestriction() == null && correlationRestrictionWhereFragment.isEmpty() ) {\n \t\t\treturn;\n \t\t}\n \n \t\trenderingContext.getClauseStack().push( Clause.WHERE );\n \t\ttry {\n-\t\t\tjpaqlQuery.append( \" where \" )\n-\t\t\t\t\t.append( ( (Renderable) getRestriction() ).render( renderingContext ) );\n+\t\t\tjpaqlQuery.append( \" where \" );\n+\t\t\tjpaqlQuery.append( correlationRestrictionWhereFragment );\n+\t\t\tif ( getRestriction() != null ) {\n+\t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n+\t\t\t\t\tjpaqlQuery.append( \" and (\" );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNzQwMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481437400", "bodyText": "My concern is without the parenthesis, there might be issue if the original SQL is 'or' compound predicate. For instance, the original SQL might be:\nwhere alias0.name = 'haha' or alias0.field1 is null\n\nthen without parenthesis, the following erroneous SQL would be created:\nwhere alias1 = alias0 and alias0.name = 'haha' or alias0.name is null\n\nNo such concern exists?", "author": "NathanQingyangXu", "createdAt": "2020-09-01T21:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzOTMwNA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481439304", "bodyText": "updated as you suggest", "author": "NathanQingyangXu", "createdAt": "2020-09-01T21:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNjA4MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481336080", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n          \n          \n            \n            \t\t\t\t\tjpaqlQuery.append( \")\" );\n          \n          \n            \n            \t\t\t\t}", "author": "beikov", "createdAt": "2020-09-01T18:09:25Z", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -341,20 +358,48 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t}\n \n \tprotected void renderWhereClause(StringBuilder jpaqlQuery, RenderingContext renderingContext) {\n-\t\tif ( getRestriction() == null ) {\n+\t\tfinal String correlationRestrictionWhereFragment = getCorrelationRestrictionsWhereFragment();\n+\t\tif ( getRestriction() == null && correlationRestrictionWhereFragment.isEmpty() ) {\n \t\t\treturn;\n \t\t}\n \n \t\trenderingContext.getClauseStack().push( Clause.WHERE );\n \t\ttry {\n-\t\t\tjpaqlQuery.append( \" where \" )\n-\t\t\t\t\t.append( ( (Renderable) getRestriction() ).render( renderingContext ) );\n+\t\t\tjpaqlQuery.append( \" where \" );\n+\t\t\tjpaqlQuery.append( correlationRestrictionWhereFragment );\n+\t\t\tif ( getRestriction() != null ) {\n+\t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n+\t\t\t\t\tjpaqlQuery.append( \" and (\" );\n+\t\t\t\t}\n+\t\t\t\tjpaqlQuery.append( ( (Renderable) getRestriction() ).render( renderingContext ) );\n+\t\t\t\tif ( !correlationRestrictionWhereFragment.isEmpty() ) {\n+\t\t\t\t\tjpaqlQuery.append( \")\" );\n+\t\t\t\t}", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzA3Nw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481337077", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, correlationRoot.getFetches() );\n          \n      \n    \n    \n  \n\nSubquery can't have fetches", "author": "beikov", "createdAt": "2020-09-01T18:11:13Z", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -318,18 +318,35 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t\t\t\t\t\tfinal FromImplementor correlationParent = correlationRoot.getCorrelationParent();\n \t\t\t\t\t\tcorrelationParent.prepareAlias( renderingContext );\n \t\t\t\t\t\tfinal String correlationRootAlias = correlationParent.getAlias();\n-\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n-\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n-\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\tif ( correlationRoot.canBeReplacedByCorrelatedParentInSubQuery() ) {\n+\t\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n+\t\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n+\t\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( sep );\n+\t\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n+\t\t\t\t\t\t\t\t\t\t.append( '.' )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n+\t\t\t\t\t\t\t\t\t\t.append( \" as \" )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n+\t\t\t\t\t\t\t\tsep = \", \";\n+\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\tcorrelationRoot.prepareAlias( renderingContext );\n \t\t\t\t\t\t\tjpaqlQuery.append( sep );\n-\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n-\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n-\t\t\t\t\t\t\t\t\t.append( '.' )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n-\t\t\t\t\t\t\t\t\t.append( \" as \" )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n \t\t\t\t\t\t\tsep = \", \";\n-\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\tjpaqlQuery.append( correlationRoot.renderTableExpression( renderingContext ) );\n+\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationRoot.getJoins() );\n+\t\t\t\t\t\t\tif ( correlationRoot instanceof Root ) {\n+\t\t\t\t\t\t\t\tSet<TreatedRoot> treats = ( (RootImpl) correlationRoot ).getTreats();\n+\t\t\t\t\t\t\t\tfor ( TreatedRoot treat : treats ) {\n+\t\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, treat.getJoins() );\n+\t\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, correlationRoot.getFetches() );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzOTA0NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481439045", "bodyText": "thanks. deleted.", "author": "NathanQingyangXu", "createdAt": "2020-09-01T21:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzEyOQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481337129", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );\n          \n      \n    \n    \n  \n\nSubquery can't have fetches", "author": "beikov", "createdAt": "2020-09-01T18:11:18Z", "path": "hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java", "diffHunk": "@@ -318,18 +318,35 @@ private void renderFromClause(StringBuilder jpaqlQuery, RenderingContext renderi\n \t\t\t\t\t\tfinal FromImplementor correlationParent = correlationRoot.getCorrelationParent();\n \t\t\t\t\t\tcorrelationParent.prepareAlias( renderingContext );\n \t\t\t\t\t\tfinal String correlationRootAlias = correlationParent.getAlias();\n-\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n-\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n-\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\tif ( correlationRoot.canBeReplacedByCorrelatedParentInSubQuery() ) {\n+\t\t\t\t\t\t\tfor ( Join<?, ?> correlationJoin : correlationRoot.getJoins() ) {\n+\t\t\t\t\t\t\t\tfinal JoinImplementor correlationJoinImpl = (JoinImplementor) correlationJoin;\n+\t\t\t\t\t\t\t\t// IMPL NOTE: reuse the sep from above!\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( sep );\n+\t\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n+\t\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n+\t\t\t\t\t\t\t\t\t\t.append( '.' )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n+\t\t\t\t\t\t\t\t\t\t.append( \" as \" )\n+\t\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n+\t\t\t\t\t\t\t\tsep = \", \";\n+\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\tcorrelationRoot.prepareAlias( renderingContext );\n \t\t\t\t\t\t\tjpaqlQuery.append( sep );\n-\t\t\t\t\t\t\tcorrelationJoinImpl.prepareAlias( renderingContext );\n-\t\t\t\t\t\t\tjpaqlQuery.append( correlationRootAlias )\n-\t\t\t\t\t\t\t\t\t.append( '.' )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAttribute().getName() )\n-\t\t\t\t\t\t\t\t\t.append( \" as \" )\n-\t\t\t\t\t\t\t\t\t.append( correlationJoinImpl.getAlias() );\n \t\t\t\t\t\t\tsep = \", \";\n-\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationJoinImpl.getJoins() );\n+\t\t\t\t\t\t\tjpaqlQuery.append( correlationRoot.renderTableExpression( renderingContext ) );\n+\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, correlationRoot.getJoins() );\n+\t\t\t\t\t\t\tif ( correlationRoot instanceof Root ) {\n+\t\t\t\t\t\t\t\tSet<TreatedRoot> treats = ( (RootImpl) correlationRoot ).getTreats();\n+\t\t\t\t\t\t\t\tfor ( TreatedRoot treat : treats ) {\n+\t\t\t\t\t\t\t\t\trenderJoins( jpaqlQuery, renderingContext, treat.getJoins() );\n+\t\t\t\t\t\t\t\t\trenderFetches( jpaqlQuery, renderingContext, treat.getFetches() );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzODk2Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3528#discussion_r481438963", "bodyText": "deleted. thanks.", "author": "NathanQingyangXu", "createdAt": "2020-09-01T21:21:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzNzEyOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "2662edf5f07d3e7cb73660634f0b02b65cc8170e", "url": "https://github.com/hibernate/hibernate-orm/commit/2662edf5f07d3e7cb73660634f0b02b65cc8170e", "message": "HHH-13058 fix issue left join root cannot be replaced by correlated parent in subquery", "committedDate": "2020-09-01T21:27:31Z", "type": "commit"}, {"oid": "2662edf5f07d3e7cb73660634f0b02b65cc8170e", "url": "https://github.com/hibernate/hibernate-orm/commit/2662edf5f07d3e7cb73660634f0b02b65cc8170e", "message": "HHH-13058 fix issue left join root cannot be replaced by correlated parent in subquery", "committedDate": "2020-09-01T21:27:31Z", "type": "forcePushed"}]}