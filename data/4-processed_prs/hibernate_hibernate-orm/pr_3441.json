{"pr_number": 3441, "pr_title": "HHH-14077  CVE-2019-14900 SQL injection issue using JPA Criteria API", "pr_createdAt": "2020-06-19T12:32:35Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3441", "timeline": [{"oid": "c58a4e4d76bb4dca32ff4f63a76753c145e0299b", "url": "https://github.com/hibernate/hibernate-orm/commit/c58a4e4d76bb4dca32ff4f63a76753c145e0299b", "message": "HHH-14077 Add test for issue", "committedDate": "2020-06-19T11:33:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NzQ1NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r442947455", "bodyText": "Any difference between\nString.format( Locale.ROOT, \"%s\", inlineLiteral );\n\nand\ninlineLiteral\n\nA little bit curious for I think this might be one of my knowledge gaps", "author": "NathanQingyangXu", "createdAt": "2020-06-19T16:51:30Z", "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "diffHunk": "@@ -34,12 +37,15 @@ public JdbcLiteralFormatterCharacterData(JavaTypeDescriptor javaTypeDescriptor,\n \tpublic String toJdbcLiteral(Object value, Dialect dialect, SharedSessionContractImplementor session) {\n \t\tfinal String literalValue = unwrap( value, String.class, session );\n \n+\t\tfinal String inlineLiteral = dialect.inlineLiteral( literalValue );\n+\n \t\tif ( isNationalized ) {\n \t\t\t// is there a standardized form for n-string literals?  This is the SQL Server syntax for sure\n-\t\t\treturn String.format( Locale.ROOT, \"n'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, NATIONALIZED_FORMAT, inlineLiteral );\n+\n \t\t}\n \t\telse {\n-\t\t\treturn String.format( Locale.ROOT, \"'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, FORMAT, inlineLiteral );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2MTMxNw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r442961317", "bodyText": "good point, I think we can avoid return String.format( Locale.ROOT, FORMAT, inlineLiteral ); and just return inlineLiteral", "author": "dreab8", "createdAt": "2020-06-19T17:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NzQ1NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwMjc5Ng==", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r443002796", "bodyText": "We can simplify the above without the usage of String.format as well. String.format is pretty slow!", "author": "NathanQingyangXu", "createdAt": "2020-06-19T19:07:06Z", "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "diffHunk": "@@ -34,12 +36,14 @@ public JdbcLiteralFormatterCharacterData(JavaTypeDescriptor javaTypeDescriptor,\n \tpublic String toJdbcLiteral(Object value, Dialect dialect, SharedSessionContractImplementor session) {\n \t\tfinal String literalValue = unwrap( value, String.class, session );\n \n+\t\tfinal String inlineLiteral = dialect.inlineLiteral( literalValue );\n+\n \t\tif ( isNationalized ) {\n \t\t\t// is there a standardized form for n-string literals?  This is the SQL Server syntax for sure\n-\t\t\treturn String.format( Locale.ROOT, \"n'%s'\", literalValue );\n-\t\t}\n-\t\telse {\n-\t\t\treturn String.format( Locale.ROOT, \"'%s'\", literalValue );\n+\t\t\treturn String.format( Locale.ROOT, NATIONALIZED_FORMAT, inlineLiteral );", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwMzQ5NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3441#discussion_r443003495", "bodyText": "I just wanna double check n'%s' was discarded as previously intentionally? Seems a little bit weird by appending n only.", "author": "NathanQingyangXu", "createdAt": "2020-06-19T19:09:06Z", "path": "hibernate-core/src/main/java/org/hibernate/type/descriptor/sql/internal/JdbcLiteralFormatterCharacterData.java", "diffHunk": "@@ -19,6 +19,8 @@\n  * @author Steve Ebersole\n  */\n public class JdbcLiteralFormatterCharacterData extends BasicJdbcLiteralFormatter {\n+\tpublic static final String NATIONALIZED_FORMAT = \"n%s\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "bfa9a9e25cc3516e2b45d37c889b5f6083968046", "url": "https://github.com/hibernate/hibernate-orm/commit/bfa9a9e25cc3516e2b45d37c889b5f6083968046", "message": "HHH-14077 CVE-2019-14900 SQL injection issue using JPA Criteria API", "committedDate": "2020-06-23T10:56:29Z", "type": "commit"}, {"oid": "749c83a29a2f767f49e347561de8ad2452adca68", "url": "https://github.com/hibernate/hibernate-orm/commit/749c83a29a2f767f49e347561de8ad2452adca68", "message": "HHH-14077 PostgreSQL, skip testLiteralProjectionAndGroupBy (PostgreSQL does not support literals in group by statement)", "committedDate": "2020-06-23T10:56:29Z", "type": "commit"}, {"oid": "749c83a29a2f767f49e347561de8ad2452adca68", "url": "https://github.com/hibernate/hibernate-orm/commit/749c83a29a2f767f49e347561de8ad2452adca68", "message": "HHH-14077 PostgreSQL, skip testLiteralProjectionAndGroupBy (PostgreSQL does not support literals in group by statement)", "committedDate": "2020-06-23T10:56:29Z", "type": "forcePushed"}]}