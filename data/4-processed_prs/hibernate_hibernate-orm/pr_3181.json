{"pr_number": 3181, "pr_title": "HHH-8776 Fix 'fetch graph' implementation", "pr_createdAt": "2020-01-23T04:23:23Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3181", "timeline": [{"oid": "b49dbae45c92c580cc7be69bad74618b34cc6dd8", "url": "https://github.com/hibernate/hibernate-orm/commit/b49dbae45c92c580cc7be69bad74618b34cc6dd8", "message": "HHH-8776 fix 'fetch graph' semantic", "committedDate": "2020-01-23T04:10:39Z", "type": "commit"}, {"oid": "e822d8f4baf398ae7793be66f0e9ee6624240fd5", "url": "https://github.com/hibernate/hibernate-orm/commit/e822d8f4baf398ae7793be66f0e9ee6624240fd5", "message": "HHH-8776 fix check style issue", "committedDate": "2020-01-23T12:39:51Z", "type": "commit"}, {"oid": "222b208cfeee2fbab26088ecae92add31da34dbc", "url": "https://github.com/hibernate/hibernate-orm/commit/222b208cfeee2fbab26088ecae92add31da34dbc", "message": "HHH-8776 add testing cases to prove 'fetch graph' takes precedence over 'fetch profile'", "committedDate": "2020-01-24T03:31:47Z", "type": "commit"}, {"oid": "4012e08d42c7a412284b739b1aad36f4f551a070", "url": "https://github.com/hibernate/hibernate-orm/commit/4012e08d42c7a412284b739b1aad36f4f551a070", "message": "HHH-8776 add more 'final' keywords to align with existing coding style", "committedDate": "2020-01-24T19:28:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTk4Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3181#discussion_r372595982", "bodyText": "I don't understand this comment.  Did you mean to remove the debugf parameters maybe?", "author": "sebersole", "createdAt": "2020-01-29T19:50:04Z", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -367,38 +376,62 @@ public static void afterInitialize(\n \t}\n \n \t/**\n-\t * Check if eager of the association is overriden by anything.\n+\t * Check if eager of the association is overridden (i.e. skipping metamodel strategy), including (order sensitive):\n+\t * <ol>\n+\t *     <li>fetch graph</li>\n+\t *     <li>fetch profile</li>\n+\t * </ol>\n \t *\n \t * @param session session\n \t * @param entityName entity name\n \t * @param associationName association name\n-\t *\n+\t * @param associationType association type\n+\t * @param isDebugEnabled if debug log level enabled\n \t * @return null if there is no overriding, true if it is overridden to eager and false if it is overridden to lazy\n \t */\n \tprivate static Boolean getOverridingEager(\n \t\t\tfinal SharedSessionContractImplementor session,\n \t\t\tfinal String entityName,\n \t\t\tfinal String associationName,\n-\t\t\tfinal Type type,\n+\t\t\tfinal Type associationType,\n \t\t\tfinal boolean isDebugEnabled) {\n \t\t// Performance: check type.isCollectionType() first, as type.isAssociationType() is megamorphic\n-\t\tif ( type.isCollectionType() || type.isAssociationType()  ) {\n-\t\t\tfinal Boolean overridingEager = isEagerFetchProfile( session, entityName, associationName );\n+\t\tif ( associationType.isCollectionType() || associationType.isAssociationType()  ) {\n+\n+\t\t\t// check 'fetch graph' first; skip 'fetch profile' if 'fetch graph' takes effect\n+\t\t\tBoolean overridingEager = isEagerFetchGraph( session, associationName, associationType );\n \n-\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.\n-\t\t\tif ( isDebugEnabled ) {\n-\t\t\t\tif ( overridingEager != null ) {\n+\t\t\tif ( overridingEager != null ) {\n+\t\t\t\t//This method is very hot, and private so let's piggy back on the fact that the caller already knows the debugging state.", "originalCommit": "4012e08d42c7a412284b739b1aad36f4f551a070", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5Njc2OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3181#discussion_r372596769", "bodyText": "Oh, nm.. you  did not add that", "author": "sebersole", "createdAt": "2020-01-29T19:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTk4Mg=="}], "type": "inlineReview"}]}