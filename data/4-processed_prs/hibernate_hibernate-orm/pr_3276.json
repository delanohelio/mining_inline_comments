{"pr_number": 3276, "pr_title": "Wip/6.0 Various cosmetic code improvements", "pr_createdAt": "2020-03-01T16:17:16Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3276", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMDYxNQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386120615", "bodyText": "we don't need key checking when we simply wanna remove it, regardless of whether it exists or not.", "author": "NathanQingyangXu", "createdAt": "2020-03-01T16:19:11Z", "path": "hibernate-core/src/main/java/org/hibernate/boot/internal/InFlightMetadataCollectorImpl.java", "diffHunk": "@@ -688,7 +688,7 @@ public void applyResultSetMapping(NamedResultSetMappingDefinition resultSetMappi\n \t@Override\n \tpublic void addDefaultResultSetMapping(NamedResultSetMappingDefinition definition) {\n \t\tfinal String name = definition.getRegistrationName();\n-\t\tif ( !defaultSqlResultSetMappingNames.contains( name ) && sqlResultSetMappingMap.containsKey( name ) ) {\n+\t\tif ( !defaultSqlResultSetMappingNames.contains( name ) ) {\n \t\t\tsqlResultSetMappingMap.remove( name );", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMDc5Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386120793", "bodyText": "We don't need nullness checking for either instanceof or Class#isInstance() will take care of that already", "author": "NathanQingyangXu", "createdAt": "2020-03-01T16:21:37Z", "path": "hibernate-core/src/main/java/org/hibernate/context/internal/ThreadLocalSessionContext.java", "diffHunk": "@@ -111,7 +111,7 @@ private boolean needsWrapping(Session session) {\n \t\t// try to make sure we don't wrap and already wrapped session\n \t\tif ( Proxy.isProxyClass( session.getClass() ) ) {\n \t\t\tfinal InvocationHandler invocationHandler = Proxy.getInvocationHandler( session );\n-\t\t\tif ( invocationHandler != null && TransactionProtectionWrapper.class.isInstance( invocationHandler ) ) {\n+\t\t\tif ( TransactionProtectionWrapper.class.isInstance( invocationHandler ) ) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMDk3NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386120975", "bodyText": "JDK8's method reference can simplify our code clutter dramatically", "author": "NathanQingyangXu", "createdAt": "2020-03-01T16:24:35Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/function/TimestampaddFunction.java", "diffHunk": "@@ -90,8 +90,7 @@ public SelfRenderingFunctionSqlAstExpression expression(\n \t\t\tSqlAstNode... sqlAstArguments) {\n \t\tExpression to = (Expression) sqlAstArguments[2];\n \t\treturn new SelfRenderingFunctionSqlAstExpression(\n-\t\t\t\t(sqlAppender, sqlAstArguments1, walker)\n-\t\t\t\t\t\t-> render(sqlAppender, sqlAstArguments1, walker),\n+\t\t\t\tthis::render,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMzMyOA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386133328", "bodyText": "Seems there is no reason to use putIfAbsent. put should be enough for initial map population.", "author": "NathanQingyangXu", "createdAt": "2020-03-01T19:23:09Z", "path": "hibernate-core/src/main/java/org/hibernate/internal/FastSessionServices.java", "diffHunk": "@@ -221,11 +221,11 @@ private static boolean isTransactionAccessible(SessionFactoryImpl sf, Transactio\n \t\tHashMap<String,Object> p = new HashMap<>();\n \n \t\t//Static defaults:\n-\t\tp.putIfAbsent( AvailableSettings.FLUSH_MODE, FlushMode.AUTO.name() );\n-\t\tp.putIfAbsent( JPA_LOCK_SCOPE, PessimisticLockScope.EXTENDED.name() );\n-\t\tp.putIfAbsent( JPA_LOCK_TIMEOUT, LockOptions.WAIT_FOREVER );\n-\t\tp.putIfAbsent( JPA_SHARED_CACHE_RETRIEVE_MODE, CacheModeHelper.DEFAULT_RETRIEVE_MODE );\n-\t\tp.putIfAbsent( JPA_SHARED_CACHE_STORE_MODE, CacheModeHelper.DEFAULT_STORE_MODE );\n+\t\tp.put( AvailableSettings.FLUSH_MODE, FlushMode.AUTO.name() );\n+\t\tp.put( JPA_LOCK_SCOPE, PessimisticLockScope.EXTENDED.name() );\n+\t\tp.put( JPA_LOCK_TIMEOUT, LockOptions.WAIT_FOREVER );\n+\t\tp.put( JPA_SHARED_CACHE_RETRIEVE_MODE, CacheModeHelper.DEFAULT_RETRIEVE_MODE );\n+\t\tp.put( JPA_SHARED_CACHE_STORE_MODE, CacheModeHelper.DEFAULT_STORE_MODE );", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzU3MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386307570", "bodyText": "just my personal opinion but not sure this helps code readability", "author": "dreab8", "createdAt": "2020-03-02T10:22:57Z", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java", "diffHunk": "@@ -408,7 +408,7 @@ public Object getEntity(EntityKey key) {\n \n \t@Override\n \tpublic boolean containsEntity(EntityKey key) {\n-\t\treturn entitiesByKey == null ? false : entitiesByKey.containsKey( key );\n+\t\treturn entitiesByKey != null && entitiesByKey.containsKey( key );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3ODU0Ng==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386378546", "bodyText": "I copied the suggestion by Intellij IDE and I think its suggestion does make sense in this case. If you think the code change is unnecessary, I can revert it back.", "author": "NathanQingyangXu", "createdAt": "2020-03-02T13:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386307721", "bodyText": "just my personal opinion but not sure this helps code readability", "author": "dreab8", "createdAt": "2020-03-02T10:23:16Z", "path": "hibernate-core/src/main/java/org/hibernate/cfg/AbstractPropertyHolder.java", "diffHunk": "@@ -134,7 +134,7 @@ protected ConverterDescriptor makeAttributeConverterDescriptor(AttributeConversi\n \n \t@Override\n \tpublic boolean isInIdClass() {\n-\t\treturn isInIdClass != null ? isInIdClass : parent != null ? parent.isInIdClass() : false;\n+\t\treturn isInIdClass != null ? isInIdClass : ( parent != null && parent.isInIdClass() );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0Njg4MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386346880", "bodyText": "FWIW I think using && instead of a nested ?: is a lot more readable. However, the parens are unnecessary. ?: has a lower precedence than &&, so I would write:\nreturn isInIdClass != null ? isInIdClass : parent != null && parent.isInIdClass();", "author": "gavinking", "createdAt": "2020-03-02T11:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MTYwNQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386351605", "bodyText": "what about using  an If statement instead?\nif ( isInIdClass != null ) {\n   return isInIdClass;\n}\nelse if ( parent != null ) {\n   return parent.isInIdClass();\n}\nelse {\n   return false;\n}", "author": "dreab8", "createdAt": "2020-03-02T11:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NDgyNw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386374827", "bodyText": "FWIW I think using && instead of a nested ?: is a lot more readable. However, the parens are unnecessary. ?: has a lower precedence than &&, so I would write:\nreturn isInIdClass != null ? isInIdClass : parent != null && parent.isInIdClass();\n\nYeah, technically we don't need parenthesis. I used it to improve the 'perceived complexity' from human code reader. I agree with you generally speaking && is better, but in this case I think Andrea's suggestion makes sense and I accepted his suggestion.", "author": "NathanQingyangXu", "createdAt": "2020-03-02T12:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4Mzk0NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3276#discussion_r386383945", "bodyText": "IMO as soon as the ternary becomes in any way \"non-simple\" we ought to use if/else.  So I agree with Andrea's suggestion as well.", "author": "sebersole", "createdAt": "2020-03-02T13:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNzcyMQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "331a00fe003cad5f2f01f07b447218f63489ac6e", "url": "https://github.com/hibernate/hibernate-orm/commit/331a00fe003cad5f2f01f07b447218f63489ac6e", "message": "various cosmetic code improvements", "committedDate": "2020-03-18T15:11:20Z", "type": "commit"}, {"oid": "331a00fe003cad5f2f01f07b447218f63489ac6e", "url": "https://github.com/hibernate/hibernate-orm/commit/331a00fe003cad5f2f01f07b447218f63489ac6e", "message": "various cosmetic code improvements", "committedDate": "2020-03-18T15:11:20Z", "type": "forcePushed"}]}