{"pr_number": 3583, "pr_title": "HHH 14241 Support ImplicitNamingStrategyComponentPathImpl with IdClass", "pr_createdAt": "2020-10-05T20:11:18Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3583", "timeline": [{"oid": "d651714fd926e534c451c20b9b1ada40531ea6a5", "url": "https://github.com/hibernate/hibernate-orm/commit/d651714fd926e534c451c20b9b1ada40531ea6a5", "message": "HHH-14241 Test ImplicitNamingStrategyComponentPathImpl with IdClass", "committedDate": "2020-10-05T18:06:57Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMDA3Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501230073", "bodyText": "I remember we have discussed the bad performance of xxx.equals( \"\" ) and @Sanne has created a util method to avoid it. We can simply use StringHelper.isNotEmpty( parent.getProperty ) here after parent's nullness checking.", "author": "NathanQingyangXu", "createdAt": "2020-10-07T18:37:36Z", "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "diffHunk": "@@ -30,14 +31,17 @@ protected String transformAttributePath(AttributePath attributePath) {\n \t}\n \n \tpublic static void process(AttributePath attributePath, StringBuilder sb) {\n-\t\tif ( attributePath.getParent() != null ) {\n-\t\t\tprocess( attributePath.getParent(), sb );\n-\t\t\tif ( StringHelper.isNotEmpty( attributePath.getParent().getProperty() ) ) {\n-\t\t\t\tsb.append( '_' );\n-\t\t\t}\n-\t\t}\n-\n \t\tString property = attributePath.getProperty();\n+\t\tfinal AttributePath parent = attributePath.getParent();\n+\t\tif ( parent != null && !parent.getProperty().equals( \"\" ) ) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMTE4OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501231189", "bodyText": "see #3491", "author": "NathanQingyangXu", "createdAt": "2020-10-07T18:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMDA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1OTUwMQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501259501", "bodyText": "Yes, that was burried in my comment at #3583 (comment) but I completely agree it should use #isNotEmpty", "author": "sebersole", "createdAt": "2020-10-07T19:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMDA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMTg4OA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501231888", "bodyText": "It would be great to avoid TAB and space mixture for the above comments to avoid inconsistent presenting. The above is a good example.", "author": "NathanQingyangXu", "createdAt": "2020-10-07T18:40:50Z", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/IdClassNamingStrategyTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl;\n+import org.hibernate.cfg.Configuration;\n+\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Test;\n+\n+public class IdClassNamingStrategyTest extends BaseCoreFunctionalTestCase {\n+\n+\t@Override\n+\tprotected Class<?>[] getAnnotatedClasses() {\n+\t\treturn new Class<?>[] { MyEntity.class };\n+\t}\n+\n+\t@Override\n+\tprotected void configure(Configuration configuration) {\n+\t\t/*\n+\t\t * With this implicit naming strategy, we got the following mapping:\n+\t\t *\n+\t\t * create table MyEntity (\n+         *   id_idA bigint not null,\n+         *   id_idB bigint not null,\n+         *   _identifierMapper_idA bigint not null, <-- ??\n+         *   _identifierMapper_idB bigint not null, <-- ??\n+         *   notes varchar(255),\n+         *   primary key (id_idA, id_idB)\n+         * )\n+\t\t */\n+\t\tconfiguration.setImplicitNamingStrategy( new ImplicitNamingStrategyComponentPathImpl() );", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMjE4Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501232182", "bodyText": "We'd better add @TestForIssue annotation above", "author": "NathanQingyangXu", "createdAt": "2020-10-07T18:41:21Z", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/IdClassNamingStrategyTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl;\n+import org.hibernate.cfg.Configuration;\n+\n+import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n+import org.junit.Test;\n+\n+public class IdClassNamingStrategyTest extends BaseCoreFunctionalTestCase {\n+\n+\t@Override\n+\tprotected Class<?>[] getAnnotatedClasses() {\n+\t\treturn new Class<?>[] { MyEntity.class };\n+\t}\n+\n+\t@Override\n+\tprotected void configure(Configuration configuration) {\n+\t\t/*\n+\t\t * With this implicit naming strategy, we got the following mapping:\n+\t\t *\n+\t\t * create table MyEntity (\n+         *   id_idA bigint not null,\n+         *   id_idB bigint not null,\n+         *   _identifierMapper_idA bigint not null, <-- ??\n+         *   _identifierMapper_idB bigint not null, <-- ??\n+         *   notes varchar(255),\n+         *   primary key (id_idA, id_idB)\n+         * )\n+\t\t */\n+\t\tconfiguration.setImplicitNamingStrategy( new ImplicitNamingStrategyComponentPathImpl() );\n+\t}\n+\n+\t@Test\n+\tpublic void test() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMjgzNw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501232837", "bodyText": "I am wondering why the above is not new MyEntityId( idA, idB ), which seems counter-intuitive and confusing.", "author": "NathanQingyangXu", "createdAt": "2020-10-07T18:42:33Z", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/MyEntity.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+\n+@Entity\n+@IdClass( MyEntityId.class )\n+public class MyEntity {\n+\n+\t@Id\n+\tprivate Long idA;\n+\n+\t@Id\n+\tprivate Long idB;\n+\n+\tprivate String notes;\n+\n+\tpublic MyEntityId getId() {\n+\t\treturn new MyEntityId( idB, idA );", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzUxMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501233510", "bodyText": "It would be good practise to use package default visibility (remove public above) for these classes are only used by the testing case within the same package.", "author": "NathanQingyangXu", "createdAt": "2020-10-07T18:43:49Z", "path": "hibernate-core/src/test/java/org/hibernate/id/idclass/MyEntityId.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Hibernate, Relational Persistence for Idiomatic Java\n+ *\n+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later.\n+ * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.\n+ */\n+package org.hibernate.id.idclass;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+public class MyEntityId implements Serializable {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2ODUwMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501268500", "bodyText": "I prefer leaving this as-is", "author": "jrenaat", "createdAt": "2020-10-07T19:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNTA5MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501235090", "bodyText": "There must be a more efficient way to replace the above two statements with one without much performance cost, though I am not able to find one in our existing classes (StringUtils from apache commons seems forbidden).", "author": "NathanQingyangXu", "createdAt": "2020-10-07T18:46:40Z", "path": "hibernate-core/src/main/java/org/hibernate/boot/model/naming/ImplicitNamingStrategyComponentPathImpl.java", "diffHunk": "@@ -30,14 +31,17 @@ protected String transformAttributePath(AttributePath attributePath) {\n \t}\n \n \tpublic static void process(AttributePath attributePath, StringBuilder sb) {\n-\t\tif ( attributePath.getParent() != null ) {\n-\t\t\tprocess( attributePath.getParent(), sb );\n-\t\t\tif ( StringHelper.isNotEmpty( attributePath.getParent().getProperty() ) ) {\n-\t\t\t\tsb.append( '_' );\n-\t\t\t}\n-\t\t}\n-\n \t\tString property = attributePath.getProperty();\n+\t\tfinal AttributePath parent = attributePath.getParent();\n+\t\tif ( parent != null && !parent.getProperty().equals( \"\" ) ) {\n+\t\t\tprocess( parent, sb );\n+\t\t\tsb.append( '_' );\n+\t\t}\n+\t\telse if ( PropertyPath.IDENTIFIER_MAPPER_PROPERTY.equals( property ) ) {\n+\t\t\t// skip it, do not pass go\n+\t\t\tsb.append( \"id\" );\n+\t\t\treturn;\n+\t\t}\n \t\tproperty = property.replace( \"<\", \"\" );\n \t\tproperty = property.replace( \">\", \"\" );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1NzU1Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3583#discussion_r501257552", "bodyText": "Unless I am mistaken, the '<' and '>' can only occur as the first and last in the prop-name.  Direct access to the underlying char array is usually quite fast -\nif ( property.charAt( 0 ) == '<' && property.charAt( property.length() -1 ) == '>' ) {\n    property = property.substring( ... );\n}", "author": "sebersole", "createdAt": "2020-10-07T19:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNTA5MA=="}], "type": "inlineReview"}, {"oid": "30a0d73c5e88d47301228acf2fe297ae4db32c28", "url": "https://github.com/hibernate/hibernate-orm/commit/30a0d73c5e88d47301228acf2fe297ae4db32c28", "message": "HHH-14241 Support ImplicitNamingStrategyComponentPathImpl with IdClass\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-10-07T19:53:02Z", "type": "commit"}, {"oid": "30a0d73c5e88d47301228acf2fe297ae4db32c28", "url": "https://github.com/hibernate/hibernate-orm/commit/30a0d73c5e88d47301228acf2fe297ae4db32c28", "message": "HHH-14241 Support ImplicitNamingStrategyComponentPathImpl with IdClass\n\nSigned-off-by: Jan Schatteman <jschatte@redhat.com>", "committedDate": "2020-10-07T19:53:02Z", "type": "forcePushed"}]}