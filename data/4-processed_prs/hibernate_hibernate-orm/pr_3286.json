{"pr_number": 3286, "pr_title": "HHH-13891 : ProxyFactory should not be built if any ID or property getter/setter methods are final", "pr_createdAt": "2020-03-07T00:55:08Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3286", "timeline": [{"oid": "14ab46663b6d07cbb43921684caca08fe0b0f0dd", "url": "https://github.com/hibernate/hibernate-orm/commit/14ab46663b6d07cbb43921684caca08fe0b0f0dd", "message": "HHH-13891 : Added test", "committedDate": "2020-03-07T00:48:31Z", "type": "commit"}, {"oid": "c48caafadbf0c8fbba17871ed96307091cc4b966", "url": "https://github.com/hibernate/hibernate-orm/commit/c48caafadbf0c8fbba17871ed96307091cc4b966", "message": "HHH-13891 : ProxyFactory should not be built if any ID or property getter/setter methods are final", "committedDate": "2020-03-07T00:50:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NTUzMw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3286#discussion_r389395533", "bodyText": "It seems getterOrSetter parameter is not necessary for we can get that information if we refactor the method to accept either Getter or Setter only. For instance\nprivate static void validateGetterSetterMethodProxyability(Object getterOrSetter ) {\n                String methodCategory = getterOrSetter instanceof Getter ? \"Getter\" : \"Setter\";\n                Method method = getterOrSetter instanceof Getter ? Getter.class.cast(getterOrSetter).getMethod(): Setter.class.cast(getterOrSetter).getMethod();\n\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n\t\t\tthrow new HibernateException(\n\t\t\t\t\tString.format(\n\t\t\t\t\t\t\t\"%s methods of lazy classes cannot be final: %s#%s\",\n\t\t\t\t\t\t\tmethodCategory,\n\t\t\t\t\t\t\tmethod.getDeclaringClass().getName(),\n\t\t\t\t\t\t\tmethod.getName()\n\t\t\t\t\t)\n\t\t\t);\n\nI also changed the visibility from public to private above. If Getter and Setter shared some common interface (like methodAware), it would be more elegant and straightforward.\nnot a big deal for sure and feel free to ignore my comment.", "author": "NathanQingyangXu", "createdAt": "2020-03-08T18:54:40Z", "path": "hibernate-core/src/main/java/org/hibernate/proxy/pojo/ProxyFactoryHelper.java", "diffHunk": "@@ -84,14 +85,21 @@ public static void validateProxyability(final PersistentClass persistentClass) {\n \t\tClass clazz = persistentClass.getMappedClass();\n \t\twhile ( properties.hasNext() ) {\n \t\t\tProperty property = (Property) properties.next();\n-\t\t\tMethod method = property.getGetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.gettersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n-\t\t\tmethod = property.getSetter( clazz ).getMethod();\n-\t\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n-\t\t\t\tLOG.settersOfLazyClassesCannotBeFinal( persistentClass.getEntityName(), property.getName() );\n-\t\t\t}\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Getter\", property.getGetter( clazz ).getMethod() );\n+\t\t\tvalidateGetterSetterMethodProxyability( \"Setter\", property.getSetter( clazz ).getMethod() );\n+\t\t}\n+\t}\n+\n+\tpublic static void validateGetterSetterMethodProxyability(String getterOrSetter, Method method ) {\n+\t\tif ( method != null && Modifier.isFinal( method.getModifiers() ) ) {\n+\t\t\tthrow new HibernateException(\n+\t\t\t\t\tString.format(\n+\t\t\t\t\t\t\t\"%s methods of lazy classes cannot be final: %s#%s\",\n+\t\t\t\t\t\t\tgetterOrSetter,\n+\t\t\t\t\t\t\tmethod.getDeclaringClass().getName(),\n+\t\t\t\t\t\t\tmethod.getName()\n+\t\t\t\t\t)\n+\t\t\t);", "originalCommit": "c48caafadbf0c8fbba17871ed96307091cc4b966", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODgwNw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3286#discussion_r390008807", "bodyText": "@NathanQingyangXu , PojoEntityTuplizer#buildProxyFactory also calls `ProxyFactoryHelper#validateGetterSetterMethodProxyability```, so it needs to be public.\nOf course, ProxyFactoryHelper#validateProxyability could have repeated the call to ProxyFactoryHelper#extractProxyGetIdentifierMethod, but then I would have to change the signature of the method to accept a Setter and a Getter.\nSince ProxyFactoryHelper is an SPI, I would need to deprecate the original method. It just didn't seem worthwhile.\nI just did what I thought would have the smallest impact.", "author": "gbadner", "createdAt": "2020-03-09T23:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NTUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxODE3NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3286#discussion_r390018175", "bodyText": "thanks for the explanation", "author": "NathanQingyangXu", "createdAt": "2020-03-09T23:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NTUzMw=="}], "type": "inlineReview"}]}