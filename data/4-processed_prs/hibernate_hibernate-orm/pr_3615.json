{"pr_number": 3615, "pr_title": "HHH-13310 getParameterValue() not working for collections", "pr_createdAt": "2020-10-29T13:34:59Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3615", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3OTY5NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514279695", "bodyText": "Not a fan of passing these Strings.  We incur the overhead of building them regardless of whether they are used or not.  The pattern I've adopted to deal with situations like this (allowing callers to handle exceptional cases) is to pass along functional interfaces.  Here e.g. instead of\n\t\treturn (T) getParameterValue(\n\t\t\t\t(QueryParameter) parameter,\n\t\t\t\tnotBoundErrorMessage,\n\t\t\t\tcouldNotResolveErrorMessage,\n\t\t\t\tboundCheckingLogMessage\n\t\t);\n\nI'd use something like:\n\t\treturn (T) getParameterValue(\n\t\t\t\t(QueryParameter) parameter,\n\t\t\t\t() -> new IllegalStateException( \"Parameter value not yet bound : \" + name ),\n\t\t\t\t() -> new IllegalArgumentException( \"Could not resolve parameter by name - \" + name, e ),\n\t\t\t\t...\n\t\t);\n\nAlso not generally a fan of mixing String concatenation and formatting.  Especially in the same String", "author": "sebersole", "createdAt": "2020-10-29T13:59:22Z", "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n ", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NzQzNA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514347434", "bodyText": "Thanks Steve, I'm going to apply your suggestions \ud83d\udc4d", "author": "dreab8", "createdAt": "2020-10-29T15:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3OTY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MDAwNQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514290005", "bodyText": "The A in the name is irrelevant.  The name should be #isParameterList.  But personally I like #isMultiValuedBinding  better", "author": "sebersole", "createdAt": "2020-10-29T14:13:00Z", "path": "hibernate-core/src/main/java/org/hibernate/query/spi/QueryParameterBindings.java", "diffHunk": "@@ -35,4 +35,12 @@\n \tType[] collectPositionalBindTypes();\n \tObject[] collectPositionalBindValues();\n \tMap<String,TypedValue> collectNamedParameterBindings();\n+\n+\t/**\n+\t * @deprecated expect a different approach to org.hibernate.engine.spi.QueryParameters in 6.0\n+\t */\n+\t@Deprecated\n+\tdefault boolean isAParameterList(QueryParameter parameter) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0Nzg1Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514347853", "bodyText": "I like isMultiValuedBinding, going to change it. Thanks", "author": "dreab8", "createdAt": "2020-10-29T15:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MDAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxNzA4OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514317089", "bodyText": "Do we have inconsistent whitespace usage issue above? The content might cease to align vertically correctly if we change the tab size.", "author": "NathanQingyangXu", "createdAt": "2020-10-29T14:47:28Z", "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n \n-\t\tfinal QueryParameterBinding<T> binding = getQueryParameterBindings().getBinding( (QueryParameter<T>) parameter );\n-\t\tLOGGER.debugf( \"Checking whether parameter reference [%s] is bound : %s\", parameter, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + parameter.toString() );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\treturn (T) getParameterValue(\n+\t\t\t\t(QueryParameter) parameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMTI0OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514321249", "bodyText": "The issue is exemplified by the following screenshot (in https://github.com/hibernate/hibernate-orm/blob/wip/6.0/hibernate-core/src/main/antlr/org/hibernate/grammars/hql/HqlParser.g4):", "author": "NathanQingyangXu", "createdAt": "2020-10-29T14:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxNzA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0Nzk3MQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514347971", "bodyText": "not sure, in IJ it looks fine", "author": "dreab8", "createdAt": "2020-10-29T15:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxNzA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMjI1MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514322250", "bodyText": "Seems the exception is not related to the method parameter. IllegalStatementException is more appropriate?", "author": "NathanQingyangXu", "createdAt": "2020-10-29T14:53:57Z", "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n \n-\t\tfinal QueryParameterBinding<T> binding = getQueryParameterBindings().getBinding( (QueryParameter<T>) parameter );\n-\t\tLOGGER.debugf( \"Checking whether parameter reference [%s] is bound : %s\", parameter, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + parameter.toString() );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\treturn (T) getParameterValue(\n+\t\t\t\t(QueryParameter) parameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(String name) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n-\t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( name );\n-\t\t}\n-\t\tcatch (QueryParameterException e) {\n-\t\t\tthrow new IllegalArgumentException( \"Could not resolve parameter by name - \" + name, e );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + name;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by name - \" + name;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether named parameter [ \" + name + \"] is bound : %s\";\n \n-\t\tLOGGER.debugf( \"Checking whether named parameter [%s] is bound : %s\", name, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + name );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( name );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(int position) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + position;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by position - \" + position;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether positional parameter [ \" + position + \"] is bound : %s\";\n+\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( position );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n+\t}\n+\n+\tprivate Object getParameterValue(\n+\t\t\tQueryParameter queryParameter,\n+\t\t\tString notBoundErrorMessage,\n+\t\t\tString couldNotResolveErrorMessage,\n+\t\t\tString boundCheckingLogMessage) {\n \t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( position );\n+\t\t\tfinal QueryParameterBindings parameterBindings = getQueryParameterBindings();\n+\n+\t\t\tif ( queryParameter == null ) {\n+\t\t\t\tthrow new IllegalArgumentException( couldNotResolveErrorMessage );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1NjkzOA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514356938", "bodyText": "if this happens then we were not able to resolve the parameter, that is the argument of the method, plus to to be consistent with what we had before an IllegalArgumentException seems correct to me.", "author": "dreab8", "createdAt": "2020-10-29T15:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMjI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzgwNg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514323806", "bodyText": "We should pay attention to the performance cost for the above statement as well. The first parameter building cost will be paid even when we disable debug level logging!", "author": "NathanQingyangXu", "createdAt": "2020-10-29T14:55:42Z", "path": "hibernate-core/src/main/java/org/hibernate/query/internal/AbstractProducedQuery.java", "diffHunk": "@@ -749,57 +749,86 @@ public boolean isBound(Parameter<?> parameter) {\n \t@Override\n \tpublic <T> T getParameterValue(Parameter<T> parameter) {\n \t\tLOGGER.tracef( \"#getParameterValue(%s)\", parameter );\n-\n \t\tgetProducer().checkOpen( false );\n \n-\t\tif ( !getParameterMetadata().containsReference( (QueryParameter) parameter ) ) {\n-\t\t\tthrow new IllegalArgumentException( \"Parameter reference [\" + parameter + \"] did not come from this query\" );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + parameter.toString();\n+\t\tfinal String couldNotResolveErrorMessage = \"Parameter reference [\" + parameter + \"] did not come from this query\";\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether parameter reference \" + parameter + \" is bound : %s\";\n \n-\t\tfinal QueryParameterBinding<T> binding = getQueryParameterBindings().getBinding( (QueryParameter<T>) parameter );\n-\t\tLOGGER.debugf( \"Checking whether parameter reference [%s] is bound : %s\", parameter, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + parameter.toString() );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\treturn (T) getParameterValue(\n+\t\t\t\t(QueryParameter) parameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(String name) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n-\t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( name );\n-\t\t}\n-\t\tcatch (QueryParameterException e) {\n-\t\t\tthrow new IllegalArgumentException( \"Could not resolve parameter by name - \" + name, e );\n-\t\t}\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + name;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by name - \" + name;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether named parameter [ \" + name + \"] is bound : %s\";\n \n-\t\tLOGGER.debugf( \"Checking whether named parameter [%s] is bound : %s\", name, binding.isBound() );\n-\t\tif ( !binding.isBound() ) {\n-\t\t\tthrow new IllegalStateException( \"Parameter value not yet bound : \" + name );\n-\t\t}\n-\t\treturn binding.getBindValue();\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( name );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n \t}\n \n \t@Override\n \tpublic Object getParameterValue(int position) {\n \t\tgetProducer().checkOpen( false );\n \n-\t\tfinal QueryParameterBinding binding;\n+\t\tfinal String notBoundErrorMessage = \"Parameter value not yet bound : \" + position;\n+\t\tfinal String couldNotResolveErrorMessage = \"Could not resolve parameter by position - \" + position;\n+\t\tfinal String boundCheckingLogMessage = \"Checking whether positional parameter [ \" + position + \"] is bound : %s\";\n+\n+\t\tfinal QueryParameter<Object> queryParameter = getParameterMetadata().getQueryParameter( position );\n+\t\treturn getParameterValue(\n+\t\t\t\tqueryParameter,\n+\t\t\t\tnotBoundErrorMessage,\n+\t\t\t\tcouldNotResolveErrorMessage,\n+\t\t\t\tboundCheckingLogMessage\n+\t\t);\n+\t}\n+\n+\tprivate Object getParameterValue(\n+\t\t\tQueryParameter queryParameter,\n+\t\t\tString notBoundErrorMessage,\n+\t\t\tString couldNotResolveErrorMessage,\n+\t\t\tString boundCheckingLogMessage) {\n \t\ttry {\n-\t\t\tbinding = getQueryParameterBindings().getBinding( position );\n+\t\t\tfinal QueryParameterBindings parameterBindings = getQueryParameterBindings();\n+\n+\t\t\tif ( queryParameter == null ) {\n+\t\t\t\tthrow new IllegalArgumentException( couldNotResolveErrorMessage );\n+\t\t\t}\n+\t\t\tif ( parameterBindings.isAParameterList( queryParameter ) ) {\n+\t\t\t\tfinal QueryParameterListBinding<Object> queryParameterListBinding = parameterBindings\n+\t\t\t\t\t\t.getQueryParameterListBinding( queryParameter );\n+\t\t\t\tfinal Collection<Object> bindValues = queryParameterListBinding.getBindValues();\n+\t\t\t\tif ( bindValues == null ) {\n+\t\t\t\t\tthrow new IllegalStateException( notBoundErrorMessage );\n+\t\t\t\t}\n+\t\t\t\treturn bindValues;\n+\t\t\t}\n+\n+\t\t\tfinal QueryParameterBinding<Object> binding = parameterBindings.getBinding( queryParameter );\n+\t\t\tfinal boolean bound = binding.isBound();\n+\t\t\tLOGGER.debugf( boundCheckingLogMessage, bound );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1MTM1Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514351352", "bodyText": "Thanks @NathanQingyangXu ,I'll try to fix this.", "author": "dreab8", "createdAt": "2020-10-29T15:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMzgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNTM1MQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514325351", "bodyText": "Again, personally I think the following is more readable:\nreturn parameterListBindingMap != null && parameterListBindingMap.containsKey( parameter );", "author": "NathanQingyangXu", "createdAt": "2020-10-29T14:57:31Z", "path": "hibernate-core/src/main/java/org/hibernate/query/internal/QueryParameterBindingsImpl.java", "diffHunk": "@@ -317,6 +317,14 @@ public void verifyParametersBound(boolean reserveFirstParameter) {\n //\t\treturn values.toArray( new Object[values.size()] );\n \t}\n \n+\t@Override\n+\tpublic boolean isAParameterList(QueryParameter parameter) {\n+\t\tif ( parameterListBindingMap == null ) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn parameterListBindingMap.containsKey( parameter );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1MDc5Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514350793", "bodyText": "sorry but I find easier to read/understand the if statement, but it is my personal opinion :).", "author": "dreab8", "createdAt": "2020-10-29T15:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNTM1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxMzEwOQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3615#discussion_r514413109", "bodyText": "This is always going to be opinion based and to a large degree location based.  For example, I personally almost always find these kind of \"waterfall\" boolean checks to be more readable.", "author": "sebersole", "createdAt": "2020-10-29T16:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNTM1MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3fc14b9517539d8b079ccaaf9034bd49a990fe9c", "url": "https://github.com/hibernate/hibernate-orm/commit/3fc14b9517539d8b079ccaaf9034bd49a990fe9c", "message": "HHH-13310 Add test for issue", "committedDate": "2020-11-02T11:07:51Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "21b95781845217dded4a4ff3b7dab8aedcb96f00", "url": "https://github.com/hibernate/hibernate-orm/commit/21b95781845217dded4a4ff3b7dab8aedcb96f00", "message": "HHH-13310 getParameterValue() not working for collections", "committedDate": "2020-11-10T18:42:48Z", "type": "commit"}, {"oid": "21b95781845217dded4a4ff3b7dab8aedcb96f00", "url": "https://github.com/hibernate/hibernate-orm/commit/21b95781845217dded4a4ff3b7dab8aedcb96f00", "message": "HHH-13310 getParameterValue() not working for collections", "committedDate": "2020-11-10T18:42:48Z", "type": "forcePushed"}]}