{"pr_number": 3198, "pr_title": "Dialect.getFallbackSqmMutationStrategy()", "pr_createdAt": "2020-01-31T09:23:31Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3198", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4Mzg5NA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373383894", "bodyText": "Doesn't work for now, because InlineStrategy itself is unfinished and throws.", "author": "gavinking", "createdAt": "2020-01-31T09:24:23Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDE3MQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373384171", "bodyText": "Is this right? Should it add \"HT_\" to the table name?", "author": "gavinking", "createdAt": "2020-01-31T09:25:00Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MzgwNg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373583806", "bodyText": "I believe you are correct", "author": "sebersole", "createdAt": "2020-01-31T17:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDQwNA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373384404", "bodyText": "Is this right?", "author": "gavinking", "createdAt": "2020-01-31T09:25:34Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/FirebirdDialect.java", "diffHunk": "@@ -594,4 +601,20 @@ public JDBCException convert(SQLException sqlException, String message, String s\n \t\t};\n \t}\n \n+\t@Override\n+\tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(EntityMappingType entityDescriptor, RuntimeModelCreationContext runtimeModelCreationContext) {\n+\t\treturn getVersion() < 210\n+\t\t\t\t? super.getFallbackSqmMutationStrategy( entityDescriptor, runtimeModelCreationContext )\n+\t\t\t\t: new GlobalTemporaryTableStrategy(\n+\t\t\t\t\t\tnew IdTable( entityDescriptor, name -> \"HT_\" + name ),\n+\t\t\t\t\t\t() -> new TempIdTableExporter( false, this::getTypeName ) {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String getCreateOptions() {\n+\t\t\t\t\t\t\t\treturn \"on commit delete rows\";\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\tAfterUseAction.CLEAN,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NjM4MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373586380", "bodyText": "Not sure how firebird implements their global-temp-table support.  Cleaning it should be fine, its more a question of whether its needed.  I'd leave it as is", "author": "sebersole", "createdAt": "2020-01-31T17:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDUwMw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373384503", "bodyText": "Is this right?", "author": "gavinking", "createdAt": "2020-01-31T09:25:46Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),\n+\t\t\t\tAfterUseAction.CLEAN,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NTM3OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373585379", "bodyText": "Yes, we want to clean the rows after we use them", "author": "sebersole", "createdAt": "2020-01-31T17:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MDIzMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373390230", "bodyText": "Is this correct?", "author": "gavinking", "createdAt": "2020-01-31T09:39:18Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/TimesTenDialect.java", "diffHunk": "@@ -216,28 +219,18 @@ public boolean isCurrentTimestampSelectStringCallable() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new GlobalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\tfinal String name = super.generateIdTableName( baseName );\n-//\t\t\t\t\t\treturn name.length() > 30 ? name.substring( 1, 30 ) : name;\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableCommand() {\n-//\t\t\t\t\t\treturn \"create global temporary table\";\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"on commit delete rows\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.CLEAN\n-//\t\t);\n+\t\treturn new GlobalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor,\n+\t\t\t\t\t\tname -> name.length() > 30 ? name.substring( 0, 30 ) : name ),\n+\t\t\t\t() -> new TempIdTableExporter( false, this::getTypeName ) {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tprotected String getCreateOptions() {\n+\t\t\t\t\t\treturn \"on commit delete rows\";\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tAfterUseAction.CLEAN,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NzM0MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373587340", "bodyText": "See earlier", "author": "sebersole", "createdAt": "2020-01-31T17:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MDIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373391649", "bodyText": "Is it correct to use PhysicalIdTableExporter here, even though it's really a temp table?", "author": "gavinking", "createdAt": "2020-01-31T09:42:39Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/SAPDBDialect.java", "diffHunk": "@@ -195,23 +198,18 @@ public CaseFragment createCaseFragment() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType rootEntityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n-\n-//\t\treturn new LocalTemporaryTableBulkIdStrategy(\n-//\t\t\t\tnew IdTableSupportStandardImpl() {\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String generateIdTableName(String baseName) {\n-//\t\t\t\t\t\treturn \"temp.\" + super.generateIdTableName( baseName );\n-//\t\t\t\t\t}\n-//\n-//\t\t\t\t\t@Override\n-//\t\t\t\t\tpublic String getCreateIdTableStatementOptions() {\n-//\t\t\t\t\t\treturn \"ignore rollback\";\n-//\t\t\t\t\t}\n-//\t\t\t\t},\n-//\t\t\t\tAfterUseAction.DROP,\n-//\t\t\t\tnull\n-//\t\t);\n+\t\treturn new LocalTemporaryTableStrategy(\n+\t\t\t\tnew IdTable( rootEntityDescriptor, name -> \"temp.\" + name ),\n+\t\t\t\t() -> new PhysicalIdTableExporter() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NzE5OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373587199", "bodyText": "No, it should use TempIdTableExporter", "author": "sebersole", "createdAt": "2020-01-31T17:08:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3Mjk1MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373772950", "bodyText": "OK thanks I will fix that.", "author": "gavinking", "createdAt": "2020-02-01T10:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NTIwMg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373775202", "bodyText": "Done.", "author": "gavinking", "createdAt": "2020-02-01T11:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTg3Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373391873", "bodyText": "Is this right?", "author": "gavinking", "createdAt": "2020-01-31T09:43:11Z", "path": "hibernate-core/src/main/java/org/hibernate/dialect/Dialect.java", "diffHunk": "@@ -1573,7 +1579,18 @@ public String getCreateMultisetTableString() {\n \tpublic SqmMultiTableMutationStrategy getFallbackSqmMutationStrategy(\n \t\t\tEntityMappingType entityDescriptor,\n \t\t\tRuntimeModelCreationContext runtimeModelCreationContext) {\n-\t\tthrow new NotYetImplementedFor6Exception( getClass() );\n+\t\tif ( entityDescriptor.getIdentifierMapping() instanceof CompositeIdentifierMapping) {\n+\t\t\tif ( !supportsTuplesInSubqueries() ) {\n+\t\t\t\treturn new InlineStrategy( this );\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn new PersistentTableStrategy(\n+\t\t\t\tnew IdTable( entityDescriptor, name -> name ),\n+\t\t\t\tAfterUseAction.CLEAN,\n+\t\t\t\tPhysicalIdTableExporter::new,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NTY5MQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373585691", "bodyText": "Yes, we want to export the physical table", "author": "sebersole", "createdAt": "2020-01-31T17:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3Mjk3Ng==", "url": "https://github.com/hibernate/hibernate-orm/pull/3198#discussion_r373772976", "bodyText": "Thanks.", "author": "gavinking", "createdAt": "2020-02-01T10:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM5MTg3Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "29d607d17bb72933cf115e5ee9ed2676b815fbc0", "url": "https://github.com/hibernate/hibernate-orm/commit/29d607d17bb72933cf115e5ee9ed2676b815fbc0", "message": "Attempt to reconstruct the fallbackSqmMutationStrategies\n\nThis method threw lots of NotImplementedFor6Exceptions, so I've tried\nto figure out what the right implementations are, going by what was\nthere in the other branches. However, I'm not at all sure that I got\neverything here right.", "committedDate": "2020-02-01T11:32:48Z", "type": "commit"}, {"oid": "29d607d17bb72933cf115e5ee9ed2676b815fbc0", "url": "https://github.com/hibernate/hibernate-orm/commit/29d607d17bb72933cf115e5ee9ed2676b815fbc0", "message": "Attempt to reconstruct the fallbackSqmMutationStrategies\n\nThis method threw lots of NotImplementedFor6Exceptions, so I've tried\nto figure out what the right implementations are, going by what was\nthere in the other branches. However, I'm not at all sure that I got\neverything here right.", "committedDate": "2020-02-01T11:32:48Z", "type": "forcePushed"}]}