{"pr_number": 3379, "pr_title": "wip/6.0 Implement @Formula", "pr_createdAt": "2020-04-26T19:07:13Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3379", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjY4MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r417002680", "bodyText": "This class change should be the facade of the code changes in this PR and starting with it is a good idea to grasp this seemingly big PR.", "author": "NathanQingyangXu", "createdAt": "2020-04-29T00:24:36Z", "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -25,32 +25,43 @@\n  * Models a reference to a Column in a SQL AST\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n public class ColumnReference implements Expression, Assignable {\n \tprivate final String qualifier;\n \tprivate final String columnExpression;\n+\tprivate final boolean isColumnExpressionFormula;\n \tprivate final String referenceExpression;\n \tprivate final JdbcMapping jdbcMapping;\n \n \tpublic ColumnReference(\n \t\t\tString qualifier,\n \t\t\tString columnExpression,\n+\t\t\tboolean isColumnExpressionFormula,\n \t\t\tJdbcMapping jdbcMapping,\n \t\t\tSessionFactoryImplementor sessionFactory) {\n \t\tthis.qualifier = StringHelper.nullIfEmpty( qualifier );\n-\t\tthis.columnExpression = columnExpression;\n-\t\tthis.referenceExpression = this.qualifier == null\n-\t\t\t\t? columnExpression\n-\t\t\t\t: this.qualifier + \".\" + columnExpression;\n+\t\tif ( isColumnExpressionFormula ) {\n+\t\t\tassert qualifier != null;\n+\t\t\tthis.columnExpression = StringHelper.replace( columnExpression, Template.TEMPLATE, qualifier );\n+\t\t}\n+\t\telse {\n+\t\t\tthis.columnExpression = columnExpression;\n+\t\t}\n+\t\tthis.isColumnExpressionFormula = isColumnExpressionFormula;\n+\t\tthis.referenceExpression = this.qualifier == null || isColumnExpressionFormula\n+\t\t\t\t? this.columnExpression\n+\t\t\t\t: this.qualifier + \".\" + this.columnExpression;\n \t\tthis.jdbcMapping = jdbcMapping;\n \t}", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1ODUzMQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421958531", "bodyText": "Revert this. referenceExpression is non-null AFAICS", "author": "beikov", "createdAt": "2020-05-08T06:10:38Z", "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -108,7 +123,7 @@ public boolean equals(Object o) {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\treturn referenceExpression.hashCode();\n+\t\treturn Objects.hashCode( referenceExpression );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1Nzc2NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r422057765", "bodyText": "I changed this to align well with the equals() implementation, which has used Objects.equals() already.\nI both reverted this and changed the equals() implementation to avoid unnecessary nullness checking.", "author": "NathanQingyangXu", "createdAt": "2020-05-08T10:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1ODUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1OTE2NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421959165", "bodyText": "AFAICS you are not using this so IMO you can remove this. It's enough to check in the constructor but there is no need for the state later", "author": "beikov", "createdAt": "2020-05-08T06:12:44Z", "path": "hibernate-core/src/main/java/org/hibernate/sql/ast/tree/expression/ColumnReference.java", "diffHunk": "@@ -25,32 +25,43 @@\n  * Models a reference to a Column in a SQL AST\n  *\n  * @author Steve Ebersole\n+ * @author Nathan Xu\n  */\n public class ColumnReference implements Expression, Assignable {\n \tprivate final String qualifier;\n \tprivate final String columnExpression;\n+\tprivate final boolean isColumnExpressionFormula;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1ODQyOQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r422058429", "bodyText": "Yeah, currently it is not used publicly, but I do think it is a basic feature of this class and we are supposed to expose it for later use.", "author": "NathanQingyangXu", "createdAt": "2020-05-08T10:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1OTE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MDA4Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r421960083", "bodyText": "Do you have a card for this so that we don't forget about it?", "author": "beikov", "createdAt": "2020-05-08T06:15:39Z", "path": "hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java", "diffHunk": "@@ -826,7 +826,8 @@ else if ( batchSize > 1 ) {\n \t\t\t\tcolAliases[k] = thing.getAlias( dialect, prop.getValue().getTable() );\n \t\t\t\tif ( thing.isFormula() ) {\n \t\t\t\t\tfoundFormula = true;\n-\t\t\t\t\t( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// ( (Formula) thing ).setFormula( substituteBrackets( ( (Formula) thing ).getFormula() ) );\n+\t\t\t\t\t// TOOD: uncomment the above statement when this#substituteBrackets(String) is implemented", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MTE2MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r422061160", "bodyText": "Nope. In current v6 development, it would be ideal to fix issues related as much as possible. I left a //TODO comment above so I think it might be enough. There are too many NotYetImplementedFor6Exception() statements here and there in current v6 branch and creating a specific card for each of them might be too fine-grained, IMHO.\nHowever, I did fix the typo (//TOOD -> //TODO).", "author": "NathanQingyangXu", "createdAt": "2020-05-08T10:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2MDA4Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3MzE4Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444273182", "bodyText": "Outside the scope of this PR, but as a larger question here we also need to start thinking about how @ColumnTransformer is supported here.  May be better to just pass along the \"read\" and \"write\" fragment portions?", "author": "sebersole", "createdAt": "2020-06-23T14:35:09Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ColumnConsumer.java", "diffHunk": "@@ -15,5 +15,6 @@\n \tvoid accept(\n \t\t\tString containingTableExpression,\n \t\t\tString columnExpression,\n+\t\t\tboolean isColumnExpressionFormula,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2NDYzMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r446564630", "bodyText": "Good point. I am gonna create a Trello ticket for @ColumnTransformer soon. Yeah, adding \"read\" and \"write\" fragment seems accommodate every possible scenario (normal column, formula and columnTransformer). But from design perspective, maybe it is an idea to create a higher level class to include the three cases (maybe via class hierarchy). That would simplify code understanding and ease code maintaining.", "author": "NathanQingyangXu", "createdAt": "2020-06-27T20:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3MzE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NDcxOA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444274718", "bodyText": "Why disallow this?  In theory it should be fine.", "author": "sebersole", "createdAt": "2020-06-23T14:37:01Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/internal/BasicValuedSingularAttributeMapping.java", "diffHunk": "@@ -73,13 +78,21 @@ public BasicValuedSingularAttributeMapping(\n \t\tthis.navigableRole = navigableRole;\n \t\tthis.tableExpression = tableExpression;\n \t\tthis.mappedColumnExpression = mappedColumnExpression;\n+\t\tthis.isMappedColumnExpressionFormula = isMappedColumnExpressionFormula;\n \t\tthis.valueConverter = valueConverter;\n \t\tthis.jdbcMapping = jdbcMapping;\n \n \t\tif ( valueConverter == null ) {\n \t\t\tdomainTypeDescriptor = jdbcMapping.getJavaTypeDescriptor();\n \t\t}\n \t\telse {\n+\t\t\tif ( isMappedColumnExpressionFormula ) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2MzI4MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r446563280", "bodyText": "I forgot what was in my mind when I coded this a long time ago, :). I deleted this as you suggested. Thanks.", "author": "NathanQingyangXu", "createdAt": "2020-06-27T20:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3NDcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MDY0MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r444280640", "bodyText": "The added isFormula is not needed.  It is always false.", "author": "sebersole", "createdAt": "2020-06-23T14:44:28Z", "path": "hibernate-core/src/main/java/org/hibernate/metamodel/mapping/ordering/ast/SequencePart.java", "diffHunk": "@@ -16,6 +16,7 @@\n public interface SequencePart {\n \tSequencePart resolvePathPart(\n \t\t\tString name,\n+\t\t\tboolean isFormula,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2MzE2Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3379#discussion_r446563162", "bodyText": "Deleted it. Thanks for the comment.", "author": "NathanQingyangXu", "createdAt": "2020-06-27T20:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MDY0MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "55ea61f2de2b7ae9b885754c89bc88ece6fea497", "url": "https://github.com/hibernate/hibernate-orm/commit/55ea61f2de2b7ae9b885754c89bc88ece6fea497", "message": "implement @Formula", "committedDate": "2020-07-27T22:41:25Z", "type": "commit"}, {"oid": "55ea61f2de2b7ae9b885754c89bc88ece6fea497", "url": "https://github.com/hibernate/hibernate-orm/commit/55ea61f2de2b7ae9b885754c89bc88ece6fea497", "message": "implement @Formula", "committedDate": "2020-07-27T22:41:25Z", "type": "forcePushed"}]}