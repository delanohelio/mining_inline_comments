{"pr_number": 3329, "pr_title": "HHH-13682 Generate Java 11/13/14 bytecode for tests when building with JDK11/13/14", "pr_createdAt": "2020-04-03T08:57:45Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3329", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0cd7d0318db13fd33163ee2b8b2b7ecb44791c57", "url": "https://github.com/hibernate/hibernate-orm/commit/0cd7d0318db13fd33163ee2b8b2b7ecb44791c57", "message": "HHH-13682 Remove unnecessary checks around Java 8 compatibility\n\nThe build requires JDK8+, so we're alwways Java 8 compatible.", "committedDate": "2020-04-07T06:21:38Z", "type": "commit"}, {"oid": "c11cdc6c0f73416f62f22957483bce1e375d483a", "url": "https://github.com/hibernate/hibernate-orm/commit/c11cdc6c0f73416f62f22957483bce1e375d483a", "message": "HHH-13682 Generate Java 13/14 bytecode for tests when building with JDK13/14", "committedDate": "2020-04-07T06:22:56Z", "type": "commit"}, {"oid": "e6685a130fe23858d206ad6459e3d5125d69b595", "url": "https://github.com/hibernate/hibernate-orm/commit/e6685a130fe23858d206ad6459e3d5125d69b595", "message": "HHH-13682 Do not set net.bytebuddy.experimental=true in tests anymore\n\nIt's no longer necessary since we upgraded to byte-buddy 1.10.2,\nand it causes bytecode to be converted from Java 14 to Java 12 in some\ncases (I don't know why).", "committedDate": "2020-04-07T06:22:59Z", "type": "commit"}, {"oid": "b9715810d54d84c7530d0c83702ec428d5783069", "url": "https://github.com/hibernate/hibernate-orm/commit/b9715810d54d84c7530d0c83702ec428d5783069", "message": "HHH-13682 Enable extended bytecode enhancement in NaturalIdInUninitializedAssociationTest\n\nThis test accesses a field of an entity directly and expects it to be\nautomatically initialized; this cannot work without extended bytecode\nenhancement.\n\nThis used to work with Java 8 bytecode, but only by chance. It seems\nthat Java 8 bytecode relies on \"synthetic\", static access methods\ninserted by the compiler to access the fields of entities in this test:\nany access to the field is done through this access method instead of\nthrough a direct field access. Since we apply bytecode enhancement to\nall methods of entities, this means that access to fields triggers\ninitialization, without any bytecode enhancement in the caller class.\n\nI believe this is specific to nested classes, but couldn't find a\nsource. For reference, the bytecode of access methods looks like this:\n\n  static int access$002(org.hibernate.test.bytecode.enhancement.lazy.NaturalIdInUninitializedAssociationTest$AnEntity, int);\n    Code:\n       0: aload_0\n       1: iload_1\n       2: dup_x1\n       3: putfield      #3                  // Field id:I\n       6: ireturn\n\n  static org.hibernate.test.bytecode.enhancement.lazy.NaturalIdInUninitializedAssociationTest$EntityImmutableNaturalId access$102(org.hibernate.test.bytecode.enhancement.lazy.NaturalIdInUninitializedAssociationTest$AnEntity, org.hibernate.test.bytecode.enhancement.lazy.NaturalIdInUninitializedAssociationTest$EntityImmutableNaturalId);\n    Code:\n       0: aload_0\n       1: aload_1\n       2: dup_x1\n       3: putfield      #2                  // Field entityImmutableNaturalId:Lorg/hibernate/test/bytecode/enhancement/lazy/NaturalIdInUninitializedAssociationTest$EntityImmutableNaturalId;\n       6: areturn\n\nWith Java 11, however, access to fields of entities is done directly,\neven for nested classes. So the access methods no longer exist, and we\ndon't get automatic initialization upon field access. We need extended\nbytecode enhancement, like we would in any other case of field access\n(in particular accessing fields of non-nested classes).", "committedDate": "2020-04-07T06:22:59Z", "type": "commit"}, {"oid": "73ba5d96e8b0ee066dc0601a68b7b41477bbacd4", "url": "https://github.com/hibernate/hibernate-orm/commit/73ba5d96e8b0ee066dc0601a68b7b41477bbacd4", "message": "HHH-13682 Allow forcing the tested Java version in the Gradle build\n\n... just in case we need that for some cutting-edge JDK, for example 15,\nthat would not be supported by Gradle yet.", "committedDate": "2020-04-07T06:22:59Z", "type": "commit"}, {"oid": "fc9ff84ab9b4a8bb96b423967af1dfed5f8f345f", "url": "https://github.com/hibernate/hibernate-orm/commit/fc9ff84ab9b4a8bb96b423967af1dfed5f8f345f", "message": "HHH-13682 Upgrade to forbiddenapis 2.7\n\nSo that we can feed it Java 13/14 bytecode", "committedDate": "2020-04-07T06:23:00Z", "type": "commit"}, {"oid": "fc9ff84ab9b4a8bb96b423967af1dfed5f8f345f", "url": "https://github.com/hibernate/hibernate-orm/commit/fc9ff84ab9b4a8bb96b423967af1dfed5f8f345f", "message": "HHH-13682 Upgrade to forbiddenapis 2.7\n\nSo that we can feed it Java 13/14 bytecode", "committedDate": "2020-04-07T06:23:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5MjAzMQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3329#discussion_r408092031", "bodyText": "We no longer need this? Perhaps the check should be bumped to >= 15 ? It's kinda a pattern for ByteBuddy to only support the \"work in progress\" JDKs when this flag is on. I didn't check if the strategy changed.", "author": "Sanne", "createdAt": "2020-04-14T12:21:46Z", "path": "gradle/java-module.gradle", "diffHunk": "@@ -200,18 +208,6 @@ processTestResources {\n \t}\n }\n \n-// Enable the experimental features of ByteBuddy with JDK 12+\n-test {\n-\t//Only safe to attempt to parse the version as an integer since JDK11\n-\tif ( JavaVersion.current().isJava11Compatible() ) {\n-\t\tint majorJVMVersionInt = Integer.valueOf(JavaVersion.current().toString());\n-\t\t//Set the -Dnet.bytebuddy.experimental=true property only when we need it:\n-\t\tif (majorJVMVersionInt >= 12) {\n-\t\t\tsystemProperty 'net.bytebuddy.experimental', true", "originalCommit": "fc9ff84ab9b4a8bb96b423967af1dfed5f8f345f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}