{"pr_number": 1091, "pr_title": "Cleanup derivatives after object destroyed", "pr_createdAt": "2020-09-11T20:05:10Z", "pr_url": "https://github.com/UNC-Libraries/box-c/pull/1091", "timeline": [{"oid": "874ff01e7c322f3311258fa74449ddd2ad88257b", "url": "https://github.com/UNC-Libraries/box-c/commit/874ff01e7c322f3311258fa74449ddd2ad88257b", "message": "Cleanup derivatives when an object is destroyed", "committedDate": "2020-09-11T14:37:25Z", "type": "commit"}, {"oid": "8ba905a6eb5733eba02a8250d2e1e16d2edad6cb", "url": "https://github.com/UNC-Libraries/box-c/commit/8ba905a6eb5733eba02a8250d2e1e16d2edad6cb", "message": "Move derivative destroy into its own package", "committedDate": "2020-09-11T15:20:21Z", "type": "commit"}, {"oid": "7e14457128dd93a55451946f4327e0831b446fe0", "url": "https://github.com/UNC-Libraries/box-c/commit/7e14457128dd93a55451946f4327e0831b446fe0", "message": "Add tests", "committedDate": "2020-09-11T20:24:37Z", "type": "forcePushed"}, {"oid": "18e64b46fe8c944a8775a62bb8be2f8cd0abb1bb", "url": "https://github.com/UNC-Libraries/box-c/commit/18e64b46fe8c944a8775a62bb8be2f8cd0abb1bb", "message": "Add tests", "committedDate": "2020-09-14T12:15:55Z", "type": "forcePushed"}, {"oid": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "url": "https://github.com/UNC-Libraries/box-c/commit/544f85b7789691bced5e4f54fb32e12ca7df55ea", "message": "Add tests", "committedDate": "2020-09-14T14:06:46Z", "type": "commit"}, {"oid": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "url": "https://github.com/UNC-Libraries/box-c/commit/544f85b7789691bced5e4f54fb32e12ca7df55ea", "message": "Add tests", "committedDate": "2020-09-14T14:06:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MDU1OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488770559", "bodyText": "binaryDestroyedMessageSender and binaryDestroyDerivativesMessageSender both seem to have very similar intents, but are currently tightly coupled to a particular post-destroy service.\nI think they should be merged together from the perspective of DestroyObjectsJob and sent to a single \"objectDestroyed\"/\"postDestroy\" end point which routes to all the post-destroy endpoints rather adding multiple senders here. You could probably reuse/rename the binaryDestroyedMessageSender for sending the messages, and construct the message body with a helper method, similar to what's in RunEnhancementsMessageHelpers. You'll have to add the content URI to the message as well.\nThe message could be passed along to filter.longleaf.deregister, which would likely need a short processor so it could pull the content uri from the message body, if the message is an xml document.", "author": "bbpennel", "createdAt": "2020-09-15T15:43:05Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -224,13 +233,16 @@ private void destroyBinaries() {\n         if (transferSession == null) {\n             transferSession = transferService.getSession();\n         }\n-        cleanupBinaryUris.forEach(contentUri -> {\n+        cleanupBinaryUris.forEach((contentUri, metadata) -> {\n             try {\n                 log.debug(\"Deleting destroyed binary {}\", contentUri);\n                 StorageLocation storageLoc = locManager.getStorageLocationForUri(contentUri);\n                 transferSession.forDestination(storageLoc)\n                         .delete(contentUri);\n                 binaryDestroyedMessageSender.sendMessage(contentUri.toString());\n+                binaryDestroyDerivativesMessageSender", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3NDIwNg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488774206", "bodyText": "Also, at the moment I don't think custom thumbnails for destroyed units/collections will get cleaned up. Its a pretty rare operation, but we should probably send out \"object destroyed\" messages for all objects rather than just binaries, and include the type of object destroyed in the message (obviously there wouldn't be a content uri or mimetype for other object types).", "author": "bbpennel", "createdAt": "2020-09-15T15:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MDU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3NjQ2Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488776466", "bodyText": "Can you double check that this is actually checking any binaries? At this point the fileObject has been destroyed, so I'm not sure if fileObj.getBinaryObjects() will return anything.\nCould you instead make use of the derivativesToCleanup and assertDerivativeDestroyMsgSent helpers?", "author": "bbpennel", "createdAt": "2020-09-15T15:51:10Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -195,6 +202,13 @@ public void destroySingleFileObjectTest() {\n \n         verify(indexingMessageSender).sendIndexingOperation(anyString(), eq(fileObjPid), eq(DELETE_SOLR_TREE));\n         verify(binaryDestroyedMessageSender).sendMessage(contentUri.toString());\n+\n+        List<BinaryObject> binaries = fileObj.getBinaryObjects();", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3ODMzOA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488778338", "bodyText": "Should return List<Map<String, String>>, and line 407 should be changed to the same. Use the interface rather than the implementation unless a specific behavior/method of the implementation is essential elsewhere.", "author": "bbpennel", "createdAt": "2020-09-15T15:53:52Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -384,4 +402,24 @@ private void markObjsForDeletion(List<PID> objsToDestroy) {\n             sparqlUpdateService.executeUpdate(pid.getRepositoryUri().toString(), updateString);\n         }\n     }\n+\n+    private ArrayList<Map<String, String>> derivativesToCleanup(List<BinaryObject> binaries) {", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3ODcxMg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488778712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ArrayList<Map<String, String>> binaryDerivs = derivativesToCleanup(fileObj.getBinaryObjects());\n          \n          \n            \n                    List<Map<String, String>> binaryDerivs = derivativesToCleanup(fileObj.getBinaryObjects());", "author": "bbpennel", "createdAt": "2020-09-15T15:54:23Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -207,7 +221,9 @@ public void destroyObjectsInSameTreeTest() {\n         PID workObjPid = objsToDestroy.get(1);\n         PID folderObjPid = objsToDestroy.get(0);\n \n-        URI contentUri = repoObjLoader.getFileObject(fileObjPid).getOriginalFile().getContentUri();\n+        FileObject fileObj = repoObjLoader.getFileObject(fileObjPid);\n+        ArrayList<Map<String, String>> binaryDerivs = derivativesToCleanup(fileObj.getBinaryObjects());", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4MDExMg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488780112", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void assertDerivativeDestroyMsgSent(ArrayList<Map<String, String>> binary) {\n          \n          \n            \n                private void assertDerivativeDestroyMsgSent(List<Map<String, String>> binary) {", "author": "bbpennel", "createdAt": "2020-09-15T15:56:23Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -384,4 +402,24 @@ private void markObjsForDeletion(List<PID> objsToDestroy) {\n             sparqlUpdateService.executeUpdate(pid.getRepositoryUri().toString(), updateString);\n         }\n     }\n+\n+    private ArrayList<Map<String, String>> derivativesToCleanup(List<BinaryObject> binaries) {\n+        ArrayList<Map<String, String>> cleanupBinaryUris = new ArrayList<>();\n+\n+        for (BinaryObject binary : binaries) {\n+            Map<String, String> contentMetadata = new HashMap<>();\n+            contentMetadata.put(\"pid\", binary.getPid().getQualifiedId());\n+            contentMetadata.put(\"mimeType\", binary.getMimetype());\n+\n+            cleanupBinaryUris.add(contentMetadata);\n+        }\n+\n+        return cleanupBinaryUris;\n+    }\n+\n+    private void assertDerivativeDestroyMsgSent(ArrayList<Map<String, String>> binary) {", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4NjUyMw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488786523", "bodyText": "There's a bit of a disconnect between having the full list of derivatives hard coded in here while initializing a separate processor per type. I'd suggest either making the DestroyDerivativeProcessor able to figure out all the derivatives that need to be destroyed for a particular object (basically internalizing the stuff from the router), or reuse derivativeBasePath to determine if a file should be removed. It seems like anything that starts with derivativeBasePath but is not exactly it can be deleted if its empty.", "author": "bbpennel", "createdAt": "2020-09-15T16:05:37Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.model.DatastreamType.FULLTEXT_EXTRACTION;\n+import static edu.unc.lib.dl.model.DatastreamType.JP2_ACCESS_COPY;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_LARGE;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_SMALL;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Route to execute requests to destroy object derivative files\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+public class DestroyDerivativesProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(DestroyDerivativesProcessor.class);\n+    private final String fileExtension;\n+    private final String derivativeBasePath;\n+\n+    public DestroyDerivativesProcessor(String fileExtension, String derivativeBasePath) {\n+        this.fileExtension = fileExtension;\n+        this.derivativeBasePath = derivativeBasePath;\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) {\n+        Message in = exchange.getIn();\n+        String binaryId = (String) in.getHeader(CdrBinaryPidId);\n+        String binarySubPath = idToPath(binaryId, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        Path derivativePath = Paths.get(derivativeBasePath, binarySubPath, binaryId + fileExtension);\n+\n+        deleteDerivative(derivativePath, binaryId);\n+    }\n+\n+    private void deleteDerivative(Path derivativePath, String binaryId) {\n+        try {\n+            if (shouldRemoveFile(derivativePath)) {\n+                boolean deleted = Files.deleteIfExists(derivativePath);\n+                if (deleted) {\n+                    deleteDerivative(derivativePath.getParent(), binaryId);\n+                }\n+                log.info(\"Derivative and parent directories destroyed for {}\", binaryId);\n+            }\n+        } catch (IOException e) {\n+            log.warn(\"Unable to destroy derivative and parent directories for {}: {}\", binaryId, e.getMessage());\n+        }\n+    }\n+\n+    private boolean shouldRemoveFile(Path path) throws IOException {\n+        List<String> rootDirs = Arrays.asList(", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4OTU5OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488789599", "bodyText": "This regex already exists in ImageDerivativeProcessor. I would suggest changing ImageDerivativeProcessor.allowedImageType to static and then using that in the conditional below rather than having a new regex here. The method actually runs two regexes as well.", "author": "bbpennel", "createdAt": "2020-09-15T16:10:07Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static org.apache.camel.LoggingLevel.DEBUG;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.LoggingLevel;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ * Router to process requests to destroy derivatives for an object\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+public class DestroyDerivativesRouter extends RouteBuilder {\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    private static final String IMAGE_MIMETYPE_PATTERN = \"^(image.*$|application.*?(photoshop|psd)$)\";", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MTY4Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488791683", "bodyText": "I'd suggest making FulltextRouter and this router use the same constant for this regex. You could centralize it in the FulltextProcessor so it follows a similar pattern to the image enhancements.", "author": "bbpennel", "createdAt": "2020-09-15T16:13:02Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static org.apache.camel.LoggingLevel.DEBUG;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.LoggingLevel;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+/**\n+ * Router to process requests to destroy derivatives for an object\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+public class DestroyDerivativesRouter extends RouteBuilder {\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    private static final String IMAGE_MIMETYPE_PATTERN = \"^(image.*$|application.*?(photoshop|psd)$)\";\n+    private static final String TEXT_MIMETYPE_PATTERN = \"^(text/|application/pdf|application/msword\"", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NDI0Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488794243", "bodyText": "You can use FileUtils.writeStringToFile(file, \"my text\", StandardCharsets.UTF_8);", "author": "bbpennel", "createdAt": "2020-09-15T16:16:42Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessorTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.FULLTEXT_EXTRACTION;\n+import static edu.unc.lib.dl.model.DatastreamType.JP2_ACCESS_COPY;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_LARGE;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+import edu.unc.lib.dl.test.TestHelper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+public class DestroyDerivativesProcessorTest {\n+    private DestroyDerivativesProcessor processor;\n+    private File file;\n+    private String pathId;\n+    private String derivativeDirBase;\n+    private File derivativeTypeBaseDir;\n+    private File derivativeFinalDir;\n+    private String derivativeTypeDir;\n+    private static final String FEDORA_BASE = \"http://example.com/rest/\";\n+    private static final String PID_ID = \"de75d811-9e0f-4b1f-8631-2060ab3580cc\";\n+    private static final String RESC_ID = FEDORA_BASE + \"content/de/75/d8/11/\" + PID_ID;\n+\n+    @Rule\n+    public TemporaryFolder derivativeDir = new TemporaryFolder();\n+\n+    @Mock\n+    private Exchange exchange;\n+\n+    @Mock\n+    private Message message;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(FEDORA_BASE);\n+\n+        pathId = PIDs.get(RESC_ID).getId();\n+\n+        when(exchange.getIn()).thenReturn(message);\n+\n+        when(message.getHeader(eq(CdrBinaryPidId)))\n+                .thenReturn(PID_ID);\n+\n+        derivativeDirBase = derivativeDir.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void deleteFulltextTest() throws Exception {\n+        derivativeTypeDir = FULLTEXT_EXTRACTION.getId();\n+        derivativeFinalDir = derivativeDir.newFolder(derivativeTypeDir, \"de\", \"75\", \"d8\", \"11\");\n+        file = new File(derivativeFinalDir, pathId + \".txt\");\n+\n+        try (BufferedWriter writeFile = new BufferedWriter(new FileWriter(file))) {", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NDY0Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488794646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    derivativeTypeBaseDir = new File(derivativeDirBase + \"/\" + derivativeTypeDir);\n          \n          \n            \n                    derivativeTypeBaseDir = new File(derivativeDirBase, derivativeTypeDir);", "author": "bbpennel", "createdAt": "2020-09-15T16:17:17Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessorTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.FULLTEXT_EXTRACTION;\n+import static edu.unc.lib.dl.model.DatastreamType.JP2_ACCESS_COPY;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_LARGE;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+import edu.unc.lib.dl.test.TestHelper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+public class DestroyDerivativesProcessorTest {\n+    private DestroyDerivativesProcessor processor;\n+    private File file;\n+    private String pathId;\n+    private String derivativeDirBase;\n+    private File derivativeTypeBaseDir;\n+    private File derivativeFinalDir;\n+    private String derivativeTypeDir;\n+    private static final String FEDORA_BASE = \"http://example.com/rest/\";\n+    private static final String PID_ID = \"de75d811-9e0f-4b1f-8631-2060ab3580cc\";\n+    private static final String RESC_ID = FEDORA_BASE + \"content/de/75/d8/11/\" + PID_ID;\n+\n+    @Rule\n+    public TemporaryFolder derivativeDir = new TemporaryFolder();\n+\n+    @Mock\n+    private Exchange exchange;\n+\n+    @Mock\n+    private Message message;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(FEDORA_BASE);\n+\n+        pathId = PIDs.get(RESC_ID).getId();\n+\n+        when(exchange.getIn()).thenReturn(message);\n+\n+        when(message.getHeader(eq(CdrBinaryPidId)))\n+                .thenReturn(PID_ID);\n+\n+        derivativeDirBase = derivativeDir.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void deleteFulltextTest() throws Exception {\n+        derivativeTypeDir = FULLTEXT_EXTRACTION.getId();\n+        derivativeFinalDir = derivativeDir.newFolder(derivativeTypeDir, \"de\", \"75\", \"d8\", \"11\");\n+        file = new File(derivativeFinalDir, pathId + \".txt\");\n+\n+        try (BufferedWriter writeFile = new BufferedWriter(new FileWriter(file))) {\n+            writeFile.write(\"my text\");\n+        }\n+\n+        derivativeTypeBaseDir = new File(derivativeDirBase + \"/\" + derivativeTypeDir);", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NTQ1NA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488795454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    processor = new DestroyDerivativesProcessor(\".txt\", derivativeDirBase + \"/\" + derivativeTypeDir);\n          \n          \n            \n                    processor = new DestroyDerivativesProcessor(\".txt\", derivativeTypeBaseDir.getAbsolutePath());", "author": "bbpennel", "createdAt": "2020-09-15T16:18:32Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessorTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.FULLTEXT_EXTRACTION;\n+import static edu.unc.lib.dl.model.DatastreamType.JP2_ACCESS_COPY;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_LARGE;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+import edu.unc.lib.dl.test.TestHelper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+public class DestroyDerivativesProcessorTest {\n+    private DestroyDerivativesProcessor processor;\n+    private File file;\n+    private String pathId;\n+    private String derivativeDirBase;\n+    private File derivativeTypeBaseDir;\n+    private File derivativeFinalDir;\n+    private String derivativeTypeDir;\n+    private static final String FEDORA_BASE = \"http://example.com/rest/\";\n+    private static final String PID_ID = \"de75d811-9e0f-4b1f-8631-2060ab3580cc\";\n+    private static final String RESC_ID = FEDORA_BASE + \"content/de/75/d8/11/\" + PID_ID;\n+\n+    @Rule\n+    public TemporaryFolder derivativeDir = new TemporaryFolder();\n+\n+    @Mock\n+    private Exchange exchange;\n+\n+    @Mock\n+    private Message message;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(FEDORA_BASE);\n+\n+        pathId = PIDs.get(RESC_ID).getId();\n+\n+        when(exchange.getIn()).thenReturn(message);\n+\n+        when(message.getHeader(eq(CdrBinaryPidId)))\n+                .thenReturn(PID_ID);\n+\n+        derivativeDirBase = derivativeDir.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void deleteFulltextTest() throws Exception {\n+        derivativeTypeDir = FULLTEXT_EXTRACTION.getId();\n+        derivativeFinalDir = derivativeDir.newFolder(derivativeTypeDir, \"de\", \"75\", \"d8\", \"11\");\n+        file = new File(derivativeFinalDir, pathId + \".txt\");\n+\n+        try (BufferedWriter writeFile = new BufferedWriter(new FileWriter(file))) {\n+            writeFile.write(\"my text\");\n+        }\n+\n+        derivativeTypeBaseDir = new File(derivativeDirBase + \"/\" + derivativeTypeDir);\n+        processor = new DestroyDerivativesProcessor(\".txt\", derivativeDirBase + \"/\" + derivativeTypeDir);", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NjU2OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488796568", "bodyText": "See the same suggestions as deleteFulltextTest", "author": "bbpennel", "createdAt": "2020-09-15T16:20:16Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessorTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.FULLTEXT_EXTRACTION;\n+import static edu.unc.lib.dl.model.DatastreamType.JP2_ACCESS_COPY;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_LARGE;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+import edu.unc.lib.dl.test.TestHelper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+public class DestroyDerivativesProcessorTest {\n+    private DestroyDerivativesProcessor processor;\n+    private File file;\n+    private String pathId;\n+    private String derivativeDirBase;\n+    private File derivativeTypeBaseDir;\n+    private File derivativeFinalDir;\n+    private String derivativeTypeDir;\n+    private static final String FEDORA_BASE = \"http://example.com/rest/\";\n+    private static final String PID_ID = \"de75d811-9e0f-4b1f-8631-2060ab3580cc\";\n+    private static final String RESC_ID = FEDORA_BASE + \"content/de/75/d8/11/\" + PID_ID;\n+\n+    @Rule\n+    public TemporaryFolder derivativeDir = new TemporaryFolder();\n+\n+    @Mock\n+    private Exchange exchange;\n+\n+    @Mock\n+    private Message message;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(FEDORA_BASE);\n+\n+        pathId = PIDs.get(RESC_ID).getId();\n+\n+        when(exchange.getIn()).thenReturn(message);\n+\n+        when(message.getHeader(eq(CdrBinaryPidId)))\n+                .thenReturn(PID_ID);\n+\n+        derivativeDirBase = derivativeDir.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void deleteFulltextTest() throws Exception {\n+        derivativeTypeDir = FULLTEXT_EXTRACTION.getId();\n+        derivativeFinalDir = derivativeDir.newFolder(derivativeTypeDir, \"de\", \"75\", \"d8\", \"11\");\n+        file = new File(derivativeFinalDir, pathId + \".txt\");\n+\n+        try (BufferedWriter writeFile = new BufferedWriter(new FileWriter(file))) {\n+            writeFile.write(\"my text\");\n+        }\n+\n+        derivativeTypeBaseDir = new File(derivativeDirBase + \"/\" + derivativeTypeDir);\n+        processor = new DestroyDerivativesProcessor(\".txt\", derivativeDirBase + \"/\" + derivativeTypeDir);\n+\n+        when(message.getHeader(eq(CdrBinaryMimeType)))\n+                .thenReturn(\"text/plain\");\n+\n+        processor.process(exchange);\n+\n+        // Deleted file\n+        assertFalse(file.exists());\n+        // Deleted parent dirs\n+        assertFalse(new File(derivativeTypeBaseDir, \"de\").exists());\n+        // Didn't delete root derivative type dir\n+        assertTrue(derivativeTypeBaseDir.exists());\n+    }\n+\n+    @Test\n+    public void deleteThumbnailTest() throws Exception {", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NjcyNQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488796725", "bodyText": "Same suggestions as deleteFulltextTest", "author": "bbpennel", "createdAt": "2020-09-15T16:20:32Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessorTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.FULLTEXT_EXTRACTION;\n+import static edu.unc.lib.dl.model.DatastreamType.JP2_ACCESS_COPY;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_LARGE;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+import edu.unc.lib.dl.test.TestHelper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+public class DestroyDerivativesProcessorTest {\n+    private DestroyDerivativesProcessor processor;\n+    private File file;\n+    private String pathId;\n+    private String derivativeDirBase;\n+    private File derivativeTypeBaseDir;\n+    private File derivativeFinalDir;\n+    private String derivativeTypeDir;\n+    private static final String FEDORA_BASE = \"http://example.com/rest/\";\n+    private static final String PID_ID = \"de75d811-9e0f-4b1f-8631-2060ab3580cc\";\n+    private static final String RESC_ID = FEDORA_BASE + \"content/de/75/d8/11/\" + PID_ID;\n+\n+    @Rule\n+    public TemporaryFolder derivativeDir = new TemporaryFolder();\n+\n+    @Mock\n+    private Exchange exchange;\n+\n+    @Mock\n+    private Message message;\n+\n+    @Before\n+    public void init() throws Exception {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(FEDORA_BASE);\n+\n+        pathId = PIDs.get(RESC_ID).getId();\n+\n+        when(exchange.getIn()).thenReturn(message);\n+\n+        when(message.getHeader(eq(CdrBinaryPidId)))\n+                .thenReturn(PID_ID);\n+\n+        derivativeDirBase = derivativeDir.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void deleteFulltextTest() throws Exception {\n+        derivativeTypeDir = FULLTEXT_EXTRACTION.getId();\n+        derivativeFinalDir = derivativeDir.newFolder(derivativeTypeDir, \"de\", \"75\", \"d8\", \"11\");\n+        file = new File(derivativeFinalDir, pathId + \".txt\");\n+\n+        try (BufferedWriter writeFile = new BufferedWriter(new FileWriter(file))) {\n+            writeFile.write(\"my text\");\n+        }\n+\n+        derivativeTypeBaseDir = new File(derivativeDirBase + \"/\" + derivativeTypeDir);\n+        processor = new DestroyDerivativesProcessor(\".txt\", derivativeDirBase + \"/\" + derivativeTypeDir);\n+\n+        when(message.getHeader(eq(CdrBinaryMimeType)))\n+                .thenReturn(\"text/plain\");\n+\n+        processor.process(exchange);\n+\n+        // Deleted file\n+        assertFalse(file.exists());\n+        // Deleted parent dirs\n+        assertFalse(new File(derivativeTypeBaseDir, \"de\").exists());\n+        // Didn't delete root derivative type dir\n+        assertTrue(derivativeTypeBaseDir.exists());\n+    }\n+\n+    @Test\n+    public void deleteThumbnailTest() throws Exception {\n+        derivativeTypeDir = THUMBNAIL_LARGE.getId();\n+        derivativeFinalDir = derivativeDir.newFolder(derivativeTypeDir, \"de\", \"75\", \"d8\", \"11\");\n+        file = new File(derivativeFinalDir, pathId + \".png\");\n+\n+        try (BufferedWriter writeFile = new BufferedWriter(new FileWriter(file))) {\n+            writeFile.write(\"fake image\");\n+        }\n+\n+        derivativeTypeBaseDir = new File(derivativeDirBase + \"/\" + derivativeTypeDir);\n+        processor = new DestroyDerivativesProcessor(\".png\", derivativeDirBase + \"/\" + derivativeTypeDir);\n+\n+        when(message.getHeader(eq(CdrBinaryMimeType)))\n+                .thenReturn(\"image/png\");\n+\n+        processor.process(exchange);\n+\n+        // Deleted file\n+        assertFalse(file.exists());\n+        // Deleted parent dirs\n+        assertFalse(new File(derivativeTypeBaseDir, \"de\").exists());\n+        // Didn't delete root derivative type dir\n+        assertTrue(derivativeTypeBaseDir.exists());\n+    }\n+\n+    @Test\n+    public void deleteJp2Test() throws Exception {", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NzY1OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488797658", "bodyText": "Could you add a test or two to verify that occupied directories don't get deleted? You could have one where there are two directories in \"de\", and/or one where there is another file in derivativeTypeDir, \"de\", \"75\", \"d8\", \"11\".\nAlso, it'd be good to verify that nothing happens or fails if a file that is neither an image or text is destroyed.", "author": "bbpennel", "createdAt": "2020-09-15T16:21:53Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessorTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.model.DatastreamType.FULLTEXT_EXTRACTION;\n+import static edu.unc.lib.dl.model.DatastreamType.JP2_ACCESS_COPY;\n+import static edu.unc.lib.dl.model.DatastreamType.THUMBNAIL_LARGE;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+import edu.unc.lib.dl.test.TestHelper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+\n+public class DestroyDerivativesProcessorTest {", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwMDI4OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488800288", "bodyText": "Its not actually making any assertions about the endpoints. Normally it would specify what to expect with something like getMockEndpoint(\"mock:direct:solr-update\").expectedMessageCount(1); if you have specify expectations about messages being sent somewhere.", "author": "bbpennel", "createdAt": "2020-09-15T16:25:48Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.Produce;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.AdviceWithRouteBuilder;\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class DestroyDerivativesRouterTest extends CamelSpringTestSupport {\n+    private static final String DESTROY_DERIVATIVES_ROUTE = \"CdrDestroyDerivatives\";\n+    private static final String DESTROY_FULLTEXT_ROUTE = \"CdrDestroyFullText\";\n+    private static final String DESTROY_IMAGE_ROUTE = \"CdrDestroyImage\";\n+\n+    @Produce(uri = \"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/destroy-derivatives-context.xml\");\n+    }\n+\n+    @Test\n+    public void routeRequestText() throws Exception {\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\"));\n+        assertMockEndpointsSatisfied();", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwMTExNg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488801116", "bodyText": "Can remove this line", "author": "bbpennel", "createdAt": "2020-09-15T16:27:05Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.Produce;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.AdviceWithRouteBuilder;\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class DestroyDerivativesRouterTest extends CamelSpringTestSupport {\n+    private static final String DESTROY_DERIVATIVES_ROUTE = \"CdrDestroyDerivatives\";\n+    private static final String DESTROY_FULLTEXT_ROUTE = \"CdrDestroyFullText\";\n+    private static final String DESTROY_IMAGE_ROUTE = \"CdrDestroyImage\";\n+\n+    @Produce(uri = \"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/destroy-derivatives-context.xml\");\n+    }\n+\n+    @Test\n+    public void routeRequestText() throws Exception {\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\"));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeRequestImage() throws Exception {\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\"));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyTextDerivative() throws Exception {\n+        createContext(DESTROY_FULLTEXT_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\"));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyImageDerivative() throws Exception {\n+        createContext(DESTROY_IMAGE_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\"));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    private void createContext(String routeName) throws Exception {\n+        context.getRouteDefinition(routeName).adviceWith(context, new AdviceWithRouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                replaceFromWith(\"direct:start\");\n+                mockEndpointsAndSkip(\"*\");\n+            }\n+        });\n+\n+        context.start();\n+    }\n+\n+    private static Map<String, Object> createEvent(String mimetype) {\n+        final Map<String, Object> headers = new HashMap<>();\n+        headers.put(CdrBinaryMimeType, mimetype);\n+        headers.put(CdrBinaryPidId, \"dee2614c-8a4b-4ac2-baf2-4b4afc11af87\");\n+       // http://localhost:8181/fcrepo/rest/content/de/e2/61/4c/dee2614c-8a4b-4ac2-baf2-4b4afc11af87/datafs/original_file", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwMjUzMQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r488802531", "bodyText": "Seems like in most of these tests you'd want to make sure the processors are called?", "author": "bbpennel", "createdAt": "2020-09-15T16:29:23Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.Produce;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.AdviceWithRouteBuilder;\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class DestroyDerivativesRouterTest extends CamelSpringTestSupport {\n+    private static final String DESTROY_DERIVATIVES_ROUTE = \"CdrDestroyDerivatives\";\n+    private static final String DESTROY_FULLTEXT_ROUTE = \"CdrDestroyFullText\";\n+    private static final String DESTROY_IMAGE_ROUTE = \"CdrDestroyImage\";\n+\n+    @Produce(uri = \"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/destroy-derivatives-context.xml\");\n+    }\n+\n+    @Test\n+    public void routeRequestText() throws Exception {\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\"));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeRequestImage() throws Exception {\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\"));\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyTextDerivative() throws Exception {", "originalCommit": "544f85b7789691bced5e4f54fb32e12ca7df55ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5de71ffeceebb6bafba195c43602149d649b7f8", "url": "https://github.com/UNC-Libraries/box-c/commit/d5de71ffeceebb6bafba195c43602149d649b7f8", "message": "* Centralize mimetype filtering\n* Simplify how base derivative dir is checked", "committedDate": "2020-09-15T19:46:36Z", "type": "commit"}, {"oid": "bbe8a43f44941c391ffba08644c3fe218f440a17", "url": "https://github.com/UNC-Libraries/box-c/commit/bbe8a43f44941c391ffba08644c3fe218f440a17", "message": "Update derivative cleanup tests", "committedDate": "2020-09-16T12:56:11Z", "type": "commit"}, {"oid": "531b1c78821c48610cbd9050e12bd9f92c21c073", "url": "https://github.com/UNC-Libraries/box-c/commit/531b1c78821c48610cbd9050e12bd9f92c21c073", "message": "Combine destroy messages", "committedDate": "2020-09-16T19:09:15Z", "type": "commit"}, {"oid": "6ddba1a6a5b300abb36d0970deaaea7c6ed50c5f", "url": "https://github.com/UNC-Libraries/box-c/commit/6ddba1a6a5b300abb36d0970deaaea7c6ed50c5f", "message": "* Update longleaf to pull contentUris from JDOM messages\n* Update activemq cleanup route name", "committedDate": "2020-09-17T15:32:18Z", "type": "commit"}, {"oid": "d92d7f01c07c2776f00db289a997a49845557174", "url": "https://github.com/UNC-Libraries/box-c/commit/d92d7f01c07c2776f00db289a997a49845557174", "message": "* Fix routing of post destroy messages\n* Add private constructor for message helper", "committedDate": "2020-09-17T18:34:41Z", "type": "commit"}, {"oid": "d92d7f01c07c2776f00db289a997a49845557174", "url": "https://github.com/UNC-Libraries/box-c/commit/d92d7f01c07c2776f00db289a997a49845557174", "message": "* Fix routing of post destroy messages\n* Add private constructor for message helper", "committedDate": "2020-09-17T18:34:41Z", "type": "forcePushed"}, {"oid": "a727c11877fb4ebc1bd82bfdeee05a67f76c28db", "url": "https://github.com/UNC-Libraries/box-c/commit/a727c11877fb4ebc1bd82bfdeee05a67f76c28db", "message": "Update context files with uriProcessor", "committedDate": "2020-09-17T19:24:26Z", "type": "commit"}, {"oid": "95aa41dd48b6a5376bc92470a591c7f060c20403", "url": "https://github.com/UNC-Libraries/box-c/commit/95aa41dd48b6a5376bc92470a591c7f060c20403", "message": "Add test to check that non-binaries aren't sent to destroy processors", "committedDate": "2020-09-18T14:26:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzNjIxNw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r491036217", "bodyText": "I think there might be a disconnect between the messages generated and how they are processed by BinaryInfoProcessor. It looks like this is compiling all the deleted binaries into a single message, but the processor that receives this message only interacts with one objects details.\nI'd suggest changing this method to only take the details for one binary, and then back in DestroyObjectsJob, sending a separate message for each object destroyed. The longleaf deregister routes will group stuff into batches as it needs to.", "author": "bbpennel", "createdAt": "2020-09-18T15:44:44Z", "path": "persistence/src/main/java/edu/unc/lib/dl/services/DestroyObjectsMessageHelpers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+\n+import edu.unc.lib.dl.fedora.PID;\n+\n+/**\n+ * Helper methods for destroy objects messages\n+ *\n+ * @author lfarrell\n+ */\n+public class DestroyObjectsMessageHelpers {\n+    private DestroyObjectsMessageHelpers() {\n+    }\n+\n+    /**\n+     * Sends a remove object message from the repository message\n+     *\n+     * @param  userid user making request\n+     * @param objsToDestroy objects removed\n+     * @return id of operation message\n+     */\n+    public static Document makeDestroyOperationBody(String userid, PID pid,\n+                                                    Map<URI, Map<String, String>> objsToDestroy) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+\n+        entry.addContent(new Element(\"pid\", CDR_MESSAGE_NS).setText(pid.getRepositoryPath()));\n+\n+        Element pidList = new Element(\"objsToDestroy\", ATOM_NS);\n+\n+        objsToDestroy.forEach((contentUri, metadata) -> {", "originalCommit": "95aa41dd48b6a5376bc92470a591c7f060c20403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e4ed244d665deb1d1ded8b61c039d7fbfd58ac6d", "url": "https://github.com/UNC-Libraries/box-c/commit/e4ed244d665deb1d1ded8b61c039d7fbfd58ac6d", "message": "Have message helper send one uri at a time, instead of a batch.", "committedDate": "2020-09-18T18:16:17Z", "type": "commit"}, {"oid": "65d3048e1f982f3704d667832b4505d65589ce78", "url": "https://github.com/UNC-Libraries/box-c/commit/65d3048e1f982f3704d667832b4505d65589ce78", "message": "Add IT test for derivatives cleanup", "committedDate": "2020-09-21T12:44:13Z", "type": "commit"}, {"oid": "e9880a512e5ffcdd621ed687e0e20e091321df77", "url": "https://github.com/UNC-Libraries/box-c/commit/e9880a512e5ffcdd621ed687e0e20e091321df77", "message": "* Allow deletion of collection and admin unit derivatives\n* Add IT test for derivatives cleanup\n* Update route tests", "committedDate": "2020-09-22T20:07:53Z", "type": "commit"}, {"oid": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "url": "https://github.com/UNC-Libraries/box-c/commit/b784678ab140bdc6c40c120227d7f17c2bba76ed", "message": "Adjust invocations for adding non-binary objects being deleted to message list", "committedDate": "2020-09-22T20:31:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMDc0Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494320747", "bodyText": "Looking a bit more closely, I'm realizing that would probably make sense to remove this loop and put the binary deleted message sending down in https://github.com/UNC-Libraries/Carolina-Digital-Repository/blob/b784678ab140bdc6c40c120227d7f17c2bba76ed/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java#L273 since that's where binary cleanup is happening", "author": "bbpennel", "createdAt": "2020-09-24T13:34:15Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -148,6 +155,21 @@ public void run() {\n                             .writeAndClose();\n                 }\n                 indexingMessageSender.sendIndexingOperation(agent.getUsername(), pid, DELETE_SOLR_TREE);\n+                cleanupBinaryUris.forEach((contentUri, metadata) -> {", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyNzc0NA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494327744", "bodyText": "I think instead of this method you can use edu.unc.lib.dl.util.ResourceType.getResourceTypeForUris. It will give you back a ResourceType enum, although it looks like you might need to add a getUri method to the enum since that seems to have been overlooked.", "author": "bbpennel", "createdAt": "2020-09-24T13:43:25Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -159,6 +181,24 @@ public void run() {\n         destroyBinaries();\n     }\n \n+    private String getObjType(List<String> objTypes) {", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMDUxNQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494330515", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!objType.equals(Cdr.FileObject.getURI())) {\n          \n          \n            \n                            if (!(repoObj instanceof FileObject)) {", "author": "bbpennel", "createdAt": "2020-09-24T13:45:41Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -148,6 +155,21 @@ public void run() {\n                             .writeAndClose();\n                 }\n                 indexingMessageSender.sendIndexingOperation(agent.getUsername(), pid, DELETE_SOLR_TREE);\n+                cleanupBinaryUris.forEach((contentUri, metadata) -> {\n+                    Document destroyMsg = makeDestroyOperationBody(agent.getUsername(), contentUri, metadata);\n+                    binaryDestroyedMessageSender.sendMessage(destroyMsg);\n+                });\n+\n+                // Send message for the object itself, unless FileObj which is added in destroyFile() method\n+                if (!objType.equals(Cdr.FileObject.getURI())) {", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzMzYyMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494333620", "bodyText": "Not sure it really makes sense to pass the objects uri as the content uri. How about passing in null, and then having the helper method not add a content uri field if the value is null?", "author": "bbpennel", "createdAt": "2020-09-24T13:48:20Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -148,6 +155,21 @@ public void run() {\n                             .writeAndClose();\n                 }\n                 indexingMessageSender.sendIndexingOperation(agent.getUsername(), pid, DELETE_SOLR_TREE);\n+                cleanupBinaryUris.forEach((contentUri, metadata) -> {\n+                    Document destroyMsg = makeDestroyOperationBody(agent.getUsername(), contentUri, metadata);\n+                    binaryDestroyedMessageSender.sendMessage(destroyMsg);\n+                });\n+\n+                // Send message for the object itself, unless FileObj which is added in destroyFile() method\n+                if (!objType.equals(Cdr.FileObject.getURI())) {\n+                    Map<String, String> metadata = new HashMap<>();\n+                    metadata.put(\"objType\", objType);\n+                    metadata.put(\"pid\", repoObj.getPid().getUUID());\n+                    metadata.put(\"mimeType\", \"\");\n+\n+                    Document destroyMsg = makeDestroyOperationBody(agent.getUsername(), repoObj.getUri(), metadata);", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzNDY0NQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494334645", "bodyText": "Could just not set this and then have the helper method not add the mimetype field to the message if its null, unless you think that will mess things up in the routes", "author": "bbpennel", "createdAt": "2020-09-24T13:49:09Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -148,6 +155,21 @@ public void run() {\n                             .writeAndClose();\n                 }\n                 indexingMessageSender.sendIndexingOperation(agent.getUsername(), pid, DELETE_SOLR_TREE);\n+                cleanupBinaryUris.forEach((contentUri, metadata) -> {\n+                    Document destroyMsg = makeDestroyOperationBody(agent.getUsername(), contentUri, metadata);\n+                    binaryDestroyedMessageSender.sendMessage(destroyMsg);\n+                });\n+\n+                // Send message for the object itself, unless FileObj which is added in destroyFile() method\n+                if (!objType.equals(Cdr.FileObject.getURI())) {\n+                    Map<String, String> metadata = new HashMap<>();\n+                    metadata.put(\"objType\", objType);\n+                    metadata.put(\"pid\", repoObj.getPid().getUUID());\n+                    metadata.put(\"mimeType\", \"\");", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMzNzg3Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494337876", "bodyText": "pidList doesn't really seem to describe what this element is, maybe objToDestroyEl. Also, I'd suggest using CDR_MESSAGE_NS since I don't think there's an objectToDestroy element in atom", "author": "bbpennel", "createdAt": "2020-09-24T13:53:06Z", "path": "persistence/src/main/java/edu/unc/lib/dl/services/DestroyObjectsMessageHelpers.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+\n+/**\n+ * Helper methods for destroy objects messages\n+ *\n+ * @author lfarrell\n+ */\n+public class DestroyObjectsMessageHelpers {\n+    private DestroyObjectsMessageHelpers() {\n+    }\n+\n+    /**\n+     * Sends a remove object message from the repository message\n+     *\n+     * @param  userid user making request\n+     * @param contentUri uri of object removed\n+     * @param metadata metadata for object removed\n+     * @return id of operation message\n+     */\n+    public static Document makeDestroyOperationBody(String userid, URI contentUri, Map<String, String> metadata) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+\n+        String pidId = metadata.get(\"pid\");\n+        PID pid = PIDs.get(pidId);\n+\n+        entry.addContent(new Element(\"pid\", CDR_MESSAGE_NS).setText(pid.getRepositoryPath()));\n+\n+        Element pidList = new Element(\"objToDestroy\", ATOM_NS);", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MTY0NA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494341644", "bodyText": "I'm not sure this is making the structure you're intending? I believe the message is going to end up\n<objToDestroy>\n   <contentUri>\n          file://whatever\n          <objType>FileObject</objType>\n          ...\n    </contentUri>\n</objToDestroy>\n\nSeems like you probably want to add each field to objToDestroy instead of entryValues (which is actually contentUri). Fixing up the names of the variables might help some", "author": "bbpennel", "createdAt": "2020-09-24T13:57:53Z", "path": "persistence/src/main/java/edu/unc/lib/dl/services/DestroyObjectsMessageHelpers.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+\n+/**\n+ * Helper methods for destroy objects messages\n+ *\n+ * @author lfarrell\n+ */\n+public class DestroyObjectsMessageHelpers {\n+    private DestroyObjectsMessageHelpers() {\n+    }\n+\n+    /**\n+     * Sends a remove object message from the repository message\n+     *\n+     * @param  userid user making request\n+     * @param contentUri uri of object removed\n+     * @param metadata metadata for object removed\n+     * @return id of operation message\n+     */\n+    public static Document makeDestroyOperationBody(String userid, URI contentUri, Map<String, String> metadata) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+\n+        String pidId = metadata.get(\"pid\");\n+        PID pid = PIDs.get(pidId);\n+\n+        entry.addContent(new Element(\"pid\", CDR_MESSAGE_NS).setText(pid.getRepositoryPath()));\n+\n+        Element pidList = new Element(\"objToDestroy\", ATOM_NS);\n+\n+        Element entryValues = new Element(\"contentUri\").setText(contentUri.toString());", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTQ1Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494349457", "bodyText": "i'm kind of surprised this is only sending two messages, isn't it deleting the Folder, Work and File?", "author": "bbpennel", "createdAt": "2020-09-24T14:07:22Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -296,7 +317,10 @@ public void destroyFolderTest() {\n         assertTrue(folderResc.hasProperty(RDF.type, Cdr.Tombstone));\n \n         verify(indexingMessageSender).sendIndexingOperation(anyString(), eq(folderObjPid), eq(DELETE_SOLR_TREE));\n-        verify(binaryDestroyedMessageSender).sendMessage(contentUri.toString());\n+\n+        verify(binaryDestroyedMessageSender, times(2)).sendMessage(docCaptor.capture());", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMjQ0Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r495132447", "bodyText": "Hmm, I think this is because it's not checking for members so it only gets the folder and file. Seems bad.", "author": "lfarrell", "createdAt": "2020-09-25T17:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MjAzNw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494352037", "bodyText": "I don't think toString() on a jdom2 Element gives you a representation of the whole element/document, my understanding is you have to use an XmlOutputter to serialize it. Could you check on this? Otherwise I think you might get a lot of false positives. Maybe try an assertion that should fail?", "author": "bbpennel", "createdAt": "2020-09-24T14:10:52Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -377,11 +401,34 @@ private void initializeJob(List<PID> objsToDestroy) {\n         job.setBinaryDestroyedMessageSender(binaryDestroyedMessageSender);\n     }\n \n+    private void assertMessagesEqual(Document returnedDoc,\n+                                 Map<URI, Map<String, String>> binaryDerivs) {\n+\n+        binaryDerivs.forEach((contentUri, metadata) -> {\n+            Document destroyMsg = makeDestroyOperationBody(agent.getUsername(), contentUri, metadata);\n+            assertEquals(returnedDoc.getRootElement().toString(), destroyMsg.getRootElement().toString());", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NDc4OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494354789", "bodyText": "If more than one message was sent, you'd need to call docCaptor.getAllValues(); to get any documents past the first one.", "author": "bbpennel", "createdAt": "2020-09-24T14:14:44Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -296,7 +317,10 @@ public void destroyFolderTest() {\n         assertTrue(folderResc.hasProperty(RDF.type, Cdr.Tombstone));\n \n         verify(indexingMessageSender).sendIndexingOperation(anyString(), eq(folderObjPid), eq(DELETE_SOLR_TREE));\n-        verify(binaryDestroyedMessageSender).sendMessage(contentUri.toString());\n+\n+        verify(binaryDestroyedMessageSender, times(2)).sendMessage(docCaptor.capture());\n+        Document returnedMsgDoc = docCaptor.getValue();", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NzgyMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494357820", "bodyText": "Since I think there are supposed to be messages getting sent now for things that aren't binaries, you may need to adjust the way this method works. It might make sense to change to assertMessagePresent(List<Document> returnedDocs, ...) where you pass in specific details of the message you are expecting, like pid, mimetype, object type, maybe content uri, and then check for those fields versus trying to compare the whole thing as a string", "author": "bbpennel", "createdAt": "2020-09-24T14:18:34Z", "path": "persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java", "diffHunk": "@@ -377,11 +401,34 @@ private void initializeJob(List<PID> objsToDestroy) {\n         job.setBinaryDestroyedMessageSender(binaryDestroyedMessageSender);\n     }\n \n+    private void assertMessagesEqual(Document returnedDoc,", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MDQ3Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494360473", "bodyText": "I think you might have to make this into a single .to(\"activemq://activemq:queue:filter.longleaf.deregister\", \"{{cdr.destroy.derivatives.stream.camel}}\") for the multicast to apply to both?", "author": "bbpennel", "createdAt": "2020-09-24T14:21:59Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroy/DestroyObjectsRouter.java", "diffHunk": "@@ -44,5 +44,13 @@ public void configure() throws Exception {\n             .routeId(\"CdrDestroyObjects\")\n             .log(DEBUG, \"Received destroy objects message\")\n             .bean(destroyObjectsProcessor);\n+\n+        from(\"{{cdr.destroy.post.stream.camel}}\")\n+            .routeId(\"CdrDestroyObjectsCleanup\")\n+            .log(DEBUG, \"Received destroy objects cleanup message\")\n+            .multicast()\n+            .parallelProcessing()\n+            .to(\"activemq://activemq:queue:filter.longleaf.deregister\")", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NDc2Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494364766", "bodyText": "Is there a reason to add both pidId and pid? You should be able to initialize a PID object from either, and can call getId to get just the identifier portion", "author": "bbpennel", "createdAt": "2020-09-24T14:27:26Z", "path": "persistence/src/main/java/edu/unc/lib/dl/services/DestroyObjectsMessageHelpers.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import edu.unc.lib.dl.fedora.PID;\n+\n+/**\n+ * Helper methods for destroy objects messages\n+ *\n+ * @author lfarrell\n+ */\n+public class DestroyObjectsMessageHelpers {\n+    private DestroyObjectsMessageHelpers() {\n+    }\n+\n+    /**\n+     * Sends a remove object message from the repository message\n+     *\n+     * @param  userid user making request\n+     * @param contentUri uri of object removed\n+     * @param metadata metadata for object removed\n+     * @return id of operation message\n+     */\n+    public static Document makeDestroyOperationBody(String userid, URI contentUri, Map<String, String> metadata) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+\n+        String pidId = metadata.get(\"pid\");\n+        PID pid = PIDs.get(pidId);\n+\n+        entry.addContent(new Element(\"pid\", CDR_MESSAGE_NS).setText(pid.getRepositoryPath()));\n+\n+        Element pidList = new Element(\"objToDestroy\", ATOM_NS);\n+\n+        Element entryValues = new Element(\"contentUri\").setText(contentUri.toString());\n+        entryValues.addContent(new Element(\"objType\").setText(metadata.get(\"objType\")));\n+        entryValues.addContent(new Element(\"mimetype\").setText(metadata.get(\"mimeType\")));\n+        entryValues.addContent(new Element(\"pidId\").setText(metadata.get(\"pid\")));", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NzU3Mg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494367572", "bodyText": "Alternatively you could do:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String objType = content.getChild(\"objType\").getTextTrim();\n          \n          \n            \n                    ResourceType objType = ResourceType.getResourceTypeByUri(content.getChild(\"objType\").getTextTrim());\n          \n      \n    \n    \n  \n\nYou could then do enum equals checks. It doesn't make as big a difference here though.", "author": "bbpennel", "createdAt": "2020-09-24T14:30:55Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/BinaryInfoProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrObjectType;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.services.camel.util.MessageUtil;\n+import edu.unc.lib.dl.xml.JDOMNamespaceUtil;\n+\n+/**\n+ * Processor to set mimetype and Id of derivative to delete\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+public class BinaryInfoProcessor implements Processor {\n+    private final String derivativeBasePath;\n+    private static final Logger log = LoggerFactory.getLogger(BinaryInfoProcessor.class);\n+\n+    public BinaryInfoProcessor(String derivativeBasePath) {\n+        this.derivativeBasePath = derivativeBasePath;\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        final Message in = exchange.getIn();\n+        Document msgBody = MessageUtil.getDocumentBody(in);\n+\n+        if (msgBody == null) {\n+            log.warn(\"Event message contained no body\");\n+            return;\n+        }\n+\n+        Element body = msgBody.getRootElement();\n+        Element content = body.getChild(\"objToDestroy\", JDOMNamespaceUtil.ATOM_NS)\n+                .getChild(\"contentUri\");\n+\n+        String objType = content.getChild(\"objType\").getTextTrim();", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2OTEyMQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494369121", "bodyText": "Use getChildTextTrim for getting pretty much all of these fields values. A little more concise, but also it won't give a null pointer exception if the field isn't present.", "author": "bbpennel", "createdAt": "2020-09-24T14:32:52Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/BinaryInfoProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrObjectType;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.services.camel.util.MessageUtil;\n+import edu.unc.lib.dl.xml.JDOMNamespaceUtil;\n+\n+/**\n+ * Processor to set mimetype and Id of derivative to delete\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+public class BinaryInfoProcessor implements Processor {\n+    private final String derivativeBasePath;\n+    private static final Logger log = LoggerFactory.getLogger(BinaryInfoProcessor.class);\n+\n+    public BinaryInfoProcessor(String derivativeBasePath) {\n+        this.derivativeBasePath = derivativeBasePath;\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        final Message in = exchange.getIn();\n+        Document msgBody = MessageUtil.getDocumentBody(in);\n+\n+        if (msgBody == null) {\n+            log.warn(\"Event message contained no body\");\n+            return;\n+        }\n+\n+        Element body = msgBody.getRootElement();\n+        Element content = body.getChild(\"objToDestroy\", JDOMNamespaceUtil.ATOM_NS)\n+                .getChild(\"contentUri\");\n+\n+        String objType = content.getChild(\"objType\").getTextTrim();\n+\n+        // Skip works and folders\n+        if (objType.equals(Cdr.Work.getURI()) || objType.equals(Cdr.Folder.getURI())) {\n+            return;\n+        }\n+\n+        String mimeType = content.getChild(\"mimetype\").getTextTrim();", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NTYwMw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494375603", "bodyText": "This is used to track down user added thumbnails, isn't it? The source images are located in sourceImages.dir I believe. We probably should be cleaning those up. It might make sense to pass that along as the content uri for collections/etc instead of the path to the small thumbnail? I don't think you will be able to assume its mimetype, but can probably set something like image/*, I believe that would pass.", "author": "bbpennel", "createdAt": "2020-09-24T14:41:16Z", "path": "services-camel/src/main/webapp/WEB-INF/service-context.xml", "diffHunk": "@@ -219,6 +219,30 @@\n     <bean id=\"fulltextProcessor\" class=\"edu.unc.lib.dl.services.camel.fulltext.FulltextProcessor\">\n         <constructor-arg value=\"${cdr.enhancement.path.fulltext}\" />\n     </bean>\n+\n+    <bean id=\"binaryInfoProcessor\" class=\"edu.unc.lib.dl.services.camel.destroyDerivatives.BinaryInfoProcessor\">\n+        <constructor-arg value=\"${cdr.enhancement.path.thumbnail.small}\" />", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4OTI1Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r494389253", "bodyText": "Should probably be the cdr namespace", "author": "bbpennel", "createdAt": "2020-09-24T14:58:41Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/GetUrisProcessor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.longleaf;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.services.camel.util.MessageUtil;\n+\n+/**\n+ * Retrieve contentUri from JDOM document and send out as a list\n+ *\n+ * @author lfarrell\n+ */\n+public class GetUrisProcessor implements Processor {\n+    private static final Logger log = LoggerFactory.getLogger(GetUrisProcessor.class);\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Message in = exchange.getIn();\n+        Document doc = MessageUtil.getDocumentBody(in);\n+\n+        if (doc == null) {\n+            log.warn(\"Event message contained no body with contentUri to deregister\");\n+            return;\n+        }\n+\n+        Element root = doc.getRootElement();\n+        String contentUri = root.getChild(\"objToDestroy\", ATOM_NS)", "originalCommit": "b784678ab140bdc6c40c120227d7f17c2bba76ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e1800de796bc187748d1233f5f4389a63694797c", "url": "https://github.com/UNC-Libraries/box-c/commit/e1800de796bc187748d1233f5f4389a63694797c", "message": "deriv changes", "committedDate": "2020-09-24T20:11:04Z", "type": "commit"}, {"oid": "dc8ecf509579e77d1e2acd477f4693490019b706", "url": "https://github.com/UNC-Libraries/box-c/commit/dc8ecf509579e77d1e2acd477f4693490019b706", "message": "Add cleanup for collection src images", "committedDate": "2020-09-29T19:11:03Z", "type": "commit"}, {"oid": "02b18627e397648edf277d34fd568f6cb7c18a6a", "url": "https://github.com/UNC-Libraries/box-c/commit/02b18627e397648edf277d34fd568f6cb7c18a6a", "message": "Fix helper namespace", "committedDate": "2020-09-29T20:08:05Z", "type": "commit"}, {"oid": "8a3af25c08462dfab104757859db08ca2553297d", "url": "https://github.com/UNC-Libraries/box-c/commit/8a3af25c08462dfab104757859db08ca2553297d", "message": "Send message for every object destroyed.", "committedDate": "2020-09-30T12:22:41Z", "type": "commit"}, {"oid": "2b810e373f898e556f70a658c130be8cd5c0d0db", "url": "https://github.com/UNC-Libraries/box-c/commit/2b810e373f898e556f70a658c130be8cd5c0d0db", "message": "Fix test, so it can send destroy derivatives message", "committedDate": "2020-09-30T13:50:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDc2MA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498294760", "bodyText": "seems like you could remove repoUri here and pull it from repoObj within the method since you're already checking for file vs non-file", "author": "bbpennel", "createdAt": "2020-10-01T14:36:38Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -159,24 +164,52 @@ public void run() {\n         destroyBinaries();\n     }\n \n+    private void sendDestroyDerivativesMsg(URI repoUri, RepositoryObject repoObj) {", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NzA0Ng==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498297046", "bodyText": "It might be okay to have a single call to sendDestroyDerivativesMsg after the type check conditionals, since it seems like just sendDestroyDerivativesMsg(rootOfTree); would work for both cases", "author": "bbpennel", "createdAt": "2020-10-01T14:39:40Z", "path": "persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java", "diffHunk": "@@ -159,24 +164,52 @@ public void run() {\n         destroyBinaries();\n     }\n \n+    private void sendDestroyDerivativesMsg(URI repoUri, RepositoryObject repoObj) {\n+        Map<String, String> metadata = new HashMap<>();\n+        String objType = ResourceType.getResourceTypeForUris(repoObj.getTypes()).getUri();\n+        metadata.put(\"objType\", objType);\n+        String qualifiedId;\n+\n+        if (repoObj instanceof FileObject) {\n+            FileObject fileObj = (FileObject) repoObj;\n+            BinaryObject binaryObj = fileObj.getOriginalFile();\n+            String mimetype = binaryObj.getMimetype();\n+            metadata.put(\"mimeType\", mimetype);\n+            qualifiedId = binaryObj.getPid().getQualifiedId();\n+        } else {\n+            qualifiedId = repoObj.getPid().getQualifiedId();\n+        }\n+        metadata.put(\"pid\", qualifiedId);\n+\n+        Document destroyMsg = makeDestroyOperationBody(agent.getUsername(), repoUri, metadata);\n+        binaryDestroyedMessageSender.sendMessage(destroyMsg);\n+    }\n+\n     private void destroyTree(RepositoryObject rootOfTree) throws FedoraException, IOException,\n             FcrepoOperationFailedException {\n         log.debug(\"Performing destroy on object {} of type {}\",\n                 rootOfTree.getPid().getQualifiedId(), rootOfTree.getClass().getName());\n+\n         if (rootOfTree instanceof ContentContainerObject) {\n             ContentContainerObject container = (ContentContainerObject) rootOfTree;\n             List<ContentObject> members = container.getMembers();\n+\n             for (ContentObject member : members) {\n                 deletedObjIds.add(member.getPid().getUUID());\n                 destroyTree(member);\n+\n             }\n+            sendDestroyDerivativesMsg(rootOfTree.getUri(), rootOfTree);", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5OTI3NA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498299274", "bodyText": "I'm not sure why the metadata element is needed, seems like you could add these fields directly to objToDestroy unless there's a need to keep them separate from the content uri? If you do need to keep this element, you can remove the extra parenthesizes and should add the CDR_MESSAGE_NS namespace", "author": "bbpennel", "createdAt": "2020-10-01T14:42:37Z", "path": "persistence/src/main/java/edu/unc/lib/dl/services/DestroyObjectsMessageHelpers.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+\n+/**\n+ * Helper methods for destroy objects messages\n+ *\n+ * @author lfarrell\n+ */\n+public class DestroyObjectsMessageHelpers {\n+    private DestroyObjectsMessageHelpers() {\n+    }\n+\n+    /**\n+     * Sends a remove object message from the repository message\n+     *\n+     * @param  userid user making request\n+     * @param contentUri uri of object removed\n+     * @param metadata metadata for object removed\n+     * @return id of operation message\n+     */\n+    public static Document makeDestroyOperationBody(String userid, URI contentUri, Map<String, String> metadata) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+\n+        Element objToDestroyEl = new Element(\"objToDestroy\", CDR_MESSAGE_NS);\n+        entry.addContent(objToDestroyEl);\n+\n+        Element contentUriValue = new Element(\"contentUri\").setText(contentUri.toString());\n+        objToDestroyEl.addContent(contentUriValue);\n+\n+        Element metadataValues = new Element((\"metadata\"));", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDExNQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498300115", "bodyText": "You should add the CDR_MESSAGE_NS namespace to all these child elements, otherwise they'd technically be in a different namespace (just attributes inherit the namespace of their parent)", "author": "bbpennel", "createdAt": "2020-10-01T14:43:46Z", "path": "persistence/src/main/java/edu/unc/lib/dl/services/DestroyObjectsMessageHelpers.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+\n+/**\n+ * Helper methods for destroy objects messages\n+ *\n+ * @author lfarrell\n+ */\n+public class DestroyObjectsMessageHelpers {\n+    private DestroyObjectsMessageHelpers() {\n+    }\n+\n+    /**\n+     * Sends a remove object message from the repository message\n+     *\n+     * @param  userid user making request\n+     * @param contentUri uri of object removed\n+     * @param metadata metadata for object removed\n+     * @return id of operation message\n+     */\n+    public static Document makeDestroyOperationBody(String userid, URI contentUri, Map<String, String> metadata) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+\n+        Element objToDestroyEl = new Element(\"objToDestroy\", CDR_MESSAGE_NS);\n+        entry.addContent(objToDestroyEl);\n+\n+        Element contentUriValue = new Element(\"contentUri\").setText(contentUri.toString());", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDYyMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498300620", "bodyText": "might as well use the mimetype variable instead of retrieving it again", "author": "bbpennel", "createdAt": "2020-10-01T14:44:25Z", "path": "persistence/src/main/java/edu/unc/lib/dl/services/DestroyObjectsMessageHelpers.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services;\n+\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.ATOM_NS;\n+import static edu.unc.lib.dl.xml.JDOMNamespaceUtil.CDR_MESSAGE_NS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+\n+/**\n+ * Helper methods for destroy objects messages\n+ *\n+ * @author lfarrell\n+ */\n+public class DestroyObjectsMessageHelpers {\n+    private DestroyObjectsMessageHelpers() {\n+    }\n+\n+    /**\n+     * Sends a remove object message from the repository message\n+     *\n+     * @param  userid user making request\n+     * @param contentUri uri of object removed\n+     * @param metadata metadata for object removed\n+     * @return id of operation message\n+     */\n+    public static Document makeDestroyOperationBody(String userid, URI contentUri, Map<String, String> metadata) {\n+        Document msg = new Document();\n+        Element entry = new Element(\"entry\", ATOM_NS);\n+\n+        entry.addContent(new Element(\"author\", ATOM_NS)\n+                .addContent(new Element(\"name\", ATOM_NS).setText(userid)));\n+\n+        Element objToDestroyEl = new Element(\"objToDestroy\", CDR_MESSAGE_NS);\n+        entry.addContent(objToDestroyEl);\n+\n+        Element contentUriValue = new Element(\"contentUri\").setText(contentUri.toString());\n+        objToDestroyEl.addContent(contentUriValue);\n+\n+        Element metadataValues = new Element((\"metadata\"));\n+        metadataValues.addContent(new Element(\"objType\").setText(metadata.get(\"objType\")));\n+\n+        String mimetype = metadata.get(\"mimeType\");\n+        if (mimetype != null) {\n+            metadataValues.addContent(new Element(\"mimeType\").setText(metadata.get(\"mimeType\")));", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMjUxOA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498312518", "bodyText": "It might be clearer to name this class something like \"DestroyedMessageProcessor\" or \"ExtractDestroyedInfoProcessor\" or the like, since the purpose seems to be pull details out of a message about destroyed objects. BinaryInfo seems ambiguous about where the info comes from and the fact that it handles types other than binaries", "author": "bbpennel", "createdAt": "2020-10-01T14:59:43Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/BinaryInfoProcessor.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPath;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrObjectType;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import edu.unc.lib.dl.fcrepo4.PIDs;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.Processor;\n+import org.apache.jena.sparql.function.library.uuid;\n+import org.jdom2.Document;\n+import org.jdom2.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.services.camel.util.MessageUtil;\n+import edu.unc.lib.dl.xml.JDOMNamespaceUtil;\n+\n+/**\n+ * Processor to set mimetype and Id of derivative to delete\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+public class BinaryInfoProcessor implements Processor {", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNTQ1Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498315457", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .log(LoggingLevel.DEBUG, \"Destroying collection imag upload\")\n          \n          \n            \n                            .log(LoggingLevel.DEBUG, \"Destroying collection image upload\")", "author": "bbpennel", "createdAt": "2020-10-01T15:03:46Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrObjectType;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.LoggingLevel;\n+import org.apache.camel.builder.RouteBuilder;\n+\n+import edu.unc.lib.dl.rdf.Cdr;\n+import edu.unc.lib.dl.services.camel.fulltext.FulltextProcessor;\n+import edu.unc.lib.dl.services.camel.images.ImageDerivativeProcessor;\n+\n+/**\n+ * Router to process requests to destroy derivatives for an object\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+public class DestroyDerivativesRouter extends RouteBuilder {\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    public void configure() throws Exception {\n+        onException(Exception.class)\n+                .redeliveryDelay(\"{{error.retryDelay}}\")\n+                .maximumRedeliveries(\"{{error.maxRedeliveries}}\")\n+                .backOffMultiplier(\"{{error.backOffMultiplier}}\")\n+                .retryAttemptedLogLevel(LoggingLevel.WARN);\n+\n+        from(\"{{cdr.destroy.derivatives.stream.camel}}\")\n+                .routeId(\"CdrDestroyDerivatives\")\n+                .startupOrder(204)\n+                .log(LoggingLevel.DEBUG, \"Received destroy derivatives message\")\n+                .process(binaryInfoProcessor)\n+                .choice()\n+                    .when(method(ImageDerivativeProcessor.class, \"allowedImageType\"))\n+                        .to(\"direct:image.derivatives.destroy\")\n+                    .when(method(FulltextProcessor.class, \"allowedTextType\"))\n+                        .to(\"direct:fulltext.derivatives.destroy\")\n+                .end();\n+\n+        from(\"direct:fulltext.derivatives.destroy\")\n+                .routeId(\"CdrDestroyFullText\")\n+                .startupOrder(203)\n+                .log(LoggingLevel.DEBUG, \"Destroying derivative text files\")\n+                .bean(destroyFulltextProcessor);\n+\n+        from(\"direct:image.derivatives.destroy\")\n+                .routeId(\"CdrDestroyImage\")\n+                .startupOrder(202)\n+                .log(LoggingLevel.DEBUG, \"Destroying derivative thumbnails\")\n+                .bean(destroySmallThumbnailProcessor)\n+                .bean(destroyLargeThumbnailProcessor)\n+                .choice()\n+                    .when(simple(\"${headers['\" + CdrObjectType + \"']} == '\" + Cdr.FileObject.getURI() + \"'\"))\n+                        .to(\"direct:image.access.destroy\")\n+                    .when(simple(\"${headers['CollectionThumb']} != null\"))\n+                        .to(\"direct:image.collection.destroy\")\n+                .end();\n+\n+        from(\"direct:image.access.destroy\")\n+                .routeId(\"CdrDestroyAccessCopy\")\n+                .startupOrder(201)\n+                .log(LoggingLevel.DEBUG, \"Destroying access copy\")\n+                .bean(destroyAccessCopyProcessor);\n+\n+        from(\"direct:image.collection.destroy\")\n+                .routeId(\"CdrDestroyCollectionUpload\")\n+                .startupOrder(200)\n+                .log(LoggingLevel.DEBUG, \"Destroying collection imag upload\")", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NDkyMQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498394921", "bodyText": "you can remove this duplicate check (same check is at line 216)", "author": "bbpennel", "createdAt": "2020-10-01T17:08:16Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dl.acl.fcrepo4.InheritedAclFactory;\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsRequest;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationManagerImpl;\n+import edu.unc.lib.dl.search.solr.model.ObjectPath;\n+import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;\n+import edu.unc.lib.dl.services.IndexingMessageSender;\n+import edu.unc.lib.dl.services.MessageSender;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/jms-context.xml\"),\n+        @ContextConfiguration(\"/spring-test/acl-service-context.xml\"),\n+        @ContextConfiguration(\"/destroy-derivatives-router-it-context.xml\")\n+})\n+public class DestroyDerivativesRouterIT {\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjectFactory;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private ObjectPathFactory pathFactory;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private StorageLocationManagerImpl locationManager;\n+    @Autowired\n+    private BinaryTransferService transferService;\n+    @Autowired\n+    private AccessControlService aclService;\n+    @Autowired\n+    private InheritedAclFactory inheritedAclFactory;\n+    @Autowired\n+    private RepositoryInitializer repositoryInitializer;\n+    @Autowired\n+    private FedoraSparqlUpdateService sparqlUpdateService;\n+    @Autowired\n+    private PremisLoggerFactory premisLoggerFactory;\n+    @Autowired\n+    private CamelContext cdrDestroyDerivatives;\n+    @Autowired\n+    private MessageSender binaryDestroyedMessageSender;\n+\n+    @Mock\n+    private IndexingMessageSender indexingMessageSender;\n+    @Mock\n+    private ObjectPath path;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    private MarkForDeletionJob deletionJob;\n+\n+    private DestroyObjectsJob destroyJob;\n+\n+    private AgentPrincipals agent;\n+\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collection;\n+\n+    private final static String LOC1_ID = \"loc1\";\n+\n+    @Before\n+    public void init() {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(baseAddress);\n+\n+        repositoryInitializer.initializeRepository();\n+        PID contentRootPid = getContentRootPid();\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(\"edu:unc:lib:cdr:admin\");\n+        agent = new AgentPrincipals(\"testUser\", testPrincipals);\n+\n+        ContentRootObject contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+        adminUnit = repoObjectFactory.createAdminUnit(new AclModelBuilder(\"Unit\")\n+                .addUnitOwner(agent.getUsernameUri())\n+                .model);\n+\n+        collection = repoObjectFactory.createCollectionObject(null);\n+\n+        contentRoot.addMember(adminUnit);\n+        adminUnit.addMember(collection);\n+\n+        reset(destroyCollectionSrcImgProcessor);\n+        reset(destroySmallThumbnailProcessor);\n+        reset(destroyLargeThumbnailProcessor);\n+        reset(destroyAccessCopyProcessor);\n+        reset(destroyFulltextProcessor);\n+\n+        treeIndexer = new RepositoryObjectTreeIndexer(queryModel, fcrepoClient);\n+        premisLoggerFactory.setBinaryTransferService(transferService);\n+\n+        when(pathFactory.getPath(any(PID.class))).thenReturn(path);\n+        when(path.toNamePath()).thenReturn(\"path/to/object\");\n+        when(path.toIdPath()).thenReturn(\"pid0/pid1/pid2/pid3\");\n+    }\n+\n+    @Test\n+    public void destroyImageTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"image/png\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NjYwOQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498396609", "bodyText": "please use:\n@Rule\n    public final TemporaryFolder tmpFolder = new TemporaryFolder();\n\nto create a temp directory and put the file into there. The target directory isn't too bad, but won't get automatically cleaned up (in case the test fails) without a mvn clean", "author": "bbpennel", "createdAt": "2020-10-01T17:11:25Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dl.acl.fcrepo4.InheritedAclFactory;\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsRequest;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationManagerImpl;\n+import edu.unc.lib.dl.search.solr.model.ObjectPath;\n+import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;\n+import edu.unc.lib.dl.services.IndexingMessageSender;\n+import edu.unc.lib.dl.services.MessageSender;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/jms-context.xml\"),\n+        @ContextConfiguration(\"/spring-test/acl-service-context.xml\"),\n+        @ContextConfiguration(\"/destroy-derivatives-router-it-context.xml\")\n+})\n+public class DestroyDerivativesRouterIT {\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjectFactory;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private ObjectPathFactory pathFactory;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private StorageLocationManagerImpl locationManager;\n+    @Autowired\n+    private BinaryTransferService transferService;\n+    @Autowired\n+    private AccessControlService aclService;\n+    @Autowired\n+    private InheritedAclFactory inheritedAclFactory;\n+    @Autowired\n+    private RepositoryInitializer repositoryInitializer;\n+    @Autowired\n+    private FedoraSparqlUpdateService sparqlUpdateService;\n+    @Autowired\n+    private PremisLoggerFactory premisLoggerFactory;\n+    @Autowired\n+    private CamelContext cdrDestroyDerivatives;\n+    @Autowired\n+    private MessageSender binaryDestroyedMessageSender;\n+\n+    @Mock\n+    private IndexingMessageSender indexingMessageSender;\n+    @Mock\n+    private ObjectPath path;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    private MarkForDeletionJob deletionJob;\n+\n+    private DestroyObjectsJob destroyJob;\n+\n+    private AgentPrincipals agent;\n+\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collection;\n+\n+    private final static String LOC1_ID = \"loc1\";\n+\n+    @Before\n+    public void init() {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(baseAddress);\n+\n+        repositoryInitializer.initializeRepository();\n+        PID contentRootPid = getContentRootPid();\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(\"edu:unc:lib:cdr:admin\");\n+        agent = new AgentPrincipals(\"testUser\", testPrincipals);\n+\n+        ContentRootObject contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+        adminUnit = repoObjectFactory.createAdminUnit(new AclModelBuilder(\"Unit\")\n+                .addUnitOwner(agent.getUsernameUri())\n+                .model);\n+\n+        collection = repoObjectFactory.createCollectionObject(null);\n+\n+        contentRoot.addMember(adminUnit);\n+        adminUnit.addMember(collection);\n+\n+        reset(destroyCollectionSrcImgProcessor);\n+        reset(destroySmallThumbnailProcessor);\n+        reset(destroyLargeThumbnailProcessor);\n+        reset(destroyAccessCopyProcessor);\n+        reset(destroyFulltextProcessor);\n+\n+        treeIndexer = new RepositoryObjectTreeIndexer(queryModel, fcrepoClient);\n+        premisLoggerFactory.setBinaryTransferService(transferService);\n+\n+        when(pathFactory.getPath(any(PID.class))).thenReturn(path);\n+        when(path.toNamePath()).thenReturn(\"path/to/object\");\n+        when(path.toIdPath()).thenReturn(\"pid0/pid1/pid2/pid3\");\n+    }\n+\n+    @Test\n+    public void destroyImageTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"image/png\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyCollectionImageTest() throws Exception {\n+        CollectionObject collectionWithImg = repoObjectFactory.createCollectionObject(null);\n+        adminUnit.addMember(collectionWithImg);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        // Create collection thumbnail\n+        PID collPid = collectionWithImg.getPid();\n+        String uuid = collPid.getUUID();\n+        String binarySubPath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + binarySubPath + \"/\" + uuid);", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMDI4Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498400287", "bodyText": "Its a bit surprising that addFileToWork creates a folder, is that necessary? Works can be the children of collections", "author": "bbpennel", "createdAt": "2020-10-01T17:18:08Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dl.acl.fcrepo4.InheritedAclFactory;\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsRequest;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationManagerImpl;\n+import edu.unc.lib.dl.search.solr.model.ObjectPath;\n+import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;\n+import edu.unc.lib.dl.services.IndexingMessageSender;\n+import edu.unc.lib.dl.services.MessageSender;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/jms-context.xml\"),\n+        @ContextConfiguration(\"/spring-test/acl-service-context.xml\"),\n+        @ContextConfiguration(\"/destroy-derivatives-router-it-context.xml\")\n+})\n+public class DestroyDerivativesRouterIT {\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjectFactory;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private ObjectPathFactory pathFactory;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private StorageLocationManagerImpl locationManager;\n+    @Autowired\n+    private BinaryTransferService transferService;\n+    @Autowired\n+    private AccessControlService aclService;\n+    @Autowired\n+    private InheritedAclFactory inheritedAclFactory;\n+    @Autowired\n+    private RepositoryInitializer repositoryInitializer;\n+    @Autowired\n+    private FedoraSparqlUpdateService sparqlUpdateService;\n+    @Autowired\n+    private PremisLoggerFactory premisLoggerFactory;\n+    @Autowired\n+    private CamelContext cdrDestroyDerivatives;\n+    @Autowired\n+    private MessageSender binaryDestroyedMessageSender;\n+\n+    @Mock\n+    private IndexingMessageSender indexingMessageSender;\n+    @Mock\n+    private ObjectPath path;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    private MarkForDeletionJob deletionJob;\n+\n+    private DestroyObjectsJob destroyJob;\n+\n+    private AgentPrincipals agent;\n+\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collection;\n+\n+    private final static String LOC1_ID = \"loc1\";\n+\n+    @Before\n+    public void init() {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(baseAddress);\n+\n+        repositoryInitializer.initializeRepository();\n+        PID contentRootPid = getContentRootPid();\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(\"edu:unc:lib:cdr:admin\");\n+        agent = new AgentPrincipals(\"testUser\", testPrincipals);\n+\n+        ContentRootObject contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+        adminUnit = repoObjectFactory.createAdminUnit(new AclModelBuilder(\"Unit\")\n+                .addUnitOwner(agent.getUsernameUri())\n+                .model);\n+\n+        collection = repoObjectFactory.createCollectionObject(null);\n+\n+        contentRoot.addMember(adminUnit);\n+        adminUnit.addMember(collection);\n+\n+        reset(destroyCollectionSrcImgProcessor);\n+        reset(destroySmallThumbnailProcessor);\n+        reset(destroyLargeThumbnailProcessor);\n+        reset(destroyAccessCopyProcessor);\n+        reset(destroyFulltextProcessor);\n+\n+        treeIndexer = new RepositoryObjectTreeIndexer(queryModel, fcrepoClient);\n+        premisLoggerFactory.setBinaryTransferService(transferService);\n+\n+        when(pathFactory.getPath(any(PID.class))).thenReturn(path);\n+        when(path.toNamePath()).thenReturn(\"path/to/object\");\n+        when(path.toIdPath()).thenReturn(\"pid0/pid1/pid2/pid3\");\n+    }\n+\n+    @Test\n+    public void destroyImageTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"image/png\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyCollectionImageTest() throws Exception {\n+        CollectionObject collectionWithImg = repoObjectFactory.createCollectionObject(null);\n+        adminUnit.addMember(collectionWithImg);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        // Create collection thumbnail\n+        PID collPid = collectionWithImg.getPid();\n+        String uuid = collPid.getUUID();\n+        String binarySubPath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + binarySubPath + \"/\" + uuid);\n+        FileUtils.writeStringToFile(existingFile, \"thumbnail\", \"UTF-8\");\n+\n+        initMarkForDeletionJob(collPid);\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(collPid));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyCollectionNoImageTest() throws Exception {\n+        CollectionObject collectionWithImg = repoObjectFactory.createCollectionObject(null);\n+        adminUnit.addMember(collectionWithImg);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(collectionWithImg.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(collectionWithImg.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyTextTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        String mimetype = \"text/plain\";\n+        FileObject fileObj = addFileToWork(work, mimetype);\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(work.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void invalidTypeTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"application/octet-stream\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    private FileObject addFileToWork(WorkObject work, String mimetype) throws Exception {\n+        FolderObject folder = repoObjectFactory.createFolderObject(null);", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMTUwOA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498401508", "bodyText": "It'd probably be fine to save a step by changing this method to markObjectForDeletion and have it immediately run the job. Then you could also remove the deletionJob instance variable", "author": "bbpennel", "createdAt": "2020-10-01T17:20:23Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dl.acl.fcrepo4.InheritedAclFactory;\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsRequest;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationManagerImpl;\n+import edu.unc.lib.dl.search.solr.model.ObjectPath;\n+import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;\n+import edu.unc.lib.dl.services.IndexingMessageSender;\n+import edu.unc.lib.dl.services.MessageSender;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/jms-context.xml\"),\n+        @ContextConfiguration(\"/spring-test/acl-service-context.xml\"),\n+        @ContextConfiguration(\"/destroy-derivatives-router-it-context.xml\")\n+})\n+public class DestroyDerivativesRouterIT {\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjectFactory;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private ObjectPathFactory pathFactory;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private StorageLocationManagerImpl locationManager;\n+    @Autowired\n+    private BinaryTransferService transferService;\n+    @Autowired\n+    private AccessControlService aclService;\n+    @Autowired\n+    private InheritedAclFactory inheritedAclFactory;\n+    @Autowired\n+    private RepositoryInitializer repositoryInitializer;\n+    @Autowired\n+    private FedoraSparqlUpdateService sparqlUpdateService;\n+    @Autowired\n+    private PremisLoggerFactory premisLoggerFactory;\n+    @Autowired\n+    private CamelContext cdrDestroyDerivatives;\n+    @Autowired\n+    private MessageSender binaryDestroyedMessageSender;\n+\n+    @Mock\n+    private IndexingMessageSender indexingMessageSender;\n+    @Mock\n+    private ObjectPath path;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    private MarkForDeletionJob deletionJob;\n+\n+    private DestroyObjectsJob destroyJob;\n+\n+    private AgentPrincipals agent;\n+\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collection;\n+\n+    private final static String LOC1_ID = \"loc1\";\n+\n+    @Before\n+    public void init() {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(baseAddress);\n+\n+        repositoryInitializer.initializeRepository();\n+        PID contentRootPid = getContentRootPid();\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(\"edu:unc:lib:cdr:admin\");\n+        agent = new AgentPrincipals(\"testUser\", testPrincipals);\n+\n+        ContentRootObject contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+        adminUnit = repoObjectFactory.createAdminUnit(new AclModelBuilder(\"Unit\")\n+                .addUnitOwner(agent.getUsernameUri())\n+                .model);\n+\n+        collection = repoObjectFactory.createCollectionObject(null);\n+\n+        contentRoot.addMember(adminUnit);\n+        adminUnit.addMember(collection);\n+\n+        reset(destroyCollectionSrcImgProcessor);\n+        reset(destroySmallThumbnailProcessor);\n+        reset(destroyLargeThumbnailProcessor);\n+        reset(destroyAccessCopyProcessor);\n+        reset(destroyFulltextProcessor);\n+\n+        treeIndexer = new RepositoryObjectTreeIndexer(queryModel, fcrepoClient);\n+        premisLoggerFactory.setBinaryTransferService(transferService);\n+\n+        when(pathFactory.getPath(any(PID.class))).thenReturn(path);\n+        when(path.toNamePath()).thenReturn(\"path/to/object\");\n+        when(path.toIdPath()).thenReturn(\"pid0/pid1/pid2/pid3\");\n+    }\n+\n+    @Test\n+    public void destroyImageTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"image/png\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyCollectionImageTest() throws Exception {\n+        CollectionObject collectionWithImg = repoObjectFactory.createCollectionObject(null);\n+        adminUnit.addMember(collectionWithImg);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        // Create collection thumbnail\n+        PID collPid = collectionWithImg.getPid();\n+        String uuid = collPid.getUUID();\n+        String binarySubPath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + binarySubPath + \"/\" + uuid);\n+        FileUtils.writeStringToFile(existingFile, \"thumbnail\", \"UTF-8\");\n+\n+        initMarkForDeletionJob(collPid);\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(collPid));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyCollectionNoImageTest() throws Exception {\n+        CollectionObject collectionWithImg = repoObjectFactory.createCollectionObject(null);\n+        adminUnit.addMember(collectionWithImg);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(collectionWithImg.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(collectionWithImg.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyTextTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        String mimetype = \"text/plain\";\n+        FileObject fileObj = addFileToWork(work, mimetype);\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(work.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void invalidTypeTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"application/octet-stream\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    private FileObject addFileToWork(WorkObject work, String mimetype) throws Exception {\n+        FolderObject folder = repoObjectFactory.createFolderObject(null);\n+        collection.addMember(folder);\n+        folder.addMember(work);\n+\n+        String bodyString = \"Content\";\n+        Path storagePath = Paths.get(locationManager.getStorageLocationById(LOC1_ID).getStorageUri(work.getPid()));\n+        Files.createDirectories(storagePath);\n+        File contentFile = Files.createTempFile(storagePath, \"file\", \".txt\").toFile();\n+        String sha1 = \"4f9be057f0ea5d2ba72fd2c810e8d7b9aa98b469\";\n+        String filename = contentFile.getName();\n+        FileUtils.writeStringToFile(contentFile, bodyString, \"UTF-8\");\n+\n+        return work.addDataFile(contentFile.toURI(), filename, mimetype, sha1, null);\n+    }\n+\n+    private void initMarkForDeletionJob(PID pid) {\n+        deletionJob =  new MarkForDeletionJob(pid, \"\", agent, repoObjLoader,", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwMzc4OA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498403788", "bodyText": "Totally optional, but if you don't want to have to initialize lists in order to call this method, you can do initializeDestroyJob(PID... objsToDestroy) in which case you'll get an array of PIDs, which you can stream with Arrays.stream(array). To call it you do initializeDestroyJob(pid1, pid2, etc);\nYou could probably also make the method into destroyObject and immediately execute the job.", "author": "bbpennel", "createdAt": "2020-10-01T17:24:33Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_DEPTH;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPathConstants.HASHED_PATH_SIZE;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.getContentRootPid;\n+import static edu.unc.lib.dl.fcrepo4.RepositoryPaths.idToPath;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.jena.rdf.model.Model;\n+import org.fcrepo.client.FcrepoClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.ContextHierarchy;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+import edu.unc.lib.dl.acl.fcrepo4.InheritedAclFactory;\n+import edu.unc.lib.dl.acl.service.AccessControlService;\n+import edu.unc.lib.dl.acl.util.AccessGroupSet;\n+import edu.unc.lib.dl.acl.util.AgentPrincipals;\n+import edu.unc.lib.dl.event.PremisLoggerFactory;\n+import edu.unc.lib.dl.fcrepo4.AdminUnit;\n+import edu.unc.lib.dl.fcrepo4.CollectionObject;\n+import edu.unc.lib.dl.fcrepo4.ContentRootObject;\n+import edu.unc.lib.dl.fcrepo4.FileObject;\n+import edu.unc.lib.dl.fcrepo4.FolderObject;\n+import edu.unc.lib.dl.fcrepo4.RepositoryInitializer;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;\n+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;\n+import edu.unc.lib.dl.fcrepo4.TransactionManager;\n+import edu.unc.lib.dl.fcrepo4.WorkObject;\n+import edu.unc.lib.dl.fedora.PID;\n+import edu.unc.lib.dl.persist.api.transfer.BinaryTransferService;\n+import edu.unc.lib.dl.persist.services.delete.MarkForDeletionJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsJob;\n+import edu.unc.lib.dl.persist.services.destroy.DestroyObjectsRequest;\n+import edu.unc.lib.dl.persist.services.storage.StorageLocationManagerImpl;\n+import edu.unc.lib.dl.search.solr.model.ObjectPath;\n+import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;\n+import edu.unc.lib.dl.services.IndexingMessageSender;\n+import edu.unc.lib.dl.services.MessageSender;\n+import edu.unc.lib.dl.sparql.FedoraSparqlUpdateService;\n+import edu.unc.lib.dl.test.AclModelBuilder;\n+import edu.unc.lib.dl.test.RepositoryObjectTreeIndexer;\n+import edu.unc.lib.dl.test.TestHelper;\n+\n+/**\n+ *\n+ * @author lfarrell\n+ *\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextHierarchy({\n+        @ContextConfiguration(\"/spring-test/test-fedora-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/cdr-client-container.xml\"),\n+        @ContextConfiguration(\"/spring-test/jms-context.xml\"),\n+        @ContextConfiguration(\"/spring-test/acl-service-context.xml\"),\n+        @ContextConfiguration(\"/destroy-derivatives-router-it-context.xml\")\n+})\n+public class DestroyDerivativesRouterIT {\n+    @Autowired\n+    private String baseAddress;\n+    @Autowired\n+    private RepositoryObjectFactory repoObjectFactory;\n+    @Autowired\n+    private RepositoryObjectLoader repoObjLoader;\n+    @Autowired\n+    private TransactionManager txManager;\n+    @Autowired\n+    private ObjectPathFactory pathFactory;\n+    @Autowired\n+    private FcrepoClient fcrepoClient;\n+    @Autowired\n+    private Model queryModel;\n+    @Autowired\n+    private StorageLocationManagerImpl locationManager;\n+    @Autowired\n+    private BinaryTransferService transferService;\n+    @Autowired\n+    private AccessControlService aclService;\n+    @Autowired\n+    private InheritedAclFactory inheritedAclFactory;\n+    @Autowired\n+    private RepositoryInitializer repositoryInitializer;\n+    @Autowired\n+    private FedoraSparqlUpdateService sparqlUpdateService;\n+    @Autowired\n+    private PremisLoggerFactory premisLoggerFactory;\n+    @Autowired\n+    private CamelContext cdrDestroyDerivatives;\n+    @Autowired\n+    private MessageSender binaryDestroyedMessageSender;\n+\n+    @Mock\n+    private IndexingMessageSender indexingMessageSender;\n+    @Mock\n+    private ObjectPath path;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    private MarkForDeletionJob deletionJob;\n+\n+    private DestroyObjectsJob destroyJob;\n+\n+    private AgentPrincipals agent;\n+\n+    private RepositoryObjectTreeIndexer treeIndexer;\n+\n+    private AdminUnit adminUnit;\n+\n+    private CollectionObject collection;\n+\n+    private final static String LOC1_ID = \"loc1\";\n+\n+    @Before\n+    public void init() {\n+        initMocks(this);\n+\n+        TestHelper.setContentBase(baseAddress);\n+\n+        repositoryInitializer.initializeRepository();\n+        PID contentRootPid = getContentRootPid();\n+\n+        AccessGroupSet testPrincipals = new AccessGroupSet(\"edu:unc:lib:cdr:admin\");\n+        agent = new AgentPrincipals(\"testUser\", testPrincipals);\n+\n+        ContentRootObject contentRoot = repoObjLoader.getContentRootObject(contentRootPid);\n+        adminUnit = repoObjectFactory.createAdminUnit(new AclModelBuilder(\"Unit\")\n+                .addUnitOwner(agent.getUsernameUri())\n+                .model);\n+\n+        collection = repoObjectFactory.createCollectionObject(null);\n+\n+        contentRoot.addMember(adminUnit);\n+        adminUnit.addMember(collection);\n+\n+        reset(destroyCollectionSrcImgProcessor);\n+        reset(destroySmallThumbnailProcessor);\n+        reset(destroyLargeThumbnailProcessor);\n+        reset(destroyAccessCopyProcessor);\n+        reset(destroyFulltextProcessor);\n+\n+        treeIndexer = new RepositoryObjectTreeIndexer(queryModel, fcrepoClient);\n+        premisLoggerFactory.setBinaryTransferService(transferService);\n+\n+        when(pathFactory.getPath(any(PID.class))).thenReturn(path);\n+        when(path.toNamePath()).thenReturn(\"path/to/object\");\n+        when(path.toIdPath()).thenReturn(\"pid0/pid1/pid2/pid3\");\n+    }\n+\n+    @Test\n+    public void destroyImageTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"image/png\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyCollectionImageTest() throws Exception {\n+        CollectionObject collectionWithImg = repoObjectFactory.createCollectionObject(null);\n+        adminUnit.addMember(collectionWithImg);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        // Create collection thumbnail\n+        PID collPid = collectionWithImg.getPid();\n+        String uuid = collPid.getUUID();\n+        String binarySubPath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n+        File existingFile = new File(\"target/\" + binarySubPath + \"/\" + uuid);\n+        FileUtils.writeStringToFile(existingFile, \"thumbnail\", \"UTF-8\");\n+\n+        initMarkForDeletionJob(collPid);\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(collPid));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyCollectionNoImageTest() throws Exception {\n+        CollectionObject collectionWithImg = repoObjectFactory.createCollectionObject(null);\n+        adminUnit.addMember(collectionWithImg);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(collectionWithImg.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(collectionWithImg.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyTextTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        String mimetype = \"text/plain\";\n+        FileObject fileObj = addFileToWork(work, mimetype);\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(work.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void invalidTypeTest() throws Exception {\n+        WorkObject work = repoObjectFactory.createWorkObject(null);\n+        FileObject fileObj = addFileToWork(work, \"application/octet-stream\");\n+        work.addMember(fileObj);\n+\n+        treeIndexer.indexAll(baseAddress);\n+\n+        initMarkForDeletionJob(fileObj.getPid());\n+        deletionJob.run();\n+        initializeDestroyJob(Collections.singletonList(fileObj.getPid()));\n+        destroyJob.run();\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    private FileObject addFileToWork(WorkObject work, String mimetype) throws Exception {\n+        FolderObject folder = repoObjectFactory.createFolderObject(null);\n+        collection.addMember(folder);\n+        folder.addMember(work);\n+\n+        String bodyString = \"Content\";\n+        Path storagePath = Paths.get(locationManager.getStorageLocationById(LOC1_ID).getStorageUri(work.getPid()));\n+        Files.createDirectories(storagePath);\n+        File contentFile = Files.createTempFile(storagePath, \"file\", \".txt\").toFile();\n+        String sha1 = \"4f9be057f0ea5d2ba72fd2c810e8d7b9aa98b469\";\n+        String filename = contentFile.getName();\n+        FileUtils.writeStringToFile(contentFile, bodyString, \"UTF-8\");\n+\n+        return work.addDataFile(contentFile.toURI(), filename, mimetype, sha1, null);\n+    }\n+\n+    private void initMarkForDeletionJob(PID pid) {\n+        deletionJob =  new MarkForDeletionJob(pid, \"\", agent, repoObjLoader,\n+                sparqlUpdateService, aclService);\n+    }\n+\n+    private void initializeDestroyJob(List<PID> objsToDestroy) {", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjY1Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498406657", "bodyText": "since you're directly testing the CdrDestroyCollectionUpload route here, it would be fine to only verify destroyCollectionSrcImgProcessor is called. The other processors aren't related to this route, and it confused me initially that the thumbnail processors weren't called for cleanup of a collection thumbnail.", "author": "bbpennel", "createdAt": "2020-10-01T17:29:40Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrObjectType;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Produce;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.AdviceWithRouteBuilder;\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import edu.unc.lib.dl.rdf.Cdr;\n+\n+public class DestroyDerivativesRouterTest extends CamelSpringTestSupport {\n+    private static final String DESTROY_DERIVATIVES_ROUTE = \"CdrDestroyDerivatives\";\n+    private static final String DESTROY_FULLTEXT_ROUTE = \"CdrDestroyFullText\";\n+    private static final String DESTROY_IMAGE_ROUTE = \"CdrDestroyImage\";\n+    private static final String DESTROY_ACCESS_COPY_ROUTE = \"CdrDestroyAccessCopy\";\n+    private static final String DESTROY_SRC_COPY = \"CdrDestroyCollectionUpload\";\n+\n+    @Produce(uri = \"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/destroy-derivatives-context.xml\");\n+    }\n+\n+    @Test\n+    public void routeRequestText() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(1);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\", Cdr.FileObject.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeRequestImage() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeNonBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"application\", Cdr.FileObject.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyTextDerivative() throws Exception {\n+        createContext(DESTROY_FULLTEXT_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\", Cdr.FileObject.getURI()));\n+\n+        verify(destroyFulltextProcessor).process(any(Exchange.class));\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageThumbnailDerivative() throws Exception {\n+        createContext(DESTROY_IMAGE_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageThumbnailDerivativeCollection() throws Exception {\n+        createContext(DESTROY_IMAGE_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/*\", Cdr.Collection.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageSrcCopyCollection() throws Exception {\n+        createContext(DESTROY_SRC_COPY);\n+\n+        Map<String, Object> headers = createEvent(\"image/*\", Cdr.Collection.getURI());\n+        headers.put(\"CollectionThumb\", true);\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNzg4MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498407881", "bodyText": "Similar to the collection thumbnail case, I'd say generally for sub-route tests like this you don't need to verify processors that aren't associated with that route", "author": "bbpennel", "createdAt": "2020-10-01T17:31:54Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrObjectType;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Produce;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.AdviceWithRouteBuilder;\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import edu.unc.lib.dl.rdf.Cdr;\n+\n+public class DestroyDerivativesRouterTest extends CamelSpringTestSupport {\n+    private static final String DESTROY_DERIVATIVES_ROUTE = \"CdrDestroyDerivatives\";\n+    private static final String DESTROY_FULLTEXT_ROUTE = \"CdrDestroyFullText\";\n+    private static final String DESTROY_IMAGE_ROUTE = \"CdrDestroyImage\";\n+    private static final String DESTROY_ACCESS_COPY_ROUTE = \"CdrDestroyAccessCopy\";\n+    private static final String DESTROY_SRC_COPY = \"CdrDestroyCollectionUpload\";\n+\n+    @Produce(uri = \"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/destroy-derivatives-context.xml\");\n+    }\n+\n+    @Test\n+    public void routeRequestText() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(1);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\", Cdr.FileObject.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeRequestImage() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeNonBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"application\", Cdr.FileObject.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyTextDerivative() throws Exception {\n+        createContext(DESTROY_FULLTEXT_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\", Cdr.FileObject.getURI()));\n+\n+        verify(destroyFulltextProcessor).process(any(Exchange.class));\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageThumbnailDerivative() throws Exception {\n+        createContext(DESTROY_IMAGE_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageThumbnailDerivativeCollection() throws Exception {\n+        createContext(DESTROY_IMAGE_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/*\", Cdr.Collection.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageSrcCopyCollection() throws Exception {\n+        createContext(DESTROY_SRC_COPY);\n+\n+        Map<String, Object> headers = createEvent(\"image/*\", Cdr.Collection.getURI());\n+        headers.put(\"CollectionThumb\", true);\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    // See if any messages are routed for object with no mimetype\n+    @Test\n+    public void destroyImageThumbnailNoDerivativeCollection() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"\", Cdr.Collection.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyImageAccessDerivative() throws Exception {\n+        createContext(DESTROY_ACCESS_COPY_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwOTgwMA==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498409800", "bodyText": "Could this test be merged with destroyImageThumbnailDerivativeCollection?", "author": "bbpennel", "createdAt": "2020-10-01T17:35:26Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright 2008 The University of North Carolina at Chapel Hill\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *         http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.unc.lib.dl.services.camel.destroyDerivatives;\n+\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryMimeType;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrBinaryPidId;\n+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrObjectType;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.camel.BeanInject;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Produce;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.AdviceWithRouteBuilder;\n+import org.apache.camel.test.spring.CamelSpringTestSupport;\n+import org.junit.Test;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import edu.unc.lib.dl.rdf.Cdr;\n+\n+public class DestroyDerivativesRouterTest extends CamelSpringTestSupport {\n+    private static final String DESTROY_DERIVATIVES_ROUTE = \"CdrDestroyDerivatives\";\n+    private static final String DESTROY_FULLTEXT_ROUTE = \"CdrDestroyFullText\";\n+    private static final String DESTROY_IMAGE_ROUTE = \"CdrDestroyImage\";\n+    private static final String DESTROY_ACCESS_COPY_ROUTE = \"CdrDestroyAccessCopy\";\n+    private static final String DESTROY_SRC_COPY = \"CdrDestroyCollectionUpload\";\n+\n+    @Produce(uri = \"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @BeanInject(value = \"binaryInfoProcessor\")\n+    private BinaryInfoProcessor binaryInfoProcessor;\n+\n+    @BeanInject(value = \"destroyCollectionSrcImgProcessor\")\n+    private DestroyDerivativesProcessor destroyCollectionSrcImgProcessor;\n+\n+    @BeanInject(value = \"destroySmallThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroySmallThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyLargeThumbnailProcessor\")\n+    private DestroyDerivativesProcessor destroyLargeThumbnailProcessor;\n+\n+    @BeanInject(value = \"destroyAccessCopyProcessor\")\n+    private DestroyDerivativesProcessor destroyAccessCopyProcessor;\n+\n+    @BeanInject(value = \"destroyFulltextProcessor\")\n+    private DestroyDerivativesProcessor destroyFulltextProcessor;\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"/service-context.xml\", \"/destroy-derivatives-context.xml\");\n+    }\n+\n+    @Test\n+    public void routeRequestText() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(1);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\", Cdr.FileObject.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeRequestImage() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(1);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void routeNonBinary() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"application\", Cdr.FileObject.getURI()));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyTextDerivative() throws Exception {\n+        createContext(DESTROY_FULLTEXT_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"text/plain\", Cdr.FileObject.getURI()));\n+\n+        verify(destroyFulltextProcessor).process(any(Exchange.class));\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageThumbnailDerivative() throws Exception {\n+        createContext(DESTROY_IMAGE_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageThumbnailDerivativeCollection() throws Exception {\n+        createContext(DESTROY_IMAGE_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/*\", Cdr.Collection.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    @Test\n+    public void destroyImageSrcCopyCollection() throws Exception {\n+        createContext(DESTROY_SRC_COPY);\n+\n+        Map<String, Object> headers = createEvent(\"image/*\", Cdr.Collection.getURI());\n+        headers.put(\"CollectionThumb\", true);\n+        template.sendBodyAndHeaders(\"\", headers);\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyCollectionSrcImgProcessor).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor, never()).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    // See if any messages are routed for object with no mimetype\n+    @Test\n+    public void destroyImageThumbnailNoDerivativeCollection() throws Exception {\n+        getMockEndpoint(\"mock:direct:image.derivatives.destroy\").expectedMessageCount(0);\n+        getMockEndpoint(\"mock:direct:fulltext.derivatives.destroy\").expectedMessageCount(0);\n+\n+        createContext(DESTROY_DERIVATIVES_ROUTE);\n+        template.sendBodyAndHeaders(\"\", createEvent(\"\", Cdr.Collection.getURI()));\n+        verify(binaryInfoProcessor).process(any(Exchange.class));\n+\n+        assertMockEndpointsSatisfied();\n+    }\n+\n+    @Test\n+    public void destroyImageAccessDerivative() throws Exception {\n+        createContext(DESTROY_ACCESS_COPY_ROUTE);\n+\n+        template.sendBodyAndHeaders(\"\", createEvent(\"image/png\", Cdr.FileObject.getURI()));\n+\n+        verify(destroySmallThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyLargeThumbnailProcessor, never()).process(any(Exchange.class));\n+        verify(destroyAccessCopyProcessor).process(any(Exchange.class));\n+        verify(destroyFulltextProcessor, never()).process(any(Exchange.class));\n+    }\n+\n+    // See if any message is routed from direct:image.access.destroy\n+    @Test\n+    public void destroyImageAccessDerivativeCollection() throws Exception {", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMTcyNQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498411725", "bodyText": "Up to you if you want to change it, but GetUrisProcessor doesn't have any dependencies and is never mocked, so it'd be fine to initialize it directly in this class, either in the constructor or in the configure method.", "author": "bbpennel", "createdAt": "2020-10-01T17:39:02Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/longleaf/LongleafRouter.java", "diffHunk": "@@ -28,6 +28,8 @@\n  * @author bbpennel\n  */\n public class LongleafRouter extends RouteBuilder {\n+    @BeanInject(value = \"getUrisProcessor\")\n+    private GetUrisProcessor getUrisProcessor;", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzU4NQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r498413585", "bodyText": "I think you can remove objectAclFactory and inheritedPermissionEvaluator since they are already being initialized in acl-service-context.xml", "author": "bbpennel", "createdAt": "2020-10-01T17:42:30Z", "path": "services-camel/src/test/resources/destroy-derivatives-router-it-context.xml", "diffHunk": "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:c=\"http://www.springframework.org/schema/c\"\n+       xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xmlns:camel=\"http://camel.apache.org/schema/spring\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n+        http://www.springframework.org/schema/util\n+        http://www.springframework.org/schema/util/spring-util.xsd\n+        http://www.springframework.org/schema/context\n+        http://www.springframework.org/schema/context/spring-context-4.3.xsd\n+        http://camel.apache.org/schema/spring\n+        http://camel.apache.org/schema/spring/camel-spring.xsd\">\n+\n+    <bean id=\"properties\" class=\"org.apache.camel.component.properties.PropertiesComponent\">\n+        <property name=\"location\" value=\"classpath:destroy-derivatives-it-config.properties\"/>\n+    </bean>\n+\n+    <bean id=\"bridgePropertyPlaceholder\" class=\"org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer\">\n+        <property name=\"location\" value=\"classpath:destroy-derivatives-router-it-config.properties\"/>\n+    </bean>\n+\n+    <bean id=\"binaryInfoProcessor\" class=\"edu.unc.lib.dl.services.camel.destroyDerivatives.BinaryInfoProcessor\">\n+        <constructor-arg value=\"${sourceImages.dir}\" />\n+    </bean>\n+\n+    <bean id=\"destroyCollectionSrcImgProcessor\" class=\"org.mockito.Mockito\" factory-method=\"mock\">\n+        <constructor-arg value=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyDerivativesProcessor\" />\n+    </bean>\n+\n+    <bean id=\"destroySmallThumbnailProcessor\" class=\"org.mockito.Mockito\" factory-method=\"mock\">\n+        <constructor-arg value=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyDerivativesProcessor\" />\n+    </bean>\n+\n+    <bean id=\"destroyLargeThumbnailProcessor\" class=\"org.mockito.Mockito\" factory-method=\"mock\">\n+        <constructor-arg value=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyDerivativesProcessor\" />\n+    </bean>\n+\n+    <bean id=\"destroyAccessCopyProcessor\" class=\"org.mockito.Mockito\" factory-method=\"mock\">\n+        <constructor-arg value=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyDerivativesProcessor\" />\n+    </bean>\n+\n+    <bean id=\"destroyFulltextProcessor\" class=\"org.mockito.Mockito\" factory-method=\"mock\">\n+        <constructor-arg value=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyDerivativesProcessor\" />\n+    </bean>\n+\n+    <bean id=\"binaryDestroyedJmsTemplate\" class=\"org.springframework.jms.core.JmsTemplate\">\n+        <property name=\"connectionFactory\" ref=\"jmsFactory\" />\n+        <property name=\"defaultDestinationName\" value=\"${cdr.destroy.derivatives.stream}\" />\n+        <property name=\"pubSubDomain\" value=\"false\" />\n+    </bean>\n+\n+    <bean id=\"binaryDestroyedMessageSender\" class=\"edu.unc.lib.dl.services.MessageSender\">\n+        <property name=\"jmsTemplate\" ref=\"binaryDestroyedJmsTemplate\" />\n+    </bean>\n+\n+    <bean id=\"contentPathFactory\" class=\"edu.unc.lib.dl.fedora.ContentPathFactory\"\n+          init-method=\"init\">\n+        <property name=\"cacheMaxSize\" value=\"100\" />\n+        <property name=\"cacheTimeToLive\" value=\"5000\" />\n+        <property name=\"fcrepoClient\" ref=\"fcrepoClient\" />\n+    </bean>\n+\n+    <bean id=\"objectAclFactory\" class=\"edu.unc.lib.dl.acl.fcrepo4.ObjectAclFactory\"", "originalCommit": "2b810e373f898e556f70a658c130be8cd5c0d0db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "url": "https://github.com/UNC-Libraries/box-c/commit/e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "message": "Cleanup tests and message format", "committedDate": "2020-10-02T13:08:26Z", "type": "commit"}, {"oid": "e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "url": "https://github.com/UNC-Libraries/box-c/commit/e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "message": "Cleanup tests and message format", "committedDate": "2020-10-02T13:08:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNjk4Mg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r499006982", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n          \n          \n            \n                  \n          \n      \n    \n    \n  \n\nThis line is a duplicate of line 216", "author": "bbpennel", "createdAt": "2020-10-02T19:19:00Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -216,7 +212,6 @@ public void destroyImageTest() throws Exception {\n         verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));\n         verify(destroyAccessCopyProcessor).process(any(Exchange.class));\n         verify(destroyCollectionSrcImgProcessor, never()).process(any(Exchange.class));", "originalCommit": "e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzQ3OQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r499007479", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    File existingFile = new File(existingFileDirs.toString() + \"/\" + uuid);\n          \n          \n            \n                    File existingFile = new File(existingFileDirs, uuid);", "author": "bbpennel", "createdAt": "2020-10-02T19:20:12Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -230,12 +225,13 @@ public void destroyCollectionImageTest() throws Exception {\n         PID collPid = collectionWithImg.getPid();\n         String uuid = collPid.getUUID();\n         String binarySubPath = idToPath(uuid, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n-        File existingFile = new File(\"target/\" + binarySubPath + \"/\" + uuid);\n+        Path existingFileDirs = Files.createDirectories(new File(\"target/\" + binarySubPath).toPath());\n+        File existingFile = new File(existingFileDirs.toString() + \"/\" + uuid);", "originalCommit": "e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwODAwMg==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r499008002", "bodyText": "if you remove Job the method name will read as an action", "author": "bbpennel", "createdAt": "2020-10-02T19:21:19Z", "path": "services-camel/src/test/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesRouterIT.java", "diffHunk": "@@ -321,9 +312,9 @@ private FileObject addFileToWork(WorkObject work, String mimetype) throws Except\n         return work.addDataFile(contentFile.toURI(), filename, mimetype, sha1, null);\n     }\n \n-    private void initMarkForDeletionJob(PID pid) {\n-        deletionJob =  new MarkForDeletionJob(pid, \"\", agent, repoObjLoader,\n-                sparqlUpdateService, aclService);\n+    private void markForDeletionJob(PID pid) {", "originalCommit": "e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyNzg1MQ==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r499027851", "bodyText": "update name of the bean to match, the application wouldn't start for me until i did so\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <bean id=\"binaryInfoProcessor\" class=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyedMsgProcessor\">\n          \n          \n            \n                <bean id=\"destroyedMsgProcessor\" class=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyedMsgProcessor\">", "author": "bbpennel", "createdAt": "2020-10-02T20:09:14Z", "path": "services-camel/src/main/webapp/WEB-INF/service-context.xml", "diffHunk": "@@ -219,6 +219,35 @@\n     <bean id=\"fulltextProcessor\" class=\"edu.unc.lib.dl.services.camel.fulltext.FulltextProcessor\">\n         <constructor-arg value=\"${cdr.enhancement.path.fulltext}\" />\n     </bean>\n+\n+    <bean id=\"binaryInfoProcessor\" class=\"edu.unc.lib.dl.services.camel.destroyDerivatives.DestroyedMsgProcessor\">", "originalCommit": "e58f30fcc5b6a9004b506fd326e36bd05e51a82f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "03a4ae07d8ec0e2292b1ca1b41be2eb6133c27a1", "url": "https://github.com/UNC-Libraries/box-c/commit/03a4ae07d8ec0e2292b1ca1b41be2eb6133c27a1", "message": "* Pass uuid along in messages.\n* Cleanup files a bit.", "committedDate": "2020-10-05T17:05:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NjE3Nw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r499766177", "bodyText": "I'd really prefer not to add an extra UUID field/header. We've been gradually phasing out pid.getUuid() in favor of pid.getId(), since the former just calls the latter, and neither necessarily returns a UUID. You can also get the ID/UUID portion back from the PID field, which it looks like you were doing before in DestroyedMsgProcessor. Was there a reason you needed to switch? I'd suggest:\nString binaryPidId = (String) in.getHeader(CdrBinaryPidId);\nPID binaryPid = PIDs.get(binaryPidId);\nString binaryId = binaryPid.getId();", "author": "bbpennel", "createdAt": "2020-10-05T17:42:32Z", "path": "services-camel/src/main/java/edu/unc/lib/dl/services/camel/destroyDerivatives/DestroyDerivativesProcessor.java", "diffHunk": "@@ -52,8 +53,10 @@ public DestroyDerivativesProcessor(String fileExtension, String derivativeBasePa\n     public void process(Exchange exchange) {\n         Message in = exchange.getIn();\n         String binaryId = (String) in.getHeader(CdrBinaryPidId);\n-        String binarySubPath = idToPath(binaryId, HASHED_PATH_DEPTH, HASHED_PATH_SIZE);\n-        Path derivativePath = Paths.get(derivativeBasePath, binarySubPath, binaryId + fileExtension);\n+        String binaryUUID = (String) in.getHeader(CdrBinaryUUID);", "originalCommit": "03a4ae07d8ec0e2292b1ca1b41be2eb6133c27a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NDY4Mw==", "url": "https://github.com/UNC-Libraries/box-c/pull/1091#discussion_r499774683", "bodyText": "IdToPath was trying to generate the derivative base path from /content/uuuid. So you'd end up with /co/nt/en etc, which I think is why it wasn't actually deleting things.", "author": "lfarrell", "createdAt": "2020-10-05T17:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NjE3Nw=="}], "type": "inlineReview"}, {"oid": "6c55ee70a6a206b4ee646e2ff941303aeee1f944", "url": "https://github.com/UNC-Libraries/box-c/commit/6c55ee70a6a206b4ee646e2ff941303aeee1f944", "message": "Don't pass UUID as a header", "committedDate": "2020-10-05T18:47:39Z", "type": "commit"}, {"oid": "1f7a627bcd82e3ab706989e1fcd1fea48f8f23ef", "url": "https://github.com/UNC-Libraries/box-c/commit/1f7a627bcd82e3ab706989e1fcd1fea48f8f23ef", "message": "Change log message and level", "committedDate": "2020-10-12T14:31:38Z", "type": "commit"}]}