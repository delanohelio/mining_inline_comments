{"pr_number": 5886, "pr_title": "Rewrite of door/gate/trapdoor toggle AI", "pr_createdAt": "2020-10-06T13:02:27Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/5886", "timeline": [{"oid": "c7f6d82beebb61a16efd7a4e99f2cf3fac7246bf", "url": "https://github.com/ldtteam/minecolonies/commit/c7f6d82beebb61a16efd7a4e99f2cf3fac7246bf", "message": "Rewrite of door/gate/trapdoor toggle AI", "committedDate": "2020-10-06T12:55:49Z", "type": "commit"}, {"oid": "f3985505aa4362ba0c063c26ce48341c738c5476", "url": "https://github.com/ldtteam/minecolonies/commit/f3985505aa4362ba0c063c26ce48341c738c5476", "message": "reset only valid blocks", "committedDate": "2020-10-06T13:07:53Z", "type": "commit"}, {"oid": "09aad8c64892382c23cb565b7d3f6a980b76511f", "url": "https://github.com/ldtteam/minecolonies/commit/09aad8c64892382c23cb565b7d3f6a980b76511f", "message": "Merge branch 'version/1.15' into toggleAI", "committedDate": "2020-10-06T13:10:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MDgwMw==", "url": "https://github.com/ldtteam/minecolonies/pull/5886#discussion_r500340803", "bodyText": "Why aren't those just  predicates if we don't need the state anyway?", "author": "Raycoms", "createdAt": "2020-10-06T14:36:29Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/minimal/EntityAIInteractToggleAble.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.minecolonies.coremod.entity.ai.minimal;\n+\n+import net.minecraft.block.*;\n+import net.minecraft.entity.MobEntity;\n+import net.minecraft.entity.ai.goal.Goal;\n+import net.minecraft.pathfinding.GroundPathNavigator;\n+import net.minecraft.pathfinding.Path;\n+import net.minecraft.pathfinding.PathPoint;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+\n+/**\n+ * AI Task for toggling blocks open/closed when collided\n+ */\n+public class EntityAIInteractToggleAble extends Goal\n+{\n+    /**\n+     * Number of blocks to check for the fence gate - height.\n+     */\n+    private static final int HEIGHT_TO_CHECK = 2;\n+\n+    /**\n+     * Number of blocks to check for the fence gate - length.\n+     */\n+    private static final int LENGTH_TO_CHECK = 2;\n+\n+    /**\n+     * The min distance the gate has to be from the citizen.\n+     */\n+    private static final double MIN_DISTANCE = 2.25D;\n+\n+    /**\n+     * Default predicate for all 3 vanilla blocks\n+     */\n+    public static final Predicate<BlockState> GATE_DOOR_TRAP = new Predicate<BlockState>()\n+    {\n+        @Override\n+        public boolean test(final BlockState state)\n+        {\n+            final Block block = state.getBlock();\n+            return block instanceof DoorBlock || block instanceof FenceGateBlock || block instanceof TrapDoorBlock;\n+        }\n+    };\n+\n+    /**\n+     * Only trapdoors and fence gates\n+     */\n+    public static final Predicate<BlockState> GATE_TRAP = new Predicate<BlockState>()\n+    {\n+        @Override\n+        public boolean test(final BlockState state)\n+        {\n+            final Block block = state.getBlock();\n+            return block instanceof DoorBlock || block instanceof FenceGateBlock || block instanceof TrapDoorBlock;\n+        }", "originalCommit": "09aad8c64892382c23cb565b7d3f6a980b76511f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1NTQ0MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5886#discussion_r500355441", "bodyText": "\"Block predicate\" I mean", "author": "Raycoms", "createdAt": "2020-10-06T14:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MDgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMDYxMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/5886#discussion_r500410611", "bodyText": "wanted to give them the chance to also add state property conditions, like state.getProperty(OPEN) == true", "author": "someaddons", "createdAt": "2020-10-06T15:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MDgwMw=="}], "type": "inlineReview"}]}