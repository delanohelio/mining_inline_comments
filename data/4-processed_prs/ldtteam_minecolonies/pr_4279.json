{"pr_number": 4279, "pr_title": "Feature/uni 1.15", "pr_createdAt": "2020-01-28T16:10:48Z", "pr_url": "https://github.com/ldtteam/minecolonies/pull/4279", "timeline": [{"oid": "074d03ec950ec64b1741060180a9be94c70adef0", "url": "https://github.com/ldtteam/minecolonies/commit/074d03ec950ec64b1741060180a9be94c70adef0", "message": "Port Uni", "committedDate": "2020-01-26T10:11:32Z", "type": "commit"}, {"oid": "01cb94c1d2203f2add21ce0d727b06815a5e6a56", "url": "https://github.com/ldtteam/minecolonies/commit/01cb94c1d2203f2add21ce0d727b06815a5e6a56", "message": "fix deco controller rot", "committedDate": "2020-01-26T10:11:39Z", "type": "commit"}, {"oid": "5360b20f73c1aa074e67fb9a92124a302199e45e", "url": "https://github.com/ldtteam/minecolonies/commit/5360b20f73c1aa074e67fb9a92124a302199e45e", "message": "Fix porting", "committedDate": "2020-01-26T11:43:28Z", "type": "commit"}, {"oid": "880185ed6ed5308e19abc5cbfd5994b0a38c4ec5", "url": "https://github.com/ldtteam/minecolonies/commit/880185ed6ed5308e19abc5cbfd5994b0a38c4ec5", "message": "Setup block and building, job etc", "committedDate": "2020-01-26T12:12:00Z", "type": "commit"}, {"oid": "4cb5ed79c49eb7d7f370a5c7f5268b5b9d5999ed", "url": "https://github.com/ldtteam/minecolonies/commit/4cb5ed79c49eb7d7f370a5c7f5268b5b9d5999ed", "message": "Finish building registry", "committedDate": "2020-01-26T13:21:12Z", "type": "commit"}, {"oid": "6db35c24d5c9aa0c0e5a6c0e0cfc68322b3e74c2", "url": "https://github.com/ldtteam/minecolonies/commit/6db35c24d5c9aa0c0e5a6c0e0cfc68322b3e74c2", "message": "Initital setup for GUI handling", "committedDate": "2020-01-26T18:41:59Z", "type": "commit"}, {"oid": "71caeac077bd3349afcbcd2bf1f7072f2d040097", "url": "https://github.com/ldtteam/minecolonies/commit/71caeac077bd3349afcbcd2bf1f7072f2d040097", "message": "Add research requirements", "committedDate": "2020-01-26T21:34:31Z", "type": "commit"}, {"oid": "acf56d33e9d1d0984135e902ac9fa7667018e2ed", "url": "https://github.com/ldtteam/minecolonies/commit/acf56d33e9d1d0984135e902ac9fa7667018e2ed", "message": "Separate colony research elements from global research elements", "committedDate": "2020-01-27T15:24:41Z", "type": "commit"}, {"oid": "fbeedab410375dda19cebc9726a2d7ed3fd15e3f", "url": "https://github.com/ldtteam/minecolonies/commit/fbeedab410375dda19cebc9726a2d7ed3fd15e3f", "message": "Further research setup", "committedDate": "2020-01-28T16:10:06Z", "type": "commit"}, {"oid": "46190bd150cbe8cd733e2f0ec4e740c7054baeb5", "url": "https://github.com/ldtteam/minecolonies/commit/46190bd150cbe8cd733e2f0ec4e740c7054baeb5", "message": "Add disabled button fix research time, block research", "committedDate": "2020-01-28T16:59:48Z", "type": "commit"}, {"oid": "4beee685ceadc3d4ca22070c86344cdfb5aa2513", "url": "https://github.com/ldtteam/minecolonies/commit/4beee685ceadc3d4ca22070c86344cdfb5aa2513", "message": "Add AI add University schematics", "committedDate": "2020-01-28T21:06:46Z", "type": "commit"}, {"oid": "7840ab0b541309516b99034a9c2e49f03acf345d", "url": "https://github.com/ldtteam/minecolonies/commit/7840ab0b541309516b99034a9c2e49f03acf345d", "message": "remove todo, fix schematic", "committedDate": "2020-01-28T21:09:05Z", "type": "commit"}, {"oid": "afe0182a81c38d9faa7fb6bf877ac3ed9c481c92", "url": "https://github.com/ldtteam/minecolonies/commit/afe0182a81c38d9faa7fb6bf877ac3ed9c481c92", "message": "Further GUI requirements", "committedDate": "2020-01-28T21:31:06Z", "type": "commit"}, {"oid": "08b92a56f4671f19c2a990eead9faf3774c96f5d", "url": "https://github.com/ldtteam/minecolonies/commit/08b92a56f4671f19c2a990eead9faf3774c96f5d", "message": "Improve UI significantly", "committedDate": "2020-01-31T10:48:30Z", "type": "commit"}, {"oid": "538c95dbef5e471120ac03bc6079e1436dbcee86", "url": "https://github.com/ldtteam/minecolonies/commit/538c95dbef5e471120ac03bc6079e1436dbcee86", "message": "Cleanup and add first effect", "committedDate": "2020-01-31T13:47:40Z", "type": "commit"}, {"oid": "8564f7311a8a5f89f7d446c4a435431cedb276e9", "url": "https://github.com/ldtteam/minecolonies/commit/8564f7311a8a5f89f7d446c4a435431cedb276e9", "message": "Apply effects", "committedDate": "2020-01-31T14:39:30Z", "type": "commit"}, {"oid": "be95ffb67b922c955513a95671daddd0c263c79a", "url": "https://github.com/ldtteam/minecolonies/commit/be95ffb67b922c955513a95671daddd0c263c79a", "message": "Constants cleanup", "committedDate": "2020-01-31T15:07:59Z", "type": "commit"}, {"oid": "37d83e4b58bde9863f47dc0448b9a2cc11a17883", "url": "https://github.com/ldtteam/minecolonies/commit/37d83e4b58bde9863f47dc0448b9a2cc11a17883", "message": "Fix spacing", "committedDate": "2020-01-31T15:16:35Z", "type": "commit"}, {"oid": "319f9b0794a1b3bd1b720880304801d5d133a7b5", "url": "https://github.com/ldtteam/minecolonies/commit/319f9b0794a1b3bd1b720880304801d5d133a7b5", "message": "update depdencies", "committedDate": "2020-01-31T16:00:34Z", "type": "commit"}, {"oid": "2745453088fcceb20e9ce9bab5514fa88dc7f692", "url": "https://github.com/ldtteam/minecolonies/commit/2745453088fcceb20e9ce9bab5514fa88dc7f692", "message": "fix page desc", "committedDate": "2020-01-31T16:40:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NjUwNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373586504", "bodyText": "which type of research?^^ could use some more details", "author": "someaddons", "createdAt": "2020-01-31T17:07:11Z", "path": "src/api/java/com/minecolonies/api/research/GlobalResearch.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import com.minecolonies.api.configuration.CommonConfiguration;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.common.ForgeConfigSpec;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.wrapper.InvWrapper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+/**\n+ * The implementation of the IResearch interface which represents one type of research.", "originalCommit": "2745453088fcceb20e9ce9bab5514fa88dc7f692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTUxNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373591514", "bodyText": "good point, fixed", "author": "Raycoms", "createdAt": "2020-01-31T17:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NjUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4OTA0OA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373589048", "bodyText": "should we mark the colony dirty here to save the resource consume?", "author": "someaddons", "createdAt": "2020-01-31T17:13:18Z", "path": "src/api/java/com/minecolonies/api/research/GlobalResearch.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import com.minecolonies.api.configuration.CommonConfiguration;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.common.ForgeConfigSpec;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.wrapper.InvWrapper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+/**\n+ * The implementation of the IResearch interface which represents one type of research.\n+ */\n+public class GlobalResearch implements IGlobalResearch\n+{\n+    /**\n+     * The costList of the research.\n+     */\n+    private final List<ItemStorage> costList = new ArrayList<>();\n+\n+    /**\n+     * The parent research which has to be completed first.\n+     */\n+    private String parent = \"\";\n+\n+    /**\n+     * The string id of the research.\n+     */\n+    private final String id;\n+\n+    /**\n+     * The research branch.\n+     */\n+    private final String branch;\n+\n+    /**\n+     * The description of the research.\n+     */\n+    private final String desc;\n+\n+    /**\n+     * The research effect of this research.\n+     */\n+    private final IResearchEffect effect;\n+\n+    /**\n+     * The depth level in the tree.\n+     */\n+    private final int depth;\n+\n+    /**\n+     * If the research has an only child.\n+     */\n+    private boolean onlyChild;\n+\n+    /**\n+     * List of childs of a research.\n+     */\n+    private final List<String> childs = new ArrayList<>();\n+\n+    /**\n+     * The requirement for this research.\n+     */\n+    private IResearchRequirement requirement;\n+\n+    /**\n+     * Create the new research.\n+     * @param id it's id.\n+     * @param desc it's description text.\n+     * @param effect it's effect.\n+     * @param depth the depth in the tree.\n+     * @param branch the branch it is on.\n+     */\n+    public GlobalResearch(final String id, final String branch, final String desc, final int depth, final IResearchEffect effect)\n+    {\n+        this.id = id;\n+        this.desc = desc;\n+        this.effect = effect;\n+        this.depth = depth;\n+        this.branch = branch;\n+        this.effect.setParent(id, branch);\n+    }\n+\n+    @Override\n+    public boolean canResearch(final int uni_level, @NotNull final LocalResearchTree localTree)\n+    {\n+        final IGlobalResearch parentResearch = parent.isEmpty() ? null : GlobalResearchTree.researchTree.getResearch(branch, parent);\n+        final ILocalResearch localParentResearch = parent.isEmpty() ? null : localTree.getResearch(branch, parentResearch.getId());\n+        final ILocalResearch localResearch = localTree.getResearch(this.getBranch(), this.getId());\n+\n+        return localResearch == null && canDisplay(uni_level) && (parentResearch == null || localParentResearch != null && localParentResearch.getState() == ResearchState.FINISHED) && ( parentResearch == null || !parentResearch.hasResearchedChild(localTree) || !parentResearch.hasOnlyChild()) && (depth < 6 || !localTree.branchAlreadyResearchedLevelSix(branch));\n+    }\n+\n+    @Override\n+    public boolean canDisplay(final int uni_level)\n+    {\n+        return uni_level >= depth;\n+    }\n+\n+    @Override\n+    public void loadCostFromConfig()\n+    {\n+        costList.clear();\n+        try\n+        {\n+            final CommonConfiguration configuration = MinecoloniesAPIProxy.getInstance().getConfig().getCommon();\n+            final ForgeConfigSpec.ConfigValue<List<? extends String>> researchCost = (ForgeConfigSpec.ConfigValue<List<? extends String>>) configuration.getClass().getDeclaredField(id).get(configuration);\n+            for (final String cost : researchCost.get())\n+            {\n+                final String[] tuple = cost.split(\"\\\\*\");\n+                final Item item = ForgeRegistries.ITEMS.getValue(new ResourceLocation(tuple[0]));\n+                if (item == null)\n+                {\n+                    Log.getLogger().warn(\"Couldn't retrieve research costList from config for \" + branch + \"/\" + id + \" for item: \" + tuple[0]);\n+                    return;\n+                }\n+                costList.add(new ItemStorage(new ItemStack(item, 1), Integer.parseInt(tuple[1]), false));\n+            }\n+        }\n+        catch (final NoSuchFieldException | IllegalAccessException | NumberFormatException e)\n+        {\n+            Log.getLogger().warn(\"Couldn't retrieve research costList from config for \" + branch + \"/\" + id + \" !\", e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean hasEnoughResources(final IItemHandler inventory)\n+    {\n+        for (final ItemStorage cost: costList)\n+        {\n+            final int count = InventoryUtils.getItemCountInItemHandler(inventory, stack -> !ItemStackUtils.isEmpty(stack) && stack.isItemEqual(cost.getItemStack()));\n+            if (count < cost.getAmount())\n+            {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public List<ItemStorage> getCostList()\n+    {\n+        return ImmutableList.copyOf(costList);\n+    }\n+\n+    @Override\n+    public void startResearch(@NotNull final PlayerEntity player, @NotNull final LocalResearchTree localResearchTree)\n+    {\n+        if (localResearchTree.getResearch(this.branch, this.id) == null && hasEnoughResources(new InvWrapper(player.inventory)))\n+        {\n+            final ILocalResearch research = new LocalResearch(this.id, this.branch, this.depth);\n+            research.setState(ResearchState.IN_PROGRESS);\n+            localResearchTree.addResearch(branch, research);", "originalCommit": "2745453088fcceb20e9ce9bab5514fa88dc7f692", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTY2Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373591667", "bodyText": "We mark the colony dirty after we call this in the message.", "author": "Raycoms", "createdAt": "2020-01-31T17:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4OTA0OA=="}], "type": "inlineReview"}, {"oid": "a9086ccc9027ee3a99ad1dd4ec72fd23fe9e1caa", "url": "https://github.com/ldtteam/minecolonies/commit/a9086ccc9027ee3a99ad1dd4ec72fd23fe9e1caa", "message": "fix loading", "committedDate": "2020-01-31T17:26:00Z", "type": "commit"}, {"oid": "fed4014480e54ddfb991cdeff213f62603b56411", "url": "https://github.com/ldtteam/minecolonies/commit/fed4014480e54ddfb991cdeff213f62603b56411", "message": "some research fixes", "committedDate": "2020-01-31T18:47:20Z", "type": "commit"}, {"oid": "9e472711bc69e39d0bf4954cdd84a341b3c8b396", "url": "https://github.com/ldtteam/minecolonies/commit/9e472711bc69e39d0bf4954cdd84a341b3c8b396", "message": "fix arrows", "committedDate": "2020-01-31T21:43:44Z", "type": "commit"}, {"oid": "acda0130d3d32398850a70908387ef9a57e5a7a6", "url": "https://github.com/ldtteam/minecolonies/commit/acda0130d3d32398850a70908387ef9a57e5a7a6", "message": "fix university schematic", "committedDate": "2020-02-01T17:57:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODg1Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373798852", "bodyText": "This should be an interface and possibly in its own manager.", "author": "OrionDevelopment", "createdAt": "2020-02-01T19:57:28Z", "path": "src/api/java/com/minecolonies/api/colony/IColony.java", "diffHunk": "@@ -259,6 +261,18 @@\n      */\n     boolean isRemote();\n \n+    /**\n+     * Getter for the research tree.\n+     * @return the colony own research tree.\n+     */\n+    LocalResearchTree getResearchTree();", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODg2Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373798862", "bodyText": "Again this should be an interface and in its own manager.", "author": "OrionDevelopment", "createdAt": "2020-02-01T19:57:44Z", "path": "src/api/java/com/minecolonies/api/colony/IColony.java", "diffHunk": "@@ -259,6 +261,18 @@\n      */\n     boolean isRemote();\n \n+    /**\n+     * Getter for the research tree.\n+     * @return the colony own research tree.\n+     */\n+    LocalResearchTree getResearchTree();\n+\n+    /**\n+     * Get the colonies own research effects.\n+     * @return the ResearchEffects object.\n+     */\n+    ResearchEffects getResearchEffects();", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODk2MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373798960", "bodyText": "This class is probably not supposed to be part of the api.", "author": "OrionDevelopment", "createdAt": "2020-02-01T19:59:48Z", "path": "src/api/java/com/minecolonies/api/crafting/ItemStorageFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.minecolonies.api.crafting;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.\n+ */\n+public class ItemStorageFactory implements IItemStorageFactory", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNjMzNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r374216336", "bodyText": "Still part of the api...", "author": "OrionDevelopment", "createdAt": "2020-02-03T16:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5ODk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTAyNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799026", "bodyText": "I am pretty sure that this class should not be in the api.", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:00:48Z", "path": "src/api/java/com/minecolonies/api/research/BuildingResearchRequirement.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * Certain building research requirements.\n+ */\n+public class BuildingResearchRequirement implements IResearchRequirement", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTEwOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799109", "bodyText": "Again should not be part of the api.", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:01:46Z", "path": "src/api/java/com/minecolonies/api/research/GlobalResearch.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import com.minecolonies.api.configuration.CommonConfiguration;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import com.minecolonies.api.research.interfaces.IResearchRequirement;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.common.ForgeConfigSpec;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.wrapper.InvWrapper;\n+import net.minecraftforge.registries.ForgeRegistries;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+/**\n+ * The implementation of the IGlobalResearch interface which represents the research on the global level.\n+ */\n+public class GlobalResearch implements IGlobalResearch", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTIwOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799209", "bodyText": "Again this should not be part of the api.", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:03:22Z", "path": "src/api/java/com/minecolonies/api/research/LocalResearch.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.ResearchEffects;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.util.ResearchState;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.BASE_RESEARCH_TIME;\n+\n+/**\n+ * The implementation of the ILocalResearch interface which represents one type of research, stored in each colony.\n+ */\n+public class LocalResearch implements ILocalResearch", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTI2NA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799264", "bodyText": "Again this should be abstracted away into an interface if need be and then this implementation should not be in the api.", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:04:19Z", "path": "src/api/java/com/minecolonies/api/research/LocalResearchTree.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import com.minecolonies.api.research.util.ResearchState;\n+import com.minecolonies.api.util.NBTUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public class LocalResearchTree", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5OTI4Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373799287", "bodyText": "Create an interface.....", "author": "OrionDevelopment", "createdAt": "2020-02-01T20:04:54Z", "path": "src/api/java/com/minecolonies/api/research/ResearchTree.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.research.interfaces.IGlobalResearch;\n+import com.minecolonies.api.util.NBTUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.TAG_RESEARCH_TREE;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public class ResearchTree", "originalCommit": "acda0130d3d32398850a70908387ef9a57e5a7a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8910933f6d30df52820df47a14313dddabf9d700", "url": "https://github.com/ldtteam/minecolonies/commit/8910933f6d30df52820df47a14313dddabf9d700", "message": "Merge remote-tracking branch 'origin/version/1.15' into feature/uni-1.15", "committedDate": "2020-02-01T20:33:38Z", "type": "commit"}, {"oid": "39d935530402a3d2b2aa14bd75b4de258b507652", "url": "https://github.com/ldtteam/minecolonies/commit/39d935530402a3d2b2aa14bd75b4de258b507652", "message": "Interfaces everywhere", "committedDate": "2020-02-01T21:25:40Z", "type": "commit"}, {"oid": "827da864e6904d9d61373325064a898ab41ddeaa", "url": "https://github.com/ldtteam/minecolonies/commit/827da864e6904d9d61373325064a898ab41ddeaa", "message": "fix types", "committedDate": "2020-02-01T21:28:16Z", "type": "commit"}, {"oid": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "url": "https://github.com/ldtteam/minecolonies/commit/b4e969d1a1f6699b1a41f344641b21b5d600586f", "message": "remove not necessary tag", "committedDate": "2020-02-01T21:28:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg1MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832850", "bodyText": "How does this return a double modifier?", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:47:48Z", "path": "src/api/java/com/minecolonies/api/research/effects/AbstractResearchEffect.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.minecolonies.api.research.effects;\n+\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * The modifier research effect, it returns a double modifier.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjU0Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836547", "bodyText": "Wrong javadoc", "author": "Raycoms", "createdAt": "2020-02-02T10:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg4MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832880", "bodyText": "Rename to IResearchEffectsManager.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:48:23Z", "path": "src/api/java/com/minecolonies/api/research/effects/IResearchEffects.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.minecolonies.api.research.effects;\n+\n+import com.minecolonies.api.research.interfaces.IResearchEffect;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * The map of unlocked research effects of a given colony.\n+ */\n+public interface IResearchEffects", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjg1MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836851", "bodyText": "k", "author": "Raycoms", "createdAt": "2020-02-02T11:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk1MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832950", "bodyText": "Since it is part of the api anyway -> Scap the interfaces package name and just dump them in the parent.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:49:17Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjU1MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836551", "bodyText": "k", "author": "Raycoms", "createdAt": "2020-02-02T10:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk3Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373832977", "bodyText": "ImmutableList....", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:49:39Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjkxMA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836910", "bodyText": "k", "author": "Raycoms", "createdAt": "2020-02-02T11:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMjk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzAwNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833006", "bodyText": "In my opinion a single research might have more then one effect in the future. This should already be accommodated in the api from the get go.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:50:22Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();\n+\n+    /**\n+     * Set the parent of a research.\n+     * @param id the id of the parent.\n+     */\n+    void setParent(String id);\n+\n+    /**\n+     * Set the research requirement.\n+     * @param requirement the requirement.\n+     */\n+    void setRequirement(final IResearchRequirement requirement);\n+    /**\n+     * Getter for the research requirement.\n+     * @return the requirement.\n+     */\n+    IResearchRequirement getResearchRequirement();\n+\n+    /**\n+     * Get the effect of the research.\n+     * @return the effect.\n+     */\n+    IResearchEffect getEffect();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNzA0OA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373837048", "bodyText": "For now I wanted to do this 1 research = 1 effect, especially to make it easier to display it in the UI", "author": "Raycoms", "createdAt": "2020-02-02T11:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA0Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833043", "bodyText": "In my opinion, it might be a nice idea to have requests which have multiple requirements.\nThis could be adapted by making this a collection.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:50:52Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();\n+\n+    /**\n+     * Set the parent of a research.\n+     * @param id the id of the parent.\n+     */\n+    void setParent(String id);\n+\n+    /**\n+     * Set the research requirement.\n+     * @param requirement the requirement.\n+     */\n+    void setRequirement(final IResearchRequirement requirement);\n+    /**\n+     * Getter for the research requirement.\n+     * @return the requirement.\n+     */\n+    IResearchRequirement getResearchRequirement();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA1OA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833058", "bodyText": "Again it might be a good idea to make it possible for a single research to have multiple requirements.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:51:11Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    List<String> getChilds();\n+\n+    /**\n+     * Set the parent of a research.\n+     * @param id the id of the parent.\n+     */\n+    void setParent(String id);\n+\n+    /**\n+     * Set the research requirement.\n+     * @param requirement the requirement.\n+     */\n+    void setRequirement(final IResearchRequirement requirement);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA2NA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833064", "bodyText": "Nice much better.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:51:24Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzA5Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833093", "bodyText": "This is not a class.\nAnd this documentation can be made better.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:51:39Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzEzMg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833132", "bodyText": "In my opinion a branch should be denoted as a single root research element which gets unlocked by default.\nAs such all ids should be unique and the notion of branches should not be needed.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:52:20Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzIxMw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833213", "bodyText": "Yeah not sure about the design decision to treat branches differently, but i guess it could work.\nOne question though why is there not an object that represents a branch with at least the following properties:\n\nid\ndisplay translation key\ndisplay icon\n??\n\nWould allow for much better UX experience and tracking -> Possibly register the objects via a forge registry?", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:53:51Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzI3Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833273", "bodyText": "I am not sure why we are writing global objects into NBT.\nThis tree should be constant and as such no reading and writing from NBT should be required.\nIf this tree is not constant, it has no reason to exist, since then it can not 100% reliably be used as a reference for the local colony trees.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:55:04Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();\n+\n+    /**\n+     * Get the primary research of a certain branch.\n+     * @param branch the branch it belongs to.\n+     * @return the list of research without parent.\n+     */\n+    List<String> getPrimaryResearch(final String branch);\n+\n+    /**\n+     * Write the research tree to NBT.\n+     * @param compound the compound.\n+     */\n+    void writeToNBT(final CompoundNBT compound);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzMwMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833301", "bodyText": "Cost? Why is this handled separately? Are you possibly initializing this object too early?\nIf so this should be handled differently.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:55:46Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();\n+\n+    /**\n+     * Get the primary research of a certain branch.\n+     * @param branch the branch it belongs to.\n+     * @return the list of research without parent.\n+     */\n+    List<String> getPrimaryResearch(final String branch);\n+\n+    /**\n+     * Write the research tree to NBT.\n+     * @param compound the compound.\n+     */\n+    void writeToNBT(final CompoundNBT compound);\n+\n+    /**\n+     * Read the research tree from NBT.\n+     * @param compound the compound to read it from.\n+    +\n+     */\n+    void readFromNBT(final CompoundNBT compound);\n+\n+    /**\n+     * Load cost for all research.\n+     */\n+    void loadCost();", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzMyOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833329", "bodyText": "Nope", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:56:15Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import net.minecraft.nbt.CompoundNBT;\n+import java.util.List;\n+\n+/**\n+ * The class which contains all research.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzM1MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833351", "bodyText": "It does not contain all research and it is not a class.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzQzNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833436", "bodyText": "TBH The way global and local trees are implemented right now leaves a lot to be desired.\nIn my eyes the global research tree should be build once at startup, and then referenced by the colony.\nThe local tree just is a kind of lookup structure that says: This colony has this research done. It does not even need to be a tree, but a map with some state suffices. Effects of completed researches can then be easily looked up in the global and if we ever change the global it will automatically update all the locals.", "author": "OrionDevelopment", "createdAt": "2020-02-02T09:58:14Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/ILocalResearchTree.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.research.interfaces.ILocalResearch;\n+import net.minecraft.nbt.CompoundNBT;\n+import java.util.List;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface ILocalResearchTree", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzUyMw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833523", "bodyText": "This is named wrongly, or implemented wrongly.\nAs it states right now this is implemented as research effect type. However an effect type should have no notion of its branch, description etc.\nEspecially should an effect have no notion of its parent..... An effect should be active or not, based on if a research marks it as active or not....\nThis should be redesigned, cause right now it is a bit of a mess.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:00:08Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IResearchEffect.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * The effect of a research.\n+ * @param <T> the type of the value.\n+ */\n+public interface IResearchEffect<T>", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzU2MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833561", "bodyText": "Nope. Document better this tells me nothing about what this interface does.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:00:38Z", "path": "src/api/java/com/minecolonies/api/research/interfaces/IResearchRequirement.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.minecolonies.api.research.interfaces;\n+\n+import com.minecolonies.api.colony.IColony;\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * Interface of research requirements.", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzcyMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833721", "bodyText": "This does not work. You also need to check if removedSize is bigger then the localCount, so you will need to simulate first. You have no idea how the IItemHandler is implemented, if it even allows partial extraction. Just because you now only use it for extraction from the Player or Citizen does not mean this is a valid utility implementation, and we might possibly run into this problem in the future.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:03:28Z", "path": "src/api/java/com/minecolonies/api/util/InventoryUtils.java", "diffHunk": "@@ -2084,6 +2084,40 @@ public static boolean removeStackFromItemHandler(final IItemHandler handler, fin\n         return false;\n     }\n \n+    /**\n+     * Remove a stack with a certain qty from a given Itemhandler\n+     *\n+     * @param handler the itemHandler.\n+     * @param input   the stack to remove.\n+     * @param count the amount to remove.\n+     */\n+    public static void removeStackFromItemHandler(final IItemHandler handler, final ItemStack input, final int count)\n+    {\n+        final ItemStack workingStack = input.copy();\n+        int localCount = count;\n+        int tries = 0;\n+        while (tries < count)\n+        {\n+            final int slot = findFirstSlotInItemHandlerNotEmptyWith(handler, stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(workingStack, stack));\n+            if (slot == -1)\n+            {\n+                return;\n+            }\n+\n+            final int removedSize = ItemStackUtils.getSize(handler.extractItem(slot, localCount, false));", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzc4Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833783", "bodyText": "Nope no reason for this object to be here!", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:04:38Z", "path": "src/main/java/com/minecolonies/coremod/MineColonies.java", "diffHunk": "@@ -67,6 +70,11 @@\n      */\n     private static Configuration config;\n \n+    /**\n+     * Create the global research tree.\n+     */\n+    private static IGlobalResearchTree globalResearchTree;", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzc5MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833790", "bodyText": "The api needs to manage this, Minecolonies should not hold an instance to it.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzgwNg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833806", "bodyText": "Why was this removed?!?!?!??!!??!?!?!?!", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:05:11Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowSkeleton.java", "diffHunk": "@@ -107,10 +107,6 @@ public void onButtonClicked(@NotNull final Button button)\n             buttons.get(button.getID()).accept(button);\n             Network.getNetwork().sendToServer(new ClickGuiButtonTriggerMessage(button.getID(), this.resource));\n         }\n-        else", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNjkzNw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373836937", "bodyText": "Because we do not handle all buttons like this and it spams the console when we don't.", "author": "Raycoms", "createdAt": "2020-02-02T11:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzMzkyOQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373833929", "bodyText": "Okey i do not understand your definition logic here:\nHey i do have a research manager cause i was asked to implement it -> But I still refuse to rewrite the surface properly and just leave the methods here?\nThese two methods have nothing directly to do with the colony -> The colony needs to give access to the manager (as with all other managers) and the manager gives access to these two methods. Not the colony gives access to the managers values....", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:07:33Z", "path": "src/main/java/com/minecolonies/coremod/colony/Colony.java", "diffHunk": "@@ -814,6 +832,18 @@ public boolean isRemote()\n         return false;\n     }\n \n+    @Override", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDAwMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834001", "bodyText": "Why is this an effect?!?!?!?\nThis is a research condition.\nConditions -> Research -> Effects....", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:08:43Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBarracks.java", "diffHunk": "@@ -96,6 +98,18 @@ public void onDestroyed()\n         super.onDestroyed();\n     }\n \n+    @Override\n+    public void requestUpgrade(final PlayerEntity player, final BlockPos builder)\n+    {\n+        final UnlockResearchEffect effect = colony.getResearchEffects().getEffect(\"Barracks\", UnlockResearchEffect.class);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDEzNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834134", "bodyText": "Oh no hold on i get it!\nThis is an effect that unlocks a given option.....\nWell okey disregard the previous comment! -> But still this needs to be better named. UnlockBuildingEffect or UnlockAbilityEffect are more appropriately named for buildings and citizen feature locking. Cause right now i had to read 6 classes to understand what is going on.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE3Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834177", "bodyText": "This is 6 classes further in the review and here i understood what UnlockResearchEffect does..... Not well named.... No comment explaining what this variable is doing and checking.", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:11:57Z", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/guard/EntityAIKnight.java", "diffHunk": "@@ -111,12 +111,12 @@ protected int getAttackDelay()\n      */\n     protected IAIState attackProtect()\n     {\n-        final int shieldSlot = InventoryUtils.findFirstSlotInItemHandlerWith(getInventory(),\n-          Items.SHIELD);\n+        final int shieldSlot = InventoryUtils.findFirstSlotInItemHandlerWith(getInventory(), Items.SHIELD);\n \n         if (target != null && target.isAlive())\n         {\n-            if (shieldSlot != -1)\n+            final UnlockResearchEffect effect = worker.getCitizenColonyHandler().getColony().getResearchEffects().getEffect(\"Shield Usage\", UnlockResearchEffect.class);", "originalCommit": "b4e969d1a1f6699b1a41f344641b21b5d600586f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE5OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834199", "bodyText": "BTW this can simply be a boolean check -> getResearchEffects.has(\"Shield Usage\").", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDIxMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373834211", "bodyText": "Also Constants!", "author": "OrionDevelopment", "createdAt": "2020-02-02T10:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzNDE3Nw=="}], "type": "inlineReview"}, {"oid": "441a982c02fd9180b902c75f079aec71cfb13c7b", "url": "https://github.com/ldtteam/minecolonies/commit/441a982c02fd9180b902c75f079aec71cfb13c7b", "message": "Apply comments", "committedDate": "2020-02-02T11:30:07Z", "type": "commit"}, {"oid": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "url": "https://github.com/ldtteam/minecolonies/commit/2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "message": "fix order", "committedDate": "2020-02-02T11:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc3MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373880770", "bodyText": "This is definitely something that would be removed once Datapack support is added.", "author": "Asherslab", "createdAt": "2020-02-02T22:28:50Z", "path": "src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java", "diffHunk": "@@ -156,6 +157,38 @@\n     public final ForgeConfigSpec.BooleanValue creativeResolve;\n     public final ForgeConfigSpec.BooleanValue canPlayerUseResetCommand;\n \n+    /*  --------------------------------------------------------------------------------- *\n+     *  ------------------- ######## Research Settings ######## ------------------- *\n+     *  --------------------------------------------------------------------------------- */\n+\n+    public final ForgeConfigSpec.ConfigValue<List<? extends String>> tactictraining;", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc5Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373880796", "bodyText": "Also, is the capitalization supposed to be all lowercase?", "author": "Asherslab", "createdAt": "2020-02-02T22:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjQxNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886414", "bodyText": "yeah, it's all lowercase so we can load the values from here.", "author": "Raycoms", "createdAt": "2020-02-02T23:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDgzNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373880834", "bodyText": "Is that going to cause issues for pre-existing worlds?", "author": "Asherslab", "createdAt": "2020-02-02T22:29:47Z", "path": "src/api/java/com/minecolonies/api/configuration/CommonConfiguration.java", "diffHunk": "@@ -224,7 +257,7 @@ protected CommonConfiguration(final ForgeConfigSpec.Builder builder)\n         townHallPadding = defineInteger(builder, \"townhallpadding\", 20, 1, 20000);\n         townHallPaddingChunk = defineInteger(builder, \"townhallpaddingchunk\", 1, 1, 200);\n         restrictColonyPlacement = defineBoolean(builder, \"restrictcolonyplacement\", false);\n-        enableDynamicColonySizes = defineBoolean(builder, \"enabledynamiccolonysizes\", false);\n+        enableDynamicColonySizes = defineBoolean(builder, \"enabledynamiccolonysizes\", true);", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjQyMg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886422", "bodyText": "No", "author": "Raycoms", "createdAt": "2020-02-02T23:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MDgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTMxMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881311", "bodyText": "only at the top of the review, so not entirely certain what ItemStorage is being used for but I got the general gist. Why're we using the ItemStorage class here? We don't need any of the same data for research criteria that we do for crafting. Take a look at the ItemPredicate class from vanilla, very useful class and might be better suited to our needs? especially once using datapacks.\nmy main issue is that once we move to datapacks these classes will most likely have no need", "author": "Asherslab", "createdAt": "2020-02-02T22:36:50Z", "path": "src/api/java/com/minecolonies/api/crafting/IItemStorageFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.minecolonies.api.crafting;\n+\n+import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactory;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.util.constant.Constants.PARAMS_ITEMSTORAGE;\n+\n+/**\n+ * Interface for the IItemStorageFactory which is responsible for creating and maintaining ItemStorage objects.\n+ */\n+public interface IItemStorageFactory extends IFactory<FactoryVoidInput, ItemStorage>", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjQ3MQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886471", "bodyText": "This is for an entire different usecase, it's so that we can serialize itemStorages better.\nNothing related directly to research.\nWe still will need this, always.", "author": "Raycoms", "createdAt": "2020-02-02T23:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5MDkyMQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373890921", "bodyText": "okay not research related. i thought it was", "author": "Asherslab", "createdAt": "2020-02-03T00:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTYyNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881624", "bodyText": "Is there a reason we're using String IDs and not resource locations? would be better suited for when research isn't statically (code) defined. or even just for when other mods add it", "author": "Asherslab", "createdAt": "2020-02-02T22:42:04Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjUzOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886538", "bodyText": "I want to avoid resource location where they are not strictly necessary, it's a lot of code and storage overhead and extra comparisons etc needed somewhere where we only expect strings to be added. There is no \"different mod require different locations\" necessity here.", "author": "Raycoms", "createdAt": "2020-02-02T23:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTY4Ng==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881686", "bodyText": "I also think branch names could be resource locations?", "author": "Asherslab", "createdAt": "2020-02-02T22:42:51Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjU1Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886557", "bodyText": "same thing here. Resourcelocations are only useful when we want to localize it for our mod and we're afraid another mod uses the same id.", "author": "Raycoms", "createdAt": "2020-02-02T23:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTcyNA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881724", "bodyText": "typo here btw", "author": "Asherslab", "createdAt": "2020-02-02T22:43:28Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTc5MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881790", "bodyText": "this method name doesn't match the javadoc's description, something like hasChildren would make more sense, unless the javadoc is wrong", "author": "Asherslab", "createdAt": "2020-02-02T22:44:34Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTg1Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373881852", "bodyText": "plural child is children", "author": "Asherslab", "createdAt": "2020-02-02T22:45:28Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearch.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.minecolonies.api.research;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraftforge.items.IItemHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Interface defining how a research is.\n+ */\n+public interface IGlobalResearch\n+{\n+    /**\n+     * Check if this research can be executed at this moment.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canResearch(int uni_level, @NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Check if this research can be displayed in the GUI.\n+     * @param uni_level the level of the university.\n+     * @return true if so.\n+     */\n+    boolean canDisplay(int uni_level);\n+\n+    /**\n+     * Load the cost for the research from the configuration file.\n+     */\n+    void loadCostFromConfig();\n+\n+    /**\n+     * Check whether all resources are available to execute the research.\n+     * @param inventory the inventory to check in.\n+     * @return true if so\n+     */\n+    boolean hasEnoughResources(final IItemHandler inventory);\n+\n+    /**\n+     * Get the cost list from the research.\n+     * @return the list.\n+     */\n+    List<ItemStorage> getCostList();\n+\n+    /**\n+     * Start the research.\n+     * @param player the player starting it.\n+     * @param localResearchTree  the local research tree to store in the colony.\n+     */\n+    void startResearch(@NotNull final PlayerEntity player, @NotNull final ILocalResearchTree localResearchTree);\n+\n+    /**\n+     * Human readable description of research.\n+     * @return the description.\n+     */\n+    String getDesc();\n+\n+    /**\n+     * Getter of the id of the research.\n+     * @return the String id.\n+     */\n+    String getId();\n+\n+    /**\n+     * Get the id of the parent IResearch.\n+     * @return the string id.\n+     */\n+    String getParent();\n+\n+    /**\n+     * Get the string name of the branch.\n+     * @return the branch name.\n+     */\n+    String getBranch();\n+\n+    /**\n+     * Get the depth in the research tree.\n+     * @return the depth.\n+     */\n+    int getDepth();\n+\n+    /**\n+     * Check if this research is an only child research.\n+     * This means, after researching one child no other childs can e researched.\n+     * @return true if so.\n+     */\n+    boolean hasOnlyChild();\n+\n+    /**\n+     * Set if a research should only allow one child.\n+     * @param onlyChild the param to set.\n+     */\n+    void setOnlyChild(boolean onlyChild);\n+\n+    /**\n+     * Check if this research has other childs.\n+     * @param localTree the local tree of the colony.\n+     * @return true if so.\n+     */\n+    boolean hasResearchedChild(@NotNull final ILocalResearchTree localTree);\n+\n+    /**\n+     * Add a child to a research.\n+     * @param child the child to add.\n+     */\n+    void addChild(IGlobalResearch child);\n+\n+    /**\n+     * Get the list of childs of the research.\n+     */\n+    ImmutableList<String> getChilds();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjAxMA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882010", "bodyText": "yeah i definitely think branches should use ResourceLocation IDs not strings", "author": "Asherslab", "createdAt": "2020-02-02T22:47:22Z", "path": "src/api/java/com/minecolonies/api/research/IGlobalResearchTree.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.MinecoloniesAPIProxy;\n+import net.minecraft.nbt.CompoundNBT;\n+\n+import java.util.*;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface IGlobalResearchTree\n+{\n+    /**\n+     * Get an instance of this Tree.\n+     * @return the instance.\n+     */\n+    static IGlobalResearchTree getInstance()\n+    {\n+        return MinecoloniesAPIProxy.getInstance().getGlobalResearchTree();\n+    }\n+\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    IGlobalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final IGlobalResearch research);\n+\n+    /**\n+     * Get the list of all branches.\n+     * @return the list of branches.\n+     */\n+    List<String> getBranches();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjE5Mw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882193", "bodyText": "Could you refine this to describe the fact that this is for the current research item that is being worked on in the colony?", "author": "Asherslab", "createdAt": "2020-02-02T22:49:56Z", "path": "src/api/java/com/minecolonies/api/research/ILocalResearch.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import com.minecolonies.api.research.util.ResearchState;\n+\n+/**\n+ * Interface defining how a local research at a colony is.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjM0Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882347", "bodyText": "that's a long method name. could be more concise? isBranchAboveLevel6. better yet, that's a very specific method, could we instead do getHighestResearchedLevel and then compare it where it's needed to 6 or etc.", "author": "Asherslab", "createdAt": "2020-02-02T22:52:45Z", "path": "src/api/java/com/minecolonies/api/research/ILocalResearchTree.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import net.minecraft.nbt.CompoundNBT;\n+import java.util.List;\n+\n+/**\n+ * The class which contains all research.\n+ */\n+public interface ILocalResearchTree\n+{\n+    /**\n+     * Get a research by id.\n+     * @param id the id of the research.\n+     * @param branch the branch of the research.\n+     * @return the IResearch object.\n+     */\n+    ILocalResearch getResearch(final String branch, final String id);\n+\n+    /**\n+     * Add a research to the tree.\n+     * @param research the research to add.\n+     */\n+    void addResearch(final String branch, final ILocalResearch research);\n+\n+    /**\n+     * Check if a branch already researched a level 6 research.\n+     * @param branch the branch to check.\n+     * @return true if so.\n+     */\n+    boolean branchAlreadyResearchedLevelSix(final String branch);", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjQzOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882438", "bodyText": "ResourceLocation here", "author": "Asherslab", "createdAt": "2020-02-02T22:53:58Z", "path": "src/api/java/com/minecolonies/api/research/IResearchEffect.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.minecolonies.api.research;\n+\n+import net.minecraft.util.text.TranslationTextComponent;\n+\n+/**\n+ * The effect of a research.\n+ * @param <T> the type of the value.\n+ */\n+public interface IResearchEffect<T>\n+{\n+    /**\n+     * Get the effect of the research.\n+     * @return the effect.\n+     */\n+    T getEffect();\n+\n+    /**\n+     * Set the research effect.\n+     * @param effect the value to set it to.\n+     */\n+    void setEffect(T effect);\n+\n+    /**\n+     * Getter for the ID of the effect.\n+     * @return the String id.\n+     */\n+    String getId();", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjQ4Nw==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373882487", "bodyText": "this javadoc makes it sound like only one colony \"holds the tree and effects\", I'd assume that isn't so?", "author": "Asherslab", "createdAt": "2020-02-02T22:55:04Z", "path": "src/api/java/com/minecolonies/api/research/IResearchManager.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.minecolonies.api.research;\n+\n+import com.minecolonies.api.research.effects.IResearchEffectManager;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Research manager of the colony holding the tree and effects.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NjM4MA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373886380", "bodyText": "Only one colony holds its own local tree", "author": "Raycoms", "createdAt": "2020-02-02T23:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzAwOA==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883008", "bodyText": "should be RESEARCHER_ID", "author": "Asherslab", "createdAt": "2020-02-02T23:03:00Z", "path": "src/api/java/com/minecolonies/api/colony/jobs/ModJobs.java", "diffHunk": "@@ -35,6 +35,7 @@\n     public static final ResourceLocation SIFTER_ID         = new ResourceLocation(Constants.MOD_ID,\"sifter\");\n     public static final ResourceLocation FLORIST_ID        = new ResourceLocation(Constants.MOD_ID,\"florist\");\n     public static final ResourceLocation ENCHANTER_ID      = new ResourceLocation(Constants.MOD_ID,\"enchanter\");\n+    public static final ResourceLocation RESEARCH_ID       = new ResourceLocation(Constants.MOD_ID,\"researcher\");;", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzE0OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883149", "bodyText": "review the JavaDoc in this class. \"Lumberjack\"", "author": "Asherslab", "createdAt": "2020-02-02T23:05:19Z", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutUniversity.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ButtonImage;\n+import com.ldtteam.blockout.views.View;\n+import com.minecolonies.api.research.IGlobalResearchTree;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingUniversity;\n+import net.minecraft.util.ResourceLocation;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.minecolonies.api.util.constant.TranslationConstants.*;\n+import static com.minecolonies.api.util.constant.WindowConstants.*;\n+\n+/**\n+ * Window for the lumberjack hut.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzU0Mg==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883542", "bodyText": "you seem to have left some methods from the cow herder building in here", "author": "Asherslab", "createdAt": "2020-02-02T23:10:09Z", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingUniversity.java", "diffHunk": "@@ -0,0 +1,238 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.research.ILocalResearch;\n+import com.minecolonies.coremod.client.gui.WindowHutUniversity;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobResearch;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_BOOKCASES;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Creates a new building for the university.\n+ */\n+public class BuildingUniversity extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String UNIVERSITY = \"university\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * List of registered barrels.\n+     */\n+    private final List<BlockPos> bookCases = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingUniversity(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return UNIVERSITY;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return UNIVERSITY;\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public void deserializeNBT(final CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        final ListNBT furnaceTagList = compound.getList(TAG_BOOKCASES, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < furnaceTagList.size(); ++i)\n+        {\n+            bookCases.add(NBTUtil.readBlockPos(furnaceTagList.getCompound(i).getCompound(TAG_POS)));\n+        }\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT compound = super.serializeNBT();\n+        @NotNull final ListNBT bookcaseTagList = new ListNBT();\n+        for (@NotNull final BlockPos entry : bookCases)\n+        {\n+            @NotNull final CompoundNBT bookCompound = new CompoundNBT();\n+            bookCompound.put(TAG_POS, NBTUtil.writeBlockPos(entry));\n+            bookcaseTagList.add(bookCompound);\n+        }\n+        compound.put(TAG_BOOKCASES, bookcaseTagList);\n+\n+        return compound;\n+    }\n+\n+    @Override\n+    public void registerBlockPosition(@NotNull final Block block, @NotNull final BlockPos pos, @NotNull final World world)\n+    {\n+        super.registerBlockPosition(block, pos, world);\n+        //todo we might in the future want to add our own oredict tag to this.\n+        if (block == Blocks.BOOKSHELF)\n+        {\n+            bookCases.add(pos);\n+        }\n+    }\n+\n+    /**\n+     * Returns a random bookshelf from the list.\n+     *\n+     * @return the position of it.\n+     */\n+    public BlockPos getRandomBookShelf()\n+    {\n+        if (bookCases.isEmpty())\n+        {\n+            return getPosition();\n+        }\n+        final BlockPos returnPos = bookCases.get(random.nextInt(bookCases.size()));\n+        if (colony.getWorld().getBlockState(returnPos).getBlock() == Blocks.BOOKSHELF)\n+        {\n+            return returnPos;\n+        }\n+        bookCases.remove(returnPos);\n+        return getPosition();\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        return new JobResearch(citizen);\n+    }\n+\n+    @Override\n+    public BuildingEntry getBuildingRegistryEntry()\n+    {\n+        return ModBuildings.university;\n+    }\n+\n+    @Override\n+    public void onColonyTick(@NotNull final IColony colony)\n+    {\n+        super.onColonyTick(colony);\n+\n+        final List<ILocalResearch> inProgress= colony.getResearchManager().getResearchTree().getResearchInProgress();\n+\n+        int i = 1;\n+        for (final ILocalResearch research : inProgress)\n+        {\n+            if (i > getAssignedCitizen().size())\n+            {\n+                return;\n+            }\n+\n+            colony.getResearchManager().getResearchTree().getResearch(research.getBranch(), research.getId()).research(colony.getResearchManager().getResearchEffects(), colony.getResearchManager().getResearchTree());\n+            this.markDirty();\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * ClientSide representation of the building.\n+     */\n+    public static class View extends AbstractBuildingWorker.View\n+    {\n+        /**\n+         * Milk Cows or not.\n+         */\n+        private boolean milkCows = true;", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MzY3OQ==", "url": "https://github.com/ldtteam/minecolonies/pull/4279#discussion_r373883679", "bodyText": "this is not for recipes", "author": "Asherslab", "createdAt": "2020-02-02T23:12:04Z", "path": "src/main/java/com/minecolonies/coremod/research/GlobalResearchFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.minecolonies.coremod.research;\n+\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.colony.requestsystem.factory.FactoryVoidInput;\n+import com.minecolonies.api.colony.requestsystem.factory.IFactoryController;\n+import com.minecolonies.api.research.factories.IGlobalResearchFactory;\n+import com.minecolonies.api.research.IGlobalResearch;\n+import com.minecolonies.api.research.IGlobalResearchTree;\n+import com.minecolonies.api.research.IResearchEffect;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.research.util.ResearchConstants.*;\n+\n+/**\n+ * Factory implementation taking care of creating new instances, serializing and deserializing RecipeStorages.", "originalCommit": "2fc7462f612e0a6f9cfdd24ec6e6f8117a7c893c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fdef3e96714534552767cfaa235a3ce238d0531d", "url": "https://github.com/ldtteam/minecolonies/commit/fdef3e96714534552767cfaa235a3ce238d0531d", "message": "fix javadoc", "committedDate": "2020-02-03T08:44:03Z", "type": "commit"}, {"oid": "5fdd0e20f948cc0a353e2bcc42f4334c7db4bbb0", "url": "https://github.com/ldtteam/minecolonies/commit/5fdd0e20f948cc0a353e2bcc42f4334c7db4bbb0", "message": "A bit more refactoring of packages", "committedDate": "2020-02-03T18:11:09Z", "type": "commit"}, {"oid": "995957e5054455b6aa98e11a45368304fafc4d64", "url": "https://github.com/ldtteam/minecolonies/commit/995957e5054455b6aa98e11a45368304fafc4d64", "message": "hotfix fisherman", "committedDate": "2020-02-04T21:22:59Z", "type": "commit"}]}