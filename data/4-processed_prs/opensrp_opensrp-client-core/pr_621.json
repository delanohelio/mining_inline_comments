{"pr_number": 621, "pr_title": "578 data base interfaces for plan evaluation", "pr_createdAt": "2020-08-06T12:24:44Z", "pr_url": "https://github.com/opensrp/opensrp-client-core/pull/621", "timeline": [{"oid": "bac52cb0c252b79bb438d3cddc55e5132f3acd25", "url": "https://github.com/opensrp/opensrp-client-core/commit/bac52cb0c252b79bb438d3cddc55e5132f3acd25", "message": "Implement task look up", "committedDate": "2020-07-03T09:37:18Z", "type": "commit"}, {"oid": "1f2bef72918ef6d94f9ec61b60ba1c9715503849", "url": "https://github.com/opensrp/opensrp-client-core/commit/1f2bef72918ef6d94f9ec61b60ba1c9715503849", "message": "Add unit tests for Task respository", "committedDate": "2020-07-03T12:37:23Z", "type": "commit"}, {"oid": "a964035800b25b1ba034fc508af48374e5b05edc", "url": "https://github.com/opensrp/opensrp-client-core/commit/a964035800b25b1ba034fc508af48374e5b05edc", "message": "implement checkIfTaskExists", "committedDate": "2020-07-03T12:44:50Z", "type": "commit"}, {"oid": "5be045e52fd76508169a7c84725b3daefdbf6c90", "url": "https://github.com/opensrp/opensrp-client-core/commit/5be045e52fd76508169a7c84725b3daefdbf6c90", "message": "Optimize imports", "committedDate": "2020-07-04T09:11:16Z", "type": "commit"}, {"oid": "b6c33d11d1c7831831dbff8ee0447bfdeac9baf8", "url": "https://github.com/opensrp/opensrp-client-core/commit/b6c33d11d1c7831831dbff8ee0447bfdeac9baf8", "message": "Add columns to event and client table used for lookup", "committedDate": "2020-07-09T10:39:45Z", "type": "commit"}, {"oid": "1d419e9f40414cbeb567b8c38dd8882c06549a39", "url": "https://github.com/opensrp/opensrp-client-core/commit/1d419e9f40414cbeb567b8c38dd8882c06549a39", "message": "Populate plan Identifier on event table", "committedDate": "2020-07-09T10:45:13Z", "type": "commit"}, {"oid": "7fd19a0b06fcc3f9eb22a745335dd7a79c21a014", "url": "https://github.com/opensrp/opensrp-client-core/commit/7fd19a0b06fcc3f9eb22a745335dd7a79c21a014", "message": "Populate Client search fields", "committedDate": "2020-07-09T11:34:00Z", "type": "commit"}, {"oid": "171d0d2bb676254b5b3ec5c19a642d5c3e350e8b", "url": "https://github.com/opensrp/opensrp-client-core/commit/171d0d2bb676254b5b3ec5c19a642d5c3e350e8b", "message": "add implementation for clients and events lookup", "committedDate": "2020-07-09T11:54:51Z", "type": "commit"}, {"oid": "83b9827ca54cfab389acbc6e73fcb1b73c79ae2c", "url": "https://github.com/opensrp/opensrp-client-core/commit/83b9827ca54cfab389acbc6e73fcb1b73c79ae2c", "message": "Save search fields to events and clients table", "committedDate": "2020-07-09T17:01:12Z", "type": "commit"}, {"oid": "88b0f5e6105d1e403aec114814c1f7fd873c6e93", "url": "https://github.com/opensrp/opensrp-client-core/commit/88b0f5e6105d1e403aec114814c1f7fd873c6e93", "message": "Save search fields on prepared statements", "committedDate": "2020-07-09T17:17:31Z", "type": "commit"}, {"oid": "5f725a978881f001584aefa5014f6da6a7b4e9e5", "url": "https://github.com/opensrp/opensrp-client-core/commit/5f725a978881f001584aefa5014f6da6a7b4e9e5", "message": "Add lombok dependency", "committedDate": "2020-07-09T17:18:14Z", "type": "commit"}, {"oid": "95bf70e6f52c2599ec8f383dc7d0185a9752f34c", "url": "https://github.com/opensrp/opensrp-client-core/commit/95bf70e6f52c2599ec8f383dc7d0185a9752f34c", "message": "Remove room implementation of saving relationships", "committedDate": "2020-07-13T08:36:31Z", "type": "commit"}, {"oid": "b9c4bc5071d62afcc2b59f9056fef32b8d5da1e9", "url": "https://github.com/opensrp/opensrp-client-core/commit/b9c4bc5071d62afcc2b59f9056fef32b8d5da1e9", "message": "add client relationship repository", "committedDate": "2020-07-13T14:42:41Z", "type": "commit"}, {"oid": "da721104634e6d7ac3461d02bfd0f3f76a7a84e6", "url": "https://github.com/opensrp/opensrp-client-core/commit/da721104634e6d7ac3461d02bfd0f3f76a7a84e6", "message": "Save client relationship if plan evaluation is complete", "committedDate": "2020-07-13T15:48:12Z", "type": "commit"}, {"oid": "202a0f5acecf27ef3759165d244f1c451022c82b", "url": "https://github.com/opensrp/opensrp-client-core/commit/202a0f5acecf27ef3759165d244f1c451022c82b", "message": "Save client relationship if plan evaluation is complete", "committedDate": "2020-07-13T15:50:32Z", "type": "commit"}, {"oid": "2e095a996f361112b832702b757a680dfe88fde6", "url": "https://github.com/opensrp/opensrp-client-core/commit/2e095a996f361112b832702b757a680dfe88fde6", "message": "exlude new columns from other columns logic", "committedDate": "2020-07-13T16:12:37Z", "type": "commit"}, {"oid": "54d1f6825abf77b870d91b6978b31635b22145b6", "url": "https://github.com/opensrp/opensrp-client-core/commit/54d1f6825abf77b870d91b6978b31635b22145b6", "message": "clean up", "committedDate": "2020-07-13T16:25:51Z", "type": "commit"}, {"oid": "1122033eb6bab2800236412550ba40a0b50f6e3b", "url": "https://github.com/opensrp/opensrp-client-core/commit/1122033eb6bab2800236412550ba40a0b50f6e3b", "message": "Bind null if value if blank", "committedDate": "2020-07-14T08:12:43Z", "type": "commit"}, {"oid": "e613be02e408902a910f7afac97f5bf01bb1e9d5", "url": "https://github.com/opensrp/opensrp-client-core/commit/e613be02e408902a910f7afac97f5bf01bb1e9d5", "message": "add unit tests for ClientRelationshipRepository", "committedDate": "2020-07-14T17:03:01Z", "type": "commit"}, {"oid": "2ca139f6fe0f154d251855404759527bfda58a0f", "url": "https://github.com/opensrp/opensrp-client-core/commit/2ca139f6fe0f154d251855404759527bfda58a0f", "message": "Merge branch '578-data-base-interfaces-for-plan-evaluation' of https://github.com/OpenSRP/opensrp-client-core into 578-data-base-interfaces-for-plan-evaluation", "committedDate": "2020-08-06T12:04:36Z", "type": "commit"}, {"oid": "8a9f1dbd81bd9aea525a88f65025fb60ed9e61ca", "url": "https://github.com/opensrp/opensrp-client-core/commit/8a9f1dbd81bd9aea525a88f65025fb60ed9e61ca", "message": "Merge branch 'master' into 578-data-base-interfaces-for-plan-evaluation", "committedDate": "2020-08-06T12:23:55Z", "type": "commit"}, {"oid": "8176e1f628cb46bf4acbf59d0976f27713826a29", "url": "https://github.com/opensrp/opensrp-client-core/commit/8176e1f628cb46bf4acbf59d0976f27713826a29", "message": "Merge branch 'master' into 578-data-base-interfaces-for-plan-evaluation", "committedDate": "2020-09-03T09:45:04Z", "type": "commit"}, {"oid": "7829355456131300c3b56a9884969ce4a1eb7769", "url": "https://github.com/opensrp/opensrp-client-core/commit/7829355456131300c3b56a9884969ce4a1eb7769", "message": "Implement dao interfaces in separate classes", "committedDate": "2020-09-03T10:04:20Z", "type": "commit"}, {"oid": "fd8d1583d3012bfad719b8f62249cb7b61fe9810", "url": "https://github.com/opensrp/opensrp-client-core/commit/fd8d1583d3012bfad719b8f62249cb7b61fe9810", "message": "Implement dao interfaces", "committedDate": "2020-09-03T10:12:49Z", "type": "commit"}, {"oid": "54d667bbb3cebb67afe496f8c7bc39d3d6fe2c8c", "url": "https://github.com/opensrp/opensrp-client-core/commit/54d667bbb3cebb67afe496f8c7bc39d3d6fe2c8c", "message": "Merge branch 'master' into 578-data-base-interfaces-for-plan-evaluation", "committedDate": "2020-09-03T11:46:14Z", "type": "commit"}, {"oid": "99ec04bb82ed4d35ff7eacbeec55a13de7322066", "url": "https://github.com/opensrp/opensrp-client-core/commit/99ec04bb82ed4d35ff7eacbeec55a13de7322066", "message": "codacy code cleanup", "committedDate": "2020-09-03T11:58:38Z", "type": "commit"}, {"oid": "b81b5b10601d7455e539c1e045ab5fd4b65b686a", "url": "https://github.com/opensrp/opensrp-client-core/commit/b81b5b10601d7455e539c1e045ab5fd4b65b686a", "message": "implement unit tests for events dao", "committedDate": "2020-09-03T13:31:42Z", "type": "commit"}, {"oid": "35aac86c8efb761e7ebbeb691a5320af0ac65294", "url": "https://github.com/opensrp/opensrp-client-core/commit/35aac86c8efb761e7ebbeb691a5320af0ac65294", "message": "Add unit tests for client dao interfaces", "committedDate": "2020-09-03T15:49:06Z", "type": "commit"}, {"oid": "025ecc0c0fe4a04d0fbc217cb704818c7222d4ed", "url": "https://github.com/opensrp/opensrp-client-core/commit/025ecc0c0fe4a04d0fbc217cb704818c7222d4ed", "message": "Merge branch 'master' into 578-data-base-interfaces-for-plan-evaluation", "committedDate": "2020-09-07T06:37:18Z", "type": "commit"}, {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "url": "https://github.com/opensrp/opensrp-client-core/commit/bd7fe3a1ff9062eee68a533476d37270f2f620df", "message": "Add missing import", "committedDate": "2020-09-07T06:41:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzI5OQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484417299", "bodyText": "This is query here is supposed to check the for column and not the id column. The method getTaskByIdentifier checks the id column.  I think the param here is named incorrectly", "author": "ekigamba", "createdAt": "2020-09-07T12:58:08Z", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");\n+            if (structure != null) {\n+                String structureId = structure.element().as(QuestionnaireResponse.Item.Answer.class).as(com.ibm.fhir.model.type.String.class).getValue();\n+                task.setStructureId(structureId);\n+            } else {\n+                task.setStructureId(task.getForEntity());\n+            }\n+        }\n+        addOrUpdate(task);\n+        Intent intent = new Intent();\n+        Intent taskGeneratedIntent = new Intent(TASK_GENERATED_EVENT);\n+        taskGeneratedIntent.putExtra(TASK_GENERATED, task);\n+        LocalBroadcastManager.getInstance(CoreLibrary.getInstance().context().applicationContext()).sendBroadcast(intent);\n+    }\n+\n+    @Override\n+    public boolean checkIfTaskExists(String baseEntityId, String jurisdiction, String planIdentifier, String code) {\n+        return !getTasksByEntityAndCode(planIdentifier, jurisdiction, baseEntityId, code).isEmpty();\n+    }\n+\n+    @Override\n+    public List<Task> findAllTasksForEntity(String entityId) {\n+        return getTasksByEntity(entityId)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public org.smartregister.domain.Task getTaskByEntityId(String taskId) {\n+        return getTaskByIdentifier(taskId);", "originalCommit": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MTY0OQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484471649", "bodyText": "The interface is note properly named on plan evaluator, let me confirm and make a PR on the library", "author": "githengi", "createdAt": "2020-09-07T14:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzY0Mg==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484417642", "bodyText": "I think this method should be retained as an update only operation", "author": "ekigamba", "createdAt": "2020-09-07T12:58:49Z", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");\n+            if (structure != null) {\n+                String structureId = structure.element().as(QuestionnaireResponse.Item.Answer.class).as(com.ibm.fhir.model.type.String.class).getValue();\n+                task.setStructureId(structureId);\n+            } else {\n+                task.setStructureId(task.getForEntity());\n+            }\n+        }\n+        addOrUpdate(task);\n+        Intent intent = new Intent();\n+        Intent taskGeneratedIntent = new Intent(TASK_GENERATED_EVENT);\n+        taskGeneratedIntent.putExtra(TASK_GENERATED, task);\n+        LocalBroadcastManager.getInstance(CoreLibrary.getInstance().context().applicationContext()).sendBroadcast(intent);\n+    }\n+\n+    @Override\n+    public boolean checkIfTaskExists(String baseEntityId, String jurisdiction, String planIdentifier, String code) {\n+        return !getTasksByEntityAndCode(planIdentifier, jurisdiction, baseEntityId, code).isEmpty();\n+    }\n+\n+    @Override\n+    public List<Task> findAllTasksForEntity(String entityId) {\n+        return getTasksByEntity(entityId)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public org.smartregister.domain.Task getTaskByEntityId(String taskId) {\n+        return getTaskByIdentifier(taskId);\n+    }\n+\n+    @Override\n+    public void updateTask(org.smartregister.domain.Task task) {\n+        addOrUpdate(task);", "originalCommit": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwNTU2Nw==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484705567", "bodyText": "added", "author": "githengi", "createdAt": "2020-09-08T07:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NzM3NQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484787375", "bodyText": "Cool, I have seen the change. Kindly update this call to pass true for an update-only operation", "author": "ekigamba", "createdAt": "2020-09-08T09:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNTg4NA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484425884", "bodyText": "(planIdentifier is null or planIdentifier != ?) I am not sure if this was the aim when filtering by planIdentifier", "author": "ekigamba", "createdAt": "2020-09-07T13:15:49Z", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/EventDaoImpl.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.smartregister.repository.dao;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+\n+import org.smartregister.converters.EventConverter;\n+import org.smartregister.domain.Event;\n+import org.smartregister.pathevaluator.dao.EventDao;\n+import org.smartregister.repository.EventClientRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import timber.log.Timber;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class EventDaoImpl extends EventClientRepository implements EventDao {\n+\n+    @Override\n+    public List<QuestionnaireResponse> findEventsByEntityIdAndPlan(String resourceId, String\n+            planIdentifier) {\n+        return fetchEvents(String.format(\"select %s from %s where %s =? and (%s is null or %s !=? )\", event_column.json,", "originalCommit": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MDYzNg==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484470636", "bodyText": "Nice catch. This is a bug, let me update should be planIdentifier is null or is equal to the plan being passed", "author": "githengi", "createdAt": "2020-09-07T14:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNTg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNzA5MA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484437090", "bodyText": "Will the current apps crash/fail on upgrading the client core version due to these missing columns, locationId, residence and clientType, in the current client table?", "author": "ekigamba", "createdAt": "2020-09-07T13:38:08Z", "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -259,6 +260,13 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                 statement.bindString(columnOrder.get(client_column.syncStatus.name()), syncStatus);\n                 statement.bindString(columnOrder.get(client_column.validationStatus.name()), BaseRepository.TYPE_Valid);\n                 statement.bindString(columnOrder.get(client_column.baseEntityId.name()), jsonObject.getString(client_column.baseEntityId.name()));\n+\n+                bindString(statement, columnOrder.get(client_column.locationId.name()), jsonObject.optString(AllConstants.LOCATION_ID));", "originalCommit": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwNjAzMw==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484706033", "bodyText": "apps should upgrade their db when upgrading core", "author": "githengi", "createdAt": "2020-09-08T07:25:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNzA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4ODY2Nw==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484788667", "bodyText": "Cool. Have this documented on the release/tag note & announce", "author": "ekigamba", "createdAt": "2020-09-08T09:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNzA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTI5Nw==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484439297", "bodyText": "Will the current apps crash/fail on upgrading the client core version due to this missing column, planId, in the current event table?", "author": "ekigamba", "createdAt": "2020-09-07T13:42:39Z", "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -272,14 +280,20 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(EVENT_ID));\n                 else if (jsonObject.has(_ID))\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(_ID));\n+                JSONObject details = jsonObject.optJSONObject(AllConstants.DETAILS);\n+                if (details != null) {\n+                    bindString(statement, columnOrder.get(event_column.planId.name()), details.optString(AllConstants.PLAN_IDENTIFIER));", "originalCommit": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NDg2Mw==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484694863", "bodyText": "apps are to do a database migration to add the column name", "author": "githengi", "createdAt": "2020-09-08T07:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTI5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4ODU2Nw==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484788567", "bodyText": "Cool. Have this documented on the release/tag note & announce", "author": "ekigamba", "createdAt": "2020-09-08T09:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NDQ1Mg==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484664452", "bodyText": "A bit of clarification here, the method says delete by baseEntityId, the params are baseEntityId and eventType yet this checks that eventType !=  to the eventType passed as a param.", "author": "Rkareko", "createdAt": "2020-09-08T05:49:52Z", "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -2007,6 +2041,39 @@ public ColumnAttribute column() {\n         }\n     }\n \n+    public boolean deleteClient(String baseEntityId) {\n+        try {\n+            int rowsAffected = getWritableDatabase().delete(clientTable.name(),\n+                    client_column.baseEntityId.name()\n+                            + \" = ?\",\n+                    new String[]{baseEntityId});\n+            if (rowsAffected > 0) {\n+                return true;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e);\n+        }\n+        return false;\n+    }\n+\n+    public boolean deleteEventsByBaseEntityId(String baseEntityId, String eventType) {\n+\n+        try {\n+            int rowsAffected = getWritableDatabase().delete(eventTable.name(),\n+                    event_column.baseEntityId.name()\n+                            + \" = ? AND \"\n+                            + event_column.eventType.name()\n+                            + \" != ?\",", "originalCommit": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjIzMQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484696231", "bodyText": "Not sure, I did not change this method", "author": "githengi", "createdAt": "2020-09-08T07:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NDQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2OTk3NA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484669974", "bodyText": "Could we make this a constant with a descriptive name.", "author": "Rkareko", "createdAt": "2020-09-08T06:05:26Z", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");", "originalCommit": "bd7fe3a1ff9062eee68a533476d37270f2f620df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjQ3Nw==", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484696477", "bodyText": "You mean constants for the whole expression", "author": "githengi", "createdAt": "2020-09-08T07:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2OTk3NA=="}], "type": "inlineReview"}, {"oid": "9db855288a9693f7e31d421d4f1543c105994743", "url": "https://github.com/opensrp/opensrp-client-core/commit/9db855288a9693f7e31d421d4f1543c105994743", "message": "PR review requested changes", "committedDate": "2020-09-08T07:22:09Z", "type": "commit"}, {"oid": "cd063e3483f193d9d834bb9747ba4a007e3b71eb", "url": "https://github.com/opensrp/opensrp-client-core/commit/cd063e3483f193d9d834bb9747ba4a007e3b71eb", "message": "update event on taskdao update callback", "committedDate": "2020-09-08T11:55:58Z", "type": "commit"}, {"oid": "248ed7b50ea4d200ecdd7bfc621febf0c50e42e1", "url": "https://github.com/opensrp/opensrp-client-core/commit/248ed7b50ea4d200ecdd7bfc621febf0c50e42e1", "message": "Add method for adding missing columns", "committedDate": "2020-09-08T12:04:15Z", "type": "commit"}, {"oid": "5d8a50c188cd9af5afeb89afb7acb584281f1ba1", "url": "https://github.com/opensrp/opensrp-client-core/commit/5d8a50c188cd9af5afeb89afb7acb584281f1ba1", "message": "Add if not exists clause to create table and index", "committedDate": "2020-09-08T12:10:33Z", "type": "commit"}, {"oid": "d153f1df118bad0d13c2828ff96e113b11574b9b", "url": "https://github.com/opensrp/opensrp-client-core/commit/d153f1df118bad0d13c2828ff96e113b11574b9b", "message": "Add function to add columns to event and client table", "committedDate": "2020-09-08T12:16:09Z", "type": "commit"}, {"oid": "a231623e0048d01bf4d669a173c9cba102893df2", "url": "https://github.com/opensrp/opensrp-client-core/commit/a231623e0048d01bf4d669a173c9cba102893df2", "message": "support upgrade of foreign events and client tables", "committedDate": "2020-09-08T12:19:14Z", "type": "commit"}, {"oid": "f938f6d9a0d6900407d322abfd35ae365c907681", "url": "https://github.com/opensrp/opensrp-client-core/commit/f938f6d9a0d6900407d322abfd35ae365c907681", "message": "add indexes for clients by jurisdiction and residence", "committedDate": "2020-09-08T12:52:03Z", "type": "commit"}, {"oid": "e33c29c5450082531c837fb6a25fc321f22d77c8", "url": "https://github.com/opensrp/opensrp-client-core/commit/e33c29c5450082531c837fb6a25fc321f22d77c8", "message": "Merge branch 'master' into 578-data-base-interfaces-for-plan-evaluation", "committedDate": "2020-09-09T10:21:09Z", "type": "commit"}, {"oid": "a03e2c4f4aac2d44ac0712b57dd17dd39ffb05f0", "url": "https://github.com/opensrp/opensrp-client-core/commit/a03e2c4f4aac2d44ac0712b57dd17dd39ffb05f0", "message": "Merge branch '578-data-base-interfaces-for-plan-evaluation' of https://github.com/OpenSRP/opensrp-client-core into 578-data-base-interfaces-for-plan-evaluation", "committedDate": "2020-09-09T10:23:34Z", "type": "commit"}, {"oid": "ecab7c88a08d644fad80f921687c86a724366156", "url": "https://github.com/opensrp/opensrp-client-core/commit/ecab7c88a08d644fad80f921687c86a724366156", "message": "Update unit test", "committedDate": "2020-09-09T10:24:41Z", "type": "commit"}]}