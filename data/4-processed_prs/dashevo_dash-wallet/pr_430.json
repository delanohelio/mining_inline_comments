{"pr_number": 430, "pr_title": "NMA-339 Search Contacts", "pr_createdAt": "2020-06-02T21:25:06Z", "pr_url": "https://github.com/dashevo/dash-wallet/pull/430", "timeline": [{"oid": "68c48109c713f27fa36d53810771749c6076ef52", "url": "https://github.com/dashevo/dash-wallet/commit/68c48109c713f27fa36d53810771749c6076ef52", "message": "Add contacts and notification buttons to the global footer", "committedDate": "2020-06-04T21:50:08Z", "type": "commit"}, {"oid": "3c2c108c076ab555c7d82bd2a4bf1cd1157634c6", "url": "https://github.com/dashevo/dash-wallet/commit/3c2c108c076ab555c7d82bd2a4bf1cd1157634c6", "message": "Hide notifications button on global footer", "committedDate": "2020-06-04T21:50:16Z", "type": "commit"}, {"oid": "b44a089cfcf3ad798d1fd40e37e5e938ca36c23f", "url": "https://github.com/dashevo/dash-wallet/commit/b44a089cfcf3ad798d1fd40e37e5e938ca36c23f", "message": "Hide notifications button on global footer (comment out)", "committedDate": "2020-06-04T21:50:16Z", "type": "commit"}, {"oid": "b44a089cfcf3ad798d1fd40e37e5e938ca36c23f", "url": "https://github.com/dashevo/dash-wallet/commit/b44a089cfcf3ad798d1fd40e37e5e938ca36c23f", "message": "Hide notifications button on global footer (comment out)", "committedDate": "2020-06-04T21:50:16Z", "type": "forcePushed"}, {"oid": "2f1b1de14986266f28b1e714e94c4f80ac45532d", "url": "https://github.com/dashevo/dash-wallet/commit/2f1b1de14986266f28b1e714e94c4f80ac45532d", "message": "DashPayProfile: Add associated username", "committedDate": "2020-06-09T18:56:24Z", "type": "commit"}, {"oid": "228b55acee3c24960b7b6bcb203ecf0a4a0e4ab3", "url": "https://github.com/dashevo/dash-wallet/commit/228b55acee3c24960b7b6bcb203ecf0a4a0e4ab3", "message": "DashPayProfileDao: add userId argument to load method", "committedDate": "2020-06-09T18:58:19Z", "type": "commit"}, {"oid": "dc3a257a227614d974d5d6b65286202a709be2dd", "url": "https://github.com/dashevo/dash-wallet/commit/dc3a257a227614d974d5d6b65286202a709be2dd", "message": "Add table for contact requests", "committedDate": "2020-06-09T19:00:13Z", "type": "commit"}, {"oid": "5e176499ea1562245f87be38079fb6b22708fa43", "url": "https://github.com/dashevo/dash-wallet/commit/5e176499ea1562245f87be38079fb6b22708fa43", "message": "Add search and add new contact images", "committedDate": "2020-06-09T19:04:57Z", "type": "commit"}, {"oid": "d98902e133dc0dbe54decf77fb836e134e11442b", "url": "https://github.com/dashevo/dash-wallet/commit/d98902e133dc0dbe54decf77fb836e134e11442b", "message": "Fix broken GlobalFooterActivity, comment out notifications code", "committedDate": "2020-06-09T19:05:53Z", "type": "commit"}, {"oid": "d190c404d87fd41fefd8c376114417f13473133b", "url": "https://github.com/dashevo/dash-wallet/commit/d190c404d87fd41fefd8c376114417f13473133b", "message": "Add backend contact search methods and classes", "committedDate": "2020-06-09T20:54:22Z", "type": "commit"}, {"oid": "43968a560e454b73cd8fff897a282a9269fd6d12", "url": "https://github.com/dashevo/dash-wallet/commit/43968a560e454b73cd8fff897a282a9269fd6d12", "message": "Add ContactsActivity", "committedDate": "2020-06-09T20:55:13Z", "type": "commit"}, {"oid": "1c196c5bb75ebf71ab8bdc68fd9d1cc3e9c5de04", "url": "https://github.com/dashevo/dash-wallet/commit/1c196c5bb75ebf71ab8bdc68fd9d1cc3e9c5de04", "message": "More UI Fixes", "committedDate": "2020-06-10T14:11:31Z", "type": "commit"}, {"oid": "bfb096608d572c2f246451fda714a8d1f0c714e5", "url": "https://github.com/dashevo/dash-wallet/commit/bfb096608d572c2f246451fda714a8d1f0c714e5", "message": "Create AvatarImageView to handle user avatars", "committedDate": "2020-06-10T14:39:16Z", "type": "commit"}, {"oid": "8db3cf3ba3e28be4e43a55a0a105fe42fe9b7a33", "url": "https://github.com/dashevo/dash-wallet/commit/8db3cf3ba3e28be4e43a55a0a105fe42fe9b7a33", "message": "Update contact icon for Global Footer", "committedDate": "2020-06-10T15:51:17Z", "type": "commit"}, {"oid": "c8220f909e9b7a50632703f3c0beeb9ce0b53997", "url": "https://github.com/dashevo/dash-wallet/commit/c8220f909e9b7a50632703f3c0beeb9ce0b53997", "message": "Add modes to ContactActivity (select, search, requests)", "committedDate": "2020-06-10T15:52:15Z", "type": "commit"}, {"oid": "bf5adf5f65c3f452f3160f27350675e587455953", "url": "https://github.com/dashevo/dash-wallet/commit/bf5adf5f65c3f452f3160f27350675e587455953", "message": "Add Send to Contact button on Payments Screen", "committedDate": "2020-06-10T15:52:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMjI3MA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r438232270", "bodyText": "We need to store the username for each userId for our contacts somewhere, even if the profile is missing on Platform.", "author": "HashEngineering", "createdAt": "2020-06-10T15:55:01Z", "path": "wallet/src/de/schildbach/wallet/data/DashPayProfile.kt", "diffHunk": "@@ -4,5 +4,5 @@ import androidx.room.Entity\n import androidx.room.PrimaryKey\n \n @Entity(tableName = \"dashpay_profile\")\n-data class DashPayProfile(@PrimaryKey val userId: String, val displayName: String,\n+data class DashPayProfile(@PrimaryKey val userId: String, val username: String, val displayName: String,", "originalCommit": "bf5adf5f65c3f452f3160f27350675e587455953", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMjc1NA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r438232754", "bodyText": "This is changed to support getting a single profile out of the database", "author": "HashEngineering", "createdAt": "2020-06-10T15:55:37Z", "path": "wallet/src/de/schildbach/wallet/data/DashPayProfileDao.kt", "diffHunk": "@@ -11,8 +11,8 @@ interface DashPayProfileDao {\n     @Insert(onConflict = OnConflictStrategy.REPLACE)\n     fun insert(dashPayProfile: DashPayProfile)\n \n-    @Query(\"SELECT * FROM dashpay_profile LIMIT 1\")\n-    fun load(): LiveData<DashPayProfile?>\n+    @Query(\"SELECT * FROM dashpay_profile where userId = :userId\")\n+    fun load(userId: String): LiveData<DashPayProfile?>", "originalCommit": "bf5adf5f65c3f452f3160f27350675e587455953", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzMzg2Ng==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r438233866", "bodyText": "Search results will be using DashPay* objects instead of DPP Documents", "author": "HashEngineering", "createdAt": "2020-06-10T15:57:06Z", "path": "wallet/src/de/schildbach/wallet/data/UsernameSearchResult.kt", "diffHunk": "@@ -1,16 +1,15 @@\n package de.schildbach.wallet.data\n \n-import org.dashevo.dpp.document.Document\n-\n // This result data structure contains the Documents for several items\n // At a later time we may wish to abstract away the usage of documents\n // in the app for cleaner code or with other classes that handle this\n // data.  Additionally the information may be coming from a database\n \n data class UsernameSearchResult(val username: String,\n-                                val domainDocument: Document,\n-                                val toContactRequest: Document?,\n-                                val fromContactRequest: Document?) {\n-    val hasRequested = toContactRequest != null\n-    val hasAccepted = fromContactRequest != null\n+                                val dashPayProfile: DashPayProfile,\n+                                val toContactRequest: DashPayContactRequest?,\n+                                val fromContactRequest: DashPayContactRequest?) {\n+    val haveWeRequested = toContactRequest != null\n+    val hasOtherRequested = fromContactRequest != null\n+    val isPendingRequest = hasOtherRequested && ! haveWeRequested", "originalCommit": "bf5adf5f65c3f452f3160f27350675e587455953", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNDUyMw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r438234523", "bodyText": "Hide the send to contact button if there is no identity", "author": "HashEngineering", "createdAt": "2020-06-10T15:58:01Z", "path": "wallet/src/de/schildbach/wallet/ui/PaymentsPayFragment.kt", "diffHunk": "@@ -53,16 +56,30 @@ class PaymentsPayFragment : Fragment() {\n \n     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n         super.onViewCreated(view, savedInstanceState)\n+        pay_by_contact_select.setOnButtonClickListener(View.OnClickListener {\n+            handleSelectContact(it)\n+        })\n         pay_by_qr_button.setOnButtonClickListener(View.OnClickListener {\n             handleScan(it)\n         })\n         pay_to_address.setOnButtonClickListener(View.OnClickListener {\n             handlePaste(true)\n         })\n         //Make the whole row clickable\n+        pay_by_contact_select.setOnClickListener { handleSelectContact(it) }\n         pay_by_qr_button.setOnClickListener { handleScan(it) }\n         pay_to_address.setOnClickListener { handlePaste(true) }\n         handlePaste(false)\n+\n+        initViewModel(view)\n+    }\n+\n+    private fun initViewModel(view: View) {\n+        AppDatabase.getAppDatabase().blockchainIdentityDataDao().load().observe(viewLifecycleOwner, Observer {\n+            val visibility = if (it == null) View.GONE else View.VISIBLE\n+            pay_by_contact_select.visibility = visibility\n+            pay_by_contact_select_divider.visibility = visibility\n+        })", "originalCommit": "bf5adf5f65c3f452f3160f27350675e587455953", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNDk1MA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r438234950", "bodyText": "make back button work on the top left of the screen.", "author": "HashEngineering", "createdAt": "2020-06-10T15:58:36Z", "path": "wallet/src/de/schildbach/wallet/ui/SearchUserActivity.kt", "diffHunk": "@@ -207,4 +208,14 @@ class SearchUserActivity : InteractionAwareActivity(), TextWatcher, UsernameSear\n     override fun onItemClicked(view: View, usernameSearchResult: UsernameSearchResult) {\n \n     }\n+\n+    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n+        when (item.itemId) {\n+            android.R.id.home -> {\n+                onBackPressed()\n+                return true\n+            }\n+        }\n+        return super.onOptionsItemSelected(item)", "originalCommit": "bf5adf5f65c3f452f3160f27350675e587455953", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNjE5NA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r438236194", "bodyText": "this is temporary code to fill up the contacts screens.", "author": "HashEngineering", "createdAt": "2020-06-10T16:00:21Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -378,11 +486,95 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n             // blockchainIdentity doesn't yet keep track of the profile, so we will load it\n             // into the database directly\n             val dashPayProfile = DashPayProfile(blockchainIdentity.uniqueIdString,\n+                    username,\n                     profile!!.data[\"displayName\"] as String,\n                     profile.data[\"publicMessage\"] as String,\n                     profile.data[\"avatarUrl\"] as String)\n \n             updateDashPayProfile(dashPayProfile)\n         }\n     }\n+\n+    // contacts\n+\n+    suspend fun updateContactRequests(userId: String) {\n+\n+        val userIdList = HashSet<String>()\n+\n+        // Get all out our contact requests\n+        val toContactDocuments = ContactRequests(platform).get(userId, toUserId = false, retrieveAll = true)\n+        toContactDocuments.forEach {\n+            val toUserId = it.data[\"toUserId\"] as String\n+            userIdList.add(toUserId)\n+            val privateData = if (it.data.containsKey(\"privateData\"))\n+                HashUtils.byteArrayFromString(it.data[\"privateData\"] as String)\n+            else null\n+            val contactRequest = DashPayContactRequest(it.entropy, it.userId, it.data[\"toUserId\"] as String,\n+                    privateData,\n+                    HashUtils.byteArrayFromString(it.data[\"encryptedPublicKey\"] as String),\n+                    it.data[\"senderKeyIndex\"] as Int,\n+                    it.data[\"recipientKeyIndex\"] as Int,\n+                    it.data[\"timestamp\"] as Double, false, 0)\n+            dashPayContactRequestDaoAsync.insert(contactRequest)\n+        }\n+        // Get all contact requests where toUserId == userId, the users who have added me\n+        val fromContactDocuments = ContactRequests(platform).get(userId, toUserId = true, retrieveAll = true)\n+        fromContactDocuments.forEach {\n+            userIdList.add(it.userId)\n+            val privateData = if (it.data.containsKey(\"privateData\"))\n+                HashUtils.byteArrayFromString(it.data[\"privateData\"] as String)\n+            else null\n+            val contactRequest = DashPayContactRequest(it.entropy, it.userId, it.data[\"toUserId\"] as String,\n+                    privateData,\n+                    HashUtils.byteArrayFromString(it.data[\"encryptedPublicKey\"] as String),\n+                    it.data[\"senderKeyIndex\"] as Int,\n+                    it.data[\"recipientKeyIndex\"] as Int,\n+                    it.data[\"timestamp\"] as Double, false, 0)\n+            dashPayContactRequestDaoAsync.insert(contactRequest)\n+        }\n+\n+        var nameDocuments = HashMap<String, Document>()\n+        var profileDocuments = HashMap<String, Document?>()\n+\n+        for (id in userIdList) {\n+            val nameDocument = platform.names.getByUserId(id)\n+            nameDocuments[id] = nameDocument[0]\n+\n+            val profileDocument= profiles.get(id) ?: profiles.createProfileDocument(\"\",\"\",\n+                    \"\", platform.identities.get(nameDocument[0].userId)!!)\n+\n+            profileDocuments[id] = profileDocument\n+\n+            val profile = DashPayProfile(profileDocument.userId,\n+                    nameDocument[0].data[\"normalizedLabel\"] as String,\n+                    profileDocument.data[\"displayName\"] as String,\n+                    profileDocument.data[\"publicMessage\"] as String,\n+                    profileDocument.data[\"avatarUrl\"] as String)\n+            dashPayProfileDaoAsync.insert(profile)\n+\n+        }\n+\n+        // lets add more data\n+\n+        var names = listOf(\"Lizet (Color Manager)\", \"Rachel (Dev Manager)\", \"Tammana (hire me)\", \"Tammy (Product Manager)\", \"Alfred Pennyworth\", \"Serena Kyle\", \"Batman\", \"Capt Kirk\", \"Spock\", \"\", \"Deana Troi\", \"Neelix\", \"Zephrane Cochrane\", \"The Tenth Doctor was the Best Doctor, Martha was the best!\")\n+        var usernames = listOf(\"lizet1993\", \"rachel4ski\", \"hellokitty\", \"oceanbui62\", \"thebutler\", \"catwoman\", \"brucewayne\", \"jtkirk\", \"spock\", \"amanda\", \"dtroi\", \"nelix\", \"warpspeed\", \"drwho\")\n+        for (i in 0 until names.size) {\n+            val thisUserId = Sha256Hash.of(names[i].toByteArray()).toStringBase58()\n+            dashPayProfileDaoAsync.insert(\n+                    DashPayProfile(thisUserId, usernames[i], names[i], \"no public message\", \"\"/*\"\"https://api.adorable.io/avatars/120/${names[i]}\"*/))\n+            dashPayContactRequestDaoAsync.insert(\n+                    DashPayContactRequest(Entropy.generate(), userId, thisUserId, null, names[0].toByteArray(), 0, 0 , 0.0, false, 0 ))\n+        }\n+\n+        names = listOf(\"Q (The Original)\", \"Thomas Riker\", \"Geordi La Forge\", \"Beverly Crusher\", \"Capt. Picard\")\n+        usernames = listOf(\"qcontinuum\", \"triker\", \"laforge\", \"crusher\", \"jlpicard\")\n+        for (i in 0 until names.size) {\n+            val thisUserId = Sha256Hash.of(names[i].toByteArray()).toStringBase58()\n+            dashPayProfileDaoAsync.insert(\n+                    DashPayProfile(thisUserId, usernames[i], names[i], \"no public message\", \"\"/*https://api.adorable.io/avatars/120/${names[i]}\"*/))\n+            dashPayContactRequestDaoAsync.insert(\n+                    DashPayContactRequest(Entropy.generate(), thisUserId, userId, null, names[0].toByteArray(), 0, 0 , 0.0, false, 0 ))\n+        }", "originalCommit": "bf5adf5f65c3f452f3160f27350675e587455953", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "878cb478a26ca65e9826a5d762f526c265da7a80", "url": "https://github.com/dashevo/dash-wallet/commit/878cb478a26ca65e9826a5d762f526c265da7a80", "message": "Set background colors correctly for activity and contacts", "committedDate": "2020-06-11T19:20:38Z", "type": "commit"}, {"oid": "8295195c04ce0c1a366e65f89576647f5a6fa9e2", "url": "https://github.com/dashevo/dash-wallet/commit/8295195c04ce0c1a366e65f89576647f5a6fa9e2", "message": "Remove, refactor xml files", "committedDate": "2020-06-11T19:36:55Z", "type": "commit"}, {"oid": "2eed301d08cc7887731f5662db9610667d961b83", "url": "https://github.com/dashevo/dash-wallet/commit/2eed301d08cc7887731f5662db9610667d961b83", "message": "Get ready for the next PR by resolving some conflicts", "committedDate": "2020-06-11T22:43:48Z", "type": "commit"}, {"oid": "e7f2a716daefa78f84f5234f2217d08a619e5c45", "url": "https://github.com/dashevo/dash-wallet/commit/e7f2a716daefa78f84f5234f2217d08a619e5c45", "message": "Add comments", "committedDate": "2020-06-11T22:47:35Z", "type": "commit"}, {"oid": "284d9d4aafe6429dec4df5d9eaf675eda2f6b21e", "url": "https://github.com/dashevo/dash-wallet/commit/284d9d4aafe6429dec4df5d9eaf675eda2f6b21e", "message": "Merge branch 'evonet-develop' of http://github.com/dashevo/dash-wallet into evonet-search-contacts", "committedDate": "2020-06-13T01:18:57Z", "type": "commit"}, {"oid": "9487e4f1a032401b2bba50fb2507f6ca088597db", "url": "https://github.com/dashevo/dash-wallet/commit/9487e4f1a032401b2bba50fb2507f6ca088597db", "message": "Align with previous PR", "committedDate": "2020-06-13T01:43:34Z", "type": "commit"}, {"oid": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "url": "https://github.com/dashevo/dash-wallet/commit/a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "message": "Fix a few other bugs after the merge", "committedDate": "2020-06-13T02:25:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTUxNg==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r439701516", "bodyText": "In this section, I am copying the scheme from the from the contact and contact request rows.  The first line is the Display Name and the second line is the username, but if there is not display name, then the username is displayed on top and the second line is blank.", "author": "HashEngineering", "createdAt": "2020-06-13T02:31:25Z", "path": "wallet/src/de/schildbach/wallet/ui/UsernameSearchResultsAdapter.kt", "diffHunk": "@@ -62,22 +62,28 @@ class UsernameSearchResultsAdapter() : RecyclerView.Adapter<UsernameSearchResult\n         fun bind(usernameSearchResult: UsernameSearchResult) {\n             val defaultAvatar = UserAvatarPlaceholderDrawable.getDrawable(itemView.context,\n                     usernameSearchResult.username[0])\n-            username.text = usernameSearchResult.username\n-            if (usernameSearchResult.profileDocument != null) {\n-                usernameSearchResult.profileDocument.apply {\n-                    displayName.text = data[\"displayName\"] as String\n-                    Glide.with(avatar).load(data[\"avatarUrl\"]).circleCrop()\n-                            .placeholder(defaultAvatar).into(avatar)\n-                }\n+\n+            val dashPayProfile = usernameSearchResult.dashPayProfile\n+            if (dashPayProfile.displayName.isEmpty()) {\n+                displayName.text = dashPayProfile.username\n+                username.text = \"\"\n+            } else {\n+                displayName.text = dashPayProfile.displayName\n+                username.text = usernameSearchResult.username\n+            }\n+\n+            if(dashPayProfile.avatarUrl.isNotEmpty()) {\n+                Glide.with(avatar).load(dashPayProfile.avatarUrl).circleCrop()\n+                        .placeholder(defaultAvatar).into(avatar)", "originalCommit": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTgyNA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r439701824", "bodyText": "this creates a profile object when no profile exists on Platform", "author": "HashEngineering", "createdAt": "2020-06-13T02:37:10Z", "path": "wallet/src/de/schildbach/wallet/data/DashPayProfile.kt", "diffHunk": "@@ -8,18 +8,23 @@ import org.dashevo.dpp.document.Document\n \n @Parcelize\n @Entity(tableName = \"dashpay_profile\")\n-data class DashPayProfile(@PrimaryKey val userId: String, val displayName: String,\n-                          val publicMessage: String, val avatarUrl: String) : Parcelable {\n+data class DashPayProfile(@PrimaryKey val userId: String, val username: String, val displayName: String,\n+                          val publicMessage: String, val avatarUrl: String): Parcelable {\n     companion object {\n-        fun fromDocument(document: Document): DashPayProfile? {\n+        fun fromDocument(document: Document, username: String): DashPayProfile? {\n             return try {\n                 DashPayProfile(document.userId,\n+                        username,\n                         document.data[\"displayName\"] as String,\n                         document.data[\"publicMessage\"] as String,\n                         document.data[\"avatarUrl\"] as String)\n             } catch (e: Exception) {\n                 null\n             }\n         }\n+\n+        fun fromUsername(userId: String, username: String): DashPayProfile {\n+            return DashPayProfile(userId, username, \"\", \"\", \"\")\n+        }", "originalCommit": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NTc3Mg==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r440995772", "bodyText": "We can add default values for displayName, publicMessage and avatarUrl in the main constructor and remove the fromUsername method.\ndata class DashPayProfile(@PrimaryKey val userId: String, \n                          val username: String, val displayName: String = \"\",\n                          val publicMessage: String = \"\", val avatarUrl: String = \"\"): Parcelable {", "author": "sambarboza", "createdAt": "2020-06-16T16:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTkwMw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r439701903", "bodyText": "copying contact rows, where Display Name is on top of the user name.", "author": "HashEngineering", "createdAt": "2020-06-13T02:38:37Z", "path": "wallet/res/layout/dashpay_profile_row.xml", "diffHunk": "@@ -15,7 +15,7 @@\n         app:layout_constraintTop_toTopOf=\"parent\" />\n \n     <TextView\n-        android:id=\"@+id/username\"\n+        android:id=\"@+id/displayName\"", "originalCommit": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjAxOA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r439702018", "bodyText": "This is added because the SearchUsernameActivity was giving focus to the Search TextView and bypassed the transition.", "author": "HashEngineering", "createdAt": "2020-06-13T02:40:20Z", "path": "wallet/res/layout/activity_search_dashpay_profile_1.xml", "diffHunk": "@@ -5,6 +5,7 @@\n     android:id=\"@+id/root\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n+    android:focusableInTouchMode=\"true\"", "originalCommit": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjI0Nw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r439702247", "bodyText": "this is a duplicate call, need to remove it.", "author": "HashEngineering", "createdAt": "2020-06-13T02:44:39Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -105,30 +112,29 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n             val profileDocuments = Profiles(platform).getList(userIds)\n             val profileById = profileDocuments.associateBy({ it.userId }, { it })\n \n-            // TODO: Replace this Platform call with a query into the local database\n-            val toContactDocuments = ContactRequests(platform).get(userId, toUserId = false, retrieveAll = true)\n+            val dashPayDocuments = Profiles(platform).getList(userIds)", "originalCommit": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMDQ2Mg==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441020462", "bodyText": "I agree :)", "author": "sambarboza", "createdAt": "2020-06-16T17:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NDM3OQ==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441154379", "bodyText": "98db25c", "author": "HashEngineering", "createdAt": "2020-06-16T21:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjQwMA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r439702400", "bodyText": "this section adds many contacts to the database.  The userId's and usernames do exist.  This may help with other screens until contacts can actually be added.", "author": "HashEngineering", "createdAt": "2020-06-13T02:47:05Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -386,8 +478,228 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n \n             // blockchainIdentity doesn't yet keep track of the profile, so we will load it\n             // into the database directly\n-            val dashPayProfile = DashPayProfile.fromDocument(profile)\n+            val dashPayProfile = DashPayProfile.fromDocument(profile, username)\n             updateDashPayProfile(dashPayProfile!!)\n         }\n     }\n+\n+    // contacts\n+\n+    suspend fun updateContactRequests(userId: String) {\n+\n+        val userIdList = HashSet<String>()\n+\n+        // Get all out our contact requests\n+        val toContactDocuments = ContactRequests(platform).get(userId, toUserId = false, retrieveAll = true)\n+        toContactDocuments.forEach {\n+            val toUserId = it.data[\"toUserId\"] as String\n+            userIdList.add(toUserId)\n+            val privateData = if (it.data.containsKey(\"privateData\"))\n+                HashUtils.byteArrayFromString(it.data[\"privateData\"] as String)\n+            else null\n+            val contactRequest = DashPayContactRequest(it.entropy, it.userId, it.data[\"toUserId\"] as String,\n+                    privateData,\n+                    HashUtils.byteArrayFromString(it.data[\"encryptedPublicKey\"] as String),\n+                    it.data[\"senderKeyIndex\"] as Int,\n+                    it.data[\"recipientKeyIndex\"] as Int,\n+                    it.data[\"timestamp\"] as Double, false, 0)\n+            dashPayContactRequestDaoAsync.insert(contactRequest)\n+        }\n+        // Get all contact requests where toUserId == userId, the users who have added me\n+        val fromContactDocuments = ContactRequests(platform).get(userId, toUserId = true, retrieveAll = true)\n+        fromContactDocuments.forEach {\n+            userIdList.add(it.userId)\n+            val privateData = if (it.data.containsKey(\"privateData\"))\n+                HashUtils.byteArrayFromString(it.data[\"privateData\"] as String)\n+            else null\n+            val contactRequest = DashPayContactRequest(it.entropy, it.userId, it.data[\"toUserId\"] as String,\n+                    privateData,\n+                    HashUtils.byteArrayFromString(it.data[\"encryptedPublicKey\"] as String),\n+                    it.data[\"senderKeyIndex\"] as Int,\n+                    it.data[\"recipientKeyIndex\"] as Int,\n+                    it.data[\"timestamp\"] as Double, false, 0)\n+            dashPayContactRequestDaoAsync.insert(contactRequest)\n+        }\n+\n+        var nameDocuments = HashMap<String, Document>()\n+        var profileDocuments = HashMap<String, Document?>()\n+\n+        for (id in userIdList) {\n+            val nameDocument = platform.names.getByUserId(id)\n+            nameDocuments[id] = nameDocument[0]\n+\n+            val profileDocument = profiles.get(id) ?: profiles.createProfileDocument(\"\", \"\",\n+                    \"\", platform.identities.get(nameDocument[0].userId)!!)\n+\n+            profileDocuments[id] = profileDocument\n+\n+            val profile = DashPayProfile.fromDocument(profileDocument, nameDocument[0].data[\"normalizedLabel\"] as String)\n+            dashPayProfileDaoAsync.insert(profile!!)\n+\n+        }\n+\n+        // lets add more data", "originalCommit": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjQ1NA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r439702454", "bodyText": "this line, when commented out, will set up the contacts in the database table.  This function needs to be done in the BlockchainService or some other place.", "author": "HashEngineering", "createdAt": "2020-06-13T02:47:59Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -151,6 +162,92 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     * search the contacts\n+     *\n+     * @param text the text to find in usernames and displayNames.  if blank, all contacts are returned\n+     * @param orderBy the field that is used to sort the list of matching entries in ascending order\n+     * @return\n+     */\n+    suspend fun searchContacts(text: String, orderBy: UsernameSortOrderBy): Resource<List<UsernameSearchResult>> {\n+        return try {\n+            // TODO: Replace this Platform call with a query into the local database\n+            val userIdList = HashSet<String>()\n+\n+            val wallet = walletApplication.wallet\n+            val blockchainIdentity = blockchainIdentityDataDaoAsync.load()\n+            val creditFundingTx = wallet.getCreditFundingTransaction(wallet.getTransaction(blockchainIdentity!!.creditFundingTxId))\n+            val userId = creditFundingTx.creditBurnIdentityIdentifier.toStringBase58()\n+\n+            //TODO: Remove this next line - it removes the contacts database so it can be recreated\n+            //dashPayContactRequestDaoAsync.clear()", "originalCommit": "a0495163f92e5dc8195e113abb0ff2c0e3aae98d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNjEwNA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441026104", "bodyText": "This function needs to be done in the BlockchainService or some other place.\n\n@HashEngineering, can you please elaborate a bit more on this?", "author": "sambarboza", "createdAt": "2020-06-16T17:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyMjU3Mw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441822573", "bodyText": "In PR #440, the Contacts are queried every time a block comes through by the BlockchainService.  These commented lines were removed in that PR.", "author": "HashEngineering", "createdAt": "2020-06-17T20:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjQ1NA=="}], "type": "inlineReview"}, {"oid": "d4cf06ab2b2d7162bc22b1ecf6ba21b5f915a8be", "url": "https://github.com/dashevo/dash-wallet/commit/d4cf06ab2b2d7162bc22b1ecf6ba21b5f915a8be", "message": "Ignore requests we have made that have not been accepted from My Contacts", "committedDate": "2020-06-15T15:22:09Z", "type": "commit"}, {"oid": "e2d5f30384dd4e7da72db70ec3b7283b04926c19", "url": "https://github.com/dashevo/dash-wallet/commit/e2d5f30384dd4e7da72db70ec3b7283b04926c19", "message": "Replace ignore button with X image", "committedDate": "2020-06-15T15:23:17Z", "type": "commit"}, {"oid": "09b81d7e08eb894d954bdb9bc6b1d48ff13bd1be", "url": "https://github.com/dashevo/dash-wallet/commit/09b81d7e08eb894d954bdb9bc6b1d48ff13bd1be", "message": "PlatformRepo: Create Profile with empty data", "committedDate": "2020-06-15T17:54:18Z", "type": "commit"}, {"oid": "d046101e6bc5811d43b3237ce275aebd9056df43", "url": "https://github.com/dashevo/dash-wallet/commit/d046101e6bc5811d43b3237ce275aebd9056df43", "message": "PlatformRepo: change fake data", "committedDate": "2020-06-15T20:46:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMjQwMQ==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r440612401", "bodyText": "is it better to use accept_contact_request which is from import kotlinx.android.synthetic.main.contact_request_row.view.*\nor something like this:\nprivate val avatar by lazy { itemView.findViewById<ImageView>(R.id.avatar) } to initialize the object that points to the button.", "author": "HashEngineering", "createdAt": "2020-06-16T06:24:38Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ContactSearchResultsAdapter.kt", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.widget.AdapterView\n+import android.widget.ArrayAdapter\n+import android.widget.ImageView\n+import android.widget.TextView\n+import androidx.recyclerview.widget.RecyclerView\n+import com.bumptech.glide.Glide\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.data.UsernameSortOrderBy\n+import de.schildbach.wallet.ui.UserAvatarPlaceholderDrawable\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.contact_header_row.view.*\n+import kotlinx.android.synthetic.main.contact_request_header_row.view.*\n+import kotlinx.android.synthetic.main.contact_request_row.view.*\n+import org.dashevo.dpp.util.HashUtils\n+import java.math.BigInteger\n+\n+\n+class ContactSearchResultsAdapter(private val onSortOrderChangedListener: OnSortOrderChangedListener) : RecyclerView.Adapter<ContactSearchResultsAdapter.ViewHolder>() {\n+\n+    companion object {\n+        const val CONTACT_REQUEST_HEADER = 0\n+        const val CONTACT_REQUEST = 1\n+        const val CONTACT_HEADER = 2\n+        const val CONTACT = 3\n+    }\n+\n+    class ViewItem(val usernameSearchResult: UsernameSearchResult?, val viewType: Int, val sortOrder: Int = 0, val requestCount: Int = 0)\n+\n+    interface OnItemClickListener {\n+        fun onItemClicked(view: View, usernameSearchResult: UsernameSearchResult)\n+    }\n+\n+    init {\n+        setHasStableIds(true)\n+    }\n+    var itemClickListener: OnItemClickListener? = null\n+    var results: List<ViewItem> = arrayListOf()\n+        set(value) {\n+            field = value\n+            notifyDataSetChanged()\n+        }\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n+        return when (viewType) {\n+            CONTACT_REQUEST_HEADER -> ContactRequestHeaderViewHolder(LayoutInflater.from(parent.context), parent)\n+            CONTACT_REQUEST -> ContactRequestViewHolder(LayoutInflater.from(parent.context), parent)\n+            CONTACT_HEADER -> ContactHeaderViewHolder(LayoutInflater.from(parent.context), parent)\n+            CONTACT -> ContactViewHolder(LayoutInflater.from(parent.context), parent)\n+            else -> throw IllegalArgumentException(\"Invalid viewType $viewType\")\n+        }\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return results.size\n+    }\n+\n+    private fun getLongValue(s: String): Long {\n+        val byteArray = HashUtils.byteArrayFromString(s)\n+        val bigInteger = BigInteger(byteArray)\n+        return bigInteger.toLong()\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return when (results[position].viewType) {\n+            CONTACT -> getLongValue(results[position].usernameSearchResult!!.toContactRequest!!.toUserId)\n+            CONTACT_REQUEST -> getLongValue(results[position].usernameSearchResult!!.fromContactRequest!!.userId)\n+            CONTACT_REQUEST_HEADER -> 1L\n+            CONTACT_HEADER -> 2L\n+            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n+        }\n+    }\n+\n+    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n+        when (results[position].viewType) {\n+            CONTACT, CONTACT_REQUEST -> holder.bind(results[position].usernameSearchResult!!)\n+            CONTACT_REQUEST_HEADER -> (holder as ContactRequestHeaderViewHolder).bind(results[position].requestCount)\n+            CONTACT_HEADER -> (holder as ContactHeaderViewHolder).bind(results[position].sortOrder)\n+            else -> throw IllegalArgumentException(\"Invalid viewType ${results[position].viewType}\")\n+        }\n+    }\n+    override fun onBindViewHolder(holder: ViewHolder, position: Int, payloads: List<Any?>) {\n+        if (payloads.isEmpty()) {\n+            super.onBindViewHolder(holder, position, payloads)\n+        } else {\n+            holder.itemView.alpha = 1f\n+        }\n+    }\n+\n+    override fun getItemViewType(position: Int): Int {\n+        return results[position].viewType\n+    }\n+\n+    open inner class ViewHolder(resId: Int, inflater: LayoutInflater, parent: ViewGroup) :\n+            RecyclerView.ViewHolder(inflater.inflate(resId, parent, false)) {\n+\n+        private val avatar by lazy { itemView.findViewById<ImageView>(R.id.avatar) }\n+        private val username by lazy { itemView.findViewById<TextView>(R.id.username) }\n+        private val displayName by lazy { itemView.findViewById<TextView>(R.id.displayName) }\n+\n+        open fun bind(usernameSearchResult: UsernameSearchResult) {\n+            val defaultAvatar = UserAvatarPlaceholderDrawable.getDrawable(itemView.context,\n+                    usernameSearchResult.username[0])\n+\n+            val dashPayProfile = usernameSearchResult.dashPayProfile\n+            if (dashPayProfile.displayName.isEmpty()) {\n+                displayName.text = dashPayProfile.username\n+                username.text = \"\"\n+            } else {\n+                displayName.text = dashPayProfile.displayName\n+                username.text = usernameSearchResult.username\n+            }\n+\n+            if(dashPayProfile.avatarUrl.isNotEmpty()) {\n+                Glide.with(avatar).load(dashPayProfile.avatarUrl).circleCrop()\n+                        .placeholder(defaultAvatar).into(avatar)\n+            } else {\n+                avatar.background = defaultAvatar\n+            }\n+\n+            itemClickListener?.let { l ->\n+                this.itemView.setOnClickListener {\n+                    l.onItemClicked(it, usernameSearchResult)\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    inner class ContactViewHolder(inflater: LayoutInflater, parent: ViewGroup) :\n+            ViewHolder(R.layout.contact_row, inflater, parent) {\n+\n+        override fun bind(usernameSearchResult: UsernameSearchResult) {\n+            super.bind(usernameSearchResult)\n+            // background color alternates based on first letter\n+            val color = if (usernameSearchResult.dashPayProfile.username[0].toLowerCase().toInt() % 2 != 0)\n+                R.color.white\n+            else\n+                R.color.dash_lighter_gray\n+            itemView.setBackgroundColor(itemView.resources.getColor(color))\n+        }\n+    }\n+\n+    inner class ContactRequestViewHolder(inflater: LayoutInflater, parent: ViewGroup) :\n+            ViewHolder(R.layout.contact_request_row, inflater, parent) {\n+\n+        override fun bind(usernameSearchResult: UsernameSearchResult) {\n+            super.bind(usernameSearchResult)\n+            itemView.apply {\n+                accept_contact_request.setOnClickListener {", "originalCommit": "d046101e6bc5811d43b3237ce275aebd9056df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxOTA4Mg==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441019082", "bodyText": "Using the import from kotlinx.android.synthetic is fine.", "author": "sambarboza", "createdAt": "2020-06-16T17:24:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMjQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzODg4OQ==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441838889", "bodyText": "Great. I will leave this for now.", "author": "HashEngineering", "createdAt": "2020-06-17T21:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYxMjQwMQ=="}], "type": "inlineReview"}, {"oid": "98db25c7eec687c20178c651d6f8945fbe404ea0", "url": "https://github.com/dashevo/dash-wallet/commit/98db25c7eec687c20178c651d6f8945fbe404ea0", "message": "Remove extra call to get profiles", "committedDate": "2020-06-16T21:30:21Z", "type": "commit"}, {"oid": "25d943efc6cce0e270533a0d12b6faa28a83a17b", "url": "https://github.com/dashevo/dash-wallet/commit/25d943efc6cce0e270533a0d12b6faa28a83a17b", "message": "Remove and fix comments", "committedDate": "2020-06-16T21:42:13Z", "type": "commit"}, {"oid": "8c6c6559de2a16c51f9980aef04753a1c0e601e1", "url": "https://github.com/dashevo/dash-wallet/commit/8c6c6559de2a16c51f9980aef04753a1c0e601e1", "message": "Remove unnecessary code", "committedDate": "2020-06-17T15:12:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MzQ0Mw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r440973443", "bodyText": "Usually we avoid to add hardcoded color values in the layouts. I use a rule of thumb to add new colors to the colors file, if the color is 90% similar to an existing color, I'll use the existing one. Otherwise we add the new colors to the colors.xml file of the ui-redesign module.", "author": "sambarboza", "createdAt": "2020-06-16T16:11:50Z", "path": "wallet/res/layout/contact_header_row.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"70dp\"\n+    android:layout_marginStart=\"15dp\"\n+    android:layout_marginEnd=\"15dp\"\n+    android:layout_marginBottom=\"3dp\">\n+\n+    <TextView\n+        android:id=\"@+id/contacts_my_contacts\"\n+        style=\"@style/MontserratSemiBold\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\"\n+        android:fontFamily=\"@font/montserrat_medium\"\n+        android:text=\"@string/contacts_my_contacts\"\n+        android:textColor=\"@color/black_text\"\n+        android:textSize=\"18sp\"\n+        android:textStyle=\"bold\"\n+        app:layout_constraintTop_toTopOf=\"@+id/center_guideline\"\n+        app:layout_constraintBottom_toBottomOf=\"@+id/center_guideline\" />\n+\n+    <TextView\n+        android:id=\"@+id/contacts_sort_order\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\"\n+        android:fontFamily=\"@font/montserrat_medium\"\n+        android:textSize=\"12sp\"\n+        android:text=\"@string/contacts_sort_order\"\n+        android:textColor=\"#717171\"", "originalCommit": "d046101e6bc5811d43b3237ce275aebd9056df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNTM0Mw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441815343", "bodyText": "Thanks.  This is a pre-existing color.", "author": "HashEngineering", "createdAt": "2020-06-17T20:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MzQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzODc4MQ==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441838781", "bodyText": "121e842", "author": "HashEngineering", "createdAt": "2020-06-17T21:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MzQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3NjA2Ng==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r440976066", "bodyText": "What's the purpose of the text attribute?", "author": "sambarboza", "createdAt": "2020-06-16T16:15:53Z", "path": "wallet/res/layout/contact_request_row.xml", "diffHunk": "@@ -0,0 +1,91 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"70dp\"\n+    android:layout_marginLeft=\"15dp\"\n+    android:layout_marginRight=\"15dp\"\n+    android:layout_marginTop=\"3dp\"\n+    android:layout_marginBottom=\"3dp\"\n+    android:background=\"@drawable/selectable_round_corners\">\n+\n+    <ImageView\n+        android:id=\"@+id/avatar\"\n+        android:transitionName=\"avatar\"\n+        android:layout_width=\"36dp\"\n+        android:layout_height=\"36dp\"\n+        android:layout_marginLeft=\"13dp\"\n+        android:layout_marginTop=\"17dp\"\n+        app:layout_constraintStart_toStartOf=\"parent\"\n+        app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+    <TextView\n+        android:id=\"@+id/displayName\"\n+        style=\"@style/MontserratSemiBold\"\n+        android:layout_width=\"0dp\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_marginStart=\"10dp\"\n+        android:textColor=\"@android:color/black\"\n+        android:textSize=\"16sp\"\n+        app:layout_constraintEnd_toStartOf=\"@id/buttons\"\n+        app:layout_constraintStart_toEndOf=\"@id/avatar\"\n+        app:layout_constraintTop_toTopOf=\"@id/avatar\"\n+        android:maxLines=\"1\"\n+        android:ellipsize=\"end\"\n+        tools:text=\"John Doe\" />\n+\n+    <TextView\n+        android:id=\"@+id/username\"\n+        style=\"@style/MontserratRegular\"\n+        android:layout_width=\"0dp\"\n+        android:layout_height=\"wrap_content\"\n+        android:textColor=\"@color/gray\"\n+        android:textSize=\"12sp\"\n+        app:layout_constraintStart_toStartOf=\"@id/displayName\"\n+        app:layout_constraintEnd_toStartOf=\"@id/buttons\"\n+        app:layout_constraintTop_toBottomOf=\"@id/displayName\"\n+        tools:text=\"johndoe_01\" />\n+\n+    <LinearLayout\n+        android:id=\"@+id/buttons\"\n+        android:layout_width=\"wrap_content\"\n+        android:layout_height=\"wrap_content\"\n+        app:layout_constraintEnd_toEndOf=\"parent\"\n+        app:layout_constraintTop_toTopOf=\"@+id/center_guideline\"\n+        app:layout_constraintBottom_toBottomOf=\"@+id/center_guideline\"\n+        android:orientation=\"horizontal\">\n+\n+        <Button\n+            android:id=\"@+id/accept_contact_request\"\n+            android:layout_width=\"67dp\"\n+            android:layout_height=\"30dp\"\n+            android:fontFamily=\"@font/montserrat_medium\"\n+            android:textSize=\"12sp\"\n+            android:layout_weight=\"1\"\n+            android:textAllCaps=\"false\"\n+            android:textColor=\"@color/white\"\n+            style=\"@style/DashButton.Blue\"\n+            android:text=\"@string/contact_request_accept\" />\n+\n+        <ImageButton\n+            android:id=\"@+id/hide_contract_request\"\n+            android:layout_width=\"30dp\"\n+            android:layout_height=\"30dp\"\n+            android:layout_marginStart=\"5dp\"\n+            android:layout_marginEnd=\"20dp\"\n+            android:layout_weight=\"1\"\n+            app:srcCompat=\"@drawable/ic_ignore_x\"\n+            style=\"@style/DashButton.Gray\"\n+            android:text=\"X\" />", "originalCommit": "d046101e6bc5811d43b3237ce275aebd9056df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjcxOQ==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441816719", "bodyText": "It's a leftover from a previous state when this was a Button with \"X\" as its text.", "author": "HashEngineering", "createdAt": "2020-06-17T20:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3NjA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3OTA3OQ==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r440979079", "bodyText": "We don't need to explicitly use the AppCompat version of widgets, when using tags like ImageView, EditText, TextView, etc, inside an AppCompatActivity the AppCompat version will be used automatically.", "author": "sambarboza", "createdAt": "2020-06-16T16:20:36Z", "path": "wallet/res/layout/fragment_contacts.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:id=\"@+id/root\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    app:layout_constraintBottom_toBottomOf=\"parent\"\n+    app:layout_constraintTop_toTopOf=\"parent\"\n+    android:background=\"@color/dash_lighter_gray\">\n+\n+    <androidx.appcompat.widget.AppCompatEditText", "originalCommit": "d046101e6bc5811d43b3237ce275aebd9056df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzODcyNw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441838727", "bodyText": "121e842", "author": "HashEngineering", "createdAt": "2020-06-17T21:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3OTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MDYwNw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r440980607", "bodyText": "Please use 1dp here, I guess that on super high density devices a line that has the height of pixel might look more like a glitch than a separator.", "author": "sambarboza", "createdAt": "2020-06-16T16:23:02Z", "path": "wallet/res/layout/fragment_payments_pay.xml", "diffHunk": "@@ -7,6 +7,23 @@\n     android:orientation=\"vertical\"\n     tools:context=\"de.schildbach.wallet.ui.PaymentsPayFragment\">\n \n+    <de.schildbach.wallet.ui.widget.PaymentsButtonView\n+        android:id=\"@+id/pay_by_contact_select\"\n+        style=\"@style/MenuRow\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        app:pb_icon=\"@drawable/ic_send_to_contact\"\n+        app:pb_sub_title=\"@string/payments_pay_to_contact_sub_title\"\n+        app:pb_title=\"@string/payments_pay_to_contact_title\" />\n+\n+    <FrameLayout\n+        android:id=\"@+id/pay_by_contact_select_divider\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"1px\"", "originalCommit": "d046101e6bc5811d43b3237ce275aebd9056df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxOTY2OA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441819668", "bodyText": "This was copied from the other separator on this screen, both will be changed.", "author": "HashEngineering", "createdAt": "2020-06-17T20:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MDYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzODY5Mg==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441838692", "bodyText": "121e842", "author": "HashEngineering", "createdAt": "2020-06-17T21:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MDYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyODgxNA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441028814", "bodyText": "Will we have loading for this screen?", "author": "sambarboza", "createdAt": "2020-06-16T17:41:13Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/ContactsActivity.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Dash Core Group.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package de.schildbach.wallet.ui.dashpay\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Build\n+import android.os.Bundle\n+import android.os.Handler\n+import android.text.Editable\n+import android.text.TextWatcher\n+import android.view.Menu\n+import android.view.MenuItem\n+import android.view.View\n+import android.view.Window\n+import androidx.appcompat.widget.Toolbar\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.UsernameSearchResult\n+import de.schildbach.wallet.data.UsernameSortOrderBy\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.GlobalFooterActivity\n+import de.schildbach.wallet.ui.SearchUserActivity\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.fragment_contacts.*\n+\n+\n+class ContactsActivity : GlobalFooterActivity(), TextWatcher, ContactSearchResultsAdapter.OnSortOrderChangedListener, ContactSearchResultsAdapter.OnItemClickListener {\n+\n+    companion object {\n+        private const val EXTRA_MODE = \"extra_mode\"\n+\n+        const val MODE_SEARCH_CONTACTS = 0\n+        const val MODE_SELECT_CONTACT = 1\n+        const val MODE_VIEW_REQUESTS = 2\n+\n+        @JvmStatic\n+        fun createIntent(context: Context, mode: Int): Intent {\n+            val intent = Intent(context, ContactsActivity::class.java)\n+            intent.putExtra(EXTRA_MODE, mode)\n+            return intent\n+        }\n+    }\n+\n+    private lateinit var dashPayViewModel: DashPayViewModel\n+    private lateinit var walletApplication: WalletApplication\n+    private var handler: Handler = Handler()\n+    private lateinit var searchDashPayProfileRunnable: Runnable\n+    private val contactsAdapter: ContactSearchResultsAdapter = ContactSearchResultsAdapter(this)\n+    private var query = \"\"\n+    private var blockchainIdentityId: String? = null\n+    private var direction = UsernameSortOrderBy.USERNAME\n+    private var mode = MODE_SEARCH_CONTACTS\n+\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n+            with(window) {\n+                requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)\n+            }\n+        }\n+\n+        setContentViewWithFooter(R.layout.activity_contacts_root)\n+        walletApplication = application as WalletApplication\n+\n+        if (intent.extras != null && intent.extras!!.containsKey(EXTRA_MODE)) {\n+            mode = intent.extras.getInt(EXTRA_MODE)\n+        }\n+\n+        activateContactsButton()\n+\n+        val toolbar = findViewById<Toolbar>(R.id.toolbar)\n+        setSupportActionBar(toolbar)\n+        val actionBar = supportActionBar\n+        actionBar?.apply {\n+            setDisplayHomeAsUpEnabled(true)\n+            setDisplayShowHomeEnabled(true)\n+        }\n+        setTitle(R.string.contacts_title)\n+\n+        contacts_rv.layoutManager = LinearLayoutManager(this)\n+        contacts_rv.adapter = this.contactsAdapter\n+        this.contactsAdapter.itemClickListener = this\n+\n+        initViewModel()\n+\n+        search.addTextChangedListener(this)\n+\n+\n+\n+        searchContacts()\n+    }\n+\n+    private fun initViewModel() {\n+        dashPayViewModel = ViewModelProvider(this).get(DashPayViewModel::class.java)\n+        dashPayViewModel.searchContactsLiveData.observe(this, Observer {\n+            if (Status.LOADING == it.status) {\n+                startLoading()\n+            } else {\n+                stopLoading()\n+                if (it.data != null) {\n+                    processResults(it.data)\n+                } else {\n+                    showEmptyResult()\n+                }\n+            }\n+        })\n+        AppDatabase.getAppDatabase().blockchainIdentityDataDao().load().observe(this, Observer {\n+            if (it != null) {\n+                //TODO: we don't have an easy way of getting the identity id (userId)\n+                val tx = walletApplication.wallet.getTransaction(it.creditFundingTxId)\n+                val cftx = walletApplication.wallet.getCreditFundingTransaction(tx)\n+                blockchainIdentityId = cftx.creditBurnIdentityIdentifier.toStringBase58()\n+            }\n+        })\n+    }\n+\n+    private fun processResults(data: List<UsernameSearchResult>) {\n+\n+        val results = ArrayList<ContactSearchResultsAdapter.ViewItem>()\n+        // process the requests\n+        val requests = if (mode != MODE_SELECT_CONTACT)\n+            data.filter { r -> r.isPendingRequest }.toMutableList()\n+        else ArrayList()\n+\n+        val requestCount = requests.size\n+        if (mode != MODE_VIEW_REQUESTS) {\n+            while (requests.size > 3) {\n+                requests.remove(requests[requests.size - 1])\n+            }\n+        }\n+\n+        if (requests.isNotEmpty() && mode != MODE_VIEW_REQUESTS)\n+            results.add(ContactSearchResultsAdapter.ViewItem(null, ContactSearchResultsAdapter.CONTACT_REQUEST_HEADER, requestCount = requestCount))\n+        requests.forEach { r -> results.add(ContactSearchResultsAdapter.ViewItem(r, ContactSearchResultsAdapter.CONTACT_REQUEST)) }\n+\n+        // process contacts\n+        val contacts = if (mode != MODE_VIEW_REQUESTS)\n+            data.filter { r -> r.requestSent && r.requestReceived }\n+        else ArrayList()\n+\n+        if (contacts.isNotEmpty())\n+            results.add(ContactSearchResultsAdapter.ViewItem(null, ContactSearchResultsAdapter.CONTACT_HEADER))\n+        contacts.forEach { r -> results.add(ContactSearchResultsAdapter.ViewItem(r, ContactSearchResultsAdapter.CONTACT)) }\n+\n+        contactsAdapter.results = results\n+        if (data.isEmpty()) {\n+            showEmptyResult()\n+        } else {\n+            hideEmptyResult()\n+        }\n+    }\n+\n+    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n+        menuInflater.inflate(R.menu.contacts_menu, menu)\n+        return super.onCreateOptionsMenu(menu)\n+    }\n+\n+    private fun startLoading() {\n+", "originalCommit": "d046101e6bc5811d43b3237ce275aebd9056df43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyMDk5Nw==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441820997", "bodyText": "There is no loading screen in the designs, but I noticed a delay when the screen is first started up.\nSince these methods are empty, I will remove them.", "author": "HashEngineering", "createdAt": "2020-06-17T20:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzODYxOA==", "url": "https://github.com/dashevo/dash-wallet/pull/430#discussion_r441838618", "bodyText": "121e842", "author": "HashEngineering", "createdAt": "2020-06-17T21:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyODgxNA=="}], "type": "inlineReview"}, {"oid": "121e84226bfb51599678b33b24338b88caaa9b97", "url": "https://github.com/dashevo/dash-wallet/commit/121e84226bfb51599678b33b24338b88caaa9b97", "message": "Fix items from review (part 2)", "committedDate": "2020-06-17T21:09:55Z", "type": "commit"}, {"oid": "81377bc2f6a91e1300737b7603bd7793fb741936", "url": "https://github.com/dashevo/dash-wallet/commit/81377bc2f6a91e1300737b7603bd7793fb741936", "message": "Fix formatting, etc", "committedDate": "2020-06-22T19:39:34Z", "type": "commit"}, {"oid": "f045bf6b41e29f0f6585a7d75b7422ce5f16bfae", "url": "https://github.com/dashevo/dash-wallet/commit/f045bf6b41e29f0f6585a7d75b7422ce5f16bfae", "message": "Change database version to 8", "committedDate": "2020-06-22T19:39:42Z", "type": "commit"}]}