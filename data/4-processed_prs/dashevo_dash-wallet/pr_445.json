{"pr_number": 445, "pr_title": "Evonet send contact request backend", "pr_createdAt": "2020-06-24T18:41:07Z", "pr_url": "https://github.com/dashevo/dash-wallet/pull/445", "timeline": [{"oid": "2567ad773f581661191841cfc73a25e5eb568b6e", "url": "https://github.com/dashevo/dash-wallet/commit/2567ad773f581661191841cfc73a25e5eb568b6e", "message": "contact request first steps", "committedDate": "2020-06-23T19:42:06Z", "type": "commit"}, {"oid": "d6f3e783e87b4fede90477e71b23edefe63e3496", "url": "https://github.com/dashevo/dash-wallet/commit/d6f3e783e87b4fede90477e71b23edefe63e3496", "message": "Creating contact request", "committedDate": "2020-06-24T14:40:30Z", "type": "commit"}, {"oid": "0294039c749446a45210c5598403722e1fa58ead", "url": "https://github.com/dashevo/dash-wallet/commit/0294039c749446a45210c5598403722e1fa58ead", "message": "Contact Request inital verification", "committedDate": "2020-06-24T22:49:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjYzMw==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445246633", "bodyText": "https://github.com/dashevo/dash-wallet/blob/evonet-develop/wallet/src/de/schildbach/wallet/ui/dashpay/CreateIdentityService.kt#L400\nWe have a co-routine version here.", "author": "HashEngineering", "createdAt": "2020-06-25T00:42:03Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -104,4 +113,43 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n             platformRepo.doneAndDismiss()\n         }\n     }\n+\n+    //TODO: this can probably be simplified using coroutines\n+    private fun deriveEncryptionKey(onSuccess: (KeyParameter) -> Unit, onError: (Exception) -> Unit) {\n+        val walletApplication = WalletApplication.getInstance()\n+        val backgroundThread = HandlerThread(\"background\", Process.THREAD_PRIORITY_BACKGROUND)\n+        backgroundThread.start()\n+        val backgroundHandler = android.os.Handler(backgroundThread.looper)\n+        val securityGuard = SecurityGuard()\n+        val password = securityGuard.retrievePassword()\n+        object : DeriveKeyTask(backgroundHandler, walletApplication.scryptIterationsTarget()) {\n+            override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                onSuccess(encryptionKey)\n+            }\n+\n+            override fun onFailure(ex: KeyCrypterException) {\n+                onError(ex)\n+            }\n+        }.deriveKey(walletApplication.wallet, password)\n+    }", "originalCommit": "0294039c749446a45210c5598403722e1fa58ead", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDc1MQ==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445250751", "bodyText": "I see that you put the Co-routine method in PlatformRepo, though it is not used here.  I suppose we choose chose a place for it and use it from there.", "author": "HashEngineering", "createdAt": "2020-06-25T00:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NjYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NzQwNA==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445247404", "bodyText": "This does not appear to be used, but having this method in here could help remove a lot of callback type methods.", "author": "HashEngineering", "createdAt": "2020-06-25T00:45:01Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }", "originalCommit": "0294039c749446a45210c5598403722e1fa58ead", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTY0Ng==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445251646", "bodyText": "One thing I wonder is if there is an exception, what gets executed after this:  continuation.resumeWithException", "author": "HashEngineering", "createdAt": "2020-06-25T01:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0NzQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0OTQ2Ng==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445249466", "bodyText": "We get this userId from this.blockchainIdentity.uniqueIdString\nWhat is the purpose of making a query to Platform to verify the existance of our identity?", "author": "HashEngineering", "createdAt": "2020-06-25T00:53:32Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)", "originalCommit": "0294039c749446a45210c5598403722e1fa58ead", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI0OTU3MA==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445249570", "bodyText": "these println should be log.info", "author": "HashEngineering", "createdAt": "2020-06-25T00:53:59Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)\n+            if (userId != null) {\n+                val contactRequests = ContactRequests(platform)\n+                contactRequests.create(blockchainIdentity, identity!!, encryptionKey)\n+                println(\"contact request sent\")", "originalCommit": "0294039c749446a45210c5598403722e1fa58ead", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDEzMQ==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445250131", "bodyText": "Recently, I have found that if there is a KotlinNullPointerException, then e.localizedMessage is null, which results in another crash.\nadding logging to this for the various status results.", "author": "HashEngineering", "createdAt": "2020-06-25T00:56:22Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)\n+            if (userId != null) {\n+                val contactRequests = ContactRequests(platform)\n+                contactRequests.create(blockchainIdentity, identity!!, encryptionKey)\n+                println(\"contact request sent\")\n+                val cr = contactRequests.watchContactRequest(this.blockchainIdentity.uniqueIdString, userId, 100, 500, RetryDelayType.LINEAR)\n+                println(\"contact request: $cr\")\n+\n+                Resource.success(null)\n+            } else {\n+                Resource.error(\"failed to get contact identity\")\n+            }\n+        } catch (e: Exception) {\n+            Resource.error(e.localizedMessage)", "originalCommit": "0294039c749446a45210c5598403722e1fa58ead", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDM4OA==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445250388", "bodyText": "Travis CI failed due to RetryDelayType being an undefined symbol.", "author": "HashEngineering", "createdAt": "2020-06-25T00:57:20Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -277,7 +333,7 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n     //\n     suspend fun verifyIdentityRegisteredAsync(blockchainIdentity: BlockchainIdentity) {\n         withContext(Dispatchers.IO) {\n-            blockchainIdentity.watchIdentity(10, 5000, BlockchainIdentity.RetryDelayType.SLOW20)\n+            blockchainIdentity.watchIdentity(10, 5000, RetryDelayType.SLOW20)", "originalCommit": "0294039c749446a45210c5598403722e1fa58ead", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MzA0Ng==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445253046", "bodyText": "I see that it was moved in dashpay.  That explains that.", "author": "HashEngineering", "createdAt": "2020-06-25T01:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg5OTgyNQ==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445899825", "bodyText": "It was moved to be reused, yes.", "author": "sambarboza", "createdAt": "2020-06-25T23:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4NzIwNg==", "url": "https://github.com/dashevo/dash-wallet/pull/445#discussion_r445887206", "bodyText": "this watchContactRequest method is called with the same userId for the first and second parameter.  Therefore it will return no documents.", "author": "HashEngineering", "createdAt": "2020-06-25T23:11:57Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -239,6 +250,51 @@ class PlatformRepo(val walletApplication: WalletApplication) {\n         }\n     }\n \n+    /**\n+     *  Wraps callbacks of DeriveKeyTask as Coroutine\n+     */\n+    private suspend fun deriveKey(handler: Handler, wallet: Wallet, password: String): KeyParameter {\n+        return suspendCoroutine { continuation ->\n+            object : DeriveKeyTask(handler, walletApplication.scryptIterationsTarget()) {\n+\n+                override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n+                    continuation.resume(encryptionKey)\n+                }\n+\n+                override fun onFailure(ex: KeyCrypterException?) {\n+                    //CreateIdentityService.log.error(\"unable to decrypt wallet\", ex)\n+                    continuation.resumeWithException(ex as Throwable)\n+                }\n+\n+            }.deriveKey(wallet, password)\n+        }\n+    }\n+\n+    suspend fun sendContactRequest(userId: String, encryptionKey: KeyParameter): Resource<Nothing> {\n+        return try {\n+            val identity = platform.identities.get(userId)\n+            println(\"identity: $identity\")\n+            val blockchainIdentityData = blockchainIdentityDataDaoAsync.load()!!\n+            this.blockchainIdentity = initBlockchainIdentity(blockchainIdentityData,\n+                    walletApplication.wallet)\n+\n+            val userId = this.blockchainIdentity.watchIdentity(3, 500, RetryDelayType.SLOW20)\n+            if (userId != null) {\n+                val contactRequests = ContactRequests(platform)\n+                contactRequests.create(blockchainIdentity, identity!!, encryptionKey)\n+                println(\"contact request sent\")\n+                val cr = contactRequests.watchContactRequest(this.blockchainIdentity.uniqueIdString, userId, 100, 500, RetryDelayType.LINEAR)", "originalCommit": "0294039c749446a45210c5598403722e1fa58ead", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "649a4132c3e6d9188eab54690644755e28c535bd", "url": "https://github.com/dashevo/dash-wallet/commit/649a4132c3e6d9188eab54690644755e28c535bd", "message": "Removing observer after contact request is sent.", "committedDate": "2020-06-26T02:11:29Z", "type": "commit"}, {"oid": "b24a224c39c0b48d54fccb78746abb68d4de0c95", "url": "https://github.com/dashevo/dash-wallet/commit/b24a224c39c0b48d54fccb78746abb68d4de0c95", "message": "Sending contact request to the correct identity", "committedDate": "2020-06-26T02:14:12Z", "type": "commit"}, {"oid": "21aa58fdee0e4e0c2881d1e5c1a0a9f373740015", "url": "https://github.com/dashevo/dash-wallet/commit/21aa58fdee0e4e0c2881d1e5c1a0a9f373740015", "message": "Removing fake data.", "committedDate": "2020-06-26T02:14:33Z", "type": "commit"}]}