{"pr_number": 506, "pr_title": "Using WorkManager for sending contact requests", "pr_createdAt": "2020-09-09T12:40:47Z", "pr_url": "https://github.com/dashevo/dash-wallet/pull/506", "timeline": [{"oid": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "url": "https://github.com/dashevo/dash-wallet/commit/cb0dace46fe9f1792247c3ec546508c9f3c32710", "message": "Using WorkManager for sending contact requests", "committedDate": "2020-09-09T12:40:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MjM3Nw==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485652377", "bodyText": "this had to be moved above android section in order to be able to specify jvmTarget for kotlin (required by some WorkManager related stuff, i.e. workDataOf(...))", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:22:44Z", "path": "wallet/build.gradle", "diffHunk": "@@ -105,6 +106,9 @@ ext {\n     archivesBaseName = 'dash-wallet'\n }\n \n+apply plugin: 'kotlin-android'", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1MzgxNg==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485653816", "bodyText": "This can be removed after testing", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:24:32Z", "path": "wallet/src/de/schildbach/wallet/WalletApplication.java", "diffHunk": "@@ -811,4 +813,12 @@ private void lockTheApp(Context context, Activity activity) {\n         }\n         deviceWasLocked = false;\n     }\n+\n+    @NonNull\n+    @Override\n+    public androidx.work.Configuration getWorkManagerConfiguration() {\n+        return new androidx.work.Configuration.Builder()\n+                .setMinimumLoggingLevel(Log.VERBOSE)\n+                .build();\n+    }", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NDQ2NQ==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485654465", "bodyText": "This LiveData can be used to observe the status of workers", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:25:22Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -17,27 +17,27 @@ package de.schildbach.wallet.ui.dashpay\n \n import android.app.Application\n import android.content.Context\n-import android.content.SharedPreferences\n-import android.os.HandlerThread\n-import android.os.Process\n import androidx.lifecycle.*\n+import androidx.work.*\n import de.schildbach.wallet.WalletApplication\n import de.schildbach.wallet.data.UsernameSearch\n import de.schildbach.wallet.data.UsernameSortOrderBy\n import de.schildbach.wallet.livedata.Resource\n-import de.schildbach.wallet.ui.security.SecurityGuard\n-import de.schildbach.wallet.ui.send.DeriveKeyTask\n+import de.schildbach.wallet.ui.dashpay.work.SendContactRequestOperation\n import kotlinx.coroutines.*\n import org.bitcoinj.core.Address\n-import org.bitcoinj.crypto.KeyCrypterException\n import org.bouncycastle.crypto.params.KeyParameter\n-import java.lang.Exception\n \n class DashPayViewModel(application: Application) : AndroidViewModel(application) {\n \n     private val platformRepo = PlatformRepo.getInstance()\n     private val walletApplication = application as WalletApplication\n \n+    private val mWorkManager: WorkManager = WorkManager.getInstance(application)\n+\n+    private val outputStatus: LiveData<List<WorkInfo>>\n+        get() = mWorkManager.getWorkInfosByTagLiveData(SendContactRequestOperation.TAG)", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NTE5Mg==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485655192", "bodyText": "added a few debug logs to easily track the process in Logcat", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:26:17Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -157,37 +157,11 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         return platformRepo.getNextContactAddress(userId)\n     }\n \n-    //TODO: this can probably be simplified using coroutines\n-    private fun deriveEncryptionKey(onSuccess: (KeyParameter) -> Unit, onError: (Exception) -> Unit) {\n-        val walletApplication = WalletApplication.getInstance()\n-        val backgroundThread = HandlerThread(\"background\", Process.THREAD_PRIORITY_BACKGROUND)\n-        backgroundThread.start()\n-        val backgroundHandler = android.os.Handler(backgroundThread.looper)\n-        val securityGuard = SecurityGuard()\n-        val password = securityGuard.retrievePassword()\n-        object : DeriveKeyTask(backgroundHandler, walletApplication.scryptIterationsTarget()) {\n-            override fun onSuccess(encryptionKey: KeyParameter, wasChanged: Boolean) {\n-                onSuccess(encryptionKey)\n-            }\n-\n-            override fun onFailure(ex: KeyCrypterException) {\n-                onError(ex)\n-            }\n-        }.deriveKey(walletApplication.wallet, password)\n-    }\n-\n-    fun sendContactRequest(toUserId: String) {\n-        deriveEncryptionKey({ encryptionKey: KeyParameter ->\n-            contactRequestLiveData.value = Pair(toUserId, encryptionKey)\n-        }, {\n-            contactRequestLiveData.value = Pair(toUserId, null)\n-        })\n-    }\n-\n-    fun sendContactRequestGlobal(toUserId: String) {\n-        GlobalScope.launch(Dispatchers.IO) {\n-            platformRepo.sendContactRequest(toUserId)\n-        }\n+    fun sendContactRequestWork(toUserId: String) {\n+        println(\"doWork#0\")", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NTYzMQ==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485655631", "bodyText": "Not used. Added just as a reference for future use", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:26:53Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/DashPayViewModel.kt", "diffHunk": "@@ -235,4 +209,7 @@ class DashPayViewModel(application: Application) : AndroidViewModel(application)\n         return sharedPreferences.getBoolean(userId, true)\n     }\n \n+    internal fun cancelSendContactRequest() {\n+        mWorkManager.cancelUniqueWork(SendContactRequestOperation.WORK_NAME)\n+    }", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NjQwOQ==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485656409", "bodyText": "We can use it to present the progress of operation somewhere in the UI", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:27:54Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/PlatformRepo.kt", "diffHunk": "@@ -401,13 +402,17 @@ class PlatformRepo private constructor(val walletApplication: WalletApplication)\n         return Resource.error(\"sendContactRequest doesn't support non-encrypted wallets\")\n     }\n \n-    suspend fun sendContactRequest(toUserId: String, encryptionKey: KeyParameter): Resource<DashPayContactRequest> {\n+    suspend fun sendContactRequest(toUserId: String, encryptionKey: KeyParameter, worker: SendContactRequestWorker? = null): Resource<DashPayContactRequest> {\n         return try {\n             Context.propagate(walletApplication.wallet.context)\n+\n+            worker?.setProgress(SendContactRequestWorker.Progress.INIT)", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NzU1Ng==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485657556", "bodyText": "This could be placed inside of the SendContactRequestWorker but wanted to present how the work chaining can be used", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:29:17Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/DeriveKeyWorker.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.schildbach.wallet.ui.dashpay.work\n+\n+import android.content.Context\n+import androidx.work.CoroutineWorker\n+import androidx.work.WorkerParameters\n+import androidx.work.workDataOf\n+import de.schildbach.wallet.WalletApplication\n+import org.bitcoinj.crypto.KeyCrypterException\n+\n+class DeriveKeyWorker(context: Context, parameters: WorkerParameters)", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1ODMzMg==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485658332", "bodyText": "Value of encryptionKey.key is transferred to the next worker (SendContactRequestWorker)", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:30:16Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/DeriveKeyWorker.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.schildbach.wallet.ui.dashpay.work\n+\n+import android.content.Context\n+import androidx.work.CoroutineWorker\n+import androidx.work.WorkerParameters\n+import androidx.work.workDataOf\n+import de.schildbach.wallet.WalletApplication\n+import org.bitcoinj.crypto.KeyCrypterException\n+\n+class DeriveKeyWorker(context: Context, parameters: WorkerParameters)\n+    : CoroutineWorker(context, parameters) {\n+\n+    companion object {\n+        const val KEY_PASSWORD = \"DeriveKeyWorker.PASSWORD\"\n+        const val KEY_ENCRYPTION_KEY = \"DeriveKeyWorker.ENCRYPTION_KEY\"\n+    }\n+\n+    override suspend fun doWork(): Result {\n+        println(\"doWork#1\")\n+        val password = inputData.getString(KEY_PASSWORD) ?: return Result.failure()\n+        return try {\n+            println(\"doWork#2\")\n+            val encryptionKey = WalletApplication.getInstance().wallet!!.keyCrypter!!.deriveKey(password)\n+            println(\"doWork#3\")\n+            Result.success(workDataOf(KEY_ENCRYPTION_KEY to encryptionKey.key))", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTE5Mw==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485659193", "bodyText": "Creating chain of work:\n\nderive encryption key\nsend contact request (requires encryption key derived in step 1)", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:31:21Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/SendContactRequestOperation.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+package de.schildbach.wallet.ui.dashpay.work\n+\n+import android.annotation.SuppressLint\n+import android.content.Context\n+import androidx.work.*\n+import de.schildbach.wallet.ui.security.SecurityGuard\n+\n+class SendContactRequestOperation {\n+\n+    companion object {\n+        const val WORK_NAME = \"ContactRequest.WORK_NAME\"\n+        const val TAG = \"DeriveKeyWorker.TAG\"\n+    }\n+\n+    @SuppressLint(\"EnqueueWork\")\n+    fun create(context: Context, userId: String): WorkContinuation {\n+\n+        val password = SecurityGuard().retrievePassword()\n+        val deriveKeyWorker = OneTimeWorkRequestBuilder<DeriveKeyWorker>()\n+                .setInputData(workDataOf(DeriveKeyWorker.KEY_PASSWORD to password))\n+                .addTag(TAG)\n+                .build()\n+\n+        val sendContactRequestWorker = OneTimeWorkRequestBuilder<SendContactRequestWorker>()\n+                .setInputData(workDataOf(SendContactRequestWorker.KEY_USER_ID to userId))\n+                .addTag(TAG)\n+                .build()\n+\n+        return WorkManager.getInstance(context)\n+                .beginUniqueWork(WORK_NAME,\n+                        ExistingWorkPolicy.REPLACE,\n+                        deriveKeyWorker)\n+                .then(sendContactRequestWorker)", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTcyNQ==", "url": "https://github.com/dashevo/dash-wallet/pull/506#discussion_r485659725", "bodyText": "get the encryption key derived by DeriveKeyWorker", "author": "tomasz-ludek", "createdAt": "2020-09-09T14:32:04Z", "path": "wallet/src/de/schildbach/wallet/ui/dashpay/work/SendContactRequestWorker.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+package de.schildbach.wallet.ui.dashpay.work\n+\n+import android.content.Context\n+import androidx.work.CoroutineWorker\n+import androidx.work.WorkerParameters\n+import androidx.work.workDataOf\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.dashpay.PlatformRepo\n+import org.bouncycastle.crypto.params.KeyParameter\n+\n+class SendContactRequestWorker(context: Context, parameters: WorkerParameters)\n+    : CoroutineWorker(context, parameters) {\n+\n+    companion object {\n+        const val TAG = \"SendContactRequestWorker.TAG\"\n+\n+        const val KEY_USER_ID = \"SendContactRequestWorker.KEY_USER_ID\"\n+\n+        const val KEY_PROGRESS = \"SendContactRequestWorker.KEY_PROGRESS\"\n+    }\n+\n+    private val platformRepo = PlatformRepo.getInstance()\n+\n+    override suspend fun doWork(): Result {\n+        println(\"doWork#4\")\n+        val encryptionKeyBytes = inputData.getByteArray(DeriveKeyWorker.KEY_ENCRYPTION_KEY)\n+                ?: return Result.failure()", "originalCommit": "cb0dace46fe9f1792247c3ec546508c9f3c32710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}