{"pr_number": 462, "pr_title": "NMA-547 - Android Navigation Components", "pr_createdAt": "2020-07-21T01:51:19Z", "pr_url": "https://github.com/dashevo/dash-wallet/pull/462", "timeline": [{"oid": "7a3e65c9ad0ff87677c027bb4799b67e41ba57a9", "url": "https://github.com/dashevo/dash-wallet/commit/7a3e65c9ad0ff87677c027bb4799b67e41ba57a9", "message": "Added navigation libs and bottom navigation", "committedDate": "2020-07-20T21:50:36Z", "type": "commit"}, {"oid": "ed0ef2a913d91d0e3bc3276be5e285599723f7e0", "url": "https://github.com/dashevo/dash-wallet/commit/ed0ef2a913d91d0e3bc3276be5e285599723f7e0", "message": "Inital MainActivity", "committedDate": "2020-07-20T21:50:36Z", "type": "commit"}, {"oid": "76bb1be44e8728a17c7d2549dfd63a1e91669ed8", "url": "https://github.com/dashevo/dash-wallet/commit/76bb1be44e8728a17c7d2549dfd63a1e91669ed8", "message": "WalletFragment, bottom navigation view setup", "committedDate": "2020-07-20T21:50:37Z", "type": "commit"}, {"oid": "41ef1976077f6e9fc539f0346e7f966b8bbe1119", "url": "https://github.com/dashevo/dash-wallet/commit/41ef1976077f6e9fc539f0346e7f966b8bbe1119", "message": "Updating lifecycle extensions", "committedDate": "2020-07-20T21:50:37Z", "type": "commit"}, {"oid": "6b2b199d3770b66e83f6da8dfcfbfc5cce7c2c80", "url": "https://github.com/dashevo/dash-wallet/commit/6b2b199d3770b66e83f6da8dfcfbfc5cce7c2c80", "message": "Manual navigation", "committedDate": "2020-07-20T21:50:37Z", "type": "commit"}, {"oid": "466f1ab627a54261f1d7b015cf24c69a9fd3c25c", "url": "https://github.com/dashevo/dash-wallet/commit/466f1ab627a54261f1d7b015cf24c69a9fd3c25c", "message": "ConactsActivity => ContactsFragment", "committedDate": "2020-07-20T21:54:02Z", "type": "commit"}, {"oid": "b6c285e35655f78f89db98c73ca02cf10274cf03", "url": "https://github.com/dashevo/dash-wallet/commit/b6c285e35655f78f89db98c73ca02cf10274cf03", "message": "home button behavior", "committedDate": "2020-07-20T21:54:02Z", "type": "commit"}, {"oid": "882db42599c0c38cad5f98b85d774bd786aa0956", "url": "https://github.com/dashevo/dash-wallet/commit/882db42599c0c38cad5f98b85d774bd786aa0956", "message": "Added fragment animation transition", "committedDate": "2020-07-20T21:54:02Z", "type": "commit"}, {"oid": "d74de3b1887e8468fc43b4b4c5c5a9372ed5ac9e", "url": "https://github.com/dashevo/dash-wallet/commit/d74de3b1887e8468fc43b4b4c5c5a9372ed5ac9e", "message": "Payments fragment and animations", "committedDate": "2020-07-20T21:54:02Z", "type": "commit"}, {"oid": "c7f10c5780a1b00b476a51c8358b331b2d486e73", "url": "https://github.com/dashevo/dash-wallet/commit/c7f10c5780a1b00b476a51c8358b331b2d486e73", "message": "MoreFragment", "committedDate": "2020-07-20T21:54:03Z", "type": "commit"}, {"oid": "a4d7a85b180e9508bb63753d4ad5654f9613cdf3", "url": "https://github.com/dashevo/dash-wallet/commit/a4d7a85b180e9508bb63753d4ad5654f9613cdf3", "message": "New buttons", "committedDate": "2020-07-20T21:54:03Z", "type": "commit"}, {"oid": "12eec4392eb433b15acc23bae612e11320ced133", "url": "https://github.com/dashevo/dash-wallet/commit/12eec4392eb433b15acc23bae612e11320ced133", "message": "Toolbar/statusbar adjustments", "committedDate": "2020-07-20T21:54:03Z", "type": "commit"}, {"oid": "e5cd1f55552bdfb68b7a05533c4c19429a024e27", "url": "https://github.com/dashevo/dash-wallet/commit/e5cd1f55552bdfb68b7a05533c4c19429a024e27", "message": "Correct contacts icon", "committedDate": "2020-07-20T21:54:03Z", "type": "commit"}, {"oid": "e7a857368c268c5fa41b7d0b5bdf14cd871c4a27", "url": "https://github.com/dashevo/dash-wallet/commit/e7a857368c268c5fa41b7d0b5bdf14cd871c4a27", "message": "Removed GlobalFooter code", "committedDate": "2020-07-20T21:55:31Z", "type": "commit"}, {"oid": "418a0f2dc935d1b6cb24b5384dce167ab7272a6e", "url": "https://github.com/dashevo/dash-wallet/commit/418a0f2dc935d1b6cb24b5384dce167ab7272a6e", "message": "Removing old icons", "committedDate": "2020-07-20T21:55:32Z", "type": "commit"}, {"oid": "a97eef1669e81ece3851ef8db9445c08f3ba6a22", "url": "https://github.com/dashevo/dash-wallet/commit/a97eef1669e81ece3851ef8db9445c08f3ba6a22", "message": "Removing goto button", "committedDate": "2020-07-20T21:55:32Z", "type": "commit"}, {"oid": "750f6437d16418704677f92ba9c4e6cf0630311a", "url": "https://github.com/dashevo/dash-wallet/commit/750f6437d16418704677f92ba9c4e6cf0630311a", "message": "Toolbars", "committedDate": "2020-07-20T21:55:32Z", "type": "commit"}, {"oid": "f000cd1e3e214bf1e051f0de01c382340734dc89", "url": "https://github.com/dashevo/dash-wallet/commit/f000cd1e3e214bf1e051f0de01c382340734dc89", "message": "Contact mode and Payments mode", "committedDate": "2020-07-20T21:57:16Z", "type": "commit"}, {"oid": "af9aecabdcd845929199f0089a476bc0d280379f", "url": "https://github.com/dashevo/dash-wallet/commit/af9aecabdcd845929199f0089a476bc0d280379f", "message": "Pay/Receive modes", "committedDate": "2020-07-20T21:57:16Z", "type": "commit"}, {"oid": "929f0cf47b1fd4e8a772387da33ff9f9b2182284", "url": "https://github.com/dashevo/dash-wallet/commit/929f0cf47b1fd4e8a772387da33ff9f9b2182284", "message": "Hiding bottom bar when keyboard is up", "committedDate": "2020-07-20T21:57:16Z", "type": "commit"}, {"oid": "7721a8de77535cfc4abb3b90f00b712717aa012e", "url": "https://github.com/dashevo/dash-wallet/commit/7721a8de77535cfc4abb3b90f00b712717aa012e", "message": "Added discover icon", "committedDate": "2020-07-20T21:57:17Z", "type": "commit"}, {"oid": "c6d2d1dfbc52492a3b9fb3b5def6ad6658e54421", "url": "https://github.com/dashevo/dash-wallet/commit/c6d2d1dfbc52492a3b9fb3b5def6ad6658e54421", "message": "Removed nav graph", "committedDate": "2020-07-20T21:57:17Z", "type": "commit"}, {"oid": "bcfe2e34c637bfe081a9a25d6aabf397ffbd9bc1", "url": "https://github.com/dashevo/dash-wallet/commit/bcfe2e34c637bfe081a9a25d6aabf397ffbd9bc1", "message": "Post rebase fix", "committedDate": "2020-07-20T22:34:52Z", "type": "commit"}, {"oid": "0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "url": "https://github.com/dashevo/dash-wallet/commit/0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "message": "Removing .swp file", "committedDate": "2020-07-20T23:10:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5ODY3Ng==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r457798676", "bodyText": "Android Studio warns that onChange is never called and this observer never triggered the \"Join DashPay\" button to disappear since an identity was never detected.  When I removed onChange as follows, then the button was not visible when in identity/username existed.\n        AppDatabase.getAppDatabase().blockchainIdentityDataDao().loadBase().observe(viewLifecycleOwner,\n                Observer {\n                        if (it != null) {\n                            noIdentityCreatedOrInProgress = it.creationState == BlockchainIdentityData.CreationState.NONE\n                            showHideJoinDashPayAction()\n                            if (retryCreationIfInProgress && it.creationInProgress) {\n                                retryCreationIfInProgress = false\n                                activity?.startService(createIntentForRetry(requireActivity(), false))\n                            }\n                        }\n\n                }\n        )", "author": "HashEngineering", "createdAt": "2020-07-21T02:27:43Z", "path": "wallet/src/de/schildbach/wallet/ui/WalletFragment.kt", "diffHunk": "@@ -0,0 +1,342 @@\n+package de.schildbach.wallet.ui\n+\n+import android.app.Activity\n+import android.content.ClipDescription\n+import android.content.ClipboardManager\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.View\n+import androidx.coordinatorlayout.widget.CoordinatorLayout\n+import androidx.core.content.ContextCompat\n+import androidx.fragment.app.Fragment\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.lifecycle.ViewModelProviders\n+import com.google.android.material.appbar.AppBarLayout\n+import com.google.android.material.appbar.AppBarLayout.Behavior.DragCallback\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityBaseData\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.BlockchainState\n+import de.schildbach.wallet.data.PaymentIntent\n+import de.schildbach.wallet.livedata.Resource\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.CheckPinDialog.Companion.show\n+import de.schildbach.wallet.ui.InputParser.StringInputParser\n+import de.schildbach.wallet.ui.MainActivity.Companion.REQUEST_CODE_SCAN\n+import de.schildbach.wallet.ui.PaymentsFragment.Companion.ACTIVE_TAB_PAY\n+import de.schildbach.wallet.ui.PaymentsFragment.Companion.ACTIVE_TAB_RECEIVE\n+import de.schildbach.wallet.ui.VerifySeedActivity.Companion.createIntent\n+import de.schildbach.wallet.ui.dashpay.CreateIdentityService.Companion.createIntentForRetry\n+import de.schildbach.wallet.ui.dashpay.DashPayViewModel\n+import de.schildbach.wallet.ui.scan.ScanActivity\n+import de.schildbach.wallet.ui.send.SendCoinsInternalActivity\n+import de.schildbach.wallet.ui.send.SweepWalletActivity\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.home_content.*\n+import kotlinx.android.synthetic.main.quick_actions_layout.*\n+import kotlinx.android.synthetic.main.sync_status_pane.*\n+import org.bitcoinj.core.Coin\n+import org.bitcoinj.core.PrefixedChecksummedBytes\n+import org.bitcoinj.core.Transaction\n+import org.bitcoinj.core.VerificationException\n+import org.bitcoinj.wallet.Wallet\n+import org.bitcoinj.wallet.listeners.WalletCoinsReceivedEventListener\n+import org.bitcoinj.wallet.listeners.WalletCoinsSentEventListener\n+import org.dash.wallet.integration.uphold.ui.UpholdAccountActivity\n+\n+class WalletFragment : Fragment(R.layout.home_content) {\n+\n+    private var clipboardManager: ClipboardManager? = null\n+    private var blockchainState: BlockchainState? = null\n+    private var syncComplete = false\n+    private var dashPayViewModel: DashPayViewModel? = null\n+    private var isPlatformAvailable = false\n+    private var noIdentityCreatedOrInProgress = true\n+    private var retryCreationIfInProgress = true\n+\n+    private val walletApplication by lazy { WalletApplication.getInstance() }\n+    private val wallet by lazy { walletApplication.wallet }\n+    private val config by lazy { walletApplication.configuration }\n+    private val coinsSendReceivedListener = OnCoinsSentReceivedListener()\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        initView()\n+        initViewModel()\n+        clipboardManager = activity?.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager?\n+\n+        val appBar: View = app_bar\n+        val params = appBar.layoutParams as CoordinatorLayout.LayoutParams\n+        if (params.behavior == null) {\n+            params.behavior = AppBarLayout.Behavior()\n+        }\n+        val behaviour = params.behavior as AppBarLayout.Behavior?\n+        behaviour!!.setDragCallback(object : DragCallback() {\n+            override fun canDrag(appBarLayout: AppBarLayout): Boolean {\n+                //TODO: WalletFragment and WalletTransactionsFragment can probably be merged.\n+                val walletTransactionsFragment = childFragmentManager\n+                        .findFragmentById(R.id.wallet_transactions_fragment) as WalletTransactionsFragment?\n+                return walletTransactionsFragment != null && !walletTransactionsFragment.isHistoryEmpty\n+            }\n+        })\n+\n+        AppDatabase.getAppDatabase().blockchainStateDao().load().observe(viewLifecycleOwner, object : Observer<BlockchainState?> {\n+            override fun onChanged(t: BlockchainState?) {\n+                blockchainState = t\n+                updateSyncState()\n+                showHideJoinDashPayAction()\n+            }\n+        })\n+        registerOnCoinsSentReceivedListener()\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        showHideSecureAction()\n+    }\n+\n+    override fun onDestroy() {\n+        unregisterWalletListener()\n+        super.onDestroy()\n+    }\n+\n+    private fun registerOnCoinsSentReceivedListener() {\n+        val mainThreadExecutor = ContextCompat.getMainExecutor(requireContext())\n+        wallet.addCoinsReceivedEventListener(mainThreadExecutor, coinsSendReceivedListener)\n+        wallet.addCoinsSentEventListener(mainThreadExecutor, coinsSendReceivedListener)\n+    }\n+\n+    private fun unregisterWalletListener() {\n+        wallet.removeCoinsReceivedEventListener(coinsSendReceivedListener)\n+        wallet.removeCoinsSentEventListener(coinsSendReceivedListener)\n+    }\n+\n+    private fun updateSyncPaneVisibility(id: Int, visible: Boolean) {\n+        view?.findViewById<View>(id)?.visibility = if (visible) View.VISIBLE else View.GONE\n+    }\n+\n+    private fun updateSyncState() {\n+        if (blockchainState == null) {\n+            return\n+        }\n+        var percentage: Int = blockchainState!!.percentageSync\n+        if (blockchainState!!.replaying && blockchainState!!.percentageSync == 100) {\n+            //This is to prevent showing 100% when using the Rescan blockchain function.\n+            //The first few broadcasted blockchainStates are with percentage sync at 100%\n+            percentage = 0\n+        }\n+        val syncProgressView = sync_status_progress\n+        if (blockchainState != null && blockchainState!!.syncFailed()) {\n+            updateSyncPaneVisibility(R.id.sync_status_pane, true)\n+            sync_progress_pane.visibility = View.GONE\n+            sync_error_pane.visibility = View.VISIBLE\n+            return\n+        }\n+        updateSyncPaneVisibility(R.id.sync_error_pane, false)\n+        updateSyncPaneVisibility(R.id.sync_progress_pane, true)\n+        val syncStatusTitle = sync_status_title\n+        val syncStatusMessage = sync_status_message\n+        syncProgressView.progress = percentage\n+        val syncPercentageView = sync_status_percentage\n+        syncPercentageView.text = \"$percentage%\"\n+        syncComplete = blockchainState!!.isSynced()\n+        if (syncComplete) {\n+            syncPercentageView.setTextColor(resources.getColor(R.color.success_green))\n+            syncStatusTitle.setText(R.string.sync_status_sync_title)\n+            syncStatusMessage.setText(R.string.sync_status_sync_completed)\n+            updateSyncPaneVisibility(R.id.sync_status_pane, false)\n+        } else {\n+            syncPercentageView.setTextColor(resources.getColor(R.color.dash_gray))\n+            updateSyncPaneVisibility(R.id.sync_status_pane, true)\n+            syncStatusTitle.setText(R.string.sync_status_syncing_title)\n+            syncStatusMessage.setText(R.string.sync_status_syncing_sub_title)\n+        }\n+    }\n+\n+    private fun initView() {\n+        initQuickActions()\n+        if (requireActivity() is OnSelectPaymentTabListener) {\n+            pay_btn.setOnClickListener(View.OnClickListener {\n+                (requireActivity() as OnSelectPaymentTabListener).onSelectPaymentTab(ACTIVE_TAB_PAY)\n+            })\n+            receive_btn.setOnClickListener {\n+                (requireActivity() as OnSelectPaymentTabListener).onSelectPaymentTab(ACTIVE_TAB_RECEIVE)\n+            }\n+        }\n+\n+    }\n+\n+    private fun initViewModel() {\n+        //\n+        // Currently this is only used to check the status of Platform before showing\n+        // the Join DashPay (evolution) button on the shortcuts bar.\n+        // If that is the only function that the platform required for, then we can\n+        // conditionally execute this code when a username hasn't been registered.\n+        dashPayViewModel = ViewModelProvider(this)[DashPayViewModel::class.java]\n+        dashPayViewModel!!.isPlatformAvailableLiveData.observe(viewLifecycleOwner, object : Observer<Resource<Boolean?>?> {\n+            override fun onChanged(status: Resource<Boolean?>?) {\n+                if (status?.status === Status.SUCCESS) {\n+                    if (status.data != null) {\n+                        isPlatformAvailable = status.data\n+                    }\n+                } else {\n+                    isPlatformAvailable = false\n+                }\n+                showHideJoinDashPayAction()\n+            }\n+        })\n+        AppDatabase.getAppDatabase().blockchainIdentityDataDao().loadBase().observe(viewLifecycleOwner,\n+                Observer<BlockchainIdentityBaseData?> {\n+                    fun onChanged(blockchainIdentityData: BlockchainIdentityBaseData) {\n+                        if (blockchainIdentityData != null) {\n+                            noIdentityCreatedOrInProgress = blockchainIdentityData.creationState == BlockchainIdentityData.CreationState.NONE\n+                            showHideJoinDashPayAction()\n+                            if (retryCreationIfInProgress && blockchainIdentityData.creationInProgress) {\n+                                retryCreationIfInProgress = false\n+                                activity?.startService(createIntentForRetry(requireActivity(), false))\n+                            }\n+                        }\n+                    }\n+                })", "originalCommit": "0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNDYwOQ==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r458904609", "bodyText": "Fixed on eb3075f", "author": "sambarboza", "createdAt": "2020-07-22T16:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5ODY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5OTU4OQ==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r457799589", "bodyText": "I suppose this goes here: walletApplication.processDirectTransaction(tx)", "author": "HashEngineering", "createdAt": "2020-07-21T02:31:06Z", "path": "wallet/src/de/schildbach/wallet/ui/WalletFragment.kt", "diffHunk": "@@ -0,0 +1,342 @@\n+package de.schildbach.wallet.ui\n+\n+import android.app.Activity\n+import android.content.ClipDescription\n+import android.content.ClipboardManager\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.View\n+import androidx.coordinatorlayout.widget.CoordinatorLayout\n+import androidx.core.content.ContextCompat\n+import androidx.fragment.app.Fragment\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.lifecycle.ViewModelProviders\n+import com.google.android.material.appbar.AppBarLayout\n+import com.google.android.material.appbar.AppBarLayout.Behavior.DragCallback\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityBaseData\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.BlockchainState\n+import de.schildbach.wallet.data.PaymentIntent\n+import de.schildbach.wallet.livedata.Resource\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.CheckPinDialog.Companion.show\n+import de.schildbach.wallet.ui.InputParser.StringInputParser\n+import de.schildbach.wallet.ui.MainActivity.Companion.REQUEST_CODE_SCAN\n+import de.schildbach.wallet.ui.PaymentsFragment.Companion.ACTIVE_TAB_PAY\n+import de.schildbach.wallet.ui.PaymentsFragment.Companion.ACTIVE_TAB_RECEIVE\n+import de.schildbach.wallet.ui.VerifySeedActivity.Companion.createIntent\n+import de.schildbach.wallet.ui.dashpay.CreateIdentityService.Companion.createIntentForRetry\n+import de.schildbach.wallet.ui.dashpay.DashPayViewModel\n+import de.schildbach.wallet.ui.scan.ScanActivity\n+import de.schildbach.wallet.ui.send.SendCoinsInternalActivity\n+import de.schildbach.wallet.ui.send.SweepWalletActivity\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.home_content.*\n+import kotlinx.android.synthetic.main.quick_actions_layout.*\n+import kotlinx.android.synthetic.main.sync_status_pane.*\n+import org.bitcoinj.core.Coin\n+import org.bitcoinj.core.PrefixedChecksummedBytes\n+import org.bitcoinj.core.Transaction\n+import org.bitcoinj.core.VerificationException\n+import org.bitcoinj.wallet.Wallet\n+import org.bitcoinj.wallet.listeners.WalletCoinsReceivedEventListener\n+import org.bitcoinj.wallet.listeners.WalletCoinsSentEventListener\n+import org.dash.wallet.integration.uphold.ui.UpholdAccountActivity\n+\n+class WalletFragment : Fragment(R.layout.home_content) {\n+\n+    private var clipboardManager: ClipboardManager? = null\n+    private var blockchainState: BlockchainState? = null\n+    private var syncComplete = false\n+    private var dashPayViewModel: DashPayViewModel? = null\n+    private var isPlatformAvailable = false\n+    private var noIdentityCreatedOrInProgress = true\n+    private var retryCreationIfInProgress = true\n+\n+    private val walletApplication by lazy { WalletApplication.getInstance() }\n+    private val wallet by lazy { walletApplication.wallet }\n+    private val config by lazy { walletApplication.configuration }\n+    private val coinsSendReceivedListener = OnCoinsSentReceivedListener()\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        initView()\n+        initViewModel()\n+        clipboardManager = activity?.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager?\n+\n+        val appBar: View = app_bar\n+        val params = appBar.layoutParams as CoordinatorLayout.LayoutParams\n+        if (params.behavior == null) {\n+            params.behavior = AppBarLayout.Behavior()\n+        }\n+        val behaviour = params.behavior as AppBarLayout.Behavior?\n+        behaviour!!.setDragCallback(object : DragCallback() {\n+            override fun canDrag(appBarLayout: AppBarLayout): Boolean {\n+                //TODO: WalletFragment and WalletTransactionsFragment can probably be merged.\n+                val walletTransactionsFragment = childFragmentManager\n+                        .findFragmentById(R.id.wallet_transactions_fragment) as WalletTransactionsFragment?\n+                return walletTransactionsFragment != null && !walletTransactionsFragment.isHistoryEmpty\n+            }\n+        })\n+\n+        AppDatabase.getAppDatabase().blockchainStateDao().load().observe(viewLifecycleOwner, object : Observer<BlockchainState?> {\n+            override fun onChanged(t: BlockchainState?) {\n+                blockchainState = t\n+                updateSyncState()\n+                showHideJoinDashPayAction()\n+            }\n+        })\n+        registerOnCoinsSentReceivedListener()\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        showHideSecureAction()\n+    }\n+\n+    override fun onDestroy() {\n+        unregisterWalletListener()\n+        super.onDestroy()\n+    }\n+\n+    private fun registerOnCoinsSentReceivedListener() {\n+        val mainThreadExecutor = ContextCompat.getMainExecutor(requireContext())\n+        wallet.addCoinsReceivedEventListener(mainThreadExecutor, coinsSendReceivedListener)\n+        wallet.addCoinsSentEventListener(mainThreadExecutor, coinsSendReceivedListener)\n+    }\n+\n+    private fun unregisterWalletListener() {\n+        wallet.removeCoinsReceivedEventListener(coinsSendReceivedListener)\n+        wallet.removeCoinsSentEventListener(coinsSendReceivedListener)\n+    }\n+\n+    private fun updateSyncPaneVisibility(id: Int, visible: Boolean) {\n+        view?.findViewById<View>(id)?.visibility = if (visible) View.VISIBLE else View.GONE\n+    }\n+\n+    private fun updateSyncState() {\n+        if (blockchainState == null) {\n+            return\n+        }\n+        var percentage: Int = blockchainState!!.percentageSync\n+        if (blockchainState!!.replaying && blockchainState!!.percentageSync == 100) {\n+            //This is to prevent showing 100% when using the Rescan blockchain function.\n+            //The first few broadcasted blockchainStates are with percentage sync at 100%\n+            percentage = 0\n+        }\n+        val syncProgressView = sync_status_progress\n+        if (blockchainState != null && blockchainState!!.syncFailed()) {\n+            updateSyncPaneVisibility(R.id.sync_status_pane, true)\n+            sync_progress_pane.visibility = View.GONE\n+            sync_error_pane.visibility = View.VISIBLE\n+            return\n+        }\n+        updateSyncPaneVisibility(R.id.sync_error_pane, false)\n+        updateSyncPaneVisibility(R.id.sync_progress_pane, true)\n+        val syncStatusTitle = sync_status_title\n+        val syncStatusMessage = sync_status_message\n+        syncProgressView.progress = percentage\n+        val syncPercentageView = sync_status_percentage\n+        syncPercentageView.text = \"$percentage%\"\n+        syncComplete = blockchainState!!.isSynced()\n+        if (syncComplete) {\n+            syncPercentageView.setTextColor(resources.getColor(R.color.success_green))\n+            syncStatusTitle.setText(R.string.sync_status_sync_title)\n+            syncStatusMessage.setText(R.string.sync_status_sync_completed)\n+            updateSyncPaneVisibility(R.id.sync_status_pane, false)\n+        } else {\n+            syncPercentageView.setTextColor(resources.getColor(R.color.dash_gray))\n+            updateSyncPaneVisibility(R.id.sync_status_pane, true)\n+            syncStatusTitle.setText(R.string.sync_status_syncing_title)\n+            syncStatusMessage.setText(R.string.sync_status_syncing_sub_title)\n+        }\n+    }\n+\n+    private fun initView() {\n+        initQuickActions()\n+        if (requireActivity() is OnSelectPaymentTabListener) {\n+            pay_btn.setOnClickListener(View.OnClickListener {\n+                (requireActivity() as OnSelectPaymentTabListener).onSelectPaymentTab(ACTIVE_TAB_PAY)\n+            })\n+            receive_btn.setOnClickListener {\n+                (requireActivity() as OnSelectPaymentTabListener).onSelectPaymentTab(ACTIVE_TAB_RECEIVE)\n+            }\n+        }\n+\n+    }\n+\n+    private fun initViewModel() {\n+        //\n+        // Currently this is only used to check the status of Platform before showing\n+        // the Join DashPay (evolution) button on the shortcuts bar.\n+        // If that is the only function that the platform required for, then we can\n+        // conditionally execute this code when a username hasn't been registered.\n+        dashPayViewModel = ViewModelProvider(this)[DashPayViewModel::class.java]\n+        dashPayViewModel!!.isPlatformAvailableLiveData.observe(viewLifecycleOwner, object : Observer<Resource<Boolean?>?> {\n+            override fun onChanged(status: Resource<Boolean?>?) {\n+                if (status?.status === Status.SUCCESS) {\n+                    if (status.data != null) {\n+                        isPlatformAvailable = status.data\n+                    }\n+                } else {\n+                    isPlatformAvailable = false\n+                }\n+                showHideJoinDashPayAction()\n+            }\n+        })\n+        AppDatabase.getAppDatabase().blockchainIdentityDataDao().loadBase().observe(viewLifecycleOwner,\n+                Observer<BlockchainIdentityBaseData?> {\n+                    fun onChanged(blockchainIdentityData: BlockchainIdentityBaseData) {\n+                        if (blockchainIdentityData != null) {\n+                            noIdentityCreatedOrInProgress = blockchainIdentityData.creationState == BlockchainIdentityData.CreationState.NONE\n+                            showHideJoinDashPayAction()\n+                            if (retryCreationIfInProgress && blockchainIdentityData.creationInProgress) {\n+                                retryCreationIfInProgress = false\n+                                activity?.startService(createIntentForRetry(requireActivity(), false))\n+                            }\n+                        }\n+                    }\n+                })\n+    }\n+\n+    fun showHideJoinDashPayAction() {\n+        if (noIdentityCreatedOrInProgress && syncComplete && isPlatformAvailable) {\n+            val walletBalance: Coin = wallet.getBalance(Wallet.BalanceType.ESTIMATED)\n+            val canAffordIt = (walletBalance.isGreaterThan(Constants.DASH_PAY_FEE)\n+                    || walletBalance == Constants.DASH_PAY_FEE)\n+            val visible = canAffordIt && config.showJoinDashPay\n+            join_dashpay_action.visibility = if (visible) View.VISIBLE else View.GONE\n+        } else {\n+            join_dashpay_action.visibility = View.GONE\n+        }\n+        join_dashpay_action_space.visibility = join_dashpay_action.visibility\n+    }\n+\n+    private fun showHideSecureAction() {\n+        secure_action.visibility = if (config.remindBackupSeed) View.VISIBLE else View.GONE\n+        secure_action_space.visibility = secure_action.visibility\n+    }\n+\n+    private fun handleVerifySeed() {\n+        val checkPinSharedModel = ViewModelProviders.of(this)[CheckPinSharedModel::class.java]\n+        checkPinSharedModel.onCorrectPinCallback.observe(viewLifecycleOwner, Observer<Pair<Int?, String?>?> { data ->\n+            if (data?.second != null) {\n+                startVerifySeedActivity(data.second!!)\n+            }\n+        })\n+        show(requireActivity(), 0)\n+    }\n+\n+    private fun handleScan(clickView: View?) {\n+        ScanActivity.startForResult(requireActivity(), clickView, MainActivity.REQUEST_CODE_SCAN)\n+    }\n+\n+    private fun startVerifySeedActivity(pin: String) {\n+        val intent: Intent = createIntent(requireContext(), pin)\n+        startActivity(intent)\n+    }\n+\n+    private fun handlePaste() {\n+        var input: String? = null\n+        if (clipboardManager!!.hasPrimaryClip()) {\n+            val clip = clipboardManager!!.primaryClip ?: return\n+            val clipDescription = clip.description\n+            if (clipDescription.hasMimeType(ClipDescription.MIMETYPE_TEXT_URILIST)) {\n+                val clipUri = clip.getItemAt(0).uri\n+                if (clipUri != null) {\n+                    input = clipUri.toString()\n+                }\n+            } else if (clipDescription.hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)\n+                    || clipDescription.hasMimeType(ClipDescription.MIMETYPE_TEXT_HTML)) {\n+                val clipText = clip.getItemAt(0).text\n+                if (clipText != null) {\n+                    input = clipText.toString()\n+                }\n+            }\n+        }\n+        if (input != null) {\n+            handleString(input, R.string.scan_to_pay_error_dialog_title, R.string.scan_to_pay_error_dialog_message)\n+        } else {\n+            InputParser.dialog(requireContext(), null, R.string.scan_to_pay_error_dialog_title, R.string.scan_to_pay_error_dialog_message_no_data)\n+        }\n+    }\n+\n+    private fun handleString(input: String, errorDialogTitleResId: Int, cannotClassifyCustomMessageResId: Int) {\n+        object : StringInputParser(input, true) {\n+            override fun handlePaymentIntent(paymentIntent: PaymentIntent) {\n+                SendCoinsInternalActivity.start(requireContext(), paymentIntent, true)\n+            }\n+\n+            override fun handlePrivateKey(key: PrefixedChecksummedBytes) {\n+                SweepWalletActivity.start(requireContext(), key, true)\n+            }\n+\n+            @Throws(VerificationException::class)\n+            override fun handleDirectTransaction(tx: Transaction) {\n+                //TODO: Uncomment\n+                //application.processDirectTransaction(tx);", "originalCommit": "0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MTMxNQ==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r459181315", "bodyText": "Fixed on e794cce", "author": "sambarboza", "createdAt": "2020-07-23T02:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5OTU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5OTkzMA==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r457799930", "bodyText": "Do you have a question on why this is here?  On why we can't access Uphold if the blockchain is syncing?", "author": "HashEngineering", "createdAt": "2020-07-21T02:32:25Z", "path": "wallet/src/de/schildbach/wallet/ui/MoreFragment.kt", "diffHunk": "@@ -18,80 +18,59 @@ package de.schildbach.wallet.ui\n \n import android.content.Intent\n import android.os.Bundle\n-import android.view.MenuItem\n-import androidx.appcompat.widget.Toolbar\n+import android.view.View\n+import androidx.fragment.app.Fragment\n import androidx.lifecycle.Observer\n import de.schildbach.wallet.AppDatabase\n import de.schildbach.wallet.WalletApplication\n import de.schildbach.wallet.data.BlockchainState\n-import de.schildbach.wallet.util.showBlockchainSyncingMessage\n import de.schildbach.wallet_test.R\n import kotlinx.android.synthetic.main.activity_more.*\n import org.dash.wallet.integration.uphold.ui.UpholdAccountActivity\n \n-class MoreActivity : GlobalFooterActivity() {\n+class MoreFragment : Fragment(R.layout.activity_more) {\n \n     private var blockchainState: BlockchainState? = null\n \n-    override fun onCreate(savedInstanceState: Bundle?) {\n-        super.onCreate(savedInstanceState)\n-        setContentViewWithFooter(R.layout.activity_more)\n-        activateMoreButton()\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n \n-        val toolbar = findViewById<Toolbar>(R.id.toolbar)\n-        setSupportActionBar(toolbar)\n-        val actionBar = supportActionBar\n-        actionBar?.apply {\n-            setDisplayHomeAsUpEnabled(true)\n-            setDisplayShowHomeEnabled(true)\n-        }\n-\n-        setTitle(R.string.more_title)\n-\n-        AppDatabase.getAppDatabase().blockchainStateDao().load().observe(this, Observer {\n+        setupActionBarWithTitle(R.string.more_title)\n+        AppDatabase.getAppDatabase().blockchainStateDao().load().observe(viewLifecycleOwner, Observer {\n             blockchainState = it\n         })\n \n         buy_and_sell.setOnClickListener {\n             if (blockchainState != null && blockchainState?.replaying!!) {\n-                showBlockchainSyncingMessage()\n+                //TODO: ???\n+                //showBlockchainSyncingMessage()", "originalCommit": "0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MDk3Nw==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r459180977", "bodyText": "I wasn't finding this method. It's on ActivityExtensions. Fixed on ce35cda.", "author": "sambarboza", "createdAt": "2020-07-23T02:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5OTkzMA=="}], "type": "inlineReview"}, {"oid": "0a73d65acec2309b7910cfcc9d7d3cb7954a7266", "url": "https://github.com/dashevo/dash-wallet/commit/0a73d65acec2309b7910cfcc9d7d3cb7954a7266", "message": "Code cleanup", "committedDate": "2020-07-21T02:53:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNjk4OA==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r457806988", "bodyText": "here is an unneeded comment", "author": "HashEngineering", "createdAt": "2020-07-21T02:59:43Z", "path": "wallet/src/de/schildbach/wallet/ui/RequestCoinsActivity.java", "diffHunk": "@@ -34,7 +34,8 @@\n     protected void onCreate(final Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        setContentViewWithFooter(R.layout.request_coins_content);\n+        setContentView(R.layout.request_coins_content);\n+        //setContentViewWithFooter(R.layout.request_coins_content);", "originalCommit": "0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNzM0Mg==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r457807342", "bodyText": "This is probably a future story?", "author": "HashEngineering", "createdAt": "2020-07-21T03:01:08Z", "path": "wallet/src/de/schildbach/wallet/ui/PaymentsFragment.kt", "diffHunk": "@@ -17,46 +17,50 @@\n package de.schildbach.wallet.ui\n \n import android.content.Context\n-import android.content.Intent\n import android.os.Bundle\n import android.view.Menu\n-import android.view.MenuItem\n-import androidx.appcompat.widget.Toolbar\n+import android.view.MenuInflater\n+import android.view.View\n+import androidx.fragment.app.Fragment\n import com.google.android.material.tabs.TabLayout\n import de.schildbach.wallet_test.R\n import kotlinx.android.synthetic.main.activity_payments.*\n \n-class PaymentsActivity : GlobalFooterActivity() {\n+class PaymentsFragment : Fragment(R.layout.activity_payments) {\n \n     companion object {\n         private const val PREFS_RECENT_TAB = \"recent_tab\"\n-\n-        private const val EXTRA_ACTIVE_TAB = \"extra_active_tab\"\n+        private const val ARGS_ACTIVE_TAB = \"extra_active_tab\"\n \n         const val ACTIVE_TAB_RECENT = -1\n         const val ACTIVE_TAB_PAY = 0\n         const val ACTIVE_TAB_RECEIVE = 1\n \n         @JvmStatic\n-        fun createIntent(context: Context, activeTab: Int): Intent {\n-            val intent = Intent(context, PaymentsActivity::class.java)\n-            intent.putExtra(EXTRA_ACTIVE_TAB, activeTab)\n-            return intent\n+        fun newInstance(activeTab: Int = ACTIVE_TAB_RECENT): PaymentsFragment {\n+            val args = Bundle()\n+            args.putInt(ARGS_ACTIVE_TAB, activeTab)\n+\n+            val instance = PaymentsFragment()\n+            instance.arguments = args\n+            return instance\n         }\n     }\n \n     private var saveRecentTab = false\n \n     override fun onCreate(savedInstanceState: Bundle?) {\n         super.onCreate(savedInstanceState)\n-        setContentViewWithFooter(R.layout.activity_payments)\n-        activateGotoButton()\n+        setHasOptionsMenu(true)\n+    }\n \n-        val toolbar = findViewById<Toolbar>(R.id.toolbar)\n-        setSupportActionBar(toolbar)\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n \n-        setTitle(R.string.payments_title)\n+        toolbar.setTitle(R.string.payments_title)\n+        setupActionBarWithTitle(R.string.payments_title, false)\n \n+        //TODO: Implement FragmentViewPager", "originalCommit": "0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3OTg3MQ==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r459179871", "bodyText": "Yes, implementing a FragmentViewPager on this screen would allow for smoother switching between Send / Received.", "author": "sambarboza", "createdAt": "2020-07-23T02:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNzM0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNzQyNA==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r457807424", "bodyText": "Future story?", "author": "HashEngineering", "createdAt": "2020-07-21T03:01:32Z", "path": "wallet/src/de/schildbach/wallet/ui/WalletFragment.kt", "diffHunk": "@@ -0,0 +1,342 @@\n+package de.schildbach.wallet.ui\n+\n+import android.app.Activity\n+import android.content.ClipDescription\n+import android.content.ClipboardManager\n+import android.content.Context\n+import android.content.Intent\n+import android.os.Bundle\n+import android.view.View\n+import androidx.coordinatorlayout.widget.CoordinatorLayout\n+import androidx.core.content.ContextCompat\n+import androidx.fragment.app.Fragment\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.lifecycle.ViewModelProviders\n+import com.google.android.material.appbar.AppBarLayout\n+import com.google.android.material.appbar.AppBarLayout.Behavior.DragCallback\n+import de.schildbach.wallet.AppDatabase\n+import de.schildbach.wallet.Constants\n+import de.schildbach.wallet.WalletApplication\n+import de.schildbach.wallet.data.BlockchainIdentityBaseData\n+import de.schildbach.wallet.data.BlockchainIdentityData\n+import de.schildbach.wallet.data.BlockchainState\n+import de.schildbach.wallet.data.PaymentIntent\n+import de.schildbach.wallet.livedata.Resource\n+import de.schildbach.wallet.livedata.Status\n+import de.schildbach.wallet.ui.CheckPinDialog.Companion.show\n+import de.schildbach.wallet.ui.InputParser.StringInputParser\n+import de.schildbach.wallet.ui.MainActivity.Companion.REQUEST_CODE_SCAN\n+import de.schildbach.wallet.ui.PaymentsFragment.Companion.ACTIVE_TAB_PAY\n+import de.schildbach.wallet.ui.PaymentsFragment.Companion.ACTIVE_TAB_RECEIVE\n+import de.schildbach.wallet.ui.VerifySeedActivity.Companion.createIntent\n+import de.schildbach.wallet.ui.dashpay.CreateIdentityService.Companion.createIntentForRetry\n+import de.schildbach.wallet.ui.dashpay.DashPayViewModel\n+import de.schildbach.wallet.ui.scan.ScanActivity\n+import de.schildbach.wallet.ui.send.SendCoinsInternalActivity\n+import de.schildbach.wallet.ui.send.SweepWalletActivity\n+import de.schildbach.wallet_test.R\n+import kotlinx.android.synthetic.main.home_content.*\n+import kotlinx.android.synthetic.main.quick_actions_layout.*\n+import kotlinx.android.synthetic.main.sync_status_pane.*\n+import org.bitcoinj.core.Coin\n+import org.bitcoinj.core.PrefixedChecksummedBytes\n+import org.bitcoinj.core.Transaction\n+import org.bitcoinj.core.VerificationException\n+import org.bitcoinj.wallet.Wallet\n+import org.bitcoinj.wallet.listeners.WalletCoinsReceivedEventListener\n+import org.bitcoinj.wallet.listeners.WalletCoinsSentEventListener\n+import org.dash.wallet.integration.uphold.ui.UpholdAccountActivity\n+\n+class WalletFragment : Fragment(R.layout.home_content) {\n+\n+    private var clipboardManager: ClipboardManager? = null\n+    private var blockchainState: BlockchainState? = null\n+    private var syncComplete = false\n+    private var dashPayViewModel: DashPayViewModel? = null\n+    private var isPlatformAvailable = false\n+    private var noIdentityCreatedOrInProgress = true\n+    private var retryCreationIfInProgress = true\n+\n+    private val walletApplication by lazy { WalletApplication.getInstance() }\n+    private val wallet by lazy { walletApplication.wallet }\n+    private val config by lazy { walletApplication.configuration }\n+    private val coinsSendReceivedListener = OnCoinsSentReceivedListener()\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        initView()\n+        initViewModel()\n+        clipboardManager = activity?.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager?\n+\n+        val appBar: View = app_bar\n+        val params = appBar.layoutParams as CoordinatorLayout.LayoutParams\n+        if (params.behavior == null) {\n+            params.behavior = AppBarLayout.Behavior()\n+        }\n+        val behaviour = params.behavior as AppBarLayout.Behavior?\n+        behaviour!!.setDragCallback(object : DragCallback() {\n+            override fun canDrag(appBarLayout: AppBarLayout): Boolean {\n+                //TODO: WalletFragment and WalletTransactionsFragment can probably be merged.", "originalCommit": "0320dd9a2b16e4eb92b9f4cfc4960477e19e0fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MDA2OA==", "url": "https://github.com/dashevo/dash-wallet/pull/462#discussion_r459180068", "bodyText": "Yes, merging these two fragments would make the code cleaner and possibily smaller, also, these two fragments can't exist separately in our app.", "author": "sambarboza", "createdAt": "2020-07-23T02:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNzQyNA=="}], "type": "inlineReview"}, {"oid": "eb3075fd9f97b15835c06a4358ddcb26df6c102d", "url": "https://github.com/dashevo/dash-wallet/commit/eb3075fd9f97b15835c06a4358ddcb26df6c102d", "message": "Fixed Blockchain Identity observer", "committedDate": "2020-07-22T16:01:54Z", "type": "commit"}, {"oid": "86c39dbfd5806f56c5862c422d1fce265ee0789a", "url": "https://github.com/dashevo/dash-wallet/commit/86c39dbfd5806f56c5862c422d1fce265ee0789a", "message": "Reset MainActivity when reset chain", "committedDate": "2020-07-22T18:06:25Z", "type": "commit"}, {"oid": "e6ecff631af87d67f10f97d86b2bc3e001346693", "url": "https://github.com/dashevo/dash-wallet/commit/e6ecff631af87d67f10f97d86b2bc3e001346693", "message": "1 Toolbar for ViewAllRequests", "committedDate": "2020-07-22T22:51:45Z", "type": "commit"}, {"oid": "6caf113b9b141268006a8be2cc9c08ed5e81d3cb", "url": "https://github.com/dashevo/dash-wallet/commit/6caf113b9b141268006a8be2cc9c08ed5e81d3cb", "message": "Up != Home", "committedDate": "2020-07-23T00:57:12Z", "type": "commit"}, {"oid": "9110c6b01a31f5dca546a76cae89e6f7c0c713db", "url": "https://github.com/dashevo/dash-wallet/commit/9110c6b01a31f5dca546a76cae89e6f7c0c713db", "message": "Retaining home view", "committedDate": "2020-07-23T01:50:28Z", "type": "commit"}, {"oid": "ebeb80a5f49872931cf60b8f56e3d2eb4ea3d7b8", "url": "https://github.com/dashevo/dash-wallet/commit/ebeb80a5f49872931cf60b8f56e3d2eb4ea3d7b8", "message": "Retaining wallet transactions frag", "committedDate": "2020-07-23T02:03:36Z", "type": "commit"}, {"oid": "ce35cdaccf4394b27b37dd901302c3337c1b37ec", "url": "https://github.com/dashevo/dash-wallet/commit/ce35cdaccf4394b27b37dd901302c3337c1b37ec", "message": "showBlockchainSyncingMessage in MoreFragment", "committedDate": "2020-07-23T02:13:18Z", "type": "commit"}, {"oid": "e794ccefe9c91675c7cb0896a503b17325019754", "url": "https://github.com/dashevo/dash-wallet/commit/e794ccefe9c91675c7cb0896a503b17325019754", "message": "Added back processDirectTransaction(tx);", "committedDate": "2020-07-23T02:14:57Z", "type": "commit"}]}