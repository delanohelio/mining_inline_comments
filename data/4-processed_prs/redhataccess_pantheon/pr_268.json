{"pr_number": 268, "pr_title": "extract an abstract json processing servlet for POST and PUT operations", "pr_createdAt": "2020-04-09T20:36:47Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/268", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NDg2Nw==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407364867", "bodyText": "I like this idea. However, I have a query - do you see any more servlets in the near term (1-2 sprints) where JSON payload would be expected? If no, it would be better to table this until such a use case comes. Introducing an extra hierarchy for just one servlet seems non-optimal at the moment. What do you think?", "author": "aprajshekhar", "createdAt": "2020-04-13T07:54:46Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AbstractJsonPostOrPutServlet.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Abstract servlet class to provide common behaviour that accepts a json payload in the body of a POST or PUT\n+ * web request, parses said payload into a java class, and then operates on the object. All the json\n+ * deserialization logic is encapsulated in this class.\n+ *\n+ * Implementations should override the processPost of processPut methods (both are allowed) to implement\n+ * specific logic for either case.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class AbstractJsonPostOrPutServlet<T> extends SlingAllMethodsServlet {", "originalCommit": "addd0c117619bcc289f4685899bf4aa0f4657663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMzE1NA==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407423154", "bodyText": "That's more a question for @benradey, @xdavidson and you really.\nI'm happy to keep the PR on hold (somehow?) or close it if you feel we shouldn't add it... just scratching my coding itch \ud83d\ude04", "author": "carlosmunoz", "createdAt": "2020-04-13T10:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NDg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyNjIyMQ==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407426221", "bodyText": "Thanks :). I vote for holding it for now. @benradey, @xdavidson what do you think?", "author": "aprajshekhar", "createdAt": "2020-04-13T10:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NDg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNTczOQ==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r409115739", "bodyText": "I would vote to bring it in. We already have AbstractJsonSingleQueryServlet in the project which only has 1 child based on it currently, so there is some precedent for abstracting things away immediately. Also, if we sit on this PR, we might accidentally forget that it exists when we go to create our 2nd post api (whenever that may be).", "author": "benradey", "createdAt": "2020-04-15T20:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NDg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NTE5OQ==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407365199", "bodyText": "Observational: Logging the exception here would help in tracing any exception in splunk.", "author": "aprajshekhar", "createdAt": "2020-04-13T07:55:50Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AbstractJsonPostOrPutServlet.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Abstract servlet class to provide common behaviour that accepts a json payload in the body of a POST or PUT\n+ * web request, parses said payload into a java class, and then operates on the object. All the json\n+ * deserialization logic is encapsulated in this class.\n+ *\n+ * Implementations should override the processPost of processPut methods (both are allowed) to implement\n+ * specific logic for either case.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class AbstractJsonPostOrPutServlet<T> extends SlingAllMethodsServlet {\n+\n+    private final Class<T> jsonType;\n+\n+    public AbstractJsonPostOrPutServlet(Class<T> jsonType) {\n+        this.jsonType = jsonType;\n+    }\n+\n+    @Override\n+    protected final void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response)\n+            throws ServletException, IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        T jsonPayload = transformToPojo.fromJson(jsonType, request.getReader());\n+\n+        try {\n+            processPost(request, response, jsonPayload);\n+        } catch (Exception e) {\n+            throw new ServletException(e);", "originalCommit": "addd0c117619bcc289f4685899bf4aa0f4657663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMTY3NA==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407421674", "bodyText": "Do you mean logging the exception instead of throwing it? or doing both?", "author": "carlosmunoz", "createdAt": "2020-04-13T10:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NTE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyNTA5Nw==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407425097", "bodyText": "Doing both. When client recieves the exception, having a log of the same on server side helps a lot in case debugging is required  :)", "author": "aprajshekhar", "createdAt": "2020-04-13T10:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NTE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NTI3MA==", "url": "https://github.com/redhataccess/pantheon/pull/268#discussion_r407365270", "bodyText": "Observational: Logging the exception here would help in tracing any exception in splunk.", "author": "aprajshekhar", "createdAt": "2020-04-13T07:56:06Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/servlet/AbstractJsonPostOrPutServlet.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.redhat.pantheon.servlet;\n+\n+import com.redhat.pantheon.helper.TransformToPojo;\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.SlingHttpServletResponse;\n+import org.apache.sling.api.servlets.SlingAllMethodsServlet;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Abstract servlet class to provide common behaviour that accepts a json payload in the body of a POST or PUT\n+ * web request, parses said payload into a java class, and then operates on the object. All the json\n+ * deserialization logic is encapsulated in this class.\n+ *\n+ * Implementations should override the processPost of processPut methods (both are allowed) to implement\n+ * specific logic for either case.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class AbstractJsonPostOrPutServlet<T> extends SlingAllMethodsServlet {\n+\n+    private final Class<T> jsonType;\n+\n+    public AbstractJsonPostOrPutServlet(Class<T> jsonType) {\n+        this.jsonType = jsonType;\n+    }\n+\n+    @Override\n+    protected final void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response)\n+            throws ServletException, IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        T jsonPayload = transformToPojo.fromJson(jsonType, request.getReader());\n+\n+        try {\n+            processPost(request, response, jsonPayload);\n+        } catch (Exception e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+\n+    @Override\n+    protected final void doPut(SlingHttpServletRequest request, SlingHttpServletResponse response)\n+            throws ServletException, IOException {\n+        TransformToPojo transformToPojo = new TransformToPojo();\n+        T jsonPayload = transformToPojo.fromJson(jsonType, request.getReader());\n+\n+        try {\n+            processPut(request, response, jsonPayload);\n+        } catch (Exception e) {\n+            throw new ServletException(e);", "originalCommit": "addd0c117619bcc289f4685899bf4aa0f4657663", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dd0b42e7220568b18f413feac9b749042bdf0007", "url": "https://github.com/redhataccess/pantheon/commit/dd0b42e7220568b18f413feac9b749042bdf0007", "message": "rebase code on top of latest master branch", "committedDate": "2020-04-17T12:58:47Z", "type": "forcePushed"}, {"oid": "d6c76b6e74579add76d2f9bda0e3605436741c5c", "url": "https://github.com/redhataccess/pantheon/commit/d6c76b6e74579add76d2f9bda0e3605436741c5c", "message": "extract an abstract json processing servlet for POST and PUT operations", "committedDate": "2020-04-17T20:17:18Z", "type": "commit"}, {"oid": "7808ada01b31d45986be2cb3e72b1f9008522e28", "url": "https://github.com/redhataccess/pantheon/commit/7808ada01b31d45986be2cb3e72b1f9008522e28", "message": "add exception logging for the base Json servlet", "committedDate": "2020-04-17T20:17:18Z", "type": "commit"}, {"oid": "a1dd51c72def03cde2b5b955dbf6390c2d27d82c", "url": "https://github.com/redhataccess/pantheon/commit/a1dd51c72def03cde2b5b955dbf6390c2d27d82c", "message": "rebase code on top of latest master branch", "committedDate": "2020-04-17T20:18:18Z", "type": "commit"}, {"oid": "d67aa7f7871078ad014cb4d397571129f39a179a", "url": "https://github.com/redhataccess/pantheon/commit/d67aa7f7871078ad014cb4d397571129f39a179a", "message": "rebase on top of master once more", "committedDate": "2020-04-17T20:21:26Z", "type": "commit"}, {"oid": "d67aa7f7871078ad014cb4d397571129f39a179a", "url": "https://github.com/redhataccess/pantheon/commit/d67aa7f7871078ad014cb4d397571129f39a179a", "message": "rebase on top of master once more", "committedDate": "2020-04-17T20:21:26Z", "type": "forcePushed"}]}