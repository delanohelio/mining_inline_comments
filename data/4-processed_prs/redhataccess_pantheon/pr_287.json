{"pr_number": 287, "pr_title": "add a more compact null-safe way to traverse jcr structures using models", "pr_createdAt": "2020-05-09T23:08:34Z", "pr_url": "https://github.com/redhataccess/pantheon/pull/287", "timeline": [{"oid": "e8a4890a1d8eaaea4821ef07daddaf10c98ec65e", "url": "https://github.com/redhataccess/pantheon/commit/e8a4890a1d8eaaea4821ef07daddaf10c98ec65e", "message": "add a more compact null-safe way to traverse jcr structures using models", "committedDate": "2020-05-09T23:05:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTU2Ng==", "url": "https://github.com/redhataccess/pantheon/pull/287#discussion_r423205566", "bodyText": "I have a question. Why are we using an unbounded wildcard type for EMPTY instead of <T>?", "author": "xdavidson", "createdAt": "2020-05-11T17:35:19Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/api/util/SafeResourceTraversal.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.redhat.pantheon.model.api.util;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.SlingModel;\n+\n+import javax.annotation.Nullable;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import static java.util.Optional.ofNullable;\n+\n+/**\n+ * Utility class which offers a null-safe way to traverse deep {@link SlingModel}\n+ * structures. Traversals represent paths across multiple nodes ending in deeper\n+ * child nodes, or properties. If any of the intermediary nodes is not present, the whole traversal\n+ * will still conclude, with a final result of null.<br/>\n+ * <br/>\n+ * To use it, invoke the {@link SafeResourceTraversal#start(SlingModel)} method with a\n+ * model to be traversed. From there on, the whole structure may be traversed all the\n+ * way down to specific fields.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class SafeResourceTraversal<T extends SlingModel> implements Supplier<T> {\n+\n+    private static final SafeResourceTraversal<?> EMPTY = new SafeResourceTraversal<>(null);", "originalCommit": "e8a4890a1d8eaaea4821ef07daddaf10c98ec65e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMDk4Ng==", "url": "https://github.com/redhataccess/pantheon/pull/287#discussion_r423210986", "bodyText": "never mind. Further down  i see we have genetic types of <T> or <U> or <P>", "author": "xdavidson", "createdAt": "2020-05-11T17:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxOTI4NQ==", "url": "https://github.com/redhataccess/pantheon/pull/287#discussion_r423219285", "bodyText": "It's unbounded because it's a singleton (private too) and at this point we don't know a specific type parameter to provide. Further down in the empty() method you'll see that there is a cast to the specific parameterized type. Since these are all erased types (just for compilation), it all just works.", "author": "carlosmunoz", "createdAt": "2020-05-11T17:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMjY3Mg==", "url": "https://github.com/redhataccess/pantheon/pull/287#discussion_r423212672", "bodyText": "can we name the generic type from <P> to <F>? I think the convention is to take the First letter of the type parameter.", "author": "xdavidson", "createdAt": "2020-05-11T17:47:48Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/api/util/SafeResourceTraversal.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.redhat.pantheon.model.api.util;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.SlingModel;\n+\n+import javax.annotation.Nullable;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import static java.util.Optional.ofNullable;\n+\n+/**\n+ * Utility class which offers a null-safe way to traverse deep {@link SlingModel}\n+ * structures. Traversals represent paths across multiple nodes ending in deeper\n+ * child nodes, or properties. If any of the intermediary nodes is not present, the whole traversal\n+ * will still conclude, with a final result of null.<br/>\n+ * <br/>\n+ * To use it, invoke the {@link SafeResourceTraversal#start(SlingModel)} method with a\n+ * model to be traversed. From there on, the whole structure may be traversed all the\n+ * way down to specific fields.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class SafeResourceTraversal<T extends SlingModel> implements Supplier<T> {\n+\n+    private static final SafeResourceTraversal<?> EMPTY = new SafeResourceTraversal<>(null);\n+\n+    private final Optional<T> currentResource;\n+\n+    private SafeResourceTraversal(T resource) {\n+        this.currentResource = ofNullable(resource);\n+    }\n+\n+    /**\n+     * Starts a safe traversal.\n+     * @param model The {@link SlingModel} to traverse.\n+     * @param <U>\n+     * @return A traversal object starting from the given {@link SlingModel}. If the model\n+     * is null, traversals will still conclude but will always yield null results.\n+     */\n+    public static final <U extends SlingModel> SafeResourceTraversal<U> start(@Nullable U model) {\n+        return new SafeResourceTraversal<>(model);\n+    }\n+\n+    /**\n+     * Traverses the current node in the traversal, down to one of its children.\n+     * @param childAccessor A function that returns a {@link Child} of the current resource.\n+     * @param <U>\n+     * @return A resource traversal at the child accessed via the child accessor.\n+     */\n+    public <U extends SlingModel> SafeResourceTraversal<U> traverse(Function<? super T, Child<U>> childAccessor) {\n+        if(currentResource.isPresent()) {\n+            Child<U> nextTraversalChild = childAccessor.apply(currentResource.get());\n+            return new SafeResourceTraversal<>(nextTraversalChild.get());\n+        }\n+        return (SafeResourceTraversal<U>) EMPTY;\n+    }\n+\n+    /**\n+     * Traverses to a field in the current traversed node. This represents and end\n+     * to the traversal as there is nothing to traverse from a field.\n+     * @param fieldAccessor A function that returns a {@link Field} from the current resource.\n+     * @param <P>\n+     * @return An optional containing the value of the field. If the field is not present, or if\n+     * any of the intermediary nodes in the traversal was not present, this optional is empty.\n+     */\n+    public <P> Optional<P> field(Function<? super T, Field<P>> fieldAccessor) {", "originalCommit": "e8a4890a1d8eaaea4821ef07daddaf10c98ec65e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTM1Mw==", "url": "https://github.com/redhataccess/pantheon/pull/287#discussion_r423221353", "bodyText": "done.", "author": "carlosmunoz", "createdAt": "2020-05-11T18:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMjY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMzQxNA==", "url": "https://github.com/redhataccess/pantheon/pull/287#discussion_r423213414", "bodyText": "Can we rename to generic <U> to <M>? Since the type parameter if model...", "author": "xdavidson", "createdAt": "2020-05-11T17:49:09Z", "path": "pantheon-bundle/src/main/java/com/redhat/pantheon/model/api/util/SafeResourceTraversal.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.redhat.pantheon.model.api.util;\n+\n+import com.redhat.pantheon.model.api.Child;\n+import com.redhat.pantheon.model.api.Field;\n+import com.redhat.pantheon.model.api.SlingModel;\n+\n+import javax.annotation.Nullable;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import static java.util.Optional.ofNullable;\n+\n+/**\n+ * Utility class which offers a null-safe way to traverse deep {@link SlingModel}\n+ * structures. Traversals represent paths across multiple nodes ending in deeper\n+ * child nodes, or properties. If any of the intermediary nodes is not present, the whole traversal\n+ * will still conclude, with a final result of null.<br/>\n+ * <br/>\n+ * To use it, invoke the {@link SafeResourceTraversal#start(SlingModel)} method with a\n+ * model to be traversed. From there on, the whole structure may be traversed all the\n+ * way down to specific fields.\n+ *\n+ * @author Carlos Munoz\n+ */\n+public class SafeResourceTraversal<T extends SlingModel> implements Supplier<T> {\n+\n+    private static final SafeResourceTraversal<?> EMPTY = new SafeResourceTraversal<>(null);\n+\n+    private final Optional<T> currentResource;\n+\n+    private SafeResourceTraversal(T resource) {\n+        this.currentResource = ofNullable(resource);\n+    }\n+\n+    /**\n+     * Starts a safe traversal.\n+     * @param model The {@link SlingModel} to traverse.\n+     * @param <U>\n+     * @return A traversal object starting from the given {@link SlingModel}. If the model\n+     * is null, traversals will still conclude but will always yield null results.\n+     */\n+    public static final <U extends SlingModel> SafeResourceTraversal<U> start(@Nullable U model) {", "originalCommit": "e8a4890a1d8eaaea4821ef07daddaf10c98ec65e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMTQwMw==", "url": "https://github.com/redhataccess/pantheon/pull/287#discussion_r423221403", "bodyText": "done.", "author": "carlosmunoz", "createdAt": "2020-05-11T18:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxMzQxNA=="}], "type": "inlineReview"}, {"oid": "148232b69b59524f3a4a2f716c0d97a397730a84", "url": "https://github.com/redhataccess/pantheon/commit/148232b69b59524f3a4a2f716c0d97a397730a84", "message": "review corrections: rename type parameters", "committedDate": "2020-05-11T18:02:06Z", "type": "commit"}]}