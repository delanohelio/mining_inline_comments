{"pr_number": 75, "pr_title": "Query Verification: Setup project and input handling", "pr_createdAt": "2020-06-26T21:47:41Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75", "timeline": [{"oid": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d9bfc84dc46b47cd77c29c336d240ad694d2c784", "message": "Setup project and input handling", "committedDate": "2020-06-26T20:33:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NjQxMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446446410", "bodyText": "It may be interesting to consider Autovalue: https://www.baeldung.com/introduction-to-autovalue", "author": "yzhvictor", "createdAt": "2020-06-26T23:07:46Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.bigquery;\n+\n+public class BigQueryInstance {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NjU5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446446591", "bodyText": "Why this is \"instance\"?", "author": "yzhvictor", "createdAt": "2020-06-26T23:08:23Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.bigquery;\n+\n+public class BigQueryInstance {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NzA0MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447041", "bodyText": "I don't think you need this.", "author": "yzhvictor", "createdAt": "2020-06-26T23:10:17Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import org.apache.commons.cli.*;\n+\n+public class Main {\n+\n+    /**\n+     * usage: query_verification -q <PATH> <PATH> [-d <PATH>] [-s <PATH> <PATH>]\n+     *        [-h]\n+     *  -q,--query <PATH> <PATH>    First argument is the path to the migrated\n+     *                              query file. Second argument is the path to\n+     *                              the original query file and only required\n+     *                              when data is provided.\n+     *  -d,--data <PATH>            Path for table data in CSV format.\n+     *  -s,--schema <PATH> <PATH>   First argument is the path to the migrated\n+     *                              schema path. Second argument is the path to\n+     *                              the original schema query and is optional.\n+     *                              Referenced files should be in a JSON format.\n+     *  -h,--help                   Print this help screen.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        Main main = new Main();\n+        main.run(args);\n+\n+        System.exit(0);", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NzI0MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447241", "bodyText": "Just put the full name, QV may be confusing for people, similar for other places. This can also consider Autovalue.", "author": "yzhvictor", "createdAt": "2020-06-26T23:11:14Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.google.bigquery;\n+\n+public class QVQuery {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0Nzg4Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447886", "bodyText": "Should them be final and only set in constructor?", "author": "yzhvictor", "createdAt": "2020-06-26T23:14:07Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0Nzk3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447973", "bodyText": "Will it be better to have a single constructor and mark the input params as @Nuallable", "author": "yzhvictor", "createdAt": "2020-06-26T23:14:33Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODE0Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448142", "bodyText": "I can image these methods can be big, consider moving to their own class?", "author": "yzhvictor", "createdAt": "2020-06-26T23:15:26Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n+    }\n+\n+    public boolean dataFreeVerification() {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0Nzg3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446447878", "bodyText": "Please add some JavaDoc describing the class and its functionality", "author": "Luminarys", "createdAt": "2020-06-26T23:14:02Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryInstance.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.google.bigquery;\n+\n+public class BigQueryInstance {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODI3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448273", "bodyText": "Rather than give these a QV prefix can we change this to be a custom package called verification or query.verification?", "author": "Luminarys", "createdAt": "2020-06-26T23:16:00Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.google.bigquery;\n+\n+public class QVQuery {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODM0OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448348", "bodyText": "Please add JavaDoc", "author": "Luminarys", "createdAt": "2020-06-26T23:16:16Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVQuery.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.google.bigquery;\n+\n+public class QVQuery {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODM5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448391", "bodyText": "Same comments here as QVQuery", "author": "Luminarys", "createdAt": "2020-06-26T23:16:29Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QVSchema.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.google.bigquery;", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODc1MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448750", "bodyText": "Please add some JavaDoc", "author": "Luminarys", "createdAt": "2020-06-26T23:18:20Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0ODk4Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446448986", "bodyText": "Given you're using two ternaries here I think you could just add this line into the verification methods and have them return void", "author": "Luminarys", "createdAt": "2020-06-26T23:19:36Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTAyMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446449021", "bodyText": "This is named like a getter, please change", "author": "Luminarys", "createdAt": "2020-06-26T23:19:49Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n+    }\n+\n+    public boolean dataFreeVerification() {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0OTA0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446449045", "bodyText": "Same here", "author": "Luminarys", "createdAt": "2020-06-26T23:19:55Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {\n+\n+    private QVQuery migratedQuery;\n+    private QVSchema migratedSchema;\n+\n+    private QVQuery originalQuery;\n+    private QVSchema originalSchema;\n+\n+    public QueryVerification() {\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QueryVerification(QVQuery migratedQuery, QVSchema migratedSchema, QVQuery originalQuery, QVSchema originalSchema) {\n+        this.migratedQuery = migratedQuery;\n+        this.migratedSchema = migratedSchema;\n+\n+        this.originalQuery = originalQuery;\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    public QVQuery getMigratedQuery() {\n+        return migratedQuery;\n+    }\n+\n+    public void setMigratedQuery(QVQuery migratedQuery) {\n+        this.migratedQuery = migratedQuery;\n+    }\n+\n+    public QVSchema getMigratedSchema() {\n+        return migratedSchema;\n+    }\n+\n+    public void setMigratedSchema(QVSchema migratedSchema) {\n+        this.migratedSchema = migratedSchema;\n+    }\n+\n+    public QVQuery getOriginalQuery() {\n+        return originalQuery;\n+    }\n+\n+    public void setOriginalQuery(QVQuery originalQuery) {\n+        this.originalQuery = originalQuery;\n+    }\n+\n+    public QVSchema getOriginalSchema() {\n+        return originalSchema;\n+    }\n+\n+    public void setOriginalSchema(QVSchema originalSchema) {\n+        this.originalSchema = originalSchema;\n+    }\n+\n+    /**\n+     * Determines which verification method to use based on provided inputs and prints the result of the query verification.\n+     */\n+    public void verify() {\n+        boolean useDataAwareVerification = originalQuery != null && originalSchema != null;\n+        boolean verificationResult;\n+\n+        if (useDataAwareVerification) {\n+            verificationResult = dataAwareVerification();\n+        } else {\n+            verificationResult = dataFreeVerification();\n+        }\n+\n+        System.out.printf(\"Data-%s Verification %s\\n\", useDataAwareVerification ? \"Aware\" : \"Free\", verificationResult ? \"Succeeded\" : \"Failed\");\n+    }\n+\n+    public boolean dataFreeVerification() {\n+        // TODO Implement data free verification\n+        return false;\n+    }\n+\n+    public boolean dataAwareVerification() {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDg1NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446450854", "bodyText": "I think it might look cleaner if you restructure things so that original/migratedQuery and schema get assigned to some variables at this scope, then create the QueryVerification object using the complete constructor. Then you can remove the setters as well.", "author": "Luminarys", "createdAt": "2020-06-26T23:29:11Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import org.apache.commons.cli.*;\n+\n+public class Main {\n+\n+    /**\n+     * usage: query_verification -q <PATH> <PATH> [-d <PATH>] [-s <PATH> <PATH>]\n+     *        [-h]\n+     *  -q,--query <PATH> <PATH>    First argument is the path to the migrated\n+     *                              query file. Second argument is the path to\n+     *                              the original query file and only required\n+     *                              when data is provided.\n+     *  -d,--data <PATH>            Path for table data in CSV format.\n+     *  -s,--schema <PATH> <PATH>   First argument is the path to the migrated\n+     *                              schema path. Second argument is the path to\n+     *                              the original schema query and is optional.\n+     *                              Referenced files should be in a JSON format.\n+     *  -h,--help                   Print this help screen.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        Main main = new Main();\n+        main.run(args);\n+\n+        System.exit(0);\n+    }\n+\n+    public void run(String[] args) {\n+        CommandLine command = buildCommand(args);\n+        if (command == null) {\n+            return;\n+        }\n+\n+        QueryVerification queryVerification = new QueryVerification();", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDkyNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446450926", "bodyText": "I think we should prefer to call this QueryVerifier", "author": "Luminarys", "createdAt": "2020-06-26T23:29:34Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerification.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.google.bigquery;\n+\n+public class QueryVerification {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MTY3NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/75#discussion_r446451674", "bodyText": "We can make this a static method", "author": "Luminarys", "createdAt": "2020-06-26T23:33:58Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Comparator;\n+\n+import org.apache.commons.cli.*;\n+\n+public class Main {\n+\n+    /**\n+     * usage: query_verification -q <PATH> <PATH> [-d <PATH>] [-s <PATH> <PATH>]\n+     *        [-h]\n+     *  -q,--query <PATH> <PATH>    First argument is the path to the migrated\n+     *                              query file. Second argument is the path to\n+     *                              the original query file and only required\n+     *                              when data is provided.\n+     *  -d,--data <PATH>            Path for table data in CSV format.\n+     *  -s,--schema <PATH> <PATH>   First argument is the path to the migrated\n+     *                              schema path. Second argument is the path to\n+     *                              the original schema query and is optional.\n+     *                              Referenced files should be in a JSON format.\n+     *  -h,--help                   Print this help screen.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        Main main = new Main();\n+        main.run(args);\n+\n+        System.exit(0);\n+    }\n+\n+    public void run(String[] args) {\n+        CommandLine command = buildCommand(args);\n+        if (command == null) {\n+            return;\n+        }\n+\n+        QueryVerification queryVerification = new QueryVerification();\n+\n+        // Query\n+        if (command.hasOption(\"q\")) {\n+            String[] queryOptionValues = command.getOptionValues(\"q\");\n+\n+            if (queryOptionValues.length >= 1) {\n+                String migratedQueryPath = queryOptionValues[0];\n+                QVQuery migratedQuery = new QVQuery(getContentsOfFile(migratedQueryPath), migratedQueryPath);\n+                queryVerification.setMigratedQuery(migratedQuery);\n+            }\n+\n+            if (queryOptionValues.length >= 2) {\n+                String originalQueryPath = queryOptionValues[1];\n+                QVQuery originalQuery = new QVQuery(getContentsOfFile(originalQueryPath), originalQueryPath);\n+                queryVerification.setMigratedQuery(originalQuery);\n+            }\n+        }\n+\n+        // Schema\n+        if (command.hasOption(\"s\")) {\n+            String[] schemaOptionValues = command.getOptionValues(\"s\");\n+\n+            if (schemaOptionValues.length >= 1) {\n+                String migratedSchemaPath = schemaOptionValues[0];\n+                QVSchema migratedSchema = new QVSchema(getContentsOfFile(migratedSchemaPath), migratedSchemaPath);\n+                queryVerification.setMigratedSchema(migratedSchema);\n+            }\n+\n+            if (schemaOptionValues.length >= 2) {\n+                String originalSchemaPath = schemaOptionValues[1];\n+                QVSchema originalSchema = new QVSchema(getContentsOfFile(originalSchemaPath), originalSchemaPath);\n+                queryVerification.setOriginalSchema(originalSchema);\n+            }\n+        }\n+\n+        // Data\n+        if (command.hasOption(\"d\")) {\n+            // TODO Data input for data aware verification\n+        }\n+\n+        queryVerification.verify();\n+    }\n+\n+    /**\n+     * @param args Command Line Arguments\n+     * @return Command parsed from arguments\n+     */\n+    public CommandLine buildCommand(String[] args) {\n+        CommandLineParser parser = new DefaultParser();\n+        Options options = buildOptions();\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        formatter.setOptionComparator(new Comparator<Option>() {\n+            public int compare(Option o1, Option o2) {\n+                if (o1.isRequired() != o2.isRequired())\n+                    return o1.isRequired() ? -1 : 1;\n+                else if (o1.hasArg() != o2.hasArg())\n+                    return o1.hasArg() ? -1 : 1;\n+                else\n+                    return o1.getLongOpt().compareTo(o2.getLongOpt());\n+            }\n+        });\n+\n+        CommandLine command;\n+        try {\n+            command = parser.parse(options, args);\n+        } catch (ParseException e) {\n+            System.out.println(e.getMessage());\n+            formatter.printHelp(\"query_verification\", options, true);\n+            return null;\n+        }\n+\n+        // Help\n+        if (command.hasOption(\"h\")) {\n+            formatter.printHelp(\"query_verification\", options, true);\n+        }\n+\n+        return command;\n+    }\n+\n+    /**\n+     * @return CLI options\n+     */\n+    public Options buildOptions() {\n+        Options options = new Options();\n+\n+        options.addOption(Option.builder(\"q\")\n+                .required(true)\n+                .longOpt(\"query\")\n+                .numberOfArgs(Option.UNLIMITED_VALUES) // Allows for 2 arguments without both being required\n+                .valueSeparator(' ')\n+                .argName(\"PATH> <PATH\") // Appears as \"<PATH> <PATH>\"\n+                .desc(\"First argument is the path to the migrated query file. Second argument is the path to the original query file and only required when data is provided.\")\n+                .build());\n+        options.addOption(Option.builder(\"s\")\n+                .longOpt(\"schema\")\n+                .numberOfArgs(Option.UNLIMITED_VALUES) // Allows for 2 arguments without both being required\n+                .valueSeparator(' ')\n+                .argName(\"PATH> <PATH\") // Appears as \"<PATH> <PATH>\"\n+                .desc(\"First argument is the path to the migrated schema path. Second argument is the path to the original schema query and is optional. Referenced files should be in a JSON format.\")\n+                .build());\n+        options.addOption(Option.builder(\"d\")\n+                .longOpt(\"data\")\n+                .hasArg(true)\n+                .argName(\"PATH\")\n+                .desc(\"Path for table data in CSV format.\")\n+                .build());\n+        options.addOption(Option.builder(\"h\")\n+                .longOpt(\"help\")\n+                .desc(\"Print this help screen.\")\n+                .build());\n+\n+        return options;\n+    }\n+\n+    /**\n+     * Retrieves the text contents from file\n+     *\n+     * @param path The path to the file to be read\n+     * @return Text contents in file\n+     */\n+    public String getContentsOfFile(String path) {", "originalCommit": "d9bfc84dc46b47cd77c29c336d240ad694d2c784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/b1a9d740d2839f8e70a3d6ee64cd4f994e45b57c", "message": "Restructuring and added autovalue", "committedDate": "2020-06-30T20:07:20Z", "type": "commit"}, {"oid": "1dfc15c4b706e089206befca05e4eeb6bd9da513", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1dfc15c4b706e089206befca05e4eeb6bd9da513", "message": "Merge branch 'master' into master", "committedDate": "2020-07-01T17:48:48Z", "type": "commit"}]}