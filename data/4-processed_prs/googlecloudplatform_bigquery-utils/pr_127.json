{"pr_number": 127, "pr_title": "Allen wang314/data generation", "pr_createdAt": "2020-07-31T17:34:18Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127", "timeline": [{"oid": "18f6c8390241948bf839db45eae3148fb8d576ba", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/18f6c8390241948bf839db45eae3148fb8d576ba", "message": "almost done with data generation", "committedDate": "2020-07-31T05:54:19Z", "type": "commit"}, {"oid": "d1ce0ca967e5a098e076ca9e21889afdf5c1d0a8", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d1ce0ca967e5a098e076ca9e21889afdf5c1d0a8", "message": "added initial random data methods to Utils", "committedDate": "2020-07-31T16:47:14Z", "type": "commit"}, {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d5028f2f5811428c5f71a2a2b7a7fb5d61c73504", "message": "finished generation", "committedDate": "2020-07-31T17:29:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMTA2OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463801069", "bodyText": "As this column only need to store data for one kind of dataType, instead of a Column class with arrayList of all the types, please use Generic Class instead.", "author": "Bei-z", "createdAt": "2020-07-31T19:49:19Z", "path": "tools/template_based_query_generation/src/main/java/data/Column.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package data;\n+\n+import parser.Utils;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+\n+public class Column {", "originalCommit": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0NDg2NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463844865", "bodyText": "Deleted the column class and moved the data generation methods to Table. Now the data is store in ArrayList<ArrayList<?>> instead of ArrayList < Column >", "author": "AllenWang314", "createdAt": "2020-07-31T21:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMTA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMjYxNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463802615", "bodyText": "A string with only 0s and 1s does not seem to matches this regex? Consider update this comment.", "author": "Bei-z", "createdAt": "2020-07-31T19:53:10Z", "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -79,6 +81,30 @@ public static String getRandomString(int length) throws IllegalArgumentException\n     return sb.toString();\n   }\n \n+  /**\n+   * Returns a random string with a specified length consisting of 0s and 1s\n+   *\n+   * @param length a nonzero integer specifying the desired length of the generated string\n+   * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length", "originalCommit": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyODc2Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463828766", "bodyText": "changed to '[0|1]*'", "author": "AllenWang314", "createdAt": "2020-07-31T20:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMjYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzA3NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463803074", "bodyText": "Please use space here to fix the style.", "author": "Bei-z", "createdAt": "2020-07-31T19:54:21Z", "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -209,6 +235,127 @@ private static String getOutputDirectory(String directoryName) {\n \n     return map;\n   }\n-\n   // TODO(spoiledhua): refactor IO exception handling\n+\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static int generateRandomIntegerData(DataType dataType) throws IllegalArgumentException {\n+    if (dataType == DataType.SMALL_INT) {\n+      return \trandom.nextInt(-32768,32769);\n+    } else if (dataType == DataType.INTEGER) {\n+      return \trandom.nextInt();\n+    } else if (dataType == DataType.SMALL_SERIAL) {\n+      return \trandom.nextInt(1, 32768);\n+    } else if (dataType == DataType.SERIAL) {\n+      int num = random.nextInt();\n+      if (num == Integer.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);", "originalCommit": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNTkxOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463825918", "bodyText": "fixed!", "author": "AllenWang314", "createdAt": "2020-07-31T20:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzUwMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463803500", "bodyText": "Please use space here to fix the style.", "author": "Bei-z", "createdAt": "2020-07-31T19:55:06Z", "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -209,6 +235,127 @@ private static String getOutputDirectory(String directoryName) {\n \n     return map;\n   }\n-\n   // TODO(spoiledhua): refactor IO exception handling\n+\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static int generateRandomIntegerData(DataType dataType) throws IllegalArgumentException {\n+    if (dataType == DataType.SMALL_INT) {\n+      return \trandom.nextInt(-32768,32769);\n+    } else if (dataType == DataType.INTEGER) {\n+      return \trandom.nextInt();\n+    } else if (dataType == DataType.SMALL_SERIAL) {\n+      return \trandom.nextInt(1, 32768);\n+    } else if (dataType == DataType.SERIAL) {\n+      int num = random.nextInt();\n+      if (num == Integer.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);\n+      }\n+    } else {\n+      throw new IllegalArgumentException(\"dataType cannot be represented by an int type\");\n+    }\n+  }\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static long generateRandomLongData(DataType dataType) {\n+    if (dataType == DataType.BIG_INT) {\n+      return \trandom.nextLong();\n+    } else if (dataType == DataType.BIG_SERIAL) {\n+      long num = random.nextLong();\n+      if (num == Long.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);", "originalCommit": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNTg4MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463825880", "bodyText": "fixed!", "author": "AllenWang314", "createdAt": "2020-07-31T20:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzUwMA=="}], "type": "inlineReview"}, {"oid": "b973b687d0bc6573c09954a95984d1e4a2e5e9ae", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/b973b687d0bc6573c09954a95984d1e4a2e5e9ae", "message": "added random date and time generation", "committedDate": "2020-07-31T20:33:14Z", "type": "commit"}, {"oid": "ced14fd46905d87adc88f9a8c085ea2c0c38345a", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ced14fd46905d87adc88f9a8c085ea2c0c38345a", "message": "addressed quick fixes", "committedDate": "2020-07-31T20:46:20Z", "type": "commit"}, {"oid": "f15df682543cbab4a2836236eccc467167978518", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f15df682543cbab4a2836236eccc467167978518", "message": "deleted column and added data and column generation to Table", "committedDate": "2020-07-31T21:09:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMzkwOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r464113908", "bodyText": "Should we still use ArrayList here?", "author": "Bei-z", "createdAt": "2020-08-02T19:23:13Z", "path": "tools/template_based_query_generation/src/main/java/token/Tokenizer.java", "diffHunk": "@@ -200,11 +211,34 @@ private void generateInsertExp(Token token) {\n   }\n \n   /**\n-   * TODO: needs a function to generate a few rows of data to insert into table\n+   * TODO: fix with Utils string builder to increase efficiency\n+   * sets token to be a values expression\n    * @param token\n    */\n   private void generateValuesExp(Token token) {\n-\n+    int placeHolder = generateNextPlaceHolder(token.getTokenInfo().getTokenType());\n+    int numRows = r.nextInt(this.maxNumColumnsValues) + 1;\n+    ArrayList<Column> values = this.table.generateData(numRows);", "originalCommit": "f15df682543cbab4a2836236eccc467167978518", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNDY0NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r464524644", "bodyText": "Yes, fixed this. Writing up some manual tests and pushing afterwards", "author": "AllenWang314", "createdAt": "2020-08-03T16:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMzkwOA=="}], "type": "inlineReview"}, {"oid": "3b694cc14311946dd780d4b980f96d58ca7c5615", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/3b694cc14311946dd780d4b980f96d58ca7c5615", "message": "made changes to address comments", "committedDate": "2020-08-03T16:31:58Z", "type": "commit"}, {"oid": "aeb2ec206c0e403762aa6a6d2444ea8f08b7f6bf", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/aeb2ec206c0e403762aa6a6d2444ea8f08b7f6bf", "message": "Merge branch 'master' into AllenWang314/data-generation", "committedDate": "2020-08-03T16:33:08Z", "type": "commit"}]}