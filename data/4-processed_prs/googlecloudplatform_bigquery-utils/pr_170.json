{"pr_number": 170, "pr_title": "Auto Query Fixer: Implement ExtractFunctionRange, LocateTableRanges, GetAllKeywords methods in ZetaSQL Helper server", "pr_createdAt": "2020-08-31T21:46:15Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170", "timeline": [{"oid": "8892fcaa8f0a6dcbe1fee6cef91cf4435e1fe9f1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8892fcaa8f0a6dcbe1fee6cef91cf4435e1fe9f1", "message": "Develop ExtractFunctionRange and LocateTableRanges methods\nRPC calls are added\nTest cases are included.", "committedDate": "2020-08-31T21:31:12Z", "type": "commit"}, {"oid": "aab4f4e858bea71ef98bca5f597effee94dcbffe", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/aab4f4e858bea71ef98bca5f597effee94dcbffe", "message": "License", "committedDate": "2020-08-31T21:46:00Z", "type": "commit"}, {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8c237f5ed77af698740d346cabe4d16a3c9df6de", "message": "Minor fix", "committedDate": "2020-08-31T21:49:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Mzk0Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480473942", "bodyText": "why const pointer? if you don't expect to change the request, we should use const reference.", "author": "kikkyo", "createdAt": "2020-08-31T23:36:39Z", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4Mjc2Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480482762", "bodyText": "Good point. Changed to reference.", "author": "mingen-pan", "createdAt": "2020-09-01T00:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Mzk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NDA2Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480474062", "bodyText": "nit: ExtractFunctionRangeResponse* response", "author": "kikkyo", "createdAt": "2020-08-31T23:37:04Z", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4Mjc5OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480482798", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-09-01T00:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NDA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NDYyMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480474623", "bodyText": "why return status separately? if error occurs, should it return at line 44? or there could be cases line 44 is ok but getting status() is not ok?", "author": "kikkyo", "createdAt": "2020-08-31T23:39:08Z", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {\n+\n+  std::unique_ptr<::bigquery::utils::zetasql_helper::FunctionRange> output;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::ExtractFunctionRange(\n+          request->query(), request->line_number(), request->column_number(), &output\n+      ));\n+\n+  auto status_or_function_range_proto = output->ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_range_proto.status());", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4MzM4OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480483389", "bodyText": "Yes. Line 44 makes sure the ExtractFunctionRange is correct. Then we get a FunctionRange object. Then we need to serialize it to proto, which is line 50. Here may  occur errors.", "author": "mingen-pan", "createdAt": "2020-09-01T00:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NDYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTEwOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480475108", "bodyText": "you can use unique_ptr ?", "author": "kikkyo", "createdAt": "2020-08-31T23:40:42Z", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {\n+\n+  std::unique_ptr<::bigquery::utils::zetasql_helper::FunctionRange> output;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::ExtractFunctionRange(\n+          request->query(), request->line_number(), request->column_number(), &output\n+      ));\n+\n+  auto status_or_function_range_proto = output->ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_range_proto.status());\n+\n+  // Convert the proto to heap value and hand over the ownership to the response.\n+  auto function_range_proto = new ::bigquery::utils::zetasql_helper::FunctionRangeProto(\n+      status_or_function_range_proto.value()", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4NDgzNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480484834", "bodyText": "I think this is how proto specifies the ownership - assign a pointer to its field. The child pointer will be released automatically when the owner is released. We don't need the unique_ptr here.", "author": "mingen-pan", "createdAt": "2020-09-01T00:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTcxMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480475711", "bodyText": "pass by reference", "author": "kikkyo", "createdAt": "2020-08-31T23:42:46Z", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {\n+\n+  std::unique_ptr<::bigquery::utils::zetasql_helper::FunctionRange> output;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::ExtractFunctionRange(\n+          request->query(), request->line_number(), request->column_number(), &output\n+      ));\n+\n+  auto status_or_function_range_proto = output->ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_range_proto.status());\n+\n+  // Convert the proto to heap value and hand over the ownership to the response.\n+  auto function_range_proto = new ::bigquery::utils::zetasql_helper::FunctionRangeProto(\n+      status_or_function_range_proto.value()\n+  );\n+  response->set_allocated_function_range(function_range_proto);\n+  return absl::OkStatus();\n+}\n+\n+absl::Status ZetaSqlHelperLocalServiceImpl::LocateTableRanges(const LocateTableRangesRequest *request,\n+                                                              LocateTableRangesResponse *response) {", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUwMDM5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480500393", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-09-01T00:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjA3Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480476072", "bodyText": "Please add comment to the proto below.", "author": "kikkyo", "createdAt": "2020-08-31T23:44:04Z", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.proto", "diffHunk": "@@ -36,4 +47,33 @@ message TokenizeRequest {\n \n message TokenizeResponse {\n   repeated ParseTokenProto parse_token = 1;\n+}", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUxODc1NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480518754", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-09-01T00:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjM5NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480476395", "bodyText": "nit: GetAllKeywordsRequest? method name GetAllKeywords?", "author": "kikkyo", "createdAt": "2020-08-31T23:45:07Z", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_grpc.h", "diffHunk": "@@ -30,6 +30,17 @@ class ZetaSqlHelperLocalServiceGrpcImpl : public ZetaSqlHelperLocalService::Serv\n   grpc::Status Tokenize(grpc::ServerContext *context, const TokenizeRequest *req,\n                         TokenizeResponse *resp) override;\n \n+  grpc::Status ExtractFunctionRange(grpc::ServerContext *context, const ExtractFunctionRangeRequest *request,\n+                                    ExtractFunctionRangeResponse *response) override;\n+\n+  grpc::Status LocateTableRanges(grpc::ServerContext *context,\n+                                 const LocateTableRangesRequest *request,\n+                                 LocateTableRangesResponse *response) override;\n+\n+  grpc::Status AllKeywords(grpc::ServerContext *context,", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyMjg5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480522891", "bodyText": "Yes, I have changed them all to GetAllKeywords", "author": "mingen-pan", "createdAt": "2020-09-01T01:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Njc0MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480476740", "bodyText": "pass by reference if ready only :)", "author": "kikkyo", "createdAt": "2020-08-31T23:46:20Z", "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyMzI4Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480523283", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-09-01T01:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Njc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3ODg0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480478845", "bodyText": "nit: const auto& argument_range: ....", "author": "kikkyo", "createdAt": "2020-08-31T23:53:11Z", "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ4NjAyNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480486024", "bodyText": "Just realized the formatter will concat the & and * with the variable..", "author": "mingen-pan", "createdAt": "2020-09-01T00:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3ODg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTA3Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479077", "bodyText": "nit: zetasql::ASTNode* node", "author": "kikkyo", "createdAt": "2020-08-31T23:53:59Z", "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {\n+\n+    auto status_or_argument_proto = argument_range.ToProto();\n+    ZETASQL_RETURN_IF_ERROR(status_or_argument_proto.status());\n+    proto.add_arguments()->CopyFrom(status_or_argument_proto.value());\n+  }\n+\n+  return proto;\n+}\n+\n+\n+absl::Status ExtractFunctionRange(absl::string_view query,\n+                                  int row,\n+                                  int column,\n+                                  std::unique_ptr<FunctionRange> *output) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  auto offset = get_offset(query, row, column);\n+  auto predicator = [offset](const zetasql::ASTNode *node) {\n+    return node->GetParseLocationRange().start().GetByteOffset() == offset &&", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyNDI5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480524290", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-09-01T01:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTE4MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479181", "bodyText": "nit: ASTFunctionCall*", "author": "kikkyo", "createdAt": "2020-08-31T23:54:18Z", "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {\n+\n+    auto status_or_argument_proto = argument_range.ToProto();\n+    ZETASQL_RETURN_IF_ERROR(status_or_argument_proto.status());\n+    proto.add_arguments()->CopyFrom(status_or_argument_proto.value());\n+  }\n+\n+  return proto;\n+}\n+\n+\n+absl::Status ExtractFunctionRange(absl::string_view query,\n+                                  int row,\n+                                  int column,\n+                                  std::unique_ptr<FunctionRange> *output) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  auto offset = get_offset(query, row, column);\n+  auto predicator = [offset](const zetasql::ASTNode *node) {\n+    return node->GetParseLocationRange().start().GetByteOffset() == offset &&\n+        node->node_kind() == zetasql::ASTNodeKind::AST_FUNCTION_CALL;\n+  };\n+\n+  auto candidate = find_node(parser_output->statement(), predicator);\n+  if (candidate == nullptr) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Line and/or column numbers are incorrect\");\n+  }\n+\n+  auto function_call = dynamic_cast<const zetasql::ASTFunctionCall *>(candidate);", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyNDE5OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480524199", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-09-01T01:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTMxMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479311", "bodyText": "nit:", "author": "kikkyo", "createdAt": "2020-08-31T23:54:46Z", "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.h", "diffHunk": "@@ -0,0 +1,60 @@\n+//\n+// Created by mepan on 8/22/20.\n+//\n+\n+#ifndef ZETASQL_HELPER_ZETASQL_HELPER_FUNCTION_LOCATE_FUNCTION_H_\n+#define ZETASQL_HELPER_ZETASQL_HELPER_FUNCTION_LOCATE_FUNCTION_H_\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"zetasql/public/parse_location.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+#include \"zetasql_helper/scanner/function_range.pb.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// A struct to store the range of different components of a function. It includes the range\n+// of the whole function, the name, and each arguments.\n+struct FunctionRange {\n+  zetasql::ParseLocationRange function;\n+  zetasql::ParseLocationRange name;\n+  std::vector<zetasql::ParseLocationRange> arguments;\n+\n+  FunctionRange(const zetasql::ASTFunctionCall *function_call);\n+", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTQ2NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479465", "bodyText": "nit: delete the line?", "author": "kikkyo", "createdAt": "2020-08-31T23:55:10Z", "path": "tools/zetasql_helper/zetasql_helper/scanner/scanner_test.cc", "diffHunk": "@@ -0,0 +1,76 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"gtest/gtest.h\"\n+#include \"zetasql_helper/scanner/locate_table.h\"\n+#include \"zetasql_helper/scanner/extract_function.h\"\n+\n+using namespace bigquery::utils::zetasql_helper;\n+\n+class LocationTest : public ::testing::Test {\n+\n+};\n+\n+TEST_F(LocationTest, LocateTableTest1) {\n+  std::string query =\n+      \"SELECT `\u7279\u6b8a\u5b57\u7b26 (unicode characters)`, status FROM bigquery-public-data.`austin_311.311_request`\"\n+      \"cross join `austin_311`.311_request\\n\"\n+      \"where status = '`bigquery-public-data.austin_311.311_request`'\";\n+\n+  std::string table_regex = \"(bigquery-public-data.)?austin_311.311_request\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(2, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())\n+}\n+\n+std::string range_to_string(absl::string_view query, zetasql::ParseLocationRange &range) {\n+  auto start = range.start().GetByteOffset();\n+  auto length = range.end().GetByteOffset() - range.start().GetByteOffset();\n+  return std::string(query.substr(start, length));\n+}\n+\n+TEST_F(LocationTest, LocateTableTest2) {\n+  std::string query = \"Select max(foo) from bigquery-public-data.mock.survey_2017 group by bar limit 10\";\n+  std::string table_regex = \"bigquery-public-data\\\\.mock\\\\.survey_2017\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(1, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyODY2NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480528664", "bodyText": "I have changed it to two new EXPECT_EQ", "author": "mingen-pan", "createdAt": "2020-09-01T01:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTUyOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479529", "bodyText": "nit: delete the line?", "author": "kikkyo", "createdAt": "2020-08-31T23:55:21Z", "path": "tools/zetasql_helper/zetasql_helper/scanner/scanner_test.cc", "diffHunk": "@@ -0,0 +1,76 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"gtest/gtest.h\"\n+#include \"zetasql_helper/scanner/locate_table.h\"\n+#include \"zetasql_helper/scanner/extract_function.h\"\n+\n+using namespace bigquery::utils::zetasql_helper;\n+\n+class LocationTest : public ::testing::Test {\n+\n+};\n+\n+TEST_F(LocationTest, LocateTableTest1) {\n+  std::string query =\n+      \"SELECT `\u7279\u6b8a\u5b57\u7b26 (unicode characters)`, status FROM bigquery-public-data.`austin_311.311_request`\"\n+      \"cross join `austin_311`.311_request\\n\"\n+      \"where status = '`bigquery-public-data.austin_311.311_request`'\";\n+\n+  std::string table_regex = \"(bigquery-public-data.)?austin_311.311_request\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(2, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())", "originalCommit": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bee5debed0ad8065f23dee190b936fd4adcd358d", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/bee5debed0ad8065f23dee190b936fd4adcd358d", "message": "Fix some syntax", "committedDate": "2020-09-01T01:08:35Z", "type": "commit"}, {"oid": "ed6d44149c278db74172281b6ad2e96045648892", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ed6d44149c278db74172281b6ad2e96045648892", "message": "Merge branch 'master' into zetasql_helper_server", "committedDate": "2020-09-02T20:24:00Z", "type": "commit"}]}