{"pr_number": 100, "pr_title": "Auto Query Fixer: add a new method to the BigQueryService component.", "pr_createdAt": "2020-07-15T00:04:12Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100", "timeline": [{"oid": "a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "message": "init a project\ncreate and test a QueryTokenService", "committedDate": "2020-06-25T02:06:24Z", "type": "commit"}, {"oid": "0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "message": "reformat the code\nAdd comments", "committedDate": "2020-06-30T21:11:52Z", "type": "commit"}, {"oid": "0ebc50fab3773e85f8b30490392fce784f714f88", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0ebc50fab3773e85f8b30490392fce784f714f88", "message": "rename the package name to 'queryfixer'\n\nadd documents for classes", "committedDate": "2020-07-01T01:45:14Z", "type": "commit"}, {"oid": "eccb3d14310ca239e761705b5cab3c7c36768ff5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/eccb3d14310ca239e761705b5cab3c7c36768ff5", "message": "decompose the PR into multiple parts.\nThis is the first part: init the project and implement one feature of the QueryTokenProcessor", "committedDate": "2020-07-07T00:11:26Z", "type": "commit"}, {"oid": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "message": "minor change in BigQueryParserFactory", "committedDate": "2020-07-07T00:39:55Z", "type": "commit"}, {"oid": "cd47ab9d336640ffccccd762a54e7fa3058fb4ba", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cd47ab9d336640ffccccd762a54e7fa3058fb4ba", "message": "add BigQueryService", "committedDate": "2020-07-08T20:08:21Z", "type": "commit"}, {"oid": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8b86a8e36bd784a29c6e7357ff786036a77b80bf", "message": "revise the review", "committedDate": "2020-07-09T18:43:35Z", "type": "commit"}, {"oid": "7f907074ad2175483fa52068793fbafe3baf970e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7f907074ad2175483fa52068793fbafe3baf970e", "message": "minor fix", "committedDate": "2020-07-11T00:19:20Z", "type": "commit"}, {"oid": "5fc21d436af780f16ed51e00bb3b00c2509b0f4e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5fc21d436af780f16ed51e00bb3b00c2509b0f4e", "message": "Merge branch 'mepan_init' into master", "committedDate": "2020-07-11T00:26:03Z", "type": "commit"}, {"oid": "2c41e10f848ea306e0d10842bfa3e05592798b7e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2c41e10f848ea306e0d10842bfa3e05592798b7e", "message": "Merge branch 'master' into mepan_add_bq_server", "committedDate": "2020-07-11T00:49:36Z", "type": "commit"}, {"oid": "cf3f6c4eafc7c91b8c0172ce82d1ff8566968d19", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cf3f6c4eafc7c91b8c0172ce82d1ff8566968d19", "message": "Minor change", "committedDate": "2020-07-14T23:12:20Z", "type": "commit"}, {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a99d4fd7dcaa9f09862abaf20741242986a5af97", "message": "Add the `listTables` method to the BigQueryService", "committedDate": "2020-07-14T23:33:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjE3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455452178", "bodyText": "check not null?", "author": "kikkyo", "createdAt": "2020-07-16T01:13:05Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjY0OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455892649", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-16T15:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1Mjg4NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455452884", "bodyText": "nit: You can just  .build() here.", "author": "kikkyo", "createdAt": "2020-07-16T01:15:43Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjY5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455892690", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-16T15:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1Mjg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjkzNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455452936", "bodyText": "nit: Return", "author": "kikkyo", "createdAt": "2020-07-16T01:15:56Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjgxNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455892815", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-16T15:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MzkwNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455453904", "bodyText": "I think normally we don't indicate if exception is caught or thrown  \"catException..\" in the method name. This method can be called \"dryRun\" - the other method can be merged together here.\nI don't quite understand why you want to catch and return? You can just throw it.", "author": "kikkyo", "createdAt": "2020-07-16T01:19:45Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NTI1Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455895257", "bodyText": "The error message of dry run is embed in this exception. The auto fixer actually needs the exception rather than the result of dry run.", "author": "mingen-pan", "createdAt": "2020-07-16T15:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MzkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NDI5Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455454297", "bodyText": "nit: The line break looks weird. I think you should not hit \"new line\" manually when typing otherwise after reformatting it would look weird :).", "author": "kikkyo", "createdAt": "2020-07-16T01:21:13Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {\n+    try {\n+      dryRun(query);\n+    } catch (BigQueryException exception) {\n+      return exception;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project and/or dataset do", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNTUxOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455915518", "bodyText": "I rerun it. It seems auto format will break every 100 char", "author": "mingen-pan", "createdAt": "2020-07-16T16:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NDI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTE0NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455455144", "bodyText": "How many tables can be returned at maximum?  If there are 10k+  tables, how long does it take roughly?", "author": "kikkyo", "createdAt": "2020-07-16T01:24:17Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {\n+    try {\n+      dryRun(query);\n+    } catch (BigQueryException exception) {\n+      return exception;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project and/or dataset do\n+   * not exist or not visible to the provided service account, {@link com.google.cloud.bigquery.BigQueryException} will\n+   * be thrown.\n+   * @param projectId project id\n+   * @param datasetId dataset id\n+   * @return list of table names belonging to the given project and dataset\n+   */\n+  public List<String> listTableNames(String projectId, String datasetId) throws BigQueryException {\n+    DatasetId projectDatasetId = DatasetId.of(projectId, datasetId);\n+    Page<Table> tables = bigquery.listTables(projectDatasetId);", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwNjY1Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455906653", "bodyText": "Given the page structure, it can download as many as it can if we use call nextPage. Here to make it simple, I will add an constraint to allow this method to only fetch max 1000 tables. Given a Table only contains name information if not reloaded, so the traffic shouldn't be heavy.", "author": "mingen-pan", "createdAt": "2020-07-16T16:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTc2OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455455768", "bodyText": "What does it mean here? Where do we read in the credentials?", "author": "kikkyo", "createdAt": "2020-07-16T01:26:31Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwODc4NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455908784", "bodyText": "This method requires connection with BigQuery server.\nUses can call gcloud auth application-default login and the credential will stored in the default path, which will be read by this method.\nHowever, uses can download a service account credential and put it elsewhere. If this is the case, they need to modify the test cases manually.\nI will put this demonstration in the comment", "author": "mingen-pan", "createdAt": "2020-07-16T16:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNjg4Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455916882", "bodyText": "It is also possible to mock the BigQuery server, but I am not sure how long it will take. I guess connecting to real BigQuery and uses the public datasets may be an convenient way to test?", "author": "mingen-pan", "createdAt": "2020-07-16T16:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTk1Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455455953", "bodyText": "dryRun_success", "author": "kikkyo", "createdAt": "2020-07-16T01:27:12Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**\n+   * Please modify this method if your BigQuery credential is not at default path or you would like\n+   * to use other options.\n+   *\n+   * @return a default BigQuery options\n+   */\n+  private BigQueryOptions getOptions() {\n+    String projectId = \"sql-gravity-internship\";\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder().setProjectId(projectId);\n+    return builder.build();\n+  }\n+\n+  @Before\n+  public void getService() {\n+    service = new BigQueryService(getOptions());\n+  }\n+\n+  @Test\n+  public void dryRun1() {", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NjE3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455456173", "bodyText": "If you want to test different cases for the same flow, consider using parameterized test, we should avoid using dryRun1, dryRun2, dryRun3...", "author": "kikkyo", "createdAt": "2020-07-16T01:27:57Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**\n+   * Please modify this method if your BigQuery credential is not at default path or you would like\n+   * to use other options.\n+   *\n+   * @return a default BigQuery options\n+   */\n+  private BigQueryOptions getOptions() {\n+    String projectId = \"sql-gravity-internship\";\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder().setProjectId(projectId);\n+    return builder.build();\n+  }\n+\n+  @Before\n+  public void getService() {\n+    service = new BigQueryService(getOptions());\n+  }\n+\n+  @Test\n+  public void dryRun1() {\n+    String query =\n+        \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n+    Job job = service.dryRun(query);\n+    JobStatistics.QueryStatistics statistics = job.getStatistics();\n+    FieldList fields = statistics.getSchema().getFields();\n+    assertEquals(\"corpus\", fields.get(0).getName());\n+  }\n+\n+  @Test\n+  public void dryRun2() {\n+    String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespearex`\";\n+    BigQueryException exception = service.catchExceptionFromDryRun(query);\n+    assertNotNull(exception);\n+    assertEquals(\"Not found: Table\", exception.getMessage().substring(0, 16));\n+  }", "originalCommit": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NjY4NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455456685", "bodyText": "https://www.tutorialspoint.com/junit/junit_parameterized_test.htm", "author": "kikkyo", "createdAt": "2020-07-16T01:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NjE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMzA5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455913093", "bodyText": "Thanks for providing this.", "author": "mingen-pan", "createdAt": "2020-07-16T16:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NjE3Mw=="}], "type": "inlineReview"}, {"oid": "4b001eae137df2d528d4c2abc7dbdd4b62a49693", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/4b001eae137df2d528d4c2abc7dbdd4b62a49693", "message": "refactor the code based on review", "committedDate": "2020-07-16T16:27:15Z", "type": "commit"}, {"oid": "031c6962bc4ae5e369edea681aa239c67f27d56d", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/031c6962bc4ae5e369edea681aa239c67f27d56d", "message": "Merge remote-tracking branch 'upstream/master' into bq_service_add_feature\n\n# Conflicts:\n#\ttools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java\n#\ttools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "committedDate": "2020-07-17T17:35:08Z", "type": "commit"}, {"oid": "490879957727af10494879d3cb871a4c446d9f89", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/490879957727af10494879d3cb871a4c446d9f89", "message": "mock the BigQuery", "committedDate": "2020-07-18T01:30:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTAwOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457605009", "bodyText": "Its recommended to use UPPER_SNAKE_CASE for constant variable names. \"TABLE_FETCH_SIZE\"", "author": "kikkyo", "createdAt": "2020-07-20T18:21:43Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -1,52 +1,69 @@\n package com.google.cloud.bigquery.utils.queryfixer.service;\n \n+import com.google.api.gax.paging.Page;\n import com.google.cloud.bigquery.BigQuery;\n import com.google.cloud.bigquery.BigQueryException;\n import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n import com.google.cloud.bigquery.Job;\n import com.google.cloud.bigquery.JobInfo;\n import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import lombok.NonNull;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A service to connect with the BigQuery server. It is used to communicate with the server like\n  * sending queries and receiving data.\n- * */\n+ */\n public class BigQueryService {\n \n-  private final BigQuery bigquery;\n+  private static final int TableFetchSize = 1000;", "originalCommit": "490879957727af10494879d3cb871a4c446d9f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5OTkzNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457699936", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-20T21:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNjg3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457606873", "bodyText": "1000 seems a bit small.. :) Maybe you can adjust this later.", "author": "kikkyo", "createdAt": "2020-07-20T18:25:11Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -59,4 +76,29 @@ public BigQueryException catchExceptionFromDryRun(String query) {\n \n     return null;\n   }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project\n+   * and/or dataset do not exist or not visible to the provided service account, {@link\n+   * com.google.cloud.bigquery.BigQueryException} will be thrown.\n+   *\n+   * <p>It is possible that a dataset contains a large amount of tables, so this method will only\n+   * fetch maximum 1000 of them.", "originalCommit": "490879957727af10494879d3cb871a4c446d9f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MDQxMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457650410", "bodyText": "Yes, I think I can make it as an optional argument later for users to specify.", "author": "mingen-pan", "createdAt": "2020-07-20T19:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNjg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODE5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457608191", "bodyText": "I don't the \"param\" comment make many sense so far(they are mostly self-explanary), as seen from other methods. Later you can just keep the comment of the method but leave out the comments for the params.", "author": "kikkyo", "createdAt": "2020-07-20T18:27:37Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -59,4 +76,29 @@ public BigQueryException catchExceptionFromDryRun(String query) {\n \n     return null;\n   }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project\n+   * and/or dataset do not exist or not visible to the provided service account, {@link\n+   * com.google.cloud.bigquery.BigQueryException} will be thrown.\n+   *\n+   * <p>It is possible that a dataset contains a large amount of tables, so this method will only\n+   * fetch maximum 1000 of them.\n+   *\n+   * @param projectId project id", "originalCommit": "490879957727af10494879d3cb871a4c446d9f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1MDg4MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457650880", "bodyText": "Sounds good!", "author": "mingen-pan", "createdAt": "2020-07-20T19:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODcyMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457608721", "bodyText": "what if you set the \"parallel= true\", can you add a comment why you decided to set it to false and when we have to set it to true?", "author": "kikkyo", "createdAt": "2020-07-20T18:28:35Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -59,4 +76,29 @@ public BigQueryException catchExceptionFromDryRun(String query) {\n \n     return null;\n   }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project\n+   * and/or dataset do not exist or not visible to the provided service account, {@link\n+   * com.google.cloud.bigquery.BigQueryException} will be thrown.\n+   *\n+   * <p>It is possible that a dataset contains a large amount of tables, so this method will only\n+   * fetch maximum 1000 of them.\n+   *\n+   * @param projectId project id\n+   * @param datasetId dataset id\n+   * @return list of table names belonging to the given project and dataset\n+   */\n+  public List<String> listTableNames(String projectId, String datasetId) throws BigQueryException {\n+    DatasetId projectDatasetId = DatasetId.of(projectId, datasetId);\n+    Page<Table> tables =\n+        bigQuery.listTables(projectDatasetId, BigQuery.TableListOption.pageSize(TableFetchSize));\n+    return StreamSupport.stream(tables.iterateAll().spliterator(), /* parallel= */ false)", "originalCommit": "490879957727af10494879d3cb871a4c446d9f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5OTg4Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457699887", "bodyText": "Comment is added", "author": "mingen-pan", "createdAt": "2020-07-20T21:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwOTkwMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457609900", "bodyText": "Since the service is going to be shared, we should init the variable before all tests starts and use mock annotation.", "author": "kikkyo", "createdAt": "2020-07-20T18:30:21Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -42,11 +54,85 @@ public void dryRun1() {\n   }\n \n   @Test\n-  public void dryRun2() {\n-    BigQueryService service = getService();\n+  public void dryRun_tableNotFound() {\n     String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespearex`\";\n     BigQueryException exception = service.catchExceptionFromDryRun(query);\n     assertNotNull(exception);\n     assertEquals(\"Not found: Table\", exception.getMessage().substring(0, 16));\n   }\n+\n+  @Test\n+  public void listTables() {\n+    String project = \"bigquery-public-data\";\n+    String dataset = \"austin_311\";\n+    List<String> tables = service.listTableNames(project, dataset);\n+    assertEquals(2, tables.size());\n+    assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n+  }\n+\n+  /**\n+   * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n+   * the {@link BigQueryService}.\n+   */\n+  private void fakeBigQuery() {\n+    BigQuery bigQuery = mock(BigQuery.class);", "originalCommit": "490879957727af10494879d3cb871a4c446d9f89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxMDIxNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457610214", "bodyText": "use \"@mock\" instead of mock()", "author": "kikkyo", "createdAt": "2020-07-20T18:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwOTkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2OTM1Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457669352", "bodyText": "Here may not be a good place to use @mock. BigQuery object will be injected into the BigQueryService field, which will be shared by different tests. The BigQuery object will be only mocked once in the beginning, because it is only called by the @Before method.", "author": "mingen-pan", "createdAt": "2020-07-20T20:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwOTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5OTE2NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457699164", "bodyText": "Why you need to mock this simple object? you can create a default instance job instance", "author": "kikkyo", "createdAt": "2020-07-20T21:22:13Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -69,4 +69,70 @@ public void listTables() {\n     assertEquals(2, tables.size());\n     assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n   }\n+\n+  /**\n+   * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n+   * the {@link BigQueryService}.\n+   */\n+  private void fakeBigQuery() {\n+    BigQuery bigQuery = mock(BigQuery.class);\n+    correctShakespeare(bigQuery);\n+    incorrectShakespeare(bigQuery);\n+    fakeTables(bigQuery);\n+    try {\n+      FieldUtils.writeField(service, \"bigQuery\", bigQuery, true);\n+    } catch (IllegalAccessException ignored) {\n+    }\n+  }\n+\n+  /**\n+   * Mock the response of dry run if \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare`\n+   * GROUP BY corpus limit 1000\" is given.\n+   */\n+  private void correctShakespeare(BigQuery bigQuery) {\n+    String query =\n+        \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n+    QueryJobConfiguration queryConfig =\n+        QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+\n+    Job job = mock(Job.class);", "originalCommit": "490879957727af10494879d3cb871a4c446d9f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5OTY1Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457699657", "bodyText": "Same there, just use a default instance. We usually don't mock out these simple objects.", "author": "kikkyo", "createdAt": "2020-07-20T21:23:07Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -69,4 +69,70 @@ public void listTables() {\n     assertEquals(2, tables.size());\n     assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n   }\n+\n+  /**\n+   * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n+   * the {@link BigQueryService}.\n+   */\n+  private void fakeBigQuery() {\n+    BigQuery bigQuery = mock(BigQuery.class);\n+    correctShakespeare(bigQuery);\n+    incorrectShakespeare(bigQuery);\n+    fakeTables(bigQuery);\n+    try {\n+      FieldUtils.writeField(service, \"bigQuery\", bigQuery, true);\n+    } catch (IllegalAccessException ignored) {\n+    }\n+  }\n+\n+  /**\n+   * Mock the response of dry run if \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare`\n+   * GROUP BY corpus limit 1000\" is given.\n+   */\n+  private void correctShakespeare(BigQuery bigQuery) {\n+    String query =\n+        \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n+    QueryJobConfiguration queryConfig =\n+        QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+\n+    Job job = mock(Job.class);\n+    JobStatistics.QueryStatistics queryStatistics = mock(JobStatistics.QueryStatistics.class);", "originalCommit": "490879957727af10494879d3cb871a4c446d9f89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "654c74fd69d1a606f20be9c841ebb46dece72119", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/654c74fd69d1a606f20be9c841ebb46dece72119", "message": "reformat the mock test", "committedDate": "2020-07-21T01:29:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1Njg5OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r458556899", "bodyText": "nit: /* blahcomment = true*/", "author": "kikkyo", "createdAt": "2020-07-22T06:11:53Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -30,109 +31,105 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.mockito.Mockito.any;\n-import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class BigQueryServiceTest {\n \n   private BigQueryService service;\n \n+  private static final String FIELD = \"corpus\";\n+  private static final String TABLE_NOT_FOUND =\n+      \"Not found: Table bigquery-public-data:samples.shakespearex was not found in location US\";\n+  private static final String TABLE_1 = \"311_request\";\n+  private static final String TABLE_2 = \"311_service_requests\";\n+\n+  @Mock\n+  BigQuery bigQueryMock;\n+  @Mock\n+  Job jobMock;\n+  @Mock\n+  JobStatistics.QueryStatistics queryStatisticsMock;\n+  @Mock\n+  Page<Table> tablePageMock;\n+  @Mock\n+  Table tableMock1;\n+  @Mock\n+  Table tableMock2;\n+\n   @Before\n-  public void getService() {\n+  public void setup() {\n+    MockitoAnnotations.initMocks(this);\n     service = new BigQueryService(\"\");\n-    fakeBigQuery();\n+    injectBigQueryMockIntoService();\n   }\n \n   @Test\n   public void dryRun_success() {\n+    setupBigQueryMock_returnSchema();\n     String query =\n         \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n     Job job = service.dryRun(query);\n     JobStatistics.QueryStatistics statistics = job.getStatistics();\n     FieldList fields = statistics.getSchema().getFields();\n-    assertEquals(\"corpus\", fields.get(0).getName());\n+    assertEquals(FIELD, fields.get(0).getName());\n   }\n \n   @Test\n   public void dryRun_tableNotFound() {\n+    setupBigQueryMock_throwException();\n     String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespearex`\";\n     BigQueryException exception = service.catchExceptionFromDryRun(query);\n     assertNotNull(exception);\n-    assertEquals(\"Not found: Table\", exception.getMessage().substring(0, 16));\n+    assertEquals(TABLE_NOT_FOUND, exception.getMessage());\n   }\n \n   @Test\n   public void listTables() {\n+    setupBigQueryMock_returnTablePageMock();\n     String project = \"bigquery-public-data\";\n     String dataset = \"austin_311\";\n     List<String> tables = service.listTableNames(project, dataset);\n     assertEquals(2, tables.size());\n-    assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n+    assertThat(tables, contains(TABLE_1, TABLE_2));\n   }\n \n   /**\n    * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n    * the {@link BigQueryService}.\n    */\n-  private void fakeBigQuery() {\n-    BigQuery bigQuery = mock(BigQuery.class);\n-    correctShakespeare(bigQuery);\n-    incorrectShakespeare(bigQuery);\n-    fakeTables(bigQuery);\n+  private void injectBigQueryMockIntoService() {\n     try {\n-      FieldUtils.writeField(service, \"bigQuery\", bigQuery, true);\n+      FieldUtils.writeField(service, \"bigQuery\", bigQueryMock, true);", "originalCommit": "654c74fd69d1a606f20be9c841ebb46dece72119", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f23169db92b4c407ec564934e8f267bdc9887d5e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f23169db92b4c407ec564934e8f267bdc9887d5e", "message": "auto format + add comments", "committedDate": "2020-07-23T01:09:38Z", "type": "commit"}, {"oid": "9a81b3c5b01cd1bfbf0cb74ae45fa49a195b621e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9a81b3c5b01cd1bfbf0cb74ae45fa49a195b621e", "message": "auto format + add comments", "committedDate": "2020-07-23T01:11:35Z", "type": "commit"}, {"oid": "62ec60c1c335717143c03bb943e7ab9d793e6aed", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/62ec60c1c335717143c03bb943e7ab9d793e6aed", "message": "Merge branch 'master' into bq_service_add_feature", "committedDate": "2020-07-23T01:14:05Z", "type": "commit"}]}