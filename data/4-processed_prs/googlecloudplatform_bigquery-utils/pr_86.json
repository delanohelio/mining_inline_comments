{"pr_number": 86, "pr_title": "Query Fixer: reorganize the previous PR and init the project", "pr_createdAt": "2020-07-07T00:14:36Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86", "timeline": [{"oid": "a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "message": "init a project\ncreate and test a QueryTokenService", "committedDate": "2020-06-25T02:06:24Z", "type": "commit"}, {"oid": "0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "message": "reformat the code\nAdd comments", "committedDate": "2020-06-30T21:11:52Z", "type": "commit"}, {"oid": "0ebc50fab3773e85f8b30490392fce784f714f88", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0ebc50fab3773e85f8b30490392fce784f714f88", "message": "rename the package name to 'queryfixer'\n\nadd documents for classes", "committedDate": "2020-07-01T01:45:14Z", "type": "commit"}, {"oid": "eccb3d14310ca239e761705b5cab3c7c36768ff5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/eccb3d14310ca239e761705b5cab3c7c36768ff5", "message": "decompose the PR into multiple parts.\nThis is the first part: init the project and implement one feature of the QueryTokenProcessor", "committedDate": "2020-07-07T00:11:26Z", "type": "commit"}, {"oid": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "message": "minor change in BigQueryParserFactory", "committedDate": "2020-07-07T00:39:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMjYyOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451812629", "bodyText": "nit: \"default\"", "author": "kikkyo", "createdAt": "2020-07-08T20:40:41Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODUxNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452418517", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-09T18:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMjYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2OTU5NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452469595", "bodyText": "looks like we still use \"fault\" :)", "author": "kikkyo", "createdAt": "2020-07-09T20:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMjYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMzk3Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451813973", "bodyText": "Preconditions.checknotnull() is more popular i think :) https://guava.dev/releases/19.0/api/docs/com/google/common/base/Preconditions.html", "author": "kikkyo", "createdAt": "2020-07-08T20:43:13Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.\n+ */\n+public class BigQueryParserFactory {\n+\n+  private static final Quoting quoting = Quoting.BACK_TICK;\n+  private static final Casing quotedCasing = Casing.UNCHANGED;\n+  private static final SqlConformance conformance = SqlConformanceEnum.DEFAULT;\n+  private final SqlParser.Config parserConfig;\n+  private static final Casing unquotedCasing = Casing.UNCHANGED;\n+\n+  /** Default initialization with the Babel Parser factory. */\n+  public BigQueryParserFactory() {\n+    this(SqlBabelParserImpl.FACTORY);\n+  }\n+\n+  /**\n+   * Initialization with customized factory\n+   *\n+   * @param factory customized factory\n+   */\n+  public BigQueryParserFactory(SqlParserImplFactory factory) {\n+    this.parserConfig = buildConfig(factory);\n+  }\n+\n+  /**\n+   * Get the parser parsing the input query.\n+   *\n+   * @param sql query to parse\n+   * @return a parser loaded with the query\n+   */\n+  public SqlParser getParser(String sql) {\n+    return getParser(new SourceStringReader(sql));\n+  }\n+\n+  /**\n+   * Get the implementation of a parser parsing a query. The implementation provides functions to\n+   * tokenize the query.\n+   *\n+   * @param query the query fed to the parser implementation.\n+   * @return SqlBabelParserImpl the parser implementation\n+   */\n+  public SqlBabelParserImpl getBabelParserImpl(String query) {\n+    Objects.requireNonNull(query, \"the input query should not be null\");", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NDc5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452384790", "bodyText": "Done!", "author": "mingen-pan", "createdAt": "2020-07-09T17:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMzk3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNDYyOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451814629", "bodyText": "nit: Write comment on the field\nparserImpl = FieldUtils.readField(getParser(query), \"parser\", /* field name = */ true);", "author": "kikkyo", "createdAt": "2020-07-08T20:44:38Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.\n+ */\n+public class BigQueryParserFactory {\n+\n+  private static final Quoting quoting = Quoting.BACK_TICK;\n+  private static final Casing quotedCasing = Casing.UNCHANGED;\n+  private static final SqlConformance conformance = SqlConformanceEnum.DEFAULT;\n+  private final SqlParser.Config parserConfig;\n+  private static final Casing unquotedCasing = Casing.UNCHANGED;\n+\n+  /** Default initialization with the Babel Parser factory. */\n+  public BigQueryParserFactory() {\n+    this(SqlBabelParserImpl.FACTORY);\n+  }\n+\n+  /**\n+   * Initialization with customized factory\n+   *\n+   * @param factory customized factory\n+   */\n+  public BigQueryParserFactory(SqlParserImplFactory factory) {\n+    this.parserConfig = buildConfig(factory);\n+  }\n+\n+  /**\n+   * Get the parser parsing the input query.\n+   *\n+   * @param sql query to parse\n+   * @return a parser loaded with the query\n+   */\n+  public SqlParser getParser(String sql) {\n+    return getParser(new SourceStringReader(sql));\n+  }\n+\n+  /**\n+   * Get the implementation of a parser parsing a query. The implementation provides functions to\n+   * tokenize the query.\n+   *\n+   * @param query the query fed to the parser implementation.\n+   * @return SqlBabelParserImpl the parser implementation\n+   */\n+  public SqlBabelParserImpl getBabelParserImpl(String query) {\n+    Objects.requireNonNull(query, \"the input query should not be null\");\n+\n+    Object parserImpl;\n+    try {\n+      parserImpl = FieldUtils.readField(getParser(query), \"parser\", true);", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNTEzMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451815131", "bodyText": "nit: \"Unable\" and ...\"the generated parser**.** \"", "author": "kikkyo", "createdAt": "2020-07-08T20:45:35Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.\n+ */\n+public class BigQueryParserFactory {\n+\n+  private static final Quoting quoting = Quoting.BACK_TICK;\n+  private static final Casing quotedCasing = Casing.UNCHANGED;\n+  private static final SqlConformance conformance = SqlConformanceEnum.DEFAULT;\n+  private final SqlParser.Config parserConfig;\n+  private static final Casing unquotedCasing = Casing.UNCHANGED;\n+\n+  /** Default initialization with the Babel Parser factory. */\n+  public BigQueryParserFactory() {\n+    this(SqlBabelParserImpl.FACTORY);\n+  }\n+\n+  /**\n+   * Initialization with customized factory\n+   *\n+   * @param factory customized factory\n+   */\n+  public BigQueryParserFactory(SqlParserImplFactory factory) {\n+    this.parserConfig = buildConfig(factory);\n+  }\n+\n+  /**\n+   * Get the parser parsing the input query.\n+   *\n+   * @param sql query to parse\n+   * @return a parser loaded with the query\n+   */\n+  public SqlParser getParser(String sql) {\n+    return getParser(new SourceStringReader(sql));\n+  }\n+\n+  /**\n+   * Get the implementation of a parser parsing a query. The implementation provides functions to\n+   * tokenize the query.\n+   *\n+   * @param query the query fed to the parser implementation.\n+   * @return SqlBabelParserImpl the parser implementation\n+   */\n+  public SqlBabelParserImpl getBabelParserImpl(String query) {\n+    Objects.requireNonNull(query, \"the input query should not be null\");\n+\n+    Object parserImpl;\n+    try {\n+      parserImpl = FieldUtils.readField(getParser(query), \"parser\", true);\n+    } catch (IllegalAccessException e) {\n+      throw new ParserCreationException(\n+          \"unable to extract the parserImpl from the generated parser\");", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxODgxNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451818815", "bodyText": "I think you should attach more details to debug this exception. The simple error message doesn't look very helpful for us to debug.", "author": "kikkyo", "createdAt": "2020-07-08T20:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NjY2Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452386667", "bodyText": "Here is something I don't know how to handle. Actually parser is the field of SqlBabelParser so readField will never throw an exception. Should I simply ignore the exception?", "author": "mingen-pan", "createdAt": "2020-07-09T17:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNTY5Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451815696", "bodyText": "nit: \"The factory.... \" Please pay a bit attention to use upper case when necessary. :)", "author": "kikkyo", "createdAt": "2020-07-08T20:46:47Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.\n+ */\n+public class BigQueryParserFactory {\n+\n+  private static final Quoting quoting = Quoting.BACK_TICK;\n+  private static final Casing quotedCasing = Casing.UNCHANGED;\n+  private static final SqlConformance conformance = SqlConformanceEnum.DEFAULT;\n+  private final SqlParser.Config parserConfig;\n+  private static final Casing unquotedCasing = Casing.UNCHANGED;\n+\n+  /** Default initialization with the Babel Parser factory. */\n+  public BigQueryParserFactory() {\n+    this(SqlBabelParserImpl.FACTORY);\n+  }\n+\n+  /**\n+   * Initialization with customized factory\n+   *\n+   * @param factory customized factory\n+   */\n+  public BigQueryParserFactory(SqlParserImplFactory factory) {\n+    this.parserConfig = buildConfig(factory);\n+  }\n+\n+  /**\n+   * Get the parser parsing the input query.\n+   *\n+   * @param sql query to parse\n+   * @return a parser loaded with the query\n+   */\n+  public SqlParser getParser(String sql) {\n+    return getParser(new SourceStringReader(sql));\n+  }\n+\n+  /**\n+   * Get the implementation of a parser parsing a query. The implementation provides functions to\n+   * tokenize the query.\n+   *\n+   * @param query the query fed to the parser implementation.\n+   * @return SqlBabelParserImpl the parser implementation\n+   */\n+  public SqlBabelParserImpl getBabelParserImpl(String query) {\n+    Objects.requireNonNull(query, \"the input query should not be null\");\n+\n+    Object parserImpl;\n+    try {\n+      parserImpl = FieldUtils.readField(getParser(query), \"parser\", true);\n+    } catch (IllegalAccessException e) {\n+      throw new ParserCreationException(\n+          \"unable to extract the parserImpl from the generated parser\");\n+    }\n+\n+    if (!(parserImpl instanceof SqlBabelParserImpl)) {\n+      throw new ParserCreationException(\"the factory does not produce Babel Parser\");", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NzA5NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452387094", "bodyText": "Thanks for pointing out.", "author": "mingen-pan", "createdAt": "2020-07-09T17:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNjc1MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451816751", "bodyText": "Does the library provide any interface we should use for SqlBabelParserImpl ? exposing the actual implementation looks a bit strange. Maybe its by design.", "author": "kikkyo", "createdAt": "2020-07-08T20:49:03Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.\n+ */\n+public class BigQueryParserFactory {\n+\n+  private static final Quoting quoting = Quoting.BACK_TICK;\n+  private static final Casing quotedCasing = Casing.UNCHANGED;\n+  private static final SqlConformance conformance = SqlConformanceEnum.DEFAULT;\n+  private final SqlParser.Config parserConfig;\n+  private static final Casing unquotedCasing = Casing.UNCHANGED;\n+\n+  /** Default initialization with the Babel Parser factory. */\n+  public BigQueryParserFactory() {\n+    this(SqlBabelParserImpl.FACTORY);\n+  }\n+\n+  /**\n+   * Initialization with customized factory\n+   *\n+   * @param factory customized factory\n+   */\n+  public BigQueryParserFactory(SqlParserImplFactory factory) {\n+    this.parserConfig = buildConfig(factory);\n+  }\n+\n+  /**\n+   * Get the parser parsing the input query.\n+   *\n+   * @param sql query to parse\n+   * @return a parser loaded with the query\n+   */\n+  public SqlParser getParser(String sql) {\n+    return getParser(new SourceStringReader(sql));\n+  }\n+\n+  /**\n+   * Get the implementation of a parser parsing a query. The implementation provides functions to\n+   * tokenize the query.\n+   *\n+   * @param query the query fed to the parser implementation.\n+   * @return SqlBabelParserImpl the parser implementation\n+   */\n+  public SqlBabelParserImpl getBabelParserImpl(String query) {", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MzM2Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452383362", "bodyText": "The weird thing for Calcite is that they don't provide a tokenizer and integrate this function into this class. Thus, it is the class that has getNextToken method (not belong to any interface).\nHowever, since we are going to switch to ZetqSQL, we won't use it in future and it will be removed.", "author": "mingen-pan", "createdAt": "2020-07-09T17:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNjc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2OTM5OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452469398", "bodyText": "ok.thx!", "author": "kikkyo", "createdAt": "2020-07-09T20:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNjc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNzM2Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451817366", "bodyText": "We don't really comments on the default constructor :) up to you", "author": "kikkyo", "createdAt": "2020-07-08T20:50:16Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.\n+ */\n+public class BigQueryParserFactory {\n+\n+  private static final Quoting quoting = Quoting.BACK_TICK;\n+  private static final Casing quotedCasing = Casing.UNCHANGED;\n+  private static final SqlConformance conformance = SqlConformanceEnum.DEFAULT;\n+  private final SqlParser.Config parserConfig;\n+  private static final Casing unquotedCasing = Casing.UNCHANGED;\n+\n+  /** Default initialization with the Babel Parser factory. */", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0NTgxNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451845817", "bodyText": "I think it is good to mention the default type pf the parser is Babel.", "author": "mingen-pan", "createdAt": "2020-07-08T21:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNzM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMDYxNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451820614", "bodyText": "If we are printing out to the stdout, we should make the error message actionable. e.g., \"Not enough arguments. Please run the tool with \"\"", "author": "kikkyo", "createdAt": "2020-07-08T20:56:45Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.common.flogger.FluentLogger;\n+\n+public class QueryFixerMain {\n+\n+  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+\n+  public static void main(String[] args) {\n+\n+    if (args.length == 0) {\n+      logger.atInfo().log(\"not enough arguments\");", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTAyNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452389025", "bodyText": "I will do it later. I haven't concluded what parameters will be used finally. I will put a TODO here.", "author": "mingen-pan", "createdAt": "2020-07-09T17:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMDYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMTU3Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451821572", "bodyText": "nit: A processor that provides methods for queries and tokens.", "author": "kikkyo", "createdAt": "2020-07-08T20:58:46Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.parser.babel.Token;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.TokenImpl;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A processor provides methods for query and token. It can be used to tokenize queries, find tokens based on", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTc1OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452389758", "bodyText": "Done.", "author": "mingen-pan", "createdAt": "2020-07-09T17:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMTU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMTgyNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451821826", "bodyText": "nit: \"Tokenize...\"", "author": "kikkyo", "createdAt": "2020-07-08T20:59:15Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.parser.babel.Token;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.TokenImpl;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A processor provides methods for query and token. It can be used to tokenize queries, find tokens based on\n+ * positions, and modify a query in token-level.\n+ * */\n+@AllArgsConstructor\n+public class QueryTokenProcessor {\n+\n+  private final BigQueryParserFactory parserFactory;\n+\n+  /**\n+   * tokenize a query and return all its tokens.", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMjEwNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451822104", "bodyText": "nit: please rename \"sql\" to be \"query\" :)", "author": "kikkyo", "createdAt": "2020-07-08T20:59:47Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.parser.babel.Token;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.TokenImpl;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A processor provides methods for query and token. It can be used to tokenize queries, find tokens based on\n+ * positions, and modify a query in token-level.\n+ * */\n+@AllArgsConstructor\n+public class QueryTokenProcessor {\n+\n+  private final BigQueryParserFactory parserFactory;\n+\n+  /**\n+   * tokenize a query and return all its tokens.\n+   * @param sql the query to be tokenized\n+   * @return a list of tokens of the query\n+   */\n+  public List<IToken> getAllTokens(String sql) {", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMjM5OQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451822399", "bodyText": "preconditions.", "author": "kikkyo", "createdAt": "2020-07-08T21:00:21Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.parser.babel.Token;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.TokenImpl;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A processor provides methods for query and token. It can be used to tokenize queries, find tokens based on\n+ * positions, and modify a query in token-level.\n+ * */\n+@AllArgsConstructor\n+public class QueryTokenProcessor {\n+\n+  private final BigQueryParserFactory parserFactory;\n+\n+  /**\n+   * tokenize a query and return all its tokens.\n+   * @param sql the query to be tokenized\n+   * @return a list of tokens of the query\n+   */\n+  public List<IToken> getAllTokens(String sql) {\n+    Objects.requireNonNull(sql, \"input query should not be null\");", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMjk3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451822978", "bodyText": "If it is going to used in other places, you can make it static const of the class.", "author": "kikkyo", "createdAt": "2020-07-08T21:01:28Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.parser.babel.Token;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.TokenImpl;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A processor provides methods for query and token. It can be used to tokenize queries, find tokens based on\n+ * positions, and modify a query in token-level.\n+ * */\n+@AllArgsConstructor\n+public class QueryTokenProcessor {\n+\n+  private final BigQueryParserFactory parserFactory;\n+\n+  /**\n+   * tokenize a query and return all its tokens.\n+   * @param sql the query to be tokenized\n+   * @return a list of tokens of the query\n+   */\n+  public List<IToken> getAllTokens(String sql) {\n+    Objects.requireNonNull(sql, \"input query should not be null\");\n+\n+    List<IToken> tokens = new ArrayList<>();\n+\n+    // SqlBabelParserImpl has a token manager to tokenize the input query.\n+    SqlBabelParserImpl parserImpl = parserFactory.getBabelParserImpl(sql);\n+\n+    Token token;\n+    final int EndKind = 0;", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDcwNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452390706", "bodyText": "Not so sure. As far as I plan right now, here may be the only place.", "author": "mingen-pan", "createdAt": "2020-07-09T17:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyMjk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDQ0Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451824446", "bodyText": "nit: \"An interface\"", "author": "kikkyo", "createdAt": "2020-07-08T21:04:30Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/IToken.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.google.cloud.bigquery.utils.queryfixer.entity;\n+\n+/**\n+ * A interface for queries' tokens.", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDg0Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451824843", "bodyText": "remove the commented line?", "author": "kikkyo", "createdAt": "2020-07-08T21:05:19Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.google.cloud.bigquery.utils.queryfixer.entity;\n+\n+import org.apache.calcite.sql.parser.babel.Token;\n+\n+/**\n+ * An implementation of token interface based on the Token class of Babel Calcite Parser.\n+ * */\n+public class TokenImpl implements IToken {\n+\n+  private final Token token;\n+\n+  public TokenImpl (Token token) {\n+    this.token = token;\n+  }\n+\n+  @Override public int getKind() {\n+    return token.kind;\n+  }\n+\n+  @Override public String getImage() {\n+    return token.image;\n+  }\n+\n+  @Override public int getBeginLine() {\n+    return token.beginLine;\n+  }\n+\n+  @Override public int getBeginCol() {\n+    return token.beginColumn;\n+  }\n+\n+  @Override public int getEndLine() {\n+    return token.endLine;\n+  }\n+\n+  @Override public int getEndCol() {\n+    return token.endColumn;\n+  }\n+\n+  // babel is a type of parser in Calcite, and this class uses its token for implementation.\n+  public Token getBabelToken() {\n+    return token;\n+  }\n+\n+  @Override public String toString() {\n+    return  String.format(\"%s [%d:%d]\", token.image, token.beginLine, token.beginColumn);\n+  }\n+\n+  //  public static TokenImpl newToken(int ofKind) {\n+//    return new TokenImpl(Token.newToken(ofKind));\n+//  }\n+}", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MjI4MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452392281", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-09T17:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNDg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNTAzNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451825037", "bodyText": "Add  a comment for the exception?", "author": "kikkyo", "createdAt": "2020-07-08T21:05:43Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/exception/ParserCreationException.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.google.cloud.bigquery.utils.queryfixer.exception;\n+\n+\n+public class ParserCreationException extends RuntimeException {\n+  public ParserCreationException(String message) {\n+    super(message);\n+  }", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNTg5OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451825898", "bodyText": "nit: getBeginRow(); getBeginColumn()", "author": "kikkyo", "createdAt": "2020-07-08T21:07:30Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/IToken.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.google.cloud.bigquery.utils.queryfixer.entity;\n+\n+/**\n+ * A interface for queries' tokens.\n+ * */\n+public interface IToken {\n+\n+  int getKind();\n+\n+  String getImage();\n+\n+  int getBeginLine();", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MTQ0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452391445", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-09T17:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNTg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNjUyNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451826525", "bodyText": "nit: not sure this has been auto formatted yet... i think usually this should be\n@OverRide\npublic int getKind() {\n...\n}", "author": "kikkyo", "createdAt": "2020-07-08T21:08:56Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.google.cloud.bigquery.utils.queryfixer.entity;\n+\n+import org.apache.calcite.sql.parser.babel.Token;\n+\n+/**\n+ * An implementation of token interface based on the Token class of Babel Calcite Parser.\n+ * */\n+public class TokenImpl implements IToken {\n+\n+  private final Token token;\n+\n+  public TokenImpl (Token token) {\n+    this.token = token;\n+  }\n+\n+  @Override public int getKind() {\n+    return token.kind;\n+  }", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MTk3Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452391972", "bodyText": "I think it is auto formatted... I don't code this way either.", "author": "mingen-pan", "createdAt": "2020-07-09T17:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNjUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNzc1Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451827757", "bodyText": "nit: convertQueryToTokens()", "author": "kikkyo", "createdAt": "2020-07-08T21:11:21Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class QueryTokenProcessorTest {\n+\n+  private QueryTokenProcessor createService() {\n+    return new QueryTokenProcessor(new BigQueryParserFactory());\n+  }\n+\n+  @Test\n+  public void convertSqlToTokens() {", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyODEwNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451828104", "bodyText": "This should be shared by all test cases in setup()?", "author": "kikkyo", "createdAt": "2020-07-08T21:11:58Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class QueryTokenProcessorTest {\n+\n+  private QueryTokenProcessor createService() {\n+    return new QueryTokenProcessor(new BigQueryParserFactory());\n+  }\n+", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTYxNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451835614", "bodyText": "also createProcessor() :)", "author": "kikkyo", "createdAt": "2020-07-08T21:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyODEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwODY4Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452508682", "bodyText": "Miss this comment. I will revise this in next commit", "author": "mingen-pan", "createdAt": "2020-07-09T21:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyODEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NjA4Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452546082", "bodyText": "I think you can make it a member in testSetup() so you don't have to call it for every test case", "author": "kikkyo", "createdAt": "2020-07-09T23:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyODEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyODM4OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451828388", "bodyText": "The auto formatting seems a bit weird. The line is too short...", "author": "kikkyo", "createdAt": "2020-07-08T21:12:40Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class QueryTokenProcessorTest {\n+\n+  private QueryTokenProcessor createService() {\n+    return new QueryTokenProcessor(new BigQueryParserFactory());\n+  }\n+\n+  @Test\n+  public void convertSqlToTokens() {\n+    QueryTokenProcessor tokenService = createService();\n+    String sql = \"Select col from `d1.t1`\\n\" +", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNTA5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452415090", "bodyText": "I break this on purpose. I want to simulate the BigQuery console, where a user can type a query in multiple lines.", "author": "mingen-pan", "createdAt": "2020-07-09T18:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyODM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyOTI1Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451829252", "bodyText": "Usually we shouldn't print out these in a test.\nIf we want to test out the contents, we should use List expectedTokens  = ... and assert if they are equal", "author": "kikkyo", "createdAt": "2020-07-08T21:14:33Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class QueryTokenProcessorTest {\n+\n+  private QueryTokenProcessor createService() {\n+    return new QueryTokenProcessor(new BigQueryParserFactory());\n+  }\n+\n+  @Test\n+  public void convertSqlToTokens() {\n+    QueryTokenProcessor tokenService = createService();\n+    String sql = \"Select col from `d1.t1`\\n\" +\n+        \"where t1.col>'val'\";\n+\n+    List<IToken> tokens = tokenService.getAllTokens(sql);\n+    assertEquals(10, tokens.size());\n+    for (IToken token : tokens) {", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNzQ1OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452417458", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-09T18:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyOTI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMDY2Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451830667", "bodyText": "nit: not sure why there are so many empty lines in between...", "author": "kikkyo", "createdAt": "2020-07-08T21:17:28Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/QueryTokenProcessorTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.google.cloud.bigquery.utils.queryfixer;", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMzQ0Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452413443", "bodyText": "I think it is caused by auto format.", "author": "mingen-pan", "createdAt": "2020-07-09T18:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMDY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMTkzMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451831933", "bodyText": "The best practice for writing tests:\nTests independent behaviors of a method separately:\nExample:\n@test\npublic void displayTransactionResults_showsItemName() {\ntransactionProcessor.displayTransactionResults(\nnew User(), new Transaction(\"Some Item\"));\nassertThat(ui.getText()).contains(\"You bought a Some Item\");\n}", "author": "kikkyo", "createdAt": "2020-07-08T21:20:19Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/ParseFactoryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.impl.SqlParserImpl;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class ParseFactoryTest {\n+\n+  @Test\n+  public void getParser() throws SqlParseException {\n+    BigQueryParserFactory factory = new BigQueryParserFactory();\n+    SqlParser parser = factory.getParser(\"select a from b\");\n+    SqlNode node = parser.parseQuery();\n+    assertEquals(SqlKind.SELECT, node.getKind());\n+  }\n+\n+  @Test", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzA5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451833090", "bodyText": "public void getParserImpl_returnsIncorrectParser() {}", "author": "kikkyo", "createdAt": "2020-07-08T21:23:02Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/ParseFactoryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.impl.SqlParserImpl;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class ParseFactoryTest {\n+\n+  @Test\n+  public void getParser() throws SqlParseException {\n+    BigQueryParserFactory factory = new BigQueryParserFactory();\n+    SqlParser parser = factory.getParser(\"select a from b\");\n+    SqlNode node = parser.parseQuery();\n+    assertEquals(SqlKind.SELECT, node.getKind());\n+  }\n+\n+  @Test\n+  public void queryNotNull() {\n+    BigQueryParserFactory factory = new BigQueryParserFactory();\n+\n+    try {\n+      factory.getBabelParserImpl(null);\n+      fail();\n+    } catch (NullPointerException e) {\n+      assertEquals(\"the input query should not be null\", e.getMessage());\n+    }\n+\n+  }\n+\n+  @Test\n+  public void getParserImplFromIncorrectFactory() {", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMzY3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452413678", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-07-09T18:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzUxNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451833517", "bodyText": "Can we add a case for a slightly more complicated query?", "author": "kikkyo", "createdAt": "2020-07-08T21:24:05Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/ParseFactoryTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.impl.SqlParserImpl;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class ParseFactoryTest {\n+\n+  @Test\n+  public void getParser() throws SqlParseException {", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMjQwMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452412403", "bodyText": "A new case is added.", "author": "mingen-pan", "createdAt": "2020-07-09T18:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA0NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r451835044", "bodyText": "If most of the settings are default settings, we should consider building it in statically and only set factory here.", "author": "kikkyo", "createdAt": "2020-07-08T21:27:08Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import org.apache.calcite.avatica.util.Casing;\n+import org.apache.calcite.avatica.util.Quoting;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserImplFactory;\n+import org.apache.calcite.sql.parser.babel.SqlBabelParserImpl;\n+import org.apache.calcite.sql.validate.SqlConformance;\n+import org.apache.calcite.sql.validate.SqlConformanceEnum;\n+import org.apache.calcite.util.SourceStringReader;\n+import org.apache.commons.lang3.reflect.FieldUtils;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.exception.ParserCreationException;\n+\n+import java.io.Reader;\n+import java.util.Objects;\n+\n+/**\n+ * A factory to generate parsers. The fault generated parser is Babel Parser with BigQuery dialect.\n+ */\n+public class BigQueryParserFactory {\n+\n+  private static final Quoting quoting = Quoting.BACK_TICK;\n+  private static final Casing quotedCasing = Casing.UNCHANGED;\n+  private static final SqlConformance conformance = SqlConformanceEnum.DEFAULT;\n+  private final SqlParser.Config parserConfig;\n+  private static final Casing unquotedCasing = Casing.UNCHANGED;\n+\n+  /** Default initialization with the Babel Parser factory. */\n+  public BigQueryParserFactory() {\n+    this(SqlBabelParserImpl.FACTORY);\n+  }\n+\n+  /**\n+   * Initialization with customized factory\n+   *\n+   * @param factory customized factory\n+   */\n+  public BigQueryParserFactory(SqlParserImplFactory factory) {\n+    this.parserConfig = buildConfig(factory);\n+  }\n+\n+  /**\n+   * Get the parser parsing the input query.\n+   *\n+   * @param sql query to parse\n+   * @return a parser loaded with the query\n+   */\n+  public SqlParser getParser(String sql) {\n+    return getParser(new SourceStringReader(sql));\n+  }\n+\n+  /**\n+   * Get the implementation of a parser parsing a query. The implementation provides functions to\n+   * tokenize the query.\n+   *\n+   * @param query the query fed to the parser implementation.\n+   * @return SqlBabelParserImpl the parser implementation\n+   */\n+  public SqlBabelParserImpl getBabelParserImpl(String query) {\n+    Objects.requireNonNull(query, \"the input query should not be null\");\n+\n+    Object parserImpl;\n+    try {\n+      parserImpl = FieldUtils.readField(getParser(query), \"parser\", true);\n+    } catch (IllegalAccessException e) {\n+      throw new ParserCreationException(\n+          \"unable to extract the parserImpl from the generated parser\");\n+    }\n+\n+    if (!(parserImpl instanceof SqlBabelParserImpl)) {\n+      throw new ParserCreationException(\"the factory does not produce Babel Parser\");\n+    }\n+    return (SqlBabelParserImpl) parserImpl;\n+  }\n+\n+  protected SqlParser getParser(Reader source) {\n+    return SqlParser.create(source, parserConfig);\n+  }\n+\n+  private SqlParser.Config buildConfig(SqlParserImplFactory factory) {\n+    final SqlParser.ConfigBuilder configBuilder =\n+        SqlParser.configBuilder()\n+            .setParserFactory(factory)\n+            .setQuoting(quoting)\n+            .setUnquotedCasing(unquotedCasing)\n+            .setQuotedCasing(quotedCasing)", "originalCommit": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4ODQxMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452388410", "bodyText": "Sorry, I didn't get it. buildConfig is only called in initialization. Then, the parserConfig is stored in a member variable. When a parser is going to be created, only the parserConfig will be used.", "author": "mingen-pan", "createdAt": "2020-07-09T17:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA0NA=="}], "type": "inlineReview"}, {"oid": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8b86a8e36bd784a29c6e7357ff786036a77b80bf", "message": "revise the review", "committedDate": "2020-07-09T18:43:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzY5OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452543698", "bodyText": "nit: There should be space in between /* forceAccess= /<extra space> true", "author": "kikkyo", "createdAt": "2020-07-09T23:28:54Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryParserFactory.java", "diffHunk": "@@ -58,18 +58,19 @@ public SqlParser getParser(String sql) {\n    * @return SqlBabelParserImpl the parser implementation\n    */\n   public SqlBabelParserImpl getBabelParserImpl(String query) {\n-    Objects.requireNonNull(query, \"the input query should not be null\");\n+    Preconditions.checkNotNull(query, \"The input query should not be null.\");\n \n     Object parserImpl;\n     try {\n-      parserImpl = FieldUtils.readField(getParser(query), \"parser\", true);\n+      parserImpl = FieldUtils.readField(getParser(query), /* fieldName= */\"parser\", /* forceAccess= */true);", "originalCommit": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDc5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452544790", "bodyText": "getParser_selectQuery()", "author": "kikkyo", "createdAt": "2020-07-09T23:32:28Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/ParserFactoryTest.java", "diffHunk": "@@ -11,18 +11,29 @@\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-public class ParseFactoryTest {\n+public class ParserFactoryTest {\n \n   @Test\n-  public void getParser() throws SqlParseException {\n+  public void getParser1() throws SqlParseException {", "originalCommit": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTA5NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452545095", "bodyText": "getParser_selectWithSubQuery()", "author": "kikkyo", "createdAt": "2020-07-09T23:33:35Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/ParserFactoryTest.java", "diffHunk": "@@ -11,18 +11,29 @@\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-public class ParseFactoryTest {\n+public class ParserFactoryTest {\n \n   @Test\n-  public void getParser() throws SqlParseException {\n+  public void getParser1() throws SqlParseException {\n     BigQueryParserFactory factory = new BigQueryParserFactory();\n     SqlParser parser = factory.getParser(\"select a from b\");\n     SqlNode node = parser.parseQuery();\n     assertEquals(SqlKind.SELECT, node.getKind());\n   }\n \n+  @Test\n+  public void getParser2() throws SqlParseException {", "originalCommit": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NTM4OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/86#discussion_r452545388", "bodyText": "getParser_nullQuery", "author": "kikkyo", "createdAt": "2020-07-09T23:34:35Z", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/ParserFactoryTest.java", "diffHunk": "@@ -11,18 +11,29 @@\n import org.junit.Test;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-public class ParseFactoryTest {\n+public class ParserFactoryTest {\n \n   @Test\n-  public void getParser() throws SqlParseException {\n+  public void getParser1() throws SqlParseException {\n     BigQueryParserFactory factory = new BigQueryParserFactory();\n     SqlParser parser = factory.getParser(\"select a from b\");\n     SqlNode node = parser.parseQuery();\n     assertEquals(SqlKind.SELECT, node.getKind());\n   }\n \n+  @Test\n+  public void getParser2() throws SqlParseException {\n+    BigQueryParserFactory factory = new BigQueryParserFactory();\n+    SqlParser parser =\n+        factory.getParser(\n+            \"select * from (select a, b, c from x cross join y where d > 10) inner join z\");\n+    SqlNode node = parser.parseQuery();\n+    assertEquals(SqlKind.SELECT, node.getKind());\n+  }\n+\n   @Test\n   public void queryNotNull() {", "originalCommit": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7f907074ad2175483fa52068793fbafe3baf970e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7f907074ad2175483fa52068793fbafe3baf970e", "message": "minor fix", "committedDate": "2020-07-11T00:19:20Z", "type": "commit"}, {"oid": "e205bf89472968395a87def0bc49d85fb4424bc8", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e205bf89472968395a87def0bc49d85fb4424bc8", "message": "Merge branch 'master' into mepan_init", "committedDate": "2020-07-11T00:19:51Z", "type": "commit"}]}