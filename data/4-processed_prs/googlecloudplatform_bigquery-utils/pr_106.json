{"pr_number": 106, "pr_title": "Query Verification: Support for multiple queries", "pr_createdAt": "2020-07-16T22:01:28Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106", "timeline": [{"oid": "a381a354a88c74a8abddf65b793870199a9603dc", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a381a354a88c74a8abddf65b793870199a9603dc", "message": "Support for multiple queries", "committedDate": "2020-07-16T20:50:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMDk1NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457500954", "bodyText": "I think we should prefer a loop like for (int i = 0; i < jobInfos.size(); i++) { JobInfo jobInfo = jobInfos.get(i); ...  over using listIterator, I believe it should be more clear as opposed to using the iterator methods", "author": "Luminarys", "createdAt": "2020-07-20T15:35:22Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -70,37 +66,49 @@ public void verifyDataFree() {\n                 }\n \n                 List<TableId> tableIds = QueryVerifier.getTableIdsFromDdlSchema(migratedSchema);\n-                for (TableId tableId : tableIds) {\n-                    Table table = bigQuery.getTable(tableId);\n-                    tables.add(table);\n-                }\n+                tableIds.forEach(tableId -> tables.add(bigQuery.getTable(tableId)));\n             }\n \n             if (tables.isEmpty()) {\n                 System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n             }\n         }\n \n-        // Create dry-run job\n-        JobInfo jobInfo = configureJob(migratedQuery.query(), true);\n+        // Create dry-run jobs\n+        List<JobInfo> jobInfos = getJobInfosFromQuery(migratedQuery, true);\n+        ListIterator<JobInfo> jobInfoListIterator = jobInfos.listIterator();", "originalCommit": "a381a354a88c74a8abddf65b793870199a9603dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "19db58846d28d73a26bf41bf78f4d87170496d75", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/19db58846d28d73a26bf41bf78f4d87170496d75", "message": "Fix job info loop", "committedDate": "2020-07-20T16:25:53Z", "type": "commit"}, {"oid": "ba362087e071059d69674d354b8661ebdfb4d29b", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ba362087e071059d69674d354b8661ebdfb4d29b", "message": "Add unit tests", "committedDate": "2020-07-20T16:26:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457569662", "bodyText": "I would inline this into the return and then remove the {} from the lambda so it looks like jobInfo -> jobInfo.getConfiguration().getQuery() (I think this is valid syntax)", "author": "Luminarys", "createdAt": "2020-07-20T17:19:37Z", "path": "tools/query_verification/src/test/java/com/google/bigquery/QueryVerifierTest.java", "diffHunk": "@@ -102,4 +103,34 @@ public void testGetMultipleTableIdFromDdlSchema() {\n         assertEquals(tableId.getTable(), \"secondTable\");\n     }\n \n+    @Test\n+    public void testGetJobInfoFromQuery() {\n+        String queryContents = \"SELECT * FROM table\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 1);\n+\n+        QueryJobConfiguration queryJobConfiguration = jobInfos.get(0).getConfiguration();\n+        assertEquals(queryJobConfiguration.getQuery(), \"SELECT * FROM table\");\n+    }\n+\n+    @Test\n+    public void testGetMultipleJobInfosFromQuery() {\n+        String queryContents = \"SELECT * FROM table1;\\nSELECT column1 FROM table2; SELECT column2 FROM table2;\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 3);\n+\n+        List<String> queries = jobInfos.stream().map(jobInfo -> {\n+            QueryJobConfiguration queryJobConfiguration = jobInfo.getConfiguration();", "originalCommit": "ba362087e071059d69674d354b8661ebdfb4d29b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3ODU5Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457578597", "bodyText": "Only reason I didn't do that is because that actually requires manual casting since .getConfiguration() returns a JobConfiguration type (super class of QueryJobConfiguration) and doesn't have a .getQuery() method", "author": "krishsuchdev", "createdAt": "2020-07-20T17:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0OTE5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457649193", "bodyText": "QueryJobConfiguration queryJobConfiguration = jobInfo.getConfiguration(); doesn't seem to have a downcast, is it not needed when you assign like this?", "author": "Luminarys", "createdAt": "2020-07-20T19:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NjAxNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457666017", "bodyText": "So it looks like JobConfiguration is an abstract class and .getConfiguration() instead returns <C extends JobConfiguration>", "author": "krishsuchdev", "createdAt": "2020-07-20T20:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg=="}], "type": "inlineReview"}, {"oid": "e75a6a1b316ed291e2236a5e7a55f68a185fa706", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e75a6a1b316ed291e2236a5e7a55f68a185fa706", "message": "Merge branch 'master' into multipleQueries", "committedDate": "2020-07-21T13:04:45Z", "type": "commit"}]}