{"pr_number": 139, "pr_title": "Query Verification: Comparing query results", "pr_createdAt": "2020-08-06T16:10:56Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139", "timeline": [{"oid": "62580d98c6616be21af5770c7c2c5c6843f09868", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/62580d98c6616be21af5770c7c2c5c6843f09868", "message": "Comparing query results", "committedDate": "2020-08-06T16:01:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTg4NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466579885", "bodyText": "return null may cause unexpected issue if other parts didn't handle carefully. Consider using Optional as return type", "author": "yzhvictor", "createdAt": "2020-08-06T17:41:27Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -112,5 +117,43 @@ public void verifyDataAware() throws InterruptedException {\n         System.out.println(\"Data-Aware Verification Completed\");\n     }\n \n+    /**\n+     * Finds extra and missing results by locating the differences between the results.\n+     * @param migratedResults Parsed results returned from BQ\n+     * @param originalResults Parsed results returned from original data warehouse service\n+     * @return Differences classified as either extra or missing from migrated results.\n+     */\n+    public ResultDifferences compareResults(List<QueryJobResults> migratedResults, List<QueryJobResults> originalResults) {\n+        // Check if same amount of queries were run\n+        if (migratedResults.size() == originalResults.size()) {\n+            // Rows present in migrated query results, but not original query results\n+            List<List<Object>> extraResults = new ArrayList<List<Object>>();\n+\n+            // Rows present in original query results, but not migrated query results\n+            List<List<Object>> missingResults = new ArrayList<List<Object>>();\n+\n+            for (int i = 0; i < migratedResults.size(); i++) {\n+                QueryJobResults migratedJobResults = migratedResults.get(i);\n+\n+                QueryJobResults originalJobResults = originalResults.get(i);\n+                Set<List<Object>> missingResultsSet = originalJobResults.results();\n+\n+                for (List<Object> migratedQueryResults : migratedJobResults.results()) {\n+                    // Rows that exist in both results are removed from missing results set\n+                    if (!missingResultsSet.remove(migratedQueryResults)) {\n+                        // Rows in the migrated results that don't exist in original results are classified as extra in migrated results\n+                        extraResults.add(migratedQueryResults);\n+                    }\n+                }\n+\n+                // Any leftover rows in the original results without a match are classified as missing in migrated results\n+                missingResults.addAll(missingResultsSet);\n+            }\n+\n+            return ResultDifferences.create(extraResults, missingResults);\n+        } else {\n+            return null;", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNzY4NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466637684", "bodyText": "Seconding this. I also wonder why we even need this else branch since I think we should be able to produce a result difference no matter what the size of each result set is.", "author": "Luminarys", "createdAt": "2020-08-06T19:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMzMyMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466723320", "bodyText": "Updated. The condition was just checking if the same number of query statements were run. If they weren't, it meant one of the parameters had results from a query that wasn't ran in the other", "author": "krishsuchdev", "createdAt": "2020-08-06T22:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MDM1Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466580356", "bodyText": "Do we need to have a default to at least put some warnings for unsupported types.", "author": "yzhvictor", "createdAt": "2020-08-06T17:42:21Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMDc0Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466600746", "bodyText": "I have a default case that converts the value to a string to use for the other types not listed. Should I still add a warning?", "author": "krishsuchdev", "createdAt": "2020-08-06T18:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MDM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNjYyNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r468216627", "bodyText": "Adding a warning sounds good, since it can help us identify the unsupported types.", "author": "yzhvictor", "createdAt": "2020-08-10T22:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MDM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MDYzNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466580636", "bodyText": "use Optional.empty()", "author": "yzhvictor", "createdAt": "2020-08-06T17:42:52Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        // returns double\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        // returns long\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        // returns BigDecimal\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        List<Object> subResults = parseResults(subValues, subFields);\n+\n+                        // returns List<Object>\n+                        result = subResults;\n+                        break;\n+                    case DATE:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING: default:\n+                        // returns String\n+                        result = value.getStringValue();\n+                }\n+            } catch (ParseException e) {\n+                result = null;", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MTM3MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466581370", "bodyText": "will run queries keep the same order in 2 databases?", "author": "yzhvictor", "createdAt": "2020-08-06T17:44:11Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -72,8 +74,11 @@ public void verifyDataFree() throws InterruptedException {\n     /**\n      * Verifies migrated query by sending query jobs to BQ and TD to check for differences in the query results.\n      */\n-    public void verifyDataAware() throws InterruptedException {\n+    public void verifyDataAware() throws Exception {\n         List<QueryJobResults> migratedResults = migratedInstance.runQueries();\n+        List<QueryJobResults> originalResults = originalInstance.runQueries();", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMTA5OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466601098", "bodyText": "Assuming that the 2 query files have the queries in the same order, migratedResults and originalResults should retain that order for the query results", "author": "krishsuchdev", "createdAt": "2020-08-06T18:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MTM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyODc3MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466628770", "bodyText": "I think you can combine this line like result = parseResult(subValues, subFields).", "author": "Luminarys", "createdAt": "2020-08-06T19:11:36Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        // returns double\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        // returns long\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        // returns BigDecimal\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        List<Object> subResults = parseResults(subValues, subFields);", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyOTg1NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466629854", "bodyText": "I would recommend making these separate cases and leaving a comment that we choose to use the String representation if the type is not known otherwise.", "author": "Luminarys", "createdAt": "2020-08-06T19:13:37Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        // returns double\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        // returns long\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        // returns BigDecimal\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        List<Object> subResults = parseResults(subValues, subFields);\n+\n+                        // returns List<Object>\n+                        result = subResults;\n+                        break;\n+                    case DATE:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING: default:", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNDc0NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466634745", "bodyText": "I think we can remove all these // returns comments, the type information is already present", "author": "Luminarys", "createdAt": "2020-08-06T19:23:20Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNzQxNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466637415", "bodyText": "Why does this have to be an if condition? I would assume we'd want to return information around differences in row counts etc.", "author": "Luminarys", "createdAt": "2020-08-06T19:28:22Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -112,5 +117,43 @@ public void verifyDataAware() throws InterruptedException {\n         System.out.println(\"Data-Aware Verification Completed\");\n     }\n \n+    /**\n+     * Finds extra and missing results by locating the differences between the results.\n+     * @param migratedResults Parsed results returned from BQ\n+     * @param originalResults Parsed results returned from original data warehouse service\n+     * @return Differences classified as either extra or missing from migrated results.\n+     */\n+    public ResultDifferences compareResults(List<QueryJobResults> migratedResults, List<QueryJobResults> originalResults) {\n+        // Check if same amount of queries were run\n+        if (migratedResults.size() == originalResults.size()) {", "originalCommit": "62580d98c6616be21af5770c7c2c5c6843f09868", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1MzU5OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466653598", "bodyText": "This is actually just checking if the same number of query statements were run. If they are not equal, that means either migratedResults or originalResults has the results of queries that aren't in the other and it'd be difficult to determine which ones those are", "author": "krishsuchdev", "createdAt": "2020-08-06T19:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNzQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczODQyMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466738420", "bodyText": "I see, makes sense then. Thanks!", "author": "Luminarys", "createdAt": "2020-08-06T23:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNzQxNQ=="}], "type": "inlineReview"}, {"oid": "25635b95af67bb2d252b785bfb61fecc990f7757", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/25635b95af67bb2d252b785bfb61fecc990f7757", "message": "Add unit tests", "committedDate": "2020-08-06T22:25:36Z", "type": "commit"}, {"oid": "6763191ea892f1f4abd258e4da02a72510c05cf1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6763191ea892f1f4abd258e4da02a72510c05cf1", "message": "Improved compare results error handling", "committedDate": "2020-08-06T22:28:05Z", "type": "commit"}, {"oid": "343196288dbabd69bc1005dab7b7453b86e206b0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/343196288dbabd69bc1005dab7b7453b86e206b0", "message": "Parse results formatting changes", "committedDate": "2020-08-06T22:30:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczNzg3Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466737876", "bodyText": "Don't forget the break", "author": "Luminarys", "createdAt": "2020-08-06T23:25:15Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,46 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        result = parseResults(subValues, subFields);\n+                        break;\n+                    case DATE:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING:\n+                        result = value.getStringValue();", "originalCommit": "343196288dbabd69bc1005dab7b7453b86e206b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1NjM5Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466756397", "bodyText": "Ah, good catch!", "author": "krishsuchdev", "createdAt": "2020-08-07T00:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczNzg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MDA5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466740093", "bodyText": "Zihao did you want each object to be Optional or did you want an empty Optional added like this? I actually think null is ok in this situation.", "author": "Luminarys", "createdAt": "2020-08-06T23:32:59Z", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,46 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        result = parseResults(subValues, subFields);\n+                        break;\n+                    case DATE:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING:\n+                        result = value.getStringValue();\n+                    default:\n+                        // Handle unknown/unsupported types as String\n+                        result = value.getStringValue();\n+                }\n+            } catch (ParseException e) {\n+                result = Optional.empty();", "originalCommit": "343196288dbabd69bc1005dab7b7453b86e206b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNjM1OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r468216358", "bodyText": "I think Optional.empty() looks good. My impression is java guide suggests to use optional whenever applicable.", "author": "yzhvictor", "createdAt": "2020-08-10T22:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MDA5Mw=="}], "type": "inlineReview"}, {"oid": "d44f4b3d41f2e9d412bf13916480a9be53b2103b", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d44f4b3d41f2e9d412bf13916480a9be53b2103b", "message": "Add break", "committedDate": "2020-08-07T00:29:10Z", "type": "commit"}, {"oid": "a5d29a4d05ef1ef5fdafbdc916dad280ee4eb798", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a5d29a4d05ef1ef5fdafbdc916dad280ee4eb798", "message": "Add warning for unsupported type", "committedDate": "2020-08-11T13:16:49Z", "type": "commit"}, {"oid": "335a01fc835e7aedca5d894f8ba50ca1ae0ef74b", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/335a01fc835e7aedca5d894f8ba50ca1ae0ef74b", "message": "Merge branch 'master' into compareResults", "committedDate": "2020-08-11T13:19:05Z", "type": "commit"}]}