{"pr_number": 141, "pr_title": "Auto Query Fixer: Implement the end-to-end data flow", "pr_createdAt": "2020-08-07T01:49:56Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141", "timeline": [{"oid": "a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "message": "init a project\ncreate and test a QueryTokenService", "committedDate": "2020-06-25T02:06:24Z", "type": "commit"}, {"oid": "0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "message": "reformat the code\nAdd comments", "committedDate": "2020-06-30T21:11:52Z", "type": "commit"}, {"oid": "0ebc50fab3773e85f8b30490392fce784f714f88", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0ebc50fab3773e85f8b30490392fce784f714f88", "message": "rename the package name to 'queryfixer'\n\nadd documents for classes", "committedDate": "2020-07-01T01:45:14Z", "type": "commit"}, {"oid": "eccb3d14310ca239e761705b5cab3c7c36768ff5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/eccb3d14310ca239e761705b5cab3c7c36768ff5", "message": "decompose the PR into multiple parts.\nThis is the first part: init the project and implement one feature of the QueryTokenProcessor", "committedDate": "2020-07-07T00:11:26Z", "type": "commit"}, {"oid": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "message": "minor change in BigQueryParserFactory", "committedDate": "2020-07-07T00:39:55Z", "type": "commit"}, {"oid": "cd47ab9d336640ffccccd762a54e7fa3058fb4ba", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cd47ab9d336640ffccccd762a54e7fa3058fb4ba", "message": "add BigQueryService", "committedDate": "2020-07-08T20:08:21Z", "type": "commit"}, {"oid": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8b86a8e36bd784a29c6e7357ff786036a77b80bf", "message": "revise the review", "committedDate": "2020-07-09T18:43:35Z", "type": "commit"}, {"oid": "7f907074ad2175483fa52068793fbafe3baf970e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7f907074ad2175483fa52068793fbafe3baf970e", "message": "minor fix", "committedDate": "2020-07-11T00:19:20Z", "type": "commit"}, {"oid": "5fc21d436af780f16ed51e00bb3b00c2509b0f4e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5fc21d436af780f16ed51e00bb3b00c2509b0f4e", "message": "Merge branch 'mepan_init' into master", "committedDate": "2020-07-11T00:26:03Z", "type": "commit"}, {"oid": "2c41e10f848ea306e0d10842bfa3e05592798b7e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2c41e10f848ea306e0d10842bfa3e05592798b7e", "message": "Merge branch 'master' into mepan_add_bq_server", "committedDate": "2020-07-11T00:49:36Z", "type": "commit"}, {"oid": "cf3f6c4eafc7c91b8c0172ce82d1ff8566968d19", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cf3f6c4eafc7c91b8c0172ce82d1ff8566968d19", "message": "Minor change", "committedDate": "2020-07-14T23:12:20Z", "type": "commit"}, {"oid": "0ec995d5a5ea403f94c91ed058473628aa66bc27", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0ec995d5a5ea403f94c91ed058473628aa66bc27", "message": "Merge branch 'master' of https://github.com/GoogleCloudPlatform/bigquery-utils into master", "committedDate": "2020-07-14T23:45:31Z", "type": "commit"}, {"oid": "2e82a5bd02d0dff1500944a4afa2ffeff09fd7e0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2e82a5bd02d0dff1500944a4afa2ffeff09fd7e0", "message": "remove .idea", "committedDate": "2020-07-14T23:48:38Z", "type": "commit"}, {"oid": "a4d35daedc6e5acf807a6246ab5589ead88be753", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a4d35daedc6e5acf807a6246ab5589ead88be753", "message": "Merge remote-tracking branch 'origin/master' into master", "committedDate": "2020-07-16T00:01:50Z", "type": "commit"}, {"oid": "d7926f0fd2ca80d6e2f43a40c5632ae2d2722052", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d7926f0fd2ca80d6e2f43a40c5632ae2d2722052", "message": "Merge branch 'master' of https://github.com/GoogleCloudPlatform/bigquery-utils", "committedDate": "2020-08-06T21:56:37Z", "type": "commit"}, {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f0b6c3b67b941470566dc93425bb6de0373538f3", "message": "Implement the end-to-end dataflow. The query fixer can support the frontend API.", "committedDate": "2020-08-07T01:45:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NDgwMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468144801", "bodyText": "\u201cThe error cannot be fixed automatically. \u201d", "author": "kikkyo", "createdAt": "2020-08-10T19:53:22Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/AutomaticQueryFixer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.BigQuerySqlError;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.SqlErrorFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.FixerFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.IFixer;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.CalciteTokenizer;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.Tokenizer;\n+\n+/**\n+ * The entity to perform fixing logic. It uses dry-run to identify an error, extracts a fixer based\n+ * on the error, fix the error, and return the fix result.\n+ */\n+public class AutomaticQueryFixer {\n+\n+  private final BigQueryService service;\n+  private final SqlErrorFactory errorFactory;\n+  private final FixerFactory fixerFactory;\n+\n+  public AutomaticQueryFixer(BigQueryOptions options) {\n+    service = new BigQueryService(options);\n+    errorFactory = new SqlErrorFactory();\n+    QueryTokenProcessor tokenProcessor = buildQueryTokenProcessor();\n+    fixerFactory = new FixerFactory(tokenProcessor, service);\n+  }\n+\n+  public FixResult fix(String query) {\n+    BigQueryException exception = service.catchExceptionFromDryRun(query);\n+    if (exception == null) {\n+      return FixResult.noError();\n+    }\n+\n+    BigQuerySqlError sqlError = errorFactory.getError(exception);\n+    if (sqlError == null) {\n+      return fixNotSupport(exception);\n+    }\n+\n+    IFixer fixer = fixerFactory.getFixer(query, sqlError);\n+    if (fixer == null) {\n+      return fixNotSupport(sqlError);\n+    }\n+\n+    return fixer.fix();\n+  }\n+\n+  private QueryTokenProcessor buildQueryTokenProcessor() {\n+    BigQueryParserFactory parserFactory = new BigQueryParserFactory();\n+    Tokenizer tokenizer = new CalciteTokenizer(parserFactory);\n+    return new QueryTokenProcessor(tokenizer);\n+  }\n+\n+  private FixResult fixNotSupport(BigQueryException exception) {\n+    return FixResult.builder()\n+        .status(FixResult.Status.FAILURE)\n+        .approach(\"The fix of this error is not supported\")", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NDkxMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468144912", "bodyText": "\u201cThe error cannot be fixed automatically. \u201d", "author": "kikkyo", "createdAt": "2020-08-10T19:53:33Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/AutomaticQueryFixer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.BigQuerySqlError;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.SqlErrorFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.FixerFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.IFixer;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.CalciteTokenizer;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.Tokenizer;\n+\n+/**\n+ * The entity to perform fixing logic. It uses dry-run to identify an error, extracts a fixer based\n+ * on the error, fix the error, and return the fix result.\n+ */\n+public class AutomaticQueryFixer {\n+\n+  private final BigQueryService service;\n+  private final SqlErrorFactory errorFactory;\n+  private final FixerFactory fixerFactory;\n+\n+  public AutomaticQueryFixer(BigQueryOptions options) {\n+    service = new BigQueryService(options);\n+    errorFactory = new SqlErrorFactory();\n+    QueryTokenProcessor tokenProcessor = buildQueryTokenProcessor();\n+    fixerFactory = new FixerFactory(tokenProcessor, service);\n+  }\n+\n+  public FixResult fix(String query) {\n+    BigQueryException exception = service.catchExceptionFromDryRun(query);\n+    if (exception == null) {\n+      return FixResult.noError();\n+    }\n+\n+    BigQuerySqlError sqlError = errorFactory.getError(exception);\n+    if (sqlError == null) {\n+      return fixNotSupport(exception);\n+    }\n+\n+    IFixer fixer = fixerFactory.getFixer(query, sqlError);\n+    if (fixer == null) {\n+      return fixNotSupport(sqlError);\n+    }\n+\n+    return fixer.fix();\n+  }\n+\n+  private QueryTokenProcessor buildQueryTokenProcessor() {\n+    BigQueryParserFactory parserFactory = new BigQueryParserFactory();\n+    Tokenizer tokenizer = new CalciteTokenizer(parserFactory);\n+    return new QueryTokenProcessor(tokenizer);\n+  }\n+\n+  private FixResult fixNotSupport(BigQueryException exception) {\n+    return FixResult.builder()\n+        .status(FixResult.Status.FAILURE)\n+        .approach(\"The fix of this error is not supported\")\n+        .error(exception.getMessage())\n+        .build();\n+  }\n+\n+  private FixResult fixNotSupport(BigQuerySqlError error) {\n+    return FixResult.builder()\n+        .status(FixResult.Status.FAILURE)\n+        .approach(\"The fix of this error is not supported\")", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NzI1MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468147251", "bodyText": "nit: of 'the' service account\nShould user provide the path to the json file here?", "author": "kikkyo", "createdAt": "2020-08-10T19:58:02Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5ODg3NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468198874", "bodyText": "Yes, this flag actually receives the path of the json file, rather than the content.", "author": "mingen-pan", "createdAt": "2020-08-10T21:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NzI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzAxMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468203012", "bodyText": "I have modified the description.", "author": "mingen-pan", "createdAt": "2020-08-10T21:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NzI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTE3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468149178", "bodyText": "maybe declare option value as constants \"output\", similar with others.", "author": "kikkyo", "createdAt": "2020-08-10T20:01:51Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMzgzNg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468833836", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-11T20:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQwMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468149401", "bodyText": "use static const", "author": "kikkyo", "createdAt": "2020-08-10T20:02:15Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjE2NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468152164", "bodyText": "maybe \"tutorial\"? or \"interactive\" instead of \"guide\"", "author": "kikkyo", "createdAt": "2020-08-10T20:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQ5NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468149495", "bodyText": "use static const", "author": "kikkyo", "createdAt": "2020-08-10T20:02:29Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjQzNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468836437", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-11T20:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTEwMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468151103", "bodyText": "What is customized credential here?", "author": "kikkyo", "createdAt": "2020-08-10T20:05:41Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjkyMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468836923", "bodyText": "I haven't implement the logic to read a credential file with a given path yet.", "author": "mingen-pan", "createdAt": "2020-08-11T20:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTMyNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468151325", "bodyText": "static const", "author": "kikkyo", "createdAt": "2020-08-10T20:06:10Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjk5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468836991", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-11T20:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTMyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTQyMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468151420", "bodyText": "static const", "author": "kikkyo", "createdAt": "2020-08-10T20:06:21Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzAyOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468837028", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-11T20:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1Mjg5Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468152893", "bodyText": "nit: \"fullInteractMode\" -> \"fixQueryInFullInteractMode\"? maybe \"fixQueryInInteractiveMode\"?", "author": "kikkyo", "createdAt": "2020-08-10T20:09:32Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzUxOQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468837519", "bodyText": "change to fixQueryInFullInteractMode.", "author": "mingen-pan", "createdAt": "2020-08-11T20:13:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1Mjg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1NDExMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468154113", "bodyText": "nit: \"The input query is valid. No errors to fix.'", "author": "kikkyo", "createdAt": "2020-08-10T20:12:00Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {\n+      printFixResultAsJson(fixResult);\n+    } else {\n+      System.out.println(\"Output Mode (-o) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void printFixResultAsJson(FixResult fixResult) {\n+    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n+    System.out.println(gson.toJson(fixResult));\n+  }\n+\n+  private static void printFixResultInCommandLine(FixResult fixResult) {\n+    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n+      System.out.println(\"The input query is correct\");", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzc2Nw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468837767", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-11T20:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1NDExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTEwOA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468161108", "bodyText": "\"Failed to fix the input query.\"", "author": "kikkyo", "createdAt": "2020-08-10T20:17:28Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {\n+      printFixResultAsJson(fixResult);\n+    } else {\n+      System.out.println(\"Output Mode (-o) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void printFixResultAsJson(FixResult fixResult) {\n+    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n+    System.out.println(gson.toJson(fixResult));\n+  }\n+\n+  private static void printFixResultInCommandLine(FixResult fixResult) {\n+    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n+      System.out.println(\"The input query is correct\");\n+      return;\n+    }\n+\n+    System.out.println(\"The query has an error: \" + fixResult.getError());\n+\n+    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n+      System.out.println(\"The input query is unable to fix\");", "originalCommit": "f0b6c3b67b941470566dc93425bb6de0373538f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTgzMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468161833", "bodyText": "or \"Error occurred when fixing the input query.\"", "author": "kikkyo", "createdAt": "2020-08-10T20:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzODIwMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468838202", "bodyText": "Change to \"Failed to fix the input query.\"", "author": "mingen-pan", "createdAt": "2020-08-11T20:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTEwOA=="}], "type": "inlineReview"}, {"oid": "b096853e36a902f0254cdbe9faf4d5c69384b7ba", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/b096853e36a902f0254cdbe9faf4d5c69384b7ba", "message": "Modify the code based on PR review.", "committedDate": "2020-08-11T20:17:35Z", "type": "commit"}, {"oid": "4449a298e84aef68a35a48b0acc5874a6e81e8da", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/4449a298e84aef68a35a48b0acc5874a6e81e8da", "message": "Change the option config", "committedDate": "2020-08-12T20:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjM5MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616391", "bodyText": "nit: TODO:", "author": "kikkyo", "createdAt": "2020-08-13T00:13:41Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -84,25 +102,34 @@ public static void main(String[] args) {\n \n     AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n \n-    String interactMode = cmd.getOptionValue(\"interact\");\n-    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n-      // todo: Implement Non-interactive mode\n-      FixResult fixResult = queryFixer.fix(query);\n-      if (fixResult.getOptions().isEmpty()) {\n+    String interactMode = cmd.getOptionValue(INTERACT);\n+    if (interactMode == null) {\n+      interactMode = INTERACT_MODE_NONE;\n+    }\n+    switch (interactMode) {\n+      case INTERACT_MODE_NONE:\n+        // todo: Implement Non-interactive mode", "originalCommit": "b096853e36a902f0254cdbe9faf4d5c69384b7ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyMzIxMg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470123212", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-13T17:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjQ0MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616441", "bodyText": "nit: TODO", "author": "kikkyo", "createdAt": "2020-08-13T00:13:49Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -84,25 +102,34 @@ public static void main(String[] args) {\n \n     AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n \n-    String interactMode = cmd.getOptionValue(\"interact\");\n-    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n-      // todo: Implement Non-interactive mode\n-      FixResult fixResult = queryFixer.fix(query);\n-      if (fixResult.getOptions().isEmpty()) {\n+    String interactMode = cmd.getOptionValue(INTERACT);\n+    if (interactMode == null) {\n+      interactMode = INTERACT_MODE_NONE;\n+    }\n+    switch (interactMode) {\n+      case INTERACT_MODE_NONE:\n+        // todo: Implement Non-interactive mode\n+        FixResult fixResult = queryFixer.fix(query);\n+        if (fixResult.getOptions().isEmpty()) {\n+          return;\n+        }\n+        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+        printQueryResult(newQuery, bigQueryOptions);\n+        break;\n+\n+      case INTERACT_MODE_GUIDE:\n+        // todo: Implement guide mode", "originalCommit": "b096853e36a902f0254cdbe9faf4d5c69384b7ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyMzQzNQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470123435", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-13T17:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjU3OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616578", "bodyText": "nit: 'C'ustomized credential path...", "author": "kikkyo", "createdAt": "2020-08-13T00:14:21Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -111,20 +138,21 @@ private static BigQueryOptions buildBigQueryOptions(String credentialPath, Strin\n       return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n     } else {\n       // TODO: should support this in near future.\n-      System.out.println(\"customized credential is not supported\");\n+      System.out.println(\"customized credential path is not supported\");", "originalCommit": "b096853e36a902f0254cdbe9faf4d5c69384b7ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNDc0MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470124740", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-13T17:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjg4OA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616888", "bodyText": "nit: \"modes\"", "author": "kikkyo", "createdAt": "2020-08-13T00:15:22Z", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -56,10 +59,10 @@ private static CommandLine readFlags(String[] args) {\n     options.addOption(option);\n     option =\n         new Option(\n-            /*opt=*/ INTERACT_SHORTCUT,\n-            /*long-opt=*/ INTERACT,\n+            /*opt=*/ MODE_SHORTCUT,\n+            /*long-opt=*/ MODE,\n             /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for their meanings\");", "originalCommit": "4449a298e84aef68a35a48b0acc5874a6e81e8da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNzAwNw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469617007", "bodyText": "nit: \"their meanings\" -> \"the detailed description.\"", "author": "kikkyo", "createdAt": "2020-08-13T00:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNDY5Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470124696", "bodyText": "Done", "author": "mingen-pan", "createdAt": "2020-08-13T17:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjg4OA=="}], "type": "inlineReview"}, {"oid": "af06b1b6dc68254c099d890206a16aa7c4c1230c", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/af06b1b6dc68254c099d890206a16aa7c4c1230c", "message": "Minor fix", "committedDate": "2020-08-13T17:35:15Z", "type": "commit"}, {"oid": "ac6f19cd9775c10bea3b3187a1a10e218b024a9a", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ac6f19cd9775c10bea3b3187a1a10e218b024a9a", "message": "Merge branch 'master' into main_dataflow", "committedDate": "2020-08-13T17:35:34Z", "type": "commit"}]}