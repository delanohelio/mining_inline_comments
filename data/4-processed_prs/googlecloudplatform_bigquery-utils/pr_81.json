{"pr_number": 81, "pr_title": "SQL Extraction: dataflow engine variable scope and environment", "pr_createdAt": "2020-07-01T22:32:11Z", "pr_url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81", "timeline": [{"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "message": "SQL Extraction: dataflow engine variable scope and environment", "committedDate": "2020-07-01T22:29:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0MTE5NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450441194", "bodyText": "nit: Visits method scope from an Antlr visitor**.** (with periods)", "author": "kikkyo", "createdAt": "2020-07-06T19:42:21Z", "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -20,6 +24,42 @@ class DataFlowEngine {\n             .map { QueryUsages(it.key, it.value.sorted()) }\n     }\n \n+    /**\n+     * Visits method scope from an Antlr visitor", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0MzgzNA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450443834", "bodyText": "nit: This comment is intentionally leave there for debugging purpose?\nIf just for logging, should we use LOGGER.log (if there is a log method :)).. and we should use \"Add method parameter $paramName.\"", "author": "kikkyo", "createdAt": "2020-07-06T19:48:08Z", "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -20,6 +24,42 @@ class DataFlowEngine {\n             .map { QueryUsages(it.key, it.value.sorted()) }\n     }\n \n+    /**\n+     * Visits method scope from an Antlr visitor\n+     *\n+     * @param[visitChildren] function to visit the rest of the method\n+     */\n+    fun visitMethod(visitChildren: () -> Unit) {\n+        visitScope(visitChildren)\n+    }\n+\n+    /**\n+     * Associates [paramName] as a method argument for the most recently called [visitMethod]\n+     */\n+    fun addMethodParameter(paramName: String) {\n+        LOGGER.debug(\"add method parameter $paramName\")", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTE3Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450445172", "bodyText": "nit: in java we usually just use interface Map<QueryFragment, Set> = HashMap() if it is the same in kotlin..", "author": "kikkyo", "createdAt": "2020-07-06T19:51:01Z", "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -3,12 +3,16 @@ package com.google.cloud.sqlecosystem.sqlextraction\n import com.google.cloud.sqlecosystem.sqlextraction.output.Location\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import mu.KotlinLogging\n+\n+private val LOGGER = KotlinLogging.logger { }\n \n /**\n  * Backend engine for running data-flow analysis\n+ *\n  * @see FrontEnd\n  */\n-class DataFlowEngine {\n+class DataFlowEngine(private val environment: Environment = Environment()) {\n     private val queryUsages: HashMap<QueryFragment, HashSet<Location>> = HashMap()", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2NTA5Ng==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450565096", "bodyText": "Map is immutable in Kotlin, but I can change it to MutableMap", "author": "creativitRy", "createdAt": "2020-07-07T01:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTU3NQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450445575", "bodyText": "Is this a global logger? should this be inside the class?", "author": "kikkyo", "createdAt": "2020-07-06T19:51:54Z", "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -3,12 +3,16 @@ package com.google.cloud.sqlecosystem.sqlextraction\n import com.google.cloud.sqlecosystem.sqlextraction.output.Location\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import mu.KotlinLogging\n+\n+private val LOGGER = KotlinLogging.logger { }", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2NDYyMw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450564623", "bodyText": "This was suggested by the framework as the preferred way of obtaining a logger. Otherwise, it increases boilerplate code.", "author": "creativitRy", "createdAt": "2020-07-07T01:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTU3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODYyMQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450458621", "bodyText": "Should we use init block instead?", "author": "kikkyo", "createdAt": "2020-07-06T20:20:43Z", "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2NjIxMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450566210", "bodyText": "That would execute for the other compiler as well, which is redundant. It might look cleaner though.", "author": "creativitRy", "createdAt": "2020-07-07T01:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MzA3Mg==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451063072", "bodyText": "Update: using init would break any code using the constructor without arguments.", "author": "creativitRy", "createdAt": "2020-07-07T18:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzODU1NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451038554", "bodyText": "The name reachingDefs is less than ideal for me. I would use something like variableUsage or variableReference.", "author": "feiling", "createdAt": "2020-07-07T17:46:15Z", "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzOTU2MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451039561", "bodyText": "I prefer name isVariableDeclaredInScope.", "author": "feiling", "createdAt": "2020-07-07T17:48:06Z", "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MDI4NA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451040284", "bodyText": "I prefer name like getVariableUsage or getVariableReference", "author": "feiling", "createdAt": "2020-07-07T17:49:21Z", "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MTQzMA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451041430", "bodyText": "Similarly, getVariableUsageOrDefault or getVariableReferenceOrDefault.", "author": "feiling", "createdAt": "2020-07-07T17:51:21Z", "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {\n+        return if (hasVariableInScope(varName)) {\n+            reachingDefs[varName]\n+        } else {\n+            parentScope!!.getVariable(varName)\n+        }\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     * [default] is returned if variable doesn't exist in any reachable scope.\n+     */\n+    fun getVariableOrDefault(varName: String, default: QueryFragment? = null): QueryFragment? {", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Mjg4MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451042881", "bodyText": "Seems parentScope!!.getVariableOrDefault(varName) should be parentScope!!.getVariableOrDefault(varName, default)?", "author": "feiling", "createdAt": "2020-07-07T17:53:50Z", "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {\n+        return if (hasVariableInScope(varName)) {\n+            reachingDefs[varName]\n+        } else {\n+            parentScope!!.getVariable(varName)\n+        }\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     * [default] is returned if variable doesn't exist in any reachable scope.\n+     */\n+    fun getVariableOrDefault(varName: String, default: QueryFragment? = null): QueryFragment? {\n+        return when {\n+            hasVariableInScope(varName) -> reachingDefs[varName]\n+            parentScope != null -> parentScope!!.getVariableOrDefault(varName)", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Nzk2MQ==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451047961", "bodyText": "Oh oops, thanks for pointing that out!", "author": "creativitRy", "createdAt": "2020-07-07T18:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Mjg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTc5MA==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451045790", "bodyText": "Will setVariable be called multiple times for the same variable?", "author": "feiling", "createdAt": "2020-07-07T17:58:43Z", "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {\n+        return if (hasVariableInScope(varName)) {\n+            reachingDefs[varName]\n+        } else {\n+            parentScope!!.getVariable(varName)\n+        }\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     * [default] is returned if variable doesn't exist in any reachable scope.\n+     */\n+    fun getVariableOrDefault(varName: String, default: QueryFragment? = null): QueryFragment? {\n+        return when {\n+            hasVariableInScope(varName) -> reachingDefs[varName]\n+            parentScope != null -> parentScope!!.getVariableOrDefault(varName)\n+            else -> default\n+        }\n+    }\n+\n+    /**\n+     * Overwrites the possible queries for the variable [varName] existing in the most recent scope.\n+     * Variable needs to be defined first to be set.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun setVariable(varName: String, query: QueryFragment?) {", "originalCommit": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0ODM4Mw==", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451048383", "bodyText": "Yes, it will be recursively called until the correct scope is found.", "author": "creativitRy", "createdAt": "2020-07-07T18:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTc5MA=="}], "type": "inlineReview"}, {"oid": "fe048f4735174e46ae581477e6bac4388593adf3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/fe048f4735174e46ae581477e6bac4388593adf3", "message": "Better names, better comments, better logs", "committedDate": "2020-07-07T20:17:26Z", "type": "commit"}, {"oid": "86ef7f32161426493fc29eb2cfa0d9804bbde637", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/86ef7f32161426493fc29eb2cfa0d9804bbde637", "message": "Fixed tests becoming flaky due to mocking lambda", "committedDate": "2020-07-08T19:39:51Z", "type": "commit"}, {"oid": "0bceee346bc8274bcbff00e4ee8cf5a788d0a918", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0bceee346bc8274bcbff00e4ee8cf5a788d0a918", "message": "Merge branch 'master' into env", "committedDate": "2020-07-09T22:28:01Z", "type": "commit"}]}