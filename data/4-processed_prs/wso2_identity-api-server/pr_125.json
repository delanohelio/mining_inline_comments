{"pr_number": 125, "pr_title": "Add Application Template API implementation", "pr_createdAt": "2020-03-25T13:17:29Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/125", "timeline": [{"oid": "c0f2ae1d26226a29a18ccd7bfde66e9d9726bd59", "url": "https://github.com/wso2/identity-api-server/commit/c0f2ae1d26226a29a18ccd7bfde66e9d9726bd59", "message": "Update application swagger with template APIs", "committedDate": "2020-03-25T12:32:15Z", "type": "commit"}, {"oid": "b9c25776d7b8ca82102dc989a9c1df4bd6261d7b", "url": "https://github.com/wso2/identity-api-server/commit/b9c25776d7b8ca82102dc989a9c1df4bd6261d7b", "message": "Generate classes from application.yaml", "committedDate": "2020-03-25T12:33:00Z", "type": "commit"}, {"oid": "db7917170a32d68518c7236b7374357e9da364c0", "url": "https://github.com/wso2/identity-api-server/commit/db7917170a32d68518c7236b7374357e9da364c0", "message": "Add application template API implementation", "committedDate": "2020-03-25T13:09:17Z", "type": "commit"}, {"oid": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "url": "https://github.com/wso2/identity-api-server/commit/fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "message": "Merge branch 'master' of https://github.com/wso2/identity-api-server", "committedDate": "2020-03-25T13:18:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDkxMg==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397914912", "bodyText": "This class is written in 2019 and this should be a singleton class...", "author": "thanujalk", "createdAt": "2020-03-25T14:49:43Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "diffHunk": "@@ -85,4 +88,14 @@ public static void setoAuthServerConfiguration(OAuthServerConfiguration oAuthSer\n \n         ApplicationManagementServiceHolder.oAuthServerConfiguration = oAuthServerConfiguration;\n     }\n+\n+    public static TemplateManager getTemplateManager() {\n+\n+        return templateManager;\n+    }\n+\n+    public static void setTemplateManager(TemplateManager templateManager) {\n+\n+        ApplicationManagementServiceHolder.templateManager = templateManager;", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNDU2Nw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398424567", "bodyText": "Fixed with a9f6e38", "author": "pamodaaw", "createdAt": "2020-03-26T09:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzAwMw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397917003", "bodyText": "change the src generator to have 2020.", "author": "thanujalk", "createdAt": "2020-03-25T14:52:19Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/gen/java/org/wso2/carbon/identity/api/server/application/management/v1/ApplicationTemplateModel.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/*\n+* Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODIyMA==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397918220", "bodyText": "missing method comment", "author": "thanujalk", "createdAt": "2020-03-25T14:53:47Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzE0Mw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123143", "bodyText": "added", "author": "pamodaaw", "createdAt": "2020-03-25T19:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODM4Ng==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397918386", "bodyText": "missing method comment", "author": "thanujalk", "createdAt": "2020-03-25T14:53:58Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzI1Mw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123253", "bodyText": "added", "author": "pamodaaw", "createdAt": "2020-03-25T19:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTc0OA==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397921748", "bodyText": "missing method comment", "author": "thanujalk", "createdAt": "2020-03-25T14:58:07Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzQxOA==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123418", "bodyText": "added", "author": "pamodaaw", "createdAt": "2020-03-25T19:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTgwNw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397921807", "bodyText": "missing method comment", "author": "thanujalk", "createdAt": "2020-03-25T14:58:11Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {\n+\n+        try {\n+            return new TemplateToApplicationTemplate().apply(getTemplateManager().getTemplateById(templateId));\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while retrieving the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void deleteApplicationTemplateById(String templateId) {", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzU3MQ==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123571", "bodyText": "added", "author": "pamodaaw", "createdAt": "2020-03-25T19:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTg4Nw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397921887", "bodyText": "missing method comment", "author": "thanujalk", "createdAt": "2020-03-25T14:58:17Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/ServerApplicationManagementService.java", "diffHunk": "@@ -475,6 +500,74 @@ public void updateCustomInbound(String applicationId, String inboundType,\n         putInbound(applicationId, customInbound, CustomInboundFunctions::putCustomInbound);\n     }\n \n+    public String createApplicationTemplate(ApplicationTemplateModel applicationTemplateModel) {\n+\n+        Template template = new ApplicationTemplateApiModelToTemplate().apply(applicationTemplateModel);\n+\n+        try {\n+            return getTemplateManager().addTemplate(template);\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while adding the new application template.\");\n+        }\n+    }\n+\n+    public ApplicationTemplatesList listApplicationTemplates(Integer limit, Integer offset) {\n+\n+        validatePaginationSupport(limit, offset);\n+        try {\n+            List<Template> templateList = getTemplateManager().listTemplates(TemplateMgtConstants.TemplateType\n+                    .APPLICATION_TEMPLATE.toString(), null, null);\n+            List<ApplicationTemplatesListItem> applicationTemplateList = templateList.stream().map(new\n+                    TemplateToApplicationTemplateListItem()).collect(Collectors.toList());\n+\n+            ApplicationTemplatesList applicationTemplates = new ApplicationTemplatesList();\n+            applicationTemplates.setTemplates(applicationTemplateList);\n+            return applicationTemplates;\n+        } catch (TemplateManagementException e) {\n+            throw handleTemplateManagementException(e, \"Error while listing application templates.\");\n+        }\n+    }\n+\n+    public ApplicationTemplateModel getApplicationTemplateById(String templateId) {\n+\n+        try {\n+            return new TemplateToApplicationTemplate().apply(getTemplateManager().getTemplateById(templateId));\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while retrieving the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void deleteApplicationTemplateById(String templateId) {\n+\n+        try {\n+            getTemplateManager().deleteTemplateById(templateId);\n+        } catch (TemplateManagementException e) {\n+            if (TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND.getCode().equals(e.getErrorCode())) {\n+                throw handleTemplateNotFoundException(e);\n+            }\n+            String errorMessage = \"Error while deleting the application template with id \" + templateId + \".\";\n+            throw handleTemplateManagementException(e, errorMessage);\n+        }\n+    }\n+\n+    public void updateApplicationTemplateById(String templateId, ApplicationTemplateModel model) {", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzY2NQ==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398123665", "bodyText": "added", "author": "pamodaaw", "createdAt": "2020-03-25T19:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyMTg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDI1Mw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397924253", "bodyText": "redundant empty check.", "author": "thanujalk", "createdAt": "2020-03-25T15:01:05Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplate.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.application.management.v1.core.functions.template;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationModel;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationTemplateModel;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.api.server.application.management.v1.core.functions.Utils.buildServerError;\n+\n+/**\n+ * Converts the Template to ApplicationTemplate model.\n+ */\n+public class TemplateToApplicationTemplate implements Function<Template, ApplicationTemplateModel> {\n+\n+    @Override\n+    public ApplicationTemplateModel apply(Template template) {\n+\n+        ApplicationTemplateModel applicationTemplate = new ApplicationTemplateModel();\n+        applicationTemplate.setName(template.getTemplateName());\n+        applicationTemplate.setId(template.getTemplateId());\n+        applicationTemplate.setDescription(template.getDescription());\n+        applicationTemplate.setImage(template.getImageUrl());\n+\n+        if (StringUtils.isNotBlank(template.getTemplateScript())) {\n+            applicationTemplate.setApplication(createApplicationTemplate(template.getTemplateScript()));\n+        }\n+\n+        if (!template.getPropertiesMap().isEmpty()) {", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMjU4Mg==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398312582", "bodyText": "Changed this to a null check. Otherwise there can be NullPointer Exceptions when trying to retrieve the data", "author": "pamodaaw", "createdAt": "2020-03-26T04:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDcyNA==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397924724", "bodyText": "redundant empty check.", "author": "thanujalk", "createdAt": "2020-03-25T15:01:38Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/java/org/wso2/carbon/identity/api/server/application/management/v1/core/functions/template/TemplateToApplicationTemplateListItem.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.application.management.v1.core.functions.template;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants;\n+import org.wso2.carbon.identity.api.server.application.management.v1.ApplicationTemplatesListItem;\n+import org.wso2.carbon.identity.api.server.common.Constants;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants\n+        .APPLICATION_MANAGEMENT_PATH_COMPONENT;\n+import static org.wso2.carbon.identity.api.server.application.management.common.ApplicationManagementConstants\n+        .APPLICATION_TEMPLATE_MANAGEMENT_PATH_COMPONENT;\n+\n+/**\n+ * Converts the Template to ApplicationTemplateListItem model.\n+ */\n+public class TemplateToApplicationTemplateListItem implements Function<Template, ApplicationTemplatesListItem> {\n+\n+    @Override\n+    public ApplicationTemplatesListItem apply(Template template) {\n+\n+        ApplicationTemplatesListItem listItem = new ApplicationTemplatesListItem();\n+        listItem.setName(template.getTemplateName());\n+        listItem.setId(template.getTemplateId());\n+        listItem.setSelf(getApplicationTemplateLocation(template.getTemplateId()));\n+        listItem.setDescription(template.getDescription());\n+        listItem.setImage(template.getImageUrl());\n+\n+        if (!template.getPropertiesMap().isEmpty()) {", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMjYxMw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398312613", "bodyText": "Changed this to a null check. Otherwise there can be NullPointer Exceptions when trying to retrieve the data", "author": "pamodaaw", "createdAt": "2020-03-26T04:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNTY5Mw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r397925693", "bodyText": "length exceeds 120.", "author": "thanujalk", "createdAt": "2020-03-25T15:02:55Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.v1/src/main/resources/META-INF/cxf/applications-server-v1-cxf.xml", "diffHunk": "@@ -47,4 +52,6 @@\n           class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.STSAdminOSGiServiceFactory\"/>\n     <bean id=\"samlSsoConfigServiceFactoryBean\"\n           class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.SAMLSSOConfigOSGiServiceFactory\"/>\n+    <bean id=\"templateManagerServiceFactoryBean\"\n+          class=\"org.wso2.carbon.identity.api.server.application.management.common.factory.TemplateManagementOSGiServiceFactory\"/>", "originalCommit": "fb18e163989ec3cc7a85a75e5c2e5a93b9a104aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMjk4Nw==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398312987", "bodyText": "In this file, the class name is given in a single line at all the other places. Therefore I used the same way.", "author": "pamodaaw", "createdAt": "2020-03-26T04:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNTY5Mw=="}], "type": "inlineReview"}, {"oid": "c4b475dec12a08487d4ec5993d185e5af058a96e", "url": "https://github.com/wso2/identity-api-server/commit/c4b475dec12a08487d4ec5993d185e5af058a96e", "message": "Format the code", "committedDate": "2020-03-25T19:41:17Z", "type": "forcePushed"}, {"oid": "6ae7431f108bc7583f571170d6b4211ab87dfaad", "url": "https://github.com/wso2/identity-api-server/commit/6ae7431f108bc7583f571170d6b4211ab87dfaad", "message": "Format the code", "committedDate": "2020-03-25T19:45:44Z", "type": "commit"}, {"oid": "6ae7431f108bc7583f571170d6b4211ab87dfaad", "url": "https://github.com/wso2/identity-api-server/commit/6ae7431f108bc7583f571170d6b4211ab87dfaad", "message": "Format the code", "committedDate": "2020-03-25T19:45:44Z", "type": "forcePushed"}, {"oid": "b9ff6445b895e120788d29c0b574465c1d8a3d22", "url": "https://github.com/wso2/identity-api-server/commit/b9ff6445b895e120788d29c0b574465c1d8a3d22", "message": "Bump carbon-identity-framework version", "committedDate": "2020-03-26T05:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNTg4MA==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398425880", "bodyText": "make the constructor of ApplicationManagementServiceHolder private", "author": "emswbandara", "createdAt": "2020-03-26T09:26:35Z", "path": "components/org.wso2.carbon.identity.api.server.application.management/org.wso2.carbon.identity.api.server.application.management.common/src/main/java/org/wso2/carbon/identity/api/server/application/management/common/ApplicationManagementServiceHolder.java", "diffHunk": "@@ -36,53 +40,70 @@\n \n     private static OAuthServerConfiguration oAuthServerConfiguration;\n \n-    public static ApplicationManagementService getApplicationManagementService() {\n+    private static TemplateManager templateManager;\n+", "originalCommit": "a9f6e387b927fc0e84b0abc4e46a77327e60649a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcxNTIxOA==", "url": "https://github.com/wso2/identity-api-server/pull/125#discussion_r398715218", "bodyText": "Added with 61c58f9", "author": "pamodaaw", "createdAt": "2020-03-26T16:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNTg4MA=="}], "type": "inlineReview"}, {"oid": "61c58f9c3daf7bc9ce32fe5c8c63fada52fda397", "url": "https://github.com/wso2/identity-api-server/commit/61c58f9c3daf7bc9ce32fe5c8c63fada52fda397", "message": "Make ApplicationManagement dataholder singleton", "committedDate": "2020-03-26T10:30:24Z", "type": "commit"}, {"oid": "61c58f9c3daf7bc9ce32fe5c8c63fada52fda397", "url": "https://github.com/wso2/identity-api-server/commit/61c58f9c3daf7bc9ce32fe5c8c63fada52fda397", "message": "Make ApplicationManagement dataholder singleton", "committedDate": "2020-03-26T10:30:24Z", "type": "forcePushed"}]}