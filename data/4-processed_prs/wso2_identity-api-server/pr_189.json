{"pr_number": 189, "pr_title": "Implement a REST API for CORS origin management", "pr_createdAt": "2020-07-23T05:32:50Z", "pr_url": "https://github.com/wso2/identity-api-server/pull/189", "timeline": [{"oid": "7312dbd31f0cc580bcda504085b977440cac7311", "url": "https://github.com/wso2/identity-api-server/commit/7312dbd31f0cc580bcda504085b977440cac7311", "message": "Add CORS API", "committedDate": "2020-07-23T05:35:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNTU3MQ==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r459225571", "bodyText": "shall we validate whether corsOriginId exists in the beginning and return 404 if not?", "author": "emswbandara", "createdAt": "2020-07-23T05:45:20Z", "path": "components/org.wso2.carbon.identity.api.server.cors/org.wso2.carbon.identity.api.server.cors.v1/src/main/java/org/wso2/carbon/identity/api/server/cors/v1/core/CORSService.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright\u00a0(c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * you may not use this file except in compliance with the License. \u00a0 \u00a0 \u00a0 \u00a0\n+ * You may obtain a copy of the License at \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * http://www.apache.org/licenses/LICENSE-2.0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * Unless required by applicable law or agreed to in writing, software \u00a0 \u00a0\u00a0\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, \u00a0 \u00a0 \u00a0\u00a0\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and \u00a0 \u00a0\u00a0\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.cors.v1.core;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.cors.common.CORSServiceHolder;\n+import org.wso2.carbon.identity.api.server.cors.common.Constants;\n+import org.wso2.carbon.identity.api.server.cors.v1.function.CORSOriginToCORSOriginGetObject;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginGetObject;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginPatch;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginPatchObject;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * Call internal OSGi services to perform server CORS management.\n+ */\n+public class CORSService {\n+\n+    private static final Log log = LogFactory.getLog(CORSService.class);\n+\n+    /**\n+     * Get a list of associated applications of a CORS origin.\n+     *\n+     * @return List of associated applications.\n+     */\n+    public List<String> getAssociatedAppsByCORSOrigin(String corsOriginId) {\n+\n+        try {", "originalCommit": "7312dbd31f0cc580bcda504085b977440cac7311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwMTU2Mg==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r461901562", "bodyText": "This is validated at the osgi service.", "author": "ivantha", "createdAt": "2020-07-28T21:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNTU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNTgwOA==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r459225808", "bodyText": "let's add debug log here", "author": "emswbandara", "createdAt": "2020-07-23T05:46:25Z", "path": "components/org.wso2.carbon.identity.api.server.cors/org.wso2.carbon.identity.api.server.cors.v1/src/main/java/org/wso2/carbon/identity/api/server/cors/v1/core/CORSService.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright\u00a0(c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * you may not use this file except in compliance with the License. \u00a0 \u00a0 \u00a0 \u00a0\n+ * You may obtain a copy of the License at \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * http://www.apache.org/licenses/LICENSE-2.0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * Unless required by applicable law or agreed to in writing, software \u00a0 \u00a0\u00a0\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, \u00a0 \u00a0 \u00a0\u00a0\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and \u00a0 \u00a0\u00a0\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.cors.v1.core;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.cors.common.CORSServiceHolder;\n+import org.wso2.carbon.identity.api.server.cors.common.Constants;\n+import org.wso2.carbon.identity.api.server.cors.v1.function.CORSOriginToCORSOriginGetObject;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginGetObject;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginPatch;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginPatchObject;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * Call internal OSGi services to perform server CORS management.\n+ */\n+public class CORSService {\n+\n+    private static final Log log = LogFactory.getLog(CORSService.class);\n+\n+    /**\n+     * Get a list of associated applications of a CORS origin.\n+     *\n+     * @return List of associated applications.\n+     */\n+    public List<String> getAssociatedAppsByCORSOrigin(String corsOriginId) {\n+\n+        try {\n+            String tenantDomain = ContextLoader.getTenantDomainFromContext();\n+            List<CORSOrigin> corsOriginList = CORSServiceHolder.getInstance().getCorsManagementService()\n+                    .getTenantCORSOrigins(tenantDomain);\n+            List<String> associatedApps = new ArrayList<>();\n+            for (CORSOrigin corsOrigin : corsOriginList) {\n+                if (corsOrigin.getId().equals(corsOriginId)) {\n+                    associatedApps.addAll(corsOrigin.getAppIds());\n+                }\n+            }\n+            return associatedApps;\n+        } catch (CORSManagementServiceException e) {\n+            throw handleCORSException(e, Constants.ErrorMessage.ERROR_CODE_CORS_RETRIEVE, null);\n+        }\n+    }\n+\n+    /**\n+     * Get a list of CORS origins allowed by the tenant.\n+     *\n+     * @return List of CORSOriginGetObject.\n+     */\n+    public List<CORSOriginGetObject> getCORSOrigins() {\n+\n+        try {\n+            String tenantDomain = ContextLoader.getTenantDomainFromContext();\n+            List<CORSOrigin> corsOriginList = CORSServiceHolder.getInstance().getCorsManagementService()\n+                    .getTenantCORSOrigins(tenantDomain);\n+            return corsOriginList.stream().map(new CORSOriginToCORSOriginGetObject()).collect(Collectors.toList());\n+        } catch (CORSManagementServiceException e) {\n+            throw handleCORSException(e, Constants.ErrorMessage.ERROR_CODE_CORS_RETRIEVE, null);\n+        }\n+    }\n+\n+    /**\n+     * Patch CORS origins. Patch 'REPLACE', 'ADD', 'REMOVE' operations have been supported for primary attributes in\n+     * CORSOrigin model.\n+     *\n+     * @param patchRequest Patch request in Json Patch notation See\n+     *                     <a href=\"https://tools.ietf.org/html/rfc6902\">https://tools.ietf\n+     *                     .org/html/rfc6902</a>.\n+     */\n+    public void patchCORSOrigins(List<CORSOriginPatch> patchRequest) {\n+\n+        if (CollectionUtils.isEmpty(patchRequest)) {\n+            return;", "originalCommit": "7312dbd31f0cc580bcda504085b977440cac7311", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjg4MQ==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r459226881", "bodyText": "shall we define an enum for this?", "author": "emswbandara", "createdAt": "2020-07-23T05:51:08Z", "path": "components/org.wso2.carbon.identity.api.server.cors/org.wso2.carbon.identity.api.server.cors.v1/src/main/resources/configs.yaml", "diffHunk": "@@ -0,0 +1,232 @@\n+openapi: 3.0.0\n+info:\n+  version: \"1.0.0\"\n+  title: 'WSO2 Identity Server - CORS API Definition'\n+  description: 'This document specifies a **RESTful API** for **WSO2 Identity Server CORS**'\n+  contact:\n+    name: WSO2\n+    url: 'http://wso2.com/products/identity-server/'\n+    email: architecture@wso2.org\n+  license:\n+    name: Apache 2.0\n+    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n+security:\n+  - OAuth2: []\n+  - BasicAuth: []\n+paths:\n+  /cors/origins:\n+    get:\n+      tags:\n+        - CORS origins\n+      summary: Retrieve the tenant CORS origins.\n+      operationId: getCORSOrigins\n+      description: Retrieve the tenant CORS origins.\n+      responses:\n+        '200':\n+          description: Successful Response\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CORSOriginsGetResponse'\n+        '400':\n+          description: Bad Request\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '401':\n+          description: Unauthorized\n+        '403':\n+          description: Forbidden\n+        '404':\n+          description: Not Found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '500':\n+          description: Server Error\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+    patch:\n+      tags:\n+        - CORS origins\n+      summary: Patch the tenant CORS origins.\n+      operationId: patchCORSOrigins\n+      description: A JSONPatch as defined by RFC 6902.\n+      requestBody:\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/CORSOriginPatchRequest'\n+        required: true\n+      responses:\n+        '200':\n+          description: Successful Response\n+        '400':\n+          description: Bad Request\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '401':\n+          description: Unauthorized\n+        '403':\n+          description: Forbidden\n+        '404':\n+          description: Not Found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '500':\n+          description: Server Error\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+  /cors/origins/{cors-origin-id}/apps:\n+    get:\n+      tags:\n+        - App associations\n+      summary: Retrieve the Applications associated with a CORS origin by ID.\n+      operationId: getAssociatedAppsByCORSOrigin\n+      description: Retrieve the Applications associated with a CORS origin by ID.\n+      parameters:\n+        - name: cors-origin-id\n+          in: path\n+          description: ID of a CORS origin\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        '200':\n+          description: Successful Response\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CORSOriginAppsGetResponse'\n+        '400':\n+          description: Bad Request\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '401':\n+          description: Unauthorized\n+        '403':\n+          description: Forbidden\n+        '404':\n+          description: Not Found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '500':\n+          description: Server Error\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+servers:\n+  - url: 'https://localhost:9443/t/{tenant-domain}/api/server/v1'\n+    variables:\n+      tenant-domain:\n+        default: carbon.super\n+components:\n+  securitySchemes:\n+    BasicAuth:\n+      type: http\n+      scheme: basic\n+    OAuth2:\n+      type: oauth2\n+      flows:\n+        authorizationCode:\n+          authorizationUrl: 'https://localhost:9443/oauth2/authorize'\n+          tokenUrl: 'https://localhost:9443/oauth2/token'\n+          scopes: {}\n+  parameters:\n+    typeQueryParam:\n+      in: query\n+      name: type\n+      required: false\n+      description: |\n+        Type of authenticators. Can be either 'LOCAL' or 'REQUEST_PATH'", "originalCommit": "7312dbd31f0cc580bcda504085b977440cac7311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2OTUzMw==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r465669533", "bodyText": "This part was not introduced through this PR.", "author": "ivantha", "createdAt": "2020-08-05T11:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzA1NQ==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r459227055", "bodyText": "shall we rename this to CORSOrigin?", "author": "emswbandara", "createdAt": "2020-07-23T05:51:46Z", "path": "components/org.wso2.carbon.identity.api.server.cors/org.wso2.carbon.identity.api.server.cors.v1/src/main/resources/configs.yaml", "diffHunk": "@@ -0,0 +1,232 @@\n+openapi: 3.0.0\n+info:\n+  version: \"1.0.0\"\n+  title: 'WSO2 Identity Server - CORS API Definition'\n+  description: 'This document specifies a **RESTful API** for **WSO2 Identity Server CORS**'\n+  contact:\n+    name: WSO2\n+    url: 'http://wso2.com/products/identity-server/'\n+    email: architecture@wso2.org\n+  license:\n+    name: Apache 2.0\n+    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n+security:\n+  - OAuth2: []\n+  - BasicAuth: []\n+paths:\n+  /cors/origins:\n+    get:\n+      tags:\n+        - CORS origins\n+      summary: Retrieve the tenant CORS origins.\n+      operationId: getCORSOrigins\n+      description: Retrieve the tenant CORS origins.\n+      responses:\n+        '200':\n+          description: Successful Response\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CORSOriginsGetResponse'\n+        '400':\n+          description: Bad Request\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '401':\n+          description: Unauthorized\n+        '403':\n+          description: Forbidden\n+        '404':\n+          description: Not Found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '500':\n+          description: Server Error\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+    patch:\n+      tags:\n+        - CORS origins\n+      summary: Patch the tenant CORS origins.\n+      operationId: patchCORSOrigins\n+      description: A JSONPatch as defined by RFC 6902.\n+      requestBody:\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/CORSOriginPatchRequest'\n+        required: true\n+      responses:\n+        '200':\n+          description: Successful Response\n+        '400':\n+          description: Bad Request\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '401':\n+          description: Unauthorized\n+        '403':\n+          description: Forbidden\n+        '404':\n+          description: Not Found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '500':\n+          description: Server Error\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+  /cors/origins/{cors-origin-id}/apps:\n+    get:\n+      tags:\n+        - App associations\n+      summary: Retrieve the Applications associated with a CORS origin by ID.\n+      operationId: getAssociatedAppsByCORSOrigin\n+      description: Retrieve the Applications associated with a CORS origin by ID.\n+      parameters:\n+        - name: cors-origin-id\n+          in: path\n+          description: ID of a CORS origin\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        '200':\n+          description: Successful Response\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CORSOriginAppsGetResponse'\n+        '400':\n+          description: Bad Request\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '401':\n+          description: Unauthorized\n+        '403':\n+          description: Forbidden\n+        '404':\n+          description: Not Found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+        '500':\n+          description: Server Error\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Error'\n+servers:\n+  - url: 'https://localhost:9443/t/{tenant-domain}/api/server/v1'\n+    variables:\n+      tenant-domain:\n+        default: carbon.super\n+components:\n+  securitySchemes:\n+    BasicAuth:\n+      type: http\n+      scheme: basic\n+    OAuth2:\n+      type: oauth2\n+      flows:\n+        authorizationCode:\n+          authorizationUrl: 'https://localhost:9443/oauth2/authorize'\n+          tokenUrl: 'https://localhost:9443/oauth2/token'\n+          scopes: {}\n+  parameters:\n+    typeQueryParam:\n+      in: query\n+      name: type\n+      required: false\n+      description: |\n+        Type of authenticators. Can be either 'LOCAL' or 'REQUEST_PATH'\n+      schema:\n+        type: string\n+  schemas:\n+    Error:\n+      type: object\n+      properties:\n+        code:\n+          type: string\n+          example: AAA-00000\n+        message:\n+          type: string\n+          example: Some Error Message\n+        description:\n+          type: string\n+          example: Some Error Description\n+        traceId:\n+          type: string\n+          example: e0fbcfeb-3617-43c4-8dd0-7b7d38e13047\n+    CORSOriginsGetResponse:\n+      type: array\n+      items:\n+        $ref: '#/components/schemas/CORSOriginGetObject'\n+    CORSOriginGetObject:", "originalCommit": "7312dbd31f0cc580bcda504085b977440cac7311", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwMzQwMg==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r461903402", "bodyText": "Then it clashes with the CORSOrigin in the osgi and one has to be used with the f.q. name.", "author": "ivantha", "createdAt": "2020-07-28T21:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyNDY1OA==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r462724658", "bodyText": "@emswbandara Currently, this is named CORSOriginObject due to the recent changes in the API? WDYT?\nAny suggestions for names?", "author": "ivantha", "createdAt": "2020-07-30T04:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzQ4Mw==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r459227483", "bodyText": "add new line EOF", "author": "emswbandara", "createdAt": "2020-07-23T05:53:33Z", "path": "components/org.wso2.carbon.identity.api.server.cors/pom.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <artifactId>identity-api-server</artifactId>\n+        <groupId>org.wso2.carbon.identity.server.api</groupId>\n+        <version>1.0.148-SNAPSHOT</version>\n+        <relativePath>../../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>org.wso2.carbon.identity.api.server.cors</artifactId>\n+    <packaging>pom</packaging>\n+\n+    <modules>\n+        <module>org.wso2.carbon.identity.api.server.cors.common</module>\n+        <module>org.wso2.carbon.identity.api.server.cors.v1</module>\n+    </modules>\n+</project>", "originalCommit": "7312dbd31f0cc580bcda504085b977440cac7311", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1MzY3OA==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r459253678", "bodyText": "Any possibility of corsOrigin.getId() being null? If so StringUtils.equals() can be used to avoid the possible NPE.", "author": "ashensw", "createdAt": "2020-07-23T07:10:19Z", "path": "components/org.wso2.carbon.identity.api.server.cors/org.wso2.carbon.identity.api.server.cors.v1/src/main/java/org/wso2/carbon/identity/api/server/cors/v1/core/CORSService.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright\u00a0(c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * you may not use this file except in compliance with the License. \u00a0 \u00a0 \u00a0 \u00a0\n+ * You may obtain a copy of the License at \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * http://www.apache.org/licenses/LICENSE-2.0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n+ * \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n+ * Unless required by applicable law or agreed to in writing, software \u00a0 \u00a0\u00a0\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, \u00a0 \u00a0 \u00a0\u00a0\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and \u00a0 \u00a0\u00a0\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.api.server.cors.v1.core;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.api.server.common.ContextLoader;\n+import org.wso2.carbon.identity.api.server.common.error.APIError;\n+import org.wso2.carbon.identity.api.server.common.error.ErrorResponse;\n+import org.wso2.carbon.identity.api.server.cors.common.CORSServiceHolder;\n+import org.wso2.carbon.identity.api.server.cors.common.Constants;\n+import org.wso2.carbon.identity.api.server.cors.v1.function.CORSOriginToCORSOriginGetObject;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginGetObject;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginPatch;\n+import org.wso2.carbon.identity.api.server.cors.v1.model.CORSOriginPatchObject;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceException;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceServerException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.core.Response;\n+\n+/**\n+ * Call internal OSGi services to perform server CORS management.\n+ */\n+public class CORSService {\n+\n+    private static final Log log = LogFactory.getLog(CORSService.class);\n+\n+    /**\n+     * Get a list of associated applications of a CORS origin.\n+     *\n+     * @return List of associated applications.\n+     */\n+    public List<String> getAssociatedAppsByCORSOrigin(String corsOriginId) {\n+\n+        try {\n+            String tenantDomain = ContextLoader.getTenantDomainFromContext();\n+            List<CORSOrigin> corsOriginList = CORSServiceHolder.getInstance().getCorsManagementService()\n+                    .getTenantCORSOrigins(tenantDomain);\n+            List<String> associatedApps = new ArrayList<>();\n+            for (CORSOrigin corsOrigin : corsOriginList) {\n+                if (corsOrigin.getId().equals(corsOriginId)) {", "originalCommit": "7312dbd31f0cc580bcda504085b977440cac7311", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "783f5614415831ab258db0cbe889617931341957", "url": "https://github.com/wso2/identity-api-server/commit/783f5614415831ab258db0cbe889617931341957", "message": "Add CORS API", "committedDate": "2020-07-28T02:55:42Z", "type": "forcePushed"}, {"oid": "f874a426432e04f9956f9a19214dae2e3a2e75e6", "url": "https://github.com/wso2/identity-api-server/commit/f874a426432e04f9956f9a19214dae2e3a2e75e6", "message": "Add CORS API", "committedDate": "2020-07-28T21:58:18Z", "type": "forcePushed"}, {"oid": "db3d3f2b6c6aebc85c3fe6e59cbea6dc46e0860f", "url": "https://github.com/wso2/identity-api-server/commit/db3d3f2b6c6aebc85c3fe6e59cbea6dc46e0860f", "message": "Add CORS API", "committedDate": "2020-07-30T04:17:28Z", "type": "forcePushed"}, {"oid": "2ab206bbf74d9a4b67c266777407944d0f65cf43", "url": "https://github.com/wso2/identity-api-server/commit/2ab206bbf74d9a4b67c266777407944d0f65cf43", "message": "Add CORS API", "committedDate": "2020-08-05T03:09:34Z", "type": "forcePushed"}, {"oid": "595bb6460f4f0bc24ece3b8d758c4153ec4c08f5", "url": "https://github.com/wso2/identity-api-server/commit/595bb6460f4f0bc24ece3b8d758c4153ec4c08f5", "message": "Add CORS API", "committedDate": "2020-08-05T12:03:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4NTU2Ng==", "url": "https://github.com/wso2/identity-api-server/pull/189#discussion_r466185566", "bodyText": "Make sure to update the pom versions to the latest before merging.", "author": "ashensw", "createdAt": "2020-08-06T06:57:27Z", "path": "components/org.wso2.carbon.identity.api.server.cors/pom.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <parent>\n+        <artifactId>identity-api-server</artifactId>\n+        <groupId>org.wso2.carbon.identity.server.api</groupId>\n+        <version>1.0.148-SNAPSHOT</version>", "originalCommit": "595bb6460f4f0bc24ece3b8d758c4153ec4c08f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af9be0a8a14603426b6bed8b5025dc15c7e1ae28", "url": "https://github.com/wso2/identity-api-server/commit/af9be0a8a14603426b6bed8b5025dc15c7e1ae28", "message": "Add CORS API", "committedDate": "2020-08-06T14:43:06Z", "type": "commit"}, {"oid": "af9be0a8a14603426b6bed8b5025dc15c7e1ae28", "url": "https://github.com/wso2/identity-api-server/commit/af9be0a8a14603426b6bed8b5025dc15c7e1ae28", "message": "Add CORS API", "committedDate": "2020-08-06T14:43:06Z", "type": "forcePushed"}]}