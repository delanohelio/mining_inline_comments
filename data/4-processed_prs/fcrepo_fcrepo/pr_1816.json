{"pr_number": 1816, "pr_title": "all db commits within the same db transaction", "pr_createdAt": "2020-11-24T15:58:07Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1816", "timeline": [{"oid": "7cc9538527be86027d03cf93a882096d9a2ebaa3", "url": "https://github.com/fcrepo/fcrepo/commit/7cc9538527be86027d03cf93a882096d9a2ebaa3", "message": "fixed transaction rollback so that all db commits are contained within the same db transaction", "committedDate": "2020-11-24T15:53:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTUwMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1816#discussion_r529729501", "bodyText": "I think this NOT_FOUND response is coming from the containment index, which failed and should have rolled back. Could we have one of the other services fail instead, like the ocfl Index, reference service or membership service? Just to ensure all the transactions are being rolled back.", "author": "whikloj", "createdAt": "2020-11-24T16:54:31Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/TransactionsIT.java", "diffHunk": "@@ -194,6 +196,47 @@ public void testCreateDoStuffAndRollbackTransaction() throws IOException {\n                 CONFLICT.getStatusCode(), getStatus(addTxTo(new HttpGet(newLocation), txLocation)));\n     }\n \n+    @Test\n+    public void testRollbackShouldNotLeaveDbInPartiallyUpdatedState() throws IOException {\n+        /* create a tx */\n+        final String txLocation = createTransaction();\n+\n+        /* create a new object inside the tx */\n+        final String newLocation;\n+        final HttpPost postNew = new HttpPost(serverAddress);\n+        postNew.addHeader(ATOMIC_ID_HEADER, txLocation);\n+        try (final CloseableHttpResponse resp = execute(postNew)) {\n+            assertEquals(CREATED.getStatusCode(), getStatus(resp));\n+            newLocation = getLocation(resp);\n+        }\n+\n+        final var resourceId = StringUtils.substringAfterLast(newLocation, \"/\");\n+\n+        /* fetch the created tx from the endpoint */\n+        try (final CloseableDataset dataset = getDataset(addTxTo(new HttpGet(newLocation), txLocation))) {\n+            assertTrue(dataset.asDatasetGraph().contains(ANY, createURI(newLocation), ANY, ANY));\n+        }\n+        /* fetch the created tx from the endpoint */\n+        assertEquals(\"Expected to not find our object within the scope of the transaction\",\n+                NOT_FOUND.getStatusCode(), getStatus(new HttpGet(newLocation)));\n+\n+        // Add a conflicting record to the database\n+        final var containmentIndex = getBean(\"containmentIndex\", ContainmentIndex.class);\n+        containmentIndex.addContainedBy(\"bogus\", FedoraId.getRepositoryRootId(), FedoraId.create(resourceId));\n+        containmentIndex.commitTransaction(\"bogus\");\n+\n+        // Commit transaction -- should fail\n+        assertEquals(CONFLICT.getStatusCode(), getStatus(new HttpPut(txLocation)));\n+\n+        assertEquals(\"Rolled back transaction should be gone\",\n+                GONE.getStatusCode(), getStatus(new HttpGet(txLocation)));\n+\n+        assertEquals(\"Expected to not find our object after rollback\",", "originalCommit": "7cc9538527be86027d03cf93a882096d9a2ebaa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1OTIzMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1816#discussion_r529759233", "bodyText": "The Fedora to OCFL mapping is persisted first, and then the containment index. This test does correctly confirm that the OCFL mapping is rolled back when the containment index update fails -- except in MySQL which is apparently not rolling back for some reason.", "author": "pwinckles", "createdAt": "2020-11-24T17:38:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3MDQ5NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1816#discussion_r529770495", "bodyText": "On GET resource requests, the the OCFL mapping table is accessed when the resource headers are loaded before the containment table is checked.", "author": "pwinckles", "createdAt": "2020-11-24T17:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5OTQxOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1816#discussion_r529899419", "bodyText": "My mistake, you are correct.", "author": "whikloj", "createdAt": "2020-11-24T21:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTUwMQ=="}], "type": "inlineReview"}, {"oid": "4b5e9e1a7e448a76d694825620ab217fd5b9c5e3", "url": "https://github.com/fcrepo/fcrepo/commit/4b5e9e1a7e448a76d694825620ab217fd5b9c5e3", "message": "added unique index to mysql containment table", "committedDate": "2020-11-24T18:07:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyMjkzOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1816#discussion_r530622938", "bodyText": "You can just add the PRIMARY KEY to the fedora_id line, I'm not sure why it disappeared but clearly I made a mistake.", "author": "whikloj", "createdAt": "2020-11-25T20:19:36Z", "path": "fcrepo-kernel-impl/src/main/resources/sql/mysql-containment.sql", "diffHunk": "@@ -3,10 +3,11 @@\n \n -- Holds the ID and its parent.\n CREATE TABLE IF NOT EXISTS containment (\n-    fedora_id  varchar(503) NOT NULL,\n+    fedora_id varchar(503) NOT NULL,\n     parent varchar(503) NOT NULL,\n     start_time timestamp NOT NULL,\n-    end_time timestamp NULL\n+    end_time timestamp NULL,\n+    UNIQUE KEY (fedora_id)", "originalCommit": "4b5e9e1a7e448a76d694825620ab217fd5b9c5e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyOTQ5NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1816#discussion_r530629494", "bodyText": "Yeah, I can change that. I originally wrote it that way because I was browsing some discussion about varchar primary keys, which a lot of folks advise against for performance reasons. In this case, the key difference between using PRIMARY KEY vs UNIQUE KEY is that the former creates a clustered index and the later creates a non-clustered index. Because we will not be adding keys sequentially, this is less ideal for clustered indexes.\nThat said, I don't mind changing it. All of the other databases are currently defined with PRIMARY KEY, lookup should still be faster with the clustered index, and it's unclear how much of a difference it even makes.", "author": "pwinckles", "createdAt": "2020-11-25T20:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyMjkzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMDg0OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1816#discussion_r530630849", "bodyText": "I agree that having someone with more indepth DB experience have a look at our schemas (<wink> <wink> @birkland) would be helpful. If you want to leave this as is, I'm fine. Just don't want people to think there is a specific reason that MySQL is different.", "author": "whikloj", "createdAt": "2020-11-25T20:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyMjkzOA=="}], "type": "inlineReview"}, {"oid": "0d8020615cb1d056bffbc27c5f0a623eb7002424", "url": "https://github.com/fcrepo/fcrepo/commit/0d8020615cb1d056bffbc27c5f0a623eb7002424", "message": "change msyql containment to primary key", "committedDate": "2020-11-25T20:37:29Z", "type": "commit"}]}