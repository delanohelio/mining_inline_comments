{"pr_number": 1613, "pr_title": "FCREPO-3079 - GET binary", "pr_createdAt": "2020-01-28T19:50:43Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1613", "timeline": [{"oid": "b203cc734382a1692b6829067b665de442310656", "url": "https://github.com/fcrepo/fcrepo/commit/b203cc734382a1692b6829067b665de442310656", "message": "implement binary retrieve in ocfl sessions", "committedDate": "2020-01-28T18:14:11Z", "type": "commit"}, {"oid": "ea634ed59ae596bfe2bf91ced02be380e1ac70c9", "url": "https://github.com/fcrepo/fcrepo/commit/ea634ed59ae596bfe2bf91ced02be380e1ac70c9", "message": "Reorganization of @GET method to skip unnecessary creation of rdf stream when getting binary content, and to separate binary from rdf retrieval, similar to how the HEAD method is organized. Fix issue with content size of binaries when content disposition is present but no content size specified. Wire up retrieval of binary content.", "committedDate": "2020-01-28T19:19:01Z", "type": "commit"}, {"oid": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e", "url": "https://github.com/fcrepo/fcrepo/commit/80c478a99b3c7dec2ccb5ffb75aae053d41ae14e", "message": "Remove unused range parameter from GET methods that don't retrieve binaries, and from the getContent helper method", "committedDate": "2020-01-28T19:40:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjU5Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372396596", "bodyText": "Nit-pick, maybe the name should specify that you are mocking a Create NonRdfSource Operation. Eventually we might need one for Update as well.", "author": "whikloj", "createdAt": "2020-01-29T13:58:57Z", "path": "fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSessionTest.java", "diffHunk": "@@ -591,4 +597,97 @@ public void getTriplesFromPreviousVersion() throws Exception {\n         assertEquals(node, retrievedUserStream.topic());\n         assertEquals(dcTitleTriple, retrievedUserStream.findFirst().get());\n     }\n+\n+    @Test\n+    public void getBinaryContent() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // commit to OCFL\n+        session.commit();\n+\n+        // create a new session and verify the returned rdf stream.\n+        final var newSession = createSession(index, objectSessionFactory);\n+        final var result = IOUtils.toString(newSession.getBinaryContent(RESOURCE_ID, null), UTF_8);\n+\n+        assertEquals(BINARY_CONTENT, result);\n+    }\n+\n+    @Test\n+    public void getBinaryContentFailsIfAlreadyCommitted() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // commit to OCFL\n+        session.commit();\n+\n+        try {\n+            session.getBinaryContent(RESOURCE_ID, null);\n+            fail(\"Get must fail due to session having been committed\");\n+        } catch (final PersistentStorageException ex) {\n+            // expected failure, handled with catch since the persist can throw same error\n+        }\n+    }\n+\n+    @Test\n+    public void getBinaryContentVersion() throws Exception {\n+        DefaultOCFLObjectSession.setGlobaDefaultCommitOption(NEW_VERSION);\n+        // SEE getTriplesFromPreviousVersion\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+        // commit to OCFL\n+        session.commit();\n+\n+        // create a new session and verify that the state is the same\n+        final var newSession = createSession(index, objectSessionFactory);\n+\n+        final var versions = newSession.listVersions(RESOURCE_ID);\n+        final var version1 = versions.get(versions.size() - 1);\n+        assertEquals(BINARY_CONTENT,\n+                IOUtils.toString(newSession.getBinaryContent(RESOURCE_ID, version1), UTF_8));\n+    }\n+\n+    @Test\n+    public void getBinaryContentUncommitted() throws Exception {\n+        mockMappingAndIndex(mintOCFLObjectId(RESOURCE_ID), RESOURCE_ID, ROOT_OBJECT_ID, mapping);\n+\n+        // create the binary\n+        final var binOperation = mockNonRdfSourceOperation(BINARY_CONTENT, USER_PRINCIPAL, RESOURCE_ID);\n+\n+        // perform the create non-rdf source operation\n+        session.persist(binOperation);\n+\n+        // create a new session and verify the returned rdf stream.\n+        final var result = IOUtils.toString(session.getBinaryContent(RESOURCE_ID, null), UTF_8);\n+\n+        assertEquals(BINARY_CONTENT, result);\n+    }\n+\n+    private NonRdfSourceOperation mockNonRdfSourceOperation(final String content,", "originalCommit": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNDMwMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372414301", "bodyText": "updated", "author": "bbpennel", "createdAt": "2020-01-29T14:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NzI4NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372397285", "bodyText": "Should this not take a transaction? What if the binary is created and then GETted inside a single long-running transaction?", "author": "whikloj", "createdAt": "2020-01-29T14:00:11Z", "path": "fcrepo-persistence-ocfl/src/main/java/org/fcrepo/persistence/ocfl/impl/OCFLPersistentStorageSession.java", "diffHunk": "@@ -253,9 +254,16 @@ public RdfStream getTriples(final String identifier, final Instant version)\n \n     @Override\n     public InputStream getBinaryContent(final String identifier, final Instant version)", "originalCommit": "80c478a99b3c7dec2ccb5ffb75aae053d41ae14e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNDIzNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r372414235", "bodyText": "The class this method is in is effectively the transaction at the persistence layer, so it should be resolving to the state of the long running transaction that the GET is taking place in", "author": "bbpennel", "createdAt": "2020-01-29T14:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NzI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNjA2Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1613#discussion_r373036066", "bodyText": "This went 90% over my head, but I think I got enough to be okay.", "author": "whikloj", "createdAt": "2020-01-30T15:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NzI4NQ=="}], "type": "inlineReview"}]}