{"pr_number": 1681, "pr_title": "Fix WebAC and enable integration tests", "pr_createdAt": "2020-05-10T03:31:13Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1681", "timeline": [{"oid": "8de1ee5d03cff1fc307bf7cdc210a3fd12a8d2f1", "url": "https://github.com/fcrepo/fcrepo/commit/8de1ee5d03cff1fc307bf7cdc210a3fd12a8d2f1", "message": "Fix up WebACFilter and associated auth stuff.", "committedDate": "2020-05-10T02:19:04Z", "type": "commit"}, {"oid": "595f42dbd1ed68ef222c392d813c6a91f23f8a3b", "url": "https://github.com/fcrepo/fcrepo/commit/595f42dbd1ed68ef222c392d813c6a91f23f8a3b", "message": "Fix auth-common test", "committedDate": "2020-05-10T02:51:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMjcwMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423112703", "bodyText": "It seems odd to me that a ResourceFactory would be used for looking up a container id. I see that when this method is actually used, you're still ultimately loading the container FedoraResource. Can this method be FedoraResource getContainer(final Transaction transaction, final FedoraId resourceId) instead?", "author": "pwinckles", "createdAt": "2020-05-11T15:12:33Z", "path": "fcrepo-kernel-api/src/main/java/org/fcrepo/kernel/api/models/ResourceFactory.java", "diffHunk": "@@ -82,4 +82,12 @@ public FedoraResource getResource(final Transaction transaction, final FedoraId\n      * @return True if the identifier resolves to a resource.\n      */\n     public boolean doesResourceExist(final Transaction transaction, final FedoraId fedoraId);\n+\n+    /**\n+     * Get the containing resource ID (if exists).\n+     * @param transaction The current transaction or null if read-only.\n+     * @param resourceId The internal identifer\n+     * @return The string id of the containing resource or null if none.\n+     */\n+    public String getContainerId(final Transaction transaction, final FedoraId resourceId);", "originalCommit": "595f42dbd1ed68ef222c392d813c6a91f23f8a3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4MzE5Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423183192", "bodyText": "I am fine with that.", "author": "whikloj", "createdAt": "2020-05-11T16:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMjcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMzg0NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423113844", "bodyText": "Will resolve not prepend a slash as necessary? This is the expectation with Java's Path::resolve().", "author": "pwinckles", "createdAt": "2020-05-11T15:14:04Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/models/FedoraResourceImpl.java", "diffHunk": "@@ -174,8 +178,15 @@ public FedoraResource findMementoByDatetime(final Instant mementoDatetime) {\n \n     @Override\n     public FedoraResource getAcl() {\n-        // TODO Auto-generated method stub\n-        return null;\n+        if (isAcl()) {\n+            return this;\n+        }\n+        try {\n+            final var aclId = fedoraID.resolve(\"/\" + FCR_ACL);", "originalCommit": "595f42dbd1ed68ef222c392d813c6a91f23f8a3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4NjEwMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423186102", "bodyText": "Not really, we have resolve which interprets a path with a starting slash (ie. /fcr:acl) as absolute (ie. starting from the resourceId) or if no starting slash (ie. fcr:versions) as relative ie. starting from the fullId.\nIdea is\nfinal FedoraId id1 = FedoraId.create(\"info:fedora/object1/fcr:metadata\");\n\nfinal FedoraId id2 = id1.resolve(\"/fcr:versions\");\n// id2.getFullId == info:fedora/object1/fcr:versions\n\nfinal FedoraId id3 = id1.resolve(\"fcr:acl\");\n// id3.getFullId == info:fedora/object1/fcr:metadata/fcr:acl", "author": "whikloj", "createdAt": "2020-05-11T17:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMzg0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4OTYxNg==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423189616", "bodyText": "Ah, I see. I didn't realize it had that behavior.", "author": "pwinckles", "createdAt": "2020-05-11T17:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMzg0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyMzA3NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423123075", "bodyText": "Isn't there code somewhere else that also walks up id containment like this? Perhaps related to looking for AGs? It seems like it might be a useful thing to have extracted somewhere. What if FedoraId itself had a method for creating a new FedoraId of its parent?", "author": "pwinckles", "createdAt": "2020-05-11T15:26:56Z", "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACAuthorizingRealm.java", "diffHunk": "@@ -230,24 +230,26 @@ public boolean supports(final AuthenticationToken token) {\n         return false;\n     }\n \n-    private FedoraResource getResourceOrParentFromPath(final String path) {\n+    private FedoraResource getResourceOrParentFromPath(final FedoraId fedoraId) {\n         FedoraResource resource = null;\n-        log.debug(\"Attempting to get FedoraResource for {}\", path);\n+        log.debug(\"Attempting to get FedoraResource for {}\", fedoraId.getFullIdPath());\n         try {\n-            resource = translator().convert(translator().toDomain(path));\n-            log.debug(\"Got FedoraResource for {}\", path);\n-        } catch (final RepositoryRuntimeException e) {\n-            if (e.getCause() instanceof PathNotFoundRuntimeException) {\n-                log.debug(\"Path {} does not exist\", path);\n-                // go up the path looking for a node that exists\n-                if (path.length() > 1) {\n-                    final int lastSlash = path.lastIndexOf(\"/\");\n-                    final int end = lastSlash > 0 ? lastSlash : lastSlash + 1;\n-                    resource = getResourceOrParentFromPath(path.substring(0, end));\n-                }\n+            resource = resource(fedoraId);\n+            log.debug(\"Got FedoraResource for {}\", fedoraId.getFullIdPath());\n+        } catch (final PathNotFoundException e) {\n+            log.debug(\"Path {} does not exist\", fedoraId.getFullIdPath());\n+            // go up the path looking for a node that exists\n+            if (fedoraId.getFullId().length() > 1) {", "originalCommit": "595f42dbd1ed68ef222c392d813c6a91f23f8a3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4NjYxOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423186618", "bodyText": "Yeah maybe in the resourceFactory, I'll have a look", "author": "whikloj", "createdAt": "2020-05-11T17:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyMzA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NTc4NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423195785", "bodyText": "So the code is in the fcrepo-kernel-impl's AbstractService.\nIssue is the CreateResourceService has a containment index injected but not a resourceFactory and the WebACFilter has a ResourceFactory injected but not a containment index...\nthoughts?", "author": "whikloj", "createdAt": "2020-05-11T17:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyMzA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5OTI3NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423199274", "bodyText": "I was thinking something like this in FedoraId:\nFedoraId getParentId() {\n    final int lastSlash = fedoraId.getFullId().lastIndexOf(\"/\");\n    final int end = lastSlash > 0 ? lastSlash : lastSlash + 1;\n    return FedoraId.create(fedoraId.getFullId().substring(0, end));\n}\n\nWould that be usable both here and in AbstractService?", "author": "pwinckles", "createdAt": "2020-05-11T17:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyMzA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMzM4MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423203381", "bodyText": "The one in the AbstractService actually uses the containment index to try and avoid relying on the path. Might be better to just inject the containment index and move the AbstractService function right into the containment index. At some point ghost nodes will make this path iterating code a problem", "author": "whikloj", "createdAt": "2020-05-11T17:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyMzA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4MzkyMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423283922", "bodyText": "Actually now that I look at it, they are sort of the same. But the one in WebAC is checking for actual existence on the file system for each parent. We aren't doing that in CreateResourceService. Not sure if we should be", "author": "whikloj", "createdAt": "2020-05-11T19:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyMzA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyODI1MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423128251", "bodyText": "Out of curiosity, why implement this as a predicate rather than a simple private method?", "author": "pwinckles", "createdAt": "2020-05-11T15:34:08Z", "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACFilter.java", "diffHunk": "@@ -134,20 +136,14 @@ public String toString() {\n     @Inject\n     private TransactionManager transactionManager;\n \n-    private static Set<URI> directOrIndirect = new HashSet<>();\n-\n-    private static Set<String> rdfContentTypes = new HashSet<>();\n+    private static Set<URI> directOrIndirect = Set.of(INDIRECT_CONTAINER, DIRECT_CONTAINER).stream()\n+            .map(Resource::toString).map(URI::create).collect(Collectors.toSet());\n \n-    static {\n-        directOrIndirect.add(URI.create(INDIRECT_CONTAINER.toString()));\n-        directOrIndirect.add(URI.create(DIRECT_CONTAINER.toString()));\n+    private static Set<String> rdfContentTypes = Set.of(contentTypeTurtle, contentTypeJSONLD, contentTypeN3,\n+            contentTypeRDFXML, contentTypeNTriples);\n \n-        rdfContentTypes.add(contentTypeTurtle);\n-        rdfContentTypes.add(contentTypeJSONLD);\n-        rdfContentTypes.add(contentTypeN3);\n-        rdfContentTypes.add(contentTypeRDFXML);\n-        rdfContentTypes.add(contentTypeNTriples);\n-    }\n+    private static Predicate<FedoraResource> isBinaryOrDescription = r -> r.getTypes().stream().map(URI::toString)", "originalCommit": "595f42dbd1ed68ef222c392d813c6a91f23f8a3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4NzAxMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423187011", "bodyText": "No reason, would you prefer a method?", "author": "whikloj", "createdAt": "2020-05-11T17:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyODI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MDY5Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423190697", "bodyText": "I think a method is more readable, but it's completely up to you and not a blocker.", "author": "pwinckles", "createdAt": "2020-05-11T17:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyODI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NTk3NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423195974", "bodyText": "I think I thought we would be streaming, I can switch this to a method.", "author": "whikloj", "createdAt": "2020-05-11T17:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyODI1MQ=="}], "type": "inlineReview"}, {"oid": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "url": "https://github.com/fcrepo/fcrepo/commit/d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "message": "Code review", "committedDate": "2020-05-12T01:45:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMDczMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423700731", "bodyText": "Not something that should be addressed here, but I've seen this transaction code everywhere. Perhaps it would be cleaner if transaction() returned Optional<Transaction>?", "author": "pwinckles", "createdAt": "2020-05-12T12:41:36Z", "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACAuthorizingRealm.java", "diffHunk": "@@ -231,25 +235,22 @@ public boolean supports(final AuthenticationToken token) {\n     }\n \n     private FedoraResource getResourceOrParentFromPath(final FedoraId fedoraId) {\n-        FedoraResource resource = null;\n-        log.debug(\"Attempting to get FedoraResource for {}\", fedoraId.getFullIdPath());\n         try {\n-            resource = resource(fedoraId);\n-            log.debug(\"Got FedoraResource for {}\", fedoraId.getFullIdPath());\n-        } catch (final PathNotFoundException e) {\n-            log.debug(\"Path {} does not exist\", fedoraId.getFullIdPath());\n-            // go up the path looking for a node that exists\n-            if (fedoraId.getFullId().length() > 1) {\n-                final int lastSlash = fedoraId.getFullId().lastIndexOf(\"/\");\n-                final int end = lastSlash > 0 ? lastSlash : lastSlash + 1;\n-                resource = getResourceOrParentFromPath(FedoraId.create(fedoraId.getFullId().substring(0, end)));\n+            log.debug(\"Testing FedoraResource for {}\", fedoraId.getFullIdPath());\n+            return this.resourceFactory.getResource(transaction(), fedoraId);\n+        } catch (final PathNotFoundException exc) {\n+            log.debug(\"Resource {} not found getting container\", fedoraId.getFullIdPath());\n+            final String txID = transaction() == null ? null : transaction().getId();", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0MjYyOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423842629", "bodyText": "Not sure I understand what you are thinking? Because the transactionManager returns a transaction object or null, wouldn't getting an Optional just mean a different test?", "author": "whikloj", "createdAt": "2020-05-12T15:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMDczMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1Mzg2Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r423853863", "bodyText": "Yes, and no. I don't use optional a lot because I think Java's implementation has some flaws, but it can be useful in some cases, especially when you want to remind the consumer of an API that a method could legitimately return null. This forces the proper handling of a null condition, which is easy to forget to do.\nIn this particular case, the code could be rewritten as, if transaction returned Optional:\nfinal String txID = transaction().map(Transaction::getId).orElse(null);\n\nWhether or not you think that's better or worse than a null check is largely a matter of taste. Regardless, I just mentioned it because it was on my mind, and not because I am expecting you to change anything here.", "author": "pwinckles", "createdAt": "2020-05-12T16:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMDczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTkyNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425499925", "bodyText": "Thank you.", "author": "awoods", "createdAt": "2020-05-15T00:22:57Z", "path": "fcrepo-auth-common/src/test/resources/web.xml", "diffHunk": "@@ -5,7 +5,7 @@\n \t xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n \t version=\"3.0\" metadata-complete=\"false\">\n     \n-    <display-name>Fedora-on-ModeShape</display-name>", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMDQ0Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425500446", "bodyText": "Probably should use ${project.version}.", "author": "awoods", "createdAt": "2020-05-15T00:24:58Z", "path": "fcrepo-auth-webac/pom.xml", "diffHunk": "@@ -53,6 +53,18 @@\n       <version>6.0.0-SNAPSHOT</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.fcrepo</groupId>\n+      <artifactId>fcrepo-http-api</artifactId>\n+      <version>6.0.0-SNAPSHOT</version>", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMDQ4OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425500489", "bodyText": "Probably should use ${project.version}", "author": "awoods", "createdAt": "2020-05-15T00:25:05Z", "path": "fcrepo-auth-webac/pom.xml", "diffHunk": "@@ -53,6 +53,18 @@\n       <version>6.0.0-SNAPSHOT</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.fcrepo</groupId>\n+      <artifactId>fcrepo-http-api</artifactId>\n+      <version>6.0.0-SNAPSHOT</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.fcrepo</groupId>\n+      <artifactId>fcrepo-persistence-api</artifactId>\n+      <version>6.0.0-SNAPSHOT</version>", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMDU5OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425500599", "bodyText": "Probably should use ${project.version}", "author": "awoods", "createdAt": "2020-05-15T00:25:21Z", "path": "fcrepo-auth-common/pom.xml", "diffHunk": "@@ -94,6 +94,23 @@\n       <scope>test</scope>\n       <type>test-jar</type>\n     </dependency>\n+    <dependency>\n+      <groupId>org.fcrepo</groupId>\n+      <artifactId>fcrepo-kernel-impl</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.fcrepo</groupId>\n+      <artifactId>fcrepo-persistence-ocfl</artifactId>\n+      <version>6.0.0-SNAPSHOT</version>", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMjQ3OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425502478", "bodyText": "Since this class (URIConstants) heretonow contains... constants, I wonder if there is a more suitable utility class in which this method to live.", "author": "awoods", "createdAt": "2020-05-15T00:31:55Z", "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/URIConstants.java", "diffHunk": "@@ -155,6 +160,20 @@\n      */\n     public static final String VCARD_MEMBER_VALUE = VCARD_NAMESPACE_VALUE + \"hasMember\";\n \n+    public static HttpIdentifierConverter identifierConverter(final HttpServletRequest request) {", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM5MjU3Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r427392577", "bodyText": "There is no such class in WebAC, I can create a new class for this single method or move it into another existing class (WebACFilter?)", "author": "whikloj", "createdAt": "2020-05-19T15:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMjQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMjUxMA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r428102510", "bodyText": "I moved it to WebACFilter unless you'd prefer an actual Utility class.", "author": "whikloj", "createdAt": "2020-05-20T15:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMjQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwNTYyNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425505625", "bodyText": "Normally, when a variable is named iterator, it is of type Iterator. Could you rename this to something that avoids this confusion... maybe fullId?", "author": "awoods", "createdAt": "2020-05-15T00:43:29Z", "path": "fcrepo-kernel-impl/src/main/java/org/fcrepo/kernel/impl/ContainmentIndexImpl.java", "diffHunk": "@@ -407,6 +408,30 @@ public boolean resourceExists(final String txID, final FedoraId fedoraID) {\n         return exists;\n     }\n \n+    @Override\n+    public FedoraId getContainerIdByPath(final String txID, final FedoraId fedoraId) {\n+        if (fedoraId.isRepositoryRoot()) {\n+            // If we are root then we are the top.\n+            return fedoraId;\n+        }\n+        final String parent = getContainedBy(txID, fedoraId);\n+        if (parent != null) {\n+            return FedoraId.create(parent);\n+        }\n+        String idIterator = fedoraId.getFullId();", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxOTY5NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425819694", "bodyText": "Should we take this opportunity to name this method more accurately? ..something like: getInternalId() or getFedoraId()?", "author": "awoods", "createdAt": "2020-05-15T13:56:52Z", "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACFilter.java", "diffHunk": "@@ -264,29 +242,21 @@ private FedoraResource resource(final HttpServletRequest servletRequest) {\n         return resource(servletRequest, getRepoPath(servletRequest));\n     }\n \n-    private FedoraResource resource(final HttpServletRequest servletRequest, final String path) {\n+    private FedoraResource resource(final HttpServletRequest servletRequest, final FedoraId resourceId) {\n         try {\n-            return this.resourceFactory.getResource(transaction(servletRequest), FedoraId.create(path));\n-        } catch (PathNotFoundException e) {\n+            return this.resourceFactory.getResource(transaction(servletRequest), resourceId);\n+        } catch (final PathNotFoundException e) {\n             return null;\n         }\n     }\n \n-    private IdentifierConverter<Resource, FedoraResource> translator(final HttpServletRequest servletRequest) {\n-        final UriBuilder uriBuilder = UriBuilder.fromUri(getBaseURL(servletRequest)).path(FedoraLdp.class);\n-        return new HttpResourceConverter(transaction(servletRequest), uriBuilder);\n-    }\n-\n-    private String getRepoPath(final HttpServletRequest servletRequest) {\n+    private FedoraId getRepoPath(final HttpServletRequest servletRequest) {", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxOTc2OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425819768", "bodyText": "Should we take this opportunity to name this method more accurately? ..something like: getInternalId() or getFedoraId()?", "author": "awoods", "createdAt": "2020-05-15T13:56:58Z", "path": "fcrepo-auth-webac/src/main/java/org/fcrepo/auth/webac/WebACFilter.java", "diffHunk": "@@ -264,29 +242,21 @@ private FedoraResource resource(final HttpServletRequest servletRequest) {\n         return resource(servletRequest, getRepoPath(servletRequest));\n     }\n \n-    private FedoraResource resource(final HttpServletRequest servletRequest, final String path) {\n+    private FedoraResource resource(final HttpServletRequest servletRequest, final FedoraId resourceId) {\n         try {\n-            return this.resourceFactory.getResource(transaction(servletRequest), FedoraId.create(path));\n-        } catch (PathNotFoundException e) {\n+            return this.resourceFactory.getResource(transaction(servletRequest), resourceId);\n+        } catch (final PathNotFoundException e) {\n             return null;\n         }\n     }\n \n-    private IdentifierConverter<Resource, FedoraResource> translator(final HttpServletRequest servletRequest) {\n-        final UriBuilder uriBuilder = UriBuilder.fromUri(getBaseURL(servletRequest)).path(FedoraLdp.class);\n-        return new HttpResourceConverter(transaction(servletRequest), uriBuilder);\n-    }\n-\n-    private String getRepoPath(final HttpServletRequest servletRequest) {\n+    private FedoraId getRepoPath(final HttpServletRequest servletRequest) {\n         final String httpURI = servletRequest.getRequestURL().toString();\n         return getRepoPath(servletRequest, httpURI);\n     }\n \n-    private String getRepoPath(final HttpServletRequest servletRequest, final String httpURI) {\n-        final Resource resource = ModelFactory.createDefaultModel().createResource(httpURI);\n-        final String repoPath = translator(servletRequest).asString(resource);\n-        log.debug(\"Converted request URI {} to repo path {}\", httpURI, repoPath);\n-        return repoPath;\n+    private FedoraId getRepoPath(final HttpServletRequest request, final String httpURI) {", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4Mzc3NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425883774", "bodyText": "Are we no longer supporting requests to hash resources?", "author": "awoods", "createdAt": "2020-05-15T15:35:41Z", "path": "fcrepo-auth-webac/src/test/java/org/fcrepo/integration/auth/webac/WebACRecipesIT.java", "diffHunk": "@@ -705,28 +711,11 @@ public void testAccessToBinary() throws IOException {\n         assertEquals(HttpStatus.SC_OK, getStatus(requestGet2));\n     }\n \n+    @Ignore(\"Access to class - FCREPO-3279\")\n     @Test\n-    @Ignore(\"FAILING\")\n-    public void testAccessToHashResource() throws IOException {", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMjgyOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r427412829", "bodyText": "Yeah, this test was @Ignore in the external webac module and was still marked as @Ignore when brought back in in 2017. The reason is you can't GET /fcrepo/rest/object#hash the hash is never sent to the server. That is meant for client side dereferencing. RFC-3986 Section 3.5 states\n\nAs such, the fragment identifier is not used in the scheme-specific processing of a URI; instead, the fragment identifier is separated from the rest of the URI prior to a dereference, and thus the identifying information within the fragment itself is dereferenced solely by the user agent, regardless of the URI scheme.", "author": "whikloj", "createdAt": "2020-05-19T15:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4Mzc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5Mjg1MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425892851", "bodyText": "Is it possible that there are multiple / characters? If so, maybe \"while (realpath.startsWith(\"/\"))\"?", "author": "awoods", "createdAt": "2020-05-15T15:51:07Z", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverter.java", "diffHunk": "@@ -221,4 +223,24 @@ private boolean isRootWithoutTrailingSlash(final String httpUri) {\n             values.get(\"path\").isEmpty();\n     }\n \n+    /**\n+     * Takes internal URIs starting with info:/rest and makes full URLs to convert. These URIs come when RDF contains\n+     * a URI like </rest/someResource>. This gets converted to info:/rest/someResource as it is a URI but with no\n+     * scheme.\n+     * @param httpUri the partial URI\n+     * @return the path part of the url\n+     */\n+    private String mapInternalRestUri(final String httpUri) {\n+        // This uri started with </rest...> and is an internal URI.\n+        if (httpUri.startsWith(\"info:/rest\")) {\n+            String realpath = httpUri.substring(10);\n+            if (realpath.startsWith(\"/\")) {", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMDU0MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r427420540", "bodyText": "Generally that would be an exception, its possible we aren't throwing the correct one here but in Fedora we don't accept empty path elements. I had to add this block to mimic existing Fedora 5.1 behaviour.", "author": "whikloj", "createdAt": "2020-05-19T16:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5Mjg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5MzY2Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1681#discussion_r425893667", "bodyText": "To avoid the \"magic number\" question, may change to:\n... = httpUri.substring(\"info:/rest\".length());", "author": "awoods", "createdAt": "2020-05-15T15:52:29Z", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverter.java", "diffHunk": "@@ -221,4 +223,24 @@ private boolean isRootWithoutTrailingSlash(final String httpUri) {\n             values.get(\"path\").isEmpty();\n     }\n \n+    /**\n+     * Takes internal URIs starting with info:/rest and makes full URLs to convert. These URIs come when RDF contains\n+     * a URI like </rest/someResource>. This gets converted to info:/rest/someResource as it is a URI but with no\n+     * scheme.\n+     * @param httpUri the partial URI\n+     * @return the path part of the url\n+     */\n+    private String mapInternalRestUri(final String httpUri) {\n+        // This uri started with </rest...> and is an internal URI.\n+        if (httpUri.startsWith(\"info:/rest\")) {\n+            String realpath = httpUri.substring(10);", "originalCommit": "d1cd003bd502c8b63b4b2fdeb05bb8ab9562134f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ede968620c0c73fe8f7495f4276498b3798c8d5a", "url": "https://github.com/fcrepo/fcrepo/commit/ede968620c0c73fe8f7495f4276498b3798c8d5a", "message": "Code review and new test for issue", "committedDate": "2020-05-20T15:23:42Z", "type": "commit"}, {"oid": "fb20b888aca28217a1178643ced7dfed6399061b", "url": "https://github.com/fcrepo/fcrepo/commit/fb20b888aca28217a1178643ced7dfed6399061b", "message": "fix pom in auth common", "committedDate": "2020-05-20T15:27:54Z", "type": "commit"}]}