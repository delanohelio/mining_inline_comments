{"pr_number": 1821, "pr_title": "Search page in HTML UI", "pr_createdAt": "2020-12-01T21:40:37Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1821", "timeline": [{"oid": "7b0d26ac0cb87e628fe26d857b69e8fac8521e2f", "url": "https://github.com/fcrepo/fcrepo/commit/7b0d26ac0cb87e628fe26d857b69e8fac8521e2f", "message": "Initial updates for Search UI\n\nRelated to: https://jira.lyrasis.org/browse/FCREPO-3351", "committedDate": "2020-11-30T18:51:35Z", "type": "commit"}, {"oid": "9af95ddf689e1adf30f52fb2a9bbf68e07f02e95", "url": "https://github.com/fcrepo/fcrepo/commit/9af95ddf689e1adf30f52fb2a9bbf68e07f02e95", "message": "Make search page format results", "committedDate": "2020-12-01T21:37:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjA5MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1821#discussion_r533796090", "bodyText": "Can be private.", "author": "awoods", "createdAt": "2020-12-01T23:40:36Z", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "diffHunk": "@@ -468,4 +468,51 @@ public static String parameterize(final String source) {\n     public static boolean isManagedProperty(final Node property) {\n         return property.isURI() && isManagedPredicate.test(createProperty(property.getURI()));\n     }\n+\n+    /**\n+     * Find a key in a map and format it as a string\n+     * @param input map of objects.\n+     * @param key the key to locate in the map.\n+     * @return the result string.\n+     */\n+    public static String getString(final Map<String, Object> input, final String key) {\n+        if (input.get(key) == null) {\n+            return \"\";\n+        }\n+        final var value = input.get(key);\n+        final var clazz = value.getClass();\n+        final String output;\n+        if (clazz == String.class) {\n+            output = formatAsString((String) value);\n+        } else if (clazz == String[].class) {\n+            output = formatAsString((String[]) value);\n+        } else if (clazz == Long.class) {\n+            output = formatAsString((Long) value);\n+        } else {\n+            output = \"\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Format to a string and check for null values\n+     * @param input a string array or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String[] input) {", "originalCommit": "9af95ddf689e1adf30f52fb2a9bbf68e07f02e95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjEzMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1821#discussion_r533796132", "bodyText": "Can be private.", "author": "awoods", "createdAt": "2020-12-01T23:40:42Z", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "diffHunk": "@@ -468,4 +468,51 @@ public static String parameterize(final String source) {\n     public static boolean isManagedProperty(final Node property) {\n         return property.isURI() && isManagedPredicate.test(createProperty(property.getURI()));\n     }\n+\n+    /**\n+     * Find a key in a map and format it as a string\n+     * @param input map of objects.\n+     * @param key the key to locate in the map.\n+     * @return the result string.\n+     */\n+    public static String getString(final Map<String, Object> input, final String key) {\n+        if (input.get(key) == null) {\n+            return \"\";\n+        }\n+        final var value = input.get(key);\n+        final var clazz = value.getClass();\n+        final String output;\n+        if (clazz == String.class) {\n+            output = formatAsString((String) value);\n+        } else if (clazz == String[].class) {\n+            output = formatAsString((String[]) value);\n+        } else if (clazz == Long.class) {\n+            output = formatAsString((Long) value);\n+        } else {\n+            output = \"\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Format to a string and check for null values\n+     * @param input a string array or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String[] input) {\n+        return (input == null || input.length == 0 ? \"\" :  String.join(\", \", input));\n+    }\n+\n+    /**\n+     * Format a string to check for null values\n+     * @param input a string or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String input) {", "originalCommit": "9af95ddf689e1adf30f52fb2a9bbf68e07f02e95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjE2Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1821#discussion_r533796162", "bodyText": "Can be private.", "author": "awoods", "createdAt": "2020-12-01T23:40:49Z", "path": "fcrepo-http-commons/src/main/java/org/fcrepo/http/commons/responses/ViewHelpers.java", "diffHunk": "@@ -468,4 +468,51 @@ public static String parameterize(final String source) {\n     public static boolean isManagedProperty(final Node property) {\n         return property.isURI() && isManagedPredicate.test(createProperty(property.getURI()));\n     }\n+\n+    /**\n+     * Find a key in a map and format it as a string\n+     * @param input map of objects.\n+     * @param key the key to locate in the map.\n+     * @return the result string.\n+     */\n+    public static String getString(final Map<String, Object> input, final String key) {\n+        if (input.get(key) == null) {\n+            return \"\";\n+        }\n+        final var value = input.get(key);\n+        final var clazz = value.getClass();\n+        final String output;\n+        if (clazz == String.class) {\n+            output = formatAsString((String) value);\n+        } else if (clazz == String[].class) {\n+            output = formatAsString((String[]) value);\n+        } else if (clazz == Long.class) {\n+            output = formatAsString((Long) value);\n+        } else {\n+            output = \"\";\n+        }\n+        return output;\n+    }\n+\n+    /**\n+     * Format to a string and check for null values\n+     * @param input a string array or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String[] input) {\n+        return (input == null || input.length == 0 ? \"\" :  String.join(\", \", input));\n+    }\n+\n+    /**\n+     * Format a string to check for null values\n+     * @param input a string or null\n+     * @return a string.\n+     */\n+    public static String formatAsString(final String input) {\n+        return (input == null ? \"\" : input);\n+    }\n+\n+    public static String formatAsString(final Long input) {", "originalCommit": "9af95ddf689e1adf30f52fb2a9bbf68e07f02e95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2dcf805507b52bdfb5ef1812d52b071ff049aaf0", "url": "https://github.com/fcrepo/fcrepo/commit/2dcf805507b52bdfb5ef1812d52b071ff049aaf0", "message": "Code review", "committedDate": "2020-12-02T05:17:43Z", "type": "commit"}]}