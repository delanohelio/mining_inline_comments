{"pr_number": 1692, "pr_title": "Implements wild-card searching by fedora_id and pagination.", "pr_createdAt": "2020-06-05T18:29:10Z", "pr_url": "https://github.com/fcrepo/fcrepo/pull/1692", "timeline": [{"oid": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "url": "https://github.com/fcrepo/fcrepo/commit/88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "message": "Implements wild-card searching by fedora_id and pagination.\n\nResolves: https://jira.lyrasis.org/browse/FCREPO-3307", "committedDate": "2020-06-05T19:19:06Z", "type": "commit"}, {"oid": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "url": "https://github.com/fcrepo/fcrepo/commit/88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "message": "Implements wild-card searching by fedora_id and pagination.\n\nResolves: https://jira.lyrasis.org/browse/FCREPO-3307", "committedDate": "2020-06-05T19:19:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTUzNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436289535", "bodyText": "Please revert this formating change.", "author": "awoods", "createdAt": "2020-06-06T18:21:16Z", "path": "pom.xml", "diffHunk": "@@ -126,7 +126,7 @@\n         <groupId>com.sun.xml.bind</groupId>\n         <artifactId>jaxb-impl</artifactId>\n         <version>${jaxb.impl.version}</version>\n-\t  </dependency>\n+      </dependency>", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NDYyNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436884627", "bodyText": "okay - I did do this on purpose because it was off.", "author": "dbernstein", "createdAt": "2020-06-08T17:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyNjAxMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r437026011", "bodyText": "I can see that the pom needs a formatting.  So I agree - separate PR for that.", "author": "dbernstein", "createdAt": "2020-06-08T22:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTg4MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436289880", "bodyText": "Please add a comment describing the intent of this regex.", "author": "awoods", "createdAt": "2020-06-06T18:26:20Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java", "diffHunk": "@@ -71,22 +68,85 @@ public FedoraSearch() {\n \n     /**\n      * Perform simple search on the repository\n-     * @param query The query parameter\n+     *\n+     * @param conditions The conditions constraining the query\n+     * @param maxResults The max number of results to return\n+     * @param offset     The zero-based offset of the first result to be returned\n      * @return A response object with the search results\n-     * @throws IOException                   if IO exception occurred\n-     * @throws UnsupportedAlgorithmException if unsupported digest algorithm occurred\n      */\n     @GET\n     @Produces({APPLICATION_JSON + \";qs=1.0\",\n             TEXT_PLAIN_WITH_CHARSET})\n-    public Response doSearch(@QueryParam(value=\"query\") final String query)\n-            throws InvalidQueryException, IOException, UnsupportedAlgorithmException {\n-\n-        final Query searchQuery = Query.parse(query);\n-        final var params = new SearchParameters(searchQuery);\n-        final Response.ResponseBuilder builder = ok();\n-        builder.entity(this.service.doSearch(params));\n-        return builder.build();\n+    public Response doSearch(@QueryParam(value = \"condition\") final List<String> conditions,\n+                             @DefaultValue(\"100\") @QueryParam(\"max_results\") final int maxResults,\n+                             @DefaultValue(\"0\") @QueryParam(\"offset\") final int offset) {\n+\n+        try {\n+            final var conditionList = new ArrayList<Condition>();\n+            for (String condition : conditions) {\n+                final var parsedCondition = parse(condition, identifierConverter());\n+                conditionList.add(parsedCondition);\n+            }\n+            final var params = new SearchParameters(conditionList, maxResults, offset);\n+            final Response.ResponseBuilder builder = ok();\n+            final var result = this.service.doSearch(params);\n+            final var translatedResults = translateResults(result);\n+\n+            builder.entity(translatedResults);\n+            return builder.build();\n+        } catch (final InvalidQueryException ex) {\n+            throw new BadRequestException(ex);\n+        }\n+    }\n+\n+    private SearchResult translateResults(final SearchResult result) {\n+        result.getItems().forEach(item -> {\n+            final var key = Condition.Field.fedora_id.toString();\n+            final var fedoraId = item.get(key);\n+            if (fedoraId != null) {\n+                item.put(key, identifierConverter().toExternalId(fedoraId.toString()));\n+            }\n+        });\n+        return result;\n+    }\n+\n+    /**\n+     * Parses the url decoded value of a single parameter passed by the\n+     * http layer into a {@link Condition}.\n+     *\n+     * @param conditionStr The url decoded value of the query parameter.\n+     * @return the parsed {@link Condition} object.\n+     */\n+    protected static Condition parse(final String conditionStr, final HttpIdentifierConverter converter)\n+            throws InvalidQueryException {\n+        final var p = Pattern.compile(\"([a-zA-Z0-9_]+)([><=]|<=|>=)([^><=].*)\");", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDM5Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436704392", "bodyText": "Additionally, is it invalid for a Fedora ID to start with <, >, or =?", "author": "pwinckles", "createdAt": "2020-06-08T13:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NTU3NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436885574", "bodyText": "@awoods : will do.\n@pwinckles :  I don't know that it is officially - we will discuss this question this week on the call, addressing both Fedora ID restrictions and escape chars for search.", "author": "dbernstein", "createdAt": "2020-06-08T17:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTk4NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436289985", "bodyText": "Please add comments or create variables that provide transparency into the magic numbers '1' and '3' in the m.group() calls.", "author": "awoods", "createdAt": "2020-06-06T18:27:57Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java", "diffHunk": "@@ -71,22 +68,85 @@ public FedoraSearch() {\n \n     /**\n      * Perform simple search on the repository\n-     * @param query The query parameter\n+     *\n+     * @param conditions The conditions constraining the query\n+     * @param maxResults The max number of results to return\n+     * @param offset     The zero-based offset of the first result to be returned\n      * @return A response object with the search results\n-     * @throws IOException                   if IO exception occurred\n-     * @throws UnsupportedAlgorithmException if unsupported digest algorithm occurred\n      */\n     @GET\n     @Produces({APPLICATION_JSON + \";qs=1.0\",\n             TEXT_PLAIN_WITH_CHARSET})\n-    public Response doSearch(@QueryParam(value=\"query\") final String query)\n-            throws InvalidQueryException, IOException, UnsupportedAlgorithmException {\n-\n-        final Query searchQuery = Query.parse(query);\n-        final var params = new SearchParameters(searchQuery);\n-        final Response.ResponseBuilder builder = ok();\n-        builder.entity(this.service.doSearch(params));\n-        return builder.build();\n+    public Response doSearch(@QueryParam(value = \"condition\") final List<String> conditions,\n+                             @DefaultValue(\"100\") @QueryParam(\"max_results\") final int maxResults,\n+                             @DefaultValue(\"0\") @QueryParam(\"offset\") final int offset) {\n+\n+        try {\n+            final var conditionList = new ArrayList<Condition>();\n+            for (String condition : conditions) {\n+                final var parsedCondition = parse(condition, identifierConverter());\n+                conditionList.add(parsedCondition);\n+            }\n+            final var params = new SearchParameters(conditionList, maxResults, offset);\n+            final Response.ResponseBuilder builder = ok();\n+            final var result = this.service.doSearch(params);\n+            final var translatedResults = translateResults(result);\n+\n+            builder.entity(translatedResults);\n+            return builder.build();\n+        } catch (final InvalidQueryException ex) {\n+            throw new BadRequestException(ex);\n+        }\n+    }\n+\n+    private SearchResult translateResults(final SearchResult result) {\n+        result.getItems().forEach(item -> {\n+            final var key = Condition.Field.fedora_id.toString();\n+            final var fedoraId = item.get(key);\n+            if (fedoraId != null) {\n+                item.put(key, identifierConverter().toExternalId(fedoraId.toString()));\n+            }\n+        });\n+        return result;\n+    }\n+\n+    /**\n+     * Parses the url decoded value of a single parameter passed by the\n+     * http layer into a {@link Condition}.\n+     *\n+     * @param conditionStr The url decoded value of the query parameter.\n+     * @return the parsed {@link Condition} object.\n+     */\n+    protected static Condition parse(final String conditionStr, final HttpIdentifierConverter converter)\n+            throws InvalidQueryException {\n+        final var p = Pattern.compile(\"([a-zA-Z0-9_]+)([><=]|<=|>=)([^><=].*)\");\n+        final var m = p.matcher(conditionStr);\n+        if (m.matches()) {\n+            final var field = Condition.Field.valueOf(m.group(1).toLowerCase());", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NTgzNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436885837", "bodyText": "will do.", "author": "dbernstein", "createdAt": "2020-06-08T17:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4OTk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDM2NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436290364", "bodyText": "The default value of offset and maxResults can be removed since they are always set in the constructor.\nAdditionally, the three instance variables can be set to final.", "author": "awoods", "createdAt": "2020-06-06T18:33:51Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java", "diffHunk": "@@ -17,19 +17,59 @@\n  */\n package org.fcrepo.search.api;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n /**\n  * A pojo encapsulating the parameters of a search\n  *\n  * @author dbernstein\n  */\n public class SearchParameters {\n \n-    private Query query;\n+    private List<Condition> conditions;\n+\n+    private int offset = 0;", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NjA0Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436886042", "bodyText": "will do.", "author": "dbernstein", "createdAt": "2020-06-08T17:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTY2MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436295661", "bodyText": "When running the mvn clean install, more times than not, this test/assertion fails... although, not always.", "author": "awoods", "createdAt": "2020-06-06T19:46:41Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java", "diffHunk": "@@ -37,26 +44,113 @@\n public class FedoraSearchIT extends AbstractResourceIT {\n \n \n+    private List<String> createResources(final int count) throws IOException {\n+        return createResources(getRandomUniqueId(), count);\n+    }\n+\n+    private List<String> createResources(final String prefix, final int count) throws IOException {\n+        final var resources = new ArrayList<String>();\n+        for (int i = 0; i < count; i++) {\n+            final var response = createObject(prefix + \"-\" + String.format(\"%05d\", i));\n+            resources.add(getLocation(response));\n+            response.close();\n+        }\n+        return resources;\n+    }\n+\n     @Test\n     public void testSearchAllResources() throws Exception {\n+        final var resources = createResources(3);\n+        final var condition = fedora_id + \"=*\";\n+        final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(), SearchResult.class);\n+            assertNotNull(result);\n+            assertNotNull(result.getPagination());\n+            assertTrue(result.getItems().size() >= 3);\n+            final var resultingFedoraIds =\n+                    result.getItems().stream().map(x -> x.get(\"fedora_id\")).collect(Collectors.toList());\n+            assertTrue(\"results must contain all newly created resources\",", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NjQwMw==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436886403", "bodyText": "Interesting: I'll take a look.", "author": "dbernstein", "createdAt": "2020-06-08T17:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyNTMxNQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r437025315", "bodyText": "I've run it several times without a failure.  Are you doing anything fancy in your settings.xml file?", "author": "dbernstein", "createdAt": "2020-06-08T22:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjE3Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436296176", "bodyText": "Since the response produced by createObject is Closable, you can put this statement in a try clause... and it will auto-close.", "author": "awoods", "createdAt": "2020-06-06T19:55:02Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java", "diffHunk": "@@ -37,26 +44,113 @@\n public class FedoraSearchIT extends AbstractResourceIT {\n \n \n+    private List<String> createResources(final int count) throws IOException {\n+        return createResources(getRandomUniqueId(), count);\n+    }\n+\n+    private List<String> createResources(final String prefix, final int count) throws IOException {\n+        final var resources = new ArrayList<String>();\n+        for (int i = 0; i < count; i++) {\n+            final var response = createObject(prefix + \"-\" + String.format(\"%05d\", i));", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NjY1MA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436886650", "bodyText": "I'll fix.", "author": "dbernstein", "createdAt": "2020-06-08T17:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjI4Mw==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436296283", "bodyText": "For readability, maybe move this method before all of the tests, or to the bottom of the class.", "author": "awoods", "createdAt": "2020-06-06T19:56:02Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java", "diffHunk": "@@ -37,26 +44,113 @@\n public class FedoraSearchIT extends AbstractResourceIT {\n \n \n+    private List<String> createResources(final int count) throws IOException {\n+        return createResources(getRandomUniqueId(), count);\n+    }\n+\n+    private List<String> createResources(final String prefix, final int count) throws IOException {\n+        final var resources = new ArrayList<String>();\n+        for (int i = 0; i < count; i++) {\n+            final var response = createObject(prefix + \"-\" + String.format(\"%05d\", i));\n+            resources.add(getLocation(response));\n+            response.close();\n+        }\n+        return resources;\n+    }\n+\n     @Test\n     public void testSearchAllResources() throws Exception {\n+        final var resources = createResources(3);\n+        final var condition = fedora_id + \"=*\";\n+        final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(), SearchResult.class);\n+            assertNotNull(result);\n+            assertNotNull(result.getPagination());\n+            assertTrue(result.getItems().size() >= 3);\n+            final var resultingFedoraIds =\n+                    result.getItems().stream().map(x -> x.get(\"fedora_id\")).collect(Collectors.toList());\n+            assertTrue(\"results must contain all newly created resources\",\n+                    resultingFedoraIds.containsAll(resources));\n+        }\n+    }\n+\n+    private String getSearchEndpoint() {", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4Njk1NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436886954", "bodyText": "Will do.", "author": "dbernstein", "createdAt": "2020-06-08T17:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjQ0MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436296441", "bodyText": "Can remove throws clause.", "author": "awoods", "createdAt": "2020-06-06T19:58:49Z", "path": "fcrepo-http-api/src/test/java/org/fcrepo/integration/http/api/FedoraSearchIT.java", "diffHunk": "@@ -37,26 +44,113 @@\n public class FedoraSearchIT extends AbstractResourceIT {\n \n \n+    private List<String> createResources(final int count) throws IOException {\n+        return createResources(getRandomUniqueId(), count);\n+    }\n+\n+    private List<String> createResources(final String prefix, final int count) throws IOException {\n+        final var resources = new ArrayList<String>();\n+        for (int i = 0; i < count; i++) {\n+            final var response = createObject(prefix + \"-\" + String.format(\"%05d\", i));\n+            resources.add(getLocation(response));\n+            response.close();\n+        }\n+        return resources;\n+    }\n+\n     @Test\n     public void testSearchAllResources() throws Exception {\n+        final var resources = createResources(3);\n+        final var condition = fedora_id + \"=*\";\n+        final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(), SearchResult.class);\n+            assertNotNull(result);\n+            assertNotNull(result.getPagination());\n+            assertTrue(result.getItems().size() >= 3);\n+            final var resultingFedoraIds =\n+                    result.getItems().stream().map(x -> x.get(\"fedora_id\")).collect(Collectors.toList());\n+            assertTrue(\"results must contain all newly created resources\",\n+                    resultingFedoraIds.containsAll(resources));\n+        }\n+    }\n+\n+    private String getSearchEndpoint() {\n+        return serverAddress + \"fcr:search?\";\n+    }\n+\n+    @Test\n+    public void testWildcardMatchingOnPartialFedoraId() throws Exception {\n+        final var id = getRandomUniqueId();\n+        final int count = 3;\n+        createResources(id, count);\n+        final var urlPrefix = serverAddress + id;\n+        // try all valid prefix formulations\n+        final var prefixes = new String[]{id, \"/\" + id, urlPrefix, \"info:fedora/\" + id};\n+        for (String prefix : prefixes) {\n+            final var condition = fedora_id + \"=\" + prefix + \"*\";\n+            final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n+            try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+                assertEquals(OK.getStatusCode(), getStatus(response));\n+                final ObjectMapper objectMapper = new ObjectMapper();\n+                final SearchResult result = objectMapper.readValue(response.getEntity().getContent(),\n+                        SearchResult.class);\n+                assertEquals(\"expected \" + count + \" items where condition = \" + condition, count,\n+                        result.getItems().size());\n+\n+                result.getItems().stream().map(x -> x.get(\"fedora_id\"))\n+                        .forEach(x -> assertTrue(x.toString().startsWith(urlPrefix)));\n+            }\n+        }\n \n-        final var condition = \"fedoraId=*\";\n-        final String searchUrl = serverAddress + \"fcr:search\" + \"?query=\" + doubleEncode(condition);\n+    }\n+\n+    @Test\n+    public void testMaxResultsAndOffset() throws Exception {\n+        final var prefix = getRandomUniqueId();\n+        final int count = 3;\n+        final var resources = createResources(prefix, count);\n+        final var condition = fedora_id + \"=\" + prefix + \"*\";\n+        final var maxResults = 1;\n+        final String searchUrl =\n+                getSearchEndpoint() + \"condition=\" + encode(condition) + \"&max_results=\" + maxResults + \"&offset=2\";\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(OK.getStatusCode(), getStatus(response));\n+            final ObjectMapper objectMapper = new ObjectMapper();\n+            final SearchResult result = objectMapper.readValue(response.getEntity().getContent(), SearchResult.class);\n+            assertEquals(maxResults, result.getItems().size());\n+            final var returnedIds =\n+                    result.getItems().stream().map(x -> x.get(\"fedora_id\")).collect(Collectors.toList());\n+            assertEquals(resources.get(2), returnedIds.get(0));\n+        }\n+    }\n+\n+    @Test\n+    public void testSearchNoMatchingFedoraIds() throws Exception {\n+        final var condition = fedora_id + \"=\" + serverAddress + \"this-should-not-match-any-fedora-id\";\n+        final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n         try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n             assertEquals(OK.getStatusCode(), getStatus(response));\n             final ObjectMapper objectMapper = new ObjectMapper();\n             final SearchResult result = objectMapper.readValue(response.getEntity().getContent(), SearchResult.class);\n             assertNotNull(result);\n             assertNotNull(result.getPagination());\n-            assertEquals(0, result.getItems().size());\n+            assertEquals(\"No results expected.\", 0, result.getItems().size());\n         }\n     }\n \n-    private String encode(final String value) throws Exception {\n-        return URLEncoder.encode(value, StandardCharsets.UTF_8);\n+    @Test\n+    public void testMalformedCondition() throws Exception {\n+        final var condition = \"this_is_not_a_valid_condition\";\n+        final String searchUrl = getSearchEndpoint() + \"condition=\" + encode(condition);\n+        try (final CloseableHttpResponse response = execute(new HttpGet(searchUrl))) {\n+            assertEquals(BAD_REQUEST.getStatusCode(), getStatus(response));\n+        }\n     }\n \n-    private String doubleEncode(final String value) throws Exception {\n-        return encode(encode(value));\n+    private String encode(final String value) throws Exception {", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NzA2NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436887065", "bodyText": "okay.", "author": "dbernstein", "createdAt": "2020-06-08T17:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjQ4OQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436296489", "bodyText": "Can remove final... as this method is static.", "author": "awoods", "createdAt": "2020-06-06T19:59:55Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/Condition.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.api;\n+\n+/**\n+ * A data structure representing a search condition.\n+ *\n+ * @author dbernstein\n+ */\n+public class Condition {\n+    /**\n+     * Default constructor\n+     *\n+     * @param field    The search field (condition subject)\n+     * @param operator The operator (condition predicate)\n+     * @param object   The object (condition object)\n+     */\n+    public Condition(final Field field, final Operator operator, final String object) {\n+        this.field = field;\n+        this.operator = operator;\n+        this.object = object;\n+    }\n+\n+\n+\n+    private Field field;\n+    private Operator operator;\n+    private String object;\n+\n+    public enum Operator {\n+        LTE(\"<=\"),\n+        GTE(\">=\"),\n+        EQ(\"=\"),\n+        GT(\">\"),\n+        LT(\"<\");\n+\n+        private String value;\n+\n+        Operator(final String value) {\n+            this.value = value;\n+        }\n+\n+        public String getStringValue() {\n+            return this.value;\n+        }\n+\n+        public static final Operator fromString(final String str) {", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjYxMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436296612", "bodyText": "Please move instance variables to the top of the class.", "author": "awoods", "createdAt": "2020-06-06T20:01:34Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/Condition.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.api;\n+\n+/**\n+ * A data structure representing a search condition.\n+ *\n+ * @author dbernstein\n+ */\n+public class Condition {\n+    /**\n+     * Default constructor\n+     *\n+     * @param field    The search field (condition subject)\n+     * @param operator The operator (condition predicate)\n+     * @param object   The object (condition object)\n+     */\n+    public Condition(final Field field, final Operator operator, final String object) {\n+        this.field = field;\n+        this.operator = operator;\n+        this.object = object;\n+    }\n+\n+\n+\n+    private Field field;", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NzI2MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436887261", "bodyText": "Will do.", "author": "dbernstein", "createdAt": "2020-06-08T17:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NjYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Njc2NQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436296765", "bodyText": "An empty default public constructor is implicit. This can be removed.", "author": "awoods", "createdAt": "2020-06-06T20:04:26Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/PaginationInfo.java", "diffHunk": "@@ -21,24 +21,44 @@\n \n /**\n  * A data structure representing the pagination information associated with a {@link org.fcrepo.search.api.SearchResult}\n+ *\n  * @author dbernstein\n  */\n public class PaginationInfo {\n     @JsonProperty\n-    int totalResultCount = 0;\n-\n+    private int offset = -1;\n     @JsonProperty\n-    int startIndex = -1;\n+    private int maxResults = -1;\n \n-    @JsonProperty\n-    int endIndex = -1;\n+    /**\n+     * Default constructor\n+     */\n+    public PaginationInfo() {}", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMDI0OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436730248", "bodyText": "It's not implicit because there's another constructor defined. That said, I can't find the no-arg constructor being used anywhere.", "author": "pwinckles", "createdAt": "2020-06-08T14:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Njc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NzY4NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436887684", "bodyText": "It seems to be required for the json serialization to work.", "author": "dbernstein", "createdAt": "2020-06-08T17:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Njc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Njg0Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436296846", "bodyText": "An empty default public constructor is implicit. This can be removed.", "author": "awoods", "createdAt": "2020-06-06T20:05:33Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchResult.java", "diffHunk": "@@ -29,15 +28,25 @@\n  */\n public class SearchResult {\n     @JsonProperty\n-    private PaginationInfo pagination = new PaginationInfo();\n+    private PaginationInfo pagination;\n     @JsonProperty\n-    private List<Map<String, Object>> items = new ArrayList();\n+    private List<Map<String, Object>> items;\n \n     /**\n-     * Default constructor\n+     * Default Constructor\n      */\n-    public SearchResult() {\n-\n+    public SearchResult() {}", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3OTcxNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436979714", "bodyText": "Required for json marshalling.", "author": "dbernstein", "createdAt": "2020-06-08T20:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Njg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxMDIyNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436710227", "bodyText": "Personally, I think it would be nicer if Fields were constructed with a fromString in a similar way as Operators. Then, callers don't need to care about casing. Not a big deal either way.\nAdditionally, this would also allow you to make the Field enum names upper case, which is more conventional.", "author": "pwinckles", "createdAt": "2020-06-08T13:42:16Z", "path": "fcrepo-http-api/src/main/java/org/fcrepo/http/api/FedoraSearch.java", "diffHunk": "@@ -71,22 +68,85 @@ public FedoraSearch() {\n \n     /**\n      * Perform simple search on the repository\n-     * @param query The query parameter\n+     *\n+     * @param conditions The conditions constraining the query\n+     * @param maxResults The max number of results to return\n+     * @param offset     The zero-based offset of the first result to be returned\n      * @return A response object with the search results\n-     * @throws IOException                   if IO exception occurred\n-     * @throws UnsupportedAlgorithmException if unsupported digest algorithm occurred\n      */\n     @GET\n     @Produces({APPLICATION_JSON + \";qs=1.0\",\n             TEXT_PLAIN_WITH_CHARSET})\n-    public Response doSearch(@QueryParam(value=\"query\") final String query)\n-            throws InvalidQueryException, IOException, UnsupportedAlgorithmException {\n-\n-        final Query searchQuery = Query.parse(query);\n-        final var params = new SearchParameters(searchQuery);\n-        final Response.ResponseBuilder builder = ok();\n-        builder.entity(this.service.doSearch(params));\n-        return builder.build();\n+    public Response doSearch(@QueryParam(value = \"condition\") final List<String> conditions,\n+                             @DefaultValue(\"100\") @QueryParam(\"max_results\") final int maxResults,\n+                             @DefaultValue(\"0\") @QueryParam(\"offset\") final int offset) {\n+\n+        try {\n+            final var conditionList = new ArrayList<Condition>();\n+            for (String condition : conditions) {\n+                final var parsedCondition = parse(condition, identifierConverter());\n+                conditionList.add(parsedCondition);\n+            }\n+            final var params = new SearchParameters(conditionList, maxResults, offset);\n+            final Response.ResponseBuilder builder = ok();\n+            final var result = this.service.doSearch(params);\n+            final var translatedResults = translateResults(result);\n+\n+            builder.entity(translatedResults);\n+            return builder.build();\n+        } catch (final InvalidQueryException ex) {\n+            throw new BadRequestException(ex);\n+        }\n+    }\n+\n+    private SearchResult translateResults(final SearchResult result) {\n+        result.getItems().forEach(item -> {\n+            final var key = Condition.Field.fedora_id.toString();\n+            final var fedoraId = item.get(key);\n+            if (fedoraId != null) {\n+                item.put(key, identifierConverter().toExternalId(fedoraId.toString()));\n+            }\n+        });\n+        return result;\n+    }\n+\n+    /**\n+     * Parses the url decoded value of a single parameter passed by the\n+     * http layer into a {@link Condition}.\n+     *\n+     * @param conditionStr The url decoded value of the query parameter.\n+     * @return the parsed {@link Condition} object.\n+     */\n+    protected static Condition parse(final String conditionStr, final HttpIdentifierConverter converter)\n+            throws InvalidQueryException {\n+        final var p = Pattern.compile(\"([a-zA-Z0-9_]+)([><=]|<=|>=)([^><=].*)\");\n+        final var m = p.matcher(conditionStr);\n+        if (m.matches()) {\n+            final var field = Condition.Field.valueOf(m.group(1).toLowerCase());", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4ODQzOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436888438", "bodyText": "That's a good point.  I will fix.", "author": "dbernstein", "createdAt": "2020-06-08T17:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxMDIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxNzE0Ng==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436717146", "bodyText": "Just a thought, but you could push the expression parse logic down into this class. I could see Condition having the following public static methods:\n\npublic static Condition fromExpression(final String conditionExpression);\npublic static Condition fromStrings(final String field, final String operator, final String object);\npublic static Condition fromEnums(final Field field, final Operator operator, final String object);\n\nOr something along those lines.", "author": "pwinckles", "createdAt": "2020-06-08T13:48:55Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/Condition.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to DuraSpace under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional information\n+ * regarding copyright ownership.\n+ *\n+ * DuraSpace licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.fcrepo.search.api;\n+\n+/**\n+ * A data structure representing a search condition.\n+ *\n+ * @author dbernstein\n+ */\n+public class Condition {\n+    /**\n+     * Default constructor\n+     *\n+     * @param field    The search field (condition subject)\n+     * @param operator The operator (condition predicate)\n+     * @param object   The object (condition object)\n+     */\n+    public Condition(final Field field, final Operator operator, final String object) {", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk3Njc5MQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436976791", "bodyText": "Good idea.  will implement.", "author": "dbernstein", "createdAt": "2020-06-08T20:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxNzE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMTIwOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436731208", "bodyText": "This should be List rather than ArrayList.", "author": "pwinckles", "createdAt": "2020-06-08T14:02:42Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchParameters.java", "diffHunk": "@@ -17,19 +17,59 @@\n  */\n package org.fcrepo.search.api;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n /**\n  * A pojo encapsulating the parameters of a search\n  *\n  * @author dbernstein\n  */\n public class SearchParameters {\n \n-    private Query query;\n+    private List<Condition> conditions;\n+\n+    private int offset = 0;\n+\n+    private int maxResults = 100;\n+\n+    /**\n+     * Constructoor\n+     *\n+     * @param conditions The conditions\n+     * @param maxResults The max results\n+     * @param offset     The offset\n+     */\n+    public SearchParameters(final ArrayList<Condition> conditions, final int maxResults, final int offset) {", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4ODYyNw==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436888627", "bodyText": "Yes - will fix.", "author": "dbernstein", "createdAt": "2020-06-08T17:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMTIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczMzk0OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436733948", "bodyText": "Using asserts to validate arguments is not generally considered a good practice. One common approach is something like:\nthis.items = Preconditions.checkNotNull(items, \"items cannot be null\");", "author": "pwinckles", "createdAt": "2020-06-08T14:05:34Z", "path": "fcrepo-search-api/src/main/java/org/fcrepo/search/api/SearchResult.java", "diffHunk": "@@ -29,15 +28,25 @@\n  */\n public class SearchResult {\n     @JsonProperty\n-    private PaginationInfo pagination = new PaginationInfo();\n+    private PaginationInfo pagination;\n     @JsonProperty\n-    private List<Map<String, Object>> items = new ArrayList();\n+    private List<Map<String, Object>> items;\n \n     /**\n-     * Default constructor\n+     * Default Constructor\n      */\n-    public SearchResult() {\n-\n+    public SearchResult() {}\n+    /**\n+     * Constructor\n+     *\n+     * @param items      The individual search result items\n+     * @param pagination The pagination info\n+     */\n+    public SearchResult(final List<Map<String, Object>> items, final PaginationInfo pagination) {\n+        assert items != null;", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczOTE5OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436739198", "bodyText": "What if a Fedora ID contains a * as part of its id?", "author": "pwinckles", "createdAt": "2020-06-08T14:10:42Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchServiceImpl.java", "diffHunk": "@@ -29,9 +42,69 @@\n  */\n @Component\n public class SearchServiceImpl implements SearchService {\n+    private static final String FEDORA_ID_DB_COLUMN = \"fedora_id\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Connect to the database\n+     */\n+    @PostConstruct\n+    private void setup() {\n+        jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n \n     @Override\n-    public SearchResult doSearch(final SearchParameters parameters) {\n-        return new SearchResult();\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            if (condition.getField().equals(Condition.Field.fedora_id) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                var object = condition.getObject();\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4ODkyOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436888928", "bodyText": "We will discuss this week.  As noted above.", "author": "dbernstein", "createdAt": "2020-06-08T17:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczOTE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MjE4OA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436742188", "bodyText": "Maybe Condition.toString() should produce a string in this format?", "author": "pwinckles", "createdAt": "2020-06-08T14:14:07Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchServiceImpl.java", "diffHunk": "@@ -29,9 +42,69 @@\n  */\n @Component\n public class SearchServiceImpl implements SearchService {\n+    private static final String FEDORA_ID_DB_COLUMN = \"fedora_id\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Connect to the database\n+     */\n+    @PostConstruct\n+    private void setup() {\n+        jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n \n     @Override\n-    public SearchResult doSearch(final SearchParameters parameters) {\n-        return new SearchResult();\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            if (condition.getField().equals(Condition.Field.fedora_id) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                var object = condition.getObject();\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" like '\" + object + \"'\");\n+                    } else {\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" = '\" + object + \"'\");\n+                    }\n+                }\n+            } else {\n+                throw new InvalidQueryException(\"Condition not supported: \" +", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4OTIwMg==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436889202", "bodyText": "+1", "author": "dbernstein", "createdAt": "2020-06-08T17:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MjE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI4NA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436743284", "bodyText": "The containment index code was pretty picking about having all table and column names in constants.", "author": "pwinckles", "createdAt": "2020-06-08T14:15:41Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchServiceImpl.java", "diffHunk": "@@ -29,9 +42,69 @@\n  */\n @Component\n public class SearchServiceImpl implements SearchService {\n+    private static final String FEDORA_ID_DB_COLUMN = \"fedora_id\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Connect to the database\n+     */\n+    @PostConstruct\n+    private void setup() {\n+        jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n \n     @Override\n-    public SearchResult doSearch(final SearchParameters parameters) {\n-        return new SearchResult();\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            if (condition.getField().equals(Condition.Field.fedora_id) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                var object = condition.getObject();\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" like '\" + object + \"'\");\n+                    } else {\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" = '\" + object + \"'\");\n+                    }\n+                }\n+            } else {\n+                throw new InvalidQueryException(\"Condition not supported: \" +\n+                        condition.getField() +\n+                        condition.getOperator().getStringValue() +\n+                        condition.getObject());\n+            }\n+        }\n+\n+        final var sql = new StringBuffer(\"select \" + FEDORA_ID_DB_COLUMN + \" from resources\");", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTIxNA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436891214", "bodyText": "@pwinckles : Shall I reference the containment index constants here?  It seems that would be tighter.", "author": "dbernstein", "createdAt": "2020-06-08T17:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMjA3Mg==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436902072", "bodyText": "@dbernstein I didn't look at the dependency graph. If you're able to, that would make sense. If not, you could just make the constants in this class.", "author": "pwinckles", "createdAt": "2020-06-08T18:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyNzQ5Nw==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r437027497", "bodyText": "\ud83d\udc4d", "author": "dbernstein", "createdAt": "2020-06-08T22:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTMwNg==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436745306", "bodyText": "I think it's better to use StringBuilder over StringBuffer because StringBuffer is synchronized.", "author": "pwinckles", "createdAt": "2020-06-08T14:18:38Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchServiceImpl.java", "diffHunk": "@@ -29,9 +42,69 @@\n  */\n @Component\n public class SearchServiceImpl implements SearchService {\n+    private static final String FEDORA_ID_DB_COLUMN = \"fedora_id\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Connect to the database\n+     */\n+    @PostConstruct\n+    private void setup() {\n+        jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n \n     @Override\n-    public SearchResult doSearch(final SearchParameters parameters) {\n-        return new SearchResult();\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            if (condition.getField().equals(Condition.Field.fedora_id) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                var object = condition.getObject();\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" like '\" + object + \"'\");\n+                    } else {\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" = '\" + object + \"'\");\n+                    }\n+                }\n+            } else {\n+                throw new InvalidQueryException(\"Condition not supported: \" +\n+                        condition.getField() +\n+                        condition.getOperator().getStringValue() +\n+                        condition.getObject());\n+            }\n+        }\n+\n+        final var sql = new StringBuffer(\"select \" + FEDORA_ID_DB_COLUMN + \" from resources\");", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MDExMQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436890111", "bodyText": "I will fix. (I intended to use StringBuilder).", "author": "dbernstein", "createdAt": "2020-06-08T17:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTMwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0ODAwOQ==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436748009", "bodyText": "This could also be written as:\nsql.append(\" where \");\nfor (var it = whereClauses.iterator(); it.hasNext()) {\n    sql.append(it.next());\n    if (it.hasNext()) {\n        sql.append(\" and \");\n    }\n}", "author": "pwinckles", "createdAt": "2020-06-08T14:22:39Z", "path": "fcrepo-search-impl/src/main/java/org/fcrepo/search/impl/SearchServiceImpl.java", "diffHunk": "@@ -29,9 +42,69 @@\n  */\n @Component\n public class SearchServiceImpl implements SearchService {\n+    private static final String FEDORA_ID_DB_COLUMN = \"fedora_id\";\n+\n+    @Inject\n+    private DataSource dataSource;\n+\n+    private NamedParameterJdbcTemplate jdbcTemplate;\n+\n+    @Inject\n+    private PlatformTransactionManager platformTransactionManager;\n+\n+    /**\n+     * Connect to the database\n+     */\n+    @PostConstruct\n+    private void setup() {\n+        jdbcTemplate = getNamedParameterJdbcTemplate();\n+    }\n+\n+    private NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        return new NamedParameterJdbcTemplate(this.dataSource);\n+    }\n \n     @Override\n-    public SearchResult doSearch(final SearchParameters parameters) {\n-        return new SearchResult();\n+    public SearchResult doSearch(final SearchParameters parameters) throws InvalidQueryException {\n+        //translate parameters into a SQL query\n+        final MapSqlParameterSource parameterSource = new MapSqlParameterSource();\n+        final var whereClauses = new ArrayList<String>();\n+        for (Condition condition : parameters.getConditions()) {\n+            if (condition.getField().equals(Condition.Field.fedora_id) &&\n+                    condition.getOperator().equals(Condition.Operator.EQ)) {\n+                var object = condition.getObject();\n+                if (!object.equals(\"*\")) {\n+                    if (object.contains(\"*\")) {\n+                        object = object.replace(\"*\", \"%\");\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" like '\" + object + \"'\");\n+                    } else {\n+                        whereClauses.add(FEDORA_ID_DB_COLUMN + \" = '\" + object + \"'\");\n+                    }\n+                }\n+            } else {\n+                throw new InvalidQueryException(\"Condition not supported: \" +\n+                        condition.getField() +\n+                        condition.getOperator().getStringValue() +\n+                        condition.getObject());\n+            }\n+        }\n+\n+        final var sql = new StringBuffer(\"select \" + FEDORA_ID_DB_COLUMN + \" from resources\");\n+        if (!whereClauses.isEmpty()) {", "originalCommit": "88b2c8d579d0b4ba18c1896ef392e702ef5474d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MTMzOA==", "url": "https://github.com/fcrepo/fcrepo/pull/1692#discussion_r436891338", "bodyText": "+1", "author": "dbernstein", "createdAt": "2020-06-08T17:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0ODAwOQ=="}], "type": "inlineReview"}, {"oid": "24d3b4cd38074a5c7706e469e3bb0acc2814d671", "url": "https://github.com/fcrepo/fcrepo/commit/24d3b4cd38074a5c7706e469e3bb0acc2814d671", "message": "Resolves PR feedback.", "committedDate": "2020-06-08T22:03:22Z", "type": "forcePushed"}, {"oid": "ae460e15bd4d5a418486655fe3864f9cb8a9ad90", "url": "https://github.com/fcrepo/fcrepo/commit/ae460e15bd4d5a418486655fe3864f9cb8a9ad90", "message": "Resolves PR feedback.", "committedDate": "2020-06-08T22:32:08Z", "type": "commit"}, {"oid": "ae460e15bd4d5a418486655fe3864f9cb8a9ad90", "url": "https://github.com/fcrepo/fcrepo/commit/ae460e15bd4d5a418486655fe3864f9cb8a9ad90", "message": "Resolves PR feedback.", "committedDate": "2020-06-08T22:32:08Z", "type": "forcePushed"}]}