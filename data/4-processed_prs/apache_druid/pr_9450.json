{"pr_number": 9450, "pr_title": "Skip empty files for local, hdfs, and cloud input sources", "pr_createdAt": "2020-03-03T04:37:28Z", "pr_url": "https://github.com/apache/druid/pull/9450", "timeline": [{"oid": "10b7e093b85e56c0bedf136e4d659219a5e58419", "url": "https://github.com/apache/druid/commit/10b7e093b85e56c0bedf136e4d659219a5e58419", "message": "Skip empty files for local, hdfs, and cloud input sources", "committedDate": "2020-03-03T04:15:31Z", "type": "commit"}, {"oid": "22915080f6b7399531ca63f9dd41f6a64d35dc4a", "url": "https://github.com/apache/druid/commit/22915080f6b7399531ca63f9dd41f6a64d35dc4a", "message": "split hint spec doc", "committedDate": "2020-03-03T04:22:21Z", "type": "commit"}, {"oid": "77524e22f907c6554c0464fe0eb0a8114753ddca", "url": "https://github.com/apache/druid/commit/77524e22f907c6554c0464fe0eb0a8114753ddca", "message": "doc for skipping empty files", "committedDate": "2020-03-03T04:27:41Z", "type": "commit"}, {"oid": "902c8c0c1c378b3100bc637f56b342c55db289a5", "url": "https://github.com/apache/druid/commit/902c8c0c1c378b3100bc637f56b342c55db289a5", "message": "fix typo; adjust tests", "committedDate": "2020-03-03T04:33:14Z", "type": "commit"}, {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673", "url": "https://github.com/apache/druid/commit/02ffb9ad072b6b0732d5c7b52e00834560400673", "message": "unnecessary fluent iterable", "committedDate": "2020-03-03T04:36:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODQzMQ==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387208431", "bodyText": "Unused?", "author": "ccaominh", "createdAt": "2020-03-03T18:24:53Z", "path": "core/src/main/java/org/apache/druid/data/input/MaxSizeSplitHintSpec.java", "diffHunk": "@@ -40,6 +42,7 @@\n public class MaxSizeSplitHintSpec implements SplitHintSpec\n {\n   public static final String TYPE = \"maxSize\";\n+  private static final Logger LOG = new Logger(MaxSizeSplitHintSpec.class);", "originalCommit": "02ffb9ad072b6b0732d5c7b52e00834560400673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNDI3Mg==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387234272", "bodyText": "Oops. Removed.", "author": "jihoonson", "createdAt": "2020-03-03T19:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMTQ5NQ==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387211495", "bodyText": "Should this be the one from guava instead? (same for MaxSizeSplitHintSpecTest)", "author": "ccaominh", "createdAt": "2020-03-03T18:30:29Z", "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import nl.jqno.equalsverifier.EqualsVerifier;\n+import org.apache.commons.compress.utils.Lists;", "originalCommit": "02ffb9ad072b6b0732d5c7b52e00834560400673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNDYzNQ==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387234635", "bodyText": "Oops. Fixed.", "author": "jihoonson", "createdAt": "2020-03-03T19:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMTQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNTk1Mg==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387215952", "bodyText": "This branch is not covered by unit tests", "author": "ccaominh", "createdAt": "2020-03-03T18:38:33Z", "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/ObjectStorageIterator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.google;\n+\n+import com.google.api.services.storage.Storage;\n+import com.google.api.services.storage.model.Objects;\n+import com.google.api.services.storage.model.StorageObject;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+public class ObjectStorageIterator implements Iterator<StorageObject>\n+{\n+  private final GoogleStorage storage;\n+  private final Iterator<URI> uris;\n+  private final long maxListingLength;\n+\n+  private Storage.Objects.List listRequest;\n+  private Objects results;\n+  private URI currentUri;\n+  private String nextPageToken;\n+  private Iterator<StorageObject> storageObjectsIterator;\n+  private StorageObject currentObject;\n+\n+  public ObjectStorageIterator(GoogleStorage storage, Iterator<URI> uris, long maxListingLength)\n+  {\n+    this.storage = storage;\n+    this.uris = uris;\n+    this.maxListingLength = maxListingLength;\n+    this.nextPageToken = null;\n+\n+    prepareNextRequest();\n+    fetchNextBatch();\n+    advanceStorageObject();\n+  }\n+\n+  private void prepareNextRequest()\n+  {\n+    try {\n+      currentUri = uris.next();\n+      String currentBucket = currentUri.getAuthority();\n+      String currentPrefix = StringUtils.maybeRemoveLeadingSlash(currentUri.getPath());\n+      nextPageToken = null;\n+      listRequest = storage.list(currentBucket)\n+                           .setPrefix(currentPrefix)\n+                           .setMaxResults(maxListingLength);\n+\n+    }\n+    catch (IOException io) {\n+      throw new RuntimeException(io);\n+    }\n+  }\n+\n+  private void fetchNextBatch()\n+  {\n+    try {\n+      listRequest.setPageToken(nextPageToken);\n+      results = GoogleUtils.retryGoogleCloudStorageOperation(() -> listRequest.execute());\n+      storageObjectsIterator = results.getItems().iterator();\n+      nextPageToken = results.getNextPageToken();\n+    }\n+    catch (Exception ex) {\n+      throw new RuntimeException(ex);\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasNext()\n+  {\n+    return currentObject != null;\n+  }\n+\n+  @Override\n+  public StorageObject next()\n+  {\n+    if (!hasNext()) {\n+      throw new NoSuchElementException();\n+    }\n+\n+    final StorageObject retVal = currentObject;\n+    advanceStorageObject();\n+    return retVal;\n+  }\n+\n+  private void advanceStorageObject()\n+  {\n+    while (storageObjectsIterator.hasNext() || nextPageToken != null || uris.hasNext()) {\n+      while (storageObjectsIterator.hasNext()) {\n+        final StorageObject next = storageObjectsIterator.next();\n+        // list with prefix can return directories, but they should always end with `/`, ignore them.\n+        // also skips empty objects.\n+        if (!next.getName().endsWith(\"/\") && next.getSize().signum() > 0) {\n+          currentObject = next;\n+          return;\n+        }\n+      }\n+\n+      if (nextPageToken != null) {\n+        fetchNextBatch();\n+      } else if (uris.hasNext()) {\n+        prepareNextRequest();\n+        fetchNextBatch();", "originalCommit": "02ffb9ad072b6b0732d5c7b52e00834560400673", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNDY5Mg==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387234692", "bodyText": "Added a test.", "author": "jihoonson", "createdAt": "2020-03-03T19:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNTk1Mg=="}], "type": "inlineReview"}, {"oid": "b59e457ee8f67789c16b7e43ad34d8acfd51f4f9", "url": "https://github.com/apache/druid/commit/b59e457ee8f67789c16b7e43ad34d8acfd51f4f9", "message": "address comments", "committedDate": "2020-03-03T19:06:46Z", "type": "commit"}, {"oid": "c6c1a7f24b25ae80f10fbff44b43bb033027b478", "url": "https://github.com/apache/druid/commit/c6c1a7f24b25ae80f10fbff44b43bb033027b478", "message": "fix test", "committedDate": "2020-03-03T19:11:05Z", "type": "commit"}, {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb", "url": "https://github.com/apache/druid/commit/0c31efc039db8336834a390ef8f41a153635e0eb", "message": "use the right lists", "committedDate": "2020-03-03T19:11:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NDk1Ng==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387244956", "bodyText": "The forbidden apis checks is flagging this: java.io.FileWriter [Uses default charset]", "author": "ccaominh", "createdAt": "2020-03-03T19:31:14Z", "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -98,11 +99,19 @@ public void testGetFileIteratorWithBothBaseDirAndDuplicateFilesIteratingFilesOnl\n     File baseDir = temporaryFolder.newFolder();\n     List<File> filesInBaseDir = new ArrayList<>();\n     for (int i = 0; i < 10; i++) {\n-      filesInBaseDir.add(File.createTempFile(\"local-input-source\", \".data\", baseDir));\n+      final File file = File.createTempFile(\"local-input-source\", \".data\", baseDir);\n+      try (FileWriter writer = new FileWriter(file)) {", "originalCommit": "0c31efc039db8336834a390ef8f41a153635e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDQ2Nw==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387310467", "bodyText": "Fixed.", "author": "jihoonson", "createdAt": "2020-03-03T21:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NDk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NzczMA==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387247730", "bodyText": "You'll need to update the pom to add this dependency:\n<dependency>\n  <groupId>com.google.http-client</groupId>\n  <artifactId>google-http-client</artifactId>\n  <scope>test</scope>\n</dependency>\n\nhttps://travis-ci.org/apache/druid/jobs/657595721#L2090", "author": "ccaominh", "createdAt": "2020-03-03T19:36:28Z", "path": "extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobIteratorTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n package org.apache.druid.storage.azure;\n \n+import com.google.api.client.util.Lists;", "originalCommit": "0c31efc039db8336834a390ef8f41a153635e0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDY4NQ==", "url": "https://github.com/apache/druid/pull/9450#discussion_r387310685", "bodyText": "Ah, this was a mistake. I'm not sure why the Intellij keeps adding a wrong one. Fixed it now.", "author": "jihoonson", "createdAt": "2020-03-03T21:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NzczMA=="}], "type": "inlineReview"}, {"oid": "0e575b33775a0cc02e76d901e247ff6746c36dfc", "url": "https://github.com/apache/druid/commit/0e575b33775a0cc02e76d901e247ff6746c36dfc", "message": "fix test", "committedDate": "2020-03-03T21:40:57Z", "type": "commit"}, {"oid": "6155d9c36d1b3aa125c61bb22721676fa49e5de2", "url": "https://github.com/apache/druid/commit/6155d9c36d1b3aa125c61bb22721676fa49e5de2", "message": "fix test", "committedDate": "2020-03-04T00:57:34Z", "type": "commit"}]}