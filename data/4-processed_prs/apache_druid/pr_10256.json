{"pr_number": 10256, "pr_title": "Web console: improve JSON paste experience ", "pr_createdAt": "2020-08-07T21:56:04Z", "pr_url": "https://github.com/apache/druid/pull/10256", "timeline": [{"oid": "8123a515f980580820d822884182ad074fcb6910", "url": "https://github.com/apache/druid/commit/8123a515f980580820d822884182ad074fcb6910", "message": "improve JSON paste", "committedDate": "2020-08-07T21:46:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzM0OA==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467307348", "bodyText": "What does placeholder do?", "author": "gianm", "createdAt": "2020-08-07T22:09:04Z", "path": "web-console/src/dialogs/spec-dialog/spec-dialog.tsx", "diffHunk": "@@ -65,6 +65,7 @@ export const SpecDialog = React.memo(function SpecDialog(props: SpecDialogProps)\n           tabSize: 2,\n         }}\n         style={{}}\n+        placeholder=\"{ JSON spec... }\"", "originalCommit": "8123a515f980580820d822884182ad074fcb6910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMDk2NQ==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467310965", "bodyText": "There are two changes in this PR that are thematically similar (when you fix an issue it is better to look for other potential issues in the code). A placeholder is the ghost text that appears in an input that goes away as soon as you start typing.\n\nBefore this change this dialog (which is not part of the data loader) would start of with {\\n\\n} as the initial value.\nNow it start off blank (but with a placeholder) meaning that you do not need to delete or select over the initial value if you want to paste your own spec.", "author": "vogievetsky", "createdAt": "2020-08-07T22:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzQ3NQ==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467307475", "bodyText": "What's all this new stuff for and what are the XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX about?", "author": "gianm", "createdAt": "2020-08-07T22:09:33Z", "path": "web-console/src/dialogs/spec-dialog/__snapshots__/spec-dialog.spec.tsx.snap", "diffHunk": "@@ -1,6 +1,187 @@\n // Jest Snapshot v1, https://goo.gl/fbAQLP\n \n-exports[`spec dialog matches snapshot 1`] = `\n+exports[`spec dialog matches snapshot no initSpec 1`] = `", "originalCommit": "8123a515f980580820d822884182ad074fcb6910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMTQ5OA==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467311498", "bodyText": "The .snap files are snapshots, they are unit tests that virtually render the UI and then take a snapshot of the dom.\nThe XXXXXXXXXXXX is some part of the internals of the AceEditor this is the 3rd party component we use to give the IDE like editor for the JSON. What does it do? No idea, but we will know if it changes!", "author": "vogievetsky", "createdAt": "2020-08-07T22:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjMxMQ==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467312311", "bodyText": "Oh, interesting\u2026\nDo we bundle this with the released app or is it skipped? I didn't realize it was a test file at first, because it's in the same src path that the main code is in.", "author": "gianm", "createdAt": "2020-08-07T22:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTQzNA==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467331434", "bodyText": "none of the tests (and test aids like this one) are included in the bundle because none of the code depends on any of the test code (if it did then it would not compile because tests run in a different environment jest than the prod code node/dom).\nIn general the web console follows a standard where every class (or functional component) lives in a file next to the style and the test\n\n... this has been the case from day one (of the unified console) and is pretty idiomatic of the modern web-dev world.\nThe tests are separated from the code with file extensions *.spec.* vs location", "author": "vogievetsky", "createdAt": "2020-08-07T23:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMjYwOQ==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467332609", "bodyText": "TIL", "author": "gianm", "createdAt": "2020-08-08T00:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzY3OA==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467307678", "bodyText": "What happens when the text in the area can't be parsed?", "author": "gianm", "createdAt": "2020-08-07T22:10:11Z", "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -24,7 +24,9 @@ import AceEditor from 'react-ace';\n import './json-input.scss';\n \n function parseHjson(str: string) {\n-  return str === '' ? null : Hjson.parse(str);\n+  // Throwing on empty input is more consistent with how JSON.parse works", "originalCommit": "8123a515f980580820d822884182ad074fcb6910", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNDA1Ng==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467314056", "bodyText": "When it can not parse the editor itself would keep the partial string value inside of it - so nothing interesting would happen. The issue is when it does parse... in simple terms this was the old problem:\nLet say you were deleting text and you have { entered. Then you press backspace.\nThe simplified logic flow would go like this:\n\nAceEditor: user has changed input to ''\nJsonInput: '' is valid JSON it parses to null, notify the parent\nDataLoader: user changed the spec to null that is not workable as a spec, adjust it to {}\nJsonInput: adjusting the input to \"{}\"\nAceEditor: shows {} after you pressed backspace on {\n\nNow it would go like this:\n\nAceEditor: user has changed input to ''\nJsonInput: '' is not valid JSON because it throws, keep waiting\nAceEditor: shows nothing\n\nNote that Hjson.parse({}) is {} so that is why we need to special case white space only strings. If we were not being that fancy and using boring old JSON.parse this would not be an issue as JSON.parse does not recognize '' as valid json.", "author": "vogievetsky", "createdAt": "2020-08-07T22:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMjU4OA==", "url": "https://github.com/apache/druid/pull/10256#discussion_r467332588", "bodyText": "Thanks for the detailed explanation!!", "author": "gianm", "createdAt": "2020-08-08T00:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzY3OA=="}], "type": "inlineReview"}]}