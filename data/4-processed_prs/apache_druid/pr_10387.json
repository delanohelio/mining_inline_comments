{"pr_number": 10387, "pr_title": "Support combining inputsource for parallel ingestion", "pr_createdAt": "2020-09-11T22:27:37Z", "pr_url": "https://github.com/apache/druid/pull/10387", "timeline": [{"oid": "be974fac098c4cbf302ab9feeb29ac8b46c14f18", "url": "https://github.com/apache/druid/commit/be974fac098c4cbf302ab9feeb29ac8b46c14f18", "message": "Add combining inputsource", "committedDate": "2020-09-11T22:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MTQwMA==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487371400", "bodyText": "Hmm, should it override isSplittable() and return true only when all underlying inputSources are splittable?", "author": "jihoonson", "createdAt": "2020-09-12T05:33:32Z", "path": "core/src/main/java/org/apache/druid/data/input/impl/CombiningInputSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.data.input.AbstractInputSource;\n+import org.apache.druid.data.input.InputFormat;\n+import org.apache.druid.data.input.InputSource;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.SplitHintSpec;\n+import org.apache.druid.java.util.common.Pair;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * InputSource that combines data from multiple inputSources. The delegate inputSources must be splittable.", "originalCommit": "be974fac098c4cbf302ab9feeb29ac8b46c14f18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyOTQ0NA==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487429444", "bodyText": "Since CombiningInputSource accepts a list of SplittableInputSource objects, the task would fail anyway at the deserialization phase if a non splittable input source was used. So I didn't think it would be needed to override isSplittable(). I can add it if you feel there is a case where it would be useful.", "author": "a2l007", "createdAt": "2020-09-12T17:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MTQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjYxMg==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487606612", "bodyText": "Ah, I missed that it only accepts SplittableInputSources. It looks reasonable to me since we have only one non-splittable inputSource which is InlineInputSource.", "author": "jihoonson", "createdAt": "2020-09-14T01:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MTQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MTc2Nw==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487371767", "bodyText": "I think this is good to document in the class-level Javadoc. Would you please add a description for overall behavior?", "author": "jihoonson", "createdAt": "2020-09-12T05:38:38Z", "path": "core/src/main/java/org/apache/druid/data/input/impl/CombiningInputSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.data.input.AbstractInputSource;\n+import org.apache.druid.data.input.InputFormat;\n+import org.apache.druid.data.input.InputSource;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.SplitHintSpec;\n+import org.apache.druid.java.util.common.Pair;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * InputSource that combines data from multiple inputSources. The delegate inputSources must be splittable.\n+ */\n+\n+public class CombiningInputSource extends AbstractInputSource implements SplittableInputSource\n+{\n+  private final List<SplittableInputSource> delegates;\n+\n+  @JsonCreator\n+  public CombiningInputSource(\n+      @JsonProperty(\"delegates\") List<SplittableInputSource> delegates\n+  )\n+  {\n+    Preconditions.checkArgument(\n+        delegates != null && !delegates.isEmpty(),\n+        \"Must specify atleast one delegate inputSource\"\n+    );\n+    this.delegates = delegates;\n+  }\n+\n+  @JsonProperty\n+  public List<SplittableInputSource> getDelegates()\n+  {\n+    return delegates;\n+  }\n+\n+  @Override\n+  public Stream<InputSplit> createSplits(\n+      InputFormat inputFormat,\n+      @Nullable SplitHintSpec splitHintSpec\n+  )\n+  {\n+    return delegates.stream().flatMap(inputSource -> {\n+      try {\n+        // Each inputSplit is paired up with its respective inputSource so that during split, withSplit() is called against\n+        // the correct inputSource for each inputSplit", "originalCommit": "be974fac098c4cbf302ab9feeb29ac8b46c14f18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MTgzOQ==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487371839", "bodyText": "typo: at least", "author": "jihoonson", "createdAt": "2020-09-12T05:39:26Z", "path": "core/src/main/java/org/apache/druid/data/input/impl/CombiningInputSource.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.data.input.AbstractInputSource;\n+import org.apache.druid.data.input.InputFormat;\n+import org.apache.druid.data.input.InputSource;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.SplitHintSpec;\n+import org.apache.druid.java.util.common.Pair;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * InputSource that combines data from multiple inputSources. The delegate inputSources must be splittable.\n+ */\n+\n+public class CombiningInputSource extends AbstractInputSource implements SplittableInputSource\n+{\n+  private final List<SplittableInputSource> delegates;\n+\n+  @JsonCreator\n+  public CombiningInputSource(\n+      @JsonProperty(\"delegates\") List<SplittableInputSource> delegates\n+  )\n+  {\n+    Preconditions.checkArgument(\n+        delegates != null && !delegates.isEmpty(),\n+        \"Must specify atleast one delegate inputSource\"\n+    );\n+    this.delegates = delegates;\n+  }\n+\n+  @JsonProperty\n+  public List<SplittableInputSource> getDelegates()\n+  {\n+    return delegates;\n+  }\n+\n+  @Override\n+  public Stream<InputSplit> createSplits(\n+      InputFormat inputFormat,\n+      @Nullable SplitHintSpec splitHintSpec\n+  )\n+  {\n+    return delegates.stream().flatMap(inputSource -> {\n+      try {\n+        // Each inputSplit is paired up with its respective inputSource so that during split, withSplit() is called against\n+        // the correct inputSource for each inputSplit\n+        return inputSource.createSplits(inputFormat, splitHintSpec)\n+                          .map(inputsplit -> new InputSplit(Pair.of(inputSource, inputsplit)));\n+      }\n+      catch (IOException e) {\n+        throw new RuntimeException(e);\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public int estimateNumSplits(InputFormat inputFormat, @Nullable SplitHintSpec splitHintSpec)\n+  {\n+    return delegates.stream().mapToInt(inputSource -> {\n+      try {\n+        return inputSource.estimateNumSplits(inputFormat, splitHintSpec);\n+      }\n+      catch (IOException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }).sum();\n+  }\n+\n+  @Override\n+  public InputSource withSplit(InputSplit split)\n+  {\n+    Pair<SplittableInputSource, InputSplit> inputSourceWithSplit = (Pair) split.get();\n+    return inputSourceWithSplit.lhs.withSplit(inputSourceWithSplit.rhs);\n+  }\n+\n+  @Override\n+  public boolean needsFormat()\n+  {\n+    // This is called only when ParallelIndexIngestionSpec needs to decide if either inputformat vs parserspec is required.\n+    // So if atleast one of the delegate inputSources needsFormat, we set this to true.", "originalCommit": "be974fac098c4cbf302ab9feeb29ac8b46c14f18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MzI0Mw==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487373243", "bodyText": "please note that delegate input sources requiring an inputFormat must have the same format for input data.\n\nHmm, thinking about this requirement, could it be more useful if you can read multiple inputSources even when they are formatted differently?", "author": "jihoonson", "createdAt": "2020-09-12T05:56:37Z", "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -1368,6 +1368,48 @@ Compared to the other native batch InputSources, SQL InputSource behaves differe\n * Similar to file-based input formats, any updates to existing data will replace the data in segments specific to the intervals specified in the `granularitySpec`.\n \n \n+### Combining Input Source\n+\n+The Combining input source is used to read data from multiple InputSources. This input source should be only used if all the delegate input sources are\n+ _splittable_ and can be used by the [Parallel task](#parallel-task). This input source will identify the splits from its delegates and each split will be processed by a worker task. Similar to other input sources, this input source supports a single `inputFormat`. Therefore, please note that delegate input sources requiring an `inputFormat` must have the same format for input data.", "originalCommit": "be974fac098c4cbf302ab9feeb29ac8b46c14f18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyOTQzOQ==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487429439", "bodyText": "Yeah did think about that and it would be definitely be more useful if we can handle multiple inputFormats as well. For doing this, we might have to push inputFormat to be a part of the inputSource config. Since it would impact other inputSources as well, I thought it would be better to investigate that separately and have an independent PR for that.", "author": "a2l007", "createdAt": "2020-09-12T17:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwNjU4Ng==", "url": "https://github.com/apache/druid/pull/10387#discussion_r487606586", "bodyText": "Sounds good to me. When we add support for multiple inputFormats, we should probably think about how we can make batch and streaming ingestion spec less diverse in describing inputSource and inputFormat as streaming ingestion currently doesn't require inputSource.", "author": "jihoonson", "createdAt": "2020-09-14T01:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MzI0Mw=="}], "type": "inlineReview"}, {"oid": "168e88004f8072bea7c27f20bed50bd4f1e3739a", "url": "https://github.com/apache/druid/commit/168e88004f8072bea7c27f20bed50bd4f1e3739a", "message": "Merge branch 'master' of https://github.com/druid-io/druid into delegate_source", "committedDate": "2020-09-12T16:38:19Z", "type": "commit"}, {"oid": "215d4e37e55b4e4781f1e5dafec26d9695717efc", "url": "https://github.com/apache/druid/commit/215d4e37e55b4e4781f1e5dafec26d9695717efc", "message": "Fix documentation", "committedDate": "2020-09-12T17:03:12Z", "type": "commit"}]}