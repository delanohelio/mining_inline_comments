{"pr_number": 10363, "pr_title": "fix injection failure of StorageLocationSelectorStrategy objects", "pr_createdAt": "2020-09-07T11:30:35Z", "pr_url": "https://github.com/apache/druid/pull/10363", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzNzk1OA==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484637958", "bodyText": "Please roll back useless code formatting.", "author": "asdf2014", "createdAt": "2020-09-08T04:03:51Z", "path": "server/src/main/java/org/apache/druid/segment/loading/LeastBytesUsedStorageLocationSelectorStrategy.java", "diffHunk": "@@ -32,11 +34,17 @@\n public class LeastBytesUsedStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n   private static final Ordering<StorageLocation> ORDERING = Ordering.from(Comparator\n-      .comparingLong(StorageLocation::currSizeBytes));\n+                                                                              .comparingLong(StorageLocation::currSizeBytes));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1ODQzNg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484658436", "bodyText": "It's accidentally formatted by IDEA. Been fixed.", "author": "FrankChen021", "createdAt": "2020-09-08T05:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzNzk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODAzMw==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638033", "bodyText": "Please roll back useless code formatting.", "author": "asdf2014", "createdAt": "2020-09-08T04:04:13Z", "path": "server/src/main/java/org/apache/druid/segment/loading/MostAvailableSizeStorageLocationSelectorStrategy.java", "diffHunk": "@@ -32,12 +34,18 @@\n public class MostAvailableSizeStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n   private static final Ordering<StorageLocation> ORDERING = Ordering.from(Comparator\n-      .comparingLong(StorageLocation::availableSizeBytes)\n-      .reversed());\n+                                                                              .comparingLong(StorageLocation::availableSizeBytes)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1ODQ2Nw==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484658467", "bodyText": "It's accidentally formatted by IDEA. Been fixed.", "author": "FrankChen021", "createdAt": "2020-09-08T05:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODM2Mg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638362", "bodyText": "The default values \u200b\u200bof reference types in Java are all null, so assigning null here should be meaningless.", "author": "asdf2014", "createdAt": "2020-09-08T04:05:49Z", "path": "server/src/main/java/org/apache/druid/segment/loading/RandomStorageLocationSelectorStrategy.java", "diffHunk": "@@ -31,9 +34,15 @@\n public class RandomStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n \n-  private final List<StorageLocation> storageLocations;\n+  private List<StorageLocation> storageLocations = null;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1OTM1Mw==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484659353", "bodyText": "IDEA reports an assignment of null is required due to some customized check rules. Been fixed.", "author": "FrankChen021", "createdAt": "2020-09-08T05:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODM5Mw==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638393", "bodyText": "The default values \u200b\u200bof reference types in Java are all null, so assigning null here should be meaningless.", "author": "asdf2014", "createdAt": "2020-09-08T04:05:58Z", "path": "server/src/main/java/org/apache/druid/segment/loading/RoundRobinStorageLocationSelectorStrategy.java", "diffHunk": "@@ -32,19 +35,25 @@\n  */\n public class RoundRobinStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n-\n-  private final List<StorageLocation> storageLocations;\n+  private List<StorageLocation> storageLocations = null;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1OTQxMg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484659412", "bodyText": "Been fixed.", "author": "FrankChen021", "createdAt": "2020-09-08T05:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODc0MQ==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638741", "bodyText": "In the newly added test cases, the throw Exception statement needs to be removed to pass the travis CI.", "author": "asdf2014", "createdAt": "2020-09-08T04:07:40Z", "path": "server/src/test/java/org/apache/druid/segment/loading/StorageLocationSelectorStrategyTest.java", "diffHunk": "@@ -256,4 +269,75 @@ public void testMostAvailableSizeLocationSelectorStrategy() throws Exception\n     Assert.assertEquals(\"The next element of the iterator should point to path local_storage_folder_1\",\n         localStorageFolder1, loc3.getPath());\n   }\n+\n+  @Test\n+  public void testDefaultSelectorStrategyConfig() throws Exception", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY1OTg3MA==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484659870", "bodyText": "throws declaration is useless here, maybe is introduced by code copy-paste. Been fixed.", "author": "FrankChen021", "createdAt": "2020-09-08T05:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzOTQ0Mg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484639442", "bodyText": "Although Properties inherits from Hashtable and can call the put method, it is recommended to use the setProperty method. In this way, you can forcibly restrict the incoming Key and Value of the String type to avoid an error when you call store or save again after passing in non-String data.", "author": "asdf2014", "createdAt": "2020-09-08T04:11:03Z", "path": "server/src/test/java/org/apache/druid/segment/loading/StorageLocationSelectorStrategyTest.java", "diffHunk": "@@ -256,4 +269,75 @@ public void testMostAvailableSizeLocationSelectorStrategy() throws Exception\n     Assert.assertEquals(\"The next element of the iterator should point to path local_storage_folder_1\",\n         localStorageFolder1, loc3.getPath());\n   }\n+\n+  @Test\n+  public void testDefaultSelectorStrategyConfig() throws Exception\n+  {\n+    //no druid.segmentCache.locationSelectorStrategy.type specified\n+    final Properties props = new Properties();\n+    SegmentLoaderConfig loaderConfig = makeInjectorWithProperties(props).getInstance(SegmentLoaderConfig.class);\n+    Assert.assertEquals(LeastBytesUsedStorageLocationSelectorStrategy.class,\n+                        loaderConfig.getStorageLocationSelectorStrategy().getClass());\n+  }\n+\n+  @Test\n+  public void testRoundRobinSelectorStrategyConfig() throws Exception\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.segmentCache.locationSelectorStrategy.type\", \"roundRobin\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2MDEyMg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484660122", "bodyText": "Been fixed.", "author": "FrankChen021", "createdAt": "2020-09-08T05:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzOTQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0MDAxOA==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484640018", "bodyText": "Generally, the first letter of the exception information needs to be capitalized. In addition, %s needs to be surrounded by square brackets. So please use Using storage location strategy: [%s].", "author": "asdf2014", "createdAt": "2020-09-08T04:13:49Z", "path": "server/src/main/java/org/apache/druid/segment/loading/SegmentLoaderLocalCacheManager.java", "diffHunk": "@@ -99,7 +99,10 @@ public SegmentLoaderLocalCacheManager(\n           )\n       );\n     }\n-    this.strategy = config.getStorageLocationSelectorStrategy(locations);\n+\n+    this.strategy = config.getStorageLocationSelectorStrategy();\n+    this.strategy.setLocations(locations);\n+    log.info(\"using storage location strategy: %s\", this.strategy.getClass().getSimpleName());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2MDEzOQ==", "url": "https://github.com/apache/druid/pull/10363#discussion_r484660139", "bodyText": "Been fixed.", "author": "FrankChen021", "createdAt": "2020-09-08T05:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0MDAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4ODU1Mg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r485188552", "bodyText": "I think this approach is brittle and might break when a new implementation of StorageLocationSelectorStrategy is added. Instead, I think we should make List<StorageLocation> storageLocations injectable instead via a module, something like\n@Provides\n@Singleton\npublic List<StorageLocation> provideStorageLocations(SegmentLoaderConfig config)\n{\n  this.locations = new ArrayList<>();\n  for (StorageLocationConfig locationConfig : config.getLocations()) {\n    locations.add(\n        new StorageLocation(\n            locationConfig.getPath(),\n            locationConfig.getMaxSize(),\n            locationConfig.getFreeSpacePercent()\n        )\n    );\nreturn locations;\n}", "author": "suneet-s", "createdAt": "2020-09-08T20:50:32Z", "path": "server/src/main/java/org/apache/druid/segment/loading/LeastBytesUsedStorageLocationSelectorStrategy.java", "diffHunk": "@@ -36,7 +38,13 @@\n \n   private List<StorageLocation> storageLocations;\n \n-  public LeastBytesUsedStorageLocationSelectorStrategy(List<StorageLocation> storageLocations)\n+  @JsonCreator\n+  public LeastBytesUsedStorageLocationSelectorStrategy()\n+  {\n+  }\n+\n+  @VisibleForTesting\n+  LeastBytesUsedStorageLocationSelectorStrategy(List<StorageLocation> storageLocations)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4Mjg2OQ==", "url": "https://github.com/apache/druid/pull/10363#discussion_r485282869", "bodyText": "Good idea.", "author": "FrankChen021", "createdAt": "2020-09-09T01:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4ODU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyODg2MQ==", "url": "https://github.com/apache/druid/pull/10363#discussion_r485428861", "bodyText": "Hi @suneet-s I check the code and find that this approach is a little bit complex for the existing code.\nStorage selector strategy object is constructed during deserialization of SegmentLoaderConfig,  and only after the construction of SegmentLoaderConfig, could it be possible to inject SegmentLoaderConfig to other objects to get list of StorageLocationConfig inside the object.\nIf we want to inject StorageLocation objects as the way you suggest, the strategy object must be separated from SegmentLoaderConfig into another new config class so that both SegmentLoaderConfig and this new config class can be injected into SegmentLocalCacheManager.  There will be lots of test cases involved to change to meet the new ctor of SegmentLocalCacheManager. So I think these change involve more complexity.\nBack to the concern you mentioned, I think there's no need to worry that new implementation would break the constraints. Because if it breaks,  the problem would be easily detected during unit test or integrated test.\nWhat do you think ?", "author": "FrankChen021", "createdAt": "2020-09-09T08:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4ODU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5MDE3MQ==", "url": "https://github.com/apache/druid/pull/10363#discussion_r485190171", "bodyText": "Is this a doc fix? I don't see an associated change in the code. Am I missing something?", "author": "suneet-s", "createdAt": "2020-09-08T20:53:55Z", "path": "docs/configuration/index.md", "diffHunk": "@@ -1379,7 +1379,7 @@ These Historical configurations can be defined in the `historical/runtime.proper\n |Property|Description|Default|\n |--------|-----------|-------|\n |`druid.segmentCache.locations`|Segments assigned to a Historical process are first stored on the local file system (in a disk cache) and then served by the Historical process. These locations define where that local cache resides. This value cannot be NULL or EMPTY. Here is an example `druid.segmentCache.locations=[{\"path\": \"/mnt/druidSegments\", \"maxSize\": \"10k\", \"freeSpacePercent\": 1.0}]`. \"freeSpacePercent\" is optional, if provided then enforces that much of free disk partition space while storing segments. But, it depends on File.getTotalSpace() and File.getFreeSpace() methods, so enable if only if they work for your File System.| none |\n-|`druid.segmentCache.locationSelectorStrategy`|The strategy used to select a location from the configured `druid.segmentCache.locations` for segment distribution. Possible values are `leastBytesUsed`, `roundRobin`, `random`, or `mostAvailableSize`. |leastBytesUsed|\n+|`druid.segmentCache.locationSelectorStrategy.type`|The strategy used to select a location from the configured `druid.segmentCache.locations` for segment distribution. Possible values are `leastBytesUsed`, `roundRobin`, `random`, or `mostAvailableSize`. |leastBytesUsed|", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4NDYwMQ==", "url": "https://github.com/apache/druid/pull/10363#discussion_r485284601", "bodyText": "It's a fix.  According to original code, annotation on StorageLocationSelectorStrategy indicates the name of json property is type.  When using druid.segmentCache.locationSelectorStrategy, jackson tries to find ctor with a String parameter , which causes the issue.", "author": "FrankChen021", "createdAt": "2020-09-09T01:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5MDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4NjU4Ng==", "url": "https://github.com/apache/druid/pull/10363#discussion_r489986586", "bodyText": "I think the previous implementation is better since you can use the configuration name druid.segmentCache.locationSelectorStrategy without type. Is there a reason that locationSelectorStrategy cannot be here?", "author": "jihoonson", "createdAt": "2020-09-17T05:52:29Z", "path": "server/src/main/java/org/apache/druid/segment/loading/SegmentLoaderConfig.java", "diffHunk": "@@ -54,9 +54,6 @@\n   @JsonProperty(\"numBootstrapThreads\")\n   private Integer numBootstrapThreads = null;\n \n-  @JsonProperty(\"locationSelectorStrategy\")\n-  private StorageLocationSelectorStrategy locationSelectorStrategy;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MTg2NA==", "url": "https://github.com/apache/druid/pull/10363#discussion_r490141864", "bodyText": "This is because StorageLocationStrategy depends on SegmentLoaderConfig.locations. If StorageLocationStrategy is placed here, when SegmentLoaderConfig is being deserialized, locations required by StorageLocationStrategy can't be found and injected into it.\nAfter moving this property out of SegmentLoaderConfig, both SegmentLoaderConfig and StorageLocationStrategy are deserialized during construction of SegmentLoaderLocalCacheManager, and jackson could find the locations objects required by strategy object through google guice framework to create strategy object correctly.\nUsing the configuration name without type I think is wrong. Please take a look at this configuration druid.coordinator.balancer.strategy, or the clarification on the change of configuration name I left above.", "author": "FrankChen021", "createdAt": "2020-09-17T10:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4NjU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ0Mjg4Mg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r490442882", "bodyText": "Got it. Then, how about using a similar naming to the coordinator balancer? For example, we can bind StorageLocationSelectorStrategy to druid.segmentCache.locationSelector, and use a strategy property name for StorageLocationSelectorStrategy instead of type.", "author": "jihoonson", "createdAt": "2020-09-17T17:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4NjU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzMTUzOA==", "url": "https://github.com/apache/druid/pull/10363#discussion_r493131538", "bodyText": "Sorry for the late reply.\nYour suggestion makes the naming more meaningful. I'll update this PR later this day.", "author": "FrankChen021", "createdAt": "2020-09-23T01:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4NjU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MTM1MA==", "url": "https://github.com/apache/druid/pull/10363#discussion_r500681350", "bodyText": "Should this be druid.segmentCache.locationSelector instead?", "author": "jihoonson", "createdAt": "2020-10-07T01:14:44Z", "path": "server/src/main/java/org/apache/druid/guice/StorageNodeModule.java", "diffHunk": "@@ -52,6 +55,7 @@ public void configure(Binder binder)\n   {\n     JsonConfigProvider.bind(binder, \"druid.server\", DruidServerConfig.class);\n     JsonConfigProvider.bind(binder, \"druid.segmentCache\", SegmentLoaderConfig.class);\n+    JsonConfigProvider.bind(binder, \"druid.segmentCache.locationSelector.strategy\", StorageLocationSelectorStrategy.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwNDA2MQ==", "url": "https://github.com/apache/druid/pull/10363#discussion_r500904061", "bodyText": "Oh sorry, this is a bug. I remember I tested it in my cluster, maybe I missed something then. The code has been updated in the latest commit.", "author": "FrankChen021", "createdAt": "2020-10-07T10:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MTM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MjQzNg==", "url": "https://github.com/apache/druid/pull/10363#discussion_r500682436", "bodyText": "This binding is different from what actual module binds. I think this is why we missed the wrong binding. Can we use the same StorageNodeModule here? Or can we add a helper method which does the proper binding for both StorageNodeModule and tests?", "author": "jihoonson", "createdAt": "2020-10-07T01:18:52Z", "path": "server/src/test/java/org/apache/druid/segment/loading/StorageLocationSelectorStrategyTest.java", "diffHunk": "@@ -256,4 +270,107 @@ public void testMostAvailableSizeLocationSelectorStrategy() throws Exception\n     Assert.assertEquals(\"The next element of the iterator should point to path local_storage_folder_1\",\n         localStorageFolder1, loc3.getPath());\n   }\n+\n+  @Test\n+  public void testDefaultSelectorStrategyConfig()\n+  {\n+    //no druid.segmentCache.locationSelector.strategy specified, the default will be used\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+\n+    StorageLocationSelectorStrategy strategy = makeInjectorWithProperties(props).getInstance(StorageLocationSelectorStrategy.class);\n+    Assert.assertEquals(LeastBytesUsedStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testRoundRobinSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"roundRobin\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(RoundRobinStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testLeastBytesUsedSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"leastBytesUsed\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(LeastBytesUsedStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testRandomSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"random\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(RandomStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testMostAvailableSizeSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"mostAvailableSize\");\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(MostAvailableSizeStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  private Injector makeInjectorWithProperties(final Properties props)\n+  {\n+    return Guice.createInjector(\n+        new Module()\n+          {\n+            @Override\n+            public void configure(Binder binder)\n+            {\n+              //ObjectMapperModule introduce Guice injector for jackson\n+              binder.install(new ObjectMapperModule()\n+                                 .withObjectMapper(new DefaultObjectMapper()));\n+              binder.install(new DruidGuiceExtensions());\n+\n+              binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n+              binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n+              binder.bind(Properties.class).toInstance(props);\n+\n+              JsonConfigProvider.bind(binder, \"druid.segmentCache\", SegmentLoaderConfig.class);\n+              JsonConfigProvider.bind(binder, \"druid.segmentCache.locationSelector\", StorageLocationSelectorStrategy.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMjQ4Mw==", "url": "https://github.com/apache/druid/pull/10363#discussion_r500902483", "bodyText": "The reason why StorageModule is not used here is because there're some extra dependencies in StorageModule, which might introduce lots of injection code in test cases. A helper method is extracted to do the correct binding.", "author": "FrankChen021", "createdAt": "2020-10-07T10:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MjQzNg=="}], "type": "inlineReview"}, {"oid": "65583aa045c7fb48812ceb3d49b60bd11ea3df2d", "url": "https://github.com/apache/druid/commit/65583aa045c7fb48812ceb3d49b60bd11ea3df2d", "message": "fix to allow customer storage location selector strategy", "committedDate": "2020-12-08T01:31:11Z", "type": "commit"}, {"oid": "a24ae6ead065af7f83b3ae9a30fb782b1af9a793", "url": "https://github.com/apache/druid/commit/a24ae6ead065af7f83b3ae9a30fb782b1af9a793", "message": "add test cases to check instance of selector strategy", "committedDate": "2020-12-08T01:31:11Z", "type": "commit"}, {"oid": "0a6e163c28fb04b57733d4362ae7a8ea2bc2620c", "url": "https://github.com/apache/druid/commit/0a6e163c28fb04b57733d4362ae7a8ea2bc2620c", "message": "update doc", "committedDate": "2020-12-08T01:31:11Z", "type": "commit"}, {"oid": "67aaf0894b3b5d0ea3d7200586061fb06ef8414c", "url": "https://github.com/apache/druid/commit/67aaf0894b3b5d0ea3d7200586061fb06ef8414c", "message": "code format", "committedDate": "2020-12-08T01:31:11Z", "type": "commit"}, {"oid": "154d7c508a86b05ae9c5ce0ab429afedf1df25ff", "url": "https://github.com/apache/druid/commit/154d7c508a86b05ae9c5ce0ab429afedf1df25ff", "message": "resolve code review comments", "committedDate": "2020-12-08T01:31:11Z", "type": "commit"}, {"oid": "402571b8bbfcf9f4cea68498ac3ccbc933f39fb6", "url": "https://github.com/apache/druid/commit/402571b8bbfcf9f4cea68498ac3ccbc933f39fb6", "message": "inject StorageLocation", "committedDate": "2020-12-08T01:31:12Z", "type": "commit"}, {"oid": "26a98fb10193791189f98dae3d713fde9158c361", "url": "https://github.com/apache/druid/commit/26a98fb10193791189f98dae3d713fde9158c361", "message": "fix CI", "committedDate": "2020-12-08T01:32:15Z", "type": "commit"}, {"oid": "71b416ee7cdd403a557dabe342910fddab5acaa3", "url": "https://github.com/apache/druid/commit/71b416ee7cdd403a557dabe342910fddab5acaa3", "message": "fix mismatched license item reported by CI", "committedDate": "2020-12-08T01:32:21Z", "type": "commit"}, {"oid": "fae9a79b54cf599729c33233d98f962fadaa1171", "url": "https://github.com/apache/druid/commit/fae9a79b54cf599729c33233d98f962fadaa1171", "message": "change property path from druid.segmentCache.locationSelectorStrategy.type to druid.segmentCache.locationSelector.strategy", "committedDate": "2020-12-08T01:32:22Z", "type": "commit"}, {"oid": "90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "url": "https://github.com/apache/druid/commit/90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "message": "using a helper method to bind to correct property path", "committedDate": "2020-12-08T01:32:22Z", "type": "commit"}, {"oid": "90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "url": "https://github.com/apache/druid/commit/90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "message": "using a helper method to bind to correct property path", "committedDate": "2020-12-08T01:32:22Z", "type": "forcePushed"}]}