{"pr_number": 9487, "pr_title": "Convert array_contains() and array_overlaps() into native filters if possible", "pr_createdAt": "2020-03-09T18:42:13Z", "pr_url": "https://github.com/apache/druid/pull/9487", "timeline": [{"oid": "203ee3d209a9bf8fb3aa5a7de196bac60542c5b0", "url": "https://github.com/apache/druid/commit/203ee3d209a9bf8fb3aa5a7de196bac60542c5b0", "message": "Convert array_contains() and array_overlaps() into native filters if\npossible", "committedDate": "2020-03-09T18:32:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2OTIyNw==", "url": "https://github.com/apache/druid/pull/9487#discussion_r389969227", "bodyText": "nit: is it worth splitting this out into a static method on one of these classes (or a utility method somewhere) since this block looks basically shared with array_contains?", "author": "clintropolis", "createdAt": "2020-03-09T21:22:17Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java", "diffHunk": "@@ -51,4 +67,66 @@ public ArrayOverlapOperatorConversion()\n   {\n     super(SQL_FUNCTION, EXPR_FUNCTION);\n   }\n+\n+  @Nullable\n+  @Override\n+  public DimFilter toDruidFilter(\n+      final PlannerContext plannerContext,\n+      RowSignature rowSignature,\n+      @Nullable VirtualColumnRegistry virtualColumnRegistry,\n+      final RexNode rexNode\n+  )\n+  {\n+    final List<RexNode> operands = ((RexCall) rexNode).getOperands();\n+    final List<DruidExpression> druidExpressions = Expressions.toDruidExpressions(\n+        plannerContext,\n+        rowSignature,\n+        operands\n+    );\n+    if (druidExpressions == null) {\n+      return null;\n+    }\n+\n+    // Converts array_overlaps() function into an OR of Selector filters if possible.\n+    final boolean leftSimpleExtractionExpr = druidExpressions.get(0).isSimpleExtraction();\n+    final boolean rightSimpleExtractionExpr = druidExpressions.get(1).isSimpleExtraction();\n+    final DruidExpression simpleExtractionExpr;\n+    final DruidExpression complexExpr;\n+\n+    if (leftSimpleExtractionExpr ^ rightSimpleExtractionExpr) {\n+      if (leftSimpleExtractionExpr) {\n+        simpleExtractionExpr = druidExpressions.get(0);\n+        complexExpr = druidExpressions.get(1);\n+      } else {\n+        simpleExtractionExpr = druidExpressions.get(1);\n+        complexExpr = druidExpressions.get(0);\n+      }\n+    } else {\n+      return toExpressionFilter(plannerContext, getDruidFunctionName(), druidExpressions);\n+    }\n+\n+    Expr expr = Parser.parse(complexExpr.getExpression(), plannerContext.getExprMacroTable());\n+    if (expr.isLiteral()) {", "originalCommit": "203ee3d209a9bf8fb3aa5a7de196bac60542c5b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NTY5NA==", "url": "https://github.com/apache/druid/pull/9487#discussion_r389995694", "bodyText": "ah, else is different, carry on", "author": "clintropolis", "createdAt": "2020-03-09T22:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2OTIyNw=="}], "type": "inlineReview"}, {"oid": "35ede5be0418104869625e4f09714f54dd3e8fed", "url": "https://github.com/apache/druid/commit/35ede5be0418104869625e4f09714f54dd3e8fed", "message": "make spotbugs happy and fix null results when null compatible", "committedDate": "2020-03-09T22:21:10Z", "type": "commit"}]}