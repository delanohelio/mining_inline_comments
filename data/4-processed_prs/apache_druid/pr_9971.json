{"pr_number": 9971, "pr_title": "Load broadcast datasources on broker and tasks", "pr_createdAt": "2020-06-03T00:27:28Z", "pr_url": "https://github.com/apache/druid/pull/9971", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "url": "https://github.com/apache/druid/commit/c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "message": "Load broadcast datasources on broker and tasks", "committedDate": "2020-06-03T01:01:58Z", "type": "commit"}, {"oid": "c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "url": "https://github.com/apache/druid/commit/c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "message": "Load broadcast datasources on broker and tasks", "committedDate": "2020-06-03T01:01:58Z", "type": "forcePushed"}, {"oid": "5b145d3bcd59f25b9576e8b4d069be8ed9990b9f", "url": "https://github.com/apache/druid/commit/5b145d3bcd59f25b9576e8b4d069be8ed9990b9f", "message": "Add javadocs", "committedDate": "2020-06-03T01:35:52Z", "type": "commit"}, {"oid": "a07a561f31112536f543df68729c5d7f39097d8d", "url": "https://github.com/apache/druid/commit/a07a561f31112536f543df68729c5d7f39097d8d", "message": "Support HTTP segment management", "committedDate": "2020-06-03T03:10:55Z", "type": "commit"}, {"oid": "d3252d364415596f5ac550dc5304966cd6abe8c2", "url": "https://github.com/apache/druid/commit/d3252d364415596f5ac550dc5304966cd6abe8c2", "message": "Fix indexer maxSize", "committedDate": "2020-06-03T03:23:26Z", "type": "commit"}, {"oid": "808d249ffae8a43158874e737d61fb159ee3a2a9", "url": "https://github.com/apache/druid/commit/808d249ffae8a43158874e737d61fb159ee3a2a9", "message": "inspection fix", "committedDate": "2020-06-03T03:31:22Z", "type": "commit"}, {"oid": "9eacac68a8c2f840f7735533bb5ba727c6e137fb", "url": "https://github.com/apache/druid/commit/9eacac68a8c2f840f7735533bb5ba727c6e137fb", "message": "Make segment cache optional on non-historicals", "committedDate": "2020-06-04T02:05:54Z", "type": "commit"}, {"oid": "eebca052d6da21027a3983856398a8a101bfc0fc", "url": "https://github.com/apache/druid/commit/eebca052d6da21027a3983856398a8a101bfc0fc", "message": "Fix build", "committedDate": "2020-06-04T03:31:17Z", "type": "commit"}, {"oid": "ca1affea1f8e76d715729ddf6ee690c652a18eab", "url": "https://github.com/apache/druid/commit/ca1affea1f8e76d715729ddf6ee690c652a18eab", "message": "Fix inspections, some coverage, failed tests", "committedDate": "2020-06-04T06:27:00Z", "type": "commit"}, {"oid": "ef2feb424f2ade2dd42babe45c497cbf90048ebd", "url": "https://github.com/apache/druid/commit/ef2feb424f2ade2dd42babe45c497cbf90048ebd", "message": "More tests", "committedDate": "2020-06-04T06:51:26Z", "type": "commit"}, {"oid": "4ce47af9843f966cb2f15e3f423f1f2c78e98ca5", "url": "https://github.com/apache/druid/commit/4ce47af9843f966cb2f15e3f423f1f2c78e98ca5", "message": "Add CliIndexer to MainTest", "committedDate": "2020-06-04T06:56:47Z", "type": "commit"}, {"oid": "6b439d89818c75275ee810bc09ae99617ab52eb5", "url": "https://github.com/apache/druid/commit/6b439d89818c75275ee810bc09ae99617ab52eb5", "message": "Fix inspection", "committedDate": "2020-06-04T10:42:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNDc2MA==", "url": "https://github.com/apache/druid/pull/9971#discussion_r434504760", "bodyText": "super nit: how about LoadableDataSegment or something like that to make it more obvious that it is used for segment loading?", "author": "clintropolis", "createdAt": "2020-06-03T11:43:29Z", "path": "server/src/main/java/org/apache/druid/server/coordination/UnprunedDataSegment.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.coordination;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import org.apache.druid.jackson.CommaListJoinDeserializer;\n+import org.apache.druid.timeline.CompactionState;\n+import org.apache.druid.timeline.DataSegment;\n+import org.apache.druid.timeline.partition.ShardSpec;\n+import org.joda.time.Interval;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A deserialization aid used by {@link SegmentChangeRequestLoad}. The broker prunes the loadSpec from segments\n+ * for efficiency reasons, but the broker does need the loadSpec when it loads broadcast segments.\n+ *\n+ * This class always uses the non-pruning default {@link org.apache.druid.timeline.DataSegment.PruneSpecsHolder}.\n+ */\n+public class UnprunedDataSegment extends DataSegment", "originalCommit": "808d249ffae8a43158874e737d61fb159ee3a2a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab", "url": "https://github.com/apache/druid/commit/8d2de37b3999600e6150a7d56c8f895996ea6aab", "message": "Rename UnprunedDataSegment to LoadableDataSegment", "committedDate": "2020-06-05T20:13:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDMwNw==", "url": "https://github.com/apache/druid/pull/9971#discussion_r436304307", "bodyText": "Would you add some comment about that this duty should run before BalanceSegments here?", "author": "jihoonson", "createdAt": "2020-06-06T22:06:21Z", "path": "server/src/main/java/org/apache/druid/server/coordinator/duty/RunRules.java", "diffHunk": "@@ -112,6 +115,9 @@ public DruidCoordinatorRuntimeParams run(DruidCoordinatorRuntimeParams params)\n         if (rule.appliesTo(segment, now)) {\n           stats.accumulate(rule.run(coordinator, paramsWithReplicationManager, segment));\n           foundMatchingRule = true;\n+          if (rule instanceof BroadcastDistributionRule) {\n+            broadcastDatasources.add(segment.getDataSource());", "originalCommit": "8d2de37b3999600e6150a7d56c8f895996ea6aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzMwMg==", "url": "https://github.com/apache/druid/pull/9971#discussion_r437077302", "bodyText": "Added a comment", "author": "jon-wei", "createdAt": "2020-06-09T00:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDkzNQ==", "url": "https://github.com/apache/druid/pull/9971#discussion_r436304935", "bodyText": "Please use TemporaryFolder of JUnit (an example is found here). This rule automatically cleans up the temp directory on exit.", "author": "jihoonson", "createdAt": "2020-06-06T22:15:56Z", "path": "server/src/test/java/org/apache/druid/server/coordination/ZkCoordinatorTest.java", "diffHunk": "@@ -67,9 +76,32 @@ public String getBase()\n   };\n   private ZkCoordinator zkCoordinator;\n \n+  private File infoDir;", "originalCommit": "8d2de37b3999600e6150a7d56c8f895996ea6aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzQ1NA==", "url": "https://github.com/apache/druid/pull/9971#discussion_r437077454", "bodyText": "Changed this to use TemporaryFolder, I also changed SegmentLoadDropHandlerTest which is where I got the code from", "author": "jon-wei", "createdAt": "2020-06-09T00:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MTUzNg==", "url": "https://github.com/apache/druid/pull/9971#discussion_r437081536", "bodyText": "\ud83d\udc4d", "author": "jihoonson", "createdAt": "2020-06-09T01:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTA0Ng==", "url": "https://github.com/apache/druid/pull/9971#discussion_r436305046", "bodyText": "These seem duplicate. Could you clean up these parameters? Same for the other below param sets.", "author": "jihoonson", "createdAt": "2020-06-06T22:17:46Z", "path": "server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleSerdeTest.java", "diffHunk": "@@ -44,15 +43,15 @@\n   public static List<Object[]> constructorFeeder()\n   {\n     return Lists.newArrayList(\n-        new Object[]{new ForeverBroadcastDistributionRule(ImmutableList.of(\"large_source1\", \"large_source2\"))},\n-        new Object[]{new ForeverBroadcastDistributionRule(ImmutableList.of())},\n-        new Object[]{new ForeverBroadcastDistributionRule(null)},\n-        new Object[]{new IntervalBroadcastDistributionRule(Intervals.of(\"0/1000\"), ImmutableList.of(\"large_source\"))},\n-        new Object[]{new IntervalBroadcastDistributionRule(Intervals.of(\"0/1000\"), ImmutableList.of())},\n-        new Object[]{new IntervalBroadcastDistributionRule(Intervals.of(\"0/1000\"), null)},\n-        new Object[]{new PeriodBroadcastDistributionRule(new Period(1000), null, ImmutableList.of(\"large_source\"))},\n-        new Object[]{new PeriodBroadcastDistributionRule(new Period(1000), null, ImmutableList.of())},\n-        new Object[]{new PeriodBroadcastDistributionRule(new Period(1000), null, null)}\n+        new Object[]{new ForeverBroadcastDistributionRule()},\n+        new Object[]{new ForeverBroadcastDistributionRule()},\n+        new Object[]{new ForeverBroadcastDistributionRule()},", "originalCommit": "8d2de37b3999600e6150a7d56c8f895996ea6aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzQ5OA==", "url": "https://github.com/apache/druid/pull/9971#discussion_r437077498", "bodyText": "Cleaned up params", "author": "jon-wei", "createdAt": "2020-06-09T00:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNzA5Ng==", "url": "https://github.com/apache/druid/pull/9971#discussion_r436307096", "bodyText": "Hmm, the CI failure doesn't like missing tests for this change. Thinking about it for a bit, what will happen if the peon always loads the stuffs for loading broadcast segments? If I'm reading the code correctly, the coordinator will not broadcast segments to batch tasks no matter whether they are running on neither middleManagers nor indexers. The realtime tasks announce themselves when they run on middleManagers or don't announce when they run on indexers, but the batch tasks never announce themselves. So, it seems like, if the peon always loaded the stuffs for broadcast segment loading, those stuffs could be loaded for batch tasks as well but wouldn't do anything? If that's the case, I'm fine with always loading them rather than adding this new parameter and tests for it.", "author": "jihoonson", "createdAt": "2020-06-06T22:57:26Z", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/ForkingTaskRunner.java", "diffHunk": "@@ -327,6 +327,13 @@ public TaskStatus call()\n                           command.add(nodeType);\n                         }\n \n+                        // If the task type is queryable, we need to load broadcast segments on the peon, used for\n+                        // join queries\n+                        if (task.supportsQueries()) {\n+                          command.add(\"--loadBroadcastSegments\");", "originalCommit": "8d2de37b3999600e6150a7d56c8f895996ea6aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODA1NA==", "url": "https://github.com/apache/druid/pull/9971#discussion_r437078054", "bodyText": "Hm, I saw the batch tasks loading things from segment cache, which I was trying to avoid right now since they could be loaded on-heap for indexed tables, for performance/memory load reasons.\nFor the coverage, I'm thinking we should ignore the coverage failure on ForkingTaskRunner and CliPeon for this PR, does that sound okay to you?", "author": "jon-wei", "createdAt": "2020-06-09T00:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNzA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MjEyNg==", "url": "https://github.com/apache/druid/pull/9971#discussion_r437082126", "bodyText": "Ah, the segment cache is a good point. It makes sense.\n\nFor the coverage, I'm thinking we should ignore the coverage failure on ForkingTaskRunner and CliPeon for this PR, does that sound okay to you?\n\nI think it's fine.", "author": "jihoonson", "createdAt": "2020-06-09T01:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNzA5Ng=="}], "type": "inlineReview"}, {"oid": "5f2e73ee215d37f6cbf254fe12a29f9477f20177", "url": "https://github.com/apache/druid/commit/5f2e73ee215d37f6cbf254fe12a29f9477f20177", "message": "Address PR comments", "committedDate": "2020-06-09T00:48:13Z", "type": "commit"}, {"oid": "2d005ed185100daf89c04097b9631a22d70ad947", "url": "https://github.com/apache/druid/commit/2d005ed185100daf89c04097b9631a22d70ad947", "message": "Fix", "committedDate": "2020-06-09T00:50:00Z", "type": "commit"}]}