{"pr_number": 9422, "pr_title": "Handle unknown complex types", "pr_createdAt": "2020-02-27T00:03:24Z", "pr_url": "https://github.com/apache/druid/pull/9422", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "c22f21419b591d534e04a1b625a8687560a38385", "url": "https://github.com/apache/druid/commit/c22f21419b591d534e04a1b625a8687560a38385", "message": "Prevent unknown complex types from breaking DruidSchema refresh", "committedDate": "2020-06-30T18:03:44Z", "type": "commit"}, {"oid": "c22f21419b591d534e04a1b625a8687560a38385", "url": "https://github.com/apache/druid/commit/c22f21419b591d534e04a1b625a8687560a38385", "message": "Prevent unknown complex types from breaking DruidSchema refresh", "committedDate": "2020-06-30T18:03:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng==", "url": "https://github.com/apache/druid/pull/9422#discussion_r447986966", "bodyText": "should this method and makeVectorObjectSelector maybe log.warn to provide evidence that this is happening? Or do you expect that would be too noisy?", "author": "clintropolis", "createdAt": "2020-06-30T21:22:32Z", "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();", "originalCommit": "c22f21419b591d534e04a1b625a8687560a38385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NDE1Nw==", "url": "https://github.com/apache/druid/pull/9422#discussion_r448544157", "bodyText": "While it wouldn't be too noisy, it made me think will it give us enough information to understand which column is actually invalid now?", "author": "samarthjain", "createdAt": "2020-07-01T18:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NzQ4NQ==", "url": "https://github.com/apache/druid/pull/9422#discussion_r448557485", "bodyText": "Yeah, it wouldn't really tell us which column is invalid, just that it is happening I think. Up to you if you want to add the log, I'm not totally sure its useful was just thinking out loud.", "author": "clintropolis", "createdAt": "2020-07-01T18:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTc5NA==", "url": "https://github.com/apache/druid/pull/9422#discussion_r448621794", "bodyText": "Thinking more about it though, I do think we should log somewhere so the operator can know that an aggregator isn't loaded so a complex column can't be read. Maybe the SimpleColumnHolder would be more appropriate of a place?", "author": "clintropolis", "createdAt": "2020-07-01T21:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ==", "url": "https://github.com/apache/druid/pull/9422#discussion_r447987561", "bodyText": "I think this should I think be making a NilVectorSelector from the offset so that max vector size is set correctly", "author": "clintropolis", "createdAt": "2020-06-30T21:23:45Z", "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();\n+  }\n+\n+  @Override\n+  public VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset)\n+  {\n+    return NIL_VECTOR_SELECTOR_INSTANCE;", "originalCommit": "c22f21419b591d534e04a1b625a8687560a38385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMTk2Ng==", "url": "https://github.com/apache/druid/pull/9422#discussion_r448001966", "bodyText": "Oops, good point. @samarthjain could you please fix this?", "author": "jihoonson", "createdAt": "2020-06-30T21:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0NjExMg==", "url": "https://github.com/apache/druid/pull/9422#discussion_r448046112", "bodyText": "@clintropolis - can you provide me a snippet of what needs to be done. I don't see a method available in NilVectorSelector that would taking in ReadableVectorOffset", "author": "samarthjain", "createdAt": "2020-07-01T00:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0ODc2Mw==", "url": "https://github.com/apache/druid/pull/9422#discussion_r448048763", "bodyText": "ReadableVectorOffset is a VectorSizeInspector, so I think return NilVectorSelector.create(offset); is all you need to do.", "author": "clintropolis", "createdAt": "2020-07-01T00:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NDM0Mw==", "url": "https://github.com/apache/druid/pull/9422#discussion_r448544343", "bodyText": "Thanks!", "author": "samarthjain", "createdAt": "2020-07-01T18:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}], "type": "inlineReview"}]}