{"pr_number": 10279, "pr_title": "Add SQL \"OFFSET\" clause.", "pr_createdAt": "2020-08-14T02:22:04Z", "pr_url": "https://github.com/apache/druid/pull/10279", "timeline": [{"oid": "a05d7a26f74286ecc0687f465951a0f624dae6f3", "url": "https://github.com/apache/druid/commit/a05d7a26f74286ecc0687f465951a0f624dae6f3", "message": "Add SQL \"OFFSET\" clause.\n\nUnder the hood, this uses the new offset features from #10233 (Scan)\nand #10235 (GroupBy). Since Timeseries and TopN queries do not currently\nhave an offset feature, SQL planning will switch from one of those to\nScan or GroupBy if users add an OFFSET.\n\nIncludes a refactoring to harmonize offset and limit planning using an\nOffsetLimit wrapper class. This is useful because it ensures that the\nvarious places that need to deal with offset and limit collapsing all\nbehave the same way, using its \"andThen\" method.", "committedDate": "2020-08-14T02:21:28Z", "type": "commit"}, {"oid": "891a38952b40e1af876f0b5e233a3dd6c7f635ba", "url": "https://github.com/apache/druid/commit/891a38952b40e1af876f0b5e233a3dd6c7f635ba", "message": "Fix test and add another test.", "committedDate": "2020-08-14T14:04:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzMjYxMw==", "url": "https://github.com/apache/druid/pull/10279#discussion_r473832613", "bodyText": "Would it be worth pushing a method into OffsetLimit to check that limit is greater than 0 to use for timeseries/group by/scan to use instead of hasLimit?", "author": "clintropolis", "createdAt": "2020-08-20T09:53:58Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -762,9 +756,20 @@ public TimeseriesQuery toTimeseriesQuery()\n           Iterables.getOnlyElement(grouping.getDimensions()).toDimensionSpec().getOutputName()\n       );\n       if (sorting != null) {\n-        // If there is sorting, set timeseriesLimit to given value if less than Integer.Max_VALUE\n-        if (sorting.isLimited()) {\n-          timeseriesLimit = Ints.checkedCast(sorting.getLimit());\n+        if (sorting.getOffsetLimit().hasOffset()) {\n+          // Timeseries cannot handle offsets.\n+          return null;\n+        }\n+\n+        if (sorting.getOffsetLimit().hasLimit()) {\n+          final long limit = sorting.getOffsetLimit().getLimit();\n+\n+          if (limit == 0) {", "originalCommit": "891a38952b40e1af876f0b5e233a3dd6c7f635ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1MzIzNA==", "url": "https://github.com/apache/druid/pull/10279#discussion_r473853234", "bodyText": "Ah i wasn't thinking it through, I guess you still need to check hasLimit for the non-zero case.\nFor timeseries though, it looks like timeseriesLimit is initialized to 0, is returning null here changing behavior? I guess a zero here is an explicit zero, meaning unlimited wasn't probably the expected response?", "author": "clintropolis", "createdAt": "2020-08-20T10:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzMjYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNzAzNg==", "url": "https://github.com/apache/druid/pull/10279#discussion_r474217036", "bodyText": "That's true; at this point, a zero should be treated as an explicit zero. The native timeseries query treats 0 and null equivalently and both result in an unlimited query. So we have to bail out if the limit is an explicit zero.", "author": "gianm", "createdAt": "2020-08-20T19:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzMjYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMTA5NQ==", "url": "https://github.com/apache/druid/pull/10279#discussion_r474231095", "bodyText": "can limit be less than 0 here because of the preconditions in OffsetLimit?", "author": "clintropolis", "createdAt": "2020-08-20T19:42:51Z", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -897,6 +906,11 @@ public GroupByQuery toGroupByQuery()\n       return null;\n     }\n \n+    if (sorting != null && sorting.getOffsetLimit().hasLimit() && sorting.getOffsetLimit().getLimit() <= 0) {", "originalCommit": "891a38952b40e1af876f0b5e233a3dd6c7f635ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMjc4Mg==", "url": "https://github.com/apache/druid/pull/10279#discussion_r474232782", "bodyText": "It can't, but I guess it doesn't hurt to overcheck.", "author": "gianm", "createdAt": "2020-08-20T19:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMTA5NQ=="}], "type": "inlineReview"}]}