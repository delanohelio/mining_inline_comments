{"pr_number": 9662, "pr_title": "fix issue with group by limit pushdown for extractionFn, expressions, joins, etc", "pr_createdAt": "2020-04-10T03:36:02Z", "pr_url": "https://github.com/apache/druid/pull/9662", "timeline": [{"oid": "ea83d88180b331d3ce471df33c1674db7ee821d3", "url": "https://github.com/apache/druid/commit/ea83d88180b331d3ce471df33c1674db7ee821d3", "message": "fix issue with group by limit pushdown for extractionFn, expressions, joins, etc", "committedDate": "2020-04-10T03:34:26Z", "type": "commit"}, {"oid": "bcb66ecfdbc23188759d7f303beecdfba02f60d0", "url": "https://github.com/apache/druid/commit/bcb66ecfdbc23188759d7f303beecdfba02f60d0", "message": "remove unused", "committedDate": "2020-04-10T04:16:49Z", "type": "commit"}, {"oid": "a1e147b061072fdbeb86f8fc5b49280364409b72", "url": "https://github.com/apache/druid/commit/a1e147b061072fdbeb86f8fc5b49280364409b72", "message": "fix test", "committedDate": "2020-04-10T06:50:45Z", "type": "commit"}, {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0", "url": "https://github.com/apache/druid/commit/aa42465f3b63692ffe2208f89e4fca39df03bbf0", "message": "revert unintended change", "committedDate": "2020-04-10T07:04:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzMwMQ==", "url": "https://github.com/apache/druid/pull/9662#discussion_r406907301", "bodyText": "IMO it's more elegant if this method doesn't exist, and the caller does the allMatch.", "author": "gianm", "createdAt": "2020-04-10T19:27:47Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -707,6 +719,33 @@ protected void putToRow(ByteBuffer key, ResultRow resultRow)\n         );\n       }\n     }\n+\n+    /**\n+     * check if a collection of columns will operate correctly with {@link LimitedBufferHashGrouper} for query limit\n+     * pushdown\n+     */\n+    private boolean canPushdownLimit(Stream<String> columnNames)", "originalCommit": "aa42465f3b63692ffe2208f89e4fca39df03bbf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzkzMw==", "url": "https://github.com/apache/druid/pull/9662#discussion_r406907933", "bodyText": "canDoLimitPushDown would be a better name for two reasons:\n\nThere's other stuff that can be pushed down, in general, other than limits.\nSpelling of PushDown is more consistent with the methods on GroupByQuery itself.", "author": "gianm", "createdAt": "2020-04-10T19:29:16Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -555,7 +557,17 @@ public HashAggregateIterator(\n       final DefaultLimitSpec limitSpec = query.isApplyLimitPushDown() &&\n                                          querySpecificConfig.isApplyLimitPushDownToSegment() ?\n                                          (DefaultLimitSpec) query.getLimitSpec() : null;\n+\n+\n+      boolean canDoPushdown = false;", "originalCommit": "aa42465f3b63692ffe2208f89e4fca39df03bbf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTA2NQ==", "url": "https://github.com/apache/druid/pull/9662#discussion_r406911065", "bodyText": "This doesn't seem right. The only place using DEFAULT_STRING_CAPABILITIES is getEffectiveCapabilities in this same file. And looking at the cases in that method, each one seems like it should behave a bit differently. So consider deleting this constant and having the getEffectiveCapabilities should be generating various capabilities objects.", "author": "gianm", "createdAt": "2020-04-10T19:38:22Z", "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -61,6 +61,8 @@ private DimensionHandlerUtils()\n   public static final ColumnCapabilities DEFAULT_STRING_CAPABILITIES =\n       new ColumnCapabilitiesImpl().setType(ValueType.STRING)\n                                   .setDictionaryEncoded(true)\n+                                  .setDictionaryValuesUnique(true)", "originalCommit": "aa42465f3b63692ffe2208f89e4fca39df03bbf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTMyNw==", "url": "https://github.com/apache/druid/pull/9662#discussion_r406911327", "bodyText": "nit: IMO Capable is a nicer name than IsCapable.", "author": "gianm", "createdAt": "2020-04-10T19:39:04Z", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -26,6 +26,8 @@\n   ValueType getType();\n \n   boolean isDictionaryEncoded();\n+  IsCapable areDictionaryValuesSorted();", "originalCommit": "aa42465f3b63692ffe2208f89e4fca39df03bbf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjQxOQ==", "url": "https://github.com/apache/druid/pull/9662#discussion_r406912419", "bodyText": "The dictionary value is just the row number. They aren't sorted.", "author": "gianm", "createdAt": "2020-04-10T19:42:28Z", "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTableColumnSelectorFactory.java", "diffHunk": "@@ -56,6 +56,9 @@ static ColumnCapabilities columnCapabilities(final IndexedTable table, final Str\n         capabilities.setDictionaryEncoded(true);\n       }\n \n+      capabilities.setDictionaryValuesSorted(true);", "originalCommit": "aa42465f3b63692ffe2208f89e4fca39df03bbf0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "450221dc5ec69947a74e31d0c7a37513e572d709", "url": "https://github.com/apache/druid/commit/450221dc5ec69947a74e31d0c7a37513e572d709", "message": "more tests", "committedDate": "2020-04-10T23:55:54Z", "type": "commit"}, {"oid": "ca9d2eff2d21c9dc1450f58b157bd622e6e77d3f", "url": "https://github.com/apache/druid/commit/ca9d2eff2d21c9dc1450f58b157bd622e6e77d3f", "message": "consider capabilities for StringGroupByColumnSelectorStrategy", "committedDate": "2020-04-11T00:24:03Z", "type": "commit"}, {"oid": "af5eead5dcb562650679f85b06297277075a916e", "url": "https://github.com/apache/druid/commit/af5eead5dcb562650679f85b06297277075a916e", "message": "fix test", "committedDate": "2020-04-11T02:05:55Z", "type": "commit"}, {"oid": "a27bbccc68197083c4f0bba8770268532e1c8825", "url": "https://github.com/apache/druid/commit/a27bbccc68197083c4f0bba8770268532e1c8825", "message": "fix and more test", "committedDate": "2020-04-11T06:16:22Z", "type": "commit"}, {"oid": "85863a27a829c9619a65119ff86129d62559b9e6", "url": "https://github.com/apache/druid/commit/85863a27a829c9619a65119ff86129d62559b9e6", "message": "revert because im scared", "committedDate": "2020-04-11T06:25:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODEwNA==", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028104", "bodyText": "Would be good to have javadocs here.", "author": "gianm", "createdAt": "2020-04-11T07:03:28Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(", "originalCommit": "85863a27a829c9619a65119ff86129d62559b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODE1Mw==", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028153", "bodyText": "Would be good for these comments to be capitalized properly and have sentence-ending punctuation.", "author": "gianm", "createdAt": "2020-04-11T07:03:56Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(\n+      final List<DimensionSpec> dimensionSpecs,\n+      final ResultRow resultRow,\n+      final int resultRowDimensionStart\n+  )\n+  {\n+    for (int i = 0; i < dimensionSpecs.size(); i++) {\n+      DimensionSpec dimSpec = dimensionSpecs.get(i);\n+      final int resultRowIndex = resultRowDimensionStart + i;\n+      final ValueType outputType = dimSpec.getOutputType();\n+\n+      resultRow.set(\n+          resultRowIndex,\n+          DimensionHandlerUtils.convertObjectToType(resultRow.get(resultRowIndex), outputType)\n+      );\n+    }\n+  }\n+\n+  /**\n+   * check if a column will operate correctly with {@link LimitedBufferHashGrouper} for query limit pushdown", "originalCommit": "85863a27a829c9619a65119ff86129d62559b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODMwNQ==", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028305", "bodyText": "This comment isn't adding much, it's just repeating the couple of lines below it in English. I'd either delete it, or replace it with a comment that adds information by explaining why this fact is the case.", "author": "gianm", "createdAt": "2020-04-11T07:05:36Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(\n+      final List<DimensionSpec> dimensionSpecs,\n+      final ResultRow resultRow,\n+      final int resultRowDimensionStart\n+  )\n+  {\n+    for (int i = 0; i < dimensionSpecs.size(); i++) {\n+      DimensionSpec dimSpec = dimensionSpecs.get(i);\n+      final int resultRowIndex = resultRowDimensionStart + i;\n+      final ValueType outputType = dimSpec.getOutputType();\n+\n+      resultRow.set(\n+          resultRowIndex,\n+          DimensionHandlerUtils.convertObjectToType(resultRow.get(resultRowIndex), outputType)\n+      );\n+    }\n+  }\n+\n+  /**\n+   * check if a column will operate correctly with {@link LimitedBufferHashGrouper} for query limit pushdown\n+   */\n+  public static boolean canPushDownLimit(ColumnSelectorFactory columnSelectorFactory, String columnName)\n+  {\n+    ColumnCapabilities capabilities = columnSelectorFactory.getColumnCapabilities(columnName);\n+    if (capabilities != null) {\n+      // strings can be pushed down if dictionaries are sorted and unique per id", "originalCommit": "85863a27a829c9619a65119ff86129d62559b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODUyMQ==", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028521", "bodyText": "Bitmap indexes aren't required here. I don't think it hurts too much to have in practice this check here, since in the primary case where pushdown matters (direct access to a column in a regular segment) bitmap indexes will be there. But it isn't necessary.", "author": "gianm", "createdAt": "2020-04-11T07:08:17Z", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/column/StringGroupByColumnSelectorStrategy.java", "diffHunk": "@@ -148,7 +153,12 @@ private void initializeGroupingKeyV2Dimension(\n   @Override\n   public Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)\n   {\n-    if (stringComparator == null || StringComparators.LEXICOGRAPHIC.equals(stringComparator)) {\n+    final boolean canCompareInts =\n+        capabilities != null &&\n+        capabilities.hasBitmapIndexes() &&", "originalCommit": "85863a27a829c9619a65119ff86129d62559b9e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}