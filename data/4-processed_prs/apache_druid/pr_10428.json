{"pr_number": 10428, "pr_title": "allow server selection to be aware of query", "pr_createdAt": "2020-09-23T21:17:34Z", "pr_url": "https://github.com/apache/druid/pull/10428", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwOTU0OA==", "url": "https://github.com/apache/druid/pull/10428#discussion_r534409548", "bodyText": "Any reason to keep the old interfaces? If this is for backward-compatibility, it maybe make sense. But please annotate them as @Deprecated.", "author": "jihoonson", "createdAt": "2020-12-02T19:00:27Z", "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NjY3OQ==", "url": "https://github.com/apache/druid/pull/10428#discussion_r535246679", "bodyText": "I marked the non-query ones as deprecated throughout", "author": "kroeders", "createdAt": "2020-12-03T13:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwOTU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDQyMA==", "url": "https://github.com/apache/druid/pull/10428#discussion_r534410420", "bodyText": "If you want to keep old interfaces, I think the old ones should have a default implementation that calls this new interface with null query. Then we can remove the implementations of old interfaces in AbstractTierSelectorStrategy.", "author": "jihoonson", "createdAt": "2020-12-02T19:01:54Z", "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(\n       Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n       DataSegment segment,\n-      int numServersToPick\n-  );\n+      int numServersToPick);\n+\n+  @Nullable\n+  default <T> QueryableDruidServer pick(Query<T> query,\n+      Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n+      DataSegment segment)\n+  {\n+    return pick(prioritizedServers, segment);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1MjMxMA==", "url": "https://github.com/apache/druid/pull/10428#discussion_r535252310", "bodyText": "This was done for backward compatibility - I was trying to make this change as minimal as possible on the first cut. We don't have any custom implementations here and I haven't seen any on a cursory look, but I don't want to presume. I think it's cleaner to remove the ones that don't take Query and having an interface of all defaults that call each other makes the abstract methods less obvious. What do you think? I'm happy to defer to your judgement.", "author": "kroeders", "createdAt": "2020-12-03T14:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MDY4NQ==", "url": "https://github.com/apache/druid/pull/10428#discussion_r536490685", "bodyText": "I don't have strong opinion here. The current one looks good to me.", "author": "jihoonson", "createdAt": "2020-12-05T03:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2NDMwMw==", "url": "https://github.com/apache/druid/pull/10428#discussion_r537064303", "bodyText": "works for me, current one it is!", "author": "kroeders", "createdAt": "2020-12-06T15:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDc0OQ==", "url": "https://github.com/apache/druid/pull/10428#discussion_r534410749", "bodyText": "Please annotate query with @Nullable.", "author": "jihoonson", "createdAt": "2020-12-02T19:02:26Z", "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(\n       Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n       DataSegment segment,\n-      int numServersToPick\n-  );\n+      int numServersToPick);\n+\n+  @Nullable\n+  default <T> QueryableDruidServer pick(Query<T> query,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NjI3Ng==", "url": "https://github.com/apache/druid/pull/10428#discussion_r535246276", "bodyText": "done", "author": "kroeders", "createdAt": "2020-12-03T13:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDkzNg==", "url": "https://github.com/apache/druid/pull/10428#discussion_r534410936", "bodyText": "Please add @Nullable.", "author": "jihoonson", "createdAt": "2020-12-02T19:02:48Z", "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(\n       Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n       DataSegment segment,\n-      int numServersToPick\n-  );\n+      int numServersToPick);\n+\n+  @Nullable\n+  default <T> QueryableDruidServer pick(Query<T> query,\n+      Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n+      DataSegment segment)\n+  {\n+    return pick(prioritizedServers, segment);\n+  }\n+\n+  default <T> List<QueryableDruidServer> pick(\n+      Query<T> query,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NDIwMw==", "url": "https://github.com/apache/druid/pull/10428#discussion_r535244203", "bodyText": "done", "author": "kroeders", "createdAt": "2020-12-03T13:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMTYyMg==", "url": "https://github.com/apache/druid/pull/10428#discussion_r534411622", "bodyText": "Similarly, I think it would be better that old interfaces have a default implementation that calls new interfaces with null query. Also please annotate query with @Nullable.", "author": "jihoonson", "createdAt": "2020-12-02T19:03:57Z", "path": "server/src/main/java/org/apache/druid/client/selector/ServerSelectorStrategy.java", "diffHunk": "@@ -33,6 +35,17 @@\n })\n public interface ServerSelectorStrategy\n {\n+  default <T> QueryableDruidServer pick(Query<T> query, Set<QueryableDruidServer> servers, DataSegment segment)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0Mzk2OQ==", "url": "https://github.com/apache/druid/pull/10428#discussion_r535243969", "bodyText": "done", "author": "kroeders", "createdAt": "2020-12-03T13:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMTYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMzA2MA==", "url": "https://github.com/apache/druid/pull/10428#discussion_r534413060", "bodyText": "It seems that pick() is no longer in use. I think we can remove pick() but keep only this new one if ServerSelector doesn't implement DiscoverySelector.", "author": "jihoonson", "createdAt": "2020-12-02T19:06:18Z", "path": "server/src/main/java/org/apache/druid/client/selector/ServerSelector.java", "diffHunk": "@@ -162,12 +163,20 @@ public boolean isEmpty()\n   @Nullable\n   @Override\n   public QueryableDruidServer pick()\n+  {\n+    if (!historicalServers.isEmpty()) {\n+      return strategy.pick(historicalServers, segment.get());\n+    }\n+    return strategy.pick(realtimeServers, segment.get());\n+  }\n+\n+  public <T> QueryableDruidServer pick(Query<T> query)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NjEyMw==", "url": "https://github.com/apache/druid/pull/10428#discussion_r535246123", "bodyText": "I removed it, the method was called a couple of times in tests (which seems OK) and in the etag creation part, which seems OK to me. It looks a little funny to pass in null as a single parameter, but I could argue either way vs having a method that isn't used elsewhere.", "author": "kroeders", "createdAt": "2020-12-03T13:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMzA2MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1Njg5NQ==", "url": "https://github.com/apache/druid/pull/10428#discussion_r535256895", "bodyText": "this was the only functional place that the parameterless pick() was called that I mentioned in the other comment @jihoonson , the Query is available inside of SpecificQueryRunnable where this is called, so I could alternatively pass the query into computeResultLevelCachingEtag and add a null check on this line, what do you think?", "author": "kroeders", "createdAt": "2020-12-03T14:10:23Z", "path": "server/src/main/java/org/apache/druid/client/CachingClusteredClient.java", "diffHunk": "@@ -812,7 +812,7 @@ String computeResultLevelCachingEtag(\n       Hasher hasher = Hashing.sha1().newHasher();\n       boolean hasOnlyHistoricalSegments = true;\n       for (SegmentServerSelector p : segments) {\n-        if (!p.getServer().pick().getServer().isSegmentReplicationTarget()) {\n+        if (!p.getServer().pick(null).getServer().isSegmentReplicationTarget()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ4OTU0Mw==", "url": "https://github.com/apache/druid/pull/10428#discussion_r536489543", "bodyText": "It sounds good to me. For the null check, do you mean a null check on the query? If so, it doesn't seem ncessary because query cannot be null in CachingClusteredClient.", "author": "jihoonson", "createdAt": "2020-12-05T02:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1Njg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3MTU0OA==", "url": "https://github.com/apache/druid/pull/10428#discussion_r537071548", "bodyText": "I made the query change.\nFor the null check I was thinking for this part p.getServer().pick(query) since we just annotated this Nullable below?\nSomething like -\nQueryableServer queryableServer = p.getServer().pick(query);\nif (queryableServer==null || !queryableServer.getServer().isSegmentReplicationTarget()) {", "author": "kroeders", "createdAt": "2020-12-06T16:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1Njg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ1MjIxMA==", "url": "https://github.com/apache/druid/pull/10428#discussion_r545452210", "bodyText": "That's a good catch! I think we should add a null check.", "author": "jihoonson", "createdAt": "2020-12-17T22:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1Njg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ4OTQ3OA==", "url": "https://github.com/apache/druid/pull/10428#discussion_r536489478", "bodyText": "It seems that this can still return null?", "author": "jihoonson", "createdAt": "2020-12-05T02:54:24Z", "path": "server/src/main/java/org/apache/druid/client/selector/ServerSelector.java", "diffHunk": "@@ -159,15 +160,13 @@ public boolean isEmpty()\n     return servers;\n   }\n \n-  @Nullable\n-  @Override\n-  public QueryableDruidServer pick()\n+  public <T> QueryableDruidServer pick(@Nullable Query<T> query)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2NDAwNg==", "url": "https://github.com/apache/druid/pull/10428#discussion_r537064006", "bodyText": "yep, it sure can! thanks", "author": "kroeders", "createdAt": "2020-12-06T15:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ4OTQ3OA=="}], "type": "inlineReview"}, {"oid": "c98cbb232c8cb83c47b72818133bdc7da8a1f455", "url": "https://github.com/apache/druid/commit/c98cbb232c8cb83c47b72818133bdc7da8a1f455", "message": "add query through to server selector", "committedDate": "2020-12-07T20:57:18Z", "type": "commit"}, {"oid": "6d48fdb072b232d3ba852b20c969eda8d64420bf", "url": "https://github.com/apache/druid/commit/6d48fdb072b232d3ba852b20c969eda8d64420bf", "message": "add nullable extensions, deprecate old methods with defaults", "committedDate": "2020-12-07T20:57:18Z", "type": "commit"}, {"oid": "1685caded690252839651353854142344193a63b", "url": "https://github.com/apache/druid/commit/1685caded690252839651353854142344193a63b", "message": "style changes", "committedDate": "2020-12-07T20:57:18Z", "type": "commit"}, {"oid": "682359cf34f744c4debe00ac1a9deb7c6956bb6c", "url": "https://github.com/apache/druid/commit/682359cf34f744c4debe00ac1a9deb7c6956bb6c", "message": "add nullable to ServerSelectorStrategy", "committedDate": "2020-12-07T20:57:18Z", "type": "commit"}, {"oid": "3e1e66066840a93bfdcd104d31944d49855986db", "url": "https://github.com/apache/druid/commit/3e1e66066840a93bfdcd104d31944d49855986db", "message": "fix test coverage", "committedDate": "2020-12-07T20:57:18Z", "type": "commit"}, {"oid": "660aaec66140739c0c4feedc18b7272e760b63a6", "url": "https://github.com/apache/druid/commit/660aaec66140739c0c4feedc18b7272e760b63a6", "message": "missing override in test", "committedDate": "2020-12-07T20:57:18Z", "type": "commit"}, {"oid": "660aaec66140739c0c4feedc18b7272e760b63a6", "url": "https://github.com/apache/druid/commit/660aaec66140739c0c4feedc18b7272e760b63a6", "message": "missing override in test", "committedDate": "2020-12-07T20:57:18Z", "type": "forcePushed"}, {"oid": "6f26ded57e2f1c795f19ed2c6334041d9e48b250", "url": "https://github.com/apache/druid/commit/6f26ded57e2f1c795f19ed2c6334041d9e48b250", "message": "add null check", "committedDate": "2020-12-17T23:16:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5NTcyNw==", "url": "https://github.com/apache/druid/pull/10428#discussion_r545495727", "bodyText": "nit: I think it should ideally fail if queryableServer is null, because it means there is no server to process this segment. However, this seems OK because this method will return immediately when it's null and fail at here.", "author": "jihoonson", "createdAt": "2020-12-18T00:33:09Z", "path": "server/src/main/java/org/apache/druid/client/CachingClusteredClient.java", "diffHunk": "@@ -812,7 +812,8 @@ String computeResultLevelCachingEtag(\n       Hasher hasher = Hashing.sha1().newHasher();\n       boolean hasOnlyHistoricalSegments = true;\n       for (SegmentServerSelector p : segments) {\n-        if (!p.getServer().pick().getServer().isSegmentReplicationTarget()) {\n+        QueryableDruidServer queryableServer = p.getServer().pick(query);\n+        if (queryableServer == null || !queryableServer.getServer().isSegmentReplicationTarget()) {", "originalCommit": "6f26ded57e2f1c795f19ed2c6334041d9e48b250", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}