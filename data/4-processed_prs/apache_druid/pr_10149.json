{"pr_number": 10149, "pr_title": "Add availability and consistency docs.", "pr_createdAt": "2020-07-07T19:07:25Z", "pr_url": "https://github.com/apache/druid/pull/10149", "timeline": [{"oid": "321345a8cb80d9962efd1743734f7485d3bd89d9", "url": "https://github.com/apache/druid/commit/321345a8cb80d9962efd1743734f7485d3bd89d9", "message": "Add availability and consistency docs.\n\nDescribes transactional ingestion and atomic replacement. Also, this patch\ndeletes some bad advice from the javadocs for SegmentTransactionalInsertAction.", "committedDate": "2020-07-07T19:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExODIwMg==", "url": "https://github.com/apache/druid/pull/10149#discussion_r451118202", "bodyText": "partially-ingested data discarded -> partially-ingested data \"is\" discarded", "author": "surekhasaharan", "createdAt": "2020-07-07T20:17:24Z", "path": "docs/design/architecture.md", "diffHunk": "@@ -213,6 +213,75 @@ this will generally start off `true` and then become `false` as the segment is p\n published segments. Generally this is a transient state, and segments in this state will soon have their `used` flag\n automatically set to false.\n \n+### Availability and consistency\n+\n+Druid has an architectural separation between ingestion and querying, as described above in\n+[Indexing and handoff](#indexing-and-handoff). This means that when understanding Druid's availability and\n+consistency properties, we must look at each function separately.\n+\n+On the **ingestion side**, Druid's primary [ingestion methods](../ingestion/index.md#ingestion-methods) are all\n+pull-based and offer transactional guarantees. This means that you are guaranteed that ingestion using these will\n+publish in an all-or-nothing manner:\n+\n+- Supervised \"seekable-stream\" ingestion methods like [Kafka](../development/extensions-core/kafka-ingestion.md) and\n+[Kinesis](../development/extensions-core/kinesis-ingestion.md). With these methods, Druid commits stream offsets to its\n+[metadata store](#metadata-storage) alongside segment metadata, in the same transaction. Note that ingestion of data\n+that has not yet been published can be rolled back if ingestion tasks fail. In this case, partially-ingested data\n+discarded, and Druid will resume ingestion from the last committed set of stream offsets. This ensures exactly-once", "originalCommit": "321345a8cb80d9962efd1743734f7485d3bd89d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NDgxOA==", "url": "https://github.com/apache/druid/pull/10149#discussion_r451154818", "bodyText": "Thanks, fixed.", "author": "gianm", "createdAt": "2020-07-07T21:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExODIwMg=="}], "type": "inlineReview"}, {"oid": "761d4e67e5d2fd99b52fae3244bbd10e146dd135", "url": "https://github.com/apache/druid/commit/761d4e67e5d2fd99b52fae3244bbd10e146dd135", "message": "Fix missing word.", "committedDate": "2020-07-07T21:30:03Z", "type": "commit"}]}