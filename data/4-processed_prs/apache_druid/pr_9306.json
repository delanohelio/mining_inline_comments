{"pr_number": 9306, "pr_title": "implement Azure InputSource reader and deprecate Azure FireHose", "pr_createdAt": "2020-02-03T21:35:35Z", "pr_url": "https://github.com/apache/druid/pull/9306", "timeline": [{"oid": "091376885687f874f60676728979be70c0e524df", "url": "https://github.com/apache/druid/commit/091376885687f874f60676728979be70c0e524df", "message": "IMPLY-1946: Improve code quality and unit test coverage of the Azure extension\n\n* Update unit tests to increase test coverage for the extension\n* Clean up any messy code\n* Enfore code coverage as part of tests.", "committedDate": "2020-01-27T02:56:05Z", "type": "commit"}, {"oid": "5b9e4c3b216e37a0292a278072283abdb425030f", "url": "https://github.com/apache/druid/commit/5b9e4c3b216e37a0292a278072283abdb425030f", "message": "Merge remote-tracking branch 'origin/master' into IMPLY-1946", "committedDate": "2020-01-27T19:50:09Z", "type": "commit"}, {"oid": "c845f68a0b4fa5b0e90f527b13bf6525660ed353", "url": "https://github.com/apache/druid/commit/c845f68a0b4fa5b0e90f527b13bf6525660ed353", "message": "* Update azure extension pom to remove unnecessary things\n* update jacoco thresholds", "committedDate": "2020-01-27T21:10:56Z", "type": "commit"}, {"oid": "85aa0a004dd6d544de111c980f1f3507cd7ac429", "url": "https://github.com/apache/druid/commit/85aa0a004dd6d544de111c980f1f3507cd7ac429", "message": "* updgrade version of azure-storage library version uses to\n  most upto-date version", "committedDate": "2020-01-27T22:33:24Z", "type": "commit"}, {"oid": "85293294d93e4bd7f08efa207e873c49de97d135", "url": "https://github.com/apache/druid/commit/85293294d93e4bd7f08efa207e873c49de97d135", "message": "Merge remote-tracking branch 'origin/master' into IMPLY-1946", "committedDate": "2020-01-28T00:08:57Z", "type": "commit"}, {"oid": "9e7ab6f7bb1e027066e9db39751efc765efb9987", "url": "https://github.com/apache/druid/commit/9e7ab6f7bb1e027066e9db39751efc765efb9987", "message": "Merge pull request #1 from zachjsh/IMPLY-1946-2\n\nImply 1946 2", "committedDate": "2020-01-28T00:42:19Z", "type": "commit"}, {"oid": "a97ad656925ced089972e5b9fd13343e6b7b7d84", "url": "https://github.com/apache/druid/commit/a97ad656925ced089972e5b9fd13343e6b7b7d84", "message": "implement Azure InputSource reader and deprecate Azure FireHose\n\n* implement azure InputSource reader\n* deprecate Azure FireHose implementation", "committedDate": "2020-01-28T19:18:09Z", "type": "commit"}, {"oid": "c5103fb69db63e058b68edfc52dddc33509101d4", "url": "https://github.com/apache/druid/commit/c5103fb69db63e058b68edfc52dddc33509101d4", "message": "* exclude common libraries that are included from druid core", "committedDate": "2020-01-28T23:36:02Z", "type": "commit"}, {"oid": "76c76b33b914658f0edead0deb2f8feb77e19aa6", "url": "https://github.com/apache/druid/commit/76c76b33b914658f0edead0deb2f8feb77e19aa6", "message": "Merge remote-tracking branch 'zach-druid/IMPLY-1946' into IMPLY-1955", "committedDate": "2020-01-28T23:39:53Z", "type": "commit"}, {"oid": "b57e1733681b99417d5b430fe95400f1461b1e8a", "url": "https://github.com/apache/druid/commit/b57e1733681b99417d5b430fe95400f1461b1e8a", "message": "Implement more of Azure input source.", "committedDate": "2020-01-31T00:53:41Z", "type": "commit"}, {"oid": "3639d056d6159fe2b17c49cc805ba4415ba476a8", "url": "https://github.com/apache/druid/commit/3639d056d6159fe2b17c49cc805ba4415ba476a8", "message": "* Add tests", "committedDate": "2020-01-31T19:33:41Z", "type": "commit"}, {"oid": "8f71ac208dae835ca1be927f2031c705f0eb2fc2", "url": "https://github.com/apache/druid/commit/8f71ac208dae835ca1be927f2031c705f0eb2fc2", "message": "* Add more tests", "committedDate": "2020-02-03T18:05:06Z", "type": "commit"}, {"oid": "ae2e75008144a2b7189a002fbb534ebad1f90e94", "url": "https://github.com/apache/druid/commit/ae2e75008144a2b7189a002fbb534ebad1f90e94", "message": "Merge remote-tracking branch 'apache/master' into IMPLY-1955", "committedDate": "2020-02-03T18:31:08Z", "type": "commit"}, {"oid": "03f53aff53f9a2f1c82e72c28eb1e5df34a0da96", "url": "https://github.com/apache/druid/commit/03f53aff53f9a2f1c82e72c28eb1e5df34a0da96", "message": "* deprecate azure firehose", "committedDate": "2020-02-03T18:34:07Z", "type": "commit"}, {"oid": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "url": "https://github.com/apache/druid/commit/6dd498ea5575fb96813ae1814f2d5de2ff00affa", "message": "* added more tests", "committedDate": "2020-02-03T21:31:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4MjM3Mw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374382373", "bodyText": "I don't think it's good to have the base class decide the max length for all the implementations. It would be better to expose this through a function. Should this be made configurable?\nI see the GoogleCloudStorageInputSource used to have a max of 10. This makes it 1024. Also the AzureInputSource uses it's own definition for MAX_LISTING_LENGTH", "author": "suneet-s", "createdAt": "2020-02-03T22:39:29Z", "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudObjectInputSource.java", "diffHunk": "@@ -40,6 +40,7 @@\n public abstract class CloudObjectInputSource<T extends InputEntity> extends AbstractInputSource\n     implements SplittableInputSource<CloudObjectLocation>\n {\n+  protected static final int MAX_LISTING_LENGTH = 1024;", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NDc5NA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374384794", "bodyText": "I talked to @clintropolis  about the Google limit and that was a mistake, was meant to be 1024 as well. I figured since they are all 1024 now, we could abstract that to base class, and then override in the specific implementation if necessary, which right now it doesn't seem to be so. I agree that this should be configurable.", "author": "zachjsh", "createdAt": "2020-02-03T22:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4MjM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4MzQxMQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374383411", "bodyText": "\ud83e\udd18", "author": "suneet-s", "createdAt": "2020-02-03T22:42:02Z", "path": "extensions-contrib/azure-extensions/pom.xml", "diffHunk": "@@ -91,6 +91,11 @@\n             <artifactId>guice</artifactId>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.google.inject.extensions</groupId>\n+            <artifactId>guice-assistedinject</artifactId>", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NDA0MQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374384041", "bodyText": "javadocs please", "author": "suneet-s", "createdAt": "2020-02-03T22:43:35Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureEntity.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.assistedinject.AssistedInject;\n+import org.apache.druid.data.input.RetryingInputEntity;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureByteSource;\n+import org.apache.druid.storage.azure.AzureByteSourceFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.AzureUtils;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+public class AzureEntity extends RetryingInputEntity", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NTI4OQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374385289", "bodyText": "private static final Logger LOG = new Logger(AzureEntity.class);", "author": "suneet-s", "createdAt": "2020-02-03T22:46:53Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureEntity.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.assistedinject.AssistedInject;\n+import org.apache.druid.data.input.RetryingInputEntity;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureByteSource;\n+import org.apache.druid.storage.azure.AzureByteSourceFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.AzureUtils;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+public class AzureEntity extends RetryingInputEntity\n+{\n+  private final Logger log = new Logger(AzureEntity.class);", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NjI4Mw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374386283", "bodyText": "Add @NotNull or is EverythingNotNullByDefault in this package? I didn't see that annotation used in this package", "author": "suneet-s", "createdAt": "2020-02-03T22:49:33Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureEntity.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.assistedinject.AssistedInject;\n+import org.apache.druid.data.input.RetryingInputEntity;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureByteSource;\n+import org.apache.druid.storage.azure.AzureByteSourceFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.AzureUtils;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+public class AzureEntity extends RetryingInputEntity\n+{\n+  private final Logger log = new Logger(AzureEntity.class);\n+  private final CloudObjectLocation location;\n+  private final AzureByteSource byteSource;\n+\n+  @AssistedInject\n+  AzureEntity(\n+      AzureStorage storage,\n+      @Assisted CloudObjectLocation location,", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTE0Mg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r375995142", "bodyText": "done", "author": "zachjsh", "createdAt": "2020-02-06T18:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NjI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NjMzMg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374386332", "bodyText": "storage isn't used", "author": "suneet-s", "createdAt": "2020-02-03T22:49:42Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureEntity.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.assistedinject.AssistedInject;\n+import org.apache.druid.data.input.RetryingInputEntity;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureByteSource;\n+import org.apache.druid.storage.azure.AzureByteSourceFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.AzureUtils;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+public class AzureEntity extends RetryingInputEntity\n+{\n+  private final Logger log = new Logger(AzureEntity.class);\n+  private final CloudObjectLocation location;\n+  private final AzureByteSource byteSource;\n+\n+  @AssistedInject\n+  AzureEntity(\n+      AzureStorage storage,", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzIwNg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374387206", "bodyText": "How can this ever return null? If location is null, this will throw an NPE, and it doesn't look like toUri ever returns a null", "author": "suneet-s", "createdAt": "2020-02-03T22:51:57Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureEntity.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.assistedinject.AssistedInject;\n+import org.apache.druid.data.input.RetryingInputEntity;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureByteSource;\n+import org.apache.druid.storage.azure.AzureByteSourceFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.AzureUtils;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+public class AzureEntity extends RetryingInputEntity\n+{\n+  private final Logger log = new Logger(AzureEntity.class);\n+  private final CloudObjectLocation location;\n+  private final AzureByteSource byteSource;\n+\n+  @AssistedInject\n+  AzureEntity(\n+      AzureStorage storage,\n+      @Assisted CloudObjectLocation location,\n+      AzureByteSourceFactory byteSourceFactory\n+  )\n+  {\n+    this.location = location;\n+    this.byteSource = byteSourceFactory.create(location.getBucket(), location.getPath());\n+  }\n+\n+  @Nullable\n+  @Override\n+  public URI getUri()\n+  {\n+    return location.toUri(AzureInputSource.SCHEME);", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4NzYzMQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374387631", "bodyText": "javadocs please", "author": "suneet-s", "createdAt": "2020-02-03T22:53:04Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureEntityFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+\n+public interface AzureEntityFactory", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4Nzk0Nw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374387947", "bodyText": "@VisibleForTesting", "author": "suneet-s", "createdAt": "2020-02-03T22:53:54Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureCloudBlobDruidToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobDruid;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4ODU0NA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374388544", "bodyText": "javadocs please - I'll stop asking for the rest of this review", "author": "suneet-s", "createdAt": "2020-02-03T22:55:30Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureCloudBlobDruidToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobDruid;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4ODcxOA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374388718", "bodyText": "private static final - I'll stop making this comment for the rest of this review", "author": "suneet-s", "createdAt": "2020-02-03T22:56:01Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureCloudBlobDruidToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobDruid;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;\n+  static final String SCHEME = \"azure\";\n+\n+  private final Logger log = new Logger(AzureInputSource.class);", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTQyNw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675427", "bodyText": "fixed", "author": "zachjsh", "createdAt": "2020-02-08T01:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM4ODcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MDYzMw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374390633", "bodyText": "The javadocs for InputSplit say this is used for FiniteFirehoseFactory maybe we should update those docs?", "author": "suneet-s", "createdAt": "2020-02-03T23:00:55Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureCloudBlobDruidToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobDruid;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;\n+  static final String SCHEME = \"azure\";\n+\n+  private final Logger log = new Logger(AzureInputSource.class);\n+  private final AzureStorage storage;\n+  private final AzureEntityFactory entityFactory;\n+  private final AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private final AzureCloudBlobDruidToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  @JsonCreator\n+  public AzureInputSource(\n+      @JacksonInject AzureStorage storage,\n+      @JacksonInject AzureEntityFactory entityFactory,\n+      @JacksonInject AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n+      @JacksonInject AzureCloudBlobDruidToCloudObjectLocationConverter azureCloudBlobToLocationConverter,\n+      @JsonProperty(\"uris\") @Nullable List<URI> uris,\n+      @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+  )\n+  {\n+    super(SCHEME, uris, prefixes, objects);\n+    this.storage = Preconditions.checkNotNull(storage, \"AzureStorage\");\n+    this.entityFactory = Preconditions.checkNotNull(entityFactory, \"AzureEntityFactory\");\n+    this.azureCloudBlobIterableFactory = Preconditions.checkNotNull(\n+        azureCloudBlobIterableFactory,\n+        \"AzureCloudBlobIterableFactory\"\n+    );\n+    this.azureCloudBlobToLocationConverter = Preconditions.checkNotNull(azureCloudBlobToLocationConverter, \"AzureCloudBlobToLocationConverter\");\n+  }\n+\n+  @Override\n+  protected AzureEntity createEntity(InputSplit<CloudObjectLocation> split)", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjE0Ng==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374442146", "bodyText": "Good point. We should fix the javaodc.", "author": "jihoonson", "createdAt": "2020-02-04T02:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MDYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MTk2MQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374391961", "bodyText": "Add instructions about how to move away from this deprecated class and if there are any benefits, why the new way is preferred.\nSimilar comments for other deprecated annotations", "author": "suneet-s", "createdAt": "2020-02-03T23:04:36Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/firehose/azure/AzureBlob.java", "diffHunk": "@@ -26,6 +26,7 @@\n import java.util.Objects;\n \n \n+@Deprecated", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTAzNw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675037", "bodyText": "done", "author": "zachjsh", "createdAt": "2020-02-08T01:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MTk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTI1Ng==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374401256", "bodyText": "You don't need the assisted annotations here", "author": "suneet-s", "createdAt": "2020-02-03T23:32:13Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureByteSourceFactory.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.google.inject.assistedinject.Assisted;\n+\n+public interface AzureByteSourceFactory\n+{\n+  AzureByteSource create(@Assisted(\"containerName\") String containerName, @Assisted(\"blobPath\") String blobPath);", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTIxMg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675212", "bodyText": "Does it hurt? Also I think you do need since both parameters are the same type.", "author": "zachjsh", "createdAt": "2020-02-08T01:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTYwOA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374401608", "bodyText": "Should this handle retryable exceptions?\nAzureUtils.AZURE_RETRY.apply(e)", "author": "suneet-s", "createdAt": "2020-02-03T23:33:27Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureCloudBlobDruidToCloudObjectLocationConverter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+\n+public class AzureCloudBlobDruidToCloudObjectLocationConverter\n+    implements ICloudSpecificObjectToCloudObjectLocationConverter<CloudBlobDruid>\n+{\n+  @Override\n+  public CloudObjectLocation createCloudObjectLocation(CloudBlobDruid cloudBlob)\n+  {\n+    try {\n+      return new CloudObjectLocation(cloudBlob.getContainerName(), cloudBlob.getName());\n+    }\n+    catch (Exception e) {\n+      throw new RuntimeException(e);", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzOTUzOA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376039538", "bodyText": "hmm, I think those are handled at higher level.", "author": "zachjsh", "createdAt": "2020-02-06T19:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMzY4Nw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374403687", "bodyText": "Do we want a unit test to make sure we're using flat blob listing?", "author": "suneet-s", "createdAt": "2020-02-03T23:40:11Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "diffHunk": "@@ -117,4 +123,26 @@ private CloudBlobContainer getOrCreateCloudBlobContainer(final String containerN\n \n     return cloudBlobContainer;\n   }\n+\n+  public ResultSegmentDruid<ListBlobItem> listBlobsWithPrefixInContainerSegmented(", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUyNzE5Nw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r375527197", "bodyText": "Very difficult to do this since the CloudBlobContainer class is final. How do I mock in this case?", "author": "zachjsh", "createdAt": "2020-02-05T21:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMzY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNDQyMA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r375534420", "bodyText": ":( so many final classes in azure - maybe one day we can test with PowerMock \ud83d\udcaa", "author": "suneet-s", "createdAt": "2020-02-05T22:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMzY4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMzk5Mg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374403992", "bodyText": "I don't think you need to cast nulls", "author": "suneet-s", "createdAt": "2020-02-03T23:41:05Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "diffHunk": "@@ -117,4 +123,26 @@ private CloudBlobContainer getOrCreateCloudBlobContainer(final String containerN\n \n     return cloudBlobContainer;\n   }\n+\n+  public ResultSegmentDruid<ListBlobItem> listBlobsWithPrefixInContainerSegmented(\n+      final String containerName,\n+      final String prefix,\n+      ResultContinuation continuationToken,\n+      int maxResults\n+  ) throws StorageException, URISyntaxException\n+  {\n+    CloudBlobContainer cloudBlobContainer = cloudBlobClient.getContainerReference(containerName);\n+    return new ResultSegmentDruid<ListBlobItem>(cloudBlobContainer\n+                                                    .listBlobsSegmented(\n+                                                        prefix,\n+                                                        /* Use flat blob listing here so that we get only blob types and not directories.*/\n+                                                        USE_FLAT_BLOB_LISTING,\n+                                                        EnumSet\n+                                                            .noneOf(BlobListingDetails.class),\n+                                                        maxResults,\n+                                                        (ResultContinuation) null,\n+                                                        (BlobRequestOptions) null,\n+                                                        (OperationContext) null", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNDYyNA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374404624", "bodyText": "why not bind(AzureCloudBlobDruidToCloudObjectLocationConverter.class).in(Scopes.LazySingleton)", "author": "suneet-s", "createdAt": "2020-02-03T23:43:16Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorageDruidModule.java", "diffHunk": "@@ -118,4 +133,11 @@ public AzureStorage getAzureStorageContainer(\n   {\n     return new AzureStorage(cloudBlobClient);\n   }\n+\n+  @Provides\n+  @LazySingleton\n+  public AzureCloudBlobDruidToCloudObjectLocationConverter getAzureCloudBlobToLocationConverter()\n+  {\n+    return new AzureCloudBlobDruidToCloudObjectLocationConverter();\n+  }", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNTIwOQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374405209", "bodyText": "ModuleTests to ensure the factories are injected and can create their objects?\nLook at this PR - #9279 I've added a bunch of module tests with mocks", "author": "suneet-s", "createdAt": "2020-02-03T23:45:24Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorageDruidModule.java", "diffHunk": "@@ -91,6 +96,16 @@ public void configure(Binder binder)\n     Binders.taskLogsBinder(binder).addBinding(SCHEME).to(AzureTaskLogs.class);\n     JsonConfigProvider.bind(binder, \"druid.indexer.logs\", AzureTaskLogsConfig.class);\n     binder.bind(AzureTaskLogs.class).in(LazySingleton.class);\n+    binder.install(new FactoryModuleBuilder()\n+                       .build(AzureByteSourceFactory.class));\n+    binder.install(new FactoryModuleBuilder()\n+                       .build(AzureEntityFactory.class));\n+    binder.install(new FactoryModuleBuilder()\n+                       .build(AzureCloudBlobIteratorFactory.class));\n+    binder.install(new FactoryModuleBuilder()\n+                       .build(AzureCloudBlobIterableFactory.class));\n+    binder.install(new FactoryModuleBuilder()\n+                       .build(ListBlobItemDruidFactory.class));", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNTQ3NA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374405474", "bodyText": "javadoc for utility function", "author": "suneet-s", "createdAt": "2020-02-03T23:46:20Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureUtils.java", "diffHunk": "@@ -46,6 +48,11 @@\n     return false;\n   };\n \n+  public static String extractAzureKey(URI uri)", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNjY5Mw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374406693", "bodyText": "What is the purpose of all these Druid classes that delegate to another class? Why not justuse the delegate class directly?", "author": "suneet-s", "createdAt": "2020-02-03T23:50:31Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/ResultSegmentDruid.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.microsoft.azure.storage.ResultContinuation;\n+import com.microsoft.azure.storage.ResultSegment;\n+\n+import java.util.ArrayList;\n+\n+public class ResultSegmentDruid<T>", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyODk5MQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374428991", "bodyText": "All the delegate classes are finals, so I cant mock them", "author": "zachjsh", "createdAt": "2020-02-04T01:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNjY5Mw=="}], "type": "inlineReview"}, {"oid": "ce4a2d6742fbe7ed4ad61a17afd571f615744354", "url": "https://github.com/apache/druid/commit/ce4a2d6742fbe7ed4ad61a17afd571f615744354", "message": "* rollback fix for google cloud batch ingestion bug. Will be\n  fixed in another PR.", "committedDate": "2020-02-04T00:43:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjMyNw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r374442327", "bodyText": "Out of curiosity, what's the benefit of using the factory pattern here?", "author": "jihoonson", "createdAt": "2020-02-04T02:12:16Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.storage.azure.AzureCloudBlobDruidToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobDruid;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;\n+  static final String SCHEME = \"azure\";\n+\n+  private final Logger log = new Logger(AzureInputSource.class);\n+  private final AzureStorage storage;\n+  private final AzureEntityFactory entityFactory;\n+  private final AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private final AzureCloudBlobDruidToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  @JsonCreator\n+  public AzureInputSource(\n+      @JacksonInject AzureStorage storage,\n+      @JacksonInject AzureEntityFactory entityFactory,\n+      @JacksonInject AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n+      @JacksonInject AzureCloudBlobDruidToCloudObjectLocationConverter azureCloudBlobToLocationConverter,\n+      @JsonProperty(\"uris\") @Nullable List<URI> uris,\n+      @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+  )\n+  {\n+    super(SCHEME, uris, prefixes, objects);\n+    this.storage = Preconditions.checkNotNull(storage, \"AzureStorage\");\n+    this.entityFactory = Preconditions.checkNotNull(entityFactory, \"AzureEntityFactory\");\n+    this.azureCloudBlobIterableFactory = Preconditions.checkNotNull(\n+        azureCloudBlobIterableFactory,\n+        \"AzureCloudBlobIterableFactory\"\n+    );\n+    this.azureCloudBlobToLocationConverter = Preconditions.checkNotNull(azureCloudBlobToLocationConverter, \"AzureCloudBlobToLocationConverter\");\n+  }\n+\n+  @Override\n+  protected AzureEntity createEntity(InputSplit<CloudObjectLocation> split)\n+  {\n+    return entityFactory.create(split.get());", "originalCommit": "6dd498ea5575fb96813ae1814f2d5de2ff00affa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NjEyMg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r375996122", "bodyText": "It makes it a lot easier to test", "author": "zachjsh", "createdAt": "2020-02-06T18:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjMyNw=="}], "type": "inlineReview"}, {"oid": "7536255bbbf144e44955d111dd2985e2d65f25b3", "url": "https://github.com/apache/druid/commit/7536255bbbf144e44955d111dd2985e2d65f25b3", "message": "* Added javadocs for all azure related classes\n* Addressed review comments", "committedDate": "2020-02-06T01:00:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxODI3NA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376018274", "bodyText": "nit: the suffix of Druid seems weird to me. Maybe because.. everything in Druid repo are druid? I suggest CloudBlobHolder.", "author": "jihoonson", "createdAt": "2020-02-06T18:52:07Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/CloudBlobDruid.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.microsoft.azure.storage.StorageException;\n+import com.microsoft.azure.storage.blob.CloudBlob;\n+\n+import java.net.URISyntaxException;\n+\n+/**\n+ * Wrapper for {@link CloudBlob}. Used to make testing easier, since {@link CloudBlob}\n+ * is a final class and so is difficult to mock in unit tests.\n+ */\n+public class CloudBlobDruid", "originalCommit": "7536255bbbf144e44955d111dd2985e2d65f25b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxODcyNQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376018725", "bodyText": "Same for other classes ending with Druid.", "author": "jihoonson", "createdAt": "2020-02-06T18:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxODI3NA=="}], "type": "inlineReview"}, {"oid": "a67e00c9429cb83239b7284296ade5da3c48353d", "url": "https://github.com/apache/druid/commit/a67e00c9429cb83239b7284296ade5da3c48353d", "message": "* Remove dependency on org.apache.commons:commons-collections4\n* Fix LGTM warnings\n* Add com.google.inject.extensions:guice-assistedinject to licenses", "committedDate": "2020-02-06T19:31:54Z", "type": "commit"}, {"oid": "92f33066e763ae2ee3bd303f69535cac2adb1a54", "url": "https://github.com/apache/druid/commit/92f33066e763ae2ee3bd303f69535cac2adb1a54", "message": "* rename classes as suggested in review comments", "committedDate": "2020-02-06T20:44:18Z", "type": "commit"}, {"oid": "9226f9bb86234c7e1ccf156318e0bccea253999a", "url": "https://github.com/apache/druid/commit/9226f9bb86234c7e1ccf156318e0bccea253999a", "message": "Merge remote-tracking branch 'apache/master' into IMPLY-1955", "committedDate": "2020-02-06T20:47:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMjg5Mg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376532892", "bodyText": "missing serdeTest?", "author": "suneet-s", "createdAt": "2020-02-07T18:14:18Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.azure.AzureCloudBlobHolderToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobHolder;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Abstracts the Azure storage system where input data is stored. Allows users to retrieve entities in\n+ * the storage system that match either a particular uri, prefix, or object.\n+ */\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;\n+  public static final String SCHEME = \"azure\";\n+\n+  private final AzureStorage storage;\n+  private final AzureEntityFactory entityFactory;\n+  private final AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private final AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  @JsonCreator\n+  public AzureInputSource(\n+      @JacksonInject AzureStorage storage,\n+      @JacksonInject AzureEntityFactory entityFactory,\n+      @JacksonInject AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n+      @JacksonInject AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter,\n+      @JsonProperty(\"uris\") @Nullable List<URI> uris,\n+      @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+  )\n+  {\n+    super(SCHEME, uris, prefixes, objects);\n+    this.storage = Preconditions.checkNotNull(storage, \"AzureStorage\");\n+    this.entityFactory = Preconditions.checkNotNull(entityFactory, \"AzureEntityFactory\");\n+    this.azureCloudBlobIterableFactory = Preconditions.checkNotNull(\n+        azureCloudBlobIterableFactory,\n+        \"AzureCloudBlobIterableFactory\"\n+    );\n+    this.azureCloudBlobToLocationConverter = Preconditions.checkNotNull(azureCloudBlobToLocationConverter, \"AzureCloudBlobToLocationConverter\");\n+  }\n+\n+  @Override\n+  public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n+  {\n+    return new AzureInputSource(\n+        storage,\n+        entityFactory,\n+        azureCloudBlobIterableFactory,\n+        azureCloudBlobToLocationConverter,\n+        null,\n+        null,\n+        ImmutableList.of(split.get())\n+    );\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"AzureInputSource{\" +\n+           \"uris=\" + getUris() +\n+           \", prefixes=\" + getPrefixes() +\n+           \", objects=\" + getObjects() +\n+           '}';\n+  }\n+\n+  @Override\n+  protected AzureEntity createEntity(InputSplit<CloudObjectLocation> split)\n+  {\n+    return entityFactory.create(split.get());\n+  }\n+\n+  @Override\n+  protected Stream<InputSplit<CloudObjectLocation>> getPrefixesSplitStream()\n+  {\n+    return StreamSupport.stream(getIterableObjectsFromPrefixes().spliterator(), false)\n+                        .map(o -> azureCloudBlobToLocationConverter.createCloudObjectLocation(o))\n+                        .map(InputSplit::new);\n+  }\n+\n+  private Iterable<CloudBlobHolder> getIterableObjectsFromPrefixes()\n+  {\n+    return azureCloudBlobIterableFactory.create(getPrefixes(), MAX_LISTING_LENGTH);\n+  }\n+}", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTAxMw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675013", "bodyText": "done", "author": "zachjsh", "createdAt": "2020-02-08T01:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMjg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMzk2Nw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376533967", "bodyText": "Can we move the toString() definition in to the base class? Looks like all the InputSources are using the same format.", "author": "suneet-s", "createdAt": "2020-02-07T18:16:46Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.azure.AzureCloudBlobHolderToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobHolder;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Abstracts the Azure storage system where input data is stored. Allows users to retrieve entities in\n+ * the storage system that match either a particular uri, prefix, or object.\n+ */\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;\n+  public static final String SCHEME = \"azure\";\n+\n+  private final AzureStorage storage;\n+  private final AzureEntityFactory entityFactory;\n+  private final AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private final AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  @JsonCreator\n+  public AzureInputSource(\n+      @JacksonInject AzureStorage storage,\n+      @JacksonInject AzureEntityFactory entityFactory,\n+      @JacksonInject AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n+      @JacksonInject AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter,\n+      @JsonProperty(\"uris\") @Nullable List<URI> uris,\n+      @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+  )\n+  {\n+    super(SCHEME, uris, prefixes, objects);\n+    this.storage = Preconditions.checkNotNull(storage, \"AzureStorage\");\n+    this.entityFactory = Preconditions.checkNotNull(entityFactory, \"AzureEntityFactory\");\n+    this.azureCloudBlobIterableFactory = Preconditions.checkNotNull(\n+        azureCloudBlobIterableFactory,\n+        \"AzureCloudBlobIterableFactory\"\n+    );\n+    this.azureCloudBlobToLocationConverter = Preconditions.checkNotNull(azureCloudBlobToLocationConverter, \"AzureCloudBlobToLocationConverter\");\n+  }\n+\n+  @Override\n+  public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n+  {\n+    return new AzureInputSource(\n+        storage,\n+        entityFactory,\n+        azureCloudBlobIterableFactory,\n+        azureCloudBlobToLocationConverter,\n+        null,\n+        null,\n+        ImmutableList.of(split.get())\n+    );\n+  }\n+\n+  @Override\n+  public String toString()", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NDk0Ng==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376674946", "bodyText": "I dont think this can be done.", "author": "zachjsh", "createdAt": "2020-02-08T01:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMzk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNTI0Mw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376535243", "bodyText": "I can't tell if equals/ hashCode is broken for this class. It looks like all the implementations just care about the class being the same an the uris/ prefixes/ objects to match.\nBut can we ever have a situation where AzureStorage is different but the uris are the same? My guess is no, but if that ever changes in the future it would be really tough to debug this. Unclear to me what the correct behavior is here. What do you think?", "author": "suneet-s", "createdAt": "2020-02-07T18:19:31Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.azure.AzureCloudBlobHolderToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobHolder;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Abstracts the Azure storage system where input data is stored. Allows users to retrieve entities in\n+ * the storage system that match either a particular uri, prefix, or object.\n+ */\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;\n+  public static final String SCHEME = \"azure\";\n+\n+  private final AzureStorage storage;\n+  private final AzureEntityFactory entityFactory;\n+  private final AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private final AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  @JsonCreator\n+  public AzureInputSource(\n+      @JacksonInject AzureStorage storage,\n+      @JacksonInject AzureEntityFactory entityFactory,\n+      @JacksonInject AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n+      @JacksonInject AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter,\n+      @JsonProperty(\"uris\") @Nullable List<URI> uris,\n+      @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+  )\n+  {\n+    super(SCHEME, uris, prefixes, objects);\n+    this.storage = Preconditions.checkNotNull(storage, \"AzureStorage\");\n+    this.entityFactory = Preconditions.checkNotNull(entityFactory, \"AzureEntityFactory\");\n+    this.azureCloudBlobIterableFactory = Preconditions.checkNotNull(\n+        azureCloudBlobIterableFactory,\n+        \"AzureCloudBlobIterableFactory\"\n+    );\n+    this.azureCloudBlobToLocationConverter = Preconditions.checkNotNull(azureCloudBlobToLocationConverter, \"AzureCloudBlobToLocationConverter\");\n+  }\n+\n+  @Override\n+  public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n+  {\n+    return new AzureInputSource(\n+        storage,\n+        entityFactory,\n+        azureCloudBlobIterableFactory,\n+        azureCloudBlobToLocationConverter,\n+        null,\n+        null,\n+        ImmutableList.of(split.get())\n+    );\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"AzureInputSource{\" +\n+           \"uris=\" + getUris() +\n+           \", prefixes=\" + getPrefixes() +\n+           \", objects=\" + getObjects() +\n+           '}';\n+  }\n+", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NDk2Mg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376674962", "bodyText": "fixed", "author": "zachjsh", "createdAt": "2020-02-08T01:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNTI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NzUwMg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376557502", "bodyText": "nit: intelliJ recommends using a method reference azureCloudBlobToLocationConverter::createCloudObjectLocation", "author": "suneet-s", "createdAt": "2020-02-07T19:07:53Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.azure.AzureCloudBlobHolderToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobHolder;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Abstracts the Azure storage system where input data is stored. Allows users to retrieve entities in\n+ * the storage system that match either a particular uri, prefix, or object.\n+ */\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  static final int MAX_LISTING_LENGTH = 1024;\n+  public static final String SCHEME = \"azure\";\n+\n+  private final AzureStorage storage;\n+  private final AzureEntityFactory entityFactory;\n+  private final AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private final AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  @JsonCreator\n+  public AzureInputSource(\n+      @JacksonInject AzureStorage storage,\n+      @JacksonInject AzureEntityFactory entityFactory,\n+      @JacksonInject AzureCloudBlobIterableFactory azureCloudBlobIterableFactory,\n+      @JacksonInject AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter,\n+      @JsonProperty(\"uris\") @Nullable List<URI> uris,\n+      @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+  )\n+  {\n+    super(SCHEME, uris, prefixes, objects);\n+    this.storage = Preconditions.checkNotNull(storage, \"AzureStorage\");\n+    this.entityFactory = Preconditions.checkNotNull(entityFactory, \"AzureEntityFactory\");\n+    this.azureCloudBlobIterableFactory = Preconditions.checkNotNull(\n+        azureCloudBlobIterableFactory,\n+        \"AzureCloudBlobIterableFactory\"\n+    );\n+    this.azureCloudBlobToLocationConverter = Preconditions.checkNotNull(azureCloudBlobToLocationConverter, \"AzureCloudBlobToLocationConverter\");\n+  }\n+\n+  @Override\n+  public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n+  {\n+    return new AzureInputSource(\n+        storage,\n+        entityFactory,\n+        azureCloudBlobIterableFactory,\n+        azureCloudBlobToLocationConverter,\n+        null,\n+        null,\n+        ImmutableList.of(split.get())\n+    );\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"AzureInputSource{\" +\n+           \"uris=\" + getUris() +\n+           \", prefixes=\" + getPrefixes() +\n+           \", objects=\" + getObjects() +\n+           '}';\n+  }\n+\n+  @Override\n+  protected AzureEntity createEntity(InputSplit<CloudObjectLocation> split)\n+  {\n+    return entityFactory.create(split.get());\n+  }\n+\n+  @Override\n+  protected Stream<InputSplit<CloudObjectLocation>> getPrefixesSplitStream()\n+  {\n+    return StreamSupport.stream(getIterableObjectsFromPrefixes().spliterator(), false)\n+                        .map(o -> azureCloudBlobToLocationConverter.createCloudObjectLocation(o))", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NDk5NA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376674994", "bodyText": "This didnt work with Easymock", "author": "zachjsh", "createdAt": "2020-02-08T01:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU1NzUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MDM0OQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376560349", "bodyText": "As an operator - what should I do if I see this warning?", "author": "suneet-s", "createdAt": "2020-02-07T19:14:31Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureByteSource.java", "diffHunk": "@@ -46,11 +53,19 @@ public AzureByteSource(\n \n   @Override\n   public InputStream openStream() throws IOException\n+  {\n+    return openStream(0L);\n+  }\n+\n+  public InputStream openStream(long offset) throws IOException\n   {\n     try {\n-      return azureStorage.getBlobInputStream(containerName, blobPath);\n+      return azureStorage.getBlobInputStream(offset, containerName, blobPath);\n     }\n     catch (StorageException | URISyntaxException e) {\n+      log.warn(\"Exception when opening stream to azure resource, containerName: %s, blobPath: %s, Error: %s\",", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTE0Mg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675142", "bodyText": "I would think that the contained Exception message (from Microsoft library code) would help explain the issue in more detail.", "author": "zachjsh", "createdAt": "2020-02-08T01:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4NDAzOA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377984038", "bodyText": "I think this log is duplicate with that in RetryingInputStream which calls this method.", "author": "jihoonson", "createdAt": "2020-02-12T00:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzExNA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377993114", "bodyText": "The log in RetryingInputStream does not have information about the container or blob", "author": "zachjsh", "createdAt": "2020-02-12T01:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MDM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MTc5NA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376561794", "bodyText": "In Druid, I see us throw RE which extends from RuntimeExceptions why did you choose to throw that here instead of RE? I don't know which one is the right one to throw...", "author": "suneet-s", "createdAt": "2020-02-07T19:17:52Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureCloudBlobHolderToCloudObjectLocationConverter.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+\n+/**\n+ * Converts a {@link CloudBlobHolder} object to a {@link CloudObjectLocation} object\n+ */\n+public class AzureCloudBlobHolderToCloudObjectLocationConverter\n+    implements ICloudSpecificObjectToCloudObjectLocationConverter<CloudBlobHolder>\n+{\n+  @Override\n+  public CloudObjectLocation createCloudObjectLocation(CloudBlobHolder cloudBlob)\n+  {\n+    try {\n+      return new CloudObjectLocation(cloudBlob.getContainerName(), cloudBlob.getName());\n+    }\n+    catch (Exception e) {\n+      throw new RuntimeException(e);", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2NjA4OQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376566089", "bodyText": "Is there a test that verifies we've read all the blobs from a prefix if there is a continuation token?\nIs there a test for a prefix that has nothing in it? A prefix that has only directories?", "author": "suneet-s", "createdAt": "2020-02-07T19:27:03Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobIteratorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.microsoft.azure.storage.ResultContinuation;\n+import com.microsoft.azure.storage.ResultSegment;\n+import com.microsoft.azure.storage.blob.ListBlobItem;\n+import org.apache.druid.java.util.common.RE;\n+import org.easymock.EasyMock;\n+import org.easymock.EasyMockSupport;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+public class AzureCloudBlobIteratorTest extends EasyMockSupport\n+{\n+  private static final String AZURE = \"azure\";\n+  private static final String CONTAINER1 = \"container1\";\n+  private static final String PREFIX_ONLY_CLOUD_BLOBS = \"prefixOnlyCloudBlobs\";\n+  private static final String PREFIX_WITH_NO_BLOBS = \"prefixWithNoBlobs\";\n+  private static final String PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES = \"prefixWithCloudBlobsAndDirectories\";\n+  private static final URI PREFIX_ONLY_CLOUD_BLOBS_URI;\n+  private static final URI PREFIX_WITH_NO_BLOBS_URI;\n+  private static final URI PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES_URI;\n+  private static final List<URI> EMPTY_URI_PREFIXES = ImmutableList.of();\n+  private static final List<URI> PREFIXES;\n+  private static final int MAX_LISTING_LENGTH = 10;\n+\n+  private AzureStorage storage;\n+  private ListBlobItemHolderFactory blobItemDruidFactory;\n+  private ResultSegment<ListBlobItem> resultSegmentPrefixOnlyCloudBlobs1;\n+  private ResultSegment<ListBlobItem> resultSegmentPrefixOnlyCloudBlobs2;\n+  private ResultSegment<ListBlobItem> resultSegmentPrefixWithNoBlobs;\n+  private ResultSegment<ListBlobItem> resultSegmentPrefixWithCloudBlobsAndDirectories;\n+\n+  private ResultContinuation resultContinuationPrefixOnlyCloudBlobs = new ResultContinuation();\n+  private ResultContinuation nullResultContinuationToken = null;\n+\n+  private ListBlobItem blobItemPrefixWithOnlyCloudBlobs1;\n+  private ListBlobItemHolder cloudBlobItemPrefixWithOnlyCloudBlobs1;\n+  private CloudBlobHolder cloudBlobDruidPrefixWithOnlyCloudBlobs1;\n+\n+  private ListBlobItem blobItemPrefixWithOnlyCloudBlobs2;\n+  private ListBlobItemHolder cloudBlobItemPrefixWithOnlyCloudBlobs2;\n+  private CloudBlobHolder cloudBlobDruidPrefixWithOnlyCloudBlobs2;\n+\n+  private ListBlobItem blobItemPrefixWithCloudBlobsAndDirectories1;\n+  private ListBlobItemHolder directoryItemPrefixWithCloudBlobsAndDirectories;\n+\n+  private ListBlobItem blobItemPrefixWithCloudBlobsAndDirectories2;\n+  private ListBlobItemHolder cloudBlobItemPrefixWithCloudBlobsAndDirectories;\n+  private CloudBlobHolder cloudBlobDruidPrefixWithCloudBlobsAndDirectories;\n+\n+  private ListBlobItem blobItemPrefixWithCloudBlobsAndDirectories3;\n+  private ListBlobItemHolder directoryItemPrefixWithCloudBlobsAndDirectories3;\n+\n+\n+  private AzureCloudBlobIterator azureCloudBlobIterator;\n+\n+  static {\n+    try {\n+      PREFIX_ONLY_CLOUD_BLOBS_URI = new URI(AZURE + \"://\" + CONTAINER1 + \"/\" + PREFIX_ONLY_CLOUD_BLOBS);\n+      PREFIX_WITH_NO_BLOBS_URI = new URI(AZURE + \"://\" + CONTAINER1 + \"/\" + PREFIX_WITH_NO_BLOBS);\n+      PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES_URI = new URI(AZURE\n+                                                            + \"://\"\n+                                                            + CONTAINER1\n+                                                            + \"/\"\n+                                                            + PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES);\n+      PREFIXES = ImmutableList.of(\n+          PREFIX_ONLY_CLOUD_BLOBS_URI,\n+          PREFIX_WITH_NO_BLOBS_URI,\n+          PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES_URI\n+      );\n+    }\n+    catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Before\n+  public void setup()\n+  {\n+    storage = createMock(AzureStorage.class);\n+    resultSegmentPrefixOnlyCloudBlobs1 = createMock(ResultSegment.class);\n+    resultSegmentPrefixOnlyCloudBlobs2 = createMock(ResultSegment.class);\n+    resultSegmentPrefixWithNoBlobs = createMock(ResultSegment.class);\n+    resultSegmentPrefixWithCloudBlobsAndDirectories = createMock(ResultSegment.class);\n+    cloudBlobItemPrefixWithOnlyCloudBlobs1 = createMock(ListBlobItemHolder.class);\n+\n+    blobItemPrefixWithOnlyCloudBlobs1 = createMock(ListBlobItem.class);\n+    cloudBlobItemPrefixWithOnlyCloudBlobs1 = createMock(ListBlobItemHolder.class);\n+    cloudBlobDruidPrefixWithOnlyCloudBlobs1 = createMock(CloudBlobHolder.class);\n+\n+    blobItemPrefixWithOnlyCloudBlobs2 = createMock(ListBlobItem.class);\n+    cloudBlobItemPrefixWithOnlyCloudBlobs2 = createMock(ListBlobItemHolder.class);\n+    cloudBlobDruidPrefixWithOnlyCloudBlobs2 = createMock(CloudBlobHolder.class);\n+\n+    blobItemPrefixWithCloudBlobsAndDirectories1 = createMock(ListBlobItem.class);\n+    directoryItemPrefixWithCloudBlobsAndDirectories = createMock(ListBlobItemHolder.class);\n+\n+    blobItemPrefixWithCloudBlobsAndDirectories2 = createMock(ListBlobItem.class);\n+    cloudBlobItemPrefixWithCloudBlobsAndDirectories = createMock(ListBlobItemHolder.class);\n+    cloudBlobDruidPrefixWithCloudBlobsAndDirectories = createMock(CloudBlobHolder.class);\n+\n+    blobItemPrefixWithCloudBlobsAndDirectories3 = createMock(ListBlobItem.class);\n+    directoryItemPrefixWithCloudBlobsAndDirectories3 = createMock(ListBlobItemHolder.class);\n+\n+\n+    blobItemDruidFactory = createMock(ListBlobItemHolderFactory.class);\n+  }\n+\n+  @Test\n+  public void test_hasNext_noBlobs_returnsFalse()\n+  {\n+    azureCloudBlobIterator = new AzureCloudBlobIterator(\n+        storage,\n+        blobItemDruidFactory,\n+        EMPTY_URI_PREFIXES,\n+        MAX_LISTING_LENGTH\n+    );\n+    boolean hasNext = azureCloudBlobIterator.hasNext();\n+    Assert.assertFalse(hasNext);\n+  }\n+\n+  @Test\n+  public void test_next_prefixesWithMultipleBlobsAndSomeDirectories_returnsExpectedBlobs() throws Exception\n+  {\n+    EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.isCloudBlob()).andReturn(true);\n+    EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs1.getCloudBlob()).andReturn(\n+        cloudBlobDruidPrefixWithOnlyCloudBlobs1);\n+    EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs1)).andReturn(\n+        cloudBlobItemPrefixWithOnlyCloudBlobs1);\n+\n+    EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.isCloudBlob()).andReturn(true);\n+    EasyMock.expect(cloudBlobItemPrefixWithOnlyCloudBlobs2.getCloudBlob()).andReturn(\n+        cloudBlobDruidPrefixWithOnlyCloudBlobs2);\n+    EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithOnlyCloudBlobs2)).andReturn(\n+        cloudBlobItemPrefixWithOnlyCloudBlobs2);\n+\n+    EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(false);\n+    EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories1)).andReturn(\n+        directoryItemPrefixWithCloudBlobsAndDirectories);\n+\n+    EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.isCloudBlob()).andReturn(true);\n+    EasyMock.expect(cloudBlobItemPrefixWithCloudBlobsAndDirectories.getCloudBlob()).andReturn(\n+        cloudBlobDruidPrefixWithCloudBlobsAndDirectories);\n+    EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories2)).andReturn(\n+        cloudBlobItemPrefixWithCloudBlobsAndDirectories);\n+\n+    EasyMock.expect(directoryItemPrefixWithCloudBlobsAndDirectories3.isCloudBlob()).andReturn(false);\n+    EasyMock.expect(blobItemDruidFactory.create(blobItemPrefixWithCloudBlobsAndDirectories3)).andReturn(\n+        directoryItemPrefixWithCloudBlobsAndDirectories3);\n+\n+    ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs1 = new ArrayList<>();\n+    resultBlobItemsPrefixWithOnlyCloudBlobs1.add(blobItemPrefixWithOnlyCloudBlobs1);\n+    ArrayList<ListBlobItem> resultBlobItemsPrefixWithOnlyCloudBlobs2 = new ArrayList<>();\n+    resultBlobItemsPrefixWithOnlyCloudBlobs2.add(blobItemPrefixWithOnlyCloudBlobs2);\n+    ArrayList<ListBlobItem> resultBlobItemsPrefixWithNoBlobs = new ArrayList<>();\n+    ArrayList<ListBlobItem> resultBlobItemsPrefixWithCloudBlobsAndDirectories = new ArrayList<>();\n+    resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories1);\n+    resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories2);\n+    resultBlobItemsPrefixWithCloudBlobsAndDirectories.add(blobItemPrefixWithCloudBlobsAndDirectories3);\n+    EasyMock.expect(resultSegmentPrefixOnlyCloudBlobs1.getContinuationToken())\n+            .andReturn(resultContinuationPrefixOnlyCloudBlobs);\n+    EasyMock.expect(resultSegmentPrefixOnlyCloudBlobs1.getResults())\n+            .andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs1);\n+\n+    EasyMock.expect(resultSegmentPrefixOnlyCloudBlobs2.getContinuationToken()).andReturn(nullResultContinuationToken);\n+    EasyMock.expect(resultSegmentPrefixOnlyCloudBlobs2.getResults())\n+            .andReturn(resultBlobItemsPrefixWithOnlyCloudBlobs2);\n+\n+    EasyMock.expect(resultSegmentPrefixWithNoBlobs.getContinuationToken()).andReturn(nullResultContinuationToken);\n+    EasyMock.expect(resultSegmentPrefixWithNoBlobs.getResults()).andReturn(resultBlobItemsPrefixWithNoBlobs);\n+\n+    EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getContinuationToken())\n+            .andReturn(nullResultContinuationToken);\n+    EasyMock.expect(resultSegmentPrefixWithCloudBlobsAndDirectories.getResults())\n+            .andReturn(resultBlobItemsPrefixWithCloudBlobsAndDirectories);\n+\n+    EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(\n+        CONTAINER1,\n+        PREFIX_ONLY_CLOUD_BLOBS,\n+        nullResultContinuationToken,\n+        MAX_LISTING_LENGTH\n+    )).andReturn(resultSegmentPrefixOnlyCloudBlobs1);\n+\n+\n+    EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(\n+        CONTAINER1,\n+        PREFIX_ONLY_CLOUD_BLOBS,\n+        resultContinuationPrefixOnlyCloudBlobs,\n+        MAX_LISTING_LENGTH\n+    )).andReturn(resultSegmentPrefixOnlyCloudBlobs2);\n+\n+    EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(\n+        CONTAINER1,\n+        PREFIX_WITH_NO_BLOBS,\n+        nullResultContinuationToken,\n+        MAX_LISTING_LENGTH\n+    )).andReturn(resultSegmentPrefixWithNoBlobs);\n+\n+    EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(\n+        CONTAINER1,\n+        PREFIX_WITH_CLOUD_BLOBS_AND_DIRECTORIES,\n+        nullResultContinuationToken,\n+        MAX_LISTING_LENGTH\n+    )).andReturn(resultSegmentPrefixWithCloudBlobsAndDirectories);\n+\n+    replayAll();\n+\n+    azureCloudBlobIterator = new AzureCloudBlobIterator(\n+        storage,\n+        blobItemDruidFactory,\n+        PREFIXES,\n+        MAX_LISTING_LENGTH\n+    );\n+\n+    List<CloudBlobHolder> expectedBlobItems = ImmutableList.of(\n+        cloudBlobDruidPrefixWithOnlyCloudBlobs1,\n+        cloudBlobDruidPrefixWithOnlyCloudBlobs2,\n+        cloudBlobDruidPrefixWithCloudBlobsAndDirectories\n+    );\n+    List<CloudBlobHolder> actualBlobItems = new ArrayList<>();\n+    while (azureCloudBlobIterator.hasNext()) {\n+      actualBlobItems.add(azureCloudBlobIterator.next());\n+    }\n+    Assert.assertEquals(expectedBlobItems.size(), actualBlobItems.size());\n+    Assert.assertTrue(expectedBlobItems.containsAll(actualBlobItems));\n+    verifyAll();\n+  }\n+\n+  @Test(expected = NoSuchElementException.class)\n+  public void test_next_emptyPrefixes_throwsNoSuchElementException()\n+  {\n+    azureCloudBlobIterator = new AzureCloudBlobIterator(\n+        storage,\n+        blobItemDruidFactory,\n+        EMPTY_URI_PREFIXES,\n+        MAX_LISTING_LENGTH\n+    );\n+    azureCloudBlobIterator.next();\n+  }\n+\n+  @Test(expected = RE.class)\n+  public void test_fetchNextBatch_exceptionThrownInStorage_throwsREException() throws Exception\n+  {\n+    EasyMock.expect(storage.listBlobsWithPrefixInContainerSegmented(\n+        EasyMock.anyString(),\n+        EasyMock.anyString(),\n+        EasyMock.anyObject(),\n+        EasyMock.anyInt()\n+    )).andThrow(new URISyntaxException(\"\", \"\"));\n+    azureCloudBlobIterator = new AzureCloudBlobIterator(\n+        storage,\n+        blobItemDruidFactory,\n+        PREFIXES,\n+        MAX_LISTING_LENGTH\n+    );\n+  }\n+", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NjIwNA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376676204", "bodyText": "There is a test that verifies we've read all the blobs from a prefix if there is a continuation token, that verifies a prefix that has nothing in it, and a test that verified a prefix that contains both directories and blobs.", "author": "zachjsh", "createdAt": "2020-02-08T01:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2NjA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2NzQ3MA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376567470", "bodyText": "we're not changing the containerName in this function are we? I think it's confusing if one parameter is marked as final and the other isn't when both are in fact final", "author": "suneet-s", "createdAt": "2020-02-07T19:30:16Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "diffHunk": "@@ -49,7 +57,7 @@ public AzureStorage(\n     this.cloudBlobClient = cloudBlobClient;\n   }\n \n-  public List<String> emptyCloudBlobDirectory(final String containerName, final String virtualDirPath)\n+  public List<String> emptyCloudBlobDirectory(String containerName, final String virtualDirPath)", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3NTg2Nw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377475867", "bodyText": "done", "author": "zachjsh", "createdAt": "2020-02-11T07:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2NzQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2Nzc5Ng==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376567796", "bodyText": "package private\n@VisibleForTesting", "author": "suneet-s", "createdAt": "2020-02-07T19:31:01Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "diffHunk": "@@ -117,4 +125,26 @@ private CloudBlobContainer getOrCreateCloudBlobContainer(final String containerN\n \n     return cloudBlobContainer;\n   }\n+\n+  public ResultSegment<ListBlobItem> listBlobsWithPrefixInContainerSegmented(", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3NTgzNw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377475837", "bodyText": "done", "author": "zachjsh", "createdAt": "2020-02-11T07:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2Nzc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MDcyNA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376570724", "bodyText": "nit: Move CloudBlobHolder and ListBlobItemHolder and their Factories to ...stoarge.azure.blob so that it's out of this package which has other classes that are relevant to how the extension works", "author": "suneet-s", "createdAt": "2020-02-07T19:37:43Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/ListBlobItemHolder.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3NTc3Mg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377475772", "bodyText": "done", "author": "zachjsh", "createdAt": "2020-02-11T07:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MDcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MjEyOQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376572129", "bodyText": "nit: Add a test for readFromStart", "author": "suneet-s", "createdAt": "2020-02-07T19:40:52Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/data/input/azure/AzureEntityTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.base.Predicate;\n+import org.apache.commons.io.input.NullInputStream;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.storage.azure.AzureByteSource;\n+import org.apache.druid.storage.azure.AzureByteSourceFactory;\n+import org.apache.druid.storage.azure.AzureUtils;\n+import org.easymock.EasyMock;\n+import org.easymock.EasyMockSupport;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+public class AzureEntityTest extends EasyMockSupport\n+{\n+  private static final String CONTAINER_NAME = \"container\";\n+  private static final String BLOB_NAME = \"blob\";\n+  private static final int OFFSET = 20;\n+  private static final InputStream INPUT_STREAM = new NullInputStream(OFFSET);\n+  private static final IOException IO_EXCEPTION = new IOException();\n+  private static final URI ENTITY_URI;\n+\n+  private CloudObjectLocation location;\n+  private AzureByteSourceFactory byteSourceFactory;\n+  private AzureByteSource byteSource;\n+\n+  private AzureEntity azureEntity;\n+\n+  static {\n+    try {\n+      ENTITY_URI = new URI(AzureInputSource.SCHEME + \"://\" + CONTAINER_NAME + \"/\" + BLOB_NAME);\n+    }\n+    catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Before\n+  public void setup()\n+  {\n+    location = createMock(CloudObjectLocation.class);\n+    byteSourceFactory = createMock(AzureByteSourceFactory.class);\n+    byteSource = createMock(AzureByteSource.class);\n+  }\n+\n+  @Test\n+  public void test_getUri_returnsLocationUri()\n+  {\n+    EasyMock.expect(location.getBucket()).andReturn(CONTAINER_NAME);\n+    EasyMock.expect(location.getPath()).andReturn(BLOB_NAME);\n+    EasyMock.expect(byteSourceFactory.create(CONTAINER_NAME, BLOB_NAME)).andReturn(byteSource);\n+    EasyMock.expect(location.toUri(AzureInputSource.SCHEME)).andReturn(ENTITY_URI);\n+    replayAll();\n+\n+    azureEntity = new AzureEntity(location, byteSourceFactory);\n+\n+    URI actualUri = azureEntity.getUri();\n+    Assert.assertEquals(ENTITY_URI, actualUri);\n+\n+    verifyAll();\n+\n+  }\n+\n+  @Test\n+  public void test_readFrom_returnsExpectedStream() throws Exception\n+  {\n+    EasyMock.expect(location.getBucket()).andReturn(CONTAINER_NAME);\n+    EasyMock.expect(location.getPath()).andReturn(BLOB_NAME);\n+    EasyMock.expect(byteSource.openStream(OFFSET)).andReturn(INPUT_STREAM);\n+    EasyMock.expect(byteSourceFactory.create(CONTAINER_NAME, BLOB_NAME)).andReturn(byteSource);\n+    replayAll();\n+\n+    azureEntity = new AzureEntity(location, byteSourceFactory);\n+\n+    InputStream actualInputStream = azureEntity.readFrom(OFFSET);\n+    Assert.assertSame(INPUT_STREAM, actualInputStream);\n+  }\n+\n+  @Test\n+  public void test_readFrom_throwsIOException_propogatesError()\n+  {\n+    try {\n+      EasyMock.expect(location.getBucket()).andReturn(CONTAINER_NAME);\n+      EasyMock.expect(location.getPath()).andReturn(BLOB_NAME);\n+      EasyMock.expect(byteSource.openStream(OFFSET)).andThrow(IO_EXCEPTION);\n+      EasyMock.expect(byteSourceFactory.create(CONTAINER_NAME, BLOB_NAME)).andReturn(byteSource);\n+      replayAll();\n+\n+      azureEntity = new AzureEntity(location, byteSourceFactory);\n+      azureEntity.readFrom(OFFSET);\n+    }\n+    catch (IOException e) {\n+      verifyAll();\n+    }\n+  }\n+\n+  @Test\n+  public void test_getPath_returnsLocationPath()\n+  {\n+    EasyMock.expect(location.getBucket()).andReturn(CONTAINER_NAME);\n+    EasyMock.expect(location.getPath()).andReturn(BLOB_NAME).atLeastOnce();\n+    EasyMock.expect(byteSourceFactory.create(CONTAINER_NAME, BLOB_NAME)).andReturn(byteSource);\n+    replayAll();\n+\n+    azureEntity = new AzureEntity(location, byteSourceFactory);\n+    String actualPath = azureEntity.getPath();\n+\n+    Assert.assertEquals(BLOB_NAME, actualPath);\n+    verifyAll();\n+  }\n+\n+  @Test\n+  public void test_getRetryCondition_returnsExpectedRetryCondition()\n+  {\n+    EasyMock.expect(location.getBucket()).andReturn(CONTAINER_NAME);\n+    EasyMock.expect(location.getPath()).andReturn(BLOB_NAME).atLeastOnce();\n+    EasyMock.expect(byteSourceFactory.create(CONTAINER_NAME, BLOB_NAME)).andReturn(byteSource);\n+    replayAll();\n+\n+    azureEntity = new AzureEntity(location, byteSourceFactory);\n+    Predicate<Throwable> actualRetryCondition = azureEntity.getRetryCondition();\n+    Assert.assertSame(AzureUtils.AZURE_RETRY, actualRetryCondition);\n+  }\n+}", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTg3Ng==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675876", "bodyText": "added", "author": "zachjsh", "createdAt": "2020-02-08T01:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MjEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3Mjc0MQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376572741", "bodyText": "nit: I prefere test_init_... but maybe Constructor should be constructor since it's the first word after _", "author": "suneet-s", "createdAt": "2020-02-07T19:42:22Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/data/input/azure/AzureInputSourceTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.azure.AzureCloudBlobHolderToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterable;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobHolder;\n+import org.easymock.EasyMock;\n+import org.easymock.EasyMockSupport;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class AzureInputSourceTest extends EasyMockSupport\n+{\n+  private static final String CONTAINER_NAME = \"container\";\n+  private static final String BLOB_NAME = \"blob\";\n+  private static final URI PREFIX_URI;\n+  private final List<URI> EMPTY_URIS = ImmutableList.of();\n+  private final List<URI> EMPTY_PREFIXES = ImmutableList.of();\n+  private final List<CloudObjectLocation> EMPTY_OBJECTS = ImmutableList.of();\n+  private static final String CONTAINER = \"CONTAINER\";\n+  private static final String BLOB_PATH = \"BLOB_PATH\";\n+  private static final CloudObjectLocation CLOUD_OBJECT_LOCATION_1 = new CloudObjectLocation(CONTAINER, BLOB_PATH);\n+\n+  private AzureStorage storage;\n+  private AzureEntityFactory entityFactory;\n+  private AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  private InputSplit<CloudObjectLocation> inputSplit;\n+  private AzureEntity azureEntity1;\n+  private CloudBlobHolder cloudBlobDruid1;\n+  private AzureCloudBlobIterable azureCloudBlobIterable;\n+\n+  private AzureInputSource azureInputSource;\n+\n+  static {\n+    try {\n+      PREFIX_URI = new URI(AzureInputSource.SCHEME + \"://\" + CONTAINER_NAME + \"/\" + BLOB_NAME);\n+    }\n+    catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Before\n+  public void setup()\n+  {\n+    storage = createMock(AzureStorage.class);\n+    entityFactory = createMock(AzureEntityFactory.class);\n+    inputSplit = createMock(InputSplit.class);\n+    azureEntity1 = createMock(AzureEntity.class);\n+    azureCloudBlobIterableFactory = createMock(AzureCloudBlobIterableFactory.class);\n+    azureCloudBlobToLocationConverter = createMock(AzureCloudBlobHolderToCloudObjectLocationConverter.class);\n+    cloudBlobDruid1 = createMock(CloudBlobHolder.class);\n+    azureCloudBlobIterable = createMock(AzureCloudBlobIterable.class);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void test_Constructor_emptyUrisEmptyPrefixesEmptyObjects_throwsIllegalArgumentException()", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTk3NA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675974", "bodyText": "fixed", "author": "zachjsh", "createdAt": "2020-02-08T01:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3Mjc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MzEyMw==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376573123", "bodyText": "Do we want tests for uris and prefixes or uris and objects, etc. Or is that covered by another test", "author": "suneet-s", "createdAt": "2020-02-07T19:43:18Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/data/input/azure/AzureInputSourceTest.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.azure.AzureCloudBlobHolderToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterable;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.CloudBlobHolder;\n+import org.easymock.EasyMock;\n+import org.easymock.EasyMockSupport;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Spliterators;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class AzureInputSourceTest extends EasyMockSupport\n+{\n+  private static final String CONTAINER_NAME = \"container\";\n+  private static final String BLOB_NAME = \"blob\";\n+  private static final URI PREFIX_URI;\n+  private final List<URI> EMPTY_URIS = ImmutableList.of();\n+  private final List<URI> EMPTY_PREFIXES = ImmutableList.of();\n+  private final List<CloudObjectLocation> EMPTY_OBJECTS = ImmutableList.of();\n+  private static final String CONTAINER = \"CONTAINER\";\n+  private static final String BLOB_PATH = \"BLOB_PATH\";\n+  private static final CloudObjectLocation CLOUD_OBJECT_LOCATION_1 = new CloudObjectLocation(CONTAINER, BLOB_PATH);\n+\n+  private AzureStorage storage;\n+  private AzureEntityFactory entityFactory;\n+  private AzureCloudBlobIterableFactory azureCloudBlobIterableFactory;\n+  private AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobToLocationConverter;\n+\n+  private InputSplit<CloudObjectLocation> inputSplit;\n+  private AzureEntity azureEntity1;\n+  private CloudBlobHolder cloudBlobDruid1;\n+  private AzureCloudBlobIterable azureCloudBlobIterable;\n+\n+  private AzureInputSource azureInputSource;\n+\n+  static {\n+    try {\n+      PREFIX_URI = new URI(AzureInputSource.SCHEME + \"://\" + CONTAINER_NAME + \"/\" + BLOB_NAME);\n+    }\n+    catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  @Before\n+  public void setup()\n+  {\n+    storage = createMock(AzureStorage.class);\n+    entityFactory = createMock(AzureEntityFactory.class);\n+    inputSplit = createMock(InputSplit.class);\n+    azureEntity1 = createMock(AzureEntity.class);\n+    azureCloudBlobIterableFactory = createMock(AzureCloudBlobIterableFactory.class);\n+    azureCloudBlobToLocationConverter = createMock(AzureCloudBlobHolderToCloudObjectLocationConverter.class);\n+    cloudBlobDruid1 = createMock(CloudBlobHolder.class);\n+    azureCloudBlobIterable = createMock(AzureCloudBlobIterable.class);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void test_Constructor_emptyUrisEmptyPrefixesEmptyObjects_throwsIllegalArgumentException()\n+  {\n+    replayAll();\n+    azureInputSource = new AzureInputSource(\n+        storage,\n+        entityFactory,\n+        azureCloudBlobIterableFactory,\n+        azureCloudBlobToLocationConverter,\n+        EMPTY_URIS,\n+        EMPTY_PREFIXES,\n+        EMPTY_OBJECTS\n+    );", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3NTk5OQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376675999", "bodyText": "cant have both", "author": "zachjsh", "createdAt": "2020-02-08T01:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MzEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDA4MA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376574080", "bodyText": "just FYI - you can use @RunWith(EasyMockRunner.class) and then just annotate the variables in the class so you don't need to call createMock in the setUp method", "author": "suneet-s", "createdAt": "2020-02-07T19:45:27Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobHolderToCloudObjectLocationConverterTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.easymock.EasyMock;\n+import org.easymock.EasyMockSupport;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AzureCloudBlobHolderToCloudObjectLocationConverterTest extends EasyMockSupport\n+{\n+  private static final String CONTAINER1 = \"container1\";\n+  private static final String BLOB1 = \"blob1\";\n+\n+  private CloudBlobHolder cloudBlob;\n+\n+  private AzureCloudBlobHolderToCloudObjectLocationConverter converter;\n+\n+  @Before\n+  public void setup()\n+  {\n+    cloudBlob = createMock(CloudBlobHolder.class);", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDY1OA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376574658", "bodyText": "I see this duplicated in a lot of tests, maybe we should put it in it's own utility function?", "author": "suneet-s", "createdAt": "2020-02-07T19:46:41Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureStorageDruidModuleTest.java", "diffHunk": "@@ -101,6 +126,108 @@ public void test_getAzureStorageContainer_expectedClient()\n     Assert.assertSame(cloudBlobClient, azureStorage.getCloudBlobClient());\n   }\n \n+  @Test\n+  public void test_getAzureCloudBlobToLocationConverter_expectedConverted()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobLocationConverter1 = injector.getInstance(\n+        AzureCloudBlobHolderToCloudObjectLocationConverter.class);\n+    AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobLocationConverter2 = injector.getInstance(\n+        AzureCloudBlobHolderToCloudObjectLocationConverter.class);\n+    Assert.assertSame(azureCloudBlobLocationConverter1, azureCloudBlobLocationConverter2);\n+  }\n+\n+  @Test\n+  public void test_getAzureByteSourceFactory_canCreateAzureByteSource()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureByteSourceFactory factory = injector.getInstance(AzureByteSourceFactory.class);\n+    Object object1 = factory.create(\"container1\", \"blob1\");\n+    Object object2 = factory.create(\"container2\", \"blob2\");\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getAzureEntityFactory_canCreateAzureEntity()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+\n+    EasyMock.expect(cloudObjectLocation1.getBucket()).andReturn(AZURE_CONTAINER);\n+    EasyMock.expect(cloudObjectLocation2.getBucket()).andReturn(AZURE_CONTAINER);\n+    EasyMock.expect(cloudObjectLocation1.getPath()).andReturn(PATH);\n+    EasyMock.expect(cloudObjectLocation2.getPath()).andReturn(PATH);\n+    replayAll();\n+\n+    injector = makeInjectorWithProperties(props);\n+    AzureEntityFactory factory = injector.getInstance(AzureEntityFactory.class);\n+    Object object1 = factory.create(cloudObjectLocation1);\n+    Object object2 = factory.create(cloudObjectLocation2);\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getAzureCloudBlobIteratorFactory_canCreateAzureCloudBlobIterator()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureCloudBlobIteratorFactory factory = injector.getInstance(AzureCloudBlobIteratorFactory.class);\n+    Object object1 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    Object object2 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getAzureCloudBlobIterableFactory_canCreateAzureCloudBlobIterable()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureCloudBlobIterableFactory factory = injector.getInstance(AzureCloudBlobIterableFactory.class);\n+    AzureCloudBlobIterable object1 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    AzureCloudBlobIterable object2 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getListBlobItemDruidFactory_canCreateListBlobItemDruid()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NTQ4Ng==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376575486", "bodyText": "Test to verify the AzureInputSource is registered to the scheme azure", "author": "suneet-s", "createdAt": "2020-02-07T19:48:36Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureStorageDruidModuleTest.java", "diffHunk": "@@ -101,6 +126,108 @@ public void test_getAzureStorageContainer_expectedClient()\n     Assert.assertSame(cloudBlobClient, azureStorage.getCloudBlobClient());\n   }\n \n+  @Test\n+  public void test_getAzureCloudBlobToLocationConverter_expectedConverted()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobLocationConverter1 = injector.getInstance(\n+        AzureCloudBlobHolderToCloudObjectLocationConverter.class);\n+    AzureCloudBlobHolderToCloudObjectLocationConverter azureCloudBlobLocationConverter2 = injector.getInstance(\n+        AzureCloudBlobHolderToCloudObjectLocationConverter.class);\n+    Assert.assertSame(azureCloudBlobLocationConverter1, azureCloudBlobLocationConverter2);\n+  }\n+\n+  @Test\n+  public void test_getAzureByteSourceFactory_canCreateAzureByteSource()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureByteSourceFactory factory = injector.getInstance(AzureByteSourceFactory.class);\n+    Object object1 = factory.create(\"container1\", \"blob1\");\n+    Object object2 = factory.create(\"container2\", \"blob2\");\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getAzureEntityFactory_canCreateAzureEntity()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+\n+    EasyMock.expect(cloudObjectLocation1.getBucket()).andReturn(AZURE_CONTAINER);\n+    EasyMock.expect(cloudObjectLocation2.getBucket()).andReturn(AZURE_CONTAINER);\n+    EasyMock.expect(cloudObjectLocation1.getPath()).andReturn(PATH);\n+    EasyMock.expect(cloudObjectLocation2.getPath()).andReturn(PATH);\n+    replayAll();\n+\n+    injector = makeInjectorWithProperties(props);\n+    AzureEntityFactory factory = injector.getInstance(AzureEntityFactory.class);\n+    Object object1 = factory.create(cloudObjectLocation1);\n+    Object object2 = factory.create(cloudObjectLocation2);\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getAzureCloudBlobIteratorFactory_canCreateAzureCloudBlobIterator()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureCloudBlobIteratorFactory factory = injector.getInstance(AzureCloudBlobIteratorFactory.class);\n+    Object object1 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    Object object2 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getAzureCloudBlobIterableFactory_canCreateAzureCloudBlobIterable()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    AzureCloudBlobIterableFactory factory = injector.getInstance(AzureCloudBlobIterableFactory.class);\n+    AzureCloudBlobIterable object1 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    AzureCloudBlobIterable object2 = factory.create(EMPTY_PREFIXES_ITERABLE, 10);\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+\n+  @Test\n+  public void test_getListBlobItemDruidFactory_canCreateListBlobItemDruid()\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.azure.account\", AZURE_ACCOUNT_NAME);\n+    props.put(\"druid.azure.key\", AZURE_ACCOUNT_KEY);\n+    props.put(\"druid.azure.container\", AZURE_CONTAINER);\n+    injector = makeInjectorWithProperties(props);\n+    ListBlobItemHolderFactory factory = injector.getInstance(ListBlobItemHolderFactory.class);\n+    ListBlobItemHolder object1 = factory.create(blobItem1);\n+    ListBlobItemHolder object2 = factory.create(blobItem2);\n+    Assert.assertNotNull(object1);\n+    Assert.assertNotNull(object2);\n+    Assert.assertNotSame(object1, object2);\n+  }\n+", "originalCommit": "9226f9bb86234c7e1ccf156318e0bccea253999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg2NjM2Ng==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376866366", "bodyText": "How to do this? There is no property in the class or subclass for this. Should I add one just for this test?", "author": "zachjsh", "createdAt": "2020-02-10T04:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NTQ4Ng=="}], "type": "inlineReview"}, {"oid": "da83e24079fb7c9d4123fe81ca90d9d7f1a02261", "url": "https://github.com/apache/druid/commit/da83e24079fb7c9d4123fe81ca90d9d7f1a02261", "message": "* Address review comments", "committedDate": "2020-02-08T01:41:16Z", "type": "commit"}, {"oid": "45b0bfa0f96c74e8a301a1a286da8aa206a153cc", "url": "https://github.com/apache/druid/commit/45b0bfa0f96c74e8a301a1a286da8aa206a153cc", "message": "* Address review comments", "committedDate": "2020-02-11T07:19:47Z", "type": "commit"}, {"oid": "de70111c3af5b5fe0ce9d1f3cfdcecdfeee62cf3", "url": "https://github.com/apache/druid/commit/de70111c3af5b5fe0ce9d1f3cfdcecdfeee62cf3", "message": "* Address review comments", "committedDate": "2020-02-11T07:29:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyODMwMQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376828301", "bodyText": "Shouldn't AzureStorage#log be a static member?", "author": "suneet-s", "createdAt": "2020-02-09T23:50:59Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/data/input/azure/AzureInputSourceTest.java", "diffHunk": "@@ -199,6 +201,19 @@ public void test_toString_returnsExpectedString()\n     Assert.assertEquals(\"AzureInputSource{uris=[], prefixes=[azure://container/blob], objects=[]}\", actualToString);\n   }\n \n+  @Test\n+  public void abidesEqualsContract()\n+  {\n+    EqualsVerifier.forClass(AzureInputSource.class)\n+                  .usingGetClass()\n+                  .withPrefabValues(Logger.class, new Logger(AzureStorage.class), new Logger(AzureStorage.class))", "originalCommit": "da83e24079fb7c9d4123fe81ca90d9d7f1a02261", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyODg0Mg==", "url": "https://github.com/apache/druid/pull/9306#discussion_r376828842", "bodyText": "hmm... strange that readFromStart isn't visible in this test \ud83e\udd14", "author": "suneet-s", "createdAt": "2020-02-09T23:57:22Z", "path": "extensions-contrib/azure-extensions/src/test/java/org/apache/druid/data/input/azure/AzureEntityTest.java", "diffHunk": "@@ -85,6 +85,21 @@ public void test_getUri_returnsLocationUri()\n \n   }\n \n+  @Test\n+  public void test_readFromStart_returnsExpectedStream() throws Exception\n+  {\n+    EasyMock.expect(location.getBucket()).andReturn(CONTAINER_NAME);\n+    EasyMock.expect(location.getPath()).andReturn(BLOB_NAME);\n+    EasyMock.expect(byteSource.openStream(0)).andReturn(INPUT_STREAM);\n+    EasyMock.expect(byteSourceFactory.create(CONTAINER_NAME, BLOB_NAME)).andReturn(byteSource);\n+    replayAll();\n+\n+    azureEntity = new AzureEntity(location, byteSourceFactory);\n+\n+    InputStream actualInputStream = azureEntity.readFrom(0);", "originalCommit": "da83e24079fb7c9d4123fe81ca90d9d7f1a02261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDA1OQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377990059", "bodyText": "readFromStart is a protected method.", "author": "jihoonson", "createdAt": "2020-02-12T01:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyODg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4OTAzOA==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377989038", "bodyText": "Please make this a static final variable.", "author": "jihoonson", "createdAt": "2020-02-12T01:02:06Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "diffHunk": "@@ -33,10 +36,15 @@\n import java.io.InputStream;\n import java.net.URISyntaxException;\n import java.util.ArrayList;\n+import java.util.EnumSet;\n import java.util.List;\n \n+/**\n+ * Abstracts the Azure storage layer. Makes direct calls to Azure file system.\n+ */\n public class AzureStorage\n {\n+  private static final boolean USE_FLAT_BLOB_LISTING = true;\n \n   private final Logger log = new Logger(AzureStorage.class);", "originalCommit": "de70111c3af5b5fe0ce9d1f3cfdcecdfeee62cf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5NDY0MQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377994641", "bodyText": "Will fix this as part of a subsequent change to this area of the code.", "author": "zachjsh", "createdAt": "2020-02-12T01:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4OTAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4OTY4MQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377989681", "bodyText": "Why not using CloudObjectInputSource.MAX_LISTING_LENGTH?", "author": "jihoonson", "createdAt": "2020-02-12T01:04:33Z", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/data/input/azure/AzureInputSource.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.azure;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputSplit;\n+import org.apache.druid.data.input.impl.CloudObjectInputSource;\n+import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.SplittableInputSource;\n+import org.apache.druid.storage.azure.AzureCloudBlobHolderToCloudObjectLocationConverter;\n+import org.apache.druid.storage.azure.AzureCloudBlobIterableFactory;\n+import org.apache.druid.storage.azure.AzureStorage;\n+import org.apache.druid.storage.azure.blob.CloudBlobHolder;\n+\n+import javax.annotation.Nullable;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Abstracts the Azure storage system where input data is stored. Allows users to retrieve entities in\n+ * the storage system that match either a particular uri, prefix, or object.\n+ */\n+public class AzureInputSource extends CloudObjectInputSource<AzureEntity>\n+{\n+  @VisibleForTesting\n+  static final int MAX_LISTING_LENGTH = 1024;", "originalCommit": "de70111c3af5b5fe0ce9d1f3cfdcecdfeee62cf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzAxOQ==", "url": "https://github.com/apache/druid/pull/9306#discussion_r377993019", "bodyText": "intelliJ was producing a warning when doing this.", "author": "zachjsh", "createdAt": "2020-02-12T01:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4OTY4MQ=="}], "type": "inlineReview"}]}