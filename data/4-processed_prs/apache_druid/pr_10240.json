{"pr_number": 10240, "pr_title": "Redis cache extension enhancement", "pr_createdAt": "2020-08-05T03:31:31Z", "pr_url": "https://github.com/apache/druid/pull/10240", "timeline": [{"oid": "309fb03aec47fde06e4763747ffc3eaf3c87321f", "url": "https://github.com/apache/druid/commit/309fb03aec47fde06e4763747ffc3eaf3c87321f", "message": "support redis cluster", "committedDate": "2020-07-23T01:09:56Z", "type": "commit"}, {"oid": "9e607b73aa5e86bd039506dfcf5d8c982672c62b", "url": "https://github.com/apache/druid/commit/9e607b73aa5e86bd039506dfcf5d8c982672c62b", "message": "add 'password', 'database' properties", "committedDate": "2020-07-29T01:13:40Z", "type": "commit"}, {"oid": "bbbc2dbcf59792670a1dc1e541d001c0c46e9b9e", "url": "https://github.com/apache/druid/commit/bbbc2dbcf59792670a1dc1e541d001c0c46e9b9e", "message": "test cases passed", "committedDate": "2020-08-04T03:20:36Z", "type": "commit"}, {"oid": "08992d098f6a2b4040720f8d32ab15a9f6ea2797", "url": "https://github.com/apache/druid/commit/08992d098f6a2b4040720f8d32ab15a9f6ea2797", "message": "update doc", "committedDate": "2020-08-05T02:10:22Z", "type": "commit"}, {"oid": "50fc9fd60eedad4297e65f9f522f207234b23692", "url": "https://github.com/apache/druid/commit/50fc9fd60eedad4297e65f9f522f207234b23692", "message": "some improvements", "committedDate": "2020-08-05T03:27:25Z", "type": "commit"}, {"oid": "c17fde00f0cd455671d6978748a06cb34eb279f2", "url": "https://github.com/apache/druid/commit/c17fde00f0cd455671d6978748a06cb34eb279f2", "message": "fix CI", "committedDate": "2020-08-05T05:25:08Z", "type": "commit"}, {"oid": "49967c903ac83714c79bffc656447275a5acd96b", "url": "https://github.com/apache/druid/commit/49967c903ac83714c79bffc656447275a5acd96b", "message": "add more test cases to improve branch coverage", "committedDate": "2020-08-10T03:26:29Z", "type": "commit"}, {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "url": "https://github.com/apache/druid/commit/a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "message": "fix dependency check for test", "committedDate": "2020-08-10T08:07:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MzQ3NA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469193474", "bodyText": "Please specify a bash type for this block", "author": "asdf2014", "createdAt": "2020-08-12T11:35:43Z", "path": "docs/development/extensions-contrib/redis-cache.md", "diffHunk": "@@ -22,32 +22,85 @@ title: \"Druid Redis Cache\"\n   ~ under the License.\n   -->\n \n+A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n \n-To use this Apache Druid extension, make sure to [include](../../development/extensions.md#loading-extensions) `druid-redis-cache` extension.\n+Below are guidance and configuration options known to this module.\n \n-A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n+## Installation\n+\n+Use [pull-deps](../../operations/pull-deps.md) tool shipped with Druid to install this [extension](../../development/extensions.md#community-extensions) on broker, historical and middle manager nodes.\n \n-Below are the configuration options known to this module.\n+```", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5ODY4OA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469198688", "bodyText": "Please rename this e to ignored.", "author": "asdf2014", "createdAt": "2020-08-12T11:46:42Z", "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisClusterCache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import redis.clients.jedis.JedisCluster;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class RedisClusterCache extends AbstractRedisCache\n+{\n+  private JedisCluster cluster;\n+\n+  RedisClusterCache(JedisCluster cluster, RedisCacheConfig config)\n+  {\n+    super(config);\n+    this.cluster = cluster;\n+  }\n+\n+  @Override\n+  protected byte[] getFromRedis(byte[] key)\n+  {\n+    return cluster.get(key);\n+  }\n+\n+  @Override\n+  protected void putToRedis(byte[] key, byte[] value, RedisCacheConfig.DurationConfig expiration)\n+  {\n+    cluster.setex(key, (int) expiration.getSeconds(), value);\n+  }\n+\n+  @Override\n+  protected List<byte[]> mgetFromRedis(byte[]... keys)\n+  {\n+    return cluster.mget(keys);\n+  }\n+\n+  @Override\n+  protected void cleanup()\n+  {\n+    try {\n+      cluster.close();\n+    }\n+    catch (IOException e) {", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMDY2MQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469200661", "bodyText": "The fourth column Required should be filled with yes or no, not None.", "author": "asdf2014", "createdAt": "2020-08-12T11:50:52Z", "path": "docs/development/extensions-contrib/redis-cache.md", "diffHunk": "@@ -22,32 +22,85 @@ title: \"Druid Redis Cache\"\n   ~ under the License.\n   -->\n \n+A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n \n-To use this Apache Druid extension, make sure to [include](../../development/extensions.md#loading-extensions) `druid-redis-cache` extension.\n+Below are guidance and configuration options known to this module.\n \n-A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n+## Installation\n+\n+Use [pull-deps](../../operations/pull-deps.md) tool shipped with Druid to install this [extension](../../development/extensions.md#community-extensions) on broker, historical and middle manager nodes.\n \n-Below are the configuration options known to this module.\n+```\n+java -classpath \"druid_dir/lib/*\" org.apache.druid.cli.Main tools pull-deps -c org.apache.druid.extensions.contrib:druid-redis-cache:{VERSION}\n+```\n \n-Note that just adding these properties does not enable the cache. You still need to add the `druid.<process-type>.cache.useCache` and `druid.<process-type>.cache.populateCache` properties for the processes you want to enable the cache on as described in the [cache configuration docs](../../configuration/index.html#cache-configuration).\n+## Enabling\n+\n+To enable this extension after installation,\n \n-A possible configuration would be to keep the properties below in your `common.runtime.properties` file (present on all processes) and then add `druid.<nodetype>.cache.useCache` and `druid.<nodetype>.cache.populateCache` in the `runtime.properties` file of the process types you want to enable caching on.\n+1. [include](../../development/extensions.md#loading-extensions) this `druid-redis-cache` extension\n+2. to enable cache on broker nodes, follow [broker caching docs](../../configuration/index.html#broker-caching) to set related properties\n+3. to enable cache on historical nodes, follow [historical caching docs](../../configuration/index.html#historical-caching) to set related properties\n+4. to enable cache on middle manager nodes, follow [peon caching docs](../../configuration/index.html#peon-caching) to set related properties\n+5. set `druid.cache.type` to `redis`\n+6. add the following properties\n \n ## Configuration\n \n-|`common.runtime.properties`|Description|Default|Required|\n+### Cluster mode \n+\n+To utilize a redis cluster, following properties must be set.\n+\n+Note: some redis cloud service providers provide redis cluster service via a redis proxy, for these clusters, please follow the [Standalone mode](#standalone-mode) configuration below.\n+\n+| Properties |Description|Default|Required|\n+|--------------------|-----------|-------|--------|\n+|`druid.cache.cluster.nodes`| Redis nodes in a cluster, represented in comma separated string. See example below | None | yes |\n+|`druid.cache.cluster.maxRedirection`| Max retry count | 5 | None |", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTExNQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469201115", "bodyText": "Is it really necessary to delete loadList?", "author": "asdf2014", "createdAt": "2020-08-12T11:51:51Z", "path": "website/.spelling", "diffHunk": "@@ -552,7 +552,8 @@ defaultMetrics.json\n namespacePrefix\n src\n  - ../docs/development/extensions-contrib/redis-cache.md\n-loadList", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzOTIwMA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469639200", "bodyText": "loadList is not referenced in the doc, so it's useless", "author": "FrankChen021", "createdAt": "2020-08-13T01:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyNzA2OA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469727068", "bodyText": "Indeed, there is no loadList in this document, but it still exists in other documents. We can adjust the position of loadList in the .spelling file, but it is recommended to keep it.", "author": "asdf2014", "createdAt": "2020-08-13T06:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2MzE5Nw==", "url": "https://github.com/apache/druid/pull/10240#discussion_r470363197", "bodyText": "Is the loadList here a global configuration for all files ? I thought it was related to redis-cache.md doc only because it was below that file path.\nBTW, I checked all files, no loadList is used but druid.extensions.loadList", "author": "FrankChen021", "createdAt": "2020-08-14T01:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDE0NQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r470380145", "bodyText": "The loadList should be placed elsewhere in the .spelling file, not under the redis-cache.md document. Also, loadList is used by other document as a single word. I guess you may have missed the document docs/configuration/index.md. So I recommend adjusting the position of loadList in the .spelling file instead of deleting it.", "author": "asdf2014", "createdAt": "2020-08-14T02:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MjQwNw==", "url": "https://github.com/apache/druid/pull/10240#discussion_r470542407", "bodyText": "Ah I see. I misunderstood the rules in this .spelling file", "author": "FrankChen021", "createdAt": "2020-08-14T10:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMjcxNQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469202715", "bodyText": "This instance of MockJedisPool is useless, please delete it.", "author": "asdf2014", "createdAt": "2020-08-12T11:55:10Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwNDE5NQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469204195", "bodyText": "I believe that port should be passed in instead of host.", "author": "asdf2014", "createdAt": "2020-08-12T11:58:15Z", "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.druid.java.util.common.IAE;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisCluster;\n+import redis.clients.jedis.JedisPool;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RedisCacheFactory\n+{\n+  public static Cache create(final RedisCacheConfig config)\n+  {\n+    if (config.getCluster() != null && StringUtils.isNotBlank(config.getCluster().getNodes())) {\n+\n+      Set<HostAndPort> nodes = Arrays.stream(config.getCluster().getNodes().split(\",\"))\n+                                     .map(String::trim)\n+                                     .filter(StringUtils::isNotBlank)\n+                                     .map(host -> {\n+                                       int index = host.indexOf(':');\n+                                       if (index <= 0 || index == host.length()) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: %s\", host);\n+                                       }\n+\n+                                       int port;\n+                                       try {\n+                                         port = Integer.parseInt(host.substring(index + 1));\n+                                       }\n+                                       catch (NumberFormatException e) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);\n+                                       }\n+                                       if (port <= 0 || port > 65535) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzOTE0Mw==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469639143", "bodyText": "host here contains the host name and port. I think the variable name is a little bit ambiguous, it should be changed to hostAndPort to make it clear.", "author": "FrankChen021", "createdAt": "2020-08-13T01:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwNDE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2ODAxNQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469668015", "bodyText": "SGTM", "author": "asdf2014", "createdAt": "2020-08-13T02:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwNDE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwODM4Ng==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469208386", "bodyText": "There is still a difference between connectionTimeout and soTimeout. If possible, please extend the soTimeout parameter.", "author": "asdf2014", "createdAt": "2020-08-12T12:06:53Z", "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.druid.java.util.common.IAE;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisCluster;\n+import redis.clients.jedis.JedisPool;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RedisCacheFactory\n+{\n+  public static Cache create(final RedisCacheConfig config)\n+  {\n+    if (config.getCluster() != null && StringUtils.isNotBlank(config.getCluster().getNodes())) {\n+\n+      Set<HostAndPort> nodes = Arrays.stream(config.getCluster().getNodes().split(\",\"))\n+                                     .map(String::trim)\n+                                     .filter(StringUtils::isNotBlank)\n+                                     .map(host -> {\n+                                       int index = host.indexOf(':');\n+                                       if (index <= 0 || index == host.length()) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: %s\", host);\n+                                       }\n+\n+                                       int port;\n+                                       try {\n+                                         port = Integer.parseInt(host.substring(index + 1));\n+                                       }\n+                                       catch (NumberFormatException e) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);\n+                                       }\n+                                       if (port <= 0 || port > 65535) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);\n+                                       }\n+\n+                                       return new HostAndPort(host.substring(0, index), port);\n+                                     }).collect(Collectors.toSet());\n+\n+      JedisPoolConfig poolConfig = new JedisPoolConfig();\n+      poolConfig.setMaxTotal(config.getMaxTotalConnections());\n+      poolConfig.setMaxIdle(config.getMaxIdleConnections());\n+      poolConfig.setMinIdle(config.getMinIdleConnections());\n+\n+      JedisCluster cluster;\n+      if (StringUtils.isNotBlank(config.getPassword())) {\n+        cluster = new JedisCluster(\n+            nodes,\n+            config.getTimeout().getMillisecondsAsInt(),\n+            config.getTimeout().getMillisecondsAsInt(),", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1Mjg5NA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469652894", "bodyText": "Yes, connection timeout and read timeout are different. But\n\nthe internal implementation of Jedis takes timeout for both connection timeout and read timeout.\nthe widely used Spring Redis also provides only one configurable timeout parameter for both connection timeout and read timeout.\n\nSo, currently I think it's acceptable to use one properties for both two parameters. I will update the doc to clarify that timeout property is for both connecting and reading.", "author": "FrankChen021", "createdAt": "2020-08-13T02:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwODM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2ODA3NQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469668075", "bodyText": "SGTM, thanks.", "author": "asdf2014", "createdAt": "2020-08-13T02:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwODM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyMzM0Mw==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469223343", "bodyText": "We need to pay attention to security and avoid exposing password information. For example, we can consider adding @JsonIgnore annotation.", "author": "asdf2014", "createdAt": "2020-08-12T12:30:44Z", "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheConfig.java", "diffHunk": "@@ -83,4 +178,19 @@ public int getMinIdleConnections()\n   {\n     return minIdleConnections;\n   }\n+\n+  public RedisClusterConfig getCluster()\n+  {\n+    return cluster;\n+  }\n+\n+  public String getPassword()", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNzc0OQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469227749", "bodyText": "The second judgment should be to avoid the lack of port. For example, 127.0.0.1:. I think it should be changed to index == host.length() - 1 instead of index == host.length().", "author": "asdf2014", "createdAt": "2020-08-12T12:37:58Z", "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.druid.java.util.common.IAE;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisCluster;\n+import redis.clients.jedis.JedisPool;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RedisCacheFactory\n+{\n+  public static Cache create(final RedisCacheConfig config)\n+  {\n+    if (config.getCluster() != null && StringUtils.isNotBlank(config.getCluster().getNodes())) {\n+\n+      Set<HostAndPort> nodes = Arrays.stream(config.getCluster().getNodes().split(\",\"))\n+                                     .map(String::trim)\n+                                     .filter(StringUtils::isNotBlank)\n+                                     .map(host -> {\n+                                       int index = host.indexOf(':');\n+                                       if (index <= 0 || index == host.length()) {", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0NDM1NQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469644355", "bodyText": "If port is not provided, the following substring call returns an empty string which causes the parseInt throw NumberFormatException.\nThere's a test case guarding this edge case whose name will be renamed to testClusterLackOfPort to be more clear in the following commit.", "author": "FrankChen021", "createdAt": "2020-08-13T01:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNzc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2OTM4NA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469669384", "bodyText": "Emm.. The maximum value returned by the String#indexOf method is String#length - 1, which makes the second judgment condition index == host.length() meaningless. In addition, judging by normal program logic is clearer and more efficient than judging by throwing an exception.", "author": "asdf2014", "createdAt": "2020-08-13T03:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNzc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTA5Ng==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469239096", "bodyText": "Emm.. Generally, we don't recommend using Sets.newHashSet to create HashSet instances, and we hope to create them directly through new. In addition, it may be more appropriate to use Collections.singleton here.", "author": "asdf2014", "createdAt": "2020-08-12T12:58:01Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjM4MQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469246381", "bodyText": "FYI, https://github.com/apache/druid/blob/master/codestyle/druid-forbidden-apis.txt#L19", "author": "asdf2014", "createdAt": "2020-08-12T13:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDg1MA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469240850", "bodyText": "Let's use the existing tool method here: StringUtils.encodeBase64String.", "author": "asdf2014", "createdAt": "2020-08-12T13:00:37Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))\n+    {\n+      Map<String, byte[]> cacheStorage = new HashMap<>();\n+\n+      @Override\n+      public String setex(final byte[] key, final int seconds, final byte[] value)\n+      {\n+        cacheStorage.put(Base64.getEncoder().encodeToString(key), value);\n+        return null;\n+      }\n+\n+      @Override\n+      public byte[] get(final byte[] key)\n+      {\n+        return cacheStorage.get(Base64.getEncoder().encodeToString(key));", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTA3Nw==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469241077", "bodyText": "Let's use the existing tool method here: StringUtils.encodeBase64String.", "author": "asdf2014", "createdAt": "2020-08-12T13:01:01Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))\n+    {\n+      Map<String, byte[]> cacheStorage = new HashMap<>();\n+\n+      @Override\n+      public String setex(final byte[] key, final int seconds, final byte[] value)\n+      {\n+        cacheStorage.put(Base64.getEncoder().encodeToString(key), value);", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTE0OA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469241148", "bodyText": "Let's use the existing tool method here: StringUtils.encodeBase64String.", "author": "asdf2014", "createdAt": "2020-08-12T13:01:07Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))\n+    {\n+      Map<String, byte[]> cacheStorage = new HashMap<>();\n+\n+      @Override\n+      public String setex(final byte[] key, final int seconds, final byte[] value)\n+      {\n+        cacheStorage.put(Base64.getEncoder().encodeToString(key), value);\n+        return null;\n+      }\n+\n+      @Override\n+      public byte[] get(final byte[] key)\n+      {\n+        return cacheStorage.get(Base64.getEncoder().encodeToString(key));\n+      }\n+\n+      @Override\n+      public List<byte[]> mget(final byte[]... keys)\n+      {\n+        List<byte[]> ret = new ArrayList<>();\n+        for (byte[] key : keys) {\n+          String k = Base64.getEncoder().encodeToString(key);", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDMzMg==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469244332", "bodyText": "Let's write it as \"PT2S\".", "author": "asdf2014", "createdAt": "2020-08-12T13:06:17Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisStandaloneCacheTest.java", "diffHunk": "@@ -41,24 +42,24 @@\n import java.util.Map;\n import java.util.UUID;\n \n-public class RedisCacheTest\n+public class RedisStandaloneCacheTest\n {\n   private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n   private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n \n-  private RedisCache cache;\n+  private RedisStandaloneCache cache;\n   private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n   {\n     @Override\n-    public int getTimeout()\n+    public DurationConfig getTimeout()\n     {\n-      return 10;\n+      return new DurationConfig(2000);", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDQ0Mg==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469244442", "bodyText": "Let's write it as \"PT2S\".", "author": "asdf2014", "createdAt": "2020-08-12T13:06:26Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODAyNA==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469248024", "bodyText": "The version here does not need to be specified, it will be automatically inherited from the parent module. The others are the same.", "author": "asdf2014", "createdAt": "2020-08-12T13:12:05Z", "path": "extensions-contrib/redis-cache/pom.xml", "diffHunk": "@@ -78,6 +78,36 @@\n             <artifactId>jackson-databind</artifactId>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-compress</artifactId>\n+            <version>1.19</version>", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MTg5Mw==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469251893", "bodyText": "Please update the address to https://github.com/redis/redis by the way.", "author": "asdf2014", "createdAt": "2020-08-12T13:18:08Z", "path": "docs/development/extensions-contrib/redis-cache.md", "diffHunk": "@@ -22,32 +22,85 @@ title: \"Druid Redis Cache\"\n   ~ under the License.\n   -->\n \n+A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzQwOQ==", "url": "https://github.com/apache/druid/pull/10240#discussion_r469267409", "bodyText": "nit: Adding a space in the middle of \\\"port\\\":6379 will satisfy the JSON formatting requirements.", "author": "asdf2014", "createdAt": "2020-08-12T13:40:46Z", "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisStandaloneCacheTest.java", "diffHunk": "@@ -82,20 +83,25 @@ public String psetex(byte[] key, long milliseconds, byte[] value)\n       }\n     });\n \n-    cache = RedisCache.create(pool, cacheConfig);\n+    cache = new RedisStandaloneCache(pool, cacheConfig);\n   }\n \n   @Test\n   public void testBasicInjection() throws Exception\n   {\n-    final RedisCacheConfig config = new RedisCacheConfig();\n+    String json = \"{ \\\"host\\\": \\\"localhost\\\", \\\"port\\\":6379, \\\"expiration\\\": 3600}\";", "originalCommit": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0420d292aa7bd8978bee33b6052004d0f87c262", "url": "https://github.com/apache/druid/commit/a0420d292aa7bd8978bee33b6052004d0f87c262", "message": "resolve review comments", "committedDate": "2020-08-14T12:22:44Z", "type": "commit"}]}