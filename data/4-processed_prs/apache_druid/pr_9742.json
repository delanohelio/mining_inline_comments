{"pr_number": 9742, "pr_title": "Adjust string comparators used for ingestion", "pr_createdAt": "2020-04-22T04:00:34Z", "pr_url": "https://github.com/apache/druid/pull/9742", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "f74daa571ad877a9e072168d4496f537d2c5c8bf", "url": "https://github.com/apache/druid/commit/f74daa571ad877a9e072168d4496f537d2c5c8bf", "message": "Adjust string comparators used for ingestion", "committedDate": "2020-04-24T00:16:48Z", "type": "commit"}, {"oid": "f74daa571ad877a9e072168d4496f537d2c5c8bf", "url": "https://github.com/apache/druid/commit/f74daa571ad877a9e072168d4496f537d2c5c8bf", "message": "Adjust string comparators used for ingestion", "committedDate": "2020-04-24T00:16:48Z", "type": "forcePushed"}, {"oid": "841c55d01a5896e8922a62f803c990e18b15a6ae", "url": "https://github.com/apache/druid/commit/841c55d01a5896e8922a62f803c990e18b15a6ae", "message": "Small tweak", "committedDate": "2020-04-24T00:22:54Z", "type": "commit"}, {"oid": "79cb14f3d1c1cdc74d34cff20682fd9ca185b32f", "url": "https://github.com/apache/druid/commit/79cb14f3d1c1cdc74d34cff20682fd9ca185b32f", "message": "Fix inspection, more javadocs", "committedDate": "2020-04-24T01:34:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NTA0OQ==", "url": "https://github.com/apache/druid/pull/9742#discussion_r414295049", "bodyText": "Thanks for adding this comment \ud83d\udc4d, would it also be worth adding the implications of this, e.g. it can result in imperfect rollup?", "author": "clintropolis", "createdAt": "2020-04-24T05:04:31Z", "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandler.java", "diffHunk": "@@ -122,6 +122,10 @@ DimensionMergerV9 makeMerger(\n    * Returns a comparator that knows how to compare {@link ColumnValueSelector} of the assumed dimension type,\n    * corresponding to this DimensionHandler. E. g. {@link StringDimensionHandler} returns a comparator, that compares\n    * {@link ColumnValueSelector}s as {@link DimensionSelector}s.\n+   *\n+   * The comparison rules used by this method should match the rules used by", "originalCommit": "79cb14f3d1c1cdc74d34cff20682fd9ca185b32f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NDcxMw==", "url": "https://github.com/apache/druid/pull/9742#discussion_r414874713", "bodyText": "I added a note about imperfect rollup to these javadocs", "author": "jon-wei", "createdAt": "2020-04-24T21:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NTA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0NTYyNg==", "url": "https://github.com/apache/druid/pull/9742#discussion_r414845626", "bodyText": "Hmm, this sort seems to behave quite a bit differently than the intended function of the previous sort; this one ordering by row length then lexicographically element by element, while the previous ordering lexicographically element by element then by length.\n[\"a\", \"b\"],\n[\"a\", \"c\"],\n[\"d\", \"e\"],\n[\"a\", \"b\", \"c\"]\n\ncompared to\n[\"a\", \"b\"],\n[\"a\", \"b\", \"c\"],\n[\"a\", \"c\"],\n[\"d\", \"e\"]\n\nIt might be more prudent to adjust the other sort to be more like this one is intended to be, though I imagine in practice that most of the time this doesn't make much difference except when all the times are the same (so less query granularity) and this is the prominent ordering column, and even then might not make much difference in practice, so don't make this change probably if it is a major hassle and instead we just put in release notes that there is a behavior change.", "author": "clintropolis", "createdAt": "2020-04-24T20:31:57Z", "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionHandler.java", "diffHunk": "@@ -33,61 +33,44 @@\n \n public class StringDimensionHandler implements DimensionHandler<Integer, int[], String>\n {\n-\n   /**\n-   * Compares {@link IndexedInts} lexicographically, with the exception that if a row contains only zeros (that's the\n-   * index of null) at all positions, it is considered \"null\" as a whole and is \"less\" than any \"non-null\" row. Empty\n-   * row (size is zero) is also considered \"null\".\n-   *\n-   * The implementation is a bit complicated because it tries to check each position of both rows only once.\n+   * This comparator uses the following rules:\n+   * - If the value arrays have different lengths, the shorter value array is considered smaller\n+   *   - The single exception to this is null and the empty list, which are considered equal\n+   * - If the value arrays are the same length, compare value by value until a difference is reached\n    */\n   private static final Comparator<ColumnValueSelector> DIMENSION_SELECTOR_COMPARATOR = (s1, s2) -> {\n     IndexedInts row1 = getRow(s1);\n     IndexedInts row2 = getRow(s2);\n     int len1 = row1.size();\n     int len2 = row2.size();\n-    boolean row1IsNull = true;\n-    boolean row2IsNull = true;\n-    for (int i = 0; i < Math.min(len1, len2); i++) {\n-      int v1 = row1.get(i);\n-      row1IsNull &= v1 == 0;\n-      int v2 = row2.get(i);\n-      row2IsNull &= v2 == 0;\n-      int valueDiff = Integer.compare(v1, v2);\n-      if (valueDiff != 0) {\n-        return valueDiff;\n-      }\n-    }\n-    //noinspection SubtractionInCompareTo -- substraction is safe here, because lengths or rows are small numbers.\n-    int lenDiff = len1 - len2;\n-    if (lenDiff == 0) {\n-      return 0;\n-    } else {\n-      if (!row1IsNull || !row2IsNull) {\n-        return lenDiff;\n-      } else {\n-        return compareRestNulls(row1, len1, row2, len2);\n+    int retVal = Integer.compare(len1, len2);\n+    int valsIndex = 0;\n+\n+    if (retVal != 0) {", "originalCommit": "79cb14f3d1c1cdc74d34cff20682fd9ca185b32f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTMzMA==", "url": "https://github.com/apache/druid/pull/9742#discussion_r414875330", "bodyText": "Good point, I've adjusted both comparators to follow the rules described here: https://github.com/apache/druid/pull/9742/files#diff-4c87c650e139d3889184df880b97ff4aR37", "author": "jon-wei", "createdAt": "2020-04-24T21:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0NTYyNg=="}], "type": "inlineReview"}, {"oid": "d785f21542ac294c46d5e72705cfb1d1afb22a90", "url": "https://github.com/apache/druid/commit/d785f21542ac294c46d5e72705cfb1d1afb22a90", "message": "Address PR comment", "committedDate": "2020-04-24T21:28:30Z", "type": "commit"}, {"oid": "23a89ee910f7a84281dbe4800a90cfc6b8a54538", "url": "https://github.com/apache/druid/commit/23a89ee910f7a84281dbe4800a90cfc6b8a54538", "message": "Add rollup comment", "committedDate": "2020-04-24T21:30:21Z", "type": "commit"}, {"oid": "88403ca8955abbae37a5cf94c0b2b31c013ca844", "url": "https://github.com/apache/druid/commit/88403ca8955abbae37a5cf94c0b2b31c013ca844", "message": "Add ordering test", "committedDate": "2020-04-25T01:07:05Z", "type": "commit"}, {"oid": "13b60c0eb4e7567b4ffb56486dfb00f7e15fa189", "url": "https://github.com/apache/druid/commit/13b60c0eb4e7567b4ffb56486dfb00f7e15fa189", "message": "Fix IncrementaIndexRowCompTest", "committedDate": "2020-04-25T04:17:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyOTY3MA==", "url": "https://github.com/apache/druid/pull/9742#discussion_r416029670", "bodyText": "@jon-wei Should [1] and [1, null] not be equivalent?", "author": "suneet-s", "createdAt": "2020-04-27T17:59:05Z", "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java", "diffHunk": "@@ -399,23 +399,42 @@ public int compareUnsortedEncodedKeyComponents(int[] lhs, int[] rhs)\n     int lhsLen = lhs.length;\n     int rhsLen = rhs.length;\n \n-    int retVal = Ints.compare(lhsLen, rhsLen);\n+    int lenCompareResult = Ints.compare(lhsLen, rhsLen);\n+    if (lenCompareResult != 0) {\n+      // if the values don't have the same length, check if we're comparing [] and [null], which are equivalent", "originalCommit": "13b60c0eb4e7567b4ffb56486dfb00f7e15fa189", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}