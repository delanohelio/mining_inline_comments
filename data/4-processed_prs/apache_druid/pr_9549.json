{"pr_number": 9549, "pr_title": "Add view values to lookup actions menu", "pr_createdAt": "2020-03-20T21:10:21Z", "pr_url": "https://github.com/apache/druid/pull/9549", "timeline": [{"oid": "45e65d6efc63a37bc4097db1062f1b36b44f2aaf", "url": "https://github.com/apache/druid/commit/45e65d6efc63a37bc4097db1062f1b36b44f2aaf", "message": "add test, add query", "committedDate": "2020-03-20T21:06:43Z", "type": "commit"}, {"oid": "80afefc82aea72cd2034ba86d56b65c514edcc2e", "url": "https://github.com/apache/druid/commit/80afefc82aea72cd2034ba86d56b65c514edcc2e", "message": "jest -u", "committedDate": "2020-03-20T21:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyNzg5MA==", "url": "https://github.com/apache/druid/pull/9549#discussion_r396827890", "bodyText": "A lookup can have lots and lots of values in it, also what if the columns change? I would recommend doing SELECT k, v instead of * and also adding a LIMIT 5000 or something", "author": "vogievetsky", "createdAt": "2020-03-23T23:54:00Z", "path": "web-console/src/components/lookup-values-table/lookup-values-table.tsx", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+import ReactTable from 'react-table';\n+\n+import { queryDruidSql, QueryManager } from '../../utils';\n+import { Loader } from '../loader/loader';\n+\n+import './lookup-values-table.scss';\n+\n+interface LookupRow {\n+  k: string;\n+  v: string;\n+}\n+\n+export interface LookupColumnsTableProps {\n+  lookupId: string;\n+  downloadFilename?: string;\n+}\n+\n+export interface LookupColumnsTableState {\n+  columns?: LookupRow[];\n+  loading: boolean;\n+  error?: string;\n+}\n+\n+export class LookupValuesTable extends React.PureComponent<\n+  LookupColumnsTableProps,\n+  LookupColumnsTableState\n+> {\n+  private LookupColumnsQueryManager: QueryManager<null, LookupRow[]>;\n+\n+  constructor(props: LookupColumnsTableProps, context: any) {\n+    super(props, context);\n+    this.state = {\n+      loading: true,\n+    };\n+\n+    this.LookupColumnsQueryManager = new QueryManager({\n+      processQuery: async () => {\n+        const { lookupId } = this.props;\n+\n+        const resp = await queryDruidSql<LookupRow>({\n+          query: `SELECT * FROM lookup.${lookupId}`,", "originalCommit": "80afefc82aea72cd2034ba86d56b65c514edcc2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyODAwMQ==", "url": "https://github.com/apache/druid/pull/9549#discussion_r396828001", "bodyText": "why is this map needed?", "author": "vogievetsky", "createdAt": "2020-03-23T23:54:27Z", "path": "web-console/src/components/lookup-values-table/lookup-values-table.tsx", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+import ReactTable from 'react-table';\n+\n+import { queryDruidSql, QueryManager } from '../../utils';\n+import { Loader } from '../loader/loader';\n+\n+import './lookup-values-table.scss';\n+\n+interface LookupRow {\n+  k: string;\n+  v: string;\n+}\n+\n+export interface LookupColumnsTableProps {\n+  lookupId: string;\n+  downloadFilename?: string;\n+}\n+\n+export interface LookupColumnsTableState {\n+  columns?: LookupRow[];\n+  loading: boolean;\n+  error?: string;\n+}\n+\n+export class LookupValuesTable extends React.PureComponent<\n+  LookupColumnsTableProps,\n+  LookupColumnsTableState\n+> {\n+  private LookupColumnsQueryManager: QueryManager<null, LookupRow[]>;\n+\n+  constructor(props: LookupColumnsTableProps, context: any) {\n+    super(props, context);\n+    this.state = {\n+      loading: true,\n+    };\n+\n+    this.LookupColumnsQueryManager = new QueryManager({\n+      processQuery: async () => {\n+        const { lookupId } = this.props;\n+\n+        const resp = await queryDruidSql<LookupRow>({\n+          query: `SELECT * FROM lookup.${lookupId}`,\n+        });\n+\n+        return resp.map(object => {", "originalCommit": "80afefc82aea72cd2034ba86d56b65c514edcc2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cec03b41cbebdc7ee89fed78dd42ccfc1b03c9d1", "url": "https://github.com/apache/druid/commit/cec03b41cbebdc7ee89fed78dd42ccfc1b03c9d1", "message": "add limit, explicitly get columns, remoove map", "committedDate": "2020-03-24T00:44:28Z", "type": "commit"}]}