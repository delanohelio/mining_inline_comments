{"pr_number": 10438, "pr_title": "Web console: Display compaction status", "pr_createdAt": "2020-09-26T00:53:37Z", "pr_url": "https://github.com/apache/druid/pull/10438", "timeline": [{"oid": "de72bb1cf4ede1588fcbcc5d0af6539ce85f6597", "url": "https://github.com/apache/druid/commit/de72bb1cf4ede1588fcbcc5d0af6539ce85f6597", "message": "init compaction status", "committedDate": "2020-09-24T01:40:38Z", "type": "commit"}, {"oid": "55cfcb14dbc0ebde040dd5507257de1babb33d85", "url": "https://github.com/apache/druid/commit/55cfcb14dbc0ebde040dd5507257de1babb33d85", "message": "% compacted", "committedDate": "2020-09-25T15:00:13Z", "type": "commit"}, {"oid": "bed21585c041f82df9477b3fdc889e4f1abbcada", "url": "https://github.com/apache/druid/commit/bed21585c041f82df9477b3fdc889e4f1abbcada", "message": "final UI tweaks", "committedDate": "2020-09-26T00:35:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwNTM2Mg==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496105362", "bodyText": "there is no logical change here... just wanted to have less nesting", "author": "vogievetsky", "createdAt": "2020-09-28T17:07:11Z", "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -80,12 +80,11 @@ export const JsonInput = React.memo(function JsonInput(props: JsonInputProps) {\n   const aceEditor = useRef<Editor | undefined>();\n \n   useEffect(() => {\n-    if (!deepEqual(value, internalValue.value)) {\n-      setInternalValue({\n-        value,\n-        stringified: stringifyJson(value),\n-      });\n-    }\n+    if (deepEqual(value, internalValue.value)) return;\n+    setInternalValue({\n+      value,\n+      stringified: stringifyJson(value),\n+    });", "originalCommit": "bed21585c041f82df9477b3fdc889e4f1abbcada", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NzY0Mg==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496187642", "bodyText": "What do you think about adding another snapshot test that sets the new altExtra prop?", "author": "ccaominh", "createdAt": "2020-09-28T19:38:39Z", "path": "web-console/src/components/more-button/more-button.tsx", "diffHunk": "@@ -18,14 +18,19 @@\n \n import { Button, Menu, Popover, Position } from '@blueprintjs/core';\n import { IconNames } from '@blueprintjs/icons';\n-import React from 'react';\n+import React, { useState } from 'react';\n+\n+type OpenState = 'open' | 'alt-open';\n \n export interface MoreButtonProps {\n-  children: React.ReactNode;\n+  children: React.ReactNode | React.ReactNode[];\n+  altExtra?: React.ReactNode;", "originalCommit": "bed21585c041f82df9477b3fdc889e4f1abbcada", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4ODUyNw==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496188527", "bodyText": "Missing unit test in general.spec.ts", "author": "ccaominh", "createdAt": "2020-09-28T19:40:20Z", "path": "web-console/src/utils/general.tsx", "diffHunk": "@@ -231,6 +231,10 @@ export function formatMegabytes(n: number): string {\n   return numeral(n / 1048576).format('0,0.0');\n }\n \n+export function formatPercent(n: number): string {\n+  return (n * 100).toFixed(2) + '%';\n+}", "originalCommit": "bed21585c041f82df9477b3fdc889e4f1abbcada", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MzM3Mg==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496283372", "bodyText": "done", "author": "vogievetsky", "createdAt": "2020-09-28T23:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4ODUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4OTIyNw==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496189227", "bodyText": "May be worth adding unit tests for all these new utility methods", "author": "ccaominh", "createdAt": "2020-09-28T19:41:47Z", "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -131,9 +132,70 @@ function twoLines(line1: string, line2: string) {\n   );\n }\n \n+function progress(done: number, awaiting: number): number {\n+  const d = done + awaiting;\n+  if (!d) return 0;\n+  return done / d;\n+}\n+\n+function capitalizeFirst(str: string): string {\n+  return str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n+}", "originalCommit": "bed21585c041f82df9477b3fdc889e4f1abbcada", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MzEyNw==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496283127", "bodyText": "done", "author": "vogievetsky", "createdAt": "2020-09-28T23:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4OTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MDMwMQ==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496190301", "bodyText": "Currently this is hard to test. The autocompaction E2E test could possibly be modified to use this instead of calling the trigger compaction API directly.", "author": "ccaominh", "createdAt": "2020-09-28T19:43:39Z", "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -552,7 +634,32 @@ GROUP BY 1`;\n     );\n   }\n \n-  private saveRules = async (datasource: string, rules: any[], comment: string) => {\n+  renderForceCompactAction() {\n+    const { showForceCompact } = this.state;\n+    if (!showForceCompact) return;\n+\n+    return (\n+      <AsyncActionDialog\n+        action={async () => {\n+          const resp = await axios.post(`/druid/coordinator/v1/compaction/compact`, {});\n+          return resp.data;\n+        }}\n+        confirmButtonText=\"Force compaction run\"\n+        successText=\"Out of band compaction run has been initiated\"\n+        failText=\"Could not force compaction\"\n+        intent={Intent.DANGER}\n+        onClose={() => {\n+          this.setState({ showForceCompact: false });\n+        }}\n+      >\n+        <p>Are you sure you want to force a compaction run?</p>\n+        <p>This functionality only exists for debugging and testing reasons.</p>\n+        <p>If you are running it in production you are doing something wrong.</p>\n+      </AsyncActionDialog>", "originalCommit": "bed21585c041f82df9477b3fdc889e4f1abbcada", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI4MzMwNQ==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496283305", "bodyText": "I am \ud83d\udc4d to modify the e2e test", "author": "vogievetsky", "createdAt": "2020-09-28T23:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDA2Nw==", "url": "https://github.com/apache/druid/pull/10438#discussion_r499094067", "bodyText": "I took a stab at modifying the autocompaction E2E test to use the new trigger compaction UI: #10469", "author": "ccaominh", "createdAt": "2020-10-03T00:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5MDMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNTMyNQ==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496205325", "bodyText": "This will be hard to unit test since it requires either a real or mock druid cluster. One option to make it more testable is to restructure the code to inject something like a compaction manager dependency via the DatasourcesView constructor. That way, the unit tests can have a compaction manager mock where the API responses are stubbed. #9956 used this approach to test SegmentTimeline with a mock for QueryManager.", "author": "ccaominh", "createdAt": "2020-09-28T20:13:06Z", "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -329,18 +393,25 @@ GROUP BY 1`;\n         const rulesResp = await axios.get('/druid/coordinator/v1/rules');\n         const rules = rulesResp.data;\n \n-        const compactionResp = await axios.get('/druid/coordinator/v1/config/compaction');\n-        const compaction = lookupBy(\n-          compactionResp.data.compactionConfigs,\n-          (c: any) => c.dataSource,\n+        const compactionConfigsResp = await axios.get('/druid/coordinator/v1/config/compaction');\n+        const compactionConfigs = lookupBy(\n+          compactionConfigsResp.data.compactionConfigs || [],\n+          (c: CompactionConfig) => c.dataSource,\n+        );\n+\n+        const compactionStatusesResp = await axios.get('/druid/coordinator/v1/compaction/status');\n+        const compactionStatuses = lookupBy(\n+          compactionStatusesResp.data.latestStatus || [],\n+          (c: CompactionStatus) => c.dataSource,", "originalCommit": "bed21585c041f82df9477b3fdc889e4f1abbcada", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MDcwNg==", "url": "https://github.com/apache/druid/pull/10438#discussion_r496290706", "bodyText": "The testing refactor I suggested, could be fairly involved as it'd be good to add tests for the parts of the datasources view that are not being modified by this PR. Perhaps it'd be best to have a separate PR that has tests for all the parts.", "author": "ccaominh", "createdAt": "2020-09-28T23:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNTMyNQ=="}], "type": "inlineReview"}, {"oid": "82a2ca59f7faac1d9e4552be7dcda92718fb72d1", "url": "https://github.com/apache/druid/commit/82a2ca59f7faac1d9e4552be7dcda92718fb72d1", "message": "extracted utils, added tests", "committedDate": "2020-09-28T21:28:34Z", "type": "commit"}, {"oid": "abfb72397a7b7f07808c8ecf457b07a80c9558de", "url": "https://github.com/apache/druid/commit/abfb72397a7b7f07808c8ecf457b07a80c9558de", "message": "add tests to general foramt functions", "committedDate": "2020-09-28T22:42:04Z", "type": "commit"}]}