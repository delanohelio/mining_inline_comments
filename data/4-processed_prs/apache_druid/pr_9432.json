{"pr_number": 9432, "pr_title": "Web console: expose props for S3", "pr_createdAt": "2020-02-27T20:41:16Z", "pr_url": "https://github.com/apache/druid/pull/9432", "timeline": [{"oid": "45fc9aeb0ec876eceabb54e6ae1b86f19677a0d8", "url": "https://github.com/apache/druid/commit/45fc9aeb0ec876eceabb54e6ae1b86f19677a0d8", "message": "expose props for S3", "committedDate": "2020-02-27T20:39:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTI3Ng==", "url": "https://github.com/apache/druid/pull/9432#discussion_r385961276", "bodyText": "provided in which config?\nAlso default configuration -> access key used for deep storage?\nSame comment on line 1229", "author": "suneet-s", "createdAt": "2020-02-28T23:01:32Z", "path": "web-console/src/utils/ingestion-spec.tsx", "diffHunk": "@@ -1206,6 +1206,30 @@ export function getIoConfigFormFields(ingestionComboType: IngestionComboType): F\n             </>\n           ),\n         },\n+        {\n+          name: 'inputSource.properties.accessKeyId',\n+          label: 'Access key ID',\n+          type: 'string',\n+          placeholder: '(optional)',\n+          info: (\n+            <>\n+              <p>S3 access key for this S3 bucket.</p>\n+              <p>Setting this will override the default configuration provided in the config.</p>", "originalCommit": "45fc9aeb0ec876eceabb54e6ae1b86f19677a0d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNjAwMA==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386316000", "bodyText": "I don't think it has to be the deep storage one (as in you might now be using s3 for deepstorage) if I understand correctly it is just the key from the config that will be used if this is not set.", "author": "vogievetsky", "createdAt": "2020-03-02T10:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTM5MA==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386591390", "bodyText": "The defaults are the keys provided from the S3 credentials providers chain. See more information at : https://druid.apache.org/docs/latest/development/extensions-core/s3.html#s3-authentication-methods\nWhich may or may not be from configs (i.e. If Druid config file and Custom properties file are not set but the env variable are, then the credentials providers chain will use the env variable)", "author": "maytasm", "createdAt": "2020-03-02T19:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MTk3Nw==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386591977", "bodyText": "Maybe we can say:\nSetting this will override the value provided from the S3 credentials providers chain", "author": "maytasm", "createdAt": "2020-03-02T19:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTY3OQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r385961679", "bodyText": "Druid lets you specify these fields using PasswordProvider - so you can specify an environment variable instead of pasting in your access key in the ingestion spec. Can we do this through the console?", "author": "suneet-s", "createdAt": "2020-02-28T23:03:02Z", "path": "web-console/src/utils/ingestion-spec.tsx", "diffHunk": "@@ -1206,6 +1206,30 @@ export function getIoConfigFormFields(ingestionComboType: IngestionComboType): F\n             </>\n           ),\n         },\n+        {\n+          name: 'inputSource.properties.accessKeyId',\n+          label: 'Access key ID',\n+          type: 'string',\n+          placeholder: '(optional)',\n+          info: (\n+            <>\n+              <p>S3 access key for this S3 bucket.</p>\n+              <p>Setting this will override the default configuration provided in the config.</p>\n+            </>\n+          ),\n+        },\n+        {\n+          name: 'inputSource.properties.secretAccessKey',\n+          label: 'Secret access key',\n+          type: 'string',", "originalCommit": "45fc9aeb0ec876eceabb54e6ae1b86f19677a0d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNjg5OA==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386316898", "bodyText": "is there a way to specify inputSource.properties.secretAccessKey to be the inline thing but using a JSON object? Something like setting it to { \"type\": \"inline\", \"key\": \"...\" }?", "author": "vogievetsky", "createdAt": "2020-03-02T10:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU3Njk5Nw==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386576997", "bodyText": "^ I don't know exactly how this works, but @maytasm3 might...", "author": "suneet-s", "createdAt": "2020-03-02T18:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MzY4NQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386593685", "bodyText": "You can do by using the default password provider. Try { \"type\": \"default\", \"password\": \"...\" }.", "author": "jihoonson", "createdAt": "2020-03-02T19:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5Mzg5MA==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386593890", "bodyText": "If by inline you mean plain text then yes.\n        \"properties\": {\n            \"accessKeyId\": \"MMMMM\",\n            \"secretAccessKey\": \"mmmmm\"\n        },\n\nis the same as\n        \u201cproperties\u201d: {\n            \u201caccessKeyId\u201d: { \u201ctype\u201d: \u201cdefault\u201d, \u201cvariable\u201d: \u201cMMMMMM\u201d },\n            \u201csecretAccessKey\u201d: { \u201ctype\u201d: \u201cdefault\u201d, \u201cvariable\u201d: \u201cmmmm\u201d }\n        },\n\nThe only other type of Password Provider we currently support is environment.\nExample below:\n        \u201cproperties\u201d: {\n            \u201caccessKeyId\u201d: { \u201ctype\u201d: \u201cenvironment\u201d, \u201cvariable\u201d: \u201cACCESS_KEY_ENV\u201d },\n            \u201csecretAccessKey\u201d: { \u201ctype\u201d: \u201cenvironment\u201d, \u201cvariable\u201d: \u201cSECRET_KEY_ENV\u201d }\n        },", "author": "maytasm", "createdAt": "2020-03-02T19:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NDQ3Mw==", "url": "https://github.com/apache/druid/pull/9432#discussion_r386594473", "bodyText": "But, I think this should never be an available option in the web console because of the security purpose.", "author": "jihoonson", "createdAt": "2020-03-02T19:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MTY3OQ=="}], "type": "inlineReview"}, {"oid": "76748e7c9f3b75467bf2f9c3d4af9a63f7165ee3", "url": "https://github.com/apache/druid/commit/76748e7c9f3b75467bf2f9c3d4af9a63f7165ee3", "message": "added env inputs", "committedDate": "2020-03-08T07:13:31Z", "type": "commit"}, {"oid": "934bbd6155d9095fb57030d3b2d91b97ffb43da6", "url": "https://github.com/apache/druid/commit/934bbd6155d9095fb57030d3b2d91b97ffb43da6", "message": "merge master", "committedDate": "2020-03-17T19:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Mjk1OQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r393952959", "bodyText": "The name is different depending on the type of password provider. It's called variable for EnvironmentVariablePasswordProvider while it's called password for DefaultPasswordProvider.", "author": "jihoonson", "createdAt": "2020-03-17T20:34:31Z", "path": "web-console/src/utils/ingestion-spec.tsx", "diffHunk": "@@ -1226,6 +1226,75 @@ export function getIoConfigFormFields(ingestionComboType: IngestionComboType): F\n             </>\n           ),\n         },\n+        {\n+          name: 'inputSource.properties.accessKeyId.type',\n+          label: 'Access key ID type',\n+          type: 'string',\n+          suggestions: [undefined, 'environment', 'default'],\n+          info: (\n+            <>\n+              <p>S3 access key for this S3 bucket.</p>\n+              <p>Setting this will override the default configuration provided in the config.</p>\n+            </>\n+          ),\n+          adjustment: (ioConfig: IoConfig) => {\n+            return deepSet(\n+              ioConfig,\n+              'inputSource.properties.secretAccessKey.type',\n+              deepGet(ioConfig, 'inputSource.properties.accessKeyId.type'),\n+            );\n+          },\n+        },\n+        {\n+          name: 'inputSource.properties.accessKeyId.variable',", "originalCommit": "934bbd6155d9095fb57030d3b2d91b97ffb43da6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2MzIzOA==", "url": "https://github.com/apache/druid/pull/9432#discussion_r393963238", "bodyText": "oh I see, yup need to fix that. What about inputSource.properties.secretAccessKey.x ? same?", "author": "vogievetsky", "createdAt": "2020-03-17T20:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Mjk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4NTA1MQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r393985051", "bodyText": "yes. same for inputSource.properties.secretAccessKey.x", "author": "maytasm", "createdAt": "2020-03-17T21:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1Mjk1OQ=="}], "type": "inlineReview"}, {"oid": "408f2db234cea8fce9dc92a222e205126ce8df6d", "url": "https://github.com/apache/druid/commit/408f2db234cea8fce9dc92a222e205126ce8df6d", "message": "add scarry warning", "committedDate": "2020-03-17T20:44:41Z", "type": "commit"}, {"oid": "0375e971bc0e7c48732851df0655b546f9dfb851", "url": "https://github.com/apache/druid/commit/0375e971bc0e7c48732851df0655b546f9dfb851", "message": "use .password", "committedDate": "2020-03-17T21:32:00Z", "type": "commit"}, {"oid": "d3d30dfa1a99fabc57fa61921215a56ad9cf4732", "url": "https://github.com/apache/druid/commit/d3d30dfa1a99fabc57fa61921215a56ad9cf4732", "message": "put the warning front and center", "committedDate": "2020-03-17T23:05:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394021867", "bodyText": "Can we provide a recommendation on what a better alternative is (ie use the environment variable password provider instead)", "author": "suneet-s", "createdAt": "2020-03-17T23:08:39Z", "path": "web-console/src/views/load-data-view/load-data-view.tsx", "diffHunk": "@@ -1076,11 +1076,21 @@ export class LoadDataView extends React.PureComponent<LoadDataViewProps, LoadDat\n             <LearnMore href={getIngestionDocLink(spec)} />\n           </Callout>\n           {ingestionComboType ? (\n-            <AutoForm\n-              fields={getIoConfigFormFields(ingestionComboType)}\n-              model={ioConfig}\n-              onChange={c => this.updateSpecPreview(deepSet(spec, 'spec.ioConfig', c))}\n-            />\n+            <>\n+              <AutoForm\n+                fields={getIoConfigFormFields(ingestionComboType)}\n+                model={ioConfig}\n+                onChange={c => this.updateSpecPreview(deepSet(spec, 'spec.ioConfig', c))}\n+              />\n+              {deepGet(spec, 'spec.ioConfig.inputSource.properties.secretAccessKey.password') && (\n+                <FormGroup>\n+                  <Callout intent={Intent.WARNING}>\n+                    Inlining the access key into the ingestion spec is dangerous as it might appear\n+                    in server log files and can be seen by anyone accessing this console.", "originalCommit": "d3d30dfa1a99fabc57fa61921215a56ad9cf4732", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMjI2MQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394022261", "bodyText": "How would you word that message?", "author": "vogievetsky", "createdAt": "2020-03-17T23:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMjkzOA==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394022938", "bodyText": "@sthetland any suggestions here?", "author": "suneet-s", "createdAt": "2020-03-17T23:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMzA0Ng==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394023046", "bodyText": "That might be a maintenance headache as we add and remove PasswordProvider", "author": "maytasm", "createdAt": "2020-03-17T23:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTU2Ng==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394025566", "bodyText": "@maytasm3 are you worried that the environment password provider might go away in the future? Or that we might provide a better way in the future and this text will be out of sync.\nThe reason I thought of this was because if I landed on this page, and saw the warning as is - I'd feel like I was at a dead end without an idea of how to proceed", "author": "suneet-s", "createdAt": "2020-03-17T23:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNjQ5MA==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394026490", "bodyText": "@suneet-s Yes, that is correct. There is a drop down box above the field (\"secret key type\") that gives you other options. If you select that the warning will go away. I think that is user-friendly enough without recommendation\nI guess we still have to update that selection if we add and remove PasswordProvider too.", "author": "maytasm", "createdAt": "2020-03-17T23:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTA4Mg==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394029082", "bodyText": "Would something like this be future proof? ... maybe?\nWarning: This key will be visible to anyone accessing this console and may appear in server logs. For production scenarios, use of a more secure secret key type is strongly recommended.", "author": "sthetland", "createdAt": "2020-03-17T23:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTI1OQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394029259", "bodyText": "Would a good compromise be to say that - \"When running in production, you should pick a more secure secret key type from the drop down above\"\nThe little i thing next to the option can point to the relevant docs which we will keep up to date as we add/ remove password providers.", "author": "suneet-s", "createdAt": "2020-03-17T23:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwNTM5OQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394505399", "bodyText": "@suneet-s do you consider your comment as a blocker? Or can it be done in a follow-up?", "author": "jihoonson", "createdAt": "2020-03-18T17:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxOTU0OQ==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394519549", "bodyText": "@jihoonson I don't know what the apache rules are on what qualifies for a blocker. I think the UX isn't great if I see a big scary warning without a way to remediate. I like @sthetland's suggestion above. If there are committers who are ok with this, I'm not going to veto.", "author": "suneet-s", "createdAt": "2020-03-18T17:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMTg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMDYzNg==", "url": "https://github.com/apache/druid/pull/9432#discussion_r394520636", "bodyText": "Trying out github's multi-line suggestion \ud83e\udd1ewith Steve's suggested re-wording\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Inlining the access key into the ingestion spec is dangerous as it might appear\n          \n          \n            \n                                in server log files and can be seen by anyone accessing this console.\n          \n          \n            \n                                This key will be visible to anyone accessing this console and may appear in server logs. \n          \n          \n            \n                                For production scenarios, use of a more secure secret key type is strongly recommended.", "author": "suneet-s", "createdAt": "2020-03-18T17:29:29Z", "path": "web-console/src/views/load-data-view/load-data-view.tsx", "diffHunk": "@@ -1076,11 +1076,21 @@ export class LoadDataView extends React.PureComponent<LoadDataViewProps, LoadDat\n             <LearnMore href={getIngestionDocLink(spec)} />\n           </Callout>\n           {ingestionComboType ? (\n-            <AutoForm\n-              fields={getIoConfigFormFields(ingestionComboType)}\n-              model={ioConfig}\n-              onChange={c => this.updateSpecPreview(deepSet(spec, 'spec.ioConfig', c))}\n-            />\n+            <>\n+              <AutoForm\n+                fields={getIoConfigFormFields(ingestionComboType)}\n+                model={ioConfig}\n+                onChange={c => this.updateSpecPreview(deepSet(spec, 'spec.ioConfig', c))}\n+              />\n+              {deepGet(spec, 'spec.ioConfig.inputSource.properties.secretAccessKey.password') && (\n+                <FormGroup>\n+                  <Callout intent={Intent.WARNING}>\n+                    Inlining the access key into the ingestion spec is dangerous as it might appear\n+                    in server log files and can be seen by anyone accessing this console.", "originalCommit": "d3d30dfa1a99fabc57fa61921215a56ad9cf4732", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "14468d630d6bdebac4cf17eaa26ce658523eb4f8", "url": "https://github.com/apache/druid/commit/14468d630d6bdebac4cf17eaa26ce658523eb4f8", "message": "Update web-console/src/views/load-data-view/load-data-view.tsx\n\nCo-Authored-By: Suneet Saldanha <44787917+suneet-s@users.noreply.github.com>", "committedDate": "2020-03-18T17:34:35Z", "type": "commit"}, {"oid": "b2557fa2135dae21b88d1dff88af595fde94aa2c", "url": "https://github.com/apache/druid/commit/b2557fa2135dae21b88d1dff88af595fde94aa2c", "message": "let prettier rewrap the text", "committedDate": "2020-03-18T20:25:24Z", "type": "commit"}]}