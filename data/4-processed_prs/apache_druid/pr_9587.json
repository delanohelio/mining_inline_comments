{"pr_number": 9587, "pr_title": "Use auto-form for add an edit lookups", "pr_createdAt": "2020-03-30T20:48:26Z", "pr_url": "https://github.com/apache/druid/pull/9587", "timeline": [{"oid": "0038d0a4551ff5521c1dd0a23dd5d4a98c328e8e", "url": "https://github.com/apache/druid/commit/0038d0a4551ff5521c1dd0a23dd5d4a98c328e8e", "message": "use auto form", "committedDate": "2020-03-30T20:42:44Z", "type": "commit"}, {"oid": "4c3385b14dc889983a946b0aee94d09ab4de4b30", "url": "https://github.com/apache/druid/commit/4c3385b14dc889983a946b0aee94d09ab4de4b30", "message": "jest -u", "committedDate": "2020-03-30T20:50:33Z", "type": "commit"}, {"oid": "9a6d603e6ca9160a0d14d749013be11b4bddba0f", "url": "https://github.com/apache/druid/commit/9a6d603e6ca9160a0d14d749013be11b4bddba0f", "message": "fix unreachable statment", "committedDate": "2020-03-30T21:01:21Z", "type": "commit"}, {"oid": "0b068c34a4a69714ca80e0a5518dd7718c50a7b2", "url": "https://github.com/apache/druid/commit/0b068c34a4a69714ca80e0a5518dd7718c50a7b2", "message": "complete the owl", "committedDate": "2020-04-02T07:17:03Z", "type": "commit"}, {"oid": "56a5c86960890ba59f52378d019bd7254f9a61f8", "url": "https://github.com/apache/druid/commit/56a5c86960890ba59f52378d019bd7254f9a61f8", "message": "jest -u", "committedDate": "2020-04-06T18:12:18Z", "type": "commit"}, {"oid": "1ac504dc92aefaf2f6956ff4ce22874ff65b9e2f", "url": "https://github.com/apache/druid/commit/1ac504dc92aefaf2f6956ff4ce22874ff65b9e2f", "message": "remove changes to query-view", "committedDate": "2020-04-06T22:28:17Z", "type": "commit"}, {"oid": "7473a61f5fce10e64c80266ca7d4800af6c64b88", "url": "https://github.com/apache/druid/commit/7473a61f5fce10e64c80266ca7d4800af6c64b88", "message": "fix permissions", "committedDate": "2020-04-07T20:52:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNTM2Ng==", "url": "https://github.com/apache/druid/pull/9587#discussion_r405115366", "bodyText": "caps?", "author": "vogievetsky", "createdAt": "2020-04-07T21:10:55Z", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -124,34 +202,302 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n           }\n         />\n       </FormGroup>\n-\n-      <FormGroup className=\"lookup-label\" label=\"Spec:\" />\n-\n-      <AceEditor\n-        className=\"lookup-edit-dialog-textarea\"\n-        mode=\"hjson\"\n-        theme=\"solarized_dark\"\n-        onChange={(e: any) => onChange('lookupEditSpec', e)}\n-        fontSize={12}\n-        height=\"40vh\"\n-        width=\"auto\"\n-        showPrintMargin={false}\n-        showGutter={false}\n-        value={lookupSpec}\n-        editorProps={{ $blockScrolling: Infinity }}\n-        setOptions={{\n-          tabSize: 2,\n+      <AutoForm\n+        fields={[\n+          {\n+            name: 'type',\n+            type: 'string',\n+            suggestions: ['map', 'cachedNamespace'],\n+            adjustment: model => {\n+              if (\n+                model.type === 'map' &&\n+                model.extractionNamespace &&\n+                model.extractionNamespace.type\n+              ) {\n+                return model;\n+              }\n+              model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+              return model;\n+            },\n+          },\n+          {\n+            name: 'map',\n+            type: 'json',\n+            defined: model => {\n+              return model.type === 'map';\n+            },\n+          },\n+          {\n+            name: 'extractionNamespace.type',\n+            type: 'string',\n+            label: 'Globally cached lookup type',\n+            placeholder: 'uri',\n+            suggestions: ['uri', 'jdbc'],\n+            defined: model => model.type === 'cachedNamespace',\n+          },\n+          {\n+            name: 'extractionNamespace.uriPrefix',\n+            type: 'string',\n+            label: 'URI prefix',\n+            info:\n+              'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+            placeholder: 's3://bucket/some/key/prefix/',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri',\n+          },\n+          {\n+            name: 'extractionNamespace.fileRegex',\n+            type: 'string',\n+            label: 'File regex',\n+            placeholder: 'renames-[0-9]*\\\\.gz',\n+            info:\n+              'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.format',\n+            type: 'string',\n+            label: 'Format',\n+            defaultValue: 'csv',\n+            suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+            // todo needs info\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.columns',\n+            type: 'string-array',\n+            label: 'Columns',\n+            placeholder: `[\"key\", \"value\"]`,\n+            info: 'The list of columns in the csv file',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+            type: 'string',\n+            label: 'Key column',\n+            placeholder: 'Key',\n+            info: 'The name of the column containing the key',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+            type: 'string',\n+            label: 'Value column',\n+            placeholder: 'Value',\n+            info: 'The name of the column containing the value',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+            type: 'boolean',\n+            label: 'Has header row',\n+            defaultValue: false,\n+            info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+            type: 'number',\n+            label: 'Skip header rows',\n+            placeholder: '0',\n+            info: `Number of header rows to be skipped`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+            type: 'string',\n+            label: 'Delimiter',\n+            placeholder: `\\t`,\n+            info: `The delimiter in the file`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+            type: 'string',\n+            label: 'List delimiter',\n+            placeholder: `\\u0001`,\n+            info: `The list delimiter in the file\\t`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+            type: 'string',\n+            label: 'Key field name',\n+            placeholder: `key`,\n+            info: `The field name of the key`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+            type: 'string',\n+            label: 'Value field name',\n+            placeholder: `value`,\n+            info: `The field name of the value`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+          },\n+          {\n+            name: 'extractionNamespace.namespace',\n+            type: 'string',\n+            label: 'Namespace',\n+            placeholder: 'some_lookup',\n+            info: `The namespace to define`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.table',\n+            type: 'string',\n+            label: 'Table',\n+            placeholder: 'some_lookup_table',\n+            info: `The table which contains the key value pairs`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.keyColumn',\n+            type: 'string',\n+            label: 'Key column',\n+            placeholder: 'the_old_dim_value',\n+            info: `The column in table which contains the keys`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.valueColumn',\n+            type: 'string',\n+            label: 'Value column',\n+            placeholder: 'the_new_dim_value',\n+            info: `The column in table which contains the values`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.filter',\n+            type: 'json',\n+            label: 'Filter',\n+            info: `The filter to use when selecting lookups, this is used to create a where clause on lookup population`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.tsColumn',\n+            type: 'string',\n+            label: 'TsColumn',\n+            info: `The column in table which contains when the key was updated`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.pollPeriod',\n+            type: 'string',\n+            label: 'Poll Period',", "originalCommit": "7473a61f5fce10e64c80266ca7d4800af6c64b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNjg5OA==", "url": "https://github.com/apache/druid/pull/9587#discussion_r405116898", "bodyText": "can you extract his whole check into a function please?", "author": "vogievetsky", "createdAt": "2020-04-07T21:13:51Z", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +136,45 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  let disableSubmit =\n+    lookupName === '' ||\n+    lookupVersion === '' ||\n+    lookupTier === '' ||\n+    lookupSpec.type === '' ||\n+    lookupSpec.type === undefined ||\n+    (lookupSpec.type === 'map' && lookupSpec.map === undefined) ||\n+    (lookupSpec.type === 'cachedNamespace' && lookupSpec.extractionNamespace === undefined);\n+\n+  if (!disableSubmit && lookupSpec.type === 'cachedNamespace' && lookupSpec.extractionNamespace) {\n+    const namespaceParseSpec = lookupSpec.extractionNamespace.namespaceParseSpec;", "originalCommit": "7473a61f5fce10e64c80266ca7d4800af6c64b88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "511fe04fd37da2797a407612a2e53ac290c693b6", "url": "https://github.com/apache/druid/commit/511fe04fd37da2797a407612a2e53ac290c693b6", "message": "add test, fix info", "committedDate": "2020-04-07T23:21:22Z", "type": "commit"}, {"oid": "3a2582b4c9e5af0b9f763f1292e7f37968080342", "url": "https://github.com/apache/druid/commit/3a2582b4c9e5af0b9f763f1292e7f37968080342", "message": "add cool highlights", "committedDate": "2020-04-07T23:44:28Z", "type": "commit"}, {"oid": "85b75af47276b2bd9ecce9855e30ac4ca6326213", "url": "https://github.com/apache/druid/commit/85b75af47276b2bd9ecce9855e30ac4ca6326213", "message": "fix formatting", "committedDate": "2020-04-08T02:17:05Z", "type": "commit"}, {"oid": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12", "url": "https://github.com/apache/druid/commit/8e5e64ce7e0867c4cece2b29a650afe9b9e41b12", "message": "fix capitalization", "committedDate": "2020-04-08T02:20:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3OTkzNg==", "url": "https://github.com/apache/druid/pull/9587#discussion_r405279936", "bodyText": "typo: to", "author": "vogievetsky", "createdAt": "2020-04-08T06:10:39Z", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',", "originalCommit": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDAyMw==", "url": "https://github.com/apache/druid/pull/9587#discussion_r405280023", "bodyText": "Ditto", "author": "vogievetsky", "createdAt": "2020-04-08T06:10:56Z", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.password',\n+      type: 'string',\n+      label: 'Password',\n+      info: 'Defines the password too be used by the connector config',", "originalCommit": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MTAwNw==", "url": "https://github.com/apache/druid/pull/9587#discussion_r405281007", "bodyText": "instead of <br> it is better to use multiple <p>s like so:\n<>\n        <p>\n          The table which contains the key value pairs. This will become the table value in the SQL\n          query:\n          </p>\n          <p>\n          SELECT keyColumn, valueColumn, tsColumn? FROM namespace.<strong>table</strong> WHERE\n          filter\n        </p>\n</>", "author": "vogievetsky", "createdAt": "2020-04-08T06:13:40Z", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.password',\n+      type: 'string',\n+      label: 'Password',\n+      info: 'Defines the password too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.table',\n+      type: 'string',\n+      label: 'Table',\n+      placeholder: 'some_lookup_table',\n+      info: (\n+        <p>\n+          The table which contains the key value pairs. This will become the table value in the SQL\n+          query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM namespace.<strong>table</strong> WHERE\n+          filter\n+        </p>", "originalCommit": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MTQ2Mw==", "url": "https://github.com/apache/druid/pull/9587#discussion_r405281463", "bodyText": "add a placeholder of '(optional)' that is the convention that I've been using in several places.", "author": "vogievetsky", "createdAt": "2020-04-08T06:15:00Z", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.password',\n+      type: 'string',\n+      label: 'Password',\n+      info: 'Defines the password too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.table',\n+      type: 'string',\n+      label: 'Table',\n+      placeholder: 'some_lookup_table',\n+      info: (\n+        <p>\n+          The table which contains the key value pairs. This will become the table value in the SQL\n+          query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM namespace.<strong>table</strong> WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'my_key_value',\n+      info: (\n+        <p>\n+          The column in the table which contains the keys. This will become the keyColumn value in\n+          the SQL query:\n+          <br />\n+          SELECT <strong>keyColumn</strong>, valueColumn, tsColumn? FROM namespace.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'my_column_value',\n+      info: (\n+        <p>\n+          The column in table which contains the values. This will become the valueColumn value in\n+          the SQL query:\n+          <br />\n+          SELECT keyColumn, <strong>valueColumn</strong>, tsColumn? FROM namespace.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.filter',\n+      type: 'string',\n+      label: 'Filter',", "originalCommit": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da36e6a5585c163346c7effab17d3cde6dffb49b", "url": "https://github.com/apache/druid/commit/da36e6a5585c163346c7effab17d3cde6dffb49b", "message": "add optional placeholder", "committedDate": "2020-04-08T16:23:47Z", "type": "commit"}, {"oid": "50778c0ce1fdc80ad0ded63bf28af82d7ac89f78", "url": "https://github.com/apache/druid/commit/50778c0ce1fdc80ad0ded63bf28af82d7ac89f78", "message": "add space", "committedDate": "2020-04-08T18:38:14Z", "type": "commit"}]}