{"pr_number": 10171, "pr_title": "Add integration tests for query retry on missing segments", "pr_createdAt": "2020-07-11T06:20:44Z", "pr_url": "https://github.com/apache/druid/pull/10171", "timeline": [{"oid": "ee004a6c21963acb0ad2544472d56fbb51e2fe1f", "url": "https://github.com/apache/druid/commit/ee004a6c21963acb0ad2544472d56fbb51e2fe1f", "message": "Add integration tests for query retry on missing segments", "committedDate": "2020-07-11T06:14:11Z", "type": "commit"}, {"oid": "77712b6b6bac4ca457b8e9e107bacf4061a3c4d7", "url": "https://github.com/apache/druid/commit/77712b6b6bac4ca457b8e9e107bacf4061a3c4d7", "message": "add missing dependencies; fix travis conf", "committedDate": "2020-07-11T19:30:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MTYyMA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454191620", "bodyText": "doesn't need to be changed in this PR, but is this useful to include in the base compose file? I guess all the funny routers are here too, so not a big deal, but we might want to consider moving these definitions into the compose files that actually use them", "author": "clintropolis", "createdAt": "2020-07-14T08:29:12Z", "path": "integration-tests/docker/docker-compose.base.yml", "diffHunk": "@@ -142,12 +142,30 @@ services:\n       - ./environment-configs/common\n       - ./environment-configs/historical\n \n+  druid-historical-for-query-retry-test:", "originalCommit": "77712b6b6bac4ca457b8e9e107bacf4061a3c4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNTA1MA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454735050", "bodyText": "Yeah, I agree. Moved it to docker-compose.query-retry-test.yml.", "author": "jihoonson", "createdAt": "2020-07-15T01:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MTYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5NTAyNA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454195024", "bodyText": "I don't think this is necessary in this PR, but I think we should consider moving this cluster stop script to using docker compose to tear down the thing that it previously created", "author": "clintropolis", "createdAt": "2020-07-14T08:35:05Z", "path": "integration-tests/stop_cluster.sh", "diffHunk": "@@ -20,7 +20,7 @@ if [ -n \"$DRUID_INTEGRATION_TEST_SKIP_RUN_DOCKER\" ] && [ \"$DRUID_INTEGRATION_TES\n     exit 0\n   fi\n \n-for node in druid-historical druid-coordinator druid-overlord druid-router druid-router-permissive-tls druid-router-no-client-auth-tls druid-router-custom-check-tls druid-broker druid-middlemanager druid-zookeeper-kafka druid-metadata-storage druid-it-hadoop;\n+for node in druid-historical druid-historical-for-query-retry-test druid-coordinator druid-overlord druid-router druid-router-permissive-tls druid-router-no-client-auth-tls druid-router-custom-check-tls druid-broker druid-middlemanager druid-zookeeper-kafka druid-metadata-storage druid-it-hadoop;", "originalCommit": "77712b6b6bac4ca457b8e9e107bacf4061a3c4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNTA2MA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454735060", "bodyText": "Yeah that would be nice.", "author": "jihoonson", "createdAt": "2020-07-15T01:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5NTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5NTg2NA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454195864", "bodyText": "what is this change for?", "author": "clintropolis", "createdAt": "2020-07-14T08:36:39Z", "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "diffHunk": "@@ -138,7 +139,9 @@ public TimeseriesQueryQueryToolChest(TimeseriesQueryMetricsFactory queryMetricsF\n \n       final Sequence<Result<TimeseriesResultValue>> finalSequence;\n \n-      if (query.getGranularity().equals(Granularities.ALL) && !query.isSkipEmptyBuckets()) {\n+      if (query.getGranularity().equals(Granularities.ALL) &&", "originalCommit": "77712b6b6bac4ca457b8e9e107bacf4061a3c4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNTEwMw==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454735103", "bodyText": "To be more sql-compliant, the timeseries query returns something if there is no grouping key even when there is nothing to return. However, this behavior is not preferred I think when bySegment is set because, bySegment is used for caching in historicals or debugging where exact results are supposed to be returned. When caching is enabled, it will populate empty result in historicals after this change, but the broker will return the correct result since bySegment won't be set for it. I added some comment for it.", "author": "jihoonson", "createdAt": "2020-07-15T01:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5NTg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwODk5OA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454208998", "bodyText": "Is a custom main method easier than using theCliCommandCreator extension point? I thought you just need something like this:\npublic class QueryRetryTestCommandCreator implements CliCommandCreator\n{\n  @Override\n  public void addCommands(Cli.CliBuilder builder)\n  {\n    builder.withGroup(\"server\").withCommands(CliHistoricalForQueryRetryTest.class);\n  }\n}\nand a META-INF/services entry for it, but I can't remember, maybe there is something more to it", "author": "clintropolis", "createdAt": "2020-07-14T08:59:00Z", "path": "integration-tests/src/main/java/org/apache/druid/cli/MainForQueryRetryTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.cli;\n+\n+import com.google.inject.Injector;\n+import io.airlift.airline.Cli;\n+import io.airlift.airline.Help;\n+import io.airlift.airline.ParseException;\n+import io.netty.util.SuppressForbidden;\n+import org.apache.druid.guice.ExtensionsConfig;\n+import org.apache.druid.guice.GuiceInjectors;\n+import org.apache.druid.initialization.Initialization;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Main class for query retry testing.\n+ *\n+ * @see CliHistoricalForQueryRetryTest\n+ */\n+public class MainForQueryRetryTest", "originalCommit": "77712b6b6bac4ca457b8e9e107bacf4061a3c4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNjIwOQ==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454736209", "bodyText": "Thanks for pointing it out. I didn't know that is a thing. However, looking at that, it seems like a useful way to develop a custom service based on Druid's extension system. This will work for now since the integration tests load all extensions with the same class loader, but won't work once we fix them to use Druid's extension loading system. I would keep the current implementation for now.", "author": "jihoonson", "createdAt": "2020-07-15T01:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwODk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5ODUzMA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r456198530", "bodyText": "Hmm, first of all, I didn't notice that our integration tests already use Druid's extension system. This is a pretty good improvement! \ud83d\ude42 Looking at this more, the suggested way seems working since it's the main thread which loads and executes this command. I have added an integration-tests extension and made it to be loaded for query-retry testing group.", "author": "jihoonson", "createdAt": "2020-07-17T03:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwODk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxMzYzOA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454213638", "bodyText": "heh, this list is getting kind of long \ud83d\ude05", "author": "clintropolis", "createdAt": "2020-07-14T09:07:00Z", "path": ".travis.yml", "diffHunk": "@@ -397,7 +405,7 @@ jobs:\n       name: \"(Compile=openjdk8, Run=openjdk8) other integration test\"\n       jdk: openjdk8\n       services: *integration_test_services\n-      env: TESTNG_GROUPS='-DexcludedGroups=batch-index,input-format,perfect-rollup-parallel-batch-index,kafka-index,query,realtime-index,security,s3-deep-storage,gcs-deep-storage,azure-deep-storage,hdfs-deep-storage,s3-ingestion,kinesis-index,kinesis-data-format,kafka-transactional-index,kafka-index-slow,kafka-transactional-index-slow,kafka-data-format,hadoop-s3-to-s3-deep-storage,hadoop-s3-to-hdfs-deep-storage,hadoop-azure-to-azure-deep-storage,hadoop-azure-to-hdfs-deep-storage,hadoop-gcs-to-gcs-deep-storage,hadoop-gcs-to-hdfs-deep-storage,aliyun-oss-deep-storage' JVM_RUNTIME='-Djvm.runtime=11'\n+      env: TESTNG_GROUPS='-DexcludedGroups=batch-index,input-format,perfect-rollup-parallel-batch-index,kafka-index,query,query-retry,realtime-index,security,s3-deep-storage,gcs-deep-storage,azure-deep-storage,hdfs-deep-storage,s3-ingestion,kinesis-index,kinesis-data-format,kafka-transactional-index,kafka-index-slow,kafka-transactional-index-slow,kafka-data-format,hadoop-s3-to-s3-deep-storage,hadoop-s3-to-hdfs-deep-storage,hadoop-azure-to-azure-deep-storage,hadoop-azure-to-hdfs-deep-storage,hadoop-gcs-to-gcs-deep-storage,hadoop-gcs-to-hdfs-deep-storage,aliyun-oss-deep-storage' JVM_RUNTIME='-Djvm.runtime=11'", "originalCommit": "77712b6b6bac4ca457b8e9e107bacf4061a3c4d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczNjIyNA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r454736224", "bodyText": "", "author": "jihoonson", "createdAt": "2020-07-15T01:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxMzYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNDcxMA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r457704710", "bodyText": "Maybe it's better to have a includedGroup list instead of excludedGroups. AFAIK, there is much more groups we are excluding compare to groups that we are adding to the \"other integration test\" over the last 6 months. Also, the list of groups you can add is somewhat limited as there is a timeout of 50 mins, hence you can probably only add a few more. On the other hand, the list of excludedGroups is infinite and can go on and on and on.", "author": "maytasm", "createdAt": "2020-07-20T21:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxMzYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MzY2Mg==", "url": "https://github.com/apache/druid/pull/10171#discussion_r457753662", "bodyText": "Yeah it makes sense. There were not many tests to exclude when I added \"other integration test\", but now it is pretty long.", "author": "jihoonson", "createdAt": "2020-07-20T23:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxMzYzOA=="}], "type": "inlineReview"}, {"oid": "00269102e00e0330ab496910713195ab31f07801", "url": "https://github.com/apache/druid/commit/00269102e00e0330ab496910713195ab31f07801", "message": "address comments", "committedDate": "2020-07-15T01:18:46Z", "type": "commit"}, {"oid": "cf0055b492309eb129dbade7efebd5b3fd38ba1e", "url": "https://github.com/apache/druid/commit/cf0055b492309eb129dbade7efebd5b3fd38ba1e", "message": "Integration tests extension", "committedDate": "2020-07-17T03:26:50Z", "type": "commit"}, {"oid": "04695125277ebcb885b5e95efd0b702c8bd65b47", "url": "https://github.com/apache/druid/commit/04695125277ebcb885b5e95efd0b702c8bd65b47", "message": "remove unused dependency", "committedDate": "2020-07-17T04:27:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MDYwNw==", "url": "https://github.com/apache/druid/pull/10171#discussion_r457640607", "bodyText": "I guess this technically isn't needed anymore, but maybe is still useful? Should we check if it isn't set and set this as a default value somewhere centralized?", "author": "clintropolis", "createdAt": "2020-07-20T19:26:46Z", "path": "integration-tests/docker/environment-configs/middlemanager", "diffHunk": "@@ -19,6 +19,7 @@\n \n DRUID_SERVICE=middleManager\n DRUID_LOG_PATH=/shared/logs/middlemanager.log\n+DRUID_MAIN=org.apache.druid.cli.Main", "originalCommit": "04695125277ebcb885b5e95efd0b702c8bd65b47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY4NjA0OA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r457686048", "bodyText": "Thanks, I forgot to remove it. Since we can add custom services for integration tests, I'm not sure this variable could become useful for anything yet. I removed it for now. Maybe we can add it back later if needed.", "author": "jihoonson", "createdAt": "2020-07-20T20:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MDYwNw=="}], "type": "inlineReview"}, {"oid": "d329359b2dbc05a6e4ea2dd3df104d5ba11079d5", "url": "https://github.com/apache/druid/commit/d329359b2dbc05a6e4ea2dd3df104d5ba11079d5", "message": "Merge branch 'master' into it-test-query-retry", "committedDate": "2020-07-20T20:48:22Z", "type": "commit"}, {"oid": "d22f034c2cc768dd4af882600da7869895d4831c", "url": "https://github.com/apache/druid/commit/d22f034c2cc768dd4af882600da7869895d4831c", "message": "remove druid_main", "committedDate": "2020-07-20T20:52:15Z", "type": "commit"}, {"oid": "ef06f3b18a4dd8bfacc7f132d69853045598c12d", "url": "https://github.com/apache/druid/commit/ef06f3b18a4dd8bfacc7f132d69853045598c12d", "message": "Merge branch 'master' into it-test-query-retry", "committedDate": "2020-07-21T17:51:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MTkwMA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r458391900", "bodyText": "address=5007 is already used by the default historical.", "author": "maytasm", "createdAt": "2020-07-21T21:14:28Z", "path": "integration-tests/docker/environment-configs/historical-for-query-retry-test", "diffHunk": "@@ -0,0 +1,33 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+\n+DRUID_SERVICE=historical-for-query-retry-test\n+DRUID_LOG_PATH=/shared/logs/historical-for-query-retry-test.log\n+\n+# JAVA OPTS\n+SERVICE_DRUID_JAVA_OPTS=-server -Xmx512m -Xms512m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:+UseG1GC -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5007", "originalCommit": "ef06f3b18a4dd8bfacc7f132d69853045598c12d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwOTMwOA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459009308", "bodyText": "Good catch. Changed to 5010.", "author": "jihoonson", "createdAt": "2020-07-22T18:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5NDEwOQ==", "url": "https://github.com/apache/druid/pull/10171#discussion_r458394109", "bodyText": "If the only difference between this one and the base yml is the new druid-historical-for-query-retry-test, you can just have the new druid-historical-for-query-retry-test in a yml and run two yml when you want to start druid (docker-compose -f ${DOCKERDIR}/docker-compose.yml -f ${DOCKERDIR}/docker-compose.query-retry-test.yml  up -d", "author": "maytasm", "createdAt": "2020-07-21T21:18:53Z", "path": "integration-tests/docker/docker-compose.query-retry-test.yml", "diffHunk": "@@ -0,0 +1,128 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+version: \"2.2\"", "originalCommit": "ef06f3b18a4dd8bfacc7f132d69853045598c12d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5NDMwNw==", "url": "https://github.com/apache/druid/pull/10171#discussion_r458394307", "bodyText": "This is to avoid repeating things like druid-zookeeper-kafka etc.", "author": "maytasm", "createdAt": "2020-07-21T21:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5NDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwOTMzMA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459009330", "bodyText": "This docker compose file doesn't include middleManager to save memory. I would like to exclude overlord as well, seems like I need a way to avoid the check in SuiteListener that waits for the overlord to be ready. I haven't looked at it closely yet.", "author": "jihoonson", "createdAt": "2020-07-22T18:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5NDEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MDA1Mw==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459060053", "bodyText": "I see. My only concern is duplicated code and the maintainability.", "author": "maytasm", "createdAt": "2020-07-22T20:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5NDEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA4NA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r458402084", "bodyText": "Don't have to be in this PR but maybe we should make this a flag passed in my mvn (like -Dstart.hadoop.docker=true). So something like -Ddruid.preload.test.data=true\nSo that this list doesn't get long in the future.", "author": "maytasm", "createdAt": "2020-07-21T21:34:55Z", "path": "integration-tests/docker/druid.sh", "diffHunk": "@@ -82,14 +83,18 @@ setupData()\n   # The \"query\" and \"security\" test groups require data to be setup before running the tests.\n   # In particular, they requires segments to be download from a pre-existing s3 bucket.\n   # This is done by using the loadSpec put into metadatastore and s3 credientials set below.\n-  if [ \"$DRUID_INTEGRATION_TEST_GROUP\" = \"query\" ] || [ \"$DRUID_INTEGRATION_TEST_GROUP\" = \"security\" ]; then\n+  if [ \"$DRUID_INTEGRATION_TEST_GROUP\" = \"query\" ] || [ \"$DRUID_INTEGRATION_TEST_GROUP\" = \"query-retry\" ] || [ \"$DRUID_INTEGRATION_TEST_GROUP\" = \"security\" ]; then", "originalCommit": "ef06f3b18a4dd8bfacc7f132d69853045598c12d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwOTQxMA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459009410", "bodyText": "Hmm, do you think there will be more test groups like these in the future? I'm not sure about it. A downside of using a flag is that you have to add the flag when you run a test manually. Also you have to be aware of that flag when you add a new test. If your concern is about code complexity, then we could provide a developer-friendly configuration where we can easily add or remove test groups which our docker script can handle in a more structured way.", "author": "jihoonson", "createdAt": "2020-07-22T18:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1OTQ0MA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459059440", "bodyText": "I am imaging the flags as easy control to the Druid cluster. Basically, there's a list of all the flags on the README and if you are writing a new test group, you can easily pick and choose how you want the state of your Druid cluster to be. i.e. you need to start x service then set this flag, you need pre-load data set this flag, you need hadoop set this flag, you want indexer instead of MM set this flag, etc.", "author": "maytasm", "createdAt": "2020-07-22T20:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MjU5MA==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459062590", "bodyText": "What is the main use case of the flag system? As what each test group needs are fixed (e.g., hadoop cluster must be started for hadoop task test), I'm not sure how it's better compared to that the docker script automatically launches necessary things depending on the test group.", "author": "jihoonson", "createdAt": "2020-07-22T20:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NzcxNw==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459067717", "bodyText": "I believe it might be easier for a person who does not know the internal working of our Docker/Compose scripts to write new integration tests. Basically you do not need to know where all the bit and pieces are like to preload the data you need to modify the if check in druid.sh, and to do other stuff maybe we in other places, etc.\nFor example, if I want to write a new integration test group that requires pre load data and hadoop running and maybe indexer running instead of MM, all of that might be in 3 different places in different files. With the flag system, you just need to specify what you want in the travis file for the mvn cmd.", "author": "maytasm", "createdAt": "2020-07-22T20:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NDg2Ng==", "url": "https://github.com/apache/druid/pull/10171#discussion_r459074866", "bodyText": "If your concern is about code complexity, then we could provide a developer-friendly configuration where we can easily add or remove test groups which our docker script can handle in a more structured way.\n\nYeah, this comment above was to provide developer-friendly configurations so that they can easily add new integration tests. I guess what I think is pretty similar to yours, something like a centralized configuration system where you can define what you need for your integration test so that you don't have to worry about flags or configs at test run time. What I'm not sure is if they should be runtime flags. Maybe they could be if it's easier to implement.", "author": "jihoonson", "createdAt": "2020-07-22T20:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwMjA4NA=="}], "type": "inlineReview"}, {"oid": "dbd587e96bb00c994a036c82f6fc31d790096736", "url": "https://github.com/apache/druid/commit/dbd587e96bb00c994a036c82f6fc31d790096736", "message": "fix java agent port", "committedDate": "2020-07-22T18:42:14Z", "type": "commit"}, {"oid": "a08a3da71f18f379130db29a70732bd5c00f061e", "url": "https://github.com/apache/druid/commit/a08a3da71f18f379130db29a70732bd5c00f061e", "message": "Merge branch 'it-test-query-retry' of github.com:jihoonson/druid into it-test-query-retry", "committedDate": "2020-07-22T18:42:39Z", "type": "commit"}]}