{"pr_number": 10339, "pr_title": "Security overview documentation", "pr_createdAt": "2020-09-01T23:01:59Z", "pr_url": "https://github.com/apache/druid/pull/10339", "timeline": [{"oid": "e05d2460481fd6f51b48d482cae10c948143b87e", "url": "https://github.com/apache/druid/commit/e05d2460481fd6f51b48d482cae10c948143b87e", "message": "initial file", "committedDate": "2020-08-22T00:12:36Z", "type": "commit"}, {"oid": "b2e2378674f70f781d152f8d7f9494d3d28ba286", "url": "https://github.com/apache/druid/commit/b2e2378674f70f781d152f8d7f9494d3d28ba286", "message": "initial file", "committedDate": "2020-08-22T00:13:15Z", "type": "commit"}, {"oid": "f08318f2496bca56019493d0f928a02bac0a5bad", "url": "https://github.com/apache/druid/commit/f08318f2496bca56019493d0f928a02bac0a5bad", "message": "security overview added", "committedDate": "2020-08-29T00:12:58Z", "type": "commit"}, {"oid": "d5e11faa507add3f9c501a0d0d7168b7deeb39df", "url": "https://github.com/apache/druid/commit/d5e11faa507add3f9c501a0d0d7168b7deeb39df", "message": "ldap added", "committedDate": "2020-09-01T22:00:50Z", "type": "commit"}, {"oid": "51d46093bdf8f4f90e3c652d6dc77749be45c50b", "url": "https://github.com/apache/druid/commit/51d46093bdf8f4f90e3c652d6dc77749be45c50b", "message": "spacing adjustments", "committedDate": "2020-09-01T22:07:24Z", "type": "commit"}, {"oid": "b4d204d9dd463a0a9569c78f7172b8f8d393f550", "url": "https://github.com/apache/druid/commit/b4d204d9dd463a0a9569c78f7172b8f8d393f550", "message": "nits", "committedDate": "2020-09-01T22:57:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxNzY5OA==", "url": "https://github.com/apache/druid/pull/10339#discussion_r483817698", "bodyText": "\"By default, security features in Druid are disabled to simplify initial development experience. However, security features must be configured in a production deployment. Those features including TLS, authentication, and authorization\".", "author": "2bethere", "createdAt": "2020-09-04T19:50:15Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,228 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, that is, TLS is disabled and user authentication does not occur. To use these features, you need to configure security in Druid. ", "originalCommit": "b4d204d9dd463a0a9569c78f7172b8f8d393f550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxODEzOA==", "url": "https://github.com/apache/druid/pull/10339#discussion_r483818138", "bodyText": "\"Do not expose the Druid Console without authentication on untrusted networks.\"", "author": "2bethere", "createdAt": "2020-09-04T19:51:27Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,228 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, that is, TLS is disabled and user authentication does not occur. To use these features, you need to configure security in Druid. \n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console on an untrusted users or networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.", "originalCommit": "b4d204d9dd463a0a9569c78f7172b8f8d393f550", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxOTEzMw==", "url": "https://github.com/apache/druid/pull/10339#discussion_r483819133", "bodyText": "Run Druid as an unprivileged Unix user on the installation machine (not root). Administrator users on Druid have the same permission of the unix user account it is running under. If the Druid process is running under root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.", "author": "2bethere", "createdAt": "2020-09-04T19:54:06Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,228 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, that is, TLS is disabled and user authentication does not occur. To use these features, you need to configure security in Druid. \n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console on an untrusted users or networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).", "originalCommit": "b4d204d9dd463a0a9569c78f7172b8f8d393f550", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxOTcxOQ==", "url": "https://github.com/apache/druid/pull/10339#discussion_r483819719", "bodyText": "There needs to be a warning box around this one. It is very very important not to do this.", "author": "2bethere", "createdAt": "2020-09-04T19:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxOTEzMw=="}], "type": "inlineReview"}, {"oid": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "url": "https://github.com/apache/druid/commit/9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "message": "security graphics and doc review", "committedDate": "2020-09-08T22:12:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MjUyNQ==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499942525", "bodyText": "The filename should be auth-ldap.md", "author": "jon-wei", "createdAt": "2020-10-06T00:28:43Z", "path": "docs/operations/auth-ldap", "diffHunk": "@@ -0,0 +1,165 @@\n+---\n+id: auth-ldap", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0MjYyMQ==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499942621", "bodyText": "authorizors -> authorizers here and elsewhere", "author": "jon-wei", "createdAt": "2020-10-06T00:29:07Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. ", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0OTI4Mw==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499949283", "bodyText": "I think it's worth mentioning the disabling of the non-TLS port here as well", "author": "jon-wei", "createdAt": "2020-10-06T00:55:50Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. \n+\n+The following graphic depicts the course of request through the authentication process: \n+\n+\n+![Druid security check flow](../assets/security-model-1.png \"Druid security check flow\") \n+\n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console without authentication on untrusted networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).\n+   > This is an important point! Administrator users on Druid have the same permission as the Unix user account it is running under. If the Druid process is running under the root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.\n+\n+You can configure authentication and authorization to control access to the the Druid APIs. The first step is enabling TLS for the cluster nodes. Then configure users, roles, and permissions, as described in the following sections. \n+\n+The configuration settings mentioned below are primarily located in the `common.runtime.properties` file. Note that you need to make the configuration changes on each Druid server in the cluster. \n+\n+\n+## Enable TLS\n+\n+The first step in securing Druid is enabling TLS. You can enable TLS to secure external client connections to Druid as well as connections between cluster nodes. \n+\n+The configuration steps are: \n+\n+1. Enable TLS by adding `druid.enableTlsPort=true` to `common.runtime.properties` on each node in the Druid cluster.", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0OTk4MQ==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499949981", "bodyText": "basic-auth extension -> druid-basic-security extension", "author": "jon-wei", "createdAt": "2020-10-06T00:58:55Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. \n+\n+The following graphic depicts the course of request through the authentication process: \n+\n+\n+![Druid security check flow](../assets/security-model-1.png \"Druid security check flow\") \n+\n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console without authentication on untrusted networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).\n+   > This is an important point! Administrator users on Druid have the same permission as the Unix user account it is running under. If the Druid process is running under the root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.\n+\n+You can configure authentication and authorization to control access to the the Druid APIs. The first step is enabling TLS for the cluster nodes. Then configure users, roles, and permissions, as described in the following sections. \n+\n+The configuration settings mentioned below are primarily located in the `common.runtime.properties` file. Note that you need to make the configuration changes on each Druid server in the cluster. \n+\n+\n+## Enable TLS\n+\n+The first step in securing Druid is enabling TLS. You can enable TLS to secure external client connections to Druid as well as connections between cluster nodes. \n+\n+The configuration steps are: \n+\n+1. Enable TLS by adding `druid.enableTlsPort=true` to `common.runtime.properties` on each node in the Druid cluster.\n+2. Follow the steps in [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html#understanding-certificates-and-keys) to generate or import a key and certificate. \n+3. Configure the keystore and truststore settings in `common.runtime.properties`. The file should look something like this: \n+  ```\n+  druid.enablePlaintextPort=false\n+  druid.enableTlsPort=true\n+  \n+  druid.server.https.keyStoreType=jks\n+  druid.server.https.keyStorePath=imply-keystore.jks\n+  druid.server.https.keyStorePassword=secret123 # replace with your own password\n+  druid.server.https.certAlias=druid \n+  \n+  druid.client.https.protocol=TLSv1.2\n+  druid.client.https.trustStoreType=jks\n+  druid.client.https.trustStorePath=imply-truststore.jks\n+  druid.client.https.trustStorePassword=secret123  # replace with your own password\n+\n+  ``` \n+4. Add the `simple-client-sslcontext` extension to `druid.extensions.loadList` in common.runtime.properties. This enables TLS for Druid nodes acting as clients.\n+5. Restart the cluster.\n+\n+For more information, see [TLS support](tls-support) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext). \n+\n+Druid uses Jetty as its embedded web server. Therefore you refer to [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html) for complete instructions. \n+\n+\n+## Enable an authenticator\n+\n+To authenticate requests in Druid, you configure an Authenticator. Authenticator extensions exist for HTTP basic authentication, LDAP, and Kerberos.  \n+\n+The following takes you through sample configuration steps for enabling basic auth:  \n+\n+1. Add the `basic-auth` extension to `druid.extensions.loadList` in common.runtime.properties. For the quickstart installation, for example, the properties file is at `conf/druid/cluster/_common`:", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1MjY0NA==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499952644", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See [Basic Security](../development/extensions-core/druid-basic-security) for more information. For more on authentication extensions, see [Kerberos](../development/extensions-core/druid-kerberos), [Authentication and Authorization](../design/auth), and [Authentication and Authorization](../design/auth) \n          \n          \n            \n            See [Authentication and Authorization](../design/auth) for more information about the Authenticator, Escalator, and Authorizer concepts. See [Basic Security](../development/extensions-core/druid-basic-security) for more information about the extension used in the examples above, and [Kerberos](../development/extensions-core/druid-kerberos) for Kerberos authentication.", "author": "jon-wei", "createdAt": "2020-10-06T01:10:06Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. \n+\n+The following graphic depicts the course of request through the authentication process: \n+\n+\n+![Druid security check flow](../assets/security-model-1.png \"Druid security check flow\") \n+\n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console without authentication on untrusted networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).\n+   > This is an important point! Administrator users on Druid have the same permission as the Unix user account it is running under. If the Druid process is running under the root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.\n+\n+You can configure authentication and authorization to control access to the the Druid APIs. The first step is enabling TLS for the cluster nodes. Then configure users, roles, and permissions, as described in the following sections. \n+\n+The configuration settings mentioned below are primarily located in the `common.runtime.properties` file. Note that you need to make the configuration changes on each Druid server in the cluster. \n+\n+\n+## Enable TLS\n+\n+The first step in securing Druid is enabling TLS. You can enable TLS to secure external client connections to Druid as well as connections between cluster nodes. \n+\n+The configuration steps are: \n+\n+1. Enable TLS by adding `druid.enableTlsPort=true` to `common.runtime.properties` on each node in the Druid cluster.\n+2. Follow the steps in [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html#understanding-certificates-and-keys) to generate or import a key and certificate. \n+3. Configure the keystore and truststore settings in `common.runtime.properties`. The file should look something like this: \n+  ```\n+  druid.enablePlaintextPort=false\n+  druid.enableTlsPort=true\n+  \n+  druid.server.https.keyStoreType=jks\n+  druid.server.https.keyStorePath=imply-keystore.jks\n+  druid.server.https.keyStorePassword=secret123 # replace with your own password\n+  druid.server.https.certAlias=druid \n+  \n+  druid.client.https.protocol=TLSv1.2\n+  druid.client.https.trustStoreType=jks\n+  druid.client.https.trustStorePath=imply-truststore.jks\n+  druid.client.https.trustStorePassword=secret123  # replace with your own password\n+\n+  ``` \n+4. Add the `simple-client-sslcontext` extension to `druid.extensions.loadList` in common.runtime.properties. This enables TLS for Druid nodes acting as clients.\n+5. Restart the cluster.\n+\n+For more information, see [TLS support](tls-support) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext). \n+\n+Druid uses Jetty as its embedded web server. Therefore you refer to [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html) for complete instructions. \n+\n+\n+## Enable an authenticator\n+\n+To authenticate requests in Druid, you configure an Authenticator. Authenticator extensions exist for HTTP basic authentication, LDAP, and Kerberos.  \n+\n+The following takes you through sample configuration steps for enabling basic auth:  \n+\n+1. Add the `basic-auth` extension to `druid.extensions.loadList` in common.runtime.properties. For the quickstart installation, for example, the properties file is at `conf/druid/cluster/_common`:\n+   ```\n+   druid.extensions.loadList=[\"druid-basic-security\", \"druid-histogram\", \"druid-datasketches\", \"druid-kafka-indexing-service\", \"imply-utility-belt\"]\n+   ```\n+2. Configure the basic Authenticator, Authorizer, and Escalator settings in the same common.runtime.properties file. For example:\n+   ```\n+   # Druid basic security\n+   druid.auth.authenticatorChain=[\"MyBasicMetadataAuthenticator\"]\n+\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.type=basic\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword=password1\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword=password2\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type=metadata\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure=false\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   # Escalator\n+   druid.escalator.type=basic\n+   druid.escalator.internalClientUsername=druid_system\n+   druid.escalator.internalClientPassword=password2\n+   druid.escalator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   druid.auth.authorizers=[\"MyBasicMetadataAuthorizer\"]\n+\n+   druid.auth.authorizer.MyBasicMetadataAuthorizer.type=basic\n+   ```\n+\n+3. Restart the cluster. \n+\n+See [Basic Security](../development/extensions-core/druid-basic-security) for more information. For more on authentication extensions, see [Kerberos](../development/extensions-core/druid-kerberos), [Authentication and Authorization](../design/auth), and [Authentication and Authorization](../design/auth) ", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1NDMzMw==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499954333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            > The Coordinator API port is 8081 for non-TLS connections and 8281 for secured connections.\n          \n          \n            \n            > The default Coordinator API port is 8081 for non-TLS connections and 8281 for secured connections.", "author": "jon-wei", "createdAt": "2020-10-06T01:16:40Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. \n+\n+The following graphic depicts the course of request through the authentication process: \n+\n+\n+![Druid security check flow](../assets/security-model-1.png \"Druid security check flow\") \n+\n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console without authentication on untrusted networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).\n+   > This is an important point! Administrator users on Druid have the same permission as the Unix user account it is running under. If the Druid process is running under the root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.\n+\n+You can configure authentication and authorization to control access to the the Druid APIs. The first step is enabling TLS for the cluster nodes. Then configure users, roles, and permissions, as described in the following sections. \n+\n+The configuration settings mentioned below are primarily located in the `common.runtime.properties` file. Note that you need to make the configuration changes on each Druid server in the cluster. \n+\n+\n+## Enable TLS\n+\n+The first step in securing Druid is enabling TLS. You can enable TLS to secure external client connections to Druid as well as connections between cluster nodes. \n+\n+The configuration steps are: \n+\n+1. Enable TLS by adding `druid.enableTlsPort=true` to `common.runtime.properties` on each node in the Druid cluster.\n+2. Follow the steps in [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html#understanding-certificates-and-keys) to generate or import a key and certificate. \n+3. Configure the keystore and truststore settings in `common.runtime.properties`. The file should look something like this: \n+  ```\n+  druid.enablePlaintextPort=false\n+  druid.enableTlsPort=true\n+  \n+  druid.server.https.keyStoreType=jks\n+  druid.server.https.keyStorePath=imply-keystore.jks\n+  druid.server.https.keyStorePassword=secret123 # replace with your own password\n+  druid.server.https.certAlias=druid \n+  \n+  druid.client.https.protocol=TLSv1.2\n+  druid.client.https.trustStoreType=jks\n+  druid.client.https.trustStorePath=imply-truststore.jks\n+  druid.client.https.trustStorePassword=secret123  # replace with your own password\n+\n+  ``` \n+4. Add the `simple-client-sslcontext` extension to `druid.extensions.loadList` in common.runtime.properties. This enables TLS for Druid nodes acting as clients.\n+5. Restart the cluster.\n+\n+For more information, see [TLS support](tls-support) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext). \n+\n+Druid uses Jetty as its embedded web server. Therefore you refer to [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html) for complete instructions. \n+\n+\n+## Enable an authenticator\n+\n+To authenticate requests in Druid, you configure an Authenticator. Authenticator extensions exist for HTTP basic authentication, LDAP, and Kerberos.  \n+\n+The following takes you through sample configuration steps for enabling basic auth:  \n+\n+1. Add the `basic-auth` extension to `druid.extensions.loadList` in common.runtime.properties. For the quickstart installation, for example, the properties file is at `conf/druid/cluster/_common`:\n+   ```\n+   druid.extensions.loadList=[\"druid-basic-security\", \"druid-histogram\", \"druid-datasketches\", \"druid-kafka-indexing-service\", \"imply-utility-belt\"]\n+   ```\n+2. Configure the basic Authenticator, Authorizer, and Escalator settings in the same common.runtime.properties file. For example:\n+   ```\n+   # Druid basic security\n+   druid.auth.authenticatorChain=[\"MyBasicMetadataAuthenticator\"]\n+\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.type=basic\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword=password1\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword=password2\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type=metadata\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure=false\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   # Escalator\n+   druid.escalator.type=basic\n+   druid.escalator.internalClientUsername=druid_system\n+   druid.escalator.internalClientPassword=password2\n+   druid.escalator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   druid.auth.authorizers=[\"MyBasicMetadataAuthorizer\"]\n+\n+   druid.auth.authorizer.MyBasicMetadataAuthorizer.type=basic\n+   ```\n+\n+3. Restart the cluster. \n+\n+See [Basic Security](../development/extensions-core/druid-basic-security) for more information. For more on authentication extensions, see [Kerberos](../development/extensions-core/druid-kerberos), [Authentication and Authorization](../design/auth), and [Authentication and Authorization](../design/auth) \n+\n+\n+## Enable authorizors\n+\n+After enabling the basic auth extension, you can add users, roles, and permissions via the Druid Coordinator `user` endpoint. Note that you cannot assign permissions directly to individual users. They must be assigned through roles. \n+\n+The following diagram depicts the authorization model, and the relationship between users, roles, permissions, and resources.\n+ \n+![Druid Security model](../assets/security-model-2.png \"Druid security model\") \n+\n+\n+The following steps walk through a sample setup procedure:  \n+\n+> The Coordinator API port is 8081 for non-TLS connections and 8281 for secured connections.", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1NDc4OQ==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499954789", "bodyText": "Would also suggest mentioning that if TLS is enabled, the user may have to adjust the example curl commands to account for that (e.g., they used a self-signed certificate for the Druid servers that's not trusted by curl by default)", "author": "jon-wei", "createdAt": "2020-10-06T01:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1NDMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MTA0MA==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499961040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Configuring an LDAP authorizor\n          \n          \n            \n            ## Configuring an LDAP authenticator", "author": "jon-wei", "createdAt": "2020-10-06T01:43:27Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. \n+\n+The following graphic depicts the course of request through the authentication process: \n+\n+\n+![Druid security check flow](../assets/security-model-1.png \"Druid security check flow\") \n+\n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console without authentication on untrusted networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).\n+   > This is an important point! Administrator users on Druid have the same permission as the Unix user account it is running under. If the Druid process is running under the root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.\n+\n+You can configure authentication and authorization to control access to the the Druid APIs. The first step is enabling TLS for the cluster nodes. Then configure users, roles, and permissions, as described in the following sections. \n+\n+The configuration settings mentioned below are primarily located in the `common.runtime.properties` file. Note that you need to make the configuration changes on each Druid server in the cluster. \n+\n+\n+## Enable TLS\n+\n+The first step in securing Druid is enabling TLS. You can enable TLS to secure external client connections to Druid as well as connections between cluster nodes. \n+\n+The configuration steps are: \n+\n+1. Enable TLS by adding `druid.enableTlsPort=true` to `common.runtime.properties` on each node in the Druid cluster.\n+2. Follow the steps in [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html#understanding-certificates-and-keys) to generate or import a key and certificate. \n+3. Configure the keystore and truststore settings in `common.runtime.properties`. The file should look something like this: \n+  ```\n+  druid.enablePlaintextPort=false\n+  druid.enableTlsPort=true\n+  \n+  druid.server.https.keyStoreType=jks\n+  druid.server.https.keyStorePath=imply-keystore.jks\n+  druid.server.https.keyStorePassword=secret123 # replace with your own password\n+  druid.server.https.certAlias=druid \n+  \n+  druid.client.https.protocol=TLSv1.2\n+  druid.client.https.trustStoreType=jks\n+  druid.client.https.trustStorePath=imply-truststore.jks\n+  druid.client.https.trustStorePassword=secret123  # replace with your own password\n+\n+  ``` \n+4. Add the `simple-client-sslcontext` extension to `druid.extensions.loadList` in common.runtime.properties. This enables TLS for Druid nodes acting as clients.\n+5. Restart the cluster.\n+\n+For more information, see [TLS support](tls-support) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext). \n+\n+Druid uses Jetty as its embedded web server. Therefore you refer to [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html) for complete instructions. \n+\n+\n+## Enable an authenticator\n+\n+To authenticate requests in Druid, you configure an Authenticator. Authenticator extensions exist for HTTP basic authentication, LDAP, and Kerberos.  \n+\n+The following takes you through sample configuration steps for enabling basic auth:  \n+\n+1. Add the `basic-auth` extension to `druid.extensions.loadList` in common.runtime.properties. For the quickstart installation, for example, the properties file is at `conf/druid/cluster/_common`:\n+   ```\n+   druid.extensions.loadList=[\"druid-basic-security\", \"druid-histogram\", \"druid-datasketches\", \"druid-kafka-indexing-service\", \"imply-utility-belt\"]\n+   ```\n+2. Configure the basic Authenticator, Authorizer, and Escalator settings in the same common.runtime.properties file. For example:\n+   ```\n+   # Druid basic security\n+   druid.auth.authenticatorChain=[\"MyBasicMetadataAuthenticator\"]\n+\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.type=basic\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword=password1\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword=password2\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type=metadata\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure=false\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   # Escalator\n+   druid.escalator.type=basic\n+   druid.escalator.internalClientUsername=druid_system\n+   druid.escalator.internalClientPassword=password2\n+   druid.escalator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   druid.auth.authorizers=[\"MyBasicMetadataAuthorizer\"]\n+\n+   druid.auth.authorizer.MyBasicMetadataAuthorizer.type=basic\n+   ```\n+\n+3. Restart the cluster. \n+\n+See [Basic Security](../development/extensions-core/druid-basic-security) for more information. For more on authentication extensions, see [Kerberos](../development/extensions-core/druid-kerberos), [Authentication and Authorization](../design/auth), and [Authentication and Authorization](../design/auth) \n+\n+\n+## Enable authorizors\n+\n+After enabling the basic auth extension, you can add users, roles, and permissions via the Druid Coordinator `user` endpoint. Note that you cannot assign permissions directly to individual users. They must be assigned through roles. \n+\n+The following diagram depicts the authorization model, and the relationship between users, roles, permissions, and resources.\n+ \n+![Druid Security model](../assets/security-model-2.png \"Druid security model\") \n+\n+\n+The following steps walk through a sample setup procedure:  \n+\n+> The Coordinator API port is 8081 for non-TLS connections and 8281 for secured connections.\n+\n+1. Create a user by issuing a POST request to `druid-ext/basic-security/authentication/db/MyBasicMetadataAuthenticator/users/<USERNAME>`, replacing USERNAME with the new username. For example: \n+  ```\n+   curl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authentication/db/basic/users/myname\n+  ```\n+2. Add a credential for the user by issuing a POST to `druid-ext/basic-security/authentication/db/MyBasicMetadataAuthenticator/users/<USERNAME>/credentials`. For example:\n+    ```\n+    curl -u admin:password -H'Content-Type: application/json' -XPOST --data-binary @pass.json https://my-coordinator-ip:8281/druid-ext/basic-security/authentication/db/basic/users/myname/credentials\n+    ```\n+    The password is conveyed in the pass.json file, the payload of which should be in the form:\n+   \t```\n+   \t{\n+      \"password\": \"password\"\n+    }\n+    ```\n+2. For each authenticator user you create, create a corresponding authorizer user by issuing a POST request to `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/users/<USERNAME>`. For example: \n+\t```\n+\tcurl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/users/myname\n+\t```\n+3. Create authorizer roles to control permissions by issuing a POST request to `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/roles/<ROLENAME>`. For example: \n+\t```\n+   curl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/roles/myrole\n+   ```\n+4. Assign roles to users by issuing a POST request to `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/users/<USERNAME>/roles/<ROLENAME>`. For example: \n+\t```\n+\tcurl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/users/myname/roles/myrole | jq\n+\t```\n+5. Finally, attach permissions to the roles to control how they can interact with Druid at `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/roles/<ROLENAME>/permissions`. \n+\tFor example: \n+\t```\n+\tcurl -u admin:password -H'Content-Type: application/json' -XPOST --data-binary @perms.json https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/roles/myrole/permissions\n+\t```\n+\tThe payload of perms.json should be in the form:\n+   \t```\n+    [\n+    {\n+      \"resource\": {\n+        \"name\": \"<PATTERN>\",\n+        \"type\": \"DATASOURCE\"\n+      },\n+      \"action\": \"READ\"\n+    },\n+    {\n+      \"resource\": {\n+      \"name\": \"STATE\",\n+      \"type\": \"STATE\"\n+    },\n+    \"action\": \"READ\"\n+    }\n+    ]\n+    ```\n+\n+\n+## Configuring an LDAP authorizor", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MTA5MQ==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499961091", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As an alternative to using the basic metadata authenticator, as shown in the previous section, you can use LDAP to authorize users. The following steps provide an overview of the setup steps. For more information on these settings, see [Properties for LDAP user authentication](https://druid.apache.org/docs/latest/development/extensions-core/druid-basic-security.html#properties-for-ldap-user-authentication).\n          \n          \n            \n            As an alternative to using the basic metadata authenticator, as shown in the previous section, you can use LDAP to authenticate users. The following steps provide an overview of the setup steps. For more information on these settings, see [Properties for LDAP user authentication](https://druid.apache.org/docs/latest/development/extensions-core/druid-basic-security.html#properties-for-ldap-user-authentication).", "author": "jon-wei", "createdAt": "2020-10-06T01:43:40Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. \n+\n+The following graphic depicts the course of request through the authentication process: \n+\n+\n+![Druid security check flow](../assets/security-model-1.png \"Druid security check flow\") \n+\n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console without authentication on untrusted networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).\n+   > This is an important point! Administrator users on Druid have the same permission as the Unix user account it is running under. If the Druid process is running under the root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.\n+\n+You can configure authentication and authorization to control access to the the Druid APIs. The first step is enabling TLS for the cluster nodes. Then configure users, roles, and permissions, as described in the following sections. \n+\n+The configuration settings mentioned below are primarily located in the `common.runtime.properties` file. Note that you need to make the configuration changes on each Druid server in the cluster. \n+\n+\n+## Enable TLS\n+\n+The first step in securing Druid is enabling TLS. You can enable TLS to secure external client connections to Druid as well as connections between cluster nodes. \n+\n+The configuration steps are: \n+\n+1. Enable TLS by adding `druid.enableTlsPort=true` to `common.runtime.properties` on each node in the Druid cluster.\n+2. Follow the steps in [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html#understanding-certificates-and-keys) to generate or import a key and certificate. \n+3. Configure the keystore and truststore settings in `common.runtime.properties`. The file should look something like this: \n+  ```\n+  druid.enablePlaintextPort=false\n+  druid.enableTlsPort=true\n+  \n+  druid.server.https.keyStoreType=jks\n+  druid.server.https.keyStorePath=imply-keystore.jks\n+  druid.server.https.keyStorePassword=secret123 # replace with your own password\n+  druid.server.https.certAlias=druid \n+  \n+  druid.client.https.protocol=TLSv1.2\n+  druid.client.https.trustStoreType=jks\n+  druid.client.https.trustStorePath=imply-truststore.jks\n+  druid.client.https.trustStorePassword=secret123  # replace with your own password\n+\n+  ``` \n+4. Add the `simple-client-sslcontext` extension to `druid.extensions.loadList` in common.runtime.properties. This enables TLS for Druid nodes acting as clients.\n+5. Restart the cluster.\n+\n+For more information, see [TLS support](tls-support) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext). \n+\n+Druid uses Jetty as its embedded web server. Therefore you refer to [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html) for complete instructions. \n+\n+\n+## Enable an authenticator\n+\n+To authenticate requests in Druid, you configure an Authenticator. Authenticator extensions exist for HTTP basic authentication, LDAP, and Kerberos.  \n+\n+The following takes you through sample configuration steps for enabling basic auth:  \n+\n+1. Add the `basic-auth` extension to `druid.extensions.loadList` in common.runtime.properties. For the quickstart installation, for example, the properties file is at `conf/druid/cluster/_common`:\n+   ```\n+   druid.extensions.loadList=[\"druid-basic-security\", \"druid-histogram\", \"druid-datasketches\", \"druid-kafka-indexing-service\", \"imply-utility-belt\"]\n+   ```\n+2. Configure the basic Authenticator, Authorizer, and Escalator settings in the same common.runtime.properties file. For example:\n+   ```\n+   # Druid basic security\n+   druid.auth.authenticatorChain=[\"MyBasicMetadataAuthenticator\"]\n+\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.type=basic\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword=password1\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword=password2\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type=metadata\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure=false\n+   druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   # Escalator\n+   druid.escalator.type=basic\n+   druid.escalator.internalClientUsername=druid_system\n+   druid.escalator.internalClientPassword=password2\n+   druid.escalator.authorizerName=MyBasicMetadataAuthorizer\n+\n+   druid.auth.authorizers=[\"MyBasicMetadataAuthorizer\"]\n+\n+   druid.auth.authorizer.MyBasicMetadataAuthorizer.type=basic\n+   ```\n+\n+3. Restart the cluster. \n+\n+See [Basic Security](../development/extensions-core/druid-basic-security) for more information. For more on authentication extensions, see [Kerberos](../development/extensions-core/druid-kerberos), [Authentication and Authorization](../design/auth), and [Authentication and Authorization](../design/auth) \n+\n+\n+## Enable authorizors\n+\n+After enabling the basic auth extension, you can add users, roles, and permissions via the Druid Coordinator `user` endpoint. Note that you cannot assign permissions directly to individual users. They must be assigned through roles. \n+\n+The following diagram depicts the authorization model, and the relationship between users, roles, permissions, and resources.\n+ \n+![Druid Security model](../assets/security-model-2.png \"Druid security model\") \n+\n+\n+The following steps walk through a sample setup procedure:  \n+\n+> The Coordinator API port is 8081 for non-TLS connections and 8281 for secured connections.\n+\n+1. Create a user by issuing a POST request to `druid-ext/basic-security/authentication/db/MyBasicMetadataAuthenticator/users/<USERNAME>`, replacing USERNAME with the new username. For example: \n+  ```\n+   curl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authentication/db/basic/users/myname\n+  ```\n+2. Add a credential for the user by issuing a POST to `druid-ext/basic-security/authentication/db/MyBasicMetadataAuthenticator/users/<USERNAME>/credentials`. For example:\n+    ```\n+    curl -u admin:password -H'Content-Type: application/json' -XPOST --data-binary @pass.json https://my-coordinator-ip:8281/druid-ext/basic-security/authentication/db/basic/users/myname/credentials\n+    ```\n+    The password is conveyed in the pass.json file, the payload of which should be in the form:\n+   \t```\n+   \t{\n+      \"password\": \"password\"\n+    }\n+    ```\n+2. For each authenticator user you create, create a corresponding authorizer user by issuing a POST request to `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/users/<USERNAME>`. For example: \n+\t```\n+\tcurl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/users/myname\n+\t```\n+3. Create authorizer roles to control permissions by issuing a POST request to `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/roles/<ROLENAME>`. For example: \n+\t```\n+   curl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/roles/myrole\n+   ```\n+4. Assign roles to users by issuing a POST request to `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/users/<USERNAME>/roles/<ROLENAME>`. For example: \n+\t```\n+\tcurl -u admin:password -XPOST https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/users/myname/roles/myrole | jq\n+\t```\n+5. Finally, attach permissions to the roles to control how they can interact with Druid at `druid-ext/basic-security/authorization/db/MyBasicMetadataAuthorizer/roles/<ROLENAME>/permissions`. \n+\tFor example: \n+\t```\n+\tcurl -u admin:password -H'Content-Type: application/json' -XPOST --data-binary @perms.json https://my-coordinator-ip:8281/druid-ext/basic-security/authorization/db/basic/roles/myrole/permissions\n+\t```\n+\tThe payload of perms.json should be in the form:\n+   \t```\n+    [\n+    {\n+      \"resource\": {\n+        \"name\": \"<PATTERN>\",\n+        \"type\": \"DATASOURCE\"\n+      },\n+      \"action\": \"READ\"\n+    },\n+    {\n+      \"resource\": {\n+      \"name\": \"STATE\",\n+      \"type\": \"STATE\"\n+    },\n+    \"action\": \"READ\"\n+    }\n+    ]\n+    ```\n+\n+\n+## Configuring an LDAP authorizor\n+\n+As an alternative to using the basic metadata authenticator, as shown in the previous section, you can use LDAP to authorize users. The following steps provide an overview of the setup steps. For more information on these settings, see [Properties for LDAP user authentication](https://druid.apache.org/docs/latest/development/extensions-core/druid-basic-security.html#properties-for-ldap-user-authentication).", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MTQ2NA==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499961464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In practice, most deployments will only need to define to classes of users: \n          \n          \n            \n            In practice, most deployments will only need to define two classes of users:", "author": "jon-wei", "createdAt": "2020-10-06T01:45:05Z", "path": "docs/operations/security-user-auth.md", "diffHunk": "@@ -0,0 +1,151 @@\n+---\n+id: security-user-auth\n+title: \"User authentication and authorization\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+\n+This document describes the Druid security model that extensions use to enable user authentication and authorization services to Druid. \n+\n+## Authentication and authorization model\n+\n+At the center of the Druid user authentication and authoratization model are _resources_ and _actions_. A resource is something that authenticated users are trying to access or modify. An action is something that users are trying to do. \n+\n+There are three resource types:\n+\n+* DATASOURCE &ndash; Each Druid table (i.e., `tables` in the `druid` schema in SQL) is a resource.\n+* CONFIG &ndash; Configuration resources exposed by the cluster components. \n+* STATE &ndash; Cluster-wide state resources.\n+\n+For specific resources associated with the types, see the endpoint list below and the corresponding descriptions of those endpoints on [API Reference](api-reference).\n+\n+There are two actions:\n+\n+* READ &ndash; Used for read-only operations.\n+* WRITE &ndash; Used for operations that are not read-only.\n+\n+In practice, most deployments will only need to define to classes of users: ", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MzA3Mw==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499963073", "bodyText": "This'll need the Apache license header", "author": "jon-wei", "createdAt": "2020-10-06T01:52:04Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2MzE0NA==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499963144", "bodyText": "This'll need the Apache license header", "author": "jon-wei", "createdAt": "2020-10-06T01:52:19Z", "path": "docs/operations/auth-ldap", "diffHunk": "@@ -0,0 +1,165 @@\n+---\n+id: auth-ldap\n+title: \"Using LDAP auth\"", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2NDEwMA==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499964100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more information, see [TLS support](tls-support) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext). \n          \n          \n            \n            For more information, see [TLS support](tls-support.md) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext).", "author": "jon-wei", "createdAt": "2020-10-06T01:56:27Z", "path": "docs/operations/security-overview.md", "diffHunk": "@@ -0,0 +1,244 @@\n+---\n+id: security-overview\n+title: \"Security overview\"\n+---\n+\n+\n+## Overview\n+\n+By default, security features in Druid are disabled, which simplifies the initial deployment experience. However, security features must be configured in a production deployment. These features including TLS, authentication, and authorization.\n+\n+To implement Druid security, you configure authenticators and authorizors. Authenticators control the way user identities are verified, while authorizers map the authenticated users (via user roles) to the datasources they are permitted to access. Consequently, implementing Druid security also involves consideration of your datasource scheme, given they represent the granularity at which data access permissions are allocated. \n+\n+The following graphic depicts the course of request through the authentication process: \n+\n+\n+![Druid security check flow](../assets/security-model-1.png \"Druid security check flow\") \n+\n+\n+This document gives you an overview of security features in Druid and how to configure them, and some best practices for securing Druid.\n+\n+\n+## Best practices\n+\n+* Do not expose the Druid Console without authentication on untrusted networks. Access to the console effectively confers access the file system on the installation machine, via file browsers in the UI. You should use an API gateway that restricts who can connect from untrusted networks, whitelists the specific APIs that your users need to access, and implements account lockout and throttling features.\n+* Grant users the minimum permissions necessary to perform their functions. For instance, do not allow user who only need to query data to write to data sources or view state.  \n+* Disable JavaScript, as noted in the [Security section](https://druid.apache.org/docs/latest/development/javascript.html#security) of the JavaScript guide.\n+* Run Druid as an unprivileged Unix user on the installation machine (not root).\n+   > This is an important point! Administrator users on Druid have the same permission as the Unix user account it is running under. If the Druid process is running under the root user account in the OS, then Administrator users on Druid can read/write all files that the root account has access to, including sensitive files such as /etc/passwd.\n+\n+You can configure authentication and authorization to control access to the the Druid APIs. The first step is enabling TLS for the cluster nodes. Then configure users, roles, and permissions, as described in the following sections. \n+\n+The configuration settings mentioned below are primarily located in the `common.runtime.properties` file. Note that you need to make the configuration changes on each Druid server in the cluster. \n+\n+\n+## Enable TLS\n+\n+The first step in securing Druid is enabling TLS. You can enable TLS to secure external client connections to Druid as well as connections between cluster nodes. \n+\n+The configuration steps are: \n+\n+1. Enable TLS by adding `druid.enableTlsPort=true` to `common.runtime.properties` on each node in the Druid cluster.\n+2. Follow the steps in [Understanding Certificates and Keys](https://www.eclipse.org/jetty/documentation/current/configuring-ssl.html#understanding-certificates-and-keys) to generate or import a key and certificate. \n+3. Configure the keystore and truststore settings in `common.runtime.properties`. The file should look something like this: \n+  ```\n+  druid.enablePlaintextPort=false\n+  druid.enableTlsPort=true\n+  \n+  druid.server.https.keyStoreType=jks\n+  druid.server.https.keyStorePath=imply-keystore.jks\n+  druid.server.https.keyStorePassword=secret123 # replace with your own password\n+  druid.server.https.certAlias=druid \n+  \n+  druid.client.https.protocol=TLSv1.2\n+  druid.client.https.trustStoreType=jks\n+  druid.client.https.trustStorePath=imply-truststore.jks\n+  druid.client.https.trustStorePassword=secret123  # replace with your own password\n+\n+  ``` \n+4. Add the `simple-client-sslcontext` extension to `druid.extensions.loadList` in common.runtime.properties. This enables TLS for Druid nodes acting as clients.\n+5. Restart the cluster.\n+\n+For more information, see [TLS support](tls-support) and [Simple SSLContext Provider Module](../development/extensions-core/simple-client-sslcontext). ", "originalCommit": "9049b057a5c6e4d5a93ebd570feb536e31b1bd74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2NDEzNw==", "url": "https://github.com/apache/druid/pull/10339#discussion_r499964137", "bodyText": "This link and others will need .md at the end", "author": "jon-wei", "createdAt": "2020-10-06T01:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk2NDEwMA=="}], "type": "inlineReview"}, {"oid": "995f6df15992d79c4f1331fb26b0b118b3e01c45", "url": "https://github.com/apache/druid/commit/995f6df15992d79c4f1331fb26b0b118b3e01c45", "message": "Update docs/operations/security-overview.md\n\nCo-authored-by: Jonathan Wei <jon-wei@users.noreply.github.com>", "committedDate": "2020-10-16T23:57:15Z", "type": "commit"}, {"oid": "8dbb076867abeb0c73c0cbb86a05040cc774b4be", "url": "https://github.com/apache/druid/commit/8dbb076867abeb0c73c0cbb86a05040cc774b4be", "message": "Update docs/operations/security-user-auth.md\n\nCo-authored-by: Jonathan Wei <jon-wei@users.noreply.github.com>", "committedDate": "2020-10-16T23:57:27Z", "type": "commit"}, {"oid": "d098643bc6d1432d0f9c035593481d536eab5890", "url": "https://github.com/apache/druid/commit/d098643bc6d1432d0f9c035593481d536eab5890", "message": "Update docs/operations/security-overview.md\n\nCo-authored-by: Jonathan Wei <jon-wei@users.noreply.github.com>", "committedDate": "2020-10-16T23:58:27Z", "type": "commit"}, {"oid": "150275cf06ecc7c4317b9e344b4ee48816cf1efb", "url": "https://github.com/apache/druid/commit/150275cf06ecc7c4317b9e344b4ee48816cf1efb", "message": "Update docs/operations/security-overview.md\n\nCo-authored-by: Jonathan Wei <jon-wei@users.noreply.github.com>", "committedDate": "2020-10-16T23:59:00Z", "type": "commit"}, {"oid": "50cf46d5cf9bfca40cde35f2178e1095386e6e7c", "url": "https://github.com/apache/druid/commit/50cf46d5cf9bfca40cde35f2178e1095386e6e7c", "message": "Merge branch 'master' of github.com:apache/druid into security-doc-revamp", "committedDate": "2020-10-22T23:31:38Z", "type": "commit"}, {"oid": "b4087173675eddafa7ab98af74bf55bf1d481061", "url": "https://github.com/apache/druid/commit/b4087173675eddafa7ab98af74bf55bf1d481061", "message": "updates frm review", "committedDate": "2020-10-22T23:32:48Z", "type": "commit"}, {"oid": "bbca88733d31af52fa308abd87d371852f42dbe8", "url": "https://github.com/apache/druid/commit/bbca88733d31af52fa308abd87d371852f42dbe8", "message": "review comments", "committedDate": "2020-10-27T22:32:45Z", "type": "commit"}, {"oid": "cdb170c15975e994ca608ffd46f5e8a5f1922662", "url": "https://github.com/apache/druid/commit/cdb170c15975e994ca608ffd46f5e8a5f1922662", "message": "finish up review and light edits", "committedDate": "2020-11-02T23:29:50Z", "type": "commit"}, {"oid": "4c4913297f3baa5a67130bf9b1210e4c16a187b8", "url": "https://github.com/apache/druid/commit/4c4913297f3baa5a67130bf9b1210e4c16a187b8", "message": "Merge branch 'master' into security-doc-revamp", "committedDate": "2020-11-02T23:38:47Z", "type": "commit"}, {"oid": "cf1414150dc2f3ff819e510617506ccc7c7403fc", "url": "https://github.com/apache/druid/commit/cf1414150dc2f3ff819e510617506ccc7c7403fc", "message": "broken links", "committedDate": "2020-11-03T01:06:24Z", "type": "commit"}, {"oid": "36879f151dff8f65764577b4cf1973547e54058e", "url": "https://github.com/apache/druid/commit/36879f151dff8f65764577b4cf1973547e54058e", "message": "Merge branch 'security-doc-revamp' of https://github.com/sthetland/druid into security-doc-revamp", "committedDate": "2020-11-03T01:06:34Z", "type": "commit"}, {"oid": "2cc97dfaa261aeef3e6675a06320fa059730fcf5", "url": "https://github.com/apache/druid/commit/2cc97dfaa261aeef3e6675a06320fa059730fcf5", "message": "spell check", "committedDate": "2020-11-03T17:07:21Z", "type": "commit"}]}