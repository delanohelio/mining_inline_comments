{"pr_number": 9384, "pr_title": "Add join prefix duplicate/shadowing check", "pr_createdAt": "2020-02-20T23:41:16Z", "pr_url": "https://github.com/apache/druid/pull/9384", "timeline": [{"oid": "43e8c721a20e5c13fbb79514672f82ba295429cd", "url": "https://github.com/apache/druid/commit/43e8c721a20e5c13fbb79514672f82ba295429cd", "message": "Add join prefix duplicate/shadowing check", "committedDate": "2020-02-20T23:38:12Z", "type": "commit"}, {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "url": "https://github.com/apache/druid/commit/8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "message": "Fix format string", "committedDate": "2020-02-21T18:32:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDg4NQ==", "url": "https://github.com/apache/druid/pull/9384#discussion_r382870885", "bodyText": "@VisibleForTesting Looks like this is only used in tests now", "author": "suneet-s", "createdAt": "2020-02-22T01:11:43Z", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -56,25 +56,29 @@\n   private final List<JoinableClause> clauses;\n   private final boolean enableFilterPushDown;\n \n+  /**\n+   * @param baseAdapter A StorageAdapter for the left-hand side base segment\n+   * @param clauses The right-hand side clauses. The caller is responsible for ensuring that there are no\n+   *                duplicate prefixes or prefixes that shadow each other across the clauses\n+   * @param enableFilterPushDown Whether to enable filter push down optimizations to the base segment\n+   */\n   HashJoinSegmentStorageAdapter(\n       StorageAdapter baseAdapter,\n-      List<JoinableClause> clauses\n+      List<JoinableClause> clauses,\n+      final boolean enableFilterPushDown\n   )\n   {\n     this.baseAdapter = baseAdapter;\n     this.clauses = clauses;\n-    this.enableFilterPushDown = QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_PUSH_DOWN;\n+    this.enableFilterPushDown = enableFilterPushDown;\n   }\n \n   HashJoinSegmentStorageAdapter(", "originalCommit": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNzczOQ==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383607739", "bodyText": "Added annotation", "author": "jon-wei", "createdAt": "2020-02-25T01:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTEyNg==", "url": "https://github.com/apache/druid/pull/9384#discussion_r382871126", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n          \n          \n            \n              private static void checkPreJoinableClausesForDuplicatesAndShadowing(", "author": "suneet-s", "createdAt": "2020-02-22T01:13:50Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(", "originalCommit": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNzg0OQ==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383607849", "bodyText": "Made this private", "author": "jon-wei", "createdAt": "2020-02-25T01:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTE0NA==", "url": "https://github.com/apache/druid/pull/9384#discussion_r382871144", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void checkPrefixesForDuplicatesAndShadowing(\n          \n          \n            \n              private static void checkPrefixesForDuplicatesAndShadowing(", "author": "suneet-s", "createdAt": "2020-02-22T01:13:59Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  public static void checkPrefixesForDuplicatesAndShadowing(", "originalCommit": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNzkxOA==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383607918", "bodyText": "I kept this public, it's used in tests and I think it could be useful as a general utility method", "author": "jon-wei", "createdAt": "2020-02-25T01:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjA2OA==", "url": "https://github.com/apache/druid/pull/9384#discussion_r382872068", "bodyText": "this function already exists, but I think it's faster to change the order of the boolean expression in isPrefixedBy\nreturn columnName.length() > prefix.length() && columnName.startsWith(prefix);", "author": "suneet-s", "createdAt": "2020-02-22T01:22:31Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  public static void checkPrefixesForDuplicatesAndShadowing(\n+      final List<String> prefixes\n+  )\n+  {\n+    for (int i = 0; i < prefixes.size(); i++) {\n+      String prefix1 = prefixes.get(i);\n+      for (int k = 0; k < prefixes.size(); k++) {\n+        if (i != k) {\n+          String otherPrefix = prefixes.get(k);\n+          if (prefix1.equals(otherPrefix)) {\n+            throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\", prefix1);\n+          }\n+\n+          if (isPrefixedBy(prefix1, otherPrefix)) {", "originalCommit": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNzk2Ng==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383607966", "bodyText": "cool, changed the order there", "author": "jon-wei", "createdAt": "2020-02-25T01:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM4MQ==", "url": "https://github.com/apache/druid/pull/9384#discussion_r382873381", "bodyText": "I think this should use a Trie of some sort here so the complexity isn't n + n^2 * k\nI don't know the best data structure to use here off the top of my head, but I can search. How many clauses is reasonable - if it's just 5, this may not matter in the big picture?", "author": "suneet-s", "createdAt": "2020-02-22T01:34:32Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);", "originalCommit": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwODMyMA==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383608320", "bodyText": "I think we'd typically have a small number of clauses and prefixes (one per JOIN statement in the query), I did some brief benchmarks with a radix tree approach and found it was significantly slower on the 6 prefix test I tried (https://github.com/jon-wei/druid/tree/join_prefix_check2)\nI think this is fine for now, I added a comment about the naive approach", "author": "jon-wei", "createdAt": "2020-02-25T01:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3Mzc2OQ==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383973769", "bodyText": "\ud83d\udc4d for the benchmarks. In my experience, sorting can actually be harmful at such small numbers. Just curious if you ran benchmarks to see if sorting would be beneficial here. Again, since it's such small numbers, it probably doesn't matter. Sorry for sending you on a wild goose chase with my comment.", "author": "suneet-s", "createdAt": "2020-02-25T16:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM5NA==", "url": "https://github.com/apache/druid/pull/9384#discussion_r382873394", "bodyText": "If the list is sorted by size (largest -> smallest) we can change this loop to k = i instead of k = 0", "author": "suneet-s", "createdAt": "2020-02-22T01:34:45Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  public static void checkPrefixesForDuplicatesAndShadowing(\n+      final List<String> prefixes\n+  )\n+  {\n+    for (int i = 0; i < prefixes.size(); i++) {\n+      String prefix1 = prefixes.get(i);\n+      for (int k = 0; k < prefixes.size(); k++) {", "originalCommit": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwODQ0OA==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383608448", "bodyText": "Added a sort and the k = i optimization", "author": "jon-wei", "createdAt": "2020-02-25T01:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM5NA=="}], "type": "inlineReview"}, {"oid": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "url": "https://github.com/apache/druid/commit/45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "message": "PR comments", "committedDate": "2020-02-25T01:14:37Z", "type": "commit"}, {"oid": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "url": "https://github.com/apache/druid/commit/45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "message": "PR comments", "committedDate": "2020-02-25T01:14:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3MjU1Mw==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383972553", "bodyText": "nit: use (s1, s2) -> Integer.compare(s2.length(), s1.length()) instead.\nLess code to read / maintain.", "author": "suneet-s", "createdAt": "2020-02-25T15:58:57Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -39,6 +40,16 @@\n  */\n public class Joinables\n {\n+  private static final Comparator<String> DESCENDING_LENGTH_STRING_COMPARATOR = (s1, s2) -> {\n+    if (s1.length() > s2.length()) {\n+      return -1;\n+    } else if (s1.length() < s2.length()) {\n+      return 1;\n+    } else {\n+      return 0;\n+    }\n+  };", "originalCommit": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNTE3Mw==", "url": "https://github.com/apache/druid/pull/9384#discussion_r384135173", "bodyText": "Changed the comparator", "author": "jon-wei", "createdAt": "2020-02-25T21:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3MjU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTE1OQ==", "url": "https://github.com/apache/druid/pull/9384#discussion_r383979159", "bodyText": "I think this comment is throwing me off. If building the clause is expensive, checking for duplicates ahead of time only helps you fail faster at the cost of correct queries being slightly slower.\nI think this needs to be done ahead of time because checking while building the JoinableClauses is slower than checking ahead of time. Is that correct?", "author": "suneet-s", "createdAt": "2020-02-25T16:08:51Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -100,6 +112,9 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       final JoinableFactory joinableFactory\n   )\n   {\n+    // Since building a JoinableClause can be expensive, check for prefix conflicts before building", "originalCommit": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMjcwMg==", "url": "https://github.com/apache/druid/pull/9384#discussion_r384132702", "bodyText": "I think this needs to be done ahead of time because checking while building the JoinableClauses is slower than checking ahead of time. Is that correct?\n\nYes, that's correct, it's to fail fast before doing the potentially expensive joinableFactory.build calls.", "author": "jon-wei", "createdAt": "2020-02-25T21:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTE1OQ=="}], "type": "inlineReview"}, {"oid": "665c4b2b971c7ab7bb88c5925c95c65f1f56cc10", "url": "https://github.com/apache/druid/commit/665c4b2b971c7ab7bb88c5925c95c65f1f56cc10", "message": "PR comment", "committedDate": "2020-02-25T21:25:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4NDA2NQ==", "url": "https://github.com/apache/druid/pull/9384#discussion_r384184065", "bodyText": "Can the check for i != k be removed if k is initialized to i + 1?", "author": "ccaominh", "createdAt": "2020-02-25T23:13:24Z", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +122,45 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  private static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  /**\n+   * Check if any prefixes in the provided list duplicate or shadow each other.\n+   *\n+   * @param prefixes A mutable list containing the prefixes to check. This list will be sorted by descending\n+   *                 string length.\n+   */\n+  public static void checkPrefixesForDuplicatesAndShadowing(\n+      final List<String> prefixes\n+  )\n+  {\n+    // this is a naive approach that assumes we'll typically handle only a small number of prefixes\n+    prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n+    for (int i = 0; i < prefixes.size(); i++) {\n+      String prefix = prefixes.get(i);\n+      for (int k = i; k < prefixes.size(); k++) {\n+        if (i != k) {", "originalCommit": "665c4b2b971c7ab7bb88c5925c95c65f1f56cc10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NDg3Nw==", "url": "https://github.com/apache/druid/pull/9384#discussion_r384194877", "bodyText": "Good point, initializes to i + 1 now", "author": "jon-wei", "createdAt": "2020-02-25T23:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4NDA2NQ=="}], "type": "inlineReview"}, {"oid": "bde2fe4755cba2eb60562deb3e67888375aa95ae", "url": "https://github.com/apache/druid/commit/bde2fe4755cba2eb60562deb3e67888375aa95ae", "message": "Optimize loop PR comment", "committedDate": "2020-02-25T23:42:32Z", "type": "commit"}]}