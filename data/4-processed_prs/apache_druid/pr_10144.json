{"pr_number": 10144, "pr_title": "Follow-up for RetryQueryRunner fix", "pr_createdAt": "2020-07-06T23:13:04Z", "pr_url": "https://github.com/apache/druid/pull/10144", "timeline": [{"oid": "964833e4ad61868c4253356d13ca829f74e62ecc", "url": "https://github.com/apache/druid/commit/964833e4ad61868c4253356d13ca829f74e62ecc", "message": "address comments; use guice instead of query context", "committedDate": "2020-07-06T23:07:08Z", "type": "commit"}, {"oid": "c2c929cc884191b49ee751a63de6f5ec7dd4d8b4", "url": "https://github.com/apache/druid/commit/c2c929cc884191b49ee751a63de6f5ec7dd4d8b4", "message": "typo", "committedDate": "2020-07-07T05:24:16Z", "type": "commit"}, {"oid": "2ebedc17e4f4b272dc0df958c4a3580adab47089", "url": "https://github.com/apache/druid/commit/2ebedc17e4f4b272dc0df958c4a3580adab47089", "message": "QueryResource tests", "committedDate": "2020-07-07T19:20:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2MjI2NQ==", "url": "https://github.com/apache/druid/pull/10144#discussion_r451162265", "bodyText": "Suggested rewording:\n\nAn intermediate response context for the query exceeded the built-in limit of 7KB.The response context is an internal data structure that Druid servers use to share out-of-band information when sending query results to each other. It is serialized in an HTTP header with a maximum length of 7KB. This error occurs when an intermediate response context sent from a data server (like a Historical) to the Broker exceeds this limit.The response context is used for a variety of purposes, but the one most likely to generate a large context is sharing details about segments that move during a query. That means this error can potentially indicate that a very large number of segments moved in between the time a Broker issued a query and the time it was processed on Historicals. This should rarely, if ever, occur during normal operation.", "author": "gianm", "createdAt": "2020-07-07T21:46:12Z", "path": "docs/querying/querying.md", "diffHunk": "@@ -139,4 +139,5 @@ Possible codes for the *error* field include:\n |`Resource limit exceeded`|The query exceeded a configured resource limit (e.g. groupBy maxResults).|\n |`Unauthorized request.`|The query was denied due to security policy. Either the user was not recognized, or the user was recognized but does not have access to the requested resource.|\n |`Unsupported operation`|The query attempted to perform an unsupported operation. This may occur when using undocumented features or when using an incompletely implemented extension.|\n+|`Truncated response context`|The response context is an internal data structure to store intermediate state during query processing. Some of states are collected from query servers (such as historicals or realtime tasks) and merged in the Broker. To send those states to the Broker, the query servers serialize them in the HTTP header and send it together with the stream of intermediate query result. As the max size of an HTTP header is limited to 7 KB in Druid, this error can occur if JSON-serialized response context is larger than the limit.<br/><br/>This error shouldn't happen in most cases. A possible cause of this error can be too many segments moving (for segment balancing) at the time when a query is issued which reads lots of segments. You should be able to see debug logs about missing segments in the historical logs if you are facing this case.|", "originalCommit": "2ebedc17e4f4b272dc0df958c4a3580adab47089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NjM2MA==", "url": "https://github.com/apache/druid/pull/10144#discussion_r451256360", "bodyText": "\ud83d\udc4d", "author": "jihoonson", "createdAt": "2020-07-08T03:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2MjI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MTk4OA==", "url": "https://github.com/apache/druid/pull/10144#discussion_r451171988", "bodyText": "It looks like this should work, but why not create a reasonable ResponseContextConfig and bind it directly to ResponseContextConfig.class? Seems like that would be simpler.", "author": "gianm", "createdAt": "2020-07-07T22:09:03Z", "path": "services/src/main/java/org/apache/druid/cli/CliBroker.java", "diffHunk": "@@ -102,6 +103,12 @@ public CliBroker()\n           binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(8282);\n           binder.bindConstant().annotatedWith(PruneLoadSpec.class).to(true);\n           binder.bindConstant().annotatedWith(PruneLastCompactionState.class).to(true);\n+          binder.bindConstant()", "originalCommit": "2ebedc17e4f4b272dc0df958c4a3580adab47089", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NzI4Mg==", "url": "https://github.com/apache/druid/pull/10144#discussion_r451257282", "bodyText": "Ah, there was only one constant to bind at first (shouldFailOnTruncatedResponseContext), and so I just added a constant binding. Later, to make the test coverage check happier, I added another constant maxResponseContextHeaderSize and just copy-pasted existing code \ud83d\ude05. Changed to directly bind the context class.", "author": "jihoonson", "createdAt": "2020-07-08T03:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MTk4OA=="}], "type": "inlineReview"}, {"oid": "278917c85cdcbd61a7aede7cdb66336a6d0044bf", "url": "https://github.com/apache/druid/commit/278917c85cdcbd61a7aede7cdb66336a6d0044bf", "message": "address comments", "committedDate": "2020-07-08T03:08:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMzU5Ng==", "url": "https://github.com/apache/druid/pull/10144#discussion_r451323596", "bodyText": "should this be any QueryException?", "author": "clintropolis", "createdAt": "2020-07-08T06:58:53Z", "path": "server/src/main/java/org/apache/druid/server/QueryResource.java", "diffHunk": "@@ -309,6 +309,11 @@ public void write(OutputStream outputStream) throws WebApplicationException\n             .header(HEADER_RESPONSE_CONTEXT, serializationResult.getResult())\n             .build();\n       }\n+      catch (QueryInterruptedException e) {", "originalCommit": "278917c85cdcbd61a7aede7cdb66336a6d0044bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fba858a92047e72a09531dac3694ecc7cf7f9ed4", "url": "https://github.com/apache/druid/commit/fba858a92047e72a09531dac3694ecc7cf7f9ed4", "message": "catch queryException", "committedDate": "2020-07-08T17:22:48Z", "type": "commit"}, {"oid": "4725cd535ccb95216c0c67d67d2c659dacabf2f4", "url": "https://github.com/apache/druid/commit/4725cd535ccb95216c0c67d67d2c659dacabf2f4", "message": "fix spell check", "committedDate": "2020-07-08T18:58:29Z", "type": "commit"}]}