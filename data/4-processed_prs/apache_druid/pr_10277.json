{"pr_number": 10277, "pr_title": "make dimension column extensible with COMPLEX type", "pr_createdAt": "2020-08-13T21:43:39Z", "pr_url": "https://github.com/apache/druid/pull/10277", "timeline": [{"oid": "bb9342655daf28733b2fdcb8f889a1e60608ba2d", "url": "https://github.com/apache/druid/commit/bb9342655daf28733b2fdcb8f889a1e60608ba2d", "message": "make dimension column extensible with COMPLEX type", "committedDate": "2020-08-13T21:28:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMzY0Nw==", "url": "https://github.com/apache/druid/pull/10277#discussion_r472433647", "bodyText": "could this be getComplexTypeName to tie it more strongly to complex types? It would also match the aggregator factory changes in #9638 which I've started working on again recently. If you recall this discussion #9638 (comment), I decided to go ahead and rename it to getComplexTypeName there because there are already breaking changes with the new abstract methods, so might as well make it intuitive.", "author": "clintropolis", "createdAt": "2020-08-18T19:35:32Z", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -37,6 +37,12 @@\n    */\n   ValueType getType();\n \n+  /**\n+   *\n+   * If ValueType is COMPLEX, then the typeName associated with it.\n+   */\n+  String getTypeName();", "originalCommit": "bb9342655daf28733b2fdcb8f889a1e60608ba2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNTA1Nw==", "url": "https://github.com/apache/druid/pull/10277#discussion_r472515057", "bodyText": "sgtm", "author": "himanshug", "createdAt": "2020-08-18T21:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMzY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMjg2NA==", "url": "https://github.com/apache/druid/pull/10277#discussion_r532332864", "bodyText": "changed", "author": "himanshug", "createdAt": "2020-11-30T03:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMzY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjE2Ng==", "url": "https://github.com/apache/druid/pull/10277#discussion_r472436166", "bodyText": "Apologies for the conflicts here, I made some semi disruptive changes to push ColumnCapabilities into the DimensionIndexer implementations so they can be more accurate. I think the changes should still be workable with your addition of DimensionHandlerProvider, just the dimension indexer it provides will need to provide the complex column capabilities.", "author": "clintropolis", "createdAt": "2020-08-18T19:40:34Z", "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -314,7 +315,12 @@ protected IncrementalIndex(\n     for (DimensionSchema dimSchema : dimensionsSpec.getDimensions()) {\n       ValueType type = TYPE_MAP.get(dimSchema.getValueType());\n       String dimName = dimSchema.getName();\n-      ColumnCapabilitiesImpl capabilities = makeDefaultCapabilitiesFromValueType(type);\n+\n+      // Note: Things might be simpler if DimensionSchema had a method \"getColumnCapabilities()\" which could return\n+      // type specific capabilities by itself. However, for various reasons, DimensionSchema currently lives in druid-core\n+      // while ColumnCapabilities lives in druid-processing which makes that approach difficult.\n+      ColumnCapabilitiesImpl capabilities = makeDefaultCapabilitiesFromValueType(type, dimSchema.getTypeName());", "originalCommit": "bb9342655daf28733b2fdcb8f889a1e60608ba2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNTU4Mw==", "url": "https://github.com/apache/druid/pull/10277#discussion_r472515583", "bodyText": "it should be alright, I will update this PR later when I have my MapStringString extension ready/deployed and tested with changes in this patch. thanks for the heads up.", "author": "himanshug", "createdAt": "2020-08-18T21:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjE2Ng=="}], "type": "inlineReview"}, {"oid": "ef550dc66c8db89a84693805fe3a4e20c4690a06", "url": "https://github.com/apache/druid/commit/ef550dc66c8db89a84693805fe3a4e20c4690a06", "message": "Merge remote-tracking branch 'apache/master' into extensible_dim\n\nChange-Id: I6aad1f268c9304082806e2efb5f8fe9ec03a1aa6", "committedDate": "2020-08-26T18:18:01Z", "type": "commit"}, {"oid": "a9eb0f85f9864d1c9f004146337e21d76a35c4bd", "url": "https://github.com/apache/druid/commit/a9eb0f85f9864d1c9f004146337e21d76a35c4bd", "message": "more changes\n\nChange-Id: I9707dd644b8d71030b74a8c1d6fff0c0020d960d", "committedDate": "2020-08-26T18:20:38Z", "type": "commit"}, {"oid": "7535e3d2e2103e7a531d425d970062b66c263dc1", "url": "https://github.com/apache/druid/commit/7535e3d2e2103e7a531d425d970062b66c263dc1", "message": "Merge remote-tracking branch 'apache/master' into extensible_dim\n\nChange-Id: I4f900940120512b0e058bdbbf9cc0d3b17a1fea0", "committedDate": "2020-08-26T19:22:48Z", "type": "commit"}, {"oid": "4998a0cabf98b6825a0955a95da01f3af40f4e5c", "url": "https://github.com/apache/druid/commit/4998a0cabf98b6825a0955a95da01f3af40f4e5c", "message": "Merge remote-tracking branch 'apache/master' into extensible_dim\n\nChange-Id: I687a2799c105cc4ec68bbbc51f613ee36075541a", "committedDate": "2020-08-27T16:20:11Z", "type": "commit"}, {"oid": "026ca40bb1efa39a93f09ea10c7dc5a9d71a0572", "url": "https://github.com/apache/druid/commit/026ca40bb1efa39a93f09ea10c7dc5a9d71a0572", "message": "processing module changes for build fix\n\nChange-Id: I146f95a41b79d20edb1721be13f0e9641f788e0e", "committedDate": "2020-08-27T17:19:01Z", "type": "commit"}, {"oid": "3cc4de73e1a8324e5b7aa65d958fc0dd4db54eb3", "url": "https://github.com/apache/druid/commit/3cc4de73e1a8324e5b7aa65d958fc0dd4db54eb3", "message": "Merge remote-tracking branch 'origin/master' into extensible_dim", "committedDate": "2020-11-24T01:41:27Z", "type": "commit"}, {"oid": "a2a7d9e309cc39c33f1b031503e8d626a9b01fc0", "url": "https://github.com/apache/druid/commit/a2a7d9e309cc39c33f1b031503e8d626a9b01fc0", "message": "rename ColumnCapabilities.getTypeName() to getComplexTypeName()", "committedDate": "2020-11-29T23:08:24Z", "type": "commit"}, {"oid": "aef7890ef15c10e43bc212d1c19b595dc5f5eae1", "url": "https://github.com/apache/druid/commit/aef7890ef15c10e43bc212d1c19b595dc5f5eae1", "message": "Merge remote-tracking branch 'origin/master' into extensible_dim", "committedDate": "2020-11-29T23:11:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNTI2Nw==", "url": "https://github.com/apache/druid/pull/10277#discussion_r532525267", "bodyText": "nit: this should be setComplexTypeName probably to match capabilities", "author": "clintropolis", "createdAt": "2020-11-30T11:23:50Z", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnBuilder.java", "diffHunk": "@@ -58,6 +58,12 @@ public ColumnBuilder setType(ValueType type)\n     return this;\n   }\n \n+  public ColumnBuilder setTypeName(String typeName)", "originalCommit": "aef7890ef15c10e43bc212d1c19b595dc5f5eae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU4ODQ3Nw==", "url": "https://github.com/apache/druid/pull/10277#discussion_r534588477", "bodyText": "thanks, yeah updated, I missed it.", "author": "himanshug", "createdAt": "2020-12-03T01:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNTI2Nw=="}], "type": "inlineReview"}, {"oid": "5ccbf40db37eed7be1c5f6e2f334438a5cc9d67e", "url": "https://github.com/apache/druid/commit/5ccbf40db37eed7be1c5f6e2f334438a5cc9d67e", "message": "Merge remote-tracking branch 'origin/master' into extensible_dim", "committedDate": "2020-12-03T00:42:14Z", "type": "commit"}, {"oid": "fa365ef5d4edf6ffd1008cff207b4a408adae668", "url": "https://github.com/apache/druid/commit/fa365ef5d4edf6ffd1008cff207b4a408adae668", "message": "rename ColumnBuilder.setTypeName(..) -> ColumnBuilder.setComplexTypeName(..)", "committedDate": "2020-12-03T00:42:55Z", "type": "commit"}]}