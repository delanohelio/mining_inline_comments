{"pr_number": 3635, "pr_title": "CATROID-563 refactor RepeatUntilAction to Kotlin", "pr_createdAt": "2020-06-16T12:17:08Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3635", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNzExMw==", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441507113", "bodyText": "For readability, I'd suggest\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0 != 0\n          \n          \n            \n                        (repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0) != 0", "author": "lweitzendorf", "createdAt": "2020-06-17T12:29:47Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                if (repeatCondition == null) {\n+                    return false\n+                }\n+                repeatCondition?.interpretDouble(sprite)\n+            } catch (interpretationException: InterpretationException) {\n+                Log.d(\n+                    javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                    interpretationException\n+                )\n+                return false\n+            }\n+            return true\n+        }\n+\n+    private val isConditionTrue: Boolean\n+        get() = try {\n+            repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0 != 0", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODY2NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441598665", "bodyText": "lint doesn't like this :(", "author": "Koell", "createdAt": "2020-06-17T14:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNzExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjEwOQ==", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441526109", "bodyText": "You could simplify this to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (repeatCondition == null) {\n          \n          \n            \n                                return false\n          \n          \n            \n                            }\n          \n          \n            \n                            repeatCondition?.interpretDouble(sprite)\n          \n          \n            \n                            repeatCondition?.interpretDouble(sprite) ?: return false", "author": "lweitzendorf", "createdAt": "2020-06-17T13:01:19Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                if (repeatCondition == null) {\n+                    return false\n+                }\n+                repeatCondition?.interpretDouble(sprite)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNzI5Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r441527296", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (action != null) {\n          \n          \n            \n                            action.restart()\n          \n          \n            \n                        }\n          \n          \n            \n                        action?.restart()", "author": "lweitzendorf", "createdAt": "2020-06-17T13:03:08Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                if (repeatCondition == null) {\n+                    return false\n+                }\n+                repeatCondition?.interpretDouble(sprite)\n+            } catch (interpretationException: InterpretationException) {\n+                Log.d(\n+                    javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                    interpretationException\n+                )\n+                return false\n+            }\n+            return true\n+        }\n+\n+    private val isConditionTrue: Boolean\n+        get() = try {\n+            repeatCondition?.interpretDouble(sprite)?.toInt() ?: 0 != 0\n+        } catch (interpretationException: InterpretationException) {\n+            Log.d(\n+                javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                interpretationException\n+            )\n+            true\n+        }\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isValidConditionFormula) {\n+            return true\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            if (isConditionTrue) {\n+                return true\n+            }\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (isConditionTrue) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE1NzkwNA==", "url": "https://github.com/Catrobat/Catroid/pull/3635#discussion_r444157904", "bodyText": "PLEASE-FIX: refactor the boolean flags to functions, since from line 68 till here, the code implies that the value of isConditionTrue might magically change.  Please, only use get()/set() for small code to verify input etc..\nhttps://kotlinlang.org/docs/reference/properties.html#backing-fields", "author": "gPathpp", "createdAt": "2020-06-23T11:39:06Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatUntilAction.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatUntilAction : RepeatAction() {\n+    var executedCount = 0\n+        private set\n+    var sprite: Sprite? = null\n+    var repeatCondition: Formula? = null\n+    private var isCurrentLoopInitialized = false\n+    private var currentTime = 0f\n+    private val isValidConditionFormula: Boolean\n+        get() {\n+            try {\n+                repeatCondition?.interpretDouble(sprite) ?: return false\n+            } catch (interpretationException: InterpretationException) {\n+                Log.d(\n+                    javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                    interpretationException\n+                )\n+                return false\n+            }\n+            return true\n+        }\n+\n+    private val isConditionTrue: Boolean\n+        get() = try {\n+            repeatCondition?.interpretDouble(sprite) != 0.0\n+        } catch (interpretationException: InterpretationException) {\n+            Log.d(\n+                javaClass.simpleName, \"Formula interpretation for this specific Brick failed.\",\n+                interpretationException\n+            )\n+            true\n+        }\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isValidConditionFormula) {\n+            return true\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            if (isConditionTrue) {\n+                return true\n+            }\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (isConditionTrue) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "589d127456c749ae36a5dc45de0b58a81aa0b1dc", "url": "https://github.com/Catrobat/Catroid/commit/589d127456c749ae36a5dc45de0b58a81aa0b1dc", "message": "CATROID-541 refactor RepeatUntilAction to Kotlin", "committedDate": "2020-06-23T12:09:53Z", "type": "commit"}, {"oid": "589d127456c749ae36a5dc45de0b58a81aa0b1dc", "url": "https://github.com/Catrobat/Catroid/commit/589d127456c749ae36a5dc45de0b58a81aa0b1dc", "message": "CATROID-541 refactor RepeatUntilAction to Kotlin", "committedDate": "2020-06-23T12:09:53Z", "type": "forcePushed"}]}