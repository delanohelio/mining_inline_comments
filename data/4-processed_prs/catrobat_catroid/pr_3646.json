{"pr_number": 3646, "pr_title": "CATROID-564 Refactor RepeatAction to Kotlin", "pr_createdAt": "2020-06-24T13:22:57Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3646", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMTU5MA==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446111590", "bodyText": "val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n?. returns null if repeatCount is null instead of trying to use interpretDouble\n?: return 0.0 if the statement before it is null", "author": "Koell", "createdAt": "2020-06-26T10:50:32Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation =\n+                if (repeatCount == null) java.lang.Double.valueOf(0.0) else repeatCount!!.interpretDouble(\n+                    sprite\n+                )", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMjA1Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446112053", "bodyText": "action?.restart()\nif action is null restart is not invoked", "author": "Koell", "createdAt": "2020-06-26T10:51:42Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NzYyMw==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r446347623", "bodyText": "Since the setter is public, why not change private var to var? Kotlin will create implicit functions to interact with Java.\nFor other cases, where you only need a public getter, you can also declare it as var and declare the setter as private. See https://kotlinlang.org/docs/reference/properties.html under setterVisibility.", "author": "lweitzendorf", "createdAt": "2020-06-26T18:35:56Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var repeatCount: Formula? = null\n+    private var sprite: Sprite? = null\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    private var isForeverRepeat = false\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            if (action != null) {\n+                action.restart()\n+            }\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation =\n+                if (repeatCount == null) java.lang.Double.valueOf(0.0) else repeatCount!!.interpretDouble(\n+                    sprite\n+                )\n+            repeatCountValue = interpretation.toInt()\n+        } catch (interpretationException: InterpretationException) {\n+            repeatCountValue = 0\n+            Log.d(\n+                javaClass.simpleName,\n+                \"Formula interpretation for this specific Brick failed.\",\n+                interpretationException\n+            )\n+        }\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    fun setIsForeverRepeat(isForeverRepeat: Boolean) {\n+        this.isForeverRepeat = isForeverRepeat\n+    }\n+\n+    fun setRepeatCount(repeatCount: Formula?) {\n+        this.repeatCount = repeatCount", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3344a3371ef72cf8b4086b1db40029535c2ea42a", "url": "https://github.com/Catrobat/Catroid/commit/3344a3371ef72cf8b4086b1db40029535c2ea42a", "message": "CATROID-564 Refactor RepeatAction to Kotlin", "committedDate": "2020-07-23T10:45:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyODkyNw==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473428927", "bodyText": "please change to  lateinit var sprite: Sprite, sprite is never gonna be null.", "author": "ndrnour", "createdAt": "2020-08-19T23:25:09Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null", "originalCommit": "3344a3371ef72cf8b4086b1db40029535c2ea42a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMDM0NA==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477420344", "bodyText": "changed this", "author": "trummerp", "createdAt": "2020-08-26T16:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyODkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyOTcwMA==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473429700", "bodyText": "please change this to  lateinit var repeatCountFormula: Formula", "author": "ndrnour", "createdAt": "2020-08-19T23:26:09Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null", "originalCommit": "3344a3371ef72cf8b4086b1db40029535c2ea42a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMjE3Nw==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477422177", "bodyText": "I think I need to leave this as it is because of the null testcase", "author": "trummerp", "createdAt": "2020-08-26T16:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyOTcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1NzQxOQ==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r485557419", "bodyText": "Thats right", "author": "Koell", "createdAt": "2020-09-09T12:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyOTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMzk2NA==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r473433964", "bodyText": "please remove this line repeatCountValue = interpretation.toInt()\nand change the line before to val interpretation = repeatCountFormula.interpretInteger(sprite) no need for ?: 0.0 cause the function goona throw an InterpretationException when it fails..", "author": "ndrnour", "createdAt": "2020-08-19T23:32:00Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/RepeatAction.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.RepeatAction\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+\n+class RepeatAction : RepeatAction() {\n+    private var executedCount = 0\n+    private var isCurrentLoopInitialized = false\n+    private var isRepeatActionInitialized = false\n+    private var repeatCountValue = 0\n+    private var currentTime = 0f\n+    var sprite: Sprite? = null\n+    var isForeverRepeat = false\n+    var repeatCount: Formula? = null\n+\n+    public override fun delegate(delta: Float): Boolean {\n+        if (!isRepeatActionInitialized) {\n+            isRepeatActionInitialized = true\n+            interpretRepeatCount()\n+        }\n+        if (!isCurrentLoopInitialized) {\n+            currentTime = 0f\n+            isCurrentLoopInitialized = true\n+        }\n+        currentTime += delta\n+        if (repeatCountValue < 0) {\n+            repeatCountValue = 0\n+        }\n+        if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+            return true\n+        }\n+        if (action != null && action.act(delta) && currentTime >= LOOP_DELAY) {\n+            executedCount++\n+            if (executedCount >= repeatCountValue && !isForeverRepeat) {\n+                return true\n+            }\n+            isCurrentLoopInitialized = false\n+            action?.restart()\n+        }\n+        return false\n+    }\n+\n+    override fun restart() {\n+        isCurrentLoopInitialized = false\n+        isRepeatActionInitialized = false\n+        executedCount = 0\n+        super.restart()\n+    }\n+\n+    private fun interpretRepeatCount() {\n+        try {\n+            val interpretation = repeatCount?.interpretDouble(sprite) ?: 0.0\n+            repeatCountValue = interpretation.toInt()", "originalCommit": "3344a3371ef72cf8b4086b1db40029535c2ea42a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM2ODEyMw==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477368123", "bodyText": "repeatCountValue = repeatCount?.interpretInteger(sprite) ?: 0\nwould be an ever shorter reduction, the ?: 0 is necessary to handle Formula == null, and a dangling NPE would not be optimal", "author": "Koell", "createdAt": "2020-08-26T14:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NDgwOQ==", "url": "https://github.com/Catrobat/Catroid/pull/3646#discussion_r477394809", "bodyText": "bzw g\u00e4ng das auch als\nrepeatCountValue = try{\nrepeatCount?.interpretInteger(sprite) ?: 0\n}catch (interpretationException: InterpretationException) {\nLog.d(\njavaClass.simpleName,\n\"Formula interpretation for this specific Brick failed.\",\ninterpretationException\n)\n0\n}", "author": "Koell", "createdAt": "2020-08-26T15:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMzk2NA=="}], "type": "inlineReview"}, {"oid": "e2e776ed667921609fa73406f30a6dbf2c04857f", "url": "https://github.com/Catrobat/Catroid/commit/e2e776ed667921609fa73406f30a6dbf2c04857f", "message": "CATROID-564 Refactor RepeatAction to Kotlin", "committedDate": "2020-08-26T16:08:58Z", "type": "forcePushed"}, {"oid": "74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "url": "https://github.com/Catrobat/Catroid/commit/74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "message": "CATROID-564 Refactor RepeatAction to Kotlin", "committedDate": "2020-08-26T16:29:11Z", "type": "commit"}, {"oid": "74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "url": "https://github.com/Catrobat/Catroid/commit/74c7c8cb0037b44c7787aad2f71b3864e0fd82f5", "message": "CATROID-564 Refactor RepeatAction to Kotlin", "committedDate": "2020-08-26T16:29:11Z", "type": "forcePushed"}]}