{"pr_number": 3597, "pr_title": "CATROID-497 Predefined white-list of safe URL patterns for \"Send web \u2026", "pr_createdAt": "2020-05-06T14:37:52Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3597", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3854cbfb5a4840177b315ef4b40e9d71a88525d3", "url": "https://github.com/Catrobat/Catroid/commit/3854cbfb5a4840177b315ef4b40e9d71a88525d3", "message": "CATROID-551 Assert brick behavior differs from equality sign in formula\n\nFixes behavior where assert brick would not consider -0 and 0 to be equal", "committedDate": "2020-05-12T14:21:58Z", "type": "forcePushed"}, {"oid": "5cbfa576f4140d6bbf9c4fc1deeb598aaa35781d", "url": "https://github.com/Catrobat/Catroid/commit/5cbfa576f4140d6bbf9c4fc1deeb598aaa35781d", "message": "Refactoring HTTP status codes into constants", "committedDate": "2020-05-12T19:17:40Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "d9718aee024b17e35e4fab6e67dff77b3277ada1", "url": "https://github.com/Catrobat/Catroid/commit/d9718aee024b17e35e4fab6e67dff77b3277ada1", "message": "CATROID-457 Add warning dialog for \"Send web request\" brick\n\nAdds warning dialog to confirm web request to URL is allowed by user", "committedDate": "2020-05-30T16:27:25Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNzA2Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432917066", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <string name=\"brick_web_request_default_value\">https://official-joke-api.appspot.com/random_joke</string>\n          \n          \n            \n                <string name=\"brick_web_request_default_value\">https://catrob.at/joke</string>\n          \n      \n    \n    \n  \n\nThis change allows us to collect statistics, and also change the link in case the https://official-joke-api.appspot.com/random_joke does not work anymore sometimes in the future.", "author": "wslany", "createdAt": "2020-05-31T07:04:36Z", "path": "catroid/src/main/res/values/strings.xml", "diffHunk": "@@ -1269,6 +1269,8 @@\n     <string name=\"brick_replace_item_in_userlist_with_value\">with</string>\n     <string name=\"brick_web_request\">Send web request to</string>\n     <string name=\"brick_web_request_result\">and store answer in</string>\n+    <string name=\"brick_web_request_ask_permission\">Allow web access?</string>\n+    <string name=\"brick_web_request_dialog_url\">URL: %1$s</string>\n     <string name=\"brick_web_request_default_value\">https://official-joke-api.appspot.com/random_joke</string>", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNzM1Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432917353", "bodyText": "Please, as discussed on Slack, let's get rid of the \"URL: \" here and as a consequence also of the brick_web_request_dialog_url text resource, since the former does not add information and anyway is not so well known among our user group, the latter anyway should never be translated, and there's a bit more space in the one line on the display if we can remove the URL: in front of the actual url on the phone's screen. Sorry, this was already specified in a suboptimal way by me on the ticket.", "author": "wslany", "createdAt": "2020-05-31T07:08:14Z", "path": "catroid/src/main/res/values/strings.xml", "diffHunk": "@@ -1269,6 +1269,8 @@\n     <string name=\"brick_replace_item_in_userlist_with_value\">with</string>\n     <string name=\"brick_web_request\">Send web request to</string>\n     <string name=\"brick_web_request_result\">and store answer in</string>\n+    <string name=\"brick_web_request_ask_permission\">Allow web access?</string>\n+    <string name=\"brick_web_request_dialog_url\">URL: %1$s</string>", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxODU3OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432918579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/blablabla\"))\n          \n          \n            \n                    assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/blablabla\"))\n          \n          \n            \n                    assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/\"))\n          \n      \n    \n    \n  \n\nThe second, additional line currently incorrectly does not match yet, but should. Please change the regex to allow for it as well.", "author": "wslany", "createdAt": "2020-05-31T07:25:37Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/utiltests/URLWhiteListTest.kt", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.utiltests\n+\n+import android.content.Context\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.utils.Utils\n+import org.json.JSONArray\n+import org.json.JSONObject\n+import org.junit.After\n+import org.junit.Assert.assertFalse\n+import org.junit.Assert.assertTrue\n+import org.junit.Before\n+import org.junit.BeforeClass\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.mockito.ArgumentMatchers.any\n+import org.mockito.ArgumentMatchers.anyString\n+import org.mockito.BDDMockito.given\n+import org.powermock.api.mockito.PowerMockito.doReturn\n+import org.powermock.api.mockito.PowerMockito.mock\n+import org.powermock.api.mockito.PowerMockito.mockStatic\n+import org.powermock.core.classloader.annotations.PrepareForTest\n+import org.powermock.modules.junit4.PowerMockRunner\n+import java.io.InputStream\n+\n+@RunWith(PowerMockRunner::class)\n+@PrepareForTest(Utils::class)\n+class URLWhiteListTest {\n+    private lateinit var domains: JSONArray\n+\n+    companion object {\n+        @BeforeClass\n+        @JvmStatic\n+        fun setUpBeforeClass() {\n+            ProjectManager(mock(Context::class.java))\n+        }\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        val stream = mock(InputStream::class.java)\n+        val whiteList = mock(JSONObject::class.java)\n+        domains = mock(JSONArray::class.java)\n+        mockStatic(Utils::class.java)\n+        given(Utils.getInputStreamFromAsset(any(), anyString())).willReturn(stream)\n+        given(Utils.getJsonObjectFromInputStream(stream)).willReturn(whiteList)\n+        doReturn(domains).`when`(whiteList).getJSONArray(Constants.URL_WHITELIST_JSON_ARRAY_NAME)\n+        doReturn(1).`when`(domains).length()\n+    }\n+\n+    @Test\n+    fun testNoProtocol() {\n+        doReturn(\"tugraz.at\").`when`(domains).getString(0)\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"https://www.tugraz.at\"))\n+        assertFalse(ProjectManager.checkIfURLIsInWhitelist(\"www.tugraz.at\"))\n+    }\n+\n+    @Test\n+    fun testEnding() {\n+        doReturn(\"net\").`when`(domains).getString(0)\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"https://www.wikipedia.net/blabla\"))\n+        assertFalse(ProjectManager.checkIfURLIsInWhitelist(\"https://something.net.com/blabla\"))\n+    }\n+\n+    @Test\n+    fun testCommonInternetScheme() {\n+        doReturn(\"tugraz.at\").`when`(domains).getString(0)\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://myaccount:@www.ist.tugraz.at/blablabla\"))\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://myaccount:mypassword@www.ist.tugraz.at/blablabla\"))\n+        assertTrue(ProjectManager.checkIfURLIsInWhitelist(\"http://www.ist.tugraz.at:8080/blablabla\"))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a7ad74327eb94ea4841432d8a0c097eee24f6f13", "url": "https://github.com/Catrobat/Catroid/commit/a7ad74327eb94ea4841432d8a0c097eee24f6f13", "message": "CATROID-497 Predefined white-list of safe URL patterns for \"Send web request\" brick\n\nOnly shows web request warning if URL is not in whitelist", "committedDate": "2020-05-31T14:17:48Z", "type": "commit"}, {"oid": "a7ad74327eb94ea4841432d8a0c097eee24f6f13", "url": "https://github.com/Catrobat/Catroid/commit/a7ad74327eb94ea4841432d8a0c097eee24f6f13", "message": "CATROID-497 Predefined white-list of safe URL patterns for \"Send web request\" brick\n\nOnly shows web request warning if URL is not in whitelist", "committedDate": "2020-05-31T14:17:48Z", "type": "forcePushed"}, {"oid": "7bc788700c9bd30be530f78892ac53f4edcef828", "url": "https://github.com/Catrobat/Catroid/commit/7bc788700c9bd30be530f78892ac53f4edcef828", "message": "Updated \"No network\" dialog", "committedDate": "2020-05-31T15:19:14Z", "type": "commit"}, {"oid": "3da8682245adf5695865ba2ada5ea1b9d9bb25e5", "url": "https://github.com/Catrobat/Catroid/commit/3da8682245adf5695865ba2ada5ea1b9d9bb25e5", "message": "WEB_REQUEST_WIKI_URL constant", "committedDate": "2020-05-31T15:54:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3MTk3OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3597#discussion_r432971979", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\turlWhitelistPattern = Pattern.compile(\"https?://([a-zA-Z-.:@]+\\\\.)?\"\n          \n          \n            \n            \t\t\t\t+ trustedDomains.toString().replaceAll(\"\\\\.\", \"\\\\\\\\.\")\n          \n          \n            \n            \t\t\t\t+ \"(:[0-9]{1,5})?(/[a-zA-Z0-9-()@:%_\\\\\\\\+~#.?&/=]*)?\");\n          \n          \n            \n            \t\turlWhitelistPattern = Pattern.compile(\"https?://([a-zA-Z0-9-]+\\\\.)*\"\n          \n          \n            \n            \t\t\t\t+ trustedDomains.toString().replaceAll(\"\\\\.\", \"\\\\\\\\.\")\n          \n          \n            \n            \t\t\t\t+ \"(:[0-9]{1,5})?(/.*)?\");\n          \n      \n    \n    \n  \n\nAfter finding some examples that did not work because numbers incorrectly were not allowed at the front (e.g, connect4.ist.tugraz.at) and understanding that https://www.ietf.org/rfc/rfc1738.txt has been superceded by the newer https://tools.ietf.org/html/rfc3986 (also see https://en.wikipedia.org/wiki/Basic_access_authentication ) meaning that passwords have been depreciated in https? requests, and that basically any character can follow in the path/query/fragment part of the URI after the host and option port number.", "author": "wslany", "createdAt": "2020-05-31T18:29:41Z", "path": "catroid/src/main/java/org/catrobat/catroid/ProjectManager.java", "diffHunk": "@@ -305,6 +313,43 @@ private static void loadLegoEV3SettingsFromProject(Project project, Context cont\n \t\treturn conflicts;\n \t}\n \n+\tpublic static synchronized boolean checkIfURLIsInWhitelist(String url) {\n+\t\tif (urlWhitelistPattern == null) {\n+\t\t\ttry {\n+\t\t\t\tinitializeURLWhitelistPattern();\n+\t\t\t} catch (IOException | JSONException | NullPointerException e) {\n+\t\t\t\tLog.e(TAG, \"Cannot read URL whitelist.\", e);\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn urlWhitelistPattern.matcher(url).matches();\n+\t}\n+\n+\tprivate static void initializeURLWhitelistPattern() throws IOException, JSONException, NullPointerException {\n+\t\tInputStream stream = Utils.getInputStreamFromAsset(instance.applicationContext, Constants.URL_WHITELIST_JSON_FILE_NAME);\n+\t\tJSONObject whiteList = Utils.getJsonObjectFromInputStream(stream);\n+\t\tJSONArray domains = whiteList.getJSONArray(Constants.URL_WHITELIST_JSON_ARRAY_NAME);\n+\n+\t\tStringBuilder trustedDomains = new StringBuilder(\"(\");\n+\t\tfor (int i = 0; i < domains.length(); i++) {\n+\t\t\ttrustedDomains.append(domains.getString(i));\n+\n+\t\t\tif (i < domains.length() - 1) {\n+\t\t\t\ttrustedDomains.append('|');\n+\t\t\t}\n+\t\t}\n+\t\ttrustedDomains.append(')');\n+\n+\t\turlWhitelistPattern = Pattern.compile(\"https?://([a-zA-Z-.:@]+\\\\.)?\"\n+\t\t\t\t+ trustedDomains.toString().replaceAll(\"\\\\.\", \"\\\\\\\\.\")\n+\t\t\t\t+ \"(:[0-9]{1,5})?(/[a-zA-Z0-9-()@:%_\\\\\\\\+~#.?&/=]*)?\");", "originalCommit": "3da8682245adf5695865ba2ada5ea1b9d9bb25e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b70d3869f2ad70649eabce17eb6d1c8851efe3a3", "url": "https://github.com/Catrobat/Catroid/commit/b70d3869f2ad70649eabce17eb6d1c8851efe3a3", "message": "Changed URL regex", "committedDate": "2020-05-31T18:57:07Z", "type": "commit"}, {"oid": "c1bf5b38d6a00bcbf0fe404d36399fd0556b9a73", "url": "https://github.com/Catrobat/Catroid/commit/c1bf5b38d6a00bcbf0fe404d36399fd0556b9a73", "message": "Added https as default protocol if not specified", "committedDate": "2020-05-31T20:12:42Z", "type": "commit"}, {"oid": "56788bc6d49170aad1cb3edb9388af2b7466b0ea", "url": "https://github.com/Catrobat/Catroid/commit/56788bc6d49170aad1cb3edb9388af2b7466b0ea", "message": "Enabled web request brick for release and added outgoing network tests", "committedDate": "2020-06-01T10:48:07Z", "type": "commit"}, {"oid": "56788bc6d49170aad1cb3edb9388af2b7466b0ea", "url": "https://github.com/Catrobat/Catroid/commit/56788bc6d49170aad1cb3edb9388af2b7466b0ea", "message": "Enabled web request brick for release and added outgoing network tests", "committedDate": "2020-06-01T10:48:07Z", "type": "forcePushed"}, {"oid": "1ce38c179409fd9015179c40efe5215b3d0626df", "url": "https://github.com/Catrobat/Catroid/commit/1ce38c179409fd9015179c40efe5215b3d0626df", "message": "Merge branch 'develop' into CATROID-497", "committedDate": "2020-06-01T13:06:34Z", "type": "commit"}]}