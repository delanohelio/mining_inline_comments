{"pr_number": 3662, "pr_title": "CATROID-631 Current project after download incorrectly opens previously opened project", "pr_createdAt": "2020-07-11T13:41:56Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3662", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NzgwNg==", "url": "https://github.com/Catrobat/Catroid/pull/3662#discussion_r453467806", "bodyText": "Pls could you name those variables in a more clean code style, e.g. like you named the assigned value", "author": "DinosaurierRex", "createdAt": "2020-07-13T06:57:40Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/ui/fragment/ProjectDownloadTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.ui.fragment;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.R;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.testsuites.annotations.Cat;\n+import org.catrobat.catroid.testsuites.annotations.Level;\n+import org.catrobat.catroid.ui.MainMenuActivity;\n+import org.catrobat.catroid.uiespresso.util.UiTestUtils;\n+import org.catrobat.catroid.uiespresso.util.rules.BaseActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBack;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ProjectDownloadTest {\n+\n+\t@Rule\n+\tpublic BaseActivityTestRule<MainMenuActivity> baseActivityTestRule = new\n+\t\t\tBaseActivityTestRule<>(MainMenuActivity.class, true, false);\n+\n+\tprivate String projectName = \"testProject\";\n+\tprivate String projectName2 = \"downloadedProject\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3NTA4Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3662#discussion_r453475086", "bodyText": "This function already implies that you can pass more than one project to delete (see function parameters). You could rewrite this to save one line like TestUtils.deleteProjects(projectName, projectName2);", "author": "DinosaurierRex", "createdAt": "2020-07-13T08:19:02Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/ui/fragment/ProjectDownloadTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.ui.fragment;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.R;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.testsuites.annotations.Cat;\n+import org.catrobat.catroid.testsuites.annotations.Level;\n+import org.catrobat.catroid.ui.MainMenuActivity;\n+import org.catrobat.catroid.uiespresso.util.UiTestUtils;\n+import org.catrobat.catroid.uiespresso.util.rules.BaseActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBack;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ProjectDownloadTest {\n+\n+\t@Rule\n+\tpublic BaseActivityTestRule<MainMenuActivity> baseActivityTestRule = new\n+\t\t\tBaseActivityTestRule<>(MainMenuActivity.class, true, false);\n+\n+\tprivate String projectName = \"testProject\";\n+\tprivate String projectName2 = \"downloadedProject\";\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\tTestUtils.deleteProjects(projectName);\n+\t\tTestUtils.deleteProjects(projectName2);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMxMTkyMg==", "url": "https://github.com/Catrobat/Catroid/pull/3662#discussion_r454311922", "bodyText": "Fetch the current Project one time to save the Array Operations each time.", "author": "DinosaurierRex", "createdAt": "2020-07-14T12:15:32Z", "path": "catroid/src/main/java/org/catrobat/catroid/ui/recyclerview/fragment/MainMenuFragment.java", "diffHunk": "@@ -252,36 +252,33 @@ private ProjectData getCurrentProject() {\n \t\t\tProjectMetaDataParser metaDataParser = new ProjectMetaDataParser(xmlFile);\n \n \t\t\ttry {\n-\t\t\t\titems.add(metaDataParser.getProjectMetaData());\n+\t\t\t\tmyProjects.add(metaDataParser.getProjectMetaData());\n \t\t\t} catch (IOException e) {\n-\t\t\t\tLog.e(TAG, \"Well, that's awkward.\", e);\n+\t\t\t\tLog.e(TAG, \"Project not parseable\", e);\n \t\t\t}\n \t\t}\n-\t\tif (items.size() == 0) {\n-\t\t\treturn null;\n+\t\tif (myProjects.size() == 0) {\n+\t\t\treturn;\n \t\t}\n-\t\tCollections.sort(items, new Comparator<ProjectData>() {\n+\t\tCollections.sort(myProjects, new Comparator<ProjectData>() {\n \t\t\t@Override\n \t\t\tpublic int compare(ProjectData project1, ProjectData project2) {\n \t\t\t\treturn Long.compare(project2.getLastUsed(), project1.getLastUsed());\n \t\t\t}\n \t\t});\n-\n-\t\treturn items.get(0);\n \t}\n \n \tprivate void loadProjectImage() {\n-\t\tProjectData currentProject = getCurrentProject();\n-\t\tif (currentProject == null) {\n+\t\tif (myProjects.size() == 0) {\n \t\t\treturn;\n \t\t}\n-\t\tTextView titleView = parent.findViewById(R.id.title_view);\n-\t\ttitleView.setText(currentProject.getName());\n+\t\tTextView titleView = parent.findViewById(R.id.project_title);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0f93bb79a02299da426f12eefbdbb7e8df6f5541", "url": "https://github.com/Catrobat/Catroid/commit/0f93bb79a02299da426f12eefbdbb7e8df6f5541", "message": "CATROID-631 Current project after download incorrectly opens previously opened project\n\n\nUsing a new variable in Fragment", "committedDate": "2020-07-15T10:20:26Z", "type": "commit"}, {"oid": "0f93bb79a02299da426f12eefbdbb7e8df6f5541", "url": "https://github.com/Catrobat/Catroid/commit/0f93bb79a02299da426f12eefbdbb7e8df6f5541", "message": "CATROID-631 Current project after download incorrectly opens previously opened project\n\n\nUsing a new variable in Fragment", "committedDate": "2020-07-15T10:20:26Z", "type": "forcePushed"}]}