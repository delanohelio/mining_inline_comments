{"pr_number": 3647, "pr_title": "CATROID-565 refactor AskAction.java  to AskAction.kt", "pr_createdAt": "2020-06-29T07:38:29Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3647", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjE0NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446832145", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    val params = ArrayList<Any>()\n          \n          \n            \n                    params.add(this)\n          \n          \n            \n                    params.add(question)\n          \n          \n            \n                    val params = arrayListOf<Any>(this, question)", "author": "lweitzendorf", "createdAt": "2020-06-29T07:43:24Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskAction.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import java.util.ArrayList\n+\n+class AskAction : Action() {\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        var question = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(\n+                javaClass.simpleName,\n+                \"formula interpretation in ask brick failed\"\n+            )\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        params.add(question)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNDA2OA==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446834068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setAnswerText(answer: String?) {\n          \n          \n            \n                    if (answerVariable == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    answerVariable!!.value = answer\n          \n          \n            \n                    answerReceived = true\n          \n          \n            \n                }\n          \n          \n            \n                fun setAnswerText(answer: String) {\n          \n          \n            \n                    answerVariable?.value?.let {\n          \n          \n            \n                        it = answer\n          \n          \n            \n                        answerReceived = true\n          \n          \n            \n                    }\n          \n          \n            \n                }", "author": "lweitzendorf", "createdAt": "2020-06-29T07:47:15Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskAction.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import java.util.ArrayList\n+\n+class AskAction : Action() {\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        var question = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(\n+                javaClass.simpleName,\n+                \"formula interpretation in ask brick failed\"\n+            )\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        params.add(question)\n+        val message =\n+            StageActivity.messageHandler.obtainMessage(StageActivity.ASK_MESSAGE, params)\n+        message.sendToTarget()\n+        questionAsked = true\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+        answerReceived = true\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNjk4OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446836989", "bodyText": "The setter probably shouldn't allow null. Also see below", "author": "lweitzendorf", "createdAt": "2020-06-29T07:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNDA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTAwMw==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446835003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setAnswerVariable(answerVariable: UserVariable?) {\n          \n          \n            \n                    if (answerVariable == null) {\n          \n          \n            \n                        return\n          \n          \n            \n                    }\n          \n          \n            \n                    this.answerVariable = answerVariable\n          \n          \n            \n                }\n          \n          \n            \n                fun setAnswerVariable(answerVariable: UserVariable) {\n          \n          \n            \n                    this.answerVariable = answerVariable\n          \n          \n            \n                }", "author": "lweitzendorf", "createdAt": "2020-06-29T07:48:58Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskAction.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import java.util.ArrayList\n+\n+class AskAction : Action() {\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        var question = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(\n+                javaClass.simpleName,\n+                \"formula interpretation in ask brick failed\"\n+            )\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        params.add(question)\n+        val message =\n+            StageActivity.messageHandler.obtainMessage(StageActivity.ASK_MESSAGE, params)\n+        message.sendToTarget()\n+        questionAsked = true\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTE5NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446835195", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setQuestionFormula(questionFormula: Formula?) {\n          \n          \n            \n                fun setQuestionFormula(questionFormula: Formula) {", "author": "lweitzendorf", "createdAt": "2020-06-29T07:49:20Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskAction.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import java.util.ArrayList\n+\n+class AskAction : Action() {\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        var question = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(\n+                javaClass.simpleName,\n+                \"formula interpretation in ask brick failed\"\n+            )\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        params.add(question)\n+        val message =\n+            StageActivity.messageHandler.obtainMessage(StageActivity.ASK_MESSAGE, params)\n+        message.sendToTarget()\n+        questionAsked = true\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzOTc4MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446839781", "bodyText": "If null is required for some reason, you can just delete these simple setters and declare the member as var instead of private var. Kotlin will create implicit setters and getters.", "author": "lweitzendorf", "createdAt": "2020-06-29T07:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTM4MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446835381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setSprite(sprite: Sprite?) {\n          \n          \n            \n                fun setSprite(sprite: Sprite) {", "author": "lweitzendorf", "createdAt": "2020-06-29T07:49:37Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskAction.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import java.util.ArrayList\n+\n+class AskAction : Action() {\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        var question = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }\n+        } catch (e: InterpretationException) {\n+            Log.e(\n+                javaClass.simpleName,\n+                \"formula interpretation in ask brick failed\"\n+            )\n+        }\n+        val params = ArrayList<Any>()\n+        params.add(this)\n+        params.add(question)\n+        val message =\n+            StageActivity.messageHandler.obtainMessage(StageActivity.ASK_MESSAGE, params)\n+        message.sendToTarget()\n+        questionAsked = true\n+    }\n+\n+    fun setAnswerText(answer: String?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        answerVariable!!.value = answer\n+        answerReceived = true\n+    }\n+\n+    fun setAnswerVariable(answerVariable: UserVariable?) {\n+        if (answerVariable == null) {\n+            return\n+        }\n+        this.answerVariable = answerVariable\n+    }\n+\n+    fun setQuestionFormula(questionFormula: Formula?) {\n+        this.questionFormula = questionFormula\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MjYyMg==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446842622", "bodyText": "You could just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (questionFormula != null) {\n          \n          \n            \n                            question = questionFormula!!.interpretString(sprite)\n          \n          \n            \n                        }\n          \n          \n            \n                        question = questionFormula?.interpretString(sprite) ?: \"\"\n          \n      \n    \n    \n  \n\nand leave out the initial assignment", "author": "lweitzendorf", "createdAt": "2020-06-29T08:02:30Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/AskAction.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.Action\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.stage.StageActivity\n+import java.util.ArrayList\n+\n+class AskAction : Action() {\n+    private var sprite: Sprite? = null\n+    private var questionFormula: Formula? = null\n+    private var answerVariable: UserVariable? = null\n+    private var questionAsked = false\n+    private var answerReceived = false\n+    private fun askQuestion() {\n+        if (StageActivity.messageHandler == null) {\n+            return\n+        }\n+        var question = \"\"\n+        try {\n+            if (questionFormula != null) {\n+                question = questionFormula!!.interpretString(sprite)\n+            }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MzI1MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3647#discussion_r446963251", "bodyText": "These should always be initialized. Other tests also use lateinit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private var testSprite: Sprite? = null\n          \n          \n            \n                private var project: Project? = null\n          \n          \n            \n                private var userVariableForAnswer: UserVariable? = null\n          \n          \n            \n                private lateinit var testSprite: Sprite\n          \n          \n            \n                private lateinit var project: Project\n          \n          \n            \n                private lateinit var userVariableForAnswer: UserVariable", "author": "lweitzendorf", "createdAt": "2020-06-29T13:17:38Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/AskActionTest.kt", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import com.badlogic.gdx.utils.GdxNativesLoader\n+import junit.framework.Assert\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.actions.AskAction\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.powermock.api.mockito.PowerMockito\n+import org.powermock.core.classloader.annotations.PrepareForTest\n+import org.powermock.modules.junit4.PowerMockRunner\n+\n+@RunWith(PowerMockRunner::class)\n+@PrepareForTest(GdxNativesLoader::class)\n+class AskActionTest {\n+    private var testSprite: Sprite? = null\n+    private var project: Project? = null\n+    private var userVariableForAnswer: UserVariable? = null", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "4a9dc0ff56ddfafe746988d083d8fe55c48c64ef", "url": "https://github.com/Catrobat/Catroid/commit/4a9dc0ff56ddfafe746988d083d8fe55c48c64ef", "message": "CATROID-565 refactor AskAction.java  to AskAction.kt.\nRefactor AskActionTest.java to AskActionTest.kt", "committedDate": "2020-06-29T14:02:58Z", "type": "commit"}, {"oid": "4a9dc0ff56ddfafe746988d083d8fe55c48c64ef", "url": "https://github.com/Catrobat/Catroid/commit/4a9dc0ff56ddfafe746988d083d8fe55c48c64ef", "message": "CATROID-565 refactor AskAction.java  to AskAction.kt.\nRefactor AskActionTest.java to AskActionTest.kt", "committedDate": "2020-06-29T14:02:58Z", "type": "forcePushed"}]}