{"pr_number": 3738, "pr_title": "CATROID-671 refactor SpeakAction to Kotlin", "pr_createdAt": "2020-08-10T15:00:05Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3738", "timeline": [{"oid": "abfe086b0a21d3d1dc203b1204ae5d41d1e7488f", "url": "https://github.com/Catrobat/Catroid/commit/abfe086b0a21d3d1dc203b1204ae5d41d1e7488f", "message": "CATROID-671 refactor SpeakAction to Kotlin", "committedDate": "2020-08-11T09:26:18Z", "type": "forcePushed"}, {"oid": "d62d54e355bd389c7bd4145347c920e3b9511d69", "url": "https://github.com/Catrobat/Catroid/commit/d62d54e355bd389c7bd4145347c920e3b9511d69", "message": "CATROID-671 refactor SpeakAction to Kotlin", "committedDate": "2020-08-11T18:01:51Z", "type": "forcePushed"}, {"oid": "11c7e48747fa91c76c326d8ff679876d8a04d585", "url": "https://github.com/Catrobat/Catroid/commit/11c7e48747fa91c76c326d8ff679876d8a04d585", "message": "CATROID-671 refactor SpeakAction to Kotlin", "committedDate": "2020-08-12T09:13:41Z", "type": "forcePushed"}, {"oid": "7614f24342549b04e53b8e2a00577f0a94d1d4ed", "url": "https://github.com/Catrobat/Catroid/commit/7614f24342549b04e53b8e2a00577f0a94d1d4ed", "message": "CATROID-671 refactor SpeakAction to Kotlin", "committedDate": "2020-08-31T19:57:22Z", "type": "forcePushed"}, {"oid": "7d557138b415c8625b585a0d30f0b2df98df1cda", "url": "https://github.com/Catrobat/Catroid/commit/7d557138b415c8625b585a0d30f0b2df98df1cda", "message": "CATROID-671 refactor SpeakAction to Kotlin", "committedDate": "2020-08-31T21:01:45Z", "type": "forcePushed"}, {"oid": "d9efd8674133287ab8f462b1ee6d388fed372b60", "url": "https://github.com/Catrobat/Catroid/commit/d9efd8674133287ab8f462b1ee6d388fed372b60", "message": "CATROID-671 refactor SpeakAction to Kotlin", "committedDate": "2020-09-01T14:59:05Z", "type": "forcePushed"}, {"oid": "a83aa609de9ff3d4a7d7d1853bef9b8f45e29670", "url": "https://github.com/Catrobat/Catroid/commit/a83aa609de9ff3d4a7d7d1853bef9b8f45e29670", "message": "CATROID-671 refactor SpeakAction to Kotlin", "committedDate": "2020-09-01T20:55:26Z", "type": "forcePushed"}, {"oid": "3992e83a5fd10c6e715660d3c881d7083fffee33", "url": "https://github.com/Catrobat/Catroid/commit/3992e83a5fd10c6e715660d3c881d7083fffee33", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-09-02T14:09:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTAwMQ==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r495445001", "bodyText": "Using an Elvis operator could be useful in this case. if statement above would be obsolete.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return field!!\n          \n          \n            \n                            return field ?: TextToSpeechHolder()", "author": "christophsiegl", "createdAt": "2020-09-26T10:57:07Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        var text = text\n+        if (text == null) {\n+            text = \"\"\n+        }\n+        if (utteranceProgressListenerContainer!!.addUtteranceProgressListener(speechFile,\n+            listener, speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID]!!)) {\n+            val status = textToSpeech?.synthesizeToFile(text, speakParameter, speechFile.absolutePath)\n+            if (status == TextToSpeech.ERROR) {\n+                Log.e(TAG, \"File synthesizing failed\")\n+            }\n+        }\n+    }\n+\n+    fun deleteSpeechFiles() {\n+        val pathToSpeechFiles = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        if (pathToSpeechFiles.isDirectory) {\n+            pathToSpeechFiles.walk().forEach {\n+                it.delete()\n+            }\n+        }\n+    }\n+\n+    companion object {\n+        private val TAG = TextToSpeechHolder::class.java.simpleName\n+        private var textToSpeech: TextToSpeech? = null\n+        private var utteranceProgressListenerContainer: UtteranceProgressListenerContainer? = null\n+        @JvmStatic\n+        var instance: TextToSpeechHolder? = null\n+            get() {\n+                if (field == null) {\n+                    field = TextToSpeechHolder()\n+                }\n+                return field!!", "originalCommit": "3992e83a5fd10c6e715660d3c881d7083fffee33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ0NTMyMw==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r495445323", "bodyText": "Using an Elvis operator would be nice. If statement below would be obsolete", "author": "christophsiegl", "createdAt": "2020-09-26T11:01:23Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        var text = text", "originalCommit": "3992e83a5fd10c6e715660d3c881d7083fffee33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "531458fededeb6ab82df3fc8569bdf4facc8330a", "url": "https://github.com/Catrobat/Catroid/commit/531458fededeb6ab82df3fc8569bdf4facc8330a", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-09-29T16:22:23Z", "type": "forcePushed"}, {"oid": "f6101415eaf5a71e792becca347ee43ca0e64434", "url": "https://github.com/Catrobat/Catroid/commit/f6101415eaf5a71e792becca347ee43ca0e64434", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-09-29T19:29:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5OTE0MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501799141", "bodyText": "Please remove this if.\nHave a look at https://kotlinlang.org/docs/reference/null-safety.html#safe-calls", "author": "gPathpp", "createdAt": "2020-10-08T15:10:14Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwMTMyNg==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501801326", "bodyText": "Never use \"!!\" it's an \"assert not null\". if the value is null => Process crash.\nDo we really want a NPE here?\nHave a look at https://kotlinlang.org/docs/reference/null-safety.html#the--operator", "author": "gPathpp", "createdAt": "2020-10-08T15:13:16Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        val text = text ?: \"\"\n+        if (utteranceProgressListenerContainer!!.addUtteranceProgressListener(speechFile,", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNDYxNg==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501804616", "bodyText": "Please use \"val\" instead\nval instance = TextToSpeechHolder()\n(much less code and not a nullable type)", "author": "gPathpp", "createdAt": "2020-10-08T15:17:50Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/TextToSpeechHolder.kt", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.content.Intent\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.TextToSpeech.OnInitListener\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import android.view.ContextThemeWrapper\n+import androidx.appcompat.app.AlertDialog\n+import org.catrobat.catroid.R\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.bricks.Brick\n+import java.io.File\n+import java.util.HashMap\n+\n+class TextToSpeechHolder private constructor() {\n+\n+    fun initTextToSpeech(stageActivity: StageActivity, stageResourceHolder: StageResourceHolder) {\n+        textToSpeech = TextToSpeech(stageActivity, OnInitListener { status ->\n+                if (status == TextToSpeech.SUCCESS) {\n+                    utteranceProgressListenerContainer = UtteranceProgressListenerContainer()\n+                    textToSpeech?.setOnUtteranceProgressListener(utteranceProgressListenerContainer)\n+                    stageResourceHolder.resourceInitialized()\n+                } else {\n+                    val builder = AlertDialog.Builder(ContextThemeWrapper(stageActivity, R.style.Theme_AppCompat_Dialog))\n+                    builder.setMessage(R.string.prestage_text_to_speech_engine_not_installed)\n+                        .setCancelable(false)\n+                        .setPositiveButton(R.string.yes) { dialog, id ->\n+                            val installIntent = Intent()\n+                            installIntent.action = TextToSpeech.Engine.ACTION_INSTALL_TTS_DATA\n+                            stageActivity.startActivity(installIntent)\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                        .setNegativeButton(R.string.no) { dialog, id ->\n+                            stageResourceHolder.resourceFailed(Brick.TEXT_TO_SPEECH)\n+                        }\n+                    val alert = builder.create()\n+                    alert.show()\n+                }\n+            })\n+    }\n+\n+    fun shutDownTextToSpeech() {\n+        if (textToSpeech != null) {\n+            textToSpeech?.stop()\n+            textToSpeech?.shutdown()\n+        }\n+    }\n+\n+    fun textToSpeech(text: String?, speechFile: File, listener: UtteranceProgressListener, speakParameter: HashMap<String?, String?>) {\n+        val text = text ?: \"\"\n+        if (utteranceProgressListenerContainer!!.addUtteranceProgressListener(speechFile,\n+            listener, speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID]!!)) {\n+            val status = textToSpeech?.synthesizeToFile(text, speakParameter, speechFile.absolutePath)\n+            if (status == TextToSpeech.ERROR) {\n+                Log.e(TAG, \"File synthesizing failed\")\n+            }\n+        }\n+    }\n+\n+    fun deleteSpeechFiles() {\n+        val pathToSpeechFiles = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        if (pathToSpeechFiles.isDirectory) {\n+            pathToSpeechFiles.walk().forEach {\n+                it.delete()\n+            }\n+        }\n+    }\n+\n+    companion object {\n+        private val TAG = TextToSpeechHolder::class.java.simpleName\n+        private var textToSpeech: TextToSpeech? = null\n+        private var utteranceProgressListenerContainer: UtteranceProgressListenerContainer? = null\n+        @JvmStatic\n+        var instance: TextToSpeechHolder? = null", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTI0NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501829245", "bodyText": "Since this is a Singelton you can use \"object\" as well.\nhttps://kotlinlang.org/docs/reference/object-declarations.html#object-declarations", "author": "gPathpp", "createdAt": "2020-10-08T15:51:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNDYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMDYxOA==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501810618", "bodyText": "Are these Log methods necessary?", "author": "gPathpp", "createdAt": "2020-10-08T15:25:41Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/UtteranceProgressListenerContainer.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import java.io.File\n+import java.util.ArrayList\n+import java.util.HashMap\n+\n+class UtteranceProgressListenerContainer : UtteranceProgressListener() {\n+    private val listeners: MutableMap<String, MutableList<UtteranceProgressListener>?> = HashMap()\n+\n+    @Synchronized\n+    fun addUtteranceProgressListener(speechFile: File, utteranceProgressListener: UtteranceProgressListener, utteranceId: String): Boolean {\n+        var utteranceIdListeners = listeners[utteranceId]\n+        return if (utteranceIdListeners == null) {\n+            if (speechFile.exists()) {\n+                utteranceProgressListener.onDone(utteranceId)\n+                false\n+            } else {\n+                utteranceIdListeners = ArrayList()\n+                utteranceIdListeners.add(utteranceProgressListener)\n+                listeners[utteranceId] = utteranceIdListeners\n+                true\n+            }\n+        } else {\n+            utteranceIdListeners.add(utteranceProgressListener)\n+            false\n+        }\n+    }\n+\n+    @Synchronized\n+    override fun onDone(utteranceId: String) {\n+        for (listener in listeners[utteranceId]!!) {\n+            listener.onDone(utteranceId)\n+        }\n+        listeners[utteranceId] = null\n+    }\n+\n+    override fun onStart(utteranceId: String) {", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMTMyNQ==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501811325", "bodyText": "This does probably not belong here, does it?", "author": "gPathpp", "createdAt": "2020-10-08T15:26:39Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/UtteranceProgressListenerContainer.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import java.io.File\n+import java.util.ArrayList\n+import java.util.HashMap\n+\n+class UtteranceProgressListenerContainer : UtteranceProgressListener() {\n+    private val listeners: MutableMap<String, MutableList<UtteranceProgressListener>?> = HashMap()\n+\n+    @Synchronized\n+    fun addUtteranceProgressListener(speechFile: File, utteranceProgressListener: UtteranceProgressListener, utteranceId: String): Boolean {\n+        var utteranceIdListeners = listeners[utteranceId]\n+        return if (utteranceIdListeners == null) {\n+            if (speechFile.exists()) {\n+                utteranceProgressListener.onDone(utteranceId)\n+                false\n+            } else {\n+                utteranceIdListeners = ArrayList()\n+                utteranceIdListeners.add(utteranceProgressListener)\n+                listeners[utteranceId] = utteranceIdListeners\n+                true\n+            }\n+        } else {\n+            utteranceIdListeners.add(utteranceProgressListener)\n+            false\n+        }\n+    }\n+\n+    @Synchronized\n+    override fun onDone(utteranceId: String) {\n+        for (listener in listeners[utteranceId]!!) {\n+            listener.onDone(utteranceId)\n+        }\n+        listeners[utteranceId] = null\n+    }\n+\n+    override fun onStart(utteranceId: String) {\n+        Log.d(javaClass.simpleName, \"onStart()\")\n+    }\n+    override fun onError(utteranceId: String) {\n+        Log.d(javaClass.simpleName, \"onStart()\")", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMjE1Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501812152", "bodyText": "No \"!!\" please.", "author": "gPathpp", "createdAt": "2020-10-08T15:27:49Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/UtteranceProgressListenerContainer.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.stage\n+\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+import java.io.File\n+import java.util.ArrayList\n+import java.util.HashMap\n+\n+class UtteranceProgressListenerContainer : UtteranceProgressListener() {\n+    private val listeners: MutableMap<String, MutableList<UtteranceProgressListener>?> = HashMap()\n+\n+    @Synchronized\n+    fun addUtteranceProgressListener(speechFile: File, utteranceProgressListener: UtteranceProgressListener, utteranceId: String): Boolean {\n+        var utteranceIdListeners = listeners[utteranceId]\n+        return if (utteranceIdListeners == null) {\n+            if (speechFile.exists()) {\n+                utteranceProgressListener.onDone(utteranceId)\n+                false\n+            } else {\n+                utteranceIdListeners = ArrayList()\n+                utteranceIdListeners.add(utteranceProgressListener)\n+                listeners[utteranceId] = utteranceIdListeners\n+                true\n+            }\n+        } else {\n+            utteranceIdListeners.add(utteranceProgressListener)\n+            false\n+        }\n+    }\n+\n+    @Synchronized\n+    override fun onDone(utteranceId: String) {\n+        for (listener in listeners[utteranceId]!!) {", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDY4NA==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501814684", "bodyText": "Please use \"?:\" instead.\nhttps://kotlinlang.org/docs/reference/null-safety.html#elvis-operator", "author": "gPathpp", "createdAt": "2020-10-08T15:31:20Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/SpeakAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions\n+\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.io.SoundManager\n+import org.catrobat.catroid.stage.TextToSpeechHolder\n+import org.catrobat.catroid.utils.Utils\n+\n+import java.io.File\n+import java.util.HashMap\n+\n+class SpeakAction : TemporalAction() {\n+    private var text: Formula? = null\n+    private var interpretedText: Any? = null\n+    private var hashText: String? = null\n+    private var sprite: Sprite? = null\n+    lateinit var speechFile: File\n+        private set\n+    private lateinit var listener: UtteranceProgressListener\n+    private var determineLength = false\n+    var lengthOfText = 0f\n+        private set\n+\n+    override fun begin() {\n+        interpretFormula()\n+        hashText = Utils.md5Checksum(interpretedText.toString())\n+        val fileName = hashText\n+        val pathToSpeechFile = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        pathToSpeechFile.mkdirs()\n+        speechFile = File(pathToSpeechFile, fileName + Constants.DEFAULT_SOUND_EXTENSION)\n+        listener = object : UtteranceProgressListener() {\n+            override fun onDone(utteranceId: String) {\n+                if (determineLength) {\n+                    lengthOfText = SoundManager.getInstance().getDurationOfSoundFile(speechFile.absolutePath)\n+                } else {\n+                    SoundManager.getInstance().playSoundFile(speechFile.absolutePath, sprite)\n+                }\n+            }\n+            override fun onStart(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onStart()\")\n+            }\n+            override fun onError(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onError()\")\n+            }\n+        }\n+        super.begin()\n+    }\n+\n+    override fun update(delta: Float) {\n+        val speakParameter = HashMap<String?, String?>()\n+        speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = hashText\n+        TextToSpeechHolder.instance?.textToSpeech(interpretedText.toString(), speechFile, listener, speakParameter)\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {\n+        this.sprite = sprite\n+    }\n+\n+    fun setText(text: Formula?) {\n+        this.text = text\n+    }\n+\n+    fun setDetermineLength(getDurationOfText: Boolean) {\n+        determineLength = getDurationOfText\n+    }\n+\n+    fun interpretFormula() {\n+        interpretedText = try {\n+            if (text == null) \"\" else text?.interpretString(sprite)", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNjMxMQ==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501816311", "bodyText": "Please refactor this.", "author": "gPathpp", "createdAt": "2020-10-08T15:33:37Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/SpeakAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions\n+\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.io.SoundManager\n+import org.catrobat.catroid.stage.TextToSpeechHolder\n+import org.catrobat.catroid.utils.Utils\n+\n+import java.io.File\n+import java.util.HashMap\n+\n+class SpeakAction : TemporalAction() {\n+    private var text: Formula? = null\n+    private var interpretedText: Any? = null\n+    private var hashText: String? = null\n+    private var sprite: Sprite? = null\n+    lateinit var speechFile: File\n+        private set\n+    private lateinit var listener: UtteranceProgressListener\n+    private var determineLength = false\n+    var lengthOfText = 0f\n+        private set\n+\n+    override fun begin() {\n+        interpretFormula()\n+        hashText = Utils.md5Checksum(interpretedText.toString())\n+        val fileName = hashText\n+        val pathToSpeechFile = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        pathToSpeechFile.mkdirs()\n+        speechFile = File(pathToSpeechFile, fileName + Constants.DEFAULT_SOUND_EXTENSION)\n+        listener = object : UtteranceProgressListener() {", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMDExNg==", "url": "https://github.com/Catrobat/Catroid/pull/3738#discussion_r501820116", "bodyText": "Is this setter really useful?\nPlease make sprite public.\nIn Kotlin Getter and setter are automatically generated.\nhttps://kotlinlang.org/docs/reference/properties.html#properties-and-fields", "author": "gPathpp", "createdAt": "2020-10-08T15:38:58Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/SpeakAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.content.actions\n+\n+import android.speech.tts.TextToSpeech\n+import android.speech.tts.UtteranceProgressListener\n+import android.util.Log\n+\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.io.SoundManager\n+import org.catrobat.catroid.stage.TextToSpeechHolder\n+import org.catrobat.catroid.utils.Utils\n+\n+import java.io.File\n+import java.util.HashMap\n+\n+class SpeakAction : TemporalAction() {\n+    private var text: Formula? = null\n+    private var interpretedText: Any? = null\n+    private var hashText: String? = null\n+    private var sprite: Sprite? = null\n+    lateinit var speechFile: File\n+        private set\n+    private lateinit var listener: UtteranceProgressListener\n+    private var determineLength = false\n+    var lengthOfText = 0f\n+        private set\n+\n+    override fun begin() {\n+        interpretFormula()\n+        hashText = Utils.md5Checksum(interpretedText.toString())\n+        val fileName = hashText\n+        val pathToSpeechFile = File(Constants.TEXT_TO_SPEECH_TMP_PATH)\n+        pathToSpeechFile.mkdirs()\n+        speechFile = File(pathToSpeechFile, fileName + Constants.DEFAULT_SOUND_EXTENSION)\n+        listener = object : UtteranceProgressListener() {\n+            override fun onDone(utteranceId: String) {\n+                if (determineLength) {\n+                    lengthOfText = SoundManager.getInstance().getDurationOfSoundFile(speechFile.absolutePath)\n+                } else {\n+                    SoundManager.getInstance().playSoundFile(speechFile.absolutePath, sprite)\n+                }\n+            }\n+            override fun onStart(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onStart()\")\n+            }\n+            override fun onError(utteranceId: String) {\n+                Log.d(javaClass.simpleName, \"onError()\")\n+            }\n+        }\n+        super.begin()\n+    }\n+\n+    override fun update(delta: Float) {\n+        val speakParameter = HashMap<String?, String?>()\n+        speakParameter[TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID] = hashText\n+        TextToSpeechHolder.instance?.textToSpeech(interpretedText.toString(), speechFile, listener, speakParameter)\n+    }\n+\n+    fun setSprite(sprite: Sprite?) {", "originalCommit": "f6101415eaf5a71e792becca347ee43ca0e64434", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b529d3577485e0f4cf4d67bdf945154957a9f517", "url": "https://github.com/Catrobat/Catroid/commit/b529d3577485e0f4cf4d67bdf945154957a9f517", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-10-22T10:04:27Z", "type": "forcePushed"}, {"oid": "83c0de25a8ae8fda9d08c2cafac83bf6f84197e8", "url": "https://github.com/Catrobat/Catroid/commit/83c0de25a8ae8fda9d08c2cafac83bf6f84197e8", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-10-22T12:55:43Z", "type": "forcePushed"}, {"oid": "b7e9ff1c6aa4de37a90e6dbc9acb35ae94e0c272", "url": "https://github.com/Catrobat/Catroid/commit/b7e9ff1c6aa4de37a90e6dbc9acb35ae94e0c272", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-10-29T16:13:53Z", "type": "forcePushed"}, {"oid": "72db85a1f17253a3f8178fa8cfb7af5fbf50c5b0", "url": "https://github.com/Catrobat/Catroid/commit/72db85a1f17253a3f8178fa8cfb7af5fbf50c5b0", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-10-29T16:44:57Z", "type": "forcePushed"}, {"oid": "88ef50f6916b7e6f82772345f34b52f369e9b302", "url": "https://github.com/Catrobat/Catroid/commit/88ef50f6916b7e6f82772345f34b52f369e9b302", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-11-10T13:06:44Z", "type": "forcePushed"}, {"oid": "94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "url": "https://github.com/Catrobat/Catroid/commit/94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-11-10T15:24:40Z", "type": "commit"}, {"oid": "94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "url": "https://github.com/Catrobat/Catroid/commit/94af1fe1f223f53e6e194d6e8c8da2b9169d9a83", "message": "refactor SpeakAction to Kotlin", "committedDate": "2020-11-10T15:24:40Z", "type": "forcePushed"}]}