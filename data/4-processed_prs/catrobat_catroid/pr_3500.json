{"pr_number": 3500, "pr_title": "CATROID-169 Sound continues on scene continue transition", "pr_createdAt": "2020-02-28T09:10:11Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3500", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2NTE3OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r386365179", "bodyText": "Please split this method into two.", "author": "gPathpp", "createdAt": "2020-03-02T12:31:52Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/content/brick/stage/SceneTransitionWithSoundBrickStageTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.content.brick.stage;\n+\n+import android.media.MediaPlayer;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.R;\n+import org.catrobat.catroid.common.SoundInfo;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.content.Scene;\n+import org.catrobat.catroid.content.Script;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.content.StartScript;\n+import org.catrobat.catroid.content.bricks.PlaySoundBrick;\n+import org.catrobat.catroid.content.bricks.SceneTransitionBrick;\n+import org.catrobat.catroid.content.bricks.WaitBrick;\n+import org.catrobat.catroid.io.ResourceImporter;\n+import org.catrobat.catroid.io.SoundManager;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.ui.SpriteActivity;\n+import org.catrobat.catroid.uiespresso.stage.utils.ScriptEvaluationGateBrick;\n+import org.catrobat.catroid.uiespresso.util.rules.FragmentActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.assertFalse;\n+\n+import static org.catrobat.catroid.common.Constants.SOUND_DIRECTORY_NAME;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class SceneTransitionWithSoundBrickStageTest {\n+\n+\tprivate ScriptEvaluationGateBrick lastBrickFirstScript;\n+\tprivate ScriptEvaluationGateBrick lastBrickSecondScript;\n+\n+\tprivate String firstSceneName;\n+\tprivate Script secondScript;\n+\n+\tprivate File soundFile;\n+\n+\t@Rule\n+\tpublic FragmentActivityTestRule<SpriteActivity> baseActivityTestRule = new\n+\t\t\tFragmentActivityTestRule<>(SpriteActivity.class, SpriteActivity.EXTRA_FRAGMENT_POSITION,\n+\t\t\tSpriteActivity.FRAGMENT_SOUNDS);\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tcreateProject();\n+\t\tbaseActivityTestRule.launchActivity(null);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tTestUtils.deleteProjects(getClass().getSimpleName());\n+\t\tif (soundFile != null && soundFile.exists()) {\n+\t\t\tsoundFile.delete();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testStopSoundOnSceneTransition() {\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickSecondScript);\n+\t\tassertFalse(mediaPlayer.isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundAfterSceneTransition() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickFirstScript);\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundDoesNotStartFromBeginning() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickFirstScript);\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t\tassertTrue(mediaPlayer.getCurrentPosition() > 0);\n+\t}\n+\n+\tprivate MediaPlayer startAndGetMediaplayer(ScriptEvaluationGateBrick scriptBrick) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MDc1OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r386370759", "bodyText": "I think there is a problem with starting the stage in a test within SpriteActivity? (flaky) @84n4n4 Is that true?", "author": "gPathpp", "createdAt": "2020-03-02T12:44:55Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/content/brick/stage/SceneTransitionWithSoundBrickStageTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.content.brick.stage;\n+\n+import android.media.MediaPlayer;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.R;\n+import org.catrobat.catroid.common.SoundInfo;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.content.Scene;\n+import org.catrobat.catroid.content.Script;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.content.StartScript;\n+import org.catrobat.catroid.content.bricks.PlaySoundBrick;\n+import org.catrobat.catroid.content.bricks.SceneTransitionBrick;\n+import org.catrobat.catroid.content.bricks.WaitBrick;\n+import org.catrobat.catroid.io.ResourceImporter;\n+import org.catrobat.catroid.io.SoundManager;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.ui.SpriteActivity;\n+import org.catrobat.catroid.uiespresso.stage.utils.ScriptEvaluationGateBrick;\n+import org.catrobat.catroid.uiespresso.util.rules.FragmentActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.assertFalse;\n+\n+import static org.catrobat.catroid.common.Constants.SOUND_DIRECTORY_NAME;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class SceneTransitionWithSoundBrickStageTest {\n+\n+\tprivate ScriptEvaluationGateBrick lastBrickFirstScript;\n+\tprivate ScriptEvaluationGateBrick lastBrickSecondScript;\n+\n+\tprivate String firstSceneName;\n+\tprivate Script secondScript;\n+\n+\tprivate File soundFile;\n+\n+\t@Rule\n+\tpublic FragmentActivityTestRule<SpriteActivity> baseActivityTestRule = new\n+\t\t\tFragmentActivityTestRule<>(SpriteActivity.class, SpriteActivity.EXTRA_FRAGMENT_POSITION,\n+\t\t\tSpriteActivity.FRAGMENT_SOUNDS);\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tcreateProject();\n+\t\tbaseActivityTestRule.launchActivity(null);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tTestUtils.deleteProjects(getClass().getSimpleName());\n+\t\tif (soundFile != null && soundFile.exists()) {\n+\t\t\tsoundFile.delete();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testStopSoundOnSceneTransition() {\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickSecondScript);\n+\t\tassertFalse(mediaPlayer.isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundAfterSceneTransition() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickFirstScript);\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundDoesNotStartFromBeginning() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickFirstScript);\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t\tassertTrue(mediaPlayer.getCurrentPosition() > 0);\n+\t}\n+\n+\tprivate MediaPlayer startAndGetMediaplayer(ScriptEvaluationGateBrick scriptBrick) {\n+\t\tonView(withId(R.id.button_play))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxODA4Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r386518082", "bodyText": "As discussed with Thomas, please refactor it to StageActivity.", "author": "gPathpp", "createdAt": "2020-03-02T16:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MDc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NjQ3OA==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r386376478", "bodyText": "Please check if this brick is really necessary.", "author": "gPathpp", "createdAt": "2020-03-02T12:57:30Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/content/brick/stage/SceneTransitionWithSoundBrickStageTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.content.brick.stage;\n+\n+import android.media.MediaPlayer;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.R;\n+import org.catrobat.catroid.common.SoundInfo;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.content.Scene;\n+import org.catrobat.catroid.content.Script;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.content.StartScript;\n+import org.catrobat.catroid.content.bricks.PlaySoundBrick;\n+import org.catrobat.catroid.content.bricks.SceneTransitionBrick;\n+import org.catrobat.catroid.content.bricks.WaitBrick;\n+import org.catrobat.catroid.io.ResourceImporter;\n+import org.catrobat.catroid.io.SoundManager;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.ui.SpriteActivity;\n+import org.catrobat.catroid.uiespresso.stage.utils.ScriptEvaluationGateBrick;\n+import org.catrobat.catroid.uiespresso.util.rules.FragmentActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static junit.framework.TestCase.assertFalse;\n+\n+import static org.catrobat.catroid.common.Constants.SOUND_DIRECTORY_NAME;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class SceneTransitionWithSoundBrickStageTest {\n+\n+\tprivate ScriptEvaluationGateBrick lastBrickFirstScript;\n+\tprivate ScriptEvaluationGateBrick lastBrickSecondScript;\n+\n+\tprivate String firstSceneName;\n+\tprivate Script secondScript;\n+\n+\tprivate File soundFile;\n+\n+\t@Rule\n+\tpublic FragmentActivityTestRule<SpriteActivity> baseActivityTestRule = new\n+\t\t\tFragmentActivityTestRule<>(SpriteActivity.class, SpriteActivity.EXTRA_FRAGMENT_POSITION,\n+\t\t\tSpriteActivity.FRAGMENT_SOUNDS);\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tcreateProject();\n+\t\tbaseActivityTestRule.launchActivity(null);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tTestUtils.deleteProjects(getClass().getSimpleName());\n+\t\tif (soundFile != null && soundFile.exists()) {\n+\t\t\tsoundFile.delete();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testStopSoundOnSceneTransition() {\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickSecondScript);\n+\t\tassertFalse(mediaPlayer.isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundAfterSceneTransition() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickFirstScript);\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundDoesNotStartFromBeginning() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\tMediaPlayer mediaPlayer = startAndGetMediaplayer(lastBrickFirstScript);\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t\tassertTrue(mediaPlayer.getCurrentPosition() > 0);\n+\t}\n+\n+\tprivate MediaPlayer startAndGetMediaplayer(ScriptEvaluationGateBrick scriptBrick) {\n+\t\tonView(withId(R.id.button_play))\n+\t\t\t\t.perform(click());\n+\t\tscriptBrick.waitUntilEvaluated(3000);\n+\t\tList<MediaPlayer> mediaPlayers = SoundManager.getInstance().getMediaPlayers();\n+\t\tassertEquals(1, mediaPlayers.size());\n+\t\treturn mediaPlayers.get(0);\n+\t}\n+\n+\tprivate void createProject() throws IOException {\n+\t\tProject project = new Project(ApplicationProvider.getApplicationContext(), getClass().getSimpleName());\n+\t\tScript script = new StartScript();\n+\t\tSprite sprite = project.getDefaultScene().getBackgroundSprite();\n+\t\tXstreamSerializer.getInstance().saveProject(project);\n+\n+\t\tfirstSceneName = project.getDefaultScene().getName();\n+\t\tScene secondScene = new Scene(\"Scene 2\", project);\n+\n+\t\tsprite.addScript(script);\n+\t\tproject.getDefaultScene().addSprite(sprite);\n+\t\tProjectManager.getInstance().setCurrentProject(project);\n+\t\tProjectManager.getInstance().setCurrentSprite(sprite);\n+\t\tproject.addScene(secondScene);\n+\n+\t\tscript.addBrick(new PlaySoundBrick());\n+\t\tscript.addBrick(new WaitBrick(500));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NjY0Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r387076642", "bodyText": "it is necessary to let a sound play for a short time so that it is possible to check that it did not start from the beginning when continuing a scene.", "author": "maxf24", "createdAt": "2020-03-03T14:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NjQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4MTY4MA==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r386381680", "bodyText": "Please rename this function.\nMaybe it is useful to map sounds to positions.", "author": "gPathpp", "createdAt": "2020-03-02T13:08:40Z", "path": "catroid/src/main/java/org/catrobat/catroid/io/SoundManager.java", "diffHunk": "@@ -148,6 +162,20 @@ public synchronized void stopAllSounds() {\n \t\t}\n \t}\n \n+\tpublic List<String> getSoundFiles() {\n+\t\treturn soundFiles;\n+\t}\n+\n+\tpublic List<Integer> getCurrentPositionOfSounds() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4MjE2Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r386382163", "bodyText": "You may not want to add sounds that are not playing.", "author": "gPathpp", "createdAt": "2020-03-02T13:09:44Z", "path": "catroid/src/main/java/org/catrobat/catroid/io/SoundManager.java", "diffHunk": "@@ -148,6 +162,20 @@ public synchronized void stopAllSounds() {\n \t\t}\n \t}\n \n+\tpublic List<String> getSoundFiles() {\n+\t\treturn soundFiles;\n+\t}\n+\n+\tpublic List<Integer> getCurrentPositionOfSounds() {\n+\t\tList<Integer> positionList = new ArrayList<>();\n+\t\tfor (MediaPlayer mediaPlayer : mediaPlayers) {\n+\t\t\tint position = mediaPlayer.isPlaying() ? mediaPlayer.getCurrentPosition()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4NzI3MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r386387271", "bodyText": "Please refactor this as discussed.", "author": "gPathpp", "createdAt": "2020-03-02T13:20:32Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/StageListener.java", "diffHunk": "@@ -875,10 +876,24 @@ private StageBackup saveToBackup() {\n \t\t\t\tCameraManager.getInstance().pauseForScene();\n \t\t\t}\n \t\t}\n-\n+\t\tsaveSoundsToBackup(backup);\n \t\treturn backup;\n \t}\n \n+\tprivate void saveSoundsToBackup(StageBackup backup) {\n+\t\tList<String> soundFiles = SoundManager.getInstance().getSoundFiles();\n+\t\tList<Integer> positionList =\n+\t\t\t\tSoundManager.getInstance().getCurrentPositionOfSounds();\n+\t\tbackup.soundsDurationMap = new HashMap<>();\n+\t\tif (soundFiles.size() == positionList.size()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MjE0Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388192143", "bodyText": "This line seems not right. Could you please check why this is public? (I know you didn't write this line ^^)\n(if it's only used in tests => visible for testing and hopefully, there is no occurrence in the code)", "author": "gPathpp", "createdAt": "2020-03-05T10:06:00Z", "path": "catroid/src/main/java/org/catrobat/catroid/io/SoundManager.java", "diffHunk": "@@ -42,6 +44,7 @@\n \n \tprivate final List<MediaPlayer> mediaPlayers = new ArrayList<MediaPlayer>(MAX_MEDIA_PLAYERS);\n \tprivate float volume = 70.0f;\n+\tprivate List<String> soundFiles = new ArrayList<>(MAX_MEDIA_PLAYERS);\n \n \tpublic SoundManager() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMTU3Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388211572", "bodyText": "Or if it's in the tests => mock. Thank you!", "author": "gPathpp", "createdAt": "2020-03-05T10:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MjE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNDI3NA==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388204274", "bodyText": "This seems a bit too complicated for this task. Instead of two separate lists of sound files and media Players. You could map one sound file to one MediaPlayer from the beginning (in play sound).\nFor further processing see https://mkyong.com/java8/java-8-filter-a-map-examples/\nmap<String, MediaPlayer> => filter => map => collect = map<string, Integer>", "author": "gPathpp", "createdAt": "2020-03-05T10:28:14Z", "path": "catroid/src/main/java/org/catrobat/catroid/io/SoundManager.java", "diffHunk": "@@ -148,6 +164,27 @@ public synchronized void stopAllSounds() {\n \t\t}\n \t}\n \n+\tpublic Map<String, Integer> getPlayingSoundDurationMap() {\n+\t\tList<Integer> positionList =\n+\t\t\t\tSoundManager.getInstance().getCurrentPositionOfSounds();\n+\t\tMap<String, Integer> soundsDurationMap = new HashMap<>();\n+\t\tfor (String sound : soundFiles) {\n+\t\t\tint position = positionList.get(soundFiles.indexOf(sound));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxOTQzMQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388219431", "bodyText": "Good Points, thanks!\nUnfortunatly using stream is only possible starting with API 24 and as per my IDE is the current min 21.", "author": "maxf24", "createdAt": "2020-03-05T10:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNDI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNzgzMw==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388227833", "bodyText": "Ok, then its probably fine as it is. You can decide if you want to refactor this or leave it like that.", "author": "gPathpp", "createdAt": "2020-03-05T11:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNDI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNTY3OA==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388205678", "bodyText": "The name is ok, but it is the only difference to playSound. Please remove it and/or rename Play Sound)", "author": "gPathpp", "createdAt": "2020-03-05T10:30:47Z", "path": "catroid/src/main/java/org/catrobat/catroid/io/SoundManager.java", "diffHunk": "@@ -51,11 +54,23 @@ public static SoundManager getInstance() {\n \t}\n \n \tpublic synchronized void playSoundFile(String pathToSoundfile) {\n+\t\tplaySound(pathToSoundfile, 0);\n+\t}\n+\n+\tpublic synchronized void playSoundFileWithStartTime(String pathToSoundfile,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjM3Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388206373", "bodyText": "Nice!", "author": "gPathpp", "createdAt": "2020-03-05T10:32:00Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/content/brick/stage/SceneTransitionWithSoundBrickStageTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.content.brick.stage;\n+\n+import android.media.MediaPlayer;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.common.SoundInfo;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.content.Scene;\n+import org.catrobat.catroid.content.Script;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.content.StartScript;\n+import org.catrobat.catroid.content.bricks.PlaySoundBrick;\n+import org.catrobat.catroid.content.bricks.SceneTransitionBrick;\n+import org.catrobat.catroid.content.bricks.WaitBrick;\n+import org.catrobat.catroid.io.ResourceImporter;\n+import org.catrobat.catroid.io.SoundManager;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.stage.StageActivity;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.uiespresso.stage.utils.ScriptEvaluationGateBrick;\n+import org.catrobat.catroid.uiespresso.util.rules.BaseActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static junit.framework.TestCase.assertFalse;\n+import static junit.framework.TestCase.assertTrue;\n+\n+import static org.catrobat.catroid.common.Constants.SOUND_DIRECTORY_NAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class SceneTransitionWithSoundBrickStageTest {\n+\n+\tprivate ScriptEvaluationGateBrick lastBrickFirstScript;\n+\tprivate ScriptEvaluationGateBrick lastBrickSecondScript;\n+\n+\tprivate String firstSceneName;\n+\tprivate Script secondScript;\n+\n+\tprivate static ProjectManager projectManager;\n+\tprivate File soundFile;\n+\n+\t@Rule\n+\tpublic BaseActivityTestRule<StageActivity> baseActivityTestRule = new\n+\t\t\tBaseActivityTestRule<>(StageActivity.class, false,\n+\t\t\tfalse);\n+\n+\t@BeforeClass\n+\tpublic static void setUpProjectManager() {\n+\t\tprojectManager = ProjectManager.getInstance();\n+\t}\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tcreateProject(getClass().getSimpleName());\n+\t\tbaseActivityTestRule.launchActivity(null);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tTestUtils.deleteProjects(getClass().getSimpleName());\n+\t\tif (soundFile != null && soundFile.exists()) {\n+\t\t\tsoundFile.delete();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testStopSoundOnSceneTransition() {\n+\t\trunProject(lastBrickSecondScript);\n+\t\tassertFalse(getMediaplayer().isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundAfterSceneTransition() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\trunProject(lastBrickFirstScript);\n+\t\tassertTrue(getMediaplayer().isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundDoesNotStartFromBeginning() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\trunProject(lastBrickFirstScript);\n+\t\tMediaPlayer mediaPlayer = getMediaplayer();\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t\tassertTrue(mediaPlayer.getCurrentPosition() > 0);\n+\t}\n+\n+\tprivate void runProject(ScriptEvaluationGateBrick scriptBrick) {\n+\t\tscriptBrick.waitUntilEvaluated(3000);\n+\t}\n+\n+\tprivate MediaPlayer getMediaplayer() {\n+\t\treturn SoundManager.getInstance().getMediaPlayers().get(0);\n+\t}\n+\n+\tprivate void createProject(String projectName) throws IOException {\n+\t\tProject project = new Project(ApplicationProvider.getApplicationContext(), projectName);\n+\t\tScript script = new StartScript();\n+\t\tSprite sprite = project.getDefaultScene().getBackgroundSprite();\n+\t\tXstreamSerializer.getInstance().saveProject(project);\n+\n+\t\tfirstSceneName = project.getDefaultScene().getName();\n+\t\tScene secondScene = new Scene(\"Scene 2\", project);\n+\n+\t\tsprite.addScript(script);\n+\t\tproject.getDefaultScene().addSprite(sprite);\n+\t\tprojectManager.setCurrentProject(project);\n+\t\tprojectManager.setCurrentSprite(sprite);\n+\t\tproject.addScene(secondScene);\n+\t\tPlaySoundBrick soundBrick = new PlaySoundBrick();\n+\t\tsoundFile = ResourceImporter.createSoundFileFromResourcesInDirectory(\n+\t\t\t\tInstrumentationRegistry.getInstrumentation().getContext().getResources(),\n+\t\t\t\torg.catrobat.catroid.test.R.raw.testsoundui,\n+\t\t\t\tnew File(project.getDefaultScene().getDirectory(), SOUND_DIRECTORY_NAME),\n+\t\t\t\t\"testsoundui.mp3\");\n+\t\tSoundInfo soundInfo = new SoundInfo();\n+\t\tsoundInfo.setFile(soundFile);\n+\t\tsoundInfo.setName(\"testSound\");\n+\t\tsoundBrick.setSound(soundInfo);\n+\t\tscript.addBrick(soundBrick);\n+\t\tscript.addBrick(new WaitBrick(500));\n+\t\tscript.addBrick(new SceneTransitionBrick(secondScene.getName()));\n+\t\tprojectManager.getCurrentSprite().getSoundList().add(soundInfo);\n+\n+\t\tsecondScript = new StartScript();\n+\t\tSprite secondSprite = new Sprite(\"Sprite2\");\n+\t\tsecondSprite.addScript(secondScript);\n+\t\tsecondScene.addSprite(secondSprite);\n+\n+\t\tlastBrickFirstScript = ScriptEvaluationGateBrick.appendToScript(script);\n+\t\tlastBrickSecondScript = ScriptEvaluationGateBrick.appendToScript(secondScript);\n+\t}\n+}", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjk4NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r388206985", "bodyText": "Nice fix!", "author": "gPathpp", "createdAt": "2020-03-05T10:33:10Z", "path": "catroid/src/main/java/org/catrobat/catroid/stage/StageListener.java", "diffHunk": "@@ -918,6 +919,9 @@ private void restoreFromBackup(StageBackup backup) {\n \t\tif (CameraManager.getInstance() != null && backup.cameraRunning) {\n \t\t\tCameraManager.getInstance().resumeForScene();\n \t\t}\n+\t\tfor (Map.Entry<String, Integer> entry : backup.soundsDurationMap.entrySet()) {\n+\t\t\tSoundManager.getInstance().playSoundFileWithStartTime(entry.getKey(), entry.getValue());\n+\t\t}\n \t\tinitStageInputListener();\n \t}\n ", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MTc0NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391351745", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\trunProject(lastBrickSecondScript);\n          \n          \n            \n            \t\trunProject(lastBrickFirstScript);\n          \n      \n    \n    \n  \n\nPLEASE CHECK: Shouldn't this also start with the first scene here? Otherwise the sound never starts, right?", "author": "wslany", "createdAt": "2020-03-12T01:04:12Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/content/brick/stage/SceneTransitionWithSoundBrickStageTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.content.brick.stage;\n+\n+import android.media.MediaPlayer;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.common.SoundInfo;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.content.Scene;\n+import org.catrobat.catroid.content.Script;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.content.StartScript;\n+import org.catrobat.catroid.content.bricks.PlaySoundBrick;\n+import org.catrobat.catroid.content.bricks.SceneTransitionBrick;\n+import org.catrobat.catroid.content.bricks.WaitBrick;\n+import org.catrobat.catroid.io.ResourceImporter;\n+import org.catrobat.catroid.io.SoundManager;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.stage.StageActivity;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.uiespresso.stage.utils.ScriptEvaluationGateBrick;\n+import org.catrobat.catroid.uiespresso.util.rules.BaseActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static junit.framework.TestCase.assertFalse;\n+import static junit.framework.TestCase.assertTrue;\n+\n+import static org.catrobat.catroid.common.Constants.SOUND_DIRECTORY_NAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class SceneTransitionWithSoundBrickStageTest {\n+\n+\tprivate ScriptEvaluationGateBrick lastBrickFirstScript;\n+\tprivate ScriptEvaluationGateBrick lastBrickSecondScript;\n+\n+\tprivate String firstSceneName;\n+\tprivate Script secondScript;\n+\n+\tprivate static ProjectManager projectManager;\n+\tprivate File soundFile;\n+\n+\t@Rule\n+\tpublic BaseActivityTestRule<StageActivity> baseActivityTestRule = new\n+\t\t\tBaseActivityTestRule<>(StageActivity.class, false,\n+\t\t\tfalse);\n+\n+\t@BeforeClass\n+\tpublic static void setUpProjectManager() {\n+\t\tprojectManager = ProjectManager.getInstance();\n+\t}\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tcreateProject(getClass().getSimpleName());\n+\t\tbaseActivityTestRule.launchActivity(null);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tTestUtils.deleteProjects(getClass().getSimpleName());\n+\t\tif (soundFile != null && soundFile.exists()) {\n+\t\t\tsoundFile.delete();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testStopSoundOnSceneTransition() {\n+\t\trunProject(lastBrickSecondScript);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxNDU4Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391514586", "bodyText": "In runProject the whole Project is run, both scripts get executed - the parameter is only used to wait until this Script is fully evaluated.", "author": "maxf24", "createdAt": "2020-03-12T10:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyNjYzOQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391526639", "bodyText": "Thank you for explaining!", "author": "wslany", "createdAt": "2020-03-12T10:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MTc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391353045", "bodyText": "PLEASE EXPLAIN: Have you checked this test in test-first style, i.e., before you implemented the fix? And what is the unit for the current position here? Can't this asset be true even if the sound was restarted, because of timing issues? Please clarify and confirm.", "author": "wslany", "createdAt": "2020-03-12T01:09:46Z", "path": "catroid/src/androidTest/java/org/catrobat/catroid/uiespresso/content/brick/stage/SceneTransitionWithSoundBrickStageTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.catrobat.catroid.uiespresso.content.brick.stage;\n+\n+import android.media.MediaPlayer;\n+\n+import org.catrobat.catroid.ProjectManager;\n+import org.catrobat.catroid.common.SoundInfo;\n+import org.catrobat.catroid.content.Project;\n+import org.catrobat.catroid.content.Scene;\n+import org.catrobat.catroid.content.Script;\n+import org.catrobat.catroid.content.Sprite;\n+import org.catrobat.catroid.content.StartScript;\n+import org.catrobat.catroid.content.bricks.PlaySoundBrick;\n+import org.catrobat.catroid.content.bricks.SceneTransitionBrick;\n+import org.catrobat.catroid.content.bricks.WaitBrick;\n+import org.catrobat.catroid.io.ResourceImporter;\n+import org.catrobat.catroid.io.SoundManager;\n+import org.catrobat.catroid.io.XstreamSerializer;\n+import org.catrobat.catroid.stage.StageActivity;\n+import org.catrobat.catroid.test.utils.TestUtils;\n+import org.catrobat.catroid.uiespresso.stage.utils.ScriptEvaluationGateBrick;\n+import org.catrobat.catroid.uiespresso.util.rules.BaseActivityTestRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static junit.framework.TestCase.assertFalse;\n+import static junit.framework.TestCase.assertTrue;\n+\n+import static org.catrobat.catroid.common.Constants.SOUND_DIRECTORY_NAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class SceneTransitionWithSoundBrickStageTest {\n+\n+\tprivate ScriptEvaluationGateBrick lastBrickFirstScript;\n+\tprivate ScriptEvaluationGateBrick lastBrickSecondScript;\n+\n+\tprivate String firstSceneName;\n+\tprivate Script secondScript;\n+\n+\tprivate static ProjectManager projectManager;\n+\tprivate File soundFile;\n+\n+\t@Rule\n+\tpublic BaseActivityTestRule<StageActivity> baseActivityTestRule = new\n+\t\t\tBaseActivityTestRule<>(StageActivity.class, false,\n+\t\t\tfalse);\n+\n+\t@BeforeClass\n+\tpublic static void setUpProjectManager() {\n+\t\tprojectManager = ProjectManager.getInstance();\n+\t}\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tcreateProject(getClass().getSimpleName());\n+\t\tbaseActivityTestRule.launchActivity(null);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tTestUtils.deleteProjects(getClass().getSimpleName());\n+\t\tif (soundFile != null && soundFile.exists()) {\n+\t\t\tsoundFile.delete();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testStopSoundOnSceneTransition() {\n+\t\trunProject(lastBrickSecondScript);\n+\t\tassertFalse(getMediaplayer().isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundAfterSceneTransition() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\trunProject(lastBrickFirstScript);\n+\t\tassertTrue(getMediaplayer().isPlaying());\n+\t}\n+\n+\t@Test\n+\tpublic void testContinueSoundDoesNotStartFromBeginning() {\n+\t\tsecondScript.addBrick(new SceneTransitionBrick(firstSceneName));\n+\t\trunProject(lastBrickFirstScript);\n+\t\tMediaPlayer mediaPlayer = getMediaplayer();\n+\t\tassertTrue(mediaPlayer.isPlaying());\n+\t\tassertTrue(mediaPlayer.getCurrentPosition() > 0);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyMDk0OA==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391520948", "bodyText": "I did start my tests without my fix and all of them failed.\nThe current position is the time played in milliseconds.\nYes, I think timing issues are a potential problem here, but I did not find a better way to check this.", "author": "maxf24", "createdAt": "2020-03-12T10:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyNjQwNg==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391526406", "bodyText": "Thanks! How about, after starting the sound in the first scene, to wait for 0.1 second while still in the first scene using a \"wait 0.1 seconds\" brick, and then when returning back from the second scene immediately checking that the current position is > 100? Would that work?", "author": "wslany", "createdAt": "2020-03-12T10:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNTQyOQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391535429", "bodyText": "Oh I forgot to mention that, I already have a \"wait 0.5 seconds\" brick and after some testing it seems that I have to wait at least 0.3 seconds for the sound to start.\nThis seems to be very inconsistent and unfortunately I don't think a more precise check is possible.", "author": "maxf24", "createdAt": "2020-03-12T10:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNjg1NA==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391536854", "bodyText": "Well, shouldn't it then be >200? You could compare to > 150 instead of > 0, right?", "author": "wslany", "createdAt": "2020-03-12T10:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNzQ2OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391537469", "bodyText": "I just want to make these tests future proof (Moore's law...)", "author": "wslany", "createdAt": "2020-03-12T10:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0ODIwMA==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391548200", "bodyText": "After running the test three times the position of the Sound when transitioning back were: 227, 82, 141 ms\nIt really varies a lot.", "author": "maxf24", "createdAt": "2020-03-12T11:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MzUwNQ==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391553505", "bodyText": "At least > 50?", "author": "wslany", "createdAt": "2020-03-12T11:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2Mjc0Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3500#discussion_r391562743", "bodyText": "Thanks!", "author": "wslany", "createdAt": "2020-03-12T11:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1MzA0NQ=="}], "type": "inlineReview"}, {"oid": "7ed5dee491f9e9b20a7841f3cfde7238a65d330d", "url": "https://github.com/Catrobat/Catroid/commit/7ed5dee491f9e9b20a7841f3cfde7238a65d330d", "message": "CATROID-169 Sound continues on scene continue transition", "committedDate": "2020-03-12T11:28:53Z", "type": "commit"}, {"oid": "7ed5dee491f9e9b20a7841f3cfde7238a65d330d", "url": "https://github.com/Catrobat/Catroid/commit/7ed5dee491f9e9b20a7841f3cfde7238a65d330d", "message": "CATROID-169 Sound continues on scene continue transition", "committedDate": "2020-03-12T11:28:53Z", "type": "forcePushed"}]}