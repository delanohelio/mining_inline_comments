{"pr_number": 3896, "pr_title": "CATROID-571 Refactor RepeatActionTest to Kotlin", "pr_createdAt": "2020-12-16T14:56:19Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3896", "timeline": [{"oid": "bcf9cae44eae72dc3455d2fc07c6454d42fdea0d", "url": "https://github.com/Catrobat/Catroid/commit/bcf9cae44eae72dc3455d2fc07c6454d42fdea0d", "message": "CATROID-571 Refactor RepeatActionTest to Kotlin", "committedDate": "2020-12-17T12:58:58Z", "type": "forcePushed"}, {"oid": "b95ad936dd7c7b6259c48432f28438fa5ec9a17d", "url": "https://github.com/Catrobat/Catroid/commit/b95ad936dd7c7b6259c48432f28438fa5ec9a17d", "message": "CATROID-571 Refactor RepeatActionTest to Kotlin", "committedDate": "2020-12-23T13:21:54Z", "type": "forcePushed"}, {"oid": "eaf00caa32246112ce66179b4121e442d22c4c8d", "url": "https://github.com/Catrobat/Catroid/commit/eaf00caa32246112ce66179b4121e442d22c4c8d", "message": "CATROID-571 Refactor RepeatActionTest to Kotlin", "committedDate": "2020-12-23T13:25:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0MDAxMA==", "url": "https://github.com/Catrobat/Catroid/pull/3896#discussion_r549340010", "bodyText": "Please use Kotlin functions instead and also don't push debug lines.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (index in 0 until iterations) {\n          \n          \n            \n                        var time = 0.0\n          \n          \n            \n                        println(\"index: $index\")\n          \n          \n            \n                        while (time < delayByContract) {\n          \n          \n            \n                            sprite.look.act(deltaDelayByContract)\n          \n          \n            \n                            time += deltaDelayByContract.toDouble()\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    repeat((iterations * delayByContract / deltaDelayByContract).toInt()){ sprite.look.act(deltaDelayByContract) }", "author": "gPathpp", "createdAt": "2020-12-28T13:01:33Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Script\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.StartScript\n+import org.catrobat.catroid.content.bricks.ChangeYByNBrick\n+import org.catrobat.catroid.content.bricks.FormulaBrick\n+import org.catrobat.catroid.content.bricks.RepeatBrick\n+import org.catrobat.catroid.content.eventids.EventId\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class RepeatActionTest(\n+    private var iterations: Int,\n+    private var deltaY: Int,\n+    private var loopCondition: Formula?,\n+    private var beforeLoopBrick: FormulaBrick?,\n+    private var afterLoopBrick: FormulaBrick?,\n+    private var expectedValue: Int\n+) {\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+    private lateinit var script: Script\n+\n+    private val delayByContract = 0.020f\n+    private val deltaDelayByContract = 0.005f\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{index}\")\n+        fun parameters() = listOf(\n+            arrayOf(4, -10, Formula(4), null, ChangeYByNBrick(50), -40),\n+            arrayOf(8, -10, Formula(FormulaElement(FormulaElement.ElementType.SENSOR, Sensors.OBJECT_Y.name, null)),\n+                    ChangeYByNBrick(5), ChangeYByNBrick(50), 5),\n+            arrayOf(4, -1, Formula(-1), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(0), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(\"3\"), null, ChangeYByNBrick(10), 7),\n+            arrayOf(4, -1, Formula(Double.NaN), null, ChangeYByNBrick(10), 10))\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = Sprite(\"testSprite\")\n+        script = StartScript()\n+        project = Project(MockUtil.mockContextForProject(), \"testProject\")\n+        ProjectManager.getInstance().currentProject = project\n+    }\n+\n+    @Test\n+    fun testLoopDelay() {\n+        val repeatBrick = RepeatBrick(loopCondition)\n+        repeatBrick.addBrick(ChangeYByNBrick(deltaY))\n+        if (beforeLoopBrick != null) {\n+            script.addBrick(beforeLoopBrick)\n+        }\n+        script.addBrick(repeatBrick)\n+        if (afterLoopBrick != null) {\n+            script.addBrick(afterLoopBrick)\n+        }\n+        sprite.addScript(script)\n+        sprite.initializeEventThreads(EventId.START)\n+        for (index in 0 until iterations) {\n+            var time = 0.0\n+            println(\"index: $index\")\n+            while (time < delayByContract) {\n+                sprite.look.act(deltaDelayByContract)\n+                time += deltaDelayByContract.toDouble()\n+            }\n+        }", "originalCommit": "eaf00caa32246112ce66179b4121e442d22c4c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM0NDM2Ng==", "url": "https://github.com/Catrobat/Catroid/pull/3896#discussion_r549344366", "bodyText": "Please remove beforeLoopBrick and afterLoopBrick, those two don't belong here and also falsify this test. Have a look at the original test and the repeat action.", "author": "gPathpp", "createdAt": "2020-12-28T13:16:19Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Script\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.StartScript\n+import org.catrobat.catroid.content.bricks.ChangeYByNBrick\n+import org.catrobat.catroid.content.bricks.FormulaBrick\n+import org.catrobat.catroid.content.bricks.RepeatBrick\n+import org.catrobat.catroid.content.eventids.EventId\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class RepeatActionTest(\n+    private var iterations: Int,\n+    private var deltaY: Int,\n+    private var loopCondition: Formula?,\n+    private var beforeLoopBrick: FormulaBrick?,\n+    private var afterLoopBrick: FormulaBrick?,\n+    private var expectedValue: Int\n+) {\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+    private lateinit var script: Script\n+\n+    private val delayByContract = 0.020f\n+    private val deltaDelayByContract = 0.005f\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{index}\")\n+        fun parameters() = listOf(\n+            arrayOf(4, -10, Formula(4), null, ChangeYByNBrick(50), -40),\n+            arrayOf(8, -10, Formula(FormulaElement(FormulaElement.ElementType.SENSOR, Sensors.OBJECT_Y.name, null)),\n+                    ChangeYByNBrick(5), ChangeYByNBrick(50), 5),\n+            arrayOf(4, -1, Formula(-1), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(0), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(\"3\"), null, ChangeYByNBrick(10), 7),\n+            arrayOf(4, -1, Formula(Double.NaN), null, ChangeYByNBrick(10), 10))\n+    }", "originalCommit": "eaf00caa32246112ce66179b4121e442d22c4c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM1MzUxMw==", "url": "https://github.com/Catrobat/Catroid/pull/3896#discussion_r549353513", "bodyText": "Since there is a vast dependency between this test and ChangeYByNBrick, I suggest using a Brick-Mock/Stub with an Action-Mock instead. Afterward, verify how often this ActionMock was called.\nPlease also similarly refactor the language test (use counts instead of the position).", "author": "gPathpp", "createdAt": "2020-12-28T13:46:23Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/content/actions/RepeatActionTest.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.test.content.actions\n+\n+import org.catrobat.catroid.ProjectManager\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Script\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.content.StartScript\n+import org.catrobat.catroid.content.bricks.ChangeYByNBrick\n+import org.catrobat.catroid.content.bricks.FormulaBrick\n+import org.catrobat.catroid.content.bricks.RepeatBrick\n+import org.catrobat.catroid.content.eventids.EventId\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.test.MockUtil\n+import org.junit.Assert\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.junit.runners.Parameterized\n+\n+@RunWith(Parameterized::class)\n+class RepeatActionTest(\n+    private var iterations: Int,\n+    private var deltaY: Int,\n+    private var loopCondition: Formula?,\n+    private var beforeLoopBrick: FormulaBrick?,\n+    private var afterLoopBrick: FormulaBrick?,\n+    private var expectedValue: Int\n+) {\n+    private lateinit var sprite: Sprite\n+    private lateinit var project: Project\n+    private lateinit var script: Script\n+\n+    private val delayByContract = 0.020f\n+    private val deltaDelayByContract = 0.005f\n+\n+    companion object {\n+        @JvmStatic\n+        @Parameterized.Parameters(name = \"{index}\")\n+        fun parameters() = listOf(\n+            arrayOf(4, -10, Formula(4), null, ChangeYByNBrick(50), -40),\n+            arrayOf(8, -10, Formula(FormulaElement(FormulaElement.ElementType.SENSOR, Sensors.OBJECT_Y.name, null)),\n+                    ChangeYByNBrick(5), ChangeYByNBrick(50), 5),\n+            arrayOf(4, -1, Formula(-1), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(0), null, ChangeYByNBrick(10), 10),\n+            arrayOf(4, -1, Formula(\"3\"), null, ChangeYByNBrick(10), 7),\n+            arrayOf(4, -1, Formula(Double.NaN), null, ChangeYByNBrick(10), 10))\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        sprite = Sprite(\"testSprite\")\n+        script = StartScript()\n+        project = Project(MockUtil.mockContextForProject(), \"testProject\")\n+        ProjectManager.getInstance().currentProject = project\n+    }\n+\n+    @Test\n+    fun testLoopDelay() {\n+        val repeatBrick = RepeatBrick(loopCondition)\n+        repeatBrick.addBrick(ChangeYByNBrick(deltaY))\n+        if (beforeLoopBrick != null) {\n+            script.addBrick(beforeLoopBrick)\n+        }\n+        script.addBrick(repeatBrick)\n+        if (afterLoopBrick != null) {\n+            script.addBrick(afterLoopBrick)\n+        }\n+        sprite.addScript(script)\n+        sprite.initializeEventThreads(EventId.START)\n+        for (index in 0 until iterations) {\n+            var time = 0.0\n+            println(\"index: $index\")\n+            while (time < delayByContract) {\n+                sprite.look.act(deltaDelayByContract)\n+                time += deltaDelayByContract.toDouble()\n+            }\n+        }\n+        Assert.assertEquals(expectedValue, sprite.look.yInUserInterfaceDimensionUnit.toInt())", "originalCommit": "eaf00caa32246112ce66179b4121e442d22c4c8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "09959171869bc24dc727966c52ba75c243affca3", "url": "https://github.com/Catrobat/Catroid/commit/09959171869bc24dc727966c52ba75c243affca3", "message": "CATROID-571 Refactor RepeatActionTest to Kotlin", "committedDate": "2021-01-19T16:25:47Z", "type": "forcePushed"}, {"oid": "6b7f3f1ce5c13369c77ca3cf7876c20fb00372ce", "url": "https://github.com/Catrobat/Catroid/commit/6b7f3f1ce5c13369c77ca3cf7876c20fb00372ce", "message": "CATROID-571 Refactor RepeatActionTest to Kotlin", "committedDate": "2021-01-19T16:38:20Z", "type": "forcePushed"}, {"oid": "4085a2bd23bad54ee340de02ed0bb6de28d2e048", "url": "https://github.com/Catrobat/Catroid/commit/4085a2bd23bad54ee340de02ed0bb6de28d2e048", "message": "CATROID-571 Refactor RepeatActionTest to Kotlin", "committedDate": "2021-01-21T18:37:04Z", "type": "commit"}, {"oid": "4085a2bd23bad54ee340de02ed0bb6de28d2e048", "url": "https://github.com/Catrobat/Catroid/commit/4085a2bd23bad54ee340de02ed0bb6de28d2e048", "message": "CATROID-571 Refactor RepeatActionTest to Kotlin", "committedDate": "2021-01-21T18:37:04Z", "type": "forcePushed"}]}