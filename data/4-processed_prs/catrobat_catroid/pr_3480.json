{"pr_number": 3480, "pr_title": "CATROID-374 Implement sharing WebView Login automatically", "pr_createdAt": "2020-02-16T18:42:54Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3480", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "ab9fc19834f5e1388f91871825af9be15db4cb54", "url": "https://github.com/Catrobat/Catroid/commit/ab9fc19834f5e1388f91871825af9be15db4cb54", "message": "CATROID-374 Implement sharing WebView Login automatically", "committedDate": "2020-02-16T19:20:34Z", "type": "commit"}, {"oid": "ab9fc19834f5e1388f91871825af9be15db4cb54", "url": "https://github.com/Catrobat/Catroid/commit/ab9fc19834f5e1388f91871825af9be15db4cb54", "message": "CATROID-374 Implement sharing WebView Login automatically", "committedDate": "2020-02-16T19:20:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MTA2NA==", "url": "https://github.com/Catrobat/Catroid/pull/3480#discussion_r381381064", "bodyText": "If you declare sharedPreferences and cookieManager as a parameter, you'll be able to test the method. (Hint: mock it)", "author": "gPathpp", "createdAt": "2020-02-19T16:16:40Z", "path": "catroid/src/main/java/org/catrobat/catroid/ui/WebViewActivity.java", "diffHunk": "@@ -249,6 +255,29 @@ private String getExtensionFromContentDisposition(String contentDisposition) {\n \t\treturn extension;\n \t}\n \n+\tpublic void setLoginCookies(String url) {\n+\t\tSharedPreferences sharedPreferences =\n+\t\t\t\tPreferenceManager.getDefaultSharedPreferences(getApplicationContext());", "originalCommit": "ab9fc19834f5e1388f91871825af9be15db4cb54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MTkyMA==", "url": "https://github.com/Catrobat/Catroid/pull/3480#discussion_r381381920", "bodyText": "Please add a test.", "author": "gPathpp", "createdAt": "2020-02-19T16:17:52Z", "path": "catroid/src/main/java/org/catrobat/catroid/ui/WebViewActivity.java", "diffHunk": "@@ -249,6 +255,29 @@ private String getExtensionFromContentDisposition(String contentDisposition) {\n \t\treturn extension;\n \t}\n \n+\tpublic void setLoginCookies(String url) {\n+\t\tSharedPreferences sharedPreferences =\n+\t\t\t\tPreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n+\t\tString username = sharedPreferences.getString(Constants.USERNAME, Constants.NO_USERNAME);\n+\t\tString token = sharedPreferences.getString(Constants.TOKEN, Constants.NO_TOKEN);\n+\n+\t\tif (username.equals(Constants.NO_USERNAME) || token.equals(Constants.NO_TOKEN)) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString encodedUsername = null;\n+\t\ttry {\n+\t\t\tencodedUsername = URLEncoder.encode(username, \"UTF-8\");\n+\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tLog.e(TAG, Log.getStackTraceString(e));\n+\t\t}\n+\n+\t\tCookie usernameCookie = new Cookie(Cookie.USERNAME_COOKIE, encodedUsername);\n+\t\tCookie tokenCookie = new Cookie(Cookie.TOKEN_COOKIE, token);\n+\t\tCookieManager.getInstance().setCookie(url, usernameCookie.generateCookieString());\n+\t\tCookieManager.getInstance().setCookie(url, tokenCookie.generateCookieString());\n+\t}", "originalCommit": "ab9fc19834f5e1388f91871825af9be15db4cb54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}