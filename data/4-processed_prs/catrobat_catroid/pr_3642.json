{"pr_number": 3642, "pr_title": "CATROID-291: Refactoring", "pr_createdAt": "2020-06-21T09:11:45Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3642", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNzYwMw==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446027603", "bodyText": "Please remove this from this PR, IDE specific stuff", "author": "DinosaurierRex", "createdAt": "2020-06-26T07:56:11Z", "path": ".idea/codeStyles/Project.xml", "diffHunk": "@@ -100,7 +94,6 @@\n       </indentOptions>\n     </codeStyleSettings>\n     <codeStyleSettings language=\"XML\">\n-      <option name=\"FORCE_REARRANGE_MODE\" value=\"1\" />\n       <indentOptions>\n         <option name=\"CONTINUATION_INDENT_SIZE\" value=\"4\" />\n       </indentOptions>", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDY1OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446070659", "bodyText": "This searches general for the index of a look, not only Background. Please rename it", "author": "DinosaurierRex", "createdAt": "2020-06-26T09:22:13Z", "path": "catroid/src/main/java/org/catrobat/catroid/formulaeditor/common/FormulaElementOperations.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.formulaeditor.common\n+\n+import android.content.res.Resources\n+import com.badlogic.gdx.math.Rectangle\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.common.LookData\n+import org.catrobat.catroid.content.GroupSprite\n+import org.catrobat.catroid.content.Look\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Scene\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.SensorHandler\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.formulaeditor.UserList\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.nfc.NfcHandler\n+import org.catrobat.catroid.sensing.CollisionDetection\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageListener\n+import org.catrobat.catroid.utils.NumberFormats\n+import org.catrobat.catroid.utils.TouchUtil\n+import java.lang.Double.valueOf\n+import kotlin.math.round\n+\n+object FormulaElementOperations {\n+    @JvmStatic\n+    fun getLookLayerIndex(sprite: Sprite?, look: Look, spriteList: List<Sprite?>): Double {\n+        val lookZIndex = look.zIndex\n+        return when {\n+            lookZIndex == 0 -> 0.0\n+            lookZIndex < 0 -> spriteList.indexOf(sprite).toDouble()\n+            else -> lookZIndex.toDouble() - Constants.Z_INDEX_NUMBER_VIRTUAL_LAYERS\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun equalsDoubleIEEE754(left: Double, right: Double) =\n+        left.isNaN() && right.isNaN() || !left.isNaN() && !right.isNaN() && left >= right && left <= right\n+\n+    @JvmStatic\n+    fun interpretOperatorEqual(left: Any, right: Any): Boolean {\n+        val leftString = left.toString()\n+        val rightString = right.toString()\n+        return try {\n+            equalsDoubleIEEE754(leftString.toDouble(), rightString.toDouble())\n+        } catch (_: NumberFormatException) {\n+            leftString == rightString\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun tryInterpretDoubleValue(obj: Any): Double {\n+        return when (obj) {\n+            is String -> try {\n+                valueOf(obj)\n+            } catch (_: NumberFormatException) {\n+                Double.NaN\n+            }\n+            else -> obj as Double\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun normalizeDegeneratedDoubleValues(value: Any?): Any {\n+        return when (value) {\n+            is String,\n+            is Char -> value\n+            is Double -> when (value) {\n+                Double.NEGATIVE_INFINITY -> -Double.MAX_VALUE\n+                Double.POSITIVE_INFINITY -> Double.MAX_VALUE\n+                else -> value\n+            }\n+            else -> 0.0\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun isInteger(value: Double) = value.isFinite() && value == round(value)\n+\n+    @JvmStatic\n+    fun tryGetLookBackgroundNumber(lookData: LookData?, lookDataList: List<LookData>) =", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDk2OQ==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446070969", "bodyText": "same as above", "author": "DinosaurierRex", "createdAt": "2020-06-26T09:22:47Z", "path": "catroid/src/main/java/org/catrobat/catroid/formulaeditor/common/FormulaElementOperations.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2020 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.formulaeditor.common\n+\n+import android.content.res.Resources\n+import com.badlogic.gdx.math.Rectangle\n+import org.catrobat.catroid.common.Constants\n+import org.catrobat.catroid.common.LookData\n+import org.catrobat.catroid.content.GroupSprite\n+import org.catrobat.catroid.content.Look\n+import org.catrobat.catroid.content.Project\n+import org.catrobat.catroid.content.Scene\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.FormulaElement\n+import org.catrobat.catroid.formulaeditor.SensorHandler\n+import org.catrobat.catroid.formulaeditor.Sensors\n+import org.catrobat.catroid.formulaeditor.UserList\n+import org.catrobat.catroid.formulaeditor.UserVariable\n+import org.catrobat.catroid.nfc.NfcHandler\n+import org.catrobat.catroid.sensing.CollisionDetection\n+import org.catrobat.catroid.stage.StageActivity\n+import org.catrobat.catroid.stage.StageListener\n+import org.catrobat.catroid.utils.NumberFormats\n+import org.catrobat.catroid.utils.TouchUtil\n+import java.lang.Double.valueOf\n+import kotlin.math.round\n+\n+object FormulaElementOperations {\n+    @JvmStatic\n+    fun getLookLayerIndex(sprite: Sprite?, look: Look, spriteList: List<Sprite?>): Double {\n+        val lookZIndex = look.zIndex\n+        return when {\n+            lookZIndex == 0 -> 0.0\n+            lookZIndex < 0 -> spriteList.indexOf(sprite).toDouble()\n+            else -> lookZIndex.toDouble() - Constants.Z_INDEX_NUMBER_VIRTUAL_LAYERS\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun equalsDoubleIEEE754(left: Double, right: Double) =\n+        left.isNaN() && right.isNaN() || !left.isNaN() && !right.isNaN() && left >= right && left <= right\n+\n+    @JvmStatic\n+    fun interpretOperatorEqual(left: Any, right: Any): Boolean {\n+        val leftString = left.toString()\n+        val rightString = right.toString()\n+        return try {\n+            equalsDoubleIEEE754(leftString.toDouble(), rightString.toDouble())\n+        } catch (_: NumberFormatException) {\n+            leftString == rightString\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun tryInterpretDoubleValue(obj: Any): Double {\n+        return when (obj) {\n+            is String -> try {\n+                valueOf(obj)\n+            } catch (_: NumberFormatException) {\n+                Double.NaN\n+            }\n+            else -> obj as Double\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun normalizeDegeneratedDoubleValues(value: Any?): Any {\n+        return when (value) {\n+            is String,\n+            is Char -> value\n+            is Double -> when (value) {\n+                Double.NEGATIVE_INFINITY -> -Double.MAX_VALUE\n+                Double.POSITIVE_INFINITY -> Double.MAX_VALUE\n+                else -> value\n+            }\n+            else -> 0.0\n+        }\n+    }\n+\n+    @JvmStatic\n+    fun isInteger(value: Double) = value.isFinite() && value == round(value)\n+\n+    @JvmStatic\n+    fun tryGetLookBackgroundNumber(lookData: LookData?, lookDataList: List<LookData>) =\n+        lookData?.let { lookDataList.indexOf(it) + 1.0 } ?: 1.0\n+\n+    @JvmStatic\n+    fun getLookBackgroundName(lookData: LookData?) = lookData?.name ?: \"\"", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODc2Mw==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446078763", "bodyText": "Patrick already mentioned this issue, please refactor to dont use context here for only fetching a string", "author": "DinosaurierRex", "createdAt": "2020-06-26T09:38:24Z", "path": "catroid/src/main/java/org/catrobat/catroid/ui/dialogs/FormulaEditorComputeDialog.java", "diffHunk": "@@ -145,22 +149,40 @@ public void onAccuracyChanged(Sensor sensor, int accuracy) {\n \n \t@Override\n \tpublic void onSensorChanged(SensorEvent event) {\n-\t\tshowFormulaResult();\n+\t\tProjectManager projectManager = ProjectManager.getInstance();\n+\t\tSprite currentSprite = projectManager.getCurrentSprite();\n+\t\tAndroidStringProvider stringProvider = new AndroidStringProvider(context);\n+\t\tshowFormulaResult(currentSprite, stringProvider);\n \t}\n \n \tprivate void setDialogTextView(final String newString) {\n-\t\tcomputeTextView.post(new Runnable() {\n-\t\t\t@Override\n-\t\t\tpublic void run() {\n-\t\t\t\tcomputeTextView.setText(newString);\n-\n-\t\t\t\tViewGroup.LayoutParams params = computeTextView.getLayoutParams();\n-\t\t\t\tint height = computeTextView.getLineCount() * computeTextView.getLineHeight();\n-\t\t\t\tint heightMargin = (int) (height * 0.5);\n-\t\t\t\tparams.width = ViewGroup.LayoutParams.MATCH_PARENT;\n-\t\t\t\tparams.height = height + heightMargin;\n-\t\t\t\tcomputeTextView.setLayoutParams(params);\n-\t\t\t}\n+\t\tcomputeTextView.post(() -> {\n+\t\t\tcomputeTextView.setText(newString);\n+\n+\t\t\tViewGroup.LayoutParams params = computeTextView.getLayoutParams();\n+\t\t\tint height = computeTextView.getLineCount() * computeTextView.getLineHeight();\n+\t\t\tint heightMargin = (int) (height * 0.5);\n+\t\t\tparams.width = ViewGroup.LayoutParams.MATCH_PARENT;\n+\t\t\tparams.height = height + heightMargin;\n+\t\t\tcomputeTextView.setLayoutParams(params);\n \t\t});\n \t}\n+\n+\tprivate static class AndroidStringProvider implements Formula.StringProvider {\n+\t\tprivate final Context context;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MzQ4Nw==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446083487", "bodyText": "Please remove unused Singleton reference to Projectmanager.", "author": "DinosaurierRex", "createdAt": "2020-06-26T09:47:36Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/formulaeditor/FormulaTest.java", "diffHunk": "@@ -49,19 +53,23 @@\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.empty;\n import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n \n-@RunWith(JUnit4.class)\n+@RunWith(MockitoJUnitRunner.class)\n public class FormulaTest {\n \n \tprivate List<InternToken> internTokenList;\n \n \t@Before\n \tpublic void setUp() {\n-\t\tinternTokenList = new LinkedList<InternToken>();\n+\t\tinternTokenList = new LinkedList<>();\n+\t\tif (ProjectManager.getInstance() == null) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM3MDk0NA==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r450370944", "bodyText": "Unfortunately, this \ud83d\udca9 is needed if you want to execute the test locally... Ask @ThomasSchwengler, he discovered this.\nMaybe it has something to do with Dagger \ud83e\udd14", "author": "gPathpp", "createdAt": "2020-07-06T17:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MzQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MzczNw==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446083737", "bodyText": "Please try to put duplicate code into setup if possible", "author": "DinosaurierRex", "createdAt": "2020-06-26T09:48:09Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/formulaeditor/FormulaTest.java", "diffHunk": "@@ -208,7 +216,8 @@ public void stringConcatenationTest() {\n \t\tFormulaElement joinFunctionFormulaElement = new FormulaElement(ElementType.FUNCTION,\n \t\t\t\tFunctions.JOIN.name(), null, helloStringFormulaElement, worldStringFormulaElement);\n \t\tFormula joinFormula = new Formula(joinFunctionFormulaElement);\n-\t\tString computeDialogResult = joinFormula.getResultForComputeDialog(null);\n+\t\tStringProvider stringProvider = mock(StringProvider.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2NTU0MQ==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r450365541", "bodyText": "Unfortunately, the StringProvider is not used in all of the tests (approximately 50%)", "author": "gPathpp", "createdAt": "2020-07-06T17:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4MzczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NTc5OA==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446085798", "bodyText": "Future Refactoring Ticket (Training). Next step could be to rewrite this class to a parameterized test.", "author": "DinosaurierRex", "createdAt": "2020-06-26T09:52:24Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/formulaeditor/parser/ParserTest.java", "diffHunk": "@@ -152,7 +129,7 @@ public void testEmptyInput() {\n \n \t@Test\n \tpublic void testFuctionalAndSimpleBracketsCorrection() {\n-\t\tList<InternToken> internTokenList = new LinkedList<InternToken>();\n+\t\tList<InternToken> internTokenList = new LinkedList<>();\n \n \t\tinternTokenList.add(new InternToken(InternTokenType.FUNCTION_NAME, Functions.ABS.name()));\n \t\tinternTokenList.add(new InternToken(InternTokenType.FUNCTION_PARAMETERS_BRACKET_OPEN));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMTY3Nw==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r450401677", "bodyText": "Is there already a ticket?", "author": "gPathpp", "createdAt": "2020-07-06T18:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NTc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NzAzMA==", "url": "https://github.com/Catrobat/Catroid/pull/3642#discussion_r446087030", "bodyText": "Nice, check if your Implementation works exactly how you implemented it \ud83e\udd23", "author": "DinosaurierRex", "createdAt": "2020-06-26T09:54:56Z", "path": "catroid/src/test/java/org/catrobat/catroid/test/utiltests/NumberFormatsTest.java", "diffHunk": "@@ -33,35 +34,34 @@\n \n import static junit.framework.Assert.assertEquals;\n \n-import static org.catrobat.catroid.utils.NumberFormats.stringWithoutTrailingZero;\n-\n @RunWith(Parameterized.class)\n public class NumberFormatsTest {\n-\n \t@Parameterized.Parameter\n-\tpublic @IdRes String name;\n+\tpublic @IdRes String input;\n \t@Parameterized.Parameter(1)\n-\tpublic @IdRes String stringWithoutTrailingZero;\n+\tpublic @IdRes String expected;\n \n \t@Parameterized.Parameters(name = \"{0}\")\n \tpublic static Iterable<Object[]> data() {\n \t\treturn Arrays.asList(new Object[][]{\n-\t\t\t\t{\"0\", stringWithoutTrailingZero(String.valueOf(0))},\n-\t\t\t\t{\"8\", stringWithoutTrailingZero(String.valueOf(8))},\n-\t\t\t\t{\"-120\", stringWithoutTrailingZero(String.valueOf(-120))},\n-\t\t\t\t{\"0\", stringWithoutTrailingZero(String.valueOf(0.0))},\n-\t\t\t\t{\"0.5\", stringWithoutTrailingZero(String.valueOf(0.5))},\n-\t\t\t\t{\"0.7\", stringWithoutTrailingZero(String.valueOf(0.70))},\n-\t\t\t\t{\"0.103\", stringWithoutTrailingZero(String.valueOf(0.1030))},\n-\t\t\t\t{\"15.05\", stringWithoutTrailingZero(String.valueOf(15.050))},\n-\t\t\t\t{\"string.1900\", stringWithoutTrailingZero(\"string.1900\")},\n-\t\t\t\t{\"Pocket\", stringWithoutTrailingZero(\"Pocket\")}\n+\t\t\t\t{\"0\", \"0\"},\n+\t\t\t\t{\"8\", \"8\"},\n+\t\t\t\t{\"-120\", \"-120\"},\n+\t\t\t\t{\"0.0\", \"0\"},\n+\t\t\t\t{\"0.5\", \"0.5\"},\n+\t\t\t\t{\"0.70\", \"0.7\"},\n+\t\t\t\t{\"0.1030\", \"0.103\"},\n+\t\t\t\t{\"15.050\", \"15.05\"},\n+\t\t\t\t{\"string.1900\", \"string.1900\"},\n+\t\t\t\t{\"string0.10\", \"string0.10\"},", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "06e0a226a547f9989f7f644461634602694084c7", "url": "https://github.com/Catrobat/Catroid/commit/06e0a226a547f9989f7f644461634602694084c7", "message": "CATROID-291: Refactoring\n\n* Create a `EnumUtils` helper class to avoid code duplications among enums.\n* Simplify readability of `NumberFormatsTest` by fixating the expected output\n* `FormulaElement`\n  * Move access to static variables from within functions into parameters\n  * Move common functions into a `common` package to reduce code duplication\n    and enhance readability\n  * Add a `function` package and move all function interpretation into classes following the open-closed principle\n  * Split up many functions to improve readability\n  * Simplify many functions\n* `Formula`\n  * Simplify many functions by reducing the number of concerns per function\n* `CollisionDetection`\n  * Improve memory consumption by reducing the number of memory allocations in loops\n* Hide direct references to android context in wrappers\n* Rename functions to be more precise\n* Replace some class instances with mocks in tests where possible\n\nConvert classes to kotlin, cleanup\n\ncleanup\n\nConvert numberformats to kotlin\n\nFix NumberFormats\n\n\nfix Static Analysis Warnings", "committedDate": "2020-07-09T19:18:04Z", "type": "commit"}, {"oid": "06e0a226a547f9989f7f644461634602694084c7", "url": "https://github.com/Catrobat/Catroid/commit/06e0a226a547f9989f7f644461634602694084c7", "message": "CATROID-291: Refactoring\n\n* Create a `EnumUtils` helper class to avoid code duplications among enums.\n* Simplify readability of `NumberFormatsTest` by fixating the expected output\n* `FormulaElement`\n  * Move access to static variables from within functions into parameters\n  * Move common functions into a `common` package to reduce code duplication\n    and enhance readability\n  * Add a `function` package and move all function interpretation into classes following the open-closed principle\n  * Split up many functions to improve readability\n  * Simplify many functions\n* `Formula`\n  * Simplify many functions by reducing the number of concerns per function\n* `CollisionDetection`\n  * Improve memory consumption by reducing the number of memory allocations in loops\n* Hide direct references to android context in wrappers\n* Rename functions to be more precise\n* Replace some class instances with mocks in tests where possible\n\nConvert classes to kotlin, cleanup\n\ncleanup\n\nConvert numberformats to kotlin\n\nFix NumberFormats\n\n\nfix Static Analysis Warnings", "committedDate": "2020-07-09T19:18:04Z", "type": "forcePushed"}]}