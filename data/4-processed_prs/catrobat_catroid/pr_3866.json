{"pr_number": 3866, "pr_title": "CATROID-802 Refactor StoreCSVIntoUserListAction to Kotlin", "pr_createdAt": "2020-11-09T22:40:29Z", "pr_url": "https://github.com/Catrobat/Catroid/pull/3866", "timeline": [{"oid": "a598a1aeba9f2ff44c9510f43722c5a6af93f9e2", "url": "https://github.com/Catrobat/Catroid/commit/a598a1aeba9f2ff44c9510f43722c5a6af93f9e2", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2020-11-15T20:13:06Z", "type": "forcePushed"}, {"oid": "99182623c8f3abbfff51c5f5cab5ace6ccd484a1", "url": "https://github.com/Catrobat/Catroid/commit/99182623c8f3abbfff51c5f5cab5ace6ccd484a1", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2020-11-16T17:49:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MTc3NA==", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r525081774", "bodyText": "please change in line 80&83 the userList!! to userList?\nif you don't check for NPE don't enforce them, with the elvis-operator(?) kotlin ignores the function when it is NULL", "author": "Koell", "createdAt": "2020-11-17T11:26:33Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2018 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        val csvData: String\n+        try {\n+            csvData = formulaCSVData?.interpretString(sprite) ?: \"\"\n+\n+            var columnToExtract: Int\n+            columnToExtract = formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+\n+            columnToExtract--\n+\n+            var separator = ','\n+            val pattern = Pattern.compile(\"^(?:\\\".*?\\\"|[^,;]*?)([,;])\")\n+            val matcher = pattern.matcher(csvData)\n+            if (matcher.find()) {\n+                separator = matcher.group(1)[0]\n+            }\n+            if (separator != ',' && separator != ';') {\n+                separator = ','\n+            }\n+\n+            userList?.reset()\n+            var resetList = true\n+\n+            val parser = CSVParserBuilder().withSeparator(separator).build()\n+            val reader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(parser)\n+                .build()\n+\n+            val allRows = reader.readAll()\n+            if (allRows.size > 0 && columnToExtract >= 0) {\n+                for (row in allRows) {\n+                    if (row.size <= columnToExtract) {\n+                        userList!!.addListItem(\"\")\n+                    } else {\n+                        resetList = false\n+                        userList!!.addListItem(row[columnToExtract])\n+                    }", "originalCommit": "99182623c8f3abbfff51c5f5cab5ace6ccd484a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MjIyMg==", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r525082222", "bodyText": "the rest of the conversion was fine", "author": "Koell", "createdAt": "2020-11-17T11:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MTc3NA=="}], "type": "inlineReview"}, {"oid": "b05779ba2fb0a57464d54846bd68267182e42902", "url": "https://github.com/Catrobat/Catroid/commit/b05779ba2fb0a57464d54846bd68267182e42902", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2020-11-19T13:46:07Z", "type": "forcePushed"}, {"oid": "13238861702a69dc443f1cc4c9308581de62c4a2", "url": "https://github.com/Catrobat/Catroid/commit/13238861702a69dc443f1cc4c9308581de62c4a2", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2020-11-25T16:44:52Z", "type": "forcePushed"}, {"oid": "28e0d04153186c8df74d11f8ecfa07b13ab7d354", "url": "https://github.com/Catrobat/Catroid/commit/28e0d04153186c8df74d11f8ecfa07b13ab7d354", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2020-11-27T13:47:38Z", "type": "forcePushed"}, {"oid": "d75c5ee364ccadcd69acdc5b1005749df7e61004", "url": "https://github.com/Catrobat/Catroid/commit/d75c5ee364ccadcd69acdc5b1005749df7e61004", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2021-01-09T18:35:28Z", "type": "forcePushed"}, {"oid": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44", "url": "https://github.com/Catrobat/Catroid/commit/580bf208b8dc1e8f6adcdac1a77976b059b0bf44", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2021-01-10T12:41:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5MjQ4NA==", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554592484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n          \n          \n            \n            \n          \n          \n            \n                    columnToExtract--\n          \n          \n            \n                    var columnToExtract = interpretColumnToExtract(formulaColumnToExtract) - 1", "author": "gPathpp", "createdAt": "2021-01-10T16:44:41Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--", "originalCommit": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5MzQxMg==", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554593412", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                fun setUserList(userVariable: UserList) {\n          \n          \n            \n                    userList = userVariable\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setFormulaColumnToExtract(formulaColumnToExtract: Formula) {\n          \n          \n            \n                    this.formulaColumnToExtract = formulaColumnToExtract\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setFormulaCSVData(formulaCSVData: Formula) {\n          \n          \n            \n                    this.formulaCSVData = formulaCSVData\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                fun setSprite(sprite: Sprite) {\n          \n          \n            \n                    this.sprite = sprite\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nMake member-vars public instead, please. (Kotlin generates default getter and setter)", "author": "gPathpp", "createdAt": "2021-01-10T16:52:25Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--\n+\n+        val separator = extractOrReplaceSeperator(csvData)\n+\n+        val csvParser = CSVParserBuilder().withSeparator(separator).build()\n+        val csvReader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(csvParser)\n+            .build()\n+\n+        val allRows = readCSVIntoList(csvReader)\n+\n+        if (allRows.size > 0 && columnToExtract >= 0) {\n+            insertColumnValuesIntoUserList(allRows, columnToExtract)\n+        }\n+    }\n+\n+    fun interpretCSVData(formulaCSVData: Formula?): String {\n+        return try {\n+            formulaCSVData?.interpretString(sprite) ?: \"\"\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            \"\"\n+        }\n+    }\n+\n+    fun interpretColumnToExtract(formulaColumnToExtract: Formula?): Int {\n+        return try {\n+            formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            0\n+        }\n+    }\n+\n+    fun extractOrReplaceSeperator(csvData: String): Char {\n+        var separator = ','\n+        val pattern = Pattern.compile(\"^(?:\\\".*?\\\"|[^,;]*?)([,;])\")\n+        val matcher = pattern.matcher(csvData)\n+        if (matcher.find()) {\n+            separator = matcher.group(1)[0]\n+        }\n+        if (separator != ',' && separator != ';') {\n+            separator = ','\n+        }\n+        return separator\n+    }\n+\n+    fun readCSVIntoList(csvReader: CSVReader): List<Array<String>> {\n+        return try {\n+            csvReader.readAll()\n+        } catch (exception: IOException) {\n+            Log.e(javaClass.simpleName, \"Couldn't read csv data\", exception)\n+            emptyList()\n+        } catch (exception: CsvException) {\n+            Log.e(javaClass.simpleName, \"Couldn't validate csv data\", exception)\n+            emptyList()\n+        }\n+    }\n+\n+    fun insertColumnValuesIntoUserList(allRows: List<Array<String>>, columnToExtract: Int) {\n+        var resetList = true\n+        for (row in allRows) {\n+            if (row.size <= columnToExtract) {\n+                userList?.addListItem(\"\")\n+            } else {\n+                resetList = false\n+                userList?.addListItem(row[columnToExtract])\n+            }\n+        }\n+        if (resetList) {\n+            userList?.reset()\n+        }\n+    }\n+\n+    fun setUserList(userVariable: UserList) {\n+        userList = userVariable\n+    }\n+\n+    fun setFormulaColumnToExtract(formulaColumnToExtract: Formula) {\n+        this.formulaColumnToExtract = formulaColumnToExtract\n+    }\n+\n+    fun setFormulaCSVData(formulaCSVData: Formula) {\n+        this.formulaCSVData = formulaCSVData\n+    }\n+\n+    fun setSprite(sprite: Sprite) {\n+        this.sprite = sprite\n+    }", "originalCommit": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5NDIwMQ==", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554594201", "bodyText": "Very good \ud83d\udc4d", "author": "gPathpp", "createdAt": "2021-01-10T16:58:08Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--\n+\n+        val separator = extractOrReplaceSeperator(csvData)\n+\n+        val csvParser = CSVParserBuilder().withSeparator(separator).build()\n+        val csvReader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(csvParser)\n+            .build()\n+\n+        val allRows = readCSVIntoList(csvReader)\n+\n+        if (allRows.size > 0 && columnToExtract >= 0) {\n+            insertColumnValuesIntoUserList(allRows, columnToExtract)\n+        }\n+    }\n+\n+    fun interpretCSVData(formulaCSVData: Formula?): String {\n+        return try {\n+            formulaCSVData?.interpretString(sprite) ?: \"\"\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            \"\"\n+        }\n+    }\n+\n+    fun interpretColumnToExtract(formulaColumnToExtract: Formula?): Int {\n+        return try {\n+            formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            0\n+        }\n+    }\n+\n+    fun extractOrReplaceSeperator(csvData: String): Char {", "originalCommit": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU5OTI4Mg==", "url": "https://github.com/Catrobat/Catroid/pull/3866#discussion_r554599282", "bodyText": "Well done!\nPLEASE EXPLAIN: Does the changed behaviour affect the program? (After any Exception you return a default value and also the UserList reset is missing)\nIf this is not intended, I would suggest returning null and using \"?: return\" in the update method.\nPLEASE ADD (if missing): a test for its original behaviour.", "author": "gPathpp", "createdAt": "2021-01-10T17:38:11Z", "path": "catroid/src/main/java/org/catrobat/catroid/content/actions/StoreCSVIntoUserListAction.kt", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Catroid: An on-device visual programming system for Android devices\n+ * Copyright (C) 2010-2021 The Catrobat Team\n+ * (<http://developer.catrobat.org/credits>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * An additional term exception under section 7 of the GNU Affero\n+ * General Public License, version 3, is available at\n+ * http://developer.catrobat.org/license_additional_term\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.catrobat.catroid.content.actions\n+\n+import android.util.Log\n+import com.badlogic.gdx.scenes.scene2d.actions.TemporalAction\n+import com.opencsv.CSVParserBuilder\n+import com.opencsv.CSVReader\n+import com.opencsv.CSVReaderBuilder\n+import com.opencsv.exceptions.CsvException\n+import org.catrobat.catroid.content.Sprite\n+import org.catrobat.catroid.formulaeditor.Formula\n+import org.catrobat.catroid.formulaeditor.InterpretationException\n+import org.catrobat.catroid.formulaeditor.UserList\n+import java.io.IOException\n+import java.io.StringReader\n+import java.util.regex.Pattern\n+\n+class StoreCSVIntoUserListAction : TemporalAction() {\n+\n+    private var sprite: Sprite? = null\n+\n+    private var formulaColumnToExtract: Formula? = null\n+    private var formulaCSVData: Formula? = null\n+\n+    private var userList: UserList? = null\n+\n+    override fun update(percent: Float) {\n+        userList ?: return\n+\n+        userList?.reset()\n+\n+        val csvData = interpretCSVData(formulaCSVData)\n+\n+        var columnToExtract = interpretColumnToExtract(formulaColumnToExtract)\n+\n+        columnToExtract--\n+\n+        val separator = extractOrReplaceSeperator(csvData)\n+\n+        val csvParser = CSVParserBuilder().withSeparator(separator).build()\n+        val csvReader = CSVReaderBuilder(StringReader(csvData)).withCSVParser(csvParser)\n+            .build()\n+\n+        val allRows = readCSVIntoList(csvReader)\n+\n+        if (allRows.size > 0 && columnToExtract >= 0) {\n+            insertColumnValuesIntoUserList(allRows, columnToExtract)\n+        }\n+    }\n+\n+    fun interpretCSVData(formulaCSVData: Formula?): String {\n+        return try {\n+            formulaCSVData?.interpretString(sprite) ?: \"\"\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            \"\"\n+        }\n+    }\n+\n+    fun interpretColumnToExtract(formulaColumnToExtract: Formula?): Int {\n+        return try {\n+            formulaColumnToExtract?.interpretInteger(sprite) ?: 0\n+        } catch (exception: InterpretationException) {\n+            Log.d(javaClass.simpleName, \"Couldn't interpret formula\", exception)\n+            0\n+        }\n+    }\n+\n+    fun extractOrReplaceSeperator(csvData: String): Char {\n+        var separator = ','\n+        val pattern = Pattern.compile(\"^(?:\\\".*?\\\"|[^,;]*?)([,;])\")\n+        val matcher = pattern.matcher(csvData)\n+        if (matcher.find()) {\n+            separator = matcher.group(1)[0]\n+        }\n+        if (separator != ',' && separator != ';') {\n+            separator = ','\n+        }\n+        return separator\n+    }\n+\n+    fun readCSVIntoList(csvReader: CSVReader): List<Array<String>> {\n+        return try {\n+            csvReader.readAll()\n+        } catch (exception: IOException) {\n+            Log.e(javaClass.simpleName, \"Couldn't read csv data\", exception)\n+            emptyList()\n+        } catch (exception: CsvException) {\n+            Log.e(javaClass.simpleName, \"Couldn't validate csv data\", exception)\n+            emptyList()\n+        }\n+    }\n+\n+    fun insertColumnValuesIntoUserList(allRows: List<Array<String>>, columnToExtract: Int) {\n+        var resetList = true\n+        for (row in allRows) {\n+            if (row.size <= columnToExtract) {\n+                userList?.addListItem(\"\")\n+            } else {\n+                resetList = false\n+                userList?.addListItem(row[columnToExtract])\n+            }\n+        }\n+        if (resetList) {\n+            userList?.reset()\n+        }\n+    }\n+\n+    fun setUserList(userVariable: UserList) {\n+        userList = userVariable\n+    }\n+\n+    fun setFormulaColumnToExtract(formulaColumnToExtract: Formula) {\n+        this.formulaColumnToExtract = formulaColumnToExtract\n+    }\n+\n+    fun setFormulaCSVData(formulaCSVData: Formula) {\n+        this.formulaCSVData = formulaCSVData\n+    }\n+\n+    fun setSprite(sprite: Sprite) {\n+        this.sprite = sprite\n+    }\n+}", "originalCommit": "580bf208b8dc1e8f6adcdac1a77976b059b0bf44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "845bf5ba29d159be8a9b489116a61ebe85bf299b", "url": "https://github.com/Catrobat/Catroid/commit/845bf5ba29d159be8a9b489116a61ebe85bf299b", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2021-01-11T15:18:25Z", "type": "commit"}, {"oid": "845bf5ba29d159be8a9b489116a61ebe85bf299b", "url": "https://github.com/Catrobat/Catroid/commit/845bf5ba29d159be8a9b489116a61ebe85bf299b", "message": "Refactor StoreCSVIntoUserListAction to Kotlin", "committedDate": "2021-01-11T15:18:25Z", "type": "forcePushed"}]}