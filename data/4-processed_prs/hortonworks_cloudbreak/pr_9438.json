{"pr_number": 9438, "pr_title": "CB-9487 - [ASRG] Eliminate resource leakage if deleting during ARM te\u2026", "pr_createdAt": "2020-11-16T17:10:29Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9438", "timeline": [{"oid": "7339cf6415e1235186d9d1207ca8f178ad6b0a32", "url": "https://github.com/hortonworks/cloudbreak/commit/7339cf6415e1235186d9d1207ca8f178ad6b0a32", "message": "CB-9487 - [ASRG] Eliminate resource leakage if deleting during ARM template deployment", "committedDate": "2020-11-16T19:22:40Z", "type": "forcePushed"}, {"oid": "978b9fa8852fec664de8910074cde204ea0500f6", "url": "https://github.com/hortonworks/cloudbreak/commit/978b9fa8852fec664de8910074cde204ea0500f6", "message": "CB-9487 - [ASRG] Eliminate resource leakage if deleting during ARM template deployment", "committedDate": "2020-11-17T08:38:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxMTMzNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r525411334", "bodyText": "Could you please extract these lines into a separate method?", "author": "tiborpopovics", "createdAt": "2020-11-17T19:00:43Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java", "diffHunk": "@@ -50,6 +53,26 @@\n     @Inject\n     private PersistenceNotifier resourceNotifier;\n \n+    public List<CloudResource> handleTransientDeployment(AzureClient client, String resourceGroupName, String deploymentName) {\n+\n+        List<CloudResource> deployedResources = new ArrayList<>();\n+        ResourceStatus deploymentStatus = client.getTemplateDeploymentStatus(resourceGroupName, deploymentName);\n+        if (deploymentStatus.isTransient()) {\n+            LOGGER.info(\"Template deployment {} has transient status {} , cancelling it now.\", deploymentName, deploymentStatus);\n+            Deployment deployment = client.getTemplateDeployment(resourceGroupName, deploymentName);\n+            deployment.cancel();\n+            deployedResources = azureCloudResourceService.getDeploymentCloudResources(deployment);\n+            LOGGER.info(\"Found resources to be removed: {}\", deployedResources);\n+\n+            List<CloudResource> transientVms = deployedResources.stream()\n+                    .filter(cloudResource -> ResourceType.AZURE_INSTANCE == cloudResource.getType())\n+                    .collect(Collectors.toList());\n+            List<CloudResource> osDiskResources = azureCloudResourceService.getAttachedOsDiskResources(transientVms, resourceGroupName, client);", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNDMyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r525434320", "bodyText": "Could you please extract these streams into a private method?", "author": "tiborpopovics", "createdAt": "2020-11-17T19:34:44Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -141,6 +149,34 @@\n                 : deleteResourceGroup(resources, cloudContext, force, client, persistenceNotifier, stack);\n     }\n \n+    public void handleTransientDeployment(AuthenticatedContext authenticatedContext, List<CloudResource> resources) {\n+        Optional<String> deploymentNameOpt = resources.stream()\n+                .filter(cloudResource -> cloudResource.getType() == ResourceType.ARM_TEMPLATE)\n+                .map(CloudResource::getName)\n+                .findFirst();\n+        Optional<String> resourceGroupNameOpt = resources.stream()\n+                .filter(cloudResource -> cloudResource.getType() == ResourceType.AZURE_RESOURCE_GROUP)\n+                .map(CloudResource::getName)\n+                .findFirst();", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwNjEyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r526306121", "bodyText": "There is findResources method. A findResource method with return type optional could be extracted.", "author": "gergopapi2", "createdAt": "2020-11-18T17:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNDMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNDgzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r525404837", "bodyText": "This could also make use of createCloudResource method", "author": "gergopapi2", "createdAt": "2020-11-17T18:50:28Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -107,14 +102,24 @@\n         }\n \n         String fqdn = (String) ((Map) ((Map) deployment.outputs()).get(DATABASE_SERVER_FQDN)).get(\"value\");\n-        List<CloudResource> databaseResources = createCloudResources(resourceGroupName, fqdn);\n+        List<CloudResource> databaseResources = createCloudResources(fqdn);\n         databaseResources.forEach(dbr -> persistenceNotifier.notifyAllocation(dbr, cloudContext));\n         return databaseResources.stream()\n                 .map(resource -> new CloudResourceStatus(resource, ResourceStatus.CREATED))\n                 .collect(Collectors.toList());\n     }\n \n-    private List<CloudResource> createCloudResources(String resourceGroupName, String fqdn) {\n+    private void createTemplateResource(PersistenceNotifier persistenceNotifier, CloudContext cloudContext, String stackName) {\n+        CloudResource armTemplate = createCloudResource(ARM_TEMPLATE, stackName);\n+        persistenceNotifier.notifyAllocation(armTemplate, cloudContext);\n+    }\n+\n+    private void createResourceGroupResource(PersistenceNotifier persistenceNotifier, CloudContext cloudContext, String resourceGroupName) {\n+        CloudResource resourceGroup = createCloudResource(AZURE_RESOURCE_GROUP, resourceGroupName);\n+        persistenceNotifier.notifyAllocation(resourceGroup, cloudContext);\n+    }\n+\n+    private List<CloudResource> createCloudResources(String fqdn) {\n         List<CloudResource> databaseResources = Lists.newArrayList();\n         databaseResources.add(CloudResource.builder()", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE0NTUxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r526145511", "bodyText": "doOnError will not swallow the throwable, it just gives an opportunity to do something before the exception is thrown. That is, code after the await will not run in case of an error.", "author": "gergopapi2", "createdAt": "2020-11-18T14:49:04Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -282,6 +282,27 @@ public void validateStorageTypeForGroup(AzureDiskType diskType, String flavor) {\n         return statuses;\n     }\n \n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public void deleteCloudResourceInstances(AuthenticatedContext ac, String resourceGroupName, List<String> instanceIdList) {\n+        LOGGER.info(\"Delete VM-s by name: {}\", instanceIdList);\n+        List<String> failedToDeleteVms = new ArrayList<>();\n+        List<Completable> deleteCompletables = new ArrayList<>();\n+        for (String name : instanceIdList) {\n+            AzureClient azureClient = ac.getParameter(AzureClient.class);\n+            deleteCompletables.add(azureClient.deleteVirtualMachine(resourceGroupName, name)\n+                    .doOnError(throwable -> {\n+                        LOGGER.error(\"Error happened on azure instance delete: {}\", name, throwable);\n+                        failedToDeleteVms.add(name);\n+                    })\n+                    .subscribeOn(Schedulers.io()));\n+        }\n+        Completable.mergeDelayError(deleteCompletables).await();\n+        if (!failedToDeleteVms.isEmpty()) {", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMzI5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r527603292", "bodyText": "You might be right but all the implementations of Completables are affected, including the ones implemented by you, so I would refactor this separately.", "author": "pdarvasi", "createdAt": "2020-11-20T10:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE0NTUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNDc3OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r526224778", "bodyText": "In case of an exception in one of the Completables the exception is not caught in doOnError, so it is not CloudbreakServiceException that will be thrown", "author": "gergopapi2", "createdAt": "2020-11-18T16:26:36Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureUtils.java", "diffHunk": "@@ -511,6 +532,26 @@ public void deleteManagedDisks(AzureClient azureClient, Collection<String> manag\n         }\n     }\n \n+    @Retryable(backoff = @Backoff(delay = 1000, multiplier = 2, maxDelay = 10000), maxAttempts = 5)\n+    public void deleteManagedDisks(AzureClient azureClient, String resourceGroupName, Collection<String> managedDiskNames) {\n+        LOGGER.info(\"Deleting managed disks: {}\", managedDiskNames);\n+        List<Completable> deleteCompletables = new ArrayList<>();\n+        List<String> failedToDeleteManagedDisks = new ArrayList<>();\n+        for (String resourceId : managedDiskNames) {\n+            deleteCompletables.add(azureClient.deleteManagedDiskAsync(resourceGroupName, resourceId)\n+                    .doOnError(throwable -> {\n+                        LOGGER.error(\"Error happened on azure during managed disk deletion: {}\", resourceId, throwable);\n+                        failedToDeleteManagedDisks.add(resourceId);\n+                    })\n+                    .subscribeOn(Schedulers.io()));\n+        }\n+        Completable.mergeDelayError(deleteCompletables).await();\n+        if (!failedToDeleteManagedDisks.isEmpty()) {", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwNDMyMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r527604322", "bodyText": "You might be right but all the implementations of Completables are affected, including the ones implemented by you, so I would refactor this separately.", "author": "pdarvasi", "createdAt": "2020-11-20T10:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNDc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMjA3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r527732072", "bodyText": "That's ok, just wanted to draw your attention to it. Unfortunately last time when I found this I forgot to make a jira issue, so doing it now.", "author": "gergopapi2", "createdAt": "2020-11-20T14:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNDc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyOTQyNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r526229424", "bodyText": "Just a question: in what case will envName be the networkId?", "author": "gergopapi2", "createdAt": "2020-11-18T16:32:47Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/EnvironmentNetworkService.java", "diffHunk": "@@ -108,19 +108,26 @@ private NetworkDeletionRequest createNetworkDeletionRequest(EnvironmentDto envir\n                 .withEnvId(environment.getId())\n                 .withAccountId(environment.getAccountId())\n                 .withUserId(environment.getCreator())\n-                .withRegion(environment.getLocation().getName());\n-        getResourceGroupName(environment.getNetwork()).ifPresent(builder::withResourceGroup);\n-        getNetworkId(environment.getNetwork()).ifPresent(builder::withNetworkId);\n+                .withRegion(environment.getLocation().getName())\n+                .withNetworkId(getNetworkId(environment.getNetwork(), environment.getName()));\n+        getResourceGroupName(environment).ifPresent(builder::withResourceGroup);\n         builder.withExisting(environment.getNetwork().getRegistrationType() == RegistrationType.EXISTING);\n         return builder.build();\n     }\n \n-    private Optional<String> getResourceGroupName(NetworkDto networkDto) {\n-        return Optional.of(networkDto).map(NetworkDto::getAzure).map(AzureParams::getResourceGroupName);\n+    private Optional<String> getResourceGroupName(EnvironmentDto environmentDto) {\n+        return Optional.of(environmentDto)\n+                .map(EnvironmentDto::getParameters)\n+                .map(ParametersDto::getAzureParametersDto)\n+                .map(AzureParametersDto::getAzureResourceGroupDto)\n+                .map(AzureResourceGroupDto::getName);\n     }\n \n-    private Optional<String> getNetworkId(NetworkDto networkDto) {\n-        return Optional.of(networkDto).map(NetworkDto::getAzure).map(AzureParams::getNetworkId);\n+    private String getNetworkId(NetworkDto networkDto, String envName) {\n+        return Optional.of(networkDto)\n+                .map(NetworkDto::getAzure)\n+                .map(AzureParams::getNetworkId)\n+                .orElse(envName);", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMzg4Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r527603882", "bodyText": "In the default new network scenario", "author": "pdarvasi", "createdAt": "2020-11-20T10:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyOTQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwNzM4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r526307387", "bodyText": "The functionality of cancelling a deployment (by id or  by resourceGroup) and then getting the resources from it could be extracted to a separate class. This functionality is used at two other places in some variation.", "author": "gergopapi2", "createdAt": "2020-11-18T18:00:13Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureDatabaseResourceService.java", "diffHunk": "@@ -141,6 +149,34 @@\n                 : deleteResourceGroup(resources, cloudContext, force, client, persistenceNotifier, stack);\n     }\n \n+    public void handleTransientDeployment(AuthenticatedContext authenticatedContext, List<CloudResource> resources) {\n+        Optional<String> deploymentNameOpt = resources.stream()\n+                .filter(cloudResource -> cloudResource.getType() == ResourceType.ARM_TEMPLATE)\n+                .map(CloudResource::getName)\n+                .findFirst();\n+        Optional<String> resourceGroupNameOpt = resources.stream()\n+                .filter(cloudResource -> cloudResource.getType() == ResourceType.AZURE_RESOURCE_GROUP)\n+                .map(CloudResource::getName)\n+                .findFirst();\n+        AzureClient client = authenticatedContext.getParameter(AzureClient.class);\n+        LOGGER.debug(\"Database template saved: {}, resource group saved: {}\", deploymentNameOpt, resourceGroupNameOpt);\n+        if (deploymentNameOpt.isPresent() && resourceGroupNameOpt.isPresent()) {", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwOTg5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r526309897", "bodyText": "The functionality of getting the instances and then the attached os disk resources is present at several places. It might make sense to extract it to a common method at a separate class.", "author": "gergopapi2", "createdAt": "2020-11-18T18:04:16Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/upscale/AzureUpscaleService.java", "diffHunk": "@@ -79,7 +78,7 @@\n             List<CloudResource> templateResources = azureCloudResourceService.getDeploymentCloudResources(templateDeployment);\n             List<CloudResource> newInstances =\n                     azureCloudResourceService.getInstanceCloudResources(stackName, templateResources, scaledGroups, resourceGroupName);\n-            List<CloudResource> osDiskResources = azureCloudResourceService.getAttachedOsDiskResources(ac, newInstances, resourceGroupName);\n+            List<CloudResource> osDiskResources = azureCloudResourceService.getAttachedOsDiskResources(newInstances, resourceGroupName, client);", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MjY0Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r527672642", "bodyText": "I see only 2 occurrences of a 2 line common fragment, I would suggest refactoring it once we see more later.", "author": "pdarvasi", "createdAt": "2020-11-20T12:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwOTg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMxNDA4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9438#discussion_r526314081", "bodyText": "The functionality of getting the deployment, cancelling it could be extracted.", "author": "gergopapi2", "createdAt": "2020-11-18T18:10:46Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkConnector.java", "diffHunk": "@@ -143,13 +135,23 @@ private void deleteResources(NetworkDeletionRequest networkDeletionRequest) {\n         try {\n             LOGGER.debug(\"Deleting network id and deployment, preserving the resource group\");\n             AzureClient azureClient = azureClientService.getClient(networkDeletionRequest.getCloudCredential());\n-            azureClient.deleteNetworkInResourceGroup(networkDeletionRequest.getResourceGroup(), networkDeletionRequest.getNetworkId());\n-            azureClient.deleteTemplateDeployment(networkDeletionRequest.getResourceGroup(), networkDeletionRequest.getStackName());\n+            String resourceGroupName = networkDeletionRequest.getResourceGroup();\n+            String stackName = networkDeletionRequest.getStackName();\n+            handleTransientDeployment(azureClient, resourceGroupName, stackName);\n+            azureClient.deleteNetworkInResourceGroup(resourceGroupName, networkDeletionRequest.getNetworkId());\n         } catch (CloudException e) {\n             throw azureUtils.convertToCloudConnectorException(e, \"Network and template deployment deletion\");\n         }\n     }\n \n+    private void handleTransientDeployment(AzureClient azureClient, String resourceGroupName, String deploymentName) {\n+        ResourceStatus deploymentStatus = azureClient.getTemplateDeploymentStatus(resourceGroupName, deploymentName);\n+        if (deploymentStatus.isTransient()) {\n+            Deployment deployment = azureClient.getTemplateDeployment(resourceGroupName, deploymentName);\n+            deployment.cancel();\n+        }", "originalCommit": "978b9fa8852fec664de8910074cde204ea0500f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd2f39534d2d39127554280b7286d0138218ef55", "url": "https://github.com/hortonworks/cloudbreak/commit/cd2f39534d2d39127554280b7286d0138218ef55", "message": "CB-9487 - [ASRG] Eliminate resource leakage if deleting during ARM template deployment", "committedDate": "2020-11-20T12:56:17Z", "type": "forcePushed"}, {"oid": "5edb5b4882cbc57e542f8681c1b66a0606523c9a", "url": "https://github.com/hortonworks/cloudbreak/commit/5edb5b4882cbc57e542f8681c1b66a0606523c9a", "message": "CB-9487 - [ASRG] Eliminate resource leakage if deleting during ARM template deployment", "committedDate": "2020-11-20T13:17:21Z", "type": "commit"}, {"oid": "5edb5b4882cbc57e542f8681c1b66a0606523c9a", "url": "https://github.com/hortonworks/cloudbreak/commit/5edb5b4882cbc57e542f8681c1b66a0606523c9a", "message": "CB-9487 - [ASRG] Eliminate resource leakage if deleting during ARM template deployment", "committedDate": "2020-11-20T13:17:21Z", "type": "forcePushed"}]}