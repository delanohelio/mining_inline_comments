{"pr_number": 9210, "pr_title": "CB-8664: Use new FreeIPA health checks for instance status", "pr_createdAt": "2020-10-12T22:18:06Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9210", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMjE0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r503722145", "bodyText": "clietn -> client", "author": "doktoric", "createdAt": "2020-10-13T07:23:26Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClientFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.client.Client;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.client.RestClientUtil;\n+import com.sequenceiq.cloudbreak.clusterproxy.ClusterProxyConfiguration;\n+import com.sequenceiq.freeipa.entity.InstanceMetaData;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSecurityService;\n+import com.sequenceiq.freeipa.service.stack.ClusterProxyService;\n+\n+@Component\n+public class FreeIpaHealthCheckClientFactory {\n+\n+    private static final String DEFAULT_BASE_PATH = \"/freeipahealthcheck\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClientFactory.class);\n+\n+    @Value(\"${rest.debug}\")\n+    private boolean restDebug;\n+\n+    @Value(\"${freeipa.healthcheck.connectionTimeoutMs}\")\n+    private int connetionTimeoutMillis;\n+\n+    @Value(\"${freeipa.healthcheck.readTimeoutMs}\")\n+    private int readTimeoutMillis;\n+\n+    @Inject\n+    private ClusterProxyService clusterProxyService;\n+\n+    @Inject\n+    private TlsSecurityService tlsSecurityService;\n+\n+    @Inject\n+    private ClusterProxyConfiguration clusterProxyConfiguration;\n+\n+    public FreeIpaHealthCheckClient getClient(Stack stack, InstanceMetaData instance)\n+            throws FreeIpaClientException, MalformedURLException {\n+        FreeIpaHealthCheckClient client;\n+        if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n+            client = buildFreeIpaHealthCheckClientForClusterProxy(stack, instance);\n+        } else {\n+            client = buildFreeIpaHealthCheckClientForDirectConnect(stack, instance);\n+        }\n+        return client;\n+    }\n+\n+    private FreeIpaHealthCheckClient buildFreeIpaHealthCheckClientForClusterProxy(Stack stack, InstanceMetaData instanceMetaData)\n+            throws FreeIpaClientException, MalformedURLException {\n+        HttpClientConfig httpClientConfig = new HttpClientConfig(clusterProxyConfiguration.getClusterProxyHost());\n+        String clusterProxyPath = toClusterProxyBasepath(stack, instanceMetaData.getDiscoveryFQDN());\n+        return buildFreeIpaHealthCheckClient(httpClientConfig, clusterProxyConfiguration.getClusterProxyPort(), clusterProxyPath, clusterProxyHeaders(),\n+                new FreeIpaHealthCheckClusterProxyErrorRpcListener());\n+    }\n+\n+    private FreeIpaHealthCheckClient buildFreeIpaHealthCheckClientForDirectConnect(Stack stack, InstanceMetaData instanceMetaData)\n+            throws FreeIpaClientException, MalformedURLException {\n+        HttpClientConfig httpClientConfig = tlsSecurityService.buildTLSClientConfig(stack, instanceMetaData.getPublicIpWrapper(), instanceMetaData);\n+        int gatewayPort = Optional.ofNullable(stack.getGatewayport()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+        return buildFreeIpaHealthCheckClient(httpClientConfig, gatewayPort, DEFAULT_BASE_PATH, Map.of(), null);\n+    }\n+\n+    private FreeIpaHealthCheckClient buildFreeIpaHealthCheckClient(HttpClientConfig clientConfig, int port, String basePath,\n+            Map<String, String> headers, FreeIpaHealthCheckRpcListener listener)\n+            throws FreeIpaClientException, MalformedURLException {\n+\n+        Client restClient;\n+        try {\n+            restClient = RestClientUtil.createClient(clientConfig.getServerCert(), clientConfig.getClientCert(), clientConfig.getClientKey(),\n+                    connetionTimeoutMillis, readTimeoutMillis, restDebug);\n+        } catch (Exception e) {\n+            throw new FreeIpaClientException(\"Unable to create clietn for freeipa health checks\", e);", "originalCommit": "d5363338dbd14faa672677e060f5a53f37d01076", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMjcyMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r503722722", "bodyText": "FreeIpa or FreeIPA just asking because in this pr both word were used.", "author": "doktoric", "createdAt": "2020-10-13T07:24:27Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClient.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.freeipa.client.healthcheckmodel.CheckResult;\n+import com.sequenceiq.freeipa.client.healthcheckmodel.ClusterCheckResult;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+\n+public class FreeIpaHealthCheckClient implements AutoCloseable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClient.class);\n+\n+    private final Client restClient;\n+\n+    private final WebTarget rpcTarget;\n+\n+    private final MultivaluedMap<String, Object> headers;\n+\n+    private final FreeIpaHealthCheckRpcListener listener;\n+\n+    public FreeIpaHealthCheckClient(Client restClient, URL url, Map<String, String> headers, FreeIpaHealthCheckRpcListener listener) {\n+        this.restClient = restClient;\n+        this.headers = new MultivaluedHashMap<>(headers);\n+        this.listener = listener;\n+\n+        rpcTarget = restClient.target(url.toString());\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        restClient.close();\n+    }\n+\n+    public RPCResponse<CheckResult> nodeHealth() throws FreeIpaClientException {\n+        return invoke(\"node health check\", \"\", CheckResult.class);\n+    }\n+\n+    public RPCResponse<ClusterCheckResult> clusterHealth() throws FreeIpaClientException {\n+        return invoke(\"cluster health from node\", \"/cluster\", ClusterCheckResult.class);\n+    }\n+\n+    private <T> RPCResponse<T> invoke(String name, String path, Class<T> resultType) throws FreeIpaClientException {\n+        Invocation.Builder builder = rpcTarget.path(path)\n+                .request()\n+                .headers(headers);\n+        try (Response response = builder.get()) {\n+            if (!response.bufferEntity()) {\n+                throw new FreeIpaClientException(\"Unable to buffer the response from FreeIPA\");\n+            }\n+            if (listener != null) {\n+                listener.onBeforeResponseProcessed(response);\n+            }\n+            if (response.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL &&\n+                    response.getStatus() != Response.Status.SERVICE_UNAVAILABLE.getStatusCode()) {\n+                String message = String.format(\"Invoke FreeIpa health check failed: %d\", response.getStatus());\n+                throw new FreeIpaClientException(message, response.getStatus());\n+            }\n+            return toRpcResponse(name, response, resultType);\n+        } catch (FreeIpaClientException e) {\n+            throw e;\n+        } catch (Throwable throwable) {\n+            String message = String.format(\"Invoke FreeIpa health check failed: %s\", throwable.getLocalizedMessage());", "originalCommit": "d5363338dbd14faa672677e060f5a53f37d01076", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c8cd4959e93de1f1063a5d6459c0f43a5a43151f", "url": "https://github.com/hortonworks/cloudbreak/commit/c8cd4959e93de1f1063a5d6459c0f43a5a43151f", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-13T14:15:16Z", "type": "forcePushed"}, {"oid": "aaa45b2841b993b9278b08997facf56509e5a322", "url": "https://github.com/hortonworks/cloudbreak/commit/aaa45b2841b993b9278b08997facf56509e5a322", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-13T17:33:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0Nzc0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504447749", "bodyText": "could you move the 3 if into 3 methods and name them, eg\n\nbufferResponseEntity\nvalidate/checkClusterProxyError\ncheckResponseStatus\n\nthanks", "author": "lacikaaa", "createdAt": "2020-10-14T07:06:17Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClient.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.freeipa.client.healthcheckmodel.CheckResult;\n+import com.sequenceiq.freeipa.client.healthcheckmodel.ClusterCheckResult;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+\n+public class FreeIpaHealthCheckClient implements AutoCloseable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClient.class);\n+\n+    private final Client restClient;\n+\n+    private final WebTarget rpcTarget;\n+\n+    private final MultivaluedMap<String, Object> headers;\n+\n+    private final FreeIpaHealthCheckRpcListener listener;\n+\n+    public FreeIpaHealthCheckClient(Client restClient, URL url, Map<String, String> headers, FreeIpaHealthCheckRpcListener listener) {\n+        this.restClient = restClient;\n+        this.headers = new MultivaluedHashMap<>(headers);\n+        this.listener = listener;\n+\n+        rpcTarget = restClient.target(url.toString());\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        restClient.close();\n+    }\n+\n+    public RPCResponse<CheckResult> nodeHealth() throws FreeIpaClientException {\n+        return invoke(\"node health check\", \"\", CheckResult.class);\n+    }\n+\n+    public RPCResponse<ClusterCheckResult> clusterHealth() throws FreeIpaClientException {\n+        return invoke(\"cluster health from node\", \"/cluster\", ClusterCheckResult.class);\n+    }\n+\n+    private <T> RPCResponse<T> invoke(String name, String path, Class<T> resultType) throws FreeIpaClientException {\n+        Invocation.Builder builder = rpcTarget.path(path)\n+                .request()\n+                .headers(headers);\n+        try (Response response = builder.get()) {\n+            if (!response.bufferEntity()) {\n+                throw new FreeIpaClientException(\"Unable to buffer the response from FreeIPA\");\n+            }\n+            if (listener != null) {\n+                listener.onBeforeResponseProcessed(response);\n+            }\n+            if (response.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL &&\n+                    response.getStatus() != Response.Status.SERVICE_UNAVAILABLE.getStatusCode()) {\n+                String message = String.format(\"Invoke FreeIPA health check failed: %d\", response.getStatus());\n+                throw new FreeIpaClientException(message, response.getStatus());\n+            }", "originalCommit": "aaa45b2841b993b9278b08997facf56509e5a322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NDY5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504454696", "bodyText": "I don't think this is necessary, both CheckEntry and PluginStatusEntry have toString implemented and List implementation should take care of that. Have you seen it not working well?\nIf not I think this still would be simpler solution:\nString checksString = StringUtils.join(checks, \",\");", "author": "lacikaaa", "createdAt": "2020-10-14T07:19:49Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/healthcheckmodel/CheckResult.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.client.healthcheckmodel;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CheckResult {\n+\n+    private String status;\n+\n+    private String host;\n+\n+    private List<CheckEntry> checks;\n+\n+    @JsonProperty(\"plugin_stat\")\n+    private List<PluginStatusEntry> pluginStat;\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public List<CheckEntry> getChecks() {\n+        return checks;\n+    }\n+\n+    public void setChecks(List<CheckEntry> checks) {\n+        this.checks = checks;\n+    }\n+\n+    public List<PluginStatusEntry> getPluginStats() {\n+        return pluginStat;\n+    }\n+\n+    public void setPluginStats(List<PluginStatusEntry> pluginStat) {\n+        this.pluginStat = pluginStat;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String checksString = Optional.ofNullable(checks).stream()\n+                .flatMap(Collection::stream)\n+                .map(CheckEntry::toString)\n+                .collect(Collectors.joining(\",\"));\n+        String pluginStatString = Optional.ofNullable(pluginStat).stream()\n+                .flatMap(Collection::stream)\n+                .map(PluginStatusEntry::toString)\n+                .collect(Collectors.joining(\",\"));", "originalCommit": "aaa45b2841b993b9278b08997facf56509e5a322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjY1Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504906652", "bodyText": "Thanks, you are correct.", "author": "jamisonbennett", "createdAt": "2020-10-14T19:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NDY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NTIxNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504455215", "bodyText": "same here as for CheckResult", "author": "lacikaaa", "createdAt": "2020-10-14T07:20:49Z", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/healthcheckmodel/ClusterCheckResult.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.client.healthcheckmodel;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ClusterCheckResult {\n+\n+    private String status;\n+\n+    private String host;\n+\n+    private List<CheckResult> replicas;\n+\n+    @JsonProperty(\"plugin_stat\")\n+    private List<PluginStatusEntry> pluginStat;\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public List<CheckResult> getReplicas() {\n+        return replicas;\n+    }\n+\n+    public void setReplicas(List<CheckResult> replicas) {\n+        this.replicas = replicas;\n+    }\n+\n+    public List<PluginStatusEntry> getPluginStats() {\n+        return pluginStat;\n+    }\n+\n+    public void setPluginStats(List<PluginStatusEntry> pluginStat) {\n+        this.pluginStat = pluginStat;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String replicasString = Optional.ofNullable(replicas).stream()\n+                .flatMap(Collection::stream)\n+                .map(CheckResult::toString)\n+                .collect(Collectors.joining(\",\"));\n+        String pluginStatString = Optional.ofNullable(pluginStat).stream()\n+                .flatMap(Collection::stream)\n+                .map(PluginStatusEntry::toString)\n+                .collect(Collectors.joining(\",\"));", "originalCommit": "aaa45b2841b993b9278b08997facf56509e5a322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NjUwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504456508", "bodyText": "actually this could be simplified a bit:\n    private Optional<ClusterProxyError> deserializeAsClusterProxyError(Response response) {\n        try {\n            ClusterProxyError clusterProxyError = response.readEntity(ClusterProxyError.class);\n            if (clusterProxyError.getCode().contains(\"cluster-proxy\")) {\n                return Optional.of(clusterProxyError);\n            } else {\n                return Optional.empty();\n            }\n        } catch (Exception ex) {\n            return Optional.empty();\n        }\n    }", "author": "lacikaaa", "createdAt": "2020-10-14T07:23:25Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClusterProxyErrorRpcListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.util.Optional;\n+\n+import javax.ws.rs.core.Response;\n+\n+import com.sequenceiq.cloudbreak.clusterproxy.ClusterProxyException;\n+\n+public class FreeIpaHealthCheckClusterProxyErrorRpcListener implements FreeIpaHealthCheckRpcListener {\n+\n+    private Optional<ClusterProxyError> deserializeAsClusterProxyError(Response response) {\n+        ClusterProxyError clusterProxyError;\n+        try {\n+            clusterProxyError = response.readEntity(ClusterProxyError.class);\n+            if (!clusterProxyError.getCode().contains(\"cluster-proxy\")) {\n+                return Optional.empty();\n+            }\n+        } catch (Exception ex) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(clusterProxyError);\n+    }", "originalCommit": "aaa45b2841b993b9278b08997facf56509e5a322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2OTkzOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504469939", "bodyText": "LOGGER is not used", "author": "lacikaaa", "createdAt": "2020-10-14T07:47:29Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClientFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.client.Client;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.client.RestClientUtil;\n+import com.sequenceiq.cloudbreak.clusterproxy.ClusterProxyConfiguration;\n+import com.sequenceiq.freeipa.entity.InstanceMetaData;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSecurityService;\n+import com.sequenceiq.freeipa.service.stack.ClusterProxyService;\n+\n+@Component\n+public class FreeIpaHealthCheckClientFactory {\n+\n+    private static final String DEFAULT_BASE_PATH = \"/freeipahealthcheck\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClientFactory.class);", "originalCommit": "aaa45b2841b993b9278b08997facf56509e5a322", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NzU1Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504477553", "bodyText": "from the allMatch documentation:\nIf the stream is empty then true is returned and the predicate is not evaluated. \nIs it possible we filter out everything and it returns a false positive?", "author": "lacikaaa", "createdAt": "2020-10-14T07:59:54Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -154,4 +219,12 @@ private void parseMessages(RPCResponse<Boolean> rpcResponse, HealthDetailsFreeIp\n             }\n         }\n     }\n+\n+    private boolean isHealthCheckPassing(RPCResponse<CheckResult> rpcResponse) {\n+        return rpcResponse.getMessages().stream()\n+                .map(RPCMessage::getCode)\n+                .filter(Objects::nonNull)\n+                .map(Response.Status.Family::familyOf)\n+                .allMatch(isEqual(Response.Status.Family.SUCCESSFUL));", "originalCommit": "aaa45b2841b993b9278b08997facf56509e5a322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNzkxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504907910", "bodyText": "Good point. We really shouldn't have 0 RPCs for any health check, but it's better to be safe.", "author": "jamisonbennett", "createdAt": "2020-10-14T19:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NzU1Mw=="}], "type": "inlineReview"}, {"oid": "dde47e0fa7c5b003d85aec201c514b27b8d3569b", "url": "https://github.com/hortonworks/cloudbreak/commit/dde47e0fa7c5b003d85aec201c514b27b8d3569b", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-14T19:02:01Z", "type": "forcePushed"}, {"oid": "11510ca7fa1519efdf259350cd38f7842b361a7d", "url": "https://github.com/hortonworks/cloudbreak/commit/11510ca7fa1519efdf259350cd38f7842b361a7d", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-18T15:11:10Z", "type": "forcePushed"}, {"oid": "912b56dcd97930a5803100050b051d5aed7c0c03", "url": "https://github.com/hortonworks/cloudbreak/commit/912b56dcd97930a5803100050b051d5aed7c0c03", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-19T13:19:57Z", "type": "forcePushed"}, {"oid": "b849e25441e95fdff96cd9bef5a0dd7f5eef3e79", "url": "https://github.com/hortonworks/cloudbreak/commit/b849e25441e95fdff96cd9bef5a0dd7f5eef3e79", "message": "Trying to see if this works, if it does, I will squash\n\nI can't seem to get the tests to act the same on my machine compared to jenkins....", "committedDate": "2020-10-21T01:04:44Z", "type": "forcePushed"}, {"oid": "3d69fa79fe5610e9bef344b3c33ae393f1d86db6", "url": "https://github.com/hortonworks/cloudbreak/commit/3d69fa79fe5610e9bef344b3c33ae393f1d86db6", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-21T01:49:53Z", "type": "forcePushed"}, {"oid": "4d586aab4f974d5c2ddb4024a052501f02b9fb4d", "url": "https://github.com/hortonworks/cloudbreak/commit/4d586aab4f974d5c2ddb4024a052501f02b9fb4d", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-21T13:15:49Z", "type": "forcePushed"}, {"oid": "779af0a7643b474d57dd9b4a3393680b1e0deae6", "url": "https://github.com/hortonworks/cloudbreak/commit/779af0a7643b474d57dd9b4a3393680b1e0deae6", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-21T14:04:33Z", "type": "commit"}, {"oid": "779af0a7643b474d57dd9b4a3393680b1e0deae6", "url": "https://github.com/hortonworks/cloudbreak/commit/779af0a7643b474d57dd9b4a3393680b1e0deae6", "message": "CB-8664: Use new FreeIPA health checks for instance status\n\nUse the new FreeIPA health checks for the instance status. This is\nused for the periodic polling of the status, the on demand status for\nthe health API, and for the internal repair status.\n\nUnit tests were added and this was tested manually using a local\ndeployment of cloudbreak.", "committedDate": "2020-10-21T14:04:33Z", "type": "forcePushed"}]}