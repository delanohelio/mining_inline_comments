{"pr_number": 8109, "pr_title": "CB-7146 [E2E] Save Java VM dumps on out-of-memory conditions", "pr_createdAt": "2020-05-20T09:22:46Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8109", "timeline": [{"oid": "230cb762275bad987e3faead79017bcb7af9b668", "url": "https://github.com/hortonworks/cloudbreak/commit/230cb762275bad987e3faead79017bcb7af9b668", "message": "CB-7146 [E2E] Save Java VM dumps on out-of-memory conditions", "committedDate": "2020-05-20T11:43:28Z", "type": "forcePushed"}, {"oid": "f102f1baf5c19e6a175b183b4a8d8c34cd673ed3", "url": "https://github.com/hortonworks/cloudbreak/commit/f102f1baf5c19e6a175b183b4a8d8c34cd673ed3", "message": "CB-7146 [E2E] Save Java VM dumps on out-of-memory conditions", "committedDate": "2020-05-20T14:54:11Z", "type": "forcePushed"}, {"oid": "66c55ade1078f1aca03d517a73ae46818483bd5e", "url": "https://github.com/hortonworks/cloudbreak/commit/66c55ade1078f1aca03d517a73ae46818483bd5e", "message": "CB-7146 [E2E] Save Java VM dumps on out-of-memory conditions", "committedDate": "2020-05-21T07:47:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMTIyOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8109#discussion_r428621229", "bodyText": "Why do we need to use UseStringDeduplication?\nWhy are we specifying the GC algorithm? (I think G1GC is the default form Java 9 and upwards.)\n-Xmx1g why do we use this specific value?", "author": "lnardai", "createdAt": "2020-05-21T12:28:35Z", "path": "integration-test/docker-compose_template.yml", "diffHunk": "@@ -23,7 +23,7 @@ services:\n     volumes:\n       - ./:/it\n       - /etc/localtime:/etc/localtime:ro\n-    command: java -jar /it/build/libs/cloudbreak-integration-test.jar com.sequenceiq.it.IntegrationTestApp --integrationtest.command=suiteurls --integrationtest.suiteFiles=${INTEGRATIONTEST_SUITEFILES} | tee cbtest.log\n+    command: java -Xmx1g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:OnOutOfMemoryError=\"kill -9 %p\" -XX:+HeapDumpOnOutOfMemoryError -jar /it/build/libs/cloudbreak-integration-test.jar com.sequenceiq.it.IntegrationTestApp --integrationtest.command=suiteurls --integrationtest.suiteFiles=${INTEGRATIONTEST_SUITEFILES} | tee cbtest.log", "originalCommit": "66c55ade1078f1aca03d517a73ae46818483bd5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3NDY0Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8109#discussion_r428674646", "bodyText": "-XX:+UseG1GC -XX:+UseStringDeduplication\n\nModern Java applications do a lot of string manipulations due to web service API calls (i.e. JSON, REST, SOAP, \u2026), external data source calls (SQL, data returned back from DB, \u2026), text parsing, text building, etc. Thus, string objects can easily occupy at least 30% of memory. Apparently, the majority of those String objects are duplicates. Because of string duplication, a considerable amount of memory is wasted. Thus, to optimize the memory wasted by duplicate string objects, JEP 192 has become a welcome enhancement to Java.\nWhat Does JEP 192 Do?\nWhen the G1 GC algorithm runs, it removes garbage objects from memory. It also removes duplicate string objects from memory \u2014 string deduplication. This feature can be activated by passing the following JVM arguments: -XX:+UseG1GC -XX:+UseStringDeduplication\nNote 1: In order to use this feature, you need to run on Java 8 update 20 or later versions.\nNote 2: In order to use \u2018-XX:+UseStringDeduplication\u2019, you need to be using the G1 GC algorithm.\nby Ram Lakshmanan\n\n-Xmx: Maximum Java heap size.\n\nThe value is 25% of the available memory with a maximum of 25 GB. However, where there is 2 GB or less of physical memory, the value set is 50% of available memory with a minimum value of 16 MB and a maximum value of 512 MB.\nStart of content that applies only to Java 8 (LTS) If you have set the -XX:+OriginalJDK8HeapSizeCompatibilityMode option for compatibility with earlier releases, the value is half the available memory with a minimum of 16 MB and a maximum of 512 MB.\nby Default settings for the OpenJ9 VM", "author": "aszegedi", "createdAt": "2020-05-21T14:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MzI1OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8109#discussion_r428693259", "bodyText": "I understand what the switches are for, I'm curios based on what information are we adding these values. If we would see from the ThreadDump that there are a lot of duplicate strings, sure try that.\nI still think the G1GC is the default GC for Java11.", "author": "lnardai", "createdAt": "2020-05-21T14:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMTIyOQ=="}], "type": "inlineReview"}, {"oid": "12159c0f98baf5571c243809e1abd6f0f4daaffd", "url": "https://github.com/hortonworks/cloudbreak/commit/12159c0f98baf5571c243809e1abd6f0f4daaffd", "message": "CB-7146 [E2E] Save Java VM dumps on out-of-memory conditions", "committedDate": "2020-05-21T14:49:42Z", "type": "commit"}, {"oid": "12159c0f98baf5571c243809e1abd6f0f4daaffd", "url": "https://github.com/hortonworks/cloudbreak/commit/12159c0f98baf5571c243809e1abd6f0f4daaffd", "message": "CB-7146 [E2E] Save Java VM dumps on out-of-memory conditions", "committedDate": "2020-05-21T14:49:42Z", "type": "forcePushed"}]}