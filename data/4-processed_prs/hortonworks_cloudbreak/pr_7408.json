{"pr_number": 7408, "pr_title": "Subnets", "pr_createdAt": "2020-02-27T15:37:17Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7408", "timeline": [{"oid": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "url": "https://github.com/hortonworks/cloudbreak/commit/21e1a6c2a8024f33191b0e8e27b0baf665095078", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-02-27T15:35:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzEyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385213123", "bodyText": "I think this should be the count of subnets", "author": "doktoric", "createdAt": "2020-02-27T16:15:30Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/extended/MlxSubnetConstants.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.sequenceiq.environment.network.service.extended;\n+\n+public class MlxSubnetConstants {\n+\n+    public static final String MLX_SUBNET_MASK = \"24\";\n+\n+    public static final int MLX_SUBNET_STARTING_IP = 3;\n+\n+    public static final int MLX_SUBNET_FINAL_IP = 34;", "originalCommit": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMTEwNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385631107", "bodyText": "I originally implemented this way because we needed to know the starting and final IPs of the different ranges in order to determine the subnet types, without storing it in the database. Since it is stored now in the database, it can be changed to count.", "author": "attilapalfi92", "createdAt": "2020-02-28T10:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTAyNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r386029026", "bodyText": "done", "author": "topolyai5", "createdAt": "2020-02-29T13:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzMwNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385213307", "bodyText": "we dont need this if we are using count", "author": "doktoric", "createdAt": "2020-02-27T16:15:46Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/extended/MlxSubnetConstants.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.sequenceiq.environment.network.service.extended;\n+\n+public class MlxSubnetConstants {\n+\n+    public static final String MLX_SUBNET_MASK = \"24\";\n+\n+    public static final int MLX_SUBNET_STARTING_IP = 3;", "originalCommit": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMTI5MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385631290", "bodyText": "We don't need this because we are storing the subnet types", "author": "attilapalfi92", "createdAt": "2020-02-28T10:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTA1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r386029051", "bodyText": "done", "author": "topolyai5", "createdAt": "2020-02-29T13:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzQyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385213421", "bodyText": "should be count", "author": "doktoric", "createdAt": "2020-02-27T16:15:57Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/extended/PublicSubnetConstants.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.sequenceiq.environment.network.service.extended;\n+\n+public class PublicSubnetConstants {\n+\n+    public static final String PUBLIC_SUBNET_MASK = \"24\";\n+\n+    public static final int PUBLIC_SUBNET_STARTING_IP = 0;\n+\n+    public static final int PUBLIC_SUBNET_FINAL_IP = 2;", "originalCommit": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzUxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385213516", "bodyText": "we dont need this I guess", "author": "doktoric", "createdAt": "2020-02-27T16:16:05Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/extended/PublicSubnetConstants.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.sequenceiq.environment.network.service.extended;\n+\n+public class PublicSubnetConstants {\n+\n+    public static final String PUBLIC_SUBNET_MASK = \"24\";\n+\n+    public static final int PUBLIC_SUBNET_STARTING_IP = 0;", "originalCommit": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTA5OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r386029098", "bodyText": "done", "author": "topolyai5", "createdAt": "2020-02-29T13:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMzUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxNDE0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385214141", "bodyText": "3 more private for cb's", "author": "doktoric", "createdAt": "2020-02-27T16:17:04Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/extended/AzureSubnetCidrProvider.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.environment.network.service.extended;\n+\n+import static com.sequenceiq.environment.network.service.Cidrs.cidrs;\n+import static com.sequenceiq.environment.network.service.extended.DwxSubnetConstants.DWX_SUBNET_FINAL_IP;\n+import static com.sequenceiq.environment.network.service.extended.DwxSubnetConstants.DWX_SUBNET_MASK;\n+import static com.sequenceiq.environment.network.service.extended.DwxSubnetConstants.DWX_SUBNET_STARTING_IP;\n+import static com.sequenceiq.environment.network.service.extended.ExtendedSubnetTypeProvider.PLUS_BITS_FOR_19_MASK;\n+import static com.sequenceiq.environment.network.service.extended.ExtendedSubnetTypeProvider.PLUS_BITS_FOR_24_MASK;\n+import static com.sequenceiq.environment.network.service.extended.MlxSubnetConstants.MLX_SUBNET_FINAL_IP;\n+import static com.sequenceiq.environment.network.service.extended.MlxSubnetConstants.MLX_SUBNET_MASK;\n+import static com.sequenceiq.environment.network.service.extended.MlxSubnetConstants.MLX_SUBNET_STARTING_IP;\n+import static com.sequenceiq.environment.network.service.extended.PublicSubnetConstants.PUBLIC_SUBNET_FINAL_IP;\n+import static com.sequenceiq.environment.network.service.extended.PublicSubnetConstants.PUBLIC_SUBNET_MASK;\n+import static com.sequenceiq.environment.network.service.extended.PublicSubnetConstants.PUBLIC_SUBNET_STARTING_IP;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.network.NetworkSubnetRequest;\n+import com.sequenceiq.environment.network.service.Cidrs;\n+import com.sequenceiq.environment.network.service.SubnetCidrProvider;\n+\n+@Component\n+public class AzureSubnetCidrProvider implements SubnetCidrProvider {\n+\n+    private final ExtendedSubnetTypeProvider extendedSubnetTypeProvider;\n+\n+    public AzureSubnetCidrProvider(ExtendedSubnetTypeProvider extendedSubnetTypeProvider) {\n+        this.extendedSubnetTypeProvider = extendedSubnetTypeProvider;\n+    }\n+\n+    @Override\n+    public Cidrs provide(String networkCidr) {\n+        String[] ip = extendedSubnetTypeProvider.getIp(networkCidr);\n+        Set<NetworkSubnetRequest> publicSubnets = new HashSet<>();\n+        Set<NetworkSubnetRequest> privateSubnets = new HashSet<>();\n+\n+        for (int i = PUBLIC_SUBNET_STARTING_IP; i <= PUBLIC_SUBNET_FINAL_IP; i += PLUS_BITS_FOR_24_MASK) {\n+            ip[2] = String.valueOf(i);\n+            String cidr = String.join(\".\", ip) + \"/\" + PUBLIC_SUBNET_MASK;\n+            publicSubnets.add(new NetworkSubnetRequest(cidr, SubnetType.PUBLIC.name()));\n+        }\n+        for (int i = MLX_SUBNET_STARTING_IP; i <= MLX_SUBNET_FINAL_IP; i += PLUS_BITS_FOR_24_MASK) {\n+            ip[2] = String.valueOf(i);\n+            String cidr = String.join(\".\", ip) + \"/\" + MLX_SUBNET_MASK;\n+            privateSubnets.add(new NetworkSubnetRequest(cidr, SubnetType.MLX.name()));\n+        }\n+        // we need to increase this because of the masking and on Azure we need to start from .64\n+        for (int i = DWX_SUBNET_STARTING_IP; i <= DWX_SUBNET_FINAL_IP; i += PLUS_BITS_FOR_19_MASK) {\n+            ip[2] = String.valueOf(i);\n+            String cidr = String.join(\".\", ip) + \"/\" + DWX_SUBNET_MASK;\n+            privateSubnets.add(new NetworkSubnetRequest(cidr, SubnetType.DWX.name()));\n+        }", "originalCommit": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTEwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r386029105", "bodyText": "done", "author": "topolyai5", "createdAt": "2020-02-29T13:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxNDE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxNDUyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385214527", "bodyText": "CB", "author": "doktoric", "createdAt": "2020-02-27T16:17:37Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/extended/SubnetType.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package com.sequenceiq.environment.network.service.extended;\n+\n+public enum SubnetType {\n+    PUBLIC, MLX, DWX", "originalCommit": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyOTE0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r386029143", "bodyText": "I used PRIVATE instead of CB but the same meaning", "author": "topolyai5", "createdAt": "2020-02-29T13:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxNDUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzODM5Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7408#discussion_r385338393", "bodyText": "is it ok to reffer here as a string?", "author": "doktoric", "createdAt": "2020-02-27T19:56:27Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -397,7 +397,8 @@ private DescribeVpcsRequest getDescribeVpcsRequestWIthFilters(Map<String, String\n                             subnet.getCidrBlock(),\n                             !hasInternetGateway,\n                             subnet.getMapPublicIpOnLaunch(),\n-                            hasInternetGateway)\n+                            hasInternetGateway,\n+                            \"PUBLIC\")", "originalCommit": "21e1a6c2a8024f33191b0e8e27b0baf665095078", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f77584b042d4bc7dd726992f081b4bcdfc21e1b", "url": "https://github.com/hortonworks/cloudbreak/commit/9f77584b042d4bc7dd726992f081b4bcdfc21e1b", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-02-29T13:37:34Z", "type": "forcePushed"}, {"oid": "6eee1d189d8ef069b992f0804a23c7b449296558", "url": "https://github.com/hortonworks/cloudbreak/commit/6eee1d189d8ef069b992f0804a23c7b449296558", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-03-04T07:17:56Z", "type": "forcePushed"}, {"oid": "40d3bddb2fd90682e48d5c5f4eead6ea71b791ca", "url": "https://github.com/hortonworks/cloudbreak/commit/40d3bddb2fd90682e48d5c5f4eead6ea71b791ca", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-03-04T10:06:23Z", "type": "forcePushed"}, {"oid": "a11d59dfc948eb274bf5eb66bd886da6b17a9ba3", "url": "https://github.com/hortonworks/cloudbreak/commit/a11d59dfc948eb274bf5eb66bd886da6b17a9ba3", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-03-04T10:19:45Z", "type": "forcePushed"}, {"oid": "09d515df9b25d5ebe199941b79262acd0c8cf825", "url": "https://github.com/hortonworks/cloudbreak/commit/09d515df9b25d5ebe199941b79262acd0c8cf825", "message": "original author: Richard Doktorics - Revert \"Revert \"CB-5076 subnet configurations for experiences\"\"", "committedDate": "2020-03-04T13:22:52Z", "type": "commit"}, {"oid": "64163fea3469da8417c12475aacdbec636cd35a5", "url": "https://github.com/hortonworks/cloudbreak/commit/64163fea3469da8417c12475aacdbec636cd35a5", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-03-04T13:24:35Z", "type": "forcePushed"}, {"oid": "a7640e6419c9b76e1b16225c483a0562fdabb639", "url": "https://github.com/hortonworks/cloudbreak/commit/a7640e6419c9b76e1b16225c483a0562fdabb639", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-03-04T13:51:41Z", "type": "commit"}, {"oid": "a7640e6419c9b76e1b16225c483a0562fdabb639", "url": "https://github.com/hortonworks/cloudbreak/commit/a7640e6419c9b76e1b16225c483a0562fdabb639", "message": "CB-5079 - separating subnet types in network response", "committedDate": "2020-03-04T13:51:41Z", "type": "forcePushed"}]}