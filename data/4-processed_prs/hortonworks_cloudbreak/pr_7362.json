{"pr_number": 7362, "pr_title": "CB-1141 & CB-5159: Add high availability options to FreeIPA", "pr_createdAt": "2020-02-24T04:24:19Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7362", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4OTY5OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383189698", "bodyText": "Could you rename AmbariNodeLaunchConfig? Or is there a reason to keep it?", "author": "lacikaaa", "createdAt": "2020-02-24T10:38:17Z", "path": "cloud-aws/src/main/resources/templates/aws-cf-stack-freeipa.ftl", "diffHunk": "@@ -0,0 +1,236 @@\n+<#setting number_format=\"computer\">\n+{\n+  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n+\n+  \"Description\" : \"Deploys a Cloudera Data Platform FreeIPA cluster on AWS.\",\n+\n+  \"Parameters\" : {\n+\n+    \"StackName\" : {\n+      \"Description\" : \"Name of the CloudFormation stack that is used to tag instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"VPCId\" : {\n+      \"Description\" : \"Id of the VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"vpc-[a-z0-9]*\"\n+    },\n+\n+    \"SubnetId\" : {\n+      \"Description\" : \"Id of the Subnet within the existing VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"15\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"subnet-[a-z0-9]*(?:,subnet-[a-z0-9]*)*\"\n+    },\n+\n+    \"StackOwner\" : {\n+      \"Description\" : \"The instances will have this parameter as an Owner tag.\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"stackowner\" : {\n+       \"Description\" : \"The instances will have this parameter as an owner tag.\",\n+       \"Type\" : \"String\",\n+       \"MinLength\": \"1\",\n+       \"MaxLength\": \"200\"\n+    },\n+\n+    \"CBGateWayUserData\" : {\n+      \"Description\" : \"Gateway user data to be executed\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"9\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData1\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData2\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData3\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"KeyName\": {\n+      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n+      \"Type\": \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\n+      \"ConstraintDescription\" : \"can contain only ASCII characters.\"\n+    },\n+\n+    \"AMI\" : {\n+      \"Description\" : \"AMI that's used to start instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"ami-[a-z0-9]*\",\n+      \"ConstraintDescription\" : \"must follow pattern: ami-xxxxxxxx\"\n+    },\n+\n+    \"RootDeviceName\" : {\n+      \"Description\" : \"Name of the root device that comes with the AMI\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"8\",\n+      \"MaxLength\": \"12\"\n+    }\n+\n+  },\n+\n+  \"Resources\" : {\n+\n+    <#if mapPublicIpOnLaunch>\n+        <#list gatewayGroups as group>\n+            <#list 1..group.instanceCount as nth>\n+                \"EIP${group.groupName?replace('_', '')}${nth}\" : {\n+                   \"Type\" : \"AWS::EC2::EIP\",\n+                   \"Properties\" : {\n+                      \"Domain\" : \"vpc\"\n+                   }\n+                },\n+            </#list>\n+        </#list>\n+    </#if>\n+\n+    <#list instanceGroups as group>\n+    \"${group.autoScalingGroupName}\" : {\n+      \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\n+      \"Properties\" : {\n+        <#if group.subnetId??>\n+        \"VPCZoneIdentifier\" : [ \"${group.subnetId}\" ],\n+        <#else>\n+        \"VPCZoneIdentifier\" : [{ \"Ref\" : \"SubnetId\" }],\n+        </#if>\n+        \"LaunchConfigurationName\" : { \"Ref\" : \"AmbariNodeLaunchConfig${group.groupName?replace('_', '')}\" },", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjc0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383226747", "bodyText": "unfortunately if we change this here then we should take care with the backward compatibility", "author": "doktoric", "createdAt": "2020-02-24T12:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4OTY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMjE2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383212164", "bodyText": "please don't use DEFAULT, because it can lock the table. instead you can use an update", "author": "lacikaaa", "createdAt": "2020-02-24T11:26:45Z", "path": "environment/src/main/resources/schema/app/20200323193238_CB-5159_freeipa_instances_per_group_is_optional.sql", "diffHunk": "@@ -0,0 +1,10 @@\n+-- // CB-1617 freeipa creation is optional\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE environment ADD COLUMN IF NOT EXISTS freeIpaInstancesPerGroup integer NOT NULL DEFAULT 1;", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIxMzY1MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383213650", "bodyText": "I think these should be class level constants, or variables configurable via env parameters, so we can override them", "author": "lacikaaa", "createdAt": "2020-02-24T11:30:39Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "diffHunk": "@@ -27,9 +27,27 @@\n \n     @Override\n     public ValidationResult validate(CreateFreeIpaRequest subject) {\n+        // FreeIPA's recommends no more than 4 replication agreements per node. To simply things, only allow a fully connected mesh.\n+        // Also don't allow a special case with 5 nodes for 1 group when the there is a maximum of 4 instances when using multiple groups.\n+        final int maxInstances = 4;\n+\n+        final int maxInstanceGroups = 1;", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNTk1MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383225951", "bodyText": "is it possible that the az is null here?", "author": "doktoric", "createdAt": "2020-02-24T12:00:45Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSetup.java", "diffHunk": "@@ -128,7 +128,8 @@ public void prerequisites(AuthenticatedContext ac, CloudStack stack, Persistence\n     private void validateRegionAndZone(CloudCredential cloudCredential, Location location) {\n         CloudRegions regions = awsPlatformResources.regions(cloudCredential, location.getRegion(), Collections.emptyMap());\n         List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(location.getRegion());\n-        if (!availabilityZones.contains(location.getAvailabilityZone())) {\n+        if (location.getAvailabilityZone() != null", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1NzA3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384257076", "bodyText": "The FreeIPA cloud formation template was simplified. The AZs were needed when creating subnets which only cloudbreak core does. As a result it is no longer needed in the cloud formation template for FreeIPA. In order for the template to process I had to avoid sending the AZ parameter into the template processor. But I needed to only do this for FreeIPA and not core. As a result, I changed FreeIPA to not set the AZ since it is not used that way the common code could check if it was null and optionally use the AZ parameter.", "author": "jamisonbennett", "createdAt": "2020-02-26T03:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNTk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjI4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383226281", "bodyText": "is this possible that the ac.getCloudContext().getLocation().getAvailabilityZone()  null ?", "author": "doktoric", "createdAt": "2020-02-24T12:01:34Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsStackRequestHelper.java", "diffHunk": "@@ -98,7 +100,8 @@ public DeleteStackRequest createDeleteStackRequest(String cFStackName) {\n         if (awsInstanceProfileView.isInstanceProfileAvailable()) {\n             parameters.add(new Parameter().withParameterKey(\"InstanceProfile\").withParameterValue(awsInstanceProfileView.getInstanceProfile()));\n         }\n-        if (ac.getCloudContext().getLocation().getAvailabilityZone().value() != null) {\n+        if (ac.getCloudContext().getLocation().getAvailabilityZone() != null", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1NzE3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384257172", "bodyText": "Yes, for the same reason as above.", "author": "jamisonbennett", "createdAt": "2020-02-26T03:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNjkzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383226932", "bodyText": "cb-resource-type owner and Owner should be removed these are not required anymore", "author": "doktoric", "createdAt": "2020-02-24T12:03:20Z", "path": "cloud-aws/src/main/resources/templates/aws-cf-stack-freeipa.ftl", "diffHunk": "@@ -0,0 +1,236 @@\n+<#setting number_format=\"computer\">\n+{\n+  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n+\n+  \"Description\" : \"Deploys a Cloudera Data Platform FreeIPA cluster on AWS.\",\n+\n+  \"Parameters\" : {\n+\n+    \"StackName\" : {\n+      \"Description\" : \"Name of the CloudFormation stack that is used to tag instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"VPCId\" : {\n+      \"Description\" : \"Id of the VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"vpc-[a-z0-9]*\"\n+    },\n+\n+    \"SubnetId\" : {\n+      \"Description\" : \"Id of the Subnet within the existing VPC where to deploy the cluster\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"15\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"subnet-[a-z0-9]*(?:,subnet-[a-z0-9]*)*\"\n+    },\n+\n+    \"StackOwner\" : {\n+      \"Description\" : \"The instances will have this parameter as an Owner tag.\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"50\"\n+    },\n+\n+    \"stackowner\" : {\n+       \"Description\" : \"The instances will have this parameter as an owner tag.\",\n+       \"Type\" : \"String\",\n+       \"MinLength\": \"1\",\n+       \"MaxLength\": \"200\"\n+    },\n+\n+    \"CBGateWayUserData\" : {\n+      \"Description\" : \"Gateway user data to be executed\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"9\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData1\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData2\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"CBGateWayUserData3\" : {\n+      \"Description\" : \"Gateway user data to be executed (continued)\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"0\",\n+      \"MaxLength\": \"4096\"\n+    },\n+\n+    \"KeyName\": {\n+      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n+      \"Type\": \"String\",\n+      \"MinLength\": \"1\",\n+      \"MaxLength\": \"255\",\n+      \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\n+      \"ConstraintDescription\" : \"can contain only ASCII characters.\"\n+    },\n+\n+    \"AMI\" : {\n+      \"Description\" : \"AMI that's used to start instances\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"12\",\n+      \"AllowedPattern\" : \"ami-[a-z0-9]*\",\n+      \"ConstraintDescription\" : \"must follow pattern: ami-xxxxxxxx\"\n+    },\n+\n+    \"RootDeviceName\" : {\n+      \"Description\" : \"Name of the root device that comes with the AMI\",\n+      \"Type\" : \"String\",\n+      \"MinLength\": \"8\",\n+      \"MaxLength\": \"12\"\n+    }\n+\n+  },\n+\n+  \"Resources\" : {\n+\n+    <#if mapPublicIpOnLaunch>\n+        <#list gatewayGroups as group>\n+            <#list 1..group.instanceCount as nth>\n+                \"EIP${group.groupName?replace('_', '')}${nth}\" : {\n+                   \"Type\" : \"AWS::EC2::EIP\",\n+                   \"Properties\" : {\n+                      \"Domain\" : \"vpc\"\n+                   }\n+                },\n+            </#list>\n+        </#list>\n+    </#if>\n+\n+    <#list instanceGroups as group>\n+    \"${group.autoScalingGroupName}\" : {\n+      \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\n+      \"Properties\" : {\n+        <#if group.subnetId??>\n+        \"VPCZoneIdentifier\" : [ \"${group.subnetId}\" ],\n+        <#else>\n+        \"VPCZoneIdentifier\" : [{ \"Ref\" : \"SubnetId\" }],\n+        </#if>\n+        \"LaunchConfigurationName\" : { \"Ref\" : \"AmbariNodeLaunchConfig${group.groupName?replace('_', '')}\" },\n+        \"TerminationPolicies\" : [ \"NewestInstance\" ],\n+        \"MinSize\" : 0,\n+        \"MaxSize\" : ${group.instanceCount},\n+        \"DesiredCapacity\" : ${group.instanceCount},\n+        \"Tags\" : [ { \"Key\" : \"Name\", \"Value\" : { \"Fn::Join\" : [\"-\", [ { \"Ref\" : \"StackName\" }, \"${group.groupName}\"]] }, \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"owner\", \"Value\" : { \"Ref\" : \"stackowner\" }, \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"Owner\", \"Value\" : { \"Ref\" : \"StackOwner\" }, \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"cb-resource-type\", \"Value\" : \"${instance_resource}\", \"PropagateAtLaunch\" : \"true\" },\n+                   { \"Key\" : \"instanceGroup\", \"Value\" : \"${group.groupName}\", \"PropagateAtLaunch\" : \"true\" }]\n+      }\n+    },\n+\n+    \"AmbariNodeLaunchConfig${group.groupName?replace('_', '')}\"  : {\n+      \"Type\" : \"AWS::AutoScaling::LaunchConfiguration\",\n+      \"Properties\" : {\n+        <#if group.ebsOptimized == true>\n+        \"EbsOptimized\" : \"true\",\n+        </#if>\n+        <#if group.hasInstanceProfile>\n+        \"IamInstanceProfile\" : \"${group.instanceProfile}\",\n+        </#if>\n+        \"BlockDeviceMappings\" : [\n+          {\n+            \"DeviceName\" : { \"Ref\" : \"RootDeviceName\" },\n+            \"Ebs\" : {\n+              \"VolumeSize\" : \"${group.rootVolumeSize}\",\n+              \"VolumeType\" : \"gp2\"\n+            }\n+          }\n+        ],\n+        <#if group.ebsEncrypted == true>\n+        \"ImageId\"        : \"${group.encryptedAMI}\",\n+        <#else>\n+        \"ImageId\"        : { \"Ref\" : \"AMI\" },\n+        </#if>\n+        <#if group.cloudSecurityIds?size != 0>\n+        \"SecurityGroups\" : [ <#list group.cloudSecurityIds as cloudSecurityId>\n+                               \"${cloudSecurityId}\"<#if cloudSecurityId_has_next>,</#if>\n+                             </#list>\n+                           ],\n+        <#else>\n+        \"SecurityGroups\" : [ { \"Ref\" : \"ClusterNodeSecurityGroup${group.groupName?replace('_', '')}\" } ],\n+        </#if>\n+        \"InstanceType\"   : \"${group.flavor}\",\n+        \"KeyName\"        : { \"Ref\" : \"KeyName\" },\n+        <#if group.spotPrice??>\n+        \"SpotPrice\"      : \"${group.spotPrice}\",\n+        </#if>\n+        \"UserData\"       : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [ { \"Ref\" : \"CBGateWayUserData\"},\n+                                                                  { \"Ref\" : \"CBGateWayUserData1\"},\n+                                                                  { \"Ref\" : \"CBGateWayUserData2\"},\n+                                                                  { \"Ref\" : \"CBGateWayUserData3\"}]] }}\n+      }\n+    }\n+\n+    <#if group.cloudSecurityIds?size == 0>,\n+    \"ClusterNodeSecurityGroup${group.groupName?replace('_', '')}\" : {\n+      \"Type\" : \"AWS::EC2::SecurityGroup\",\n+      \"Properties\" : {\n+        \"GroupDescription\" : \"Allow access from web and bastion as well as outbound HTTP and HTTPS traffic\",\n+        \"Tags\" : [\n+            { \"Key\" : \"cb-resource-type\", \"Value\" : \"${securitygroup_resource}\" },", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzIwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227203", "bodyText": "instanceCountByGroup or instanceCountPerGroup ?", "author": "doktoric", "createdAt": "2020-02-24T12:04:02Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/request/AttachedFreeIpaRequest.java", "diffHunk": "@@ -14,6 +14,9 @@\n     @ApiModelProperty(value = EnvironmentModelDescription.CREATE_FREEIPA, required = true)\n     private Boolean create;\n \n+    @ApiModelProperty(value = EnvironmentModelDescription.FREEIPA_INSTANCES_PER_GROUP)\n+    private Integer instancesPerGroup;", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzUzOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227538", "bodyText": "I think we should create a FreeipaResponse Object here because probably we will see more and more property here", "author": "doktoric", "createdAt": "2020-02-24T12:04:56Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/EnvironmentBaseResponse.java", "diffHunk": "@@ -32,6 +32,9 @@\n     @ApiModelProperty(EnvironmentModelDescription.CREATE_FREEIPA)\n     private Boolean createFreeIpa = Boolean.TRUE;\n \n+    @ApiModelProperty(EnvironmentModelDescription.FREEIPA_INSTANCES_PER_GROUP)\n+    private Integer freeIpaInstancesPerGroup = 1;", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzY3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227677", "bodyText": "I think we should create a FreeipaResponse Object here because probably we will see more and more property here", "author": "doktoric", "createdAt": "2020-02-24T12:05:13Z", "path": "environment-api/src/main/java/com/sequenceiq/environment/api/v1/environment/model/response/SimpleEnvironmentResponse.java", "diffHunk": "@@ -37,6 +37,8 @@ public static Builder builder() {\n \n         private boolean createFreeIpa;\n \n+        private int freeIpaInstancesPerGroup;", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1NzY3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384257672", "bodyText": "Done, but I am keeping the createFreeIpa in the parent class for API compatibility.", "author": "jamisonbennett", "createdAt": "2020-02-26T03:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyNzg4MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383227880", "bodyText": "thanks for created this object here \ud83d\udc4d", "author": "doktoric", "createdAt": "2020-02-24T12:05:44Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/dto/EnvironmentCreationDto.java", "diffHunk": "@@ -148,8 +148,8 @@ public EnvironmentTelemetry getTelemetry() {\n         return telemetry;\n     }\n \n-    public boolean isCreateFreeIpa() {\n-        return createFreeIpa;\n+    public FreeIpaCreationDto getFreeIpaCreation() {", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTQ2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383229469", "bodyText": "in the freeipa request", "author": "doktoric", "createdAt": "2020-02-24T12:09:51Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "diffHunk": "@@ -27,9 +27,27 @@\n \n     @Override\n     public ValidationResult validate(CreateFreeIpaRequest subject) {\n+        // FreeIPA's recommends no more than 4 replication agreements per node. To simply things, only allow a fully connected mesh.\n+        // Also don't allow a special case with 5 nodes for 1 group when the there is a maximum of 4 instances when using multiple groups.\n+        final int maxInstances = 4;\n+\n+        final int maxInstanceGroups = 1;\n+\n         ValidationResultBuilder validationBuilder = ValidationResult.builder();\n-        if (CollectionUtils.isEmpty(subject.getInstanceGroups()) || subject.getInstanceGroups().size() != 1) {\n-            validationBuilder.error(\"Stack request must contain a single instance group.\");\n+        if (CollectionUtils.isEmpty(subject.getInstanceGroups())) {\n+            validationBuilder.error(\"Stack request must contain at least one instance group.\");\n+        } else {\n+            int nodesPerInstanceGroup = subject.getInstanceGroups().get(0).getNodeCount();\n+            if (subject.getInstanceGroups().stream().filter(ig -> ig.getNodeCount() != nodesPerInstanceGroup || ig.getNodeCount() < 1).count() > 0) {\n+                validationBuilder.error(\"All instance groups in the stack request must contain the same number of nodes per instance group \" +", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTY0MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383229641", "bodyText": "I think it shoud be good not to call stack request but freeipa request here", "author": "doktoric", "createdAt": "2020-02-24T12:10:20Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/validation/CreateFreeIpaRequestValidator.java", "diffHunk": "@@ -27,9 +27,27 @@\n \n     @Override\n     public ValidationResult validate(CreateFreeIpaRequest subject) {\n+        // FreeIPA's recommends no more than 4 replication agreements per node. To simply things, only allow a fully connected mesh.\n+        // Also don't allow a special case with 5 nodes for 1 group when the there is a maximum of 4 instances when using multiple groups.\n+        final int maxInstances = 4;\n+\n+        final int maxInstanceGroups = 1;\n+\n         ValidationResultBuilder validationBuilder = ValidationResult.builder();\n-        if (CollectionUtils.isEmpty(subject.getInstanceGroups()) || subject.getInstanceGroups().size() != 1) {\n-            validationBuilder.error(\"Stack request must contain a single instance group.\");\n+        if (CollectionUtils.isEmpty(subject.getInstanceGroups())) {\n+            validationBuilder.error(\"Stack request must contain at least one instance group.\");\n+        } else {\n+            int nodesPerInstanceGroup = subject.getInstanceGroups().get(0).getNodeCount();\n+            if (subject.getInstanceGroups().stream().filter(ig -> ig.getNodeCount() != nodesPerInstanceGroup || ig.getNodeCount() < 1).count() > 0) {\n+                validationBuilder.error(\"All instance groups in the stack request must contain the same number of nodes per instance group \" +\n+                        \"and there must be at least 1 instance per instance group.\");\n+            }\n+            if (nodesPerInstanceGroup * subject.getInstanceGroups().size() > maxInstances) {\n+                validationBuilder.error(String.format(\"Stack request must contain at most %d instances.\", maxInstances));", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTkwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383229909", "bodyText": "do we really want to remove the CORE part here ?", "author": "doktoric", "createdAt": "2020-02-24T12:10:59Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java", "diffHunk": "@@ -16,8 +16,7 @@\n     public com.sequenceiq.cloudbreak.cloud.model.Image convert(Image source) {\n         com.sequenceiq.cloudbreak.cloud.model.Image image =\n                 new com.sequenceiq.cloudbreak.cloud.model.Image(source.getImageName(),\n-                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\"),\n-                                InstanceGroupType.CORE, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n+                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1ODIyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384258228", "bodyText": "This was done to simplify the FreeIPA templates. I discussed this with @lacikaaa and @keyki", "author": "jamisonbennett", "createdAt": "2020-02-26T03:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNTQ2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r385035468", "bodyText": "\ud83d\udc4d", "author": "doktoric", "createdAt": "2020-02-27T10:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIyOTkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMDk0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r383230947", "bodyText": "why we removed this part ?", "author": "doktoric", "createdAt": "2020-02-24T12:13:36Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/provision/action/AbstractStackProvisionAction.java", "diffHunk": "@@ -49,7 +48,7 @@ protected AbstractStackProvisionAction(Class<P> payloadClass) {\n     protected StackContext createFlowContext(FlowParameters flowParameters, StateContext<StackProvisionState, StackProvisionEvent> stateContext, P payload) {\n         Stack stack = stackService.getByIdWithListsInTransaction(payload.getResourceId());\n         MDCBuilder.buildMdcContext(stack);\n-        Location location = location(region(stack.getRegion()), availabilityZone(stack.getAvailabilityZone()));", "originalCommit": "40adbe7e834408d1141417541c398a34907b1d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1ODYwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r384258608", "bodyText": "It was replaced with Location location = location(region(stack.getRegion())); which does not set the AZ.\nThe FreeIPA cloud formation template was simplified. The AZs were needed when creating subnets which only cloudbreak core does. As a result it is no longer needed in the cloud formation template for FreeIPA. In order for the template to process I had to avoid sending the AZ parameter into the template processor. But I needed to only do this for FreeIPA and not core. As a result, I changed FreeIPA to not set the AZ since it is not used that way the common code could check if it was null and optionally use the AZ parameter.", "author": "jamisonbennett", "createdAt": "2020-02-26T03:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMDk0Nw=="}], "type": "inlineReview"}, {"oid": "1e9c01b4657c09854eb02d0bb2ccdb193dc6c5b1", "url": "https://github.com/hortonworks/cloudbreak/commit/1e9c01b4657c09854eb02d0bb2ccdb193dc6c5b1", "message": "CB-1141 & CB-5159: Add high availability options to FreeIPA\n\nSimplified the AWS and Azure FreeIPA cloud formation templates. Some\nproperties were made optional in the template builder so that unused\nFreeIPA properties could be removed. All FreeIPA nodes are gateway\nnodes, so the FreeIPA CORE node option was removed.\n\nFixed the HA logic for the number of processes to use for krb5kdc.\n\nAdded a salt hardfail rule when installing FreeIPA.\n\nAdded an optional environment property called instanceCountByGroup to\nspecify the number of HA instances of FreeIPA. This property was also\nadded to the database table.\n\nRename master group to master0 so that it will accommodate upgrades to\nmulti AZ in the future which will be named master0, master1, etc.\n\nAdded validation checks to allow for up to 4 instances.\n\nTested manually with a local deployment of cloudbreak by deploying an\nHA cluster in Azure and AWS.", "committedDate": "2020-02-26T03:15:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAzNzYyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7362#discussion_r385037621", "bodyText": "put this part into an else please", "author": "lacikaaa", "createdAt": "2020-02-27T10:26:46Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/v1/FreeIpaConverter.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.sequenceiq.environment.environment.v1;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.environment.api.v1.environment.model.response.FreeIpaResponse;\n+import com.sequenceiq.environment.environment.dto.FreeIpaCreationDto;\n+\n+@Component\n+public class FreeIpaConverter {\n+\n+    public FreeIpaResponse convert(FreeIpaCreationDto freeIpaCreation) {\n+        if (freeIpaCreation == null) {\n+            return null;\n+        }\n+        FreeIpaResponse response = new FreeIpaResponse();\n+        response.setInstanceCountByGroup(freeIpaCreation.getInstanceCountByGroup());\n+        return response;", "originalCommit": "1e9c01b4657c09854eb02d0bb2ccdb193dc6c5b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a70008c57931db3d0403e6a0349c8ecd5283e4a", "url": "https://github.com/hortonworks/cloudbreak/commit/3a70008c57931db3d0403e6a0349c8ecd5283e4a", "message": "CB-1141 & CB-5159: Add high availability options to FreeIPA\n\nSimplified the AWS and Azure FreeIPA cloud formation templates. Some\nproperties were made optional in the template builder so that unused\nFreeIPA properties could be removed. All FreeIPA nodes are gateway\nnodes, so the FreeIPA CORE node option was removed.\n\nFixed the HA logic for the number of processes to use for krb5kdc.\n\nAdded a salt hardfail rule when installing FreeIPA.\n\nAdded an optional environment property called instanceCountByGroup to\nspecify the number of HA instances of FreeIPA. This property was also\nadded to the database table.\n\nRename master group to master0 so that it will accommodate upgrades to\nmulti AZ in the future which will be named master0, master1, etc.\n\nAdded validation checks to allow for up to 4 instances.\n\nTested manually with a local deployment of cloudbreak by deploying an\nHA cluster in Azure and AWS.", "committedDate": "2020-02-27T22:52:44Z", "type": "commit"}, {"oid": "3a70008c57931db3d0403e6a0349c8ecd5283e4a", "url": "https://github.com/hortonworks/cloudbreak/commit/3a70008c57931db3d0403e6a0349c8ecd5283e4a", "message": "CB-1141 & CB-5159: Add high availability options to FreeIPA\n\nSimplified the AWS and Azure FreeIPA cloud formation templates. Some\nproperties were made optional in the template builder so that unused\nFreeIPA properties could be removed. All FreeIPA nodes are gateway\nnodes, so the FreeIPA CORE node option was removed.\n\nFixed the HA logic for the number of processes to use for krb5kdc.\n\nAdded a salt hardfail rule when installing FreeIPA.\n\nAdded an optional environment property called instanceCountByGroup to\nspecify the number of HA instances of FreeIPA. This property was also\nadded to the database table.\n\nRename master group to master0 so that it will accommodate upgrades to\nmulti AZ in the future which will be named master0, master1, etc.\n\nAdded validation checks to allow for up to 4 instances.\n\nTested manually with a local deployment of cloudbreak by deploying an\nHA cluster in Azure and AWS.", "committedDate": "2020-02-27T22:52:44Z", "type": "forcePushed"}]}