{"pr_number": 7629, "pr_title": "CB-6203 only sync workload admin groups that are related to environment", "pr_createdAt": "2020-03-23T13:12:31Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7629", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0OTY2MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7629#discussion_r396549661", "bodyText": "this doesn't work. WAGs may be associated with resources that are not environments. We don't currently have a mapping of resources to environments, so we can't tell if a WAG is applicable to a given environment.\nIf we could use the WAG resource, then we could do the filtering on the wags list in getEnvToUmsUsersStateMap instead of in handleUser", "author": "handavid", "createdAt": "2020-03-23T15:43:44Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "diffHunk": "@@ -166,7 +165,13 @@ private void handleUser(UmsUsersState.Builder umsUsersStateBuilder, UsersState.B\n                     }\n                 });\n \n-                workloadAdministrationGroups.getWorkloadAdministrationGroupNameList().forEach(groupName -> {\n+                // Only add workload admin groups that belong to this environment\n+                workloadAdminGroups.stream()\n+                        .filter(wag -> wag.getResource().equalsIgnoreCase(environmentAccessRights.getEnvironmentCrn()))", "originalCommit": "9dc554ade4392d7f916323c3e2e186cd6146ed05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NjgwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7629#discussion_r396566802", "bodyText": "So this means we cannot filter at all? I didn't know that there could be other wags, but in this case, it only works for those that CB creates, right?", "author": "keyki", "createdAt": "2020-03-23T16:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0OTY2MQ=="}], "type": "inlineReview"}, {"oid": "a2a0fb3d068d73c470ee6e224570cbf19bb44294", "url": "https://github.com/hortonworks/cloudbreak/commit/a2a0fb3d068d73c470ee6e224570cbf19bb44294", "message": "CB-6203 only sync workload admin groups that are related to environment", "committedDate": "2020-03-23T16:32:07Z", "type": "forcePushed"}, {"oid": "6de17b67f26c00af6cd3c999c4f1a3e198b86e09", "url": "https://github.com/hortonworks/cloudbreak/commit/6de17b67f26c00af6cd3c999c4f1a3e198b86e09", "message": "CB-6203 only sync workload admin groups that are related to environment", "committedDate": "2020-03-23T16:33:19Z", "type": "forcePushed"}, {"oid": "ed1fc6ebb698d5da053cc0a3e1c55af856fd1a52", "url": "https://github.com/hortonworks/cloudbreak/commit/ed1fc6ebb698d5da053cc0a3e1c55af856fd1a52", "message": "CB-6203 only sync workload admin groups that are related to environment", "committedDate": "2020-03-23T16:34:59Z", "type": "forcePushed"}, {"oid": "98da0887255b3e879de3fbab4882940b45f470df", "url": "https://github.com/hortonworks/cloudbreak/commit/98da0887255b3e879de3fbab4882940b45f470df", "message": "CB-6203 only sync workload admin groups that are related to environment", "committedDate": "2020-03-23T16:37:27Z", "type": "forcePushed"}, {"oid": "c12192c88cf7cf63cfa27d5a7e4799cba256d5d7", "url": "https://github.com/hortonworks/cloudbreak/commit/c12192c88cf7cf63cfa27d5a7e4799cba256d5d7", "message": "CB-6203 only sync workload admin groups that are related to environment", "committedDate": "2020-03-23T19:06:27Z", "type": "forcePushed"}, {"oid": "4e068c8aceba12287d32b964871995af01da2c75", "url": "https://github.com/hortonworks/cloudbreak/commit/4e068c8aceba12287d32b964871995af01da2c75", "message": "CB-6203 only sync workload admin groups that are related to environment", "committedDate": "2020-03-23T19:10:11Z", "type": "commit"}, {"oid": "4e068c8aceba12287d32b964871995af01da2c75", "url": "https://github.com/hortonworks/cloudbreak/commit/4e068c8aceba12287d32b964871995af01da2c75", "message": "CB-6203 only sync workload admin groups that are related to environment", "committedDate": "2020-03-23T19:10:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY5OTczNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7629#discussion_r396699737", "bodyText": "WAGs should be modeled as WorkloadAdministrationGroups rather than Groups. WAGs don't have crns, only names, accountids, rights, and resources. Moving to WorkloadAdministrationGroup would probably make the WAG-related mock code more sensible.", "author": "handavid", "createdAt": "2020-03-23T19:23:12Z", "path": "mock-caas/src/main/java/com/sequenceiq/caas/grpc/service/MockGroupManagementService.java", "diffHunk": "@@ -16,120 +16,151 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n-import com.cloudera.thunderhead.service.usermanagement.UserManagementProto;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.DeleteWorkloadAdministrationGroupNameRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.DeleteWorkloadAdministrationGroupNameResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetWorkloadAdministrationGroupNameRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetWorkloadAdministrationGroupNameResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.GetWorkloadAdministrationGroupNameResponse.Builder;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.Group;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ListGroupsRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.ListGroupsResponse;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.SetWorkloadAdministrationGroupNameRequest;\n+import com.cloudera.thunderhead.service.usermanagement.UserManagementProto.SetWorkloadAdministrationGroupNameResponse;\n import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn.ResourceType;\n import com.sequenceiq.cloudbreak.auth.altus.UmsRight;\n \n import io.grpc.stub.StreamObserver;\n \n @Service\n class MockGroupManagementService {\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(MockGroupManagementService.class);\n \n     private static final String CM_ADMIN_RIGHT = \"environments/adminClouderaManager\";\n \n+    private static final int NUM_USER_GROUPS = 5;\n+\n     @Inject\n     private MockCrnService mockCrnService;\n \n-    private final Map<String, Map<String, UserManagementProto.Group>> accountGroups = new ConcurrentHashMap<>();\n+    private final Map<String, Map<String, Group>> accountWorkloadGroups = new ConcurrentHashMap<>();", "originalCommit": "4e068c8aceba12287d32b964871995af01da2c75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}