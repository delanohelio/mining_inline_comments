{"pr_number": 8541, "pr_title": "On-demand log collection for FreeIpa", "pr_createdAt": "2020-07-13T12:15:04Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8541", "timeline": [{"oid": "6be8983e892811a890a79a21a09a5888b2f0a436", "url": "https://github.com/hortonworks/cloudbreak/commit/6be8983e892811a890a79a21a09a5888b2f0a436", "message": "CB-7484. Create diagnostics collection flow (FreeIPA)\n\ndetails:\n- creating a new flow (+ API) for freeipa log collection\n- the new api has 2 endpoint: POST that starts the diagnostics flow, GET which shows files that will be collected\n- flow has 4 phases: init, collect, upload and cleanup\n- each phase executes a salt state in filecollector module like: filecollector.init or filecollector.collect etc.\n- extend salt java module to add pillar parameters for the commands and run executions in concurrent mode (see ParametrizedStateRunner and CuncurrentParameterizedStateRunner)\n- refactor hostOrchestrator a bit by extending telemetry related operations and create stack service for commonly used operations\n- add / fix some unit tests", "committedDate": "2020-07-13T15:06:39Z", "type": "forcePushed"}, {"oid": "5de69cbdd30720559e56d2437c3f8b185610d9bc", "url": "https://github.com/hortonworks/cloudbreak/commit/5de69cbdd30720559e56d2437c3f8b185610d9bc", "message": "CB-7484. Create diagnostics collection flow (FreeIPA)\n\ndetails:\n- creating a new flow (+ API) for freeipa log collection\n- the new api has 2 endpoint: POST that starts the diagnostics flow, GET which shows files that will be collected\n- flow has 4 phases: init, collect, upload and cleanup\n- each phase executes a salt state in filecollector module like: filecollector.init or filecollector.collect etc.\n- extend salt java module to add pillar parameters for the commands and run executions in concurrent mode (see ParametrizedStateRunner and CuncurrentParameterizedStateRunner)\n- refactor hostOrchestrator a bit by extending telemetry related operations and create stack service for commonly used operations\n- add / fix some unit tests", "committedDate": "2020-07-14T09:21:01Z", "type": "forcePushed"}, {"oid": "6ed49dd5fda8a53ceeb5ed2dfafb307a05a1a4c5", "url": "https://github.com/hortonworks/cloudbreak/commit/6ed49dd5fda8a53ceeb5ed2dfafb307a05a1a4c5", "message": "CB-7484. Create diagnostics collection flow (FreeIPA)\n\ndetails:\n- creating a new flow (+ API) for freeipa log collection\n- the new api has 2 endpoint: POST that starts the diagnostics flow, GET which shows files that will be collected\n- flow has 4 phases: init, collect, upload and cleanup\n- each phase executes a salt state in filecollector module like: filecollector.init or filecollector.collect etc.\n- extend salt java module to add pillar parameters for the commands and run executions in concurrent mode (see ParametrizedStateRunner and CuncurrentParameterizedStateRunner)\n- refactor hostOrchestrator a bit by extending telemetry related operations and create stack service for commonly used operations\n- add / fix some unit tests", "committedDate": "2020-07-14T12:29:23Z", "type": "forcePushed"}, {"oid": "ea7c16df4859e8626d096b2bc40c778a8a11780c", "url": "https://github.com/hortonworks/cloudbreak/commit/ea7c16df4859e8626d096b2bc40c778a8a11780c", "message": "CB-7484. Create diagnostics collection flow (FreeIPA)\n\ndetails:\n- creating a new flow (+ API) for freeipa log collection\n- the new api has 2 endpoint: POST that starts the diagnostics flow, GET which shows files that will be collected\n- flow has 4 phases: init, collect, upload and cleanup\n- each phase executes a salt state in filecollector module like: filecollector.init or filecollector.collect etc.\n- extend salt java module to add pillar parameters for the commands and run executions in concurrent mode (see ParametrizedStateRunner and CuncurrentParameterizedStateRunner)\n- refactor hostOrchestrator a bit by extending telemetry related operations and create stack service for commonly used operations\n- add / fix some unit tests", "committedDate": "2020-07-15T08:10:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxODg2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455018866", "bodyText": "We need new images with these packages otherwise the no-internet test will fail and it will be a blocker for promotion.", "author": "keyki", "createdAt": "2020-07-15T12:38:53Z", "path": "orchestrator-salt/src/main/resources/salt-common/salt/filecollector/init.sls", "diffHunk": "@@ -0,0 +1,88 @@\n+{%- from 'telemetry/settings.sls' import telemetry with context %}\n+{%- from 'filecollector/settings.sls' import filecollector with context %}\n+{%- from 'fluent/settings.sls' import fluent with context %}\n+\n+install_fluent_logger:\n+  cmd.run:\n+    - name: pip install fluent-logger>=0.9.6 --ignore-installed", "originalCommit": "ea7c16df4859e8626d096b2bc40c778a8a11780c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMDU1Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455020556", "bodyText": "these are not in highstate (you need to trigger this tasks by API) + already inside the images (see: hortonworks/cloudbreak-images@67bec33), will be removed later", "author": "oleewere", "createdAt": "2020-07-15T12:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAxODg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTM2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455535367", "bodyText": "We will need to deal with encryption + the region must be a parameter otherwise it won't work with S3 VPC endpoint.\nBoth of them are handled in the freeipa_backup script.", "author": "keyki", "createdAt": "2020-07-16T06:21:51Z", "path": "orchestrator-salt/src/main/resources/salt-common/salt/filecollector/template/cloud_storage_upload.sh.j2", "diffHunk": "@@ -0,0 +1,56 @@\n+#!/bin/sh\n+{%- from 'filecollector/settings.sls' import filecollector with context %}\n+{%- from 'telemetry/settings.sls' import telemetry with context %}\n+\n+function log() {\n+  echo \"$1\"\n+}\n+\n+function error_exit() {\n+  log \"ERROR $1\"\n+  exit 1\n+}\n+\n+function upload_file() {\n+   local platform=\"$2\"\n+   if [[ \"$platform\" == \"AWS\" ]]; then\n+      upload_to_s3 \"$1\"\n+   elif [[ \"$platform\" == \"AZURE\" ]]; then\n+      upload_to_azure_storage \"$1\"\n+   else\n+     log \"Upload file to cloud storage is not supported from platform '${platform}'\"\n+   fi\n+}\n+\n+function upload_to_s3() {\n+  local filename=$1\n+  s3_filename=\"$(basename -- $filename)\"\n+  s3_file_path=\"{{ filecollector.s3BaseUrl }}/${s3_filename}\"\n+  # --sse AES256\n+  /usr/bin/aws s3 cp --no-progress \"${filename}\" \"${s3_file_path}\"", "originalCommit": "ea7c16df4859e8626d096b2bc40c778a8a11780c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxNTY0Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455615642", "bodyText": "i have mentioned in the PR, encryption is not yet handled. will be done later, no UI or tests around that so that can be done later. btw, I will work on a binary lib that contains these commands with enhanced options, so that won't be final anyway (as we will have a lot of different scripts, it's better to put/use them together)", "author": "oleewere", "createdAt": "2020-07-16T08:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODEyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455668120", "bodyText": "What about VPC endpoints? Do we have a jira for that as well? I'm fine if we address that later, but let's have a jira so we don't forget.", "author": "keyki", "createdAt": "2020-07-16T09:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNjE0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455536145", "bodyText": "Can this port change?", "author": "keyki", "createdAt": "2020-07-16T06:23:55Z", "path": "orchestrator-salt/src/main/resources/salt-common/salt/fluent/settings.sls", "diffHunk": "@@ -140,6 +140,8 @@\n   {% set proxy_full_url = None %}\n {% endif %}\n \n+{% set forward_port = 24224 %}", "originalCommit": "ea7c16df4859e8626d096b2bc40c778a8a11780c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxMTMyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455611321", "bodyText": "that's typically fluentd port, only needs to be changed if some reason someone setup a fluentd with recipes and using that port", "author": "oleewere", "createdAt": "2020-07-16T08:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNjE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNjgxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455536811", "bodyText": "There are lots of files being managed and have 740 and 750 mode. Do any of these files contain sensitive data or should we use 700 and 600 regardless? Why would a regular user need to read these files?", "author": "keyki", "createdAt": "2020-07-16T06:25:29Z", "path": "orchestrator-salt/src/main/resources/salt-common/salt/filecollector/init.sls", "diffHunk": "@@ -0,0 +1,88 @@\n+{%- from 'telemetry/settings.sls' import telemetry with context %}\n+{%- from 'filecollector/settings.sls' import filecollector with context %}\n+{%- from 'fluent/settings.sls' import fluent with context %}\n+\n+install_fluent_logger:\n+  cmd.run:\n+    - name: pip install fluent-logger>=0.9.6 --ignore-installed\n+    - unless: pip list --no-index | grep -E 'fluent-logger'\n+\n+install_yaml:\n+  cmd.run:\n+    - name: pip install PyYAML --ignore-installed\n+    - unless: pip list --no-index | grep -E 'PyYAML'\n+\n+install_pid:\n+  cmd.run:\n+    - name: pip install pid --ignore-installed\n+    - unless: pip list --no-index | grep -E 'pid'\n+\n+/opt/filecollector:\n+  file.directory:\n+    - name: /opt/filecollector\n+    - user: \"root\"\n+    - group: \"root\"\n+    - mode: 740", "originalCommit": "ea7c16df4859e8626d096b2bc40c778a8a11780c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyMDMyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455620323", "bodyText": "yes it should be 640, will fix that in a fix commit, but I will wait until Lajos's review, in oder to fix his opened issues together with this", "author": "oleewere", "createdAt": "2020-07-16T08:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNjgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5NTE5Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455595192", "bodyText": "For this we will need a new image or it will break the no-internet test again. This will run on a regular highstate.", "author": "keyki", "createdAt": "2020-07-16T08:04:41Z", "path": "orchestrator-salt/src/main/resources/salt-common/salt/fluent/settings.sls", "diffHunk": "@@ -84,7 +84,7 @@\n {% set cloudera_public_gem_repo = 'https://repository.cloudera.com/cloudera/api/gems/cloudera-gems/' %}\n {% set cloudera_azure_plugin_version = '1.0.1' %}\n {% set cloudera_azure_gen2_plugin_version = '0.3.1' %}\n-{% set cloudera_databus_plugin_version = '1.0.4' %}\n+{% set cloudera_databus_plugin_version = '1.0.5' %}", "originalCommit": "ea7c16df4859e8626d096b2bc40c778a8a11780c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxMzQ4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8541#discussion_r455613488", "bodyText": "yes we will need new images for 2.26", "author": "oleewere", "createdAt": "2020-07-16T08:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU5NTE5Mg=="}], "type": "inlineReview"}, {"oid": "7bb358e140c8e0261f5f3da1a36be3598189558e", "url": "https://github.com/hortonworks/cloudbreak/commit/7bb358e140c8e0261f5f3da1a36be3598189558e", "message": "CB-7397. Implement filecollector on CB side (freeipa/datalake/datahub) for on demand diagnostic collection\n\ndetails:\n- Creating a new \"filecollector\" module in salt definitions (salt-common)\n- Creating a new \"telemetry\" module in salt definitions which can be used to store common configurations between different telemtry components (fluent,monitoring,filecollector)\n(as salt upgrade has not done yet properly for freeipa, we still uses many duplicated configs in telemetry and fluent pillars)\n- Basic usage of filecollector: there is a filecollector.py and a specific yaml configuration that is deployed/configured by salt\n- filecollection has 4 different outputs (only first 3 is implemented): local (collection only, you need to ssh into the node for that), customer cloud storage and ENG Kibana (by databus)\n- for the common configurations vm_logs.json files are creadted, in the fututre that will be used as a common source for both fluentd (monitored files) and filecollector (files that are needed to be collected)\n- also added for some default converters and services for VM logs or creating data as a map for the diagnostics flow", "committedDate": "2020-07-17T11:39:57Z", "type": "commit"}, {"oid": "fbec8f8b9cd327b29e7c0e416c93c01ae419218e", "url": "https://github.com/hortonworks/cloudbreak/commit/fbec8f8b9cd327b29e7c0e416c93c01ae419218e", "message": "CB-7484. Create diagnostics collection flow (FreeIPA)\n\ndetails:\n- creating a new flow (+ API) for freeipa log collection\n- the new api has 2 endpoint: POST that starts the diagnostics flow, GET which shows files that will be collected\n- flow has 4 phases: init, collect, upload and cleanup\n- each phase executes a salt state in filecollector module like: filecollector.init or filecollector.collect etc.\n- extend salt java module to add pillar parameters for the commands and run executions in concurrent mode (see ParametrizedStateRunner and CuncurrentParameterizedStateRunner)\n- refactor hostOrchestrator a bit by extending telemetry related operations and create stack service for commonly used operations\n- add / fix some unit tests", "committedDate": "2020-07-17T11:45:55Z", "type": "commit"}, {"oid": "0cea53f6c71072b20206438df3a61373a37ba151", "url": "https://github.com/hortonworks/cloudbreak/commit/0cea53f6c71072b20206438df3a61373a37ba151", "message": "CB-7397. Fix folder permissions for filecollector", "committedDate": "2020-07-17T11:45:56Z", "type": "commit"}, {"oid": "0cea53f6c71072b20206438df3a61373a37ba151", "url": "https://github.com/hortonworks/cloudbreak/commit/0cea53f6c71072b20206438df3a61373a37ba151", "message": "CB-7397. Fix folder permissions for filecollector", "committedDate": "2020-07-17T11:45:56Z", "type": "forcePushed"}]}