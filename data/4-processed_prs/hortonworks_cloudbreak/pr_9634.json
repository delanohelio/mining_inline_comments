{"pr_number": 9634, "pr_title": "CB-9972 If freeipa is in unreachable state, badgateway http status code will return instead of internal server error in the freeipa endpoint responses", "pr_createdAt": "2020-12-11T10:00:56Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9634", "timeline": [{"oid": "e6430a2f4882963784b9ac7f3dc9383c85741a5f", "url": "https://github.com/hortonworks/cloudbreak/commit/e6430a2f4882963784b9ac7f3dc9383c85741a5f", "message": "CB-9972 We don't map FreeipaClientException\n\nWhenever the FreeIPA instance is not reachable and we know it's not reachable because the status indicates it, we're going to return 502 Bad Gateway.\n\nAccording to the official explanation of the status code:\nThe server was acting as a gateway or proxy and received an invalid response from the upstream server.\n\nIf we don't know that the IPA server is not reachable, because we think it's available, that will remain an Internal Server Error.", "committedDate": "2020-12-11T13:55:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5NzgyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r540997821", "bodyText": "Thanks for catching a bunch of these as the old way might be stuck in the flow if a different exception was thrown.", "author": "jamisonbennett", "createdAt": "2020-12-11T14:45:24Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/cleanup/handler/DnsRemoveHandler.java", "diffHunk": "@@ -53,7 +52,7 @@ public void accept(Event<RemoveDnsRequest> event) {\n             eventBus.notify(response.getDnsCleanupFailed().isEmpty()\n                             ? EventSelectorUtil.selector(RemoveDnsResponse.class) : EventSelectorUtil.failureSelector(RemoveDnsResponse.class),\n                     new Event<>(event.getHeaders(), response));\n-        } catch (FreeIpaClientException e) {\n+        } catch (Exception e) {", "originalCommit": "e6430a2f4882963784b9ac7f3dc9383c85741a5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjI5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r541002299", "bodyText": "I feel like we might be missing cases where a FreeIpaClientExcpetion/RetryableFreeIpaClientException is thrown (rather than FreeIpaClientExceptionWrapper) since there isn't a mapper for those types. But I don't know how that will interact with the following retry annotation:\n    @Retryable(value = RetryableFreeIpaClientException.class,\n            maxAttemptsExpression = RetryableFreeIpaClientException.MAX_RETRIES_EXPRESSION,\n            backoff = @Backoff(delayExpression = RetryableFreeIpaClientException.DELAY_EXPRESSION,\n                    multiplierExpression = RetryableFreeIpaClientException.MULTIPLIER_EXPRESSION))", "author": "jamisonbennett", "createdAt": "2020-12-11T14:52:12Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/mapper/FreeipaClientExceptionWrapperMapper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.freeipa.controller.mapper;\n+\n+import javax.ws.rs.core.Response.Status;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.ExceptionResponse;\n+import com.sequenceiq.freeipa.client.FreeIpaClientExceptionWrapper;\n+\n+@Component\n+public class FreeipaClientExceptionWrapperMapper extends BaseExceptionMapper<FreeIpaClientExceptionWrapper> {", "originalCommit": "e6430a2f4882963784b9ac7f3dc9383c85741a5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyMzEwNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r542423105", "bodyText": "we have FreeipaClientExceptionMapper which handles both FreeIpaClientExcpetion/RetryableFreeIpaClientException", "author": "lacikaaa", "createdAt": "2020-12-14T14:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3Mzk1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r541073954", "bodyText": "I am pretty sure this doesn't interfere with the retries, so it should be good. i.e.\n\n@Retryable(value = RetryableFreeIpaClientException.class,\n            maxAttemptsExpression = RetryableFreeIpaClientException.MAX_RETRIES_EXPRESSION,\n            backoff = @Backoff(delayExpression = RetryableFreeIpaClientException.DELAY_EXPRESSION,\n                    multiplierExpression = RetryableFreeIpaClientException.MULTIPLIER_EXPRESSION))\n\nshould work since this isn't one of the cases where FreeIpaClientExceptions can be converted/wrapped with RetryableFreeIpaClientException.\n\nDid you consider line 130? I think this might also need to have to switch to the InvalidFreeIpaStateException.\n\n                return client.orElseThrow(() -> createFreeIpaUnableToBuildClient(new FreeIpaHostNotAvailableException(\"No FreeIPA client was available\")));", "author": "jamisonbennett", "createdAt": "2020-12-11T16:34:35Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -228,10 +229,10 @@ private FreeIpaClientBuilder getFreeIpaClientBuilderForDirectMode(Stack stack, I\n         return new FreeIpaClientBuilder(ADMIN_USER, freeIpa.getAdminPassword(), httpClientConfig, gatewayPort, instanceMetaData.getDiscoveryFQDN(), tracer);\n     }\n \n-    private FreeIpaClientException createFreeIpaStateIsInvalidException(Status stackStatus) {\n+    private InvalidFreeIpaStateException createFreeIpaStateIsInvalidException(Status stackStatus) {\n         String message = String.format(\"Couldn't build FreeIPA client. Because FreeIPA is in invalid state: '%s'\", stackStatus);\n         LOGGER.warn(message);\n-        return new FreeIpaClientException(message, new FreeIpaHostNotAvailableException(message));\n+        return new InvalidFreeIpaStateException(message, new FreeIpaHostNotAvailableException(message));", "originalCommit": "e6430a2f4882963784b9ac7f3dc9383c85741a5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzNTcxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9634#discussion_r542435719", "bodyText": "for now we would like to handle those cases separately where the status of the FreeIPA is already known to be wrong. I don't think I have seen this issue yet. Still, I removed the callt ot createFreeIpaUnableToBuildClient as there is a catch reight after which already calls that", "author": "lacikaaa", "createdAt": "2020-12-14T14:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3Mzk1NA=="}], "type": "inlineReview"}, {"oid": "9a2eb331cc5882ee7689036b312aea6cb7a1855d", "url": "https://github.com/hortonworks/cloudbreak/commit/9a2eb331cc5882ee7689036b312aea6cb7a1855d", "message": "CB-9972 We don't map FreeipaClientException\n\nWhenever the FreeIPA instance is not reachable and we know it's not reachable because the status indicates it, we're going to return 502 Bad Gateway.\n\nAccording to the official explanation of the status code:\nThe server was acting as a gateway or proxy and received an invalid response from the upstream server.\n\nIf we don't know that the IPA server is not reachable, because we think it's available, that will remain an Internal Server Error.", "committedDate": "2020-12-14T14:37:58Z", "type": "commit"}, {"oid": "9a2eb331cc5882ee7689036b312aea6cb7a1855d", "url": "https://github.com/hortonworks/cloudbreak/commit/9a2eb331cc5882ee7689036b312aea6cb7a1855d", "message": "CB-9972 We don't map FreeipaClientException\n\nWhenever the FreeIPA instance is not reachable and we know it's not reachable because the status indicates it, we're going to return 502 Bad Gateway.\n\nAccording to the official explanation of the status code:\nThe server was acting as a gateway or proxy and received an invalid response from the upstream server.\n\nIf we don't know that the IPA server is not reachable, because we think it's available, that will remain an Internal Server Error.", "committedDate": "2020-12-14T14:37:58Z", "type": "forcePushed"}]}