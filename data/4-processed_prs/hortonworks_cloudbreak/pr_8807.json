{"pr_number": 8807, "pr_title": "CDPCP-2673. Fix role refresh on cloud identity sync", "pr_createdAt": "2020-08-13T12:33:40Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8807", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNTE2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469935168", "bodyText": "could you give this variable a meaningful name?", "author": "lacikaaa", "createdAt": "2020-08-13T13:04:36Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();", "originalCommit": "d6754dc074a6e51c86c2414fb24adb41a2edd393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjIyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470276223", "bodyText": "Renamed.", "author": "gitmfox", "createdAt": "2020-08-13T22:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNTE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNjk0Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469936942", "bodyText": "I don't prefer returns in the middle of a method. Could you add an else branch for the rest f the code, so it's obvious there is 2 exit point?", "author": "lacikaaa", "createdAt": "2020-08-13T13:07:25Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();", "originalCommit": "d6754dc074a6e51c86c2414fb24adb41a2edd393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNzQ1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469937457", "bodyText": "shall we log here it's empty?", "author": "lacikaaa", "createdAt": "2020-08-13T13:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNjk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjQ2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470276468", "bodyText": "Fixed first issue, added log statement as suggested.", "author": "gitmfox", "createdAt": "2020-08-13T22:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNjk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzODY4OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469938688", "bodyText": "what happens if there is no = sign? I think it would throw an exception when you try to assign value to val. Shouldn't we handle this somehow?", "author": "lacikaaa", "createdAt": "2020-08-13T13:10:10Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();\n+        String[] mappings = userMappingStr.split(\";\");\n+        Arrays.stream(mappings).forEach(mapping -> {\n+            String[] entry = mapping.split(\"=\");", "originalCommit": "d6754dc074a6e51c86c2414fb24adb41a2edd393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NzEwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470277103", "bodyText": "Right. Now handles the lack of an equals sign by logging a warning and skipping the entry.", "author": "gitmfox", "createdAt": "2020-08-13T22:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzODY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NTYyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r469945620", "bodyText": "what if none found? are we sure there is at least one?", "author": "lacikaaa", "createdAt": "2020-08-13T13:20:54Z", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/ClouderaManagerRangerUtil.java", "diffHunk": "@@ -118,17 +109,61 @@ public boolean isCloudIdMappingSupported(String stackCrn) throws ApiException {\n         return isCloudIdMappingSupported(rolesResourceApi, clusterName, rangerUserSyncRoleName);\n     }\n \n-    public Optional<ApiCommand> setAzureCloudIdentityMapping(String stackCrn, Map<String, String> azureUserMapping) throws ApiException {\n+    private Map<String, String> userMappingStrToMap(String userMappingStr) {\n+        userMappingStr = userMappingStr.trim();\n+        if (userMappingStr.isEmpty()) {\n+            return Collections.emptyMap();\n+        }\n+        Map<String, String> ret = new HashMap<>();\n+        String[] mappings = userMappingStr.split(\";\");\n+        Arrays.stream(mappings).forEach(mapping -> {\n+            String[] entry = mapping.split(\"=\");\n+            String key = entry[0];\n+            String val = entry[1];\n+            ret.put(key, val);\n+        });\n+        return ret;\n+    }\n+\n+    private Map<String, String> getExistingAzureUserMapping(RolesResourceApi rolesResourceApi, String clusterName, String rangerUserSyncRoleName)\n+            throws ApiException {\n+        ApiConfigList roleConfigList = rolesResourceApi.readRoleConfig(clusterName, rangerUserSyncRoleName, RANGER_SERVICE_NAME, \"summary\");\n+        ApiConfig azureUserMappingConfig = roleConfigList.getItems().stream()\n+                .filter(apiConfig -> apiConfig.getName().equals(AZURE_USER_MAPPING))\n+                .findFirst()\n+                .get();", "originalCommit": "d6754dc074a6e51c86c2414fb24adb41a2edd393", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3ODE3NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8807#discussion_r470278174", "bodyText": "I am not sure if we can be sure that the config is always present--probably not, but in any case we should protect against this possibility. Now checks that the optional value is present before getting it. If it is absent, an empty map is returned.", "author": "gitmfox", "createdAt": "2020-08-13T22:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0NTYyMA=="}], "type": "inlineReview"}, {"oid": "8fed8c0112ed8edef6bd4f7f9ae970642d8ea915", "url": "https://github.com/hortonworks/cloudbreak/commit/8fed8c0112ed8edef6bd4f7f9ae970642d8ea915", "message": "CDPCP-2673. Fix role refresh on cloud identity sync\n\nThe previous behavior for syncing azure oids into CM was to only\ntrigger role refresh if CM reported the configs to be stale. This\ndoes not always work as expected because the staleness status that\nCM reports is eventually consistent.\n\nTo fix this, instead of relying on staleness check we only set\nthe configs if they are different than the existing configs. Under\nrare circumstances we still need to fallback on checking staleness\nstatus (as explained in the code comment).", "committedDate": "2020-08-14T15:13:39Z", "type": "forcePushed"}, {"oid": "ccc8a1ecb8dd859a7b5ed8641b4782fb99056820", "url": "https://github.com/hortonworks/cloudbreak/commit/ccc8a1ecb8dd859a7b5ed8641b4782fb99056820", "message": "CDPCP-2673. Fix role refresh on cloud identity sync\n\nThe previous behavior for syncing azure oids into CM was to only\ntrigger role refresh if CM reported the configs to be stale. This\ndoes not always work as expected because the staleness status that\nCM reports is eventually consistent.\n\nTo fix this, instead of relying on staleness check we only set\nthe configs if they are different than the existing configs. Under\nrare circumstances we still need to fallback on checking staleness\nstatus (as explained in the code comment).", "committedDate": "2020-08-14T20:08:24Z", "type": "forcePushed"}, {"oid": "2a6afed21b88cbe54a798b5ed20eb28a09048809", "url": "https://github.com/hortonworks/cloudbreak/commit/2a6afed21b88cbe54a798b5ed20eb28a09048809", "message": "CDPCP-2673. Fix role refresh on cloud identity sync\n\nThe previous behavior for syncing azure oids into CM was to only\ntrigger role refresh if CM reported the configs to be stale. This\ndoes not always work as expected because the staleness status that\nCM reports is eventually consistent.\n\nTo fix this, instead of relying on staleness check we only set\nthe configs if they are different than the existing configs. Under\nrare circumstances we still need to fallback on checking staleness\nstatus (as explained in the code comment).", "committedDate": "2020-08-16T08:29:53Z", "type": "commit"}, {"oid": "2a6afed21b88cbe54a798b5ed20eb28a09048809", "url": "https://github.com/hortonworks/cloudbreak/commit/2a6afed21b88cbe54a798b5ed20eb28a09048809", "message": "CDPCP-2673. Fix role refresh on cloud identity sync\n\nThe previous behavior for syncing azure oids into CM was to only\ntrigger role refresh if CM reported the configs to be stale. This\ndoes not always work as expected because the staleness status that\nCM reports is eventually consistent.\n\nTo fix this, instead of relying on staleness check we only set\nthe configs if they are different than the existing configs. Under\nrare circumstances we still need to fallback on checking staleness\nstatus (as explained in the code comment).", "committedDate": "2020-08-16T08:29:53Z", "type": "forcePushed"}]}