{"pr_number": 9374, "pr_title": "CB-8962: Added a Cloudwatch alarm to each AWS instance created.", "pr_createdAt": "2020-11-04T07:41:04Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9374", "timeline": [{"oid": "466740ff70a2c422fbd79744dc626098d7e3e011", "url": "https://github.com/hortonworks/cloudbreak/commit/466740ff70a2c422fbd79744dc626098d7e3e011", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-04T08:06:54Z", "type": "forcePushed"}, {"oid": "d2e68dc7b992344e243d58eb487e8b16e099366e", "url": "https://github.com/hortonworks/cloudbreak/commit/d2e68dc7b992344e243d58eb487e8b16e099366e", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-04T08:41:06Z", "type": "forcePushed"}, {"oid": "7627dd7f3eb04a8c1cb36647837e5339d4739f3b", "url": "https://github.com/hortonworks/cloudbreak/commit/7627dd7f3eb04a8c1cb36647837e5339d4739f3b", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-04T09:06:33Z", "type": "forcePushed"}, {"oid": "fc540f4ea31f2568d200a7968d943485c068e387", "url": "https://github.com/hortonworks/cloudbreak/commit/fc540f4ea31f2568d200a7968d943485c068e387", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-09T19:59:21Z", "type": "forcePushed"}, {"oid": "523aef9f89af91e88374533f4cb0264e96d172d5", "url": "https://github.com/hortonworks/cloudbreak/commit/523aef9f89af91e88374533f4cb0264e96d172d5", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-09T23:05:04Z", "type": "forcePushed"}, {"oid": "fe8fc664aec16beca6ac63a75c537396a9c0ab45", "url": "https://github.com/hortonworks/cloudbreak/commit/fe8fc664aec16beca6ac63a75c537396a9c0ab45", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-10T21:07:07Z", "type": "forcePushed"}, {"oid": "689f115238921c318e3458e89a1e8027a5f3bb79", "url": "https://github.com/hortonworks/cloudbreak/commit/689f115238921c318e3458e89a1e8027a5f3bb79", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-10T23:08:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4NDQ4OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r525184489", "bodyText": "please remove these comments, they don't have any extra information", "author": "lacikaaa", "createdAt": "2020-11-17T14:12:31Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,48 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n     private String alarmSuffix;\n \n-    @Value(\"${freeipa.aws.cloudwatch.period:60}\")\n+    @Value(\"${aws.cloudwatch.period:60}\")\n     private int cloudwatchPeriod;\n \n-    @Value(\"${freeipa.aws.cloudwatch.evaluationPeriods:2}\")\n+    @Value(\"${aws.cloudwatch.evaluationPeriods:2}\")\n     private int cloudwatchEvaluationPeriods;\n \n-    @Value(\"${freeipa.aws.cloudwatch.threshold:1.0}\")\n+    @Value(\"${aws.cloudwatch.threshold:1.0}\")\n     private double cloudwatchThreshhold;\n \n-    @Value(\"${freeipa.aws.cloudwatch.max-batchsize:100}\")\n+    @Value(\"${aws.cloudwatch.max-batchsize:100}\")\n     private int maxBatchsize;\n \n     @Inject\n     private AwsClient awsClient;\n \n-    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, CloudStack stack, String regionName, AwsCredentialView credentialView) {\n-        if (isCloudwatchEnabled(stack)) {\n-            instances.stream().forEach(instance -> {\n-                try {\n-                    PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n-                    metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n-                    metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n-                    metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n-                    metricAlarmRequest.setStatistic(\"Maximum\");\n-                    metricAlarmRequest.setNamespace(\"AWS/EC2\");\n-                    metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n-                    metricAlarmRequest.setPeriod(cloudwatchPeriod);\n-                    metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n-                    metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n-                    metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n-                    AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n-                    amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n-                    LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n-                } catch (AmazonCloudWatchException acwe) {\n-                    LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());\n-                }\n-            });\n-        }\n+    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, String regionName, AwsCredentialView credentialView) {\n+        // Grab the CloudWatch client.", "originalCommit": "689f115238921c318e3458e89a1e8027a5f3bb79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497", "url": "https://github.com/hortonworks/cloudbreak/commit/8bb657338cfc4b5e1904706583d7b31b4c518497", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-17T17:15:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MjI2OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526042268", "bodyText": "I guess we should log the error message somewhere here", "author": "doktoric", "createdAt": "2020-11-18T12:17:33Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,46 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n     private String alarmSuffix;\n \n-    @Value(\"${freeipa.aws.cloudwatch.period:60}\")\n+    @Value(\"${aws.cloudwatch.period:60}\")\n     private int cloudwatchPeriod;\n \n-    @Value(\"${freeipa.aws.cloudwatch.evaluationPeriods:2}\")\n+    @Value(\"${aws.cloudwatch.evaluationPeriods:2}\")\n     private int cloudwatchEvaluationPeriods;\n \n-    @Value(\"${freeipa.aws.cloudwatch.threshold:1.0}\")\n+    @Value(\"${aws.cloudwatch.threshold:1.0}\")\n     private double cloudwatchThreshhold;\n \n-    @Value(\"${freeipa.aws.cloudwatch.max-batchsize:100}\")\n+    @Value(\"${aws.cloudwatch.max-batchsize:100}\")\n     private int maxBatchsize;\n \n     @Inject\n     private AwsClient awsClient;\n \n-    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, CloudStack stack, String regionName, AwsCredentialView credentialView) {\n-        if (isCloudwatchEnabled(stack)) {\n-            instances.stream().forEach(instance -> {\n-                try {\n-                    PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n-                    metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n-                    metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n-                    metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n-                    metricAlarmRequest.setStatistic(\"Maximum\");\n-                    metricAlarmRequest.setNamespace(\"AWS/EC2\");\n-                    metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n-                    metricAlarmRequest.setPeriod(cloudwatchPeriod);\n-                    metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n-                    metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n-                    metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n-                    AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n-                    amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n-                    LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n-                } catch (AmazonCloudWatchException acwe) {\n-                    LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());\n-                }\n-            });\n-        }\n+    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, String regionName, AwsCredentialView credentialView) {\n+        AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n+\n+        instances.stream().forEach(instance -> {\n+            try {\n+                PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n+                metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n+                metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n+                metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n+                metricAlarmRequest.setStatistic(\"Maximum\");\n+                metricAlarmRequest.setNamespace(\"AWS/EC2\");\n+                metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n+                metricAlarmRequest.setPeriod(cloudwatchPeriod);\n+                metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n+                metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n+                metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n+                amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n+                LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n+            } catch (AmazonCloudWatchException acwe) {\n+                LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());", "originalCommit": "8bb657338cfc4b5e1904706583d7b31b4c518497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODc3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526478772", "bodyText": "What do you mean by this and your other similar comment?", "author": "sxxgrc", "createdAt": "2020-11-18T22:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MjI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxNjA5OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r527716099", "bodyText": "nvm I see it", "author": "doktoric", "createdAt": "2020-11-20T14:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MjI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MjQyMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526042423", "bodyText": "do we need any helm chart change because of the renamed property?", "author": "doktoric", "createdAt": "2020-11-18T12:17:53Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,46 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")", "originalCommit": "8bb657338cfc4b5e1904706583d7b31b4c518497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODY4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526478687", "bodyText": "Not really sure what the helm chart even is, hopefully someone else can answer this. These properties are not being injected from anywhere though as they are just being set in place so I'm not sure why anything fancy would need to be done with them.", "author": "sxxgrc", "createdAt": "2020-11-18T22:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MjQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzAxOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526043018", "bodyText": "I think instancemetadata also contains this information", "author": "doktoric", "createdAt": "2020-11-18T12:18:54Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -86,20 +83,18 @@ public void deleteCloudWatchAlarmsForSystemFailures(CloudStack stack, String reg\n     }\n \n     public void deleteCloudWatchAlarmsForSystemFailures(CloudStack stack, String regionName, AwsCredentialView credentialView, List<String> instanceIds) {\n-        if (isCloudwatchEnabled(stack)) {\n-            List<String> instanceIdsFromStack = stack.getGroups().stream()\n-                    .flatMap(group -> group.getInstances().stream())\n-                    .map(CloudInstance::getInstanceId)\n-                    .collect(Collectors.toList());\n-            List<String> instanceIdsNotInStack = instanceIds.stream()\n-                    .filter(instanceId -> !instanceIdsFromStack.contains(instanceId))\n-                    .collect(Collectors.toList());\n-            if (!instanceIdsNotInStack.isEmpty()) {\n-                LOGGER.warn(\"Instance IDs [{}] are not part of cloud stack {}, these instances may have already been deleted on the cloud provider side.\",\n-                        instanceIdsFromStack, stack);\n-            }\n-            deleteCloudWatchAlarmsForSystemFailures(regionName, credentialView, instanceIds);\n+        List<String> instanceIdsFromStack = stack.getGroups().stream()", "originalCommit": "8bb657338cfc4b5e1904706583d7b31b4c518497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3ODMxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526478316", "bodyText": "Are you proposing using that instead?", "author": "sxxgrc", "createdAt": "2020-11-18T22:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxNjI3OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r527716279", "bodyText": "yes.", "author": "doktoric", "createdAt": "2020-11-20T14:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDA1Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r527924052", "bodyText": "Okay sorry I am just now really looking into this, but I don't see an easy way to grab the instance metadata from the inputs we have as that doesn't seem to be exposed through the CloudStack object.\nAlso what benefit do you see from getting that information through there instead?\nIt appears to me that the original purpose for using the instances directly from the CloudStack was to be able to see which instances were still lively vs already deleted, and then only delete the alarms from the lively ones. Does using the metadata also enable this, and if so does it make this process better?", "author": "sxxgrc", "createdAt": "2020-11-20T19:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3Mjk0NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r529872944", "bodyText": "yeah I just checked this is not a trivial task", "author": "doktoric", "createdAt": "2020-11-24T20:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzQwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526043402", "bodyText": "I guess we should log the error somewhere here", "author": "doktoric", "createdAt": "2020-11-18T12:19:35Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -116,16 +111,17 @@ private void deleteCloudWatchAlarmsForSystemFailures(String regionName, AwsCrede\n \n     private Stream<List<String>> getExistingCloudWatchAlarms(String regionName, AwsCredentialView credentialView, List<String> alarmNames) {\n         Stream<List<String>> filteredAlarmNamesStream;\n+        AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n+\n         try {\n             DescribeAlarmsRequest request = new DescribeAlarmsRequest().withAlarmNames(alarmNames).withMaxRecords(maxBatchsize);\n-            AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n             List<String> filteredAlarmNames = amazonCloudWatchClient.describeAlarms(request).getMetricAlarms().stream()\n                     .map(MetricAlarm::getAlarmName)\n                     .collect(Collectors.toList());\n             filteredAlarmNamesStream = Stream.of(filteredAlarmNames);\n             LOGGER.debug(\"Checking cloudwatch alarms [{}] for existence and found [{}]\", alarmNames, filteredAlarmNames);\n         } catch (AmazonCloudWatchException acwe) {\n-            LOGGER.error(\"Unable to describe cloudwatch alarms falling back to delete all alarms indivdually [{}]: {}\", alarmNames, acwe.getLocalizedMessage());\n+            LOGGER.error(\"Unable to describe cloudwatch alarms falling back to delete all alarms individually [{}]: {}\", alarmNames, acwe.getLocalizedMessage());", "originalCommit": "8bb657338cfc4b5e1904706583d7b31b4c518497", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDA3NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526044074", "bodyText": "this is a mock bean here but there is no assertion or verification on this", "author": "doktoric", "createdAt": "2020-11-18T12:20:50Z", "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/component/AwsLaunchTest.java", "diffHunk": "@@ -156,6 +157,9 @@\n     @MockBean\n     private CustomAmazonWaiterProvider customAmazonWaiterProvider;\n \n+    @MockBean", "originalCommit": "8bb657338cfc4b5e1904706583d7b31b4c518497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ3OTAxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526479019", "bodyText": "Never worked with beans before I'll try to add a verification but an assertion is not needed. Really just need to object to be mocked in some form to avoid null pointer errors.", "author": "sxxgrc", "createdAt": "2020-11-18T22:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDA3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5NzIwMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526497202", "bodyText": "Changed things up to mock in a way that makes more sense with what's going on and the original error.", "author": "sxxgrc", "createdAt": "2020-11-18T23:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDc5NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526044794", "bodyText": "is it possible to create multiple cloudwatch alarms with one request to aws?", "author": "doktoric", "createdAt": "2020-11-18T12:22:07Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,46 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n     private String alarmSuffix;\n \n-    @Value(\"${freeipa.aws.cloudwatch.period:60}\")\n+    @Value(\"${aws.cloudwatch.period:60}\")\n     private int cloudwatchPeriod;\n \n-    @Value(\"${freeipa.aws.cloudwatch.evaluationPeriods:2}\")\n+    @Value(\"${aws.cloudwatch.evaluationPeriods:2}\")\n     private int cloudwatchEvaluationPeriods;\n \n-    @Value(\"${freeipa.aws.cloudwatch.threshold:1.0}\")\n+    @Value(\"${aws.cloudwatch.threshold:1.0}\")\n     private double cloudwatchThreshhold;\n \n-    @Value(\"${freeipa.aws.cloudwatch.max-batchsize:100}\")\n+    @Value(\"${aws.cloudwatch.max-batchsize:100}\")\n     private int maxBatchsize;\n \n     @Inject\n     private AwsClient awsClient;\n \n-    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, CloudStack stack, String regionName, AwsCredentialView credentialView) {\n-        if (isCloudwatchEnabled(stack)) {\n-            instances.stream().forEach(instance -> {\n-                try {\n-                    PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n-                    metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n-                    metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n-                    metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n-                    metricAlarmRequest.setStatistic(\"Maximum\");\n-                    metricAlarmRequest.setNamespace(\"AWS/EC2\");\n-                    metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n-                    metricAlarmRequest.setPeriod(cloudwatchPeriod);\n-                    metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n-                    metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n-                    metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n-                    AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n-                    amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n-                    LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n-                } catch (AmazonCloudWatchException acwe) {\n-                    LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());\n-                }\n-            });\n-        }\n+    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, String regionName, AwsCredentialView credentialView) {\n+        AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n+\n+        instances.stream().forEach(instance -> {\n+            try {\n+                PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n+                metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n+                metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n+                metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n+                metricAlarmRequest.setStatistic(\"Maximum\");\n+                metricAlarmRequest.setNamespace(\"AWS/EC2\");", "originalCommit": "8bb657338cfc4b5e1904706583d7b31b4c518497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2NTgxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526465819", "bodyText": "This does not seem to be exposed in the API unfortunately.", "author": "sxxgrc", "createdAt": "2020-11-18T22:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDc5NA=="}], "type": "inlineReview"}, {"oid": "715b199943d78b0731693604a3c90b2fc8c92101", "url": "https://github.com/hortonworks/cloudbreak/commit/715b199943d78b0731693604a3c90b2fc8c92101", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-18T23:44:51Z", "type": "forcePushed"}, {"oid": "788c9054e6d17680e951f0d42300df63625ecd14", "url": "https://github.com/hortonworks/cloudbreak/commit/788c9054e6d17680e951f0d42300df63625ecd14", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-18T23:49:00Z", "type": "forcePushed"}, {"oid": "628ca707aa9165a8e9faa5d8d027a308905bdfa6", "url": "https://github.com/hortonworks/cloudbreak/commit/628ca707aa9165a8e9faa5d8d027a308905bdfa6", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-19T00:05:28Z", "type": "commit"}, {"oid": "628ca707aa9165a8e9faa5d8d027a308905bdfa6", "url": "https://github.com/hortonworks/cloudbreak/commit/628ca707aa9165a8e9faa5d8d027a308905bdfa6", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created.", "committedDate": "2020-11-19T00:05:28Z", "type": "forcePushed"}]}