{"pr_number": 9416, "pr_title": "Cb 9114 remove spark", "pr_createdAt": "2020-11-12T09:46:37Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9416", "timeline": [{"oid": "de88c220ee8526d8676eb769e783c3a0838bf142", "url": "https://github.com/hortonworks/cloudbreak/commit/de88c220ee8526d8676eb769e783c3a0838bf142", "message": "sfsf", "committedDate": "2020-11-12T14:03:46Z", "type": "forcePushed"}, {"oid": "170ea668d10cb563d5d8a6f08bbe1263b2936a96", "url": "https://github.com/hortonworks/cloudbreak/commit/170ea668d10cb563d5d8a6f08bbe1263b2936a96", "message": "CB-9114 Remove Spark service, SparkServerPool, Defaulty model from IT. I cleaned up some old tests (like ambari tests)", "committedDate": "2020-11-13T09:18:46Z", "type": "forcePushed"}, {"oid": "1a7cd51bf8de033b18494304502a54739aff5261", "url": "https://github.com/hortonworks/cloudbreak/commit/1a7cd51bf8de033b18494304502a54739aff5261", "message": "CB-9114 Remove Spark service, SparkServerPool, Defaulty model from IT. I cleaned up some old tests (like ambari tests)", "committedDate": "2020-11-16T09:24:42Z", "type": "commit"}, {"oid": "1a7cd51bf8de033b18494304502a54739aff5261", "url": "https://github.com/hortonworks/cloudbreak/commit/1a7cd51bf8de033b18494304502a54739aff5261", "message": "CB-9114 Remove Spark service, SparkServerPool, Defaulty model from IT. I cleaned up some old tests (like ambari tests)", "committedDate": "2020-11-16T09:24:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NDkzOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9416#discussion_r524364938", "bodyText": "Wouldn't be possible to has this withGatewayPort() call in the MockCloudProvider class only? I guess other providers will work without it.", "author": "afarsang", "createdAt": "2020-11-16T15:44:09Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/clustertemplate/DistroXTemplateTestDto.java", "diffHunk": "@@ -44,7 +43,8 @@ public DistroXTemplateTestDto valid() {\n         return withName(getResourcePropertyProvider().getName(getCloudPlatform()))\n                 .withEnvironmentName(getTestContext().get(EnvironmentTestDto.class).getName())\n                 .withCluster(getTestContext().init(ClusterTestDto.class).getRequest())\n-                .withInstanceGroups(getTestContext().init(InstanceGroupTestDto.class).getRequest());\n+                .withInstanceGroups(getTestContext().init(InstanceGroupTestDto.class).getRequest())\n+                .withGatewayPort(getCloudProvider().gatewayPort(this));", "originalCommit": "1a7cd51bf8de033b18494304502a54739aff5261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxOTI3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/9416#discussion_r524419272", "bodyText": "Maybe you are right. I don't think about this yet. If the test doesn't need this, I will remove this part as well", "author": "topolyai5", "createdAt": "2020-11-16T16:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NDkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjE1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9416#discussion_r524366154", "bodyText": "This comment seems unnecessary", "author": "afarsang", "createdAt": "2020-11-16T15:45:35Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/answer/AbstractRequestHandler.java", "diffHunk": "@@ -54,7 +52,8 @@ public HttpMock getMock() {\n     }\n \n     public HttpMock clearDefinedResponses() {\n-        mock.getDynamicRouteStack().clear(method.getHttpMethod(), path);\n+//        mock.getDynamicRouteStack().clear(method.getHttpMethod(), path);", "originalCommit": "1a7cd51bf8de033b18494304502a54739aff5261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNzAwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9416#discussion_r524417004", "bodyText": "I don't know yet. When I will refactor the verification part, I will decide that if need or not. I need to broke to more parts because it would be a gigantosaurus PR", "author": "topolyai5", "createdAt": "2020-11-16T16:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjcwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9416#discussion_r524366704", "bodyText": "Do we need this?", "author": "afarsang", "createdAt": "2020-11-16T15:46:11Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/answer/AbstractRequestWithBodyHandler.java", "diffHunk": "@@ -25,20 +22,17 @@\n     }\n \n     public HttpMock thenReturn(GenericRequestResponse<S, T> genericResponse) {\n-        S handle = genericResponse.handle(null, null, null);\n+        S handle = genericResponse.handle(null, null);\n         executeQuery().executeConfigure(getPath(), pathVariables(), new MockResponse(handle, getMethod().getHttpMethod().name(), getPath()));\n         return getMock();\n     }\n \n-    abstract T prepareRequestInstance(spark.Request request);\n+//    abstract T prepareRequestInstance(spark.Request request);", "originalCommit": "1a7cd51bf8de033b18494304502a54739aff5261", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2ODIxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9416#discussion_r524368210", "bodyText": "This is commented out in many place. If it works without it I'll assume it can be deleted", "author": "afarsang", "createdAt": "2020-11-16T15:48:02Z", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/mock/answer/JsonRequestAnswer.java", "diffHunk": "@@ -1,33 +1,27 @@\n package com.sequenceiq.it.cloudbreak.dto.mock.answer;\n \n-import java.io.IOException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.fasterxml.jackson.databind.JsonNode;\n-import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n import com.sequenceiq.it.cloudbreak.dto.mock.HttpMock;\n import com.sequenceiq.it.cloudbreak.dto.mock.Method;\n-import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n import com.sequenceiq.it.cloudbreak.mock.ExecuteQueryToMockInfrastructure;\n \n-import spark.Request;\n-\n public class JsonRequestAnswer<S> extends AbstractRequestWithBodyHandler<S, JsonNode, JsonRequestAnswer<S>> {\n     private static final Logger LOGGER = LoggerFactory.getLogger(JsonRequestAnswer.class);\n \n     public JsonRequestAnswer(Method method, String path, Class<String> requestType, HttpMock mock, ExecuteQueryToMockInfrastructure executeQuery) {\n         super(method, path, JsonNode.class, mock, executeQuery);\n     }\n \n-    @Override\n-    JsonNode prepareRequestInstance(Request request) {\n-        try {\n-            return JsonUtil.readTree(request.body());\n-        } catch (IOException e) {\n-            LOGGER.error(\"Could not parse json from request body\", e);\n-            throw new TestFailException(\"Could not parse json from request body\", e);\n-        }\n-    }\n+//    @Override\n+//    JsonNode prepareRequestInstance(Request request) {", "originalCommit": "1a7cd51bf8de033b18494304502a54739aff5261", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}