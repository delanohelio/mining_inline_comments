{"pr_number": 7757, "pr_title": "CB-6341 Implement Redbeams start-stop functionality", "pr_createdAt": "2020-04-07T22:45:59Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7757", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwOTM4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405309381", "bodyText": "some log would be nice that we would like stop the which db instance", "author": "doktoric", "createdAt": "2020-04-08T07:21:03Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsRdsStopService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.connector.resource;\n+\n+import com.amazonaws.services.rds.AmazonRDS;\n+import com.amazonaws.services.rds.model.StopDBInstanceRequest;\n+import com.sequenceiq.cloudbreak.cloud.aws.AwsClient;\n+import com.sequenceiq.cloudbreak.cloud.aws.scheduler.AwsBackoffSyncPollingScheduler;\n+import com.sequenceiq.cloudbreak.cloud.aws.task.AwsPollTaskFactory;\n+import com.sequenceiq.cloudbreak.cloud.aws.view.AwsCredentialView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.task.PollTask;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Service\n+public class AwsRdsStopService {\n+\n+    private static final String SUCCESS_STATUS = \"stopped\";\n+\n+    @Inject\n+    private AwsClient awsClient;\n+\n+    @Inject\n+    private AwsPollTaskFactory awsPollTaskFactory;\n+\n+    @Inject\n+    private AwsBackoffSyncPollingScheduler<Boolean> awsBackoffSyncPollingScheduler;\n+\n+    public void stop(AuthenticatedContext ac, String dbInstanceIdentifier) throws ExecutionException, TimeoutException, InterruptedException {\n+        AwsCredentialView credentialView = new AwsCredentialView(ac.getCloudCredential());\n+        String regionName = ac.getCloudContext().getLocation().getRegion().value();\n+        AmazonRDS rdsClient = awsClient.createRdsClient(credentialView, regionName);\n+", "originalCommit": "fbe8818ef58b368634efdc3e7e16b282435014b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxODk3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405318975", "bodyText": "Done in \n  \n    \n      cloudbreak/redbeams/src/main/java/com/sequenceiq/redbeams/service/stack/RedbeamsStopService.java\n    \n    \n         Line 41\n      in\n      fbe8818\n    \n    \n    \n    \n\n        \n          \n           LOGGER.debug(\"Stop called for: {}\", dbStack); \n        \n    \n  \n\n\nShould I implement it here as well?", "author": "pkedvessy", "createdAt": "2020-04-08T07:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwOTM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxOTU5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405319595", "bodyText": "nope thats cool thanks", "author": "doktoric", "createdAt": "2020-04-08T07:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwOTM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwOTQ2Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405309463", "bodyText": "some log would be nice that we would like start the which db instance", "author": "doktoric", "createdAt": "2020-04-08T07:21:13Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsRdsStartService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.connector.resource;\n+\n+import com.amazonaws.services.rds.AmazonRDS;\n+import com.amazonaws.services.rds.model.StartDBInstanceRequest;\n+import com.sequenceiq.cloudbreak.cloud.aws.AwsClient;\n+import com.sequenceiq.cloudbreak.cloud.aws.scheduler.AwsBackoffSyncPollingScheduler;\n+import com.sequenceiq.cloudbreak.cloud.aws.task.AwsPollTaskFactory;\n+import com.sequenceiq.cloudbreak.cloud.aws.view.AwsCredentialView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.task.PollTask;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Service\n+public class AwsRdsStartService {\n+\n+    private static final String SUCCESS_STATUS = \"available\";\n+\n+    @Inject\n+    private AwsClient awsClient;\n+\n+    @Inject\n+    private AwsPollTaskFactory awsPollTaskFactory;\n+\n+    @Inject\n+    private AwsBackoffSyncPollingScheduler<Boolean> awsBackoffSyncPollingScheduler;\n+\n+    public void start(AuthenticatedContext ac, String dbInstanceIdentifier) throws ExecutionException, TimeoutException, InterruptedException {\n+        AwsCredentialView credentialView = new AwsCredentialView(ac.getCloudCredential());\n+        String regionName = ac.getCloudContext().getLocation().getRegion().value();\n+        AmazonRDS rdsClient = awsClient.createRdsClient(credentialView, regionName);", "originalCommit": "fbe8818ef58b368634efdc3e7e16b282435014b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxODQ0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405318449", "bodyText": "Done in \n  \n    \n      cloudbreak/redbeams/src/main/java/com/sequenceiq/redbeams/service/stack/RedbeamsStartService.java\n    \n    \n         Line 41\n      in\n      fbe8818\n    \n    \n    \n    \n\n        \n          \n           LOGGER.debug(\"Start called for: {}\", dbStack); \n        \n    \n  \n\n\nShould I implement it here as well?", "author": "pkedvessy", "createdAt": "2020-04-08T07:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMwOTQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMjc2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405312766", "bodyText": "I think we should check first that do we really need to start the initiate start action or not.\nWhen one of the CB node dies and trying to restart the flow we dont want to initiate the start event twice", "author": "doktoric", "createdAt": "2020-04-08T07:27:32Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/flow/redbeams/start/handler/StartDatabaseServerHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.redbeams.flow.redbeams.start.handler;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.flow.event.EventSelectorUtil;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+import com.sequenceiq.redbeams.flow.redbeams.common.RedbeamsEvent;\n+import com.sequenceiq.redbeams.flow.redbeams.start.event.StartDatabaseServerFailed;\n+import com.sequenceiq.redbeams.flow.redbeams.start.event.StartDatabaseServerRequest;\n+import com.sequenceiq.redbeams.flow.redbeams.start.event.StartDatabaseServerSuccess;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class StartDatabaseServerHandler implements EventHandler<StartDatabaseServerRequest> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StartDatabaseServerHandler.class);\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Override\n+    public String selector() {\n+        return EventSelectorUtil.selector(StartDatabaseServerRequest.class);\n+    }\n+\n+    @Override\n+    public void accept(Event<StartDatabaseServerRequest> event) {\n+        LOGGER.debug(\"Received event: {}\", event);\n+        StartDatabaseServerRequest request = event.getData();\n+        CloudContext cloudContext = request.getCloudContext();\n+        try {\n+            CloudConnector<Object> connector = cloudPlatformConnectors.get(cloudContext.getPlatformVariant());\n+            AuthenticatedContext ac = connector.authentication().authenticate(cloudContext, request.getCloudCredential());\n+\n+            connector.resources().startDatabaseServer(ac, request.getDbInstanceIdentifier());", "originalCommit": "fbe8818ef58b368634efdc3e7e16b282435014b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxODAxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405318011", "bodyText": "Its already done in\n\n  \n    \n      cloudbreak/redbeams/src/main/java/com/sequenceiq/redbeams/service/stack/RedbeamsStartService.java\n    \n    \n         Line 43\n      in\n      fbe8818\n    \n    \n    \n    \n\n        \n          \n           if (dbStack.getStatus().isStartInProgressOrCompleted()) { \n        \n    \n  \n\n\nShould I implement it on AWS level as well?", "author": "pkedvessy", "createdAt": "2020-04-08T07:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMjc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxOTk4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405319985", "bodyText": "not on aws level but in the abstract flow step", "author": "doktoric", "createdAt": "2020-04-08T07:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMjc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMzE4Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405313183", "bodyText": "I think we should check first that do we really need to start the initiate stop action or not.\nWhen one of the CB node dies and trying to restart the flow we dont want to initiate the stop event twice", "author": "doktoric", "createdAt": "2020-04-08T07:28:16Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/flow/redbeams/stop/handler/StopDatabaseServerHandler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.redbeams.flow.redbeams.stop.handler;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.SyncPollingScheduler;\n+import com.sequenceiq.cloudbreak.cloud.task.PollTaskFactory;\n+import com.sequenceiq.cloudbreak.cloud.task.ResourcesStatePollerResult;\n+import com.sequenceiq.flow.event.EventSelectorUtil;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+import com.sequenceiq.redbeams.flow.redbeams.common.RedbeamsEvent;\n+import com.sequenceiq.redbeams.flow.redbeams.stop.event.StopDatabaseServerFailed;\n+import com.sequenceiq.redbeams.flow.redbeams.stop.event.StopDatabaseServerRequest;\n+import com.sequenceiq.redbeams.flow.redbeams.stop.event.StopDatabaseServerSuccess;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class StopDatabaseServerHandler implements EventHandler<StopDatabaseServerRequest> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StopDatabaseServerHandler.class);\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private PollTaskFactory statusCheckFactory;\n+\n+    @Inject\n+    private SyncPollingScheduler<ResourcesStatePollerResult> syncPollingScheduler;\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Override\n+    public String selector() {\n+        return EventSelectorUtil.selector(StopDatabaseServerRequest.class);\n+    }\n+\n+    @Override\n+    public void accept(Event<StopDatabaseServerRequest> event) {\n+        LOGGER.debug(\"Received event: {}\", event);\n+        StopDatabaseServerRequest request = event.getData();\n+        CloudContext cloudContext = request.getCloudContext();\n+        try {\n+            CloudConnector<Object> connector = cloudPlatformConnectors.get(cloudContext.getPlatformVariant());\n+            AuthenticatedContext ac = connector.authentication().authenticate(cloudContext, request.getCloudCredential());\n+\n+            connector.resources().stopDatabaseServer(ac, request.getDbInstanceIdentifier());", "originalCommit": "fbe8818ef58b368634efdc3e7e16b282435014b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzM1OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405317359", "bodyText": "Its already done in \n  \n    \n      cloudbreak/redbeams/src/main/java/com/sequenceiq/redbeams/service/stack/RedbeamsStopService.java\n    \n    \n         Line 43\n      in\n      fbe8818\n    \n    \n    \n    \n\n        \n          \n           if (dbStack.getStatus().isStopInProgressOrCompleted()) { \n        \n    \n  \n\n\nShould I implement it on AWS level as well?", "author": "pkedvessy", "createdAt": "2020-04-08T07:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMzE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMDA2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r405320062", "bodyText": "not on aws level but in the abstract flow step", "author": "doktoric", "createdAt": "2020-04-08T07:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMzE4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0OTIyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r406149220", "bodyText": "Done.", "author": "pkedvessy", "createdAt": "2020-04-09T11:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxMzE4Mw=="}], "type": "inlineReview"}, {"oid": "1f77dcad88e6e6518fde358ea41c9a6b9ffe736b", "url": "https://github.com/hortonworks/cloudbreak/commit/1f77dcad88e6e6518fde358ea41c9a6b9ffe736b", "message": "CB-6341 Implement Redbeams start-stop functionality", "committedDate": "2020-04-09T11:49:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MTAyMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r406091022", "bodyText": "It might be superfluous to query databaseServerConfig. I think if you just query DBStack and check its status if it is in delete_in_progress.", "author": "gergopapi2", "createdAt": "2020-04-09T09:54:46Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/stack/RedbeamsStartService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.redbeams.service.stack;\n+\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.domain.DatabaseServerConfig;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.flow.RedbeamsFlowManager;\n+import com.sequenceiq.redbeams.flow.redbeams.common.RedbeamsEvent;\n+import com.sequenceiq.redbeams.flow.redbeams.start.RedbeamsStartEvent;\n+import com.sequenceiq.redbeams.service.dbserverconfig.DatabaseServerConfigService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import javax.inject.Inject;\n+\n+@Service\n+public class RedbeamsStartService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RedbeamsStartService.class);\n+\n+    @Inject\n+    private DatabaseServerConfigService databaseServerConfigService;\n+\n+    @Inject\n+    private DBStackService dbStackService;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    @Inject\n+    private RedbeamsFlowManager flowManager;\n+\n+    public void startDatabaseServer(String crn) {\n+        DatabaseServerConfig databaseServerConfig = databaseServerConfigService.getByCrn(crn);", "originalCommit": "fbe8818ef58b368634efdc3e7e16b282435014b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3ODQ3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r406178476", "bodyText": "Done. Done in the RedbeamsStopService as well.", "author": "pkedvessy", "createdAt": "2020-04-09T12:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MTAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3OTE0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r406179149", "bodyText": "Done. Done in the RedbeamsStopService as well.", "author": "pkedvessy", "createdAt": "2020-04-09T12:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1Nzk0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r406157943", "bodyText": "AbstractRedbeamsStartAction and AbstractRedbeamsStopAction are very similar, are almost the same. Also, they are quite similar to AbstractRedbeamsProvisionAction and TerminationAction. I would try to create one common class from them, AbstractRedbeamsAction and use it in all four flows.\nIf that is too big of a task (~more than an 1-2 hours of work), then I would create a separate refactor jira for it.", "author": "gergopapi2", "createdAt": "2020-04-09T12:08:32Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/flow/redbeams/start/actions/AbstractRedbeamsStartAction.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.redbeams.flow.redbeams.start.actions;\n+\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.cloudbreak.common.event.Payload;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.flow.core.AbstractAction;\n+import com.sequenceiq.flow.core.FlowParameters;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.flow.redbeams.common.RedbeamsFailureEvent;\n+import com.sequenceiq.redbeams.flow.redbeams.start.RedbeamsStartContext;\n+import com.sequenceiq.redbeams.flow.redbeams.start.RedbeamsStartEvent;\n+import com.sequenceiq.redbeams.flow.redbeams.start.RedbeamsStartState;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackService;\n+import org.springframework.statemachine.StateContext;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+public abstract class AbstractRedbeamsStartAction<P extends Payload>", "originalCommit": "1f77dcad88e6e6518fde358ea41c9a6b9ffe736b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3MTc2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7757#discussion_r406171762", "bodyText": "If you don't mind, I'd more prefer the refactor as a separated task.", "author": "pkedvessy", "createdAt": "2020-04-09T12:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1Nzk0Mw=="}], "type": "inlineReview"}, {"oid": "a833df3e30f18e80447b04107583b5d7e8bdce1e", "url": "https://github.com/hortonworks/cloudbreak/commit/a833df3e30f18e80447b04107583b5d7e8bdce1e", "message": "CB-6341 Implement Redbeams start-stop functionality", "committedDate": "2020-04-09T12:46:26Z", "type": "commit"}, {"oid": "a833df3e30f18e80447b04107583b5d7e8bdce1e", "url": "https://github.com/hortonworks/cloudbreak/commit/a833df3e30f18e80447b04107583b5d7e8bdce1e", "message": "CB-6341 Implement Redbeams start-stop functionality", "committedDate": "2020-04-09T12:46:26Z", "type": "forcePushed"}]}