{"pr_number": 7634, "pr_title": "CDPCP-1560. Allow retrieving keytab for different users", "pr_createdAt": "2020-03-23T21:59:01Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7634", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzM5Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823396", "bodyText": "I would rephrase a bit saying that the check checks that the calling actor is either perform an action against themselves or have the right.", "author": "giladwolff", "createdAt": "2020-03-23T23:39:16Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a", "originalCommit": "d25c31cde82cae2a04c3847decf71b7bb61209c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzQ4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823481", "bodyText": "assert the parameters?", "author": "giladwolff", "createdAt": "2020-03-23T23:39:33Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);", "originalCommit": "d25c31cde82cae2a04c3847decf71b7bb61209c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NDI4MA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397654280", "bodyText": "The safeFromString does a null check for us.", "author": "aarman-cloudera", "createdAt": "2020-03-25T07:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzgyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823828", "bodyText": "I think that checkRight throws if the check fails.", "author": "giladwolff", "createdAt": "2020-03-23T23:40:40Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);\n+        Crn targetUserCrn = Crn.safeFromString(targetUserCrnStr);\n+        if (actorCrn.equals(targetUserCrn)) {\n+            return;\n+        }\n+        if (!actorCrn.getAccountId().equals(targetUserCrn.getAccountId())) {\n+            throw new AccessDeniedException(\"Unauthorized to run this operation in a different account\");\n+        }\n+        if (!grpcUmsClient.checkRight(GrpcUmsClient.INTERNAL_ACTOR_CRN, actorCrn.toString(), requiredRight, MDCUtils.getRequestId())) {", "originalCommit": "d25c31cde82cae2a04c3847decf71b7bb61209c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NDYyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397654628", "bodyText": "So the grpcUmsClient checks for exception and returns a boolean instead.", "author": "aarman-cloudera", "createdAt": "2020-03-25T07:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NjYzNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397186635", "bodyText": "we have UmsAuthorizationService class, which has methods for checking rights through UMS, you should move this method to that class and maybe you can also reuse those existing methods", "author": "horadla23", "createdAt": "2020-03-24T14:17:47Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {", "originalCommit": "d25c31cde82cae2a04c3847decf71b7bb61209c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1NTIzMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397655230", "bodyText": "Thanks! didn't know about that service. I've moved thee method over.", "author": "aarman-cloudera", "createdAt": "2020-03-25T07:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NjYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5MTM3Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397191372", "bodyText": "as mentioned, please move your logic to UmsAuthorizationService and use that", "author": "horadla23", "createdAt": "2020-03-24T14:23:46Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/KerberosMgmtV1Controller.java", "diffHunk": "@@ -43,6 +45,9 @@\n     @Inject\n     private UserKeytabService userKeytabService;\n \n+    @Inject\n+    private AuthorizationUtil authorizationUtil;", "originalCommit": "d25c31cde82cae2a04c3847decf71b7bb61209c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "64c8bdae0b6900e4f827c217059926a2d2adcaff", "url": "https://github.com/hortonworks/cloudbreak/commit/64c8bdae0b6900e4f827c217059926a2d2adcaff", "message": "CDPCP-1560. Allow retrieving keytab for different users\n\nThis allows a user to retrieve keytab that belong to other users\nas long as they have the given right.", "committedDate": "2020-03-25T07:33:18Z", "type": "commit"}, {"oid": "64c8bdae0b6900e4f827c217059926a2d2adcaff", "url": "https://github.com/hortonworks/cloudbreak/commit/64c8bdae0b6900e4f827c217059926a2d2adcaff", "message": "CDPCP-1560. Allow retrieving keytab for different users\n\nThis allows a user to retrieve keytab that belong to other users\nas long as they have the given right.", "committedDate": "2020-03-25T07:33:18Z", "type": "forcePushed"}]}