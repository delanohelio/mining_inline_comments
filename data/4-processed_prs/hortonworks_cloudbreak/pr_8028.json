{"pr_number": 8028, "pr_title": "CB-7009 Azure single RG: env service create RG", "pr_createdAt": "2020-05-12T15:38:26Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8028", "timeline": [{"oid": "93332ca2c86f09079a4f059b354752577c422dd6", "url": "https://github.com/hortonworks/cloudbreak/commit/93332ca2c86f09079a4f059b354752577c422dd6", "message": "CB-7009 Azure single RG: env service create RG", "committedDate": "2020-05-12T15:45:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MTcwOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r423961708", "bodyText": "maybe ewe should just put this into the DTO directly, in that case we can just use that object", "author": "doktoric", "createdAt": "2020-05-12T18:55:48Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;\n+\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch;\n+\n+    private CostTagging costTagging;\n+\n+    private EventBus eventBus;\n+\n+    private EnvironmentService environmentService;\n+\n+    private ParametersService parameterService;\n+\n+    private Clock clock;\n+\n+    protected ResourceGroupCreationHandler(EventSender eventSender,\n+            CloudPlatformConnectors cloudPlatformConnectors,\n+            AzureClientService azureClientService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter,\n+            AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch,\n+            CostTagging costTagging, EventBus eventBus, EnvironmentService environmentService,\n+            ParametersService parameterService,\n+            Clock clock) {\n+        super(eventSender);\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+        this.azureClientService = azureClientService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.azureSingleResourceGroupFeatureSwitch = azureSingleResourceGroupFeatureSwitch;\n+        this.costTagging = costTagging;\n+        this.eventBus = eventBus;\n+        this.environmentService = environmentService;\n+        this.parameterService = parameterService;\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                createResourceGroup(environmentDto, environment);\n+                                goToNetworkCreationState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void createResourceGroup(EnvironmentDto environmentDto, Environment environment) {\n+        if (!azureSingleResourceGroupFeatureSwitch.isActive()) {\n+            LOGGER.debug(\"Azure single resource group feature turned off, not creating resourcegroup.\");\n+            return;\n+        }\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (!AZURE.name().equals(environmentDto.getCloudPlatform()) || azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"Cloudplatform not azure or no azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        if (!CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Azure resource group creation not requested, not creating resource group.\");\n+            return;\n+        }\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n+        AzureClient azureClient = azureClientService.getClient(cloudCredential);\n+\n+        String resourceGroupName = String.format(\"%s_%d\", environmentDto.getName(), clock.getCurrentTimeMillis());\n+        LOGGER.debug(\"Azure generated resource group name: {}.\", resourceGroupName);\n+        azureClient.createResourceGroup(resourceGroupName, environmentDto.getLocation().getName(), mergeTags(environmentDto));\n+        parameterService.updateResourceGroupName(environment, resourceGroupName);\n+        LOGGER.debug(\"Azure resource group created successfully.\");\n+    }\n+\n+    private Map<String, String> mergeTags(EnvironmentDto environmentDto) {\n+        CDPTagMergeRequest mergeRequest = CDPTagMergeRequest.Builder", "originalCommit": "93332ca2c86f09079a4f059b354752577c422dd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNTY3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r424005671", "bodyText": "Yes, I was wondering myself why is the combination of different tags done outside of the dto.", "author": "gergopapi2", "createdAt": "2020-05-12T20:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MTcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MzUzNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r423963536", "bodyText": "Azure resource group creation not requested -> New single Azure resource group creation not requested", "author": "doktoric", "createdAt": "2020-05-12T18:59:03Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;\n+\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch;\n+\n+    private CostTagging costTagging;\n+\n+    private EventBus eventBus;\n+\n+    private EnvironmentService environmentService;\n+\n+    private ParametersService parameterService;\n+\n+    private Clock clock;\n+\n+    protected ResourceGroupCreationHandler(EventSender eventSender,\n+            CloudPlatformConnectors cloudPlatformConnectors,\n+            AzureClientService azureClientService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter,\n+            AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch,\n+            CostTagging costTagging, EventBus eventBus, EnvironmentService environmentService,\n+            ParametersService parameterService,\n+            Clock clock) {\n+        super(eventSender);\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+        this.azureClientService = azureClientService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.azureSingleResourceGroupFeatureSwitch = azureSingleResourceGroupFeatureSwitch;\n+        this.costTagging = costTagging;\n+        this.eventBus = eventBus;\n+        this.environmentService = environmentService;\n+        this.parameterService = parameterService;\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                createResourceGroup(environmentDto, environment);\n+                                goToNetworkCreationState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void createResourceGroup(EnvironmentDto environmentDto, Environment environment) {\n+        if (!azureSingleResourceGroupFeatureSwitch.isActive()) {\n+            LOGGER.debug(\"Azure single resource group feature turned off, not creating resourcegroup.\");\n+            return;\n+        }\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (!AZURE.name().equals(environmentDto.getCloudPlatform()) || azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"Cloudplatform not azure or no azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        if (!CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Azure resource group creation not requested, not creating resource group.\");", "originalCommit": "93332ca2c86f09079a4f059b354752577c422dd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NTA1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r423965055", "bodyText": "do we want to catch the exception here ?", "author": "doktoric", "createdAt": "2020-05-12T19:01:40Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;\n+\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch;\n+\n+    private CostTagging costTagging;\n+\n+    private EventBus eventBus;\n+\n+    private EnvironmentService environmentService;\n+\n+    private ParametersService parameterService;\n+\n+    private Clock clock;\n+\n+    protected ResourceGroupCreationHandler(EventSender eventSender,\n+            CloudPlatformConnectors cloudPlatformConnectors,\n+            AzureClientService azureClientService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter,\n+            AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch,\n+            CostTagging costTagging, EventBus eventBus, EnvironmentService environmentService,\n+            ParametersService parameterService,\n+            Clock clock) {\n+        super(eventSender);\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+        this.azureClientService = azureClientService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.azureSingleResourceGroupFeatureSwitch = azureSingleResourceGroupFeatureSwitch;\n+        this.costTagging = costTagging;\n+        this.eventBus = eventBus;\n+        this.environmentService = environmentService;\n+        this.parameterService = parameterService;\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                createResourceGroup(environmentDto, environment);\n+                                goToNetworkCreationState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void createResourceGroup(EnvironmentDto environmentDto, Environment environment) {\n+        if (!azureSingleResourceGroupFeatureSwitch.isActive()) {\n+            LOGGER.debug(\"Azure single resource group feature turned off, not creating resourcegroup.\");\n+            return;\n+        }\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (!AZURE.name().equals(environmentDto.getCloudPlatform()) || azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"Cloudplatform not azure or no azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        if (!CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Azure resource group creation not requested, not creating resource group.\");\n+            return;\n+        }\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n+        AzureClient azureClient = azureClientService.getClient(cloudCredential);\n+\n+        String resourceGroupName = String.format(\"%s_%d\", environmentDto.getName(), clock.getCurrentTimeMillis());\n+        LOGGER.debug(\"Azure generated resource group name: {}.\", resourceGroupName);\n+        azureClient.createResourceGroup(resourceGroupName, environmentDto.getLocation().getName(), mergeTags(environmentDto));\n+        parameterService.updateResourceGroupName(environment, resourceGroupName);\n+        LOGGER.debug(\"Azure resource group created successfully.\");", "originalCommit": "93332ca2c86f09079a4f059b354752577c422dd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNjEyNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r424006126", "bodyText": "What exception do you mean? There is a try/catch around the createResourceGroup method, and the exception message is logged there.", "author": "gergopapi2", "createdAt": "2020-05-12T20:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NTA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1NjIxMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r424356213", "bodyText": "I think Ricsi was thinking about converting the Azure exception to a more readable one to present for the end-user.", "author": "pdarvasi", "createdAt": "2020-05-13T11:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NTA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5MjU0Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r428692543", "bodyText": "We will see, hopefully Azure exception will be meaningful enough to be presented in UI.", "author": "pdarvasi", "createdAt": "2020-05-21T14:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NTA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MTE2Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r424381166", "bodyText": "We should do this only for Azure cloud platform, pls use getCloudPlatform", "author": "pdarvasi", "createdAt": "2020-05-13T12:00:07Z", "path": "environment/src/main/java/com/sequenceiq/environment/parameters/service/ParametersService.java", "diffHunk": "@@ -62,6 +63,18 @@ public boolean isS3GuardTableUsed(String accountId, String cloudPlatform, String\n         return baseParametersRepository.isS3GuardTableUsed(accountId, cloudPlatform, EnvironmentStatus.AVAILABLE_STATUSES, location, dynamoTableName);\n     }\n \n+    public void updateResourceGroupName(Environment environment, String resourceGroupName) {\n+        Optional<BaseParameters> baseParametersOptional = baseParametersRepository.findByEnvironmentId(environment.getId());\n+        if (baseParametersOptional.isEmpty()) {\n+            return;\n+        }\n+\n+        BaseParameters baseParameters = baseParametersOptional.get();\n+        AzureParameters azureParameters = (AzureParameters) baseParameters;", "originalCommit": "93332ca2c86f09079a4f059b354752577c422dd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425645754", "bodyText": "I don't like the idea of adding direct Azure dependency (or any specific cloud provider dependency) in full generic Env creation flow steps.", "author": "attilapalfi92", "createdAt": "2020-05-15T08:26:59Z", "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;", "originalCommit": "8ab2d69d539e0502b90e1021094d51f2e2029008", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NjM2NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425646364", "bodyText": "Can you name this step instead InfrastructureCreationHandler and move every cloud provider specific logic behind the cloud-api? And use those APIs here?", "author": "attilapalfi92", "createdAt": "2020-05-15T08:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5MzE0Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425693147", "bodyText": "I will do it as I see that also in the case of S3Guard this approach was taken and accept that the team likes it this way. However, I would like just note that this is somewhat against polymorphism, as we try to pretend something to be generic when in reality it isn't (resourceGroup is a pure azure concept). I would have factored it behind an interface if at least one another implementation (AWS or MOCK) to that flow step would be needed.", "author": "gergopapi2", "createdAt": "2020-05-15T09:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5ODMyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425698320", "bodyText": "If you name the step Infrastructure Creation it immediately becomes generic. It's a different question that for AWS this time there's nothing to do with it. But do you know what features and requirements will there be in 3 months? 6 months? What if the need emerges to do some additional work on AWS during Env creation? We add a new AWS specific step? It would bloat the flow unnecessarily even more. Flows meant to be generic, not just in the Env service, but everywhere in CB, and cloud provider specific jobs should be hidden behind the cloud-api. Otherwise this whole software wouldn't work. This is a good legacy we have and we should guard it.", "author": "attilapalfi92", "createdAt": "2020-05-15T10:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2OTk1Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425769957", "bodyText": "Yes. One thought regarding the name: the whole cloudbreak is about infrastructure creation :), so the name is not really descriptive. And it is exactly this point, coming up with a good name that shows me that too much generics is premature now.\nComing to the point what requirements will come in 3 months: well, I would be rather doing a refactor when we see what's needed (i.e. in 3 or 6 months time) then do a very generic solution with a suboptimal name that will need to be renamed anyway.\nI agree that the flow is generic.", "author": "gergopapi2", "createdAt": "2020-05-15T12:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NDIzNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425794236", "bodyText": "I looked up S3GuardTable deletion. There the flow step is called that way and not masqueraded to be something generic, with good purpose: it is something that exists in the AWS world only. Once there will be an azure parallel I am sure a heavy refactoring will come. So I will keep the name.", "author": "gergopapi2", "createdAt": "2020-05-15T13:16:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NTAwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r428695000", "bodyText": "I have not hard bias pro or contra, but I am merging the PR to make progress with the feature.\n@attilapalfi92 pls open a follow-up if you'd like to change this.", "author": "pdarvasi", "createdAt": "2020-05-21T14:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA=="}], "type": "inlineReview"}, {"oid": "482acd663ff9b5d66e85d1e6c540dbea7bff0024", "url": "https://github.com/hortonworks/cloudbreak/commit/482acd663ff9b5d66e85d1e6c540dbea7bff0024", "message": "CB-7009 Azure single RG: env service create RG", "committedDate": "2020-05-15T09:15:33Z", "type": "forcePushed"}, {"oid": "fb52663bc7589f9d2a0dbcc6f39ec0d6970a72b9", "url": "https://github.com/hortonworks/cloudbreak/commit/fb52663bc7589f9d2a0dbcc6f39ec0d6970a72b9", "message": "CB-7009 Azure single RG: env service create RG", "committedDate": "2020-05-15T15:54:00Z", "type": "forcePushed"}, {"oid": "3e22587ff8b698fed5363a9a975eab7dcada1dae", "url": "https://github.com/hortonworks/cloudbreak/commit/3e22587ff8b698fed5363a9a975eab7dcada1dae", "message": "CB-7009 Azure single RG: env service create RG", "committedDate": "2020-05-21T12:40:19Z", "type": "commit"}, {"oid": "3e22587ff8b698fed5363a9a975eab7dcada1dae", "url": "https://github.com/hortonworks/cloudbreak/commit/3e22587ff8b698fed5363a9a975eab7dcada1dae", "message": "CB-7009 Azure single RG: env service create RG", "committedDate": "2020-05-21T12:40:19Z", "type": "forcePushed"}]}