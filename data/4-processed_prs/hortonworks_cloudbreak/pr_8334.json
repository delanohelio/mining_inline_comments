{"pr_number": 8334, "pr_title": "CB-6013 Azure cluster creation fails due to interruption during subscription", "pr_createdAt": "2020-06-18T15:52:01Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/8334", "timeline": [{"oid": "4d2d90daa4888b224b2f8fde4e9f66d3d16c4267", "url": "https://github.com/hortonworks/cloudbreak/commit/4d2d90daa4888b224b2f8fde4e9f66d3d16c4267", "message": "CB-6013 Azure cluster creation fails due to interruption during subscription", "committedDate": "2020-06-18T16:43:52Z", "type": "forcePushed"}, {"oid": "3ae18c5c243637ce2706b46479fd0ba2d30d9827", "url": "https://github.com/hortonworks/cloudbreak/commit/3ae18c5c243637ce2706b46479fd0ba2d30d9827", "message": "CB-6013 Azure cluster creation fails due to interruption during subscription", "committedDate": "2020-06-18T17:21:40Z", "type": "forcePushed"}, {"oid": "4920093688a1b570840fee1feadba79c29ec80f1", "url": "https://github.com/hortonworks/cloudbreak/commit/4920093688a1b570840fee1feadba79c29ec80f1", "message": "CB-6013 Azure cluster creation fails due to interruption during subscription", "committedDate": "2020-06-22T10:12:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMjMyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443502321", "bodyText": "Can you add some log lines please that we're detaching the disk or fi we're not doing anything as it's already attached.", "author": "keyki", "createdAt": "2020-06-22T11:49:02Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/resource/AzureAttachmentResourceBuilder.java", "diffHunk": "@@ -47,23 +50,30 @@\n                 .findFirst()\n                 .orElseThrow(() -> new AzureResourceException(\"Instance resource not found\"));\n \n+        CloudContext cloudContext = auth.getCloudContext();\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, cloudStack);\n+        AzureClient client = getAzureClient(auth);\n+        VirtualMachine vm = client.getVirtualMachine(resourceGroupName, instance.getName());\n+        Set<String> diskIds = vm.dataDisks().values().stream().map(VirtualMachineDataDisk::id).collect(Collectors.toSet());\n+\n         CloudResource volumeSet = buildableResource.stream()\n                 .filter(cloudResource -> cloudResource.getType().equals(ResourceType.AZURE_VOLUMESET))\n                 .filter(cloudResource -> !instance.getInstanceId().equals(cloudResource.getInstanceId()))\n                 .findFirst()\n                 .orElseThrow(() -> new AzureResourceException(\"Volume set resource not found\"));\n \n-        CloudContext cloudContext = auth.getCloudContext();\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, cloudStack);\n-        AzureClient client = getAzureClient(auth);\n \n         VolumeSetAttributes volumeSetAttributes = getVolumeSetAttributes(volumeSet);\n         volumeSetAttributes.getVolumes()\n                 .forEach(volume -> {\n-                            Disk disk = client.getDiskById(volume.getId());\n-                            VirtualMachine vm = client.getVirtualMachine(resourceGroupName, instance.getName());\n-                            client.attachDiskToVm(disk, vm);\n-                        });\n+                    Disk disk = client.getDiskById(volume.getId());\n+                    if (!diskIds.contains(disk.id())) {", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NjAyMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443646021", "bodyText": "Detaching has the log in detachDiskFromVm() method, attaching in attachDiskToVm()", "author": "pdarvasi", "createdAt": "2020-06-22T15:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMjMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMzE4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443503181", "bodyText": "Can you add a logline that the disk already exists and we're not doing anything.", "author": "keyki", "createdAt": "2020-06-22T11:50:48Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/resource/AzureVolumeResourceBuilder.java", "diffHunk": "@@ -155,9 +157,12 @@ private String getAvailabilityZone(AuthenticatedContext auth, CloudResource vm)\n             DeviceNameGenerator generator = new DeviceNameGenerator();\n             futures.addAll(volumeSet.getVolumes().stream()\n                     .map(volume -> intermediateBuilderExecutor.submit(() -> {\n-                        Disk result = client.createManagedDisk(\n-                                volume.getId(), volume.getSize(), AzureDiskType.getByValue(\n-                                        volume.getType()), region, resourceGroupName, cloudStack.getTags());\n+                        Disk result = client.getDiskByName(resourceGroupName, volume.getId());", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyOTI2Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443529263", "bodyText": "Can you change it to 60 please?", "author": "keyki", "createdAt": "2020-06-22T12:41:20Z", "path": "core/src/main/java/com/sequenceiq/cloudbreak/conf/AppConfig.java", "diffHunk": "@@ -61,9 +61,10 @@\n @Configuration\n @EnableRetry\n public class AppConfig implements ResourceLoaderAware {\n-\n     private static final Logger LOGGER = LoggerFactory.getLogger(AppConfig.class);\n \n+    private static final int AWAIT_TERMINATION_SECONDS = 120;", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MjI1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443642258", "bodyText": "We should at least log if RESOURCE_CRN_PARAMETER is not set in the stack, that should never happen, right?", "author": "pdarvasi", "createdAt": "2020-06-22T15:26:34Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureComputeResourceService.java", "diffHunk": "@@ -59,10 +58,16 @@\n \n     public List<CloudResourceStatus> deleteComputeResources(AuthenticatedContext ac, CloudStack stack, List<CloudResource> cloudResources,\n             List<CloudResource> networkResources) {\n-        CloudContext cloudContext = ac.getCloudContext();\n-        ResourceBuilderContext context = contextBuilder.contextInit(cloudContext, ac, stack.getNetwork(), null, true);\n+        ResourceBuilderContext context = initContext(ac, stack);\n         context.addNetworkResources(networkResources);\n \n         return computeResourceService.deleteResources(context, ac, cloudResources, false);\n     }\n+\n+    private AzureContext initContext(AuthenticatedContext ac, CloudStack cloudStack) {\n+        AzureContext context = contextBuilder.contextInit(ac.getCloudContext(), ac, cloudStack.getNetwork(), null, true);\n+        context.putParameter(PlatformParametersConsts.RESOURCE_CRN_PARAMETER,\n+                cloudStack.getParameters().getOrDefault(PlatformParametersConsts.RESOURCE_CRN_PARAMETER, \"\"));", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0ODA0OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443648048", "bodyText": "Not scope of PR, but detaching and attaching could be done parallel for multiple volumes if they are longish-running", "author": "pdarvasi", "createdAt": "2020-06-22T15:35:02Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/resource/AzureAttachmentResourceBuilder.java", "diffHunk": "@@ -47,23 +50,30 @@\n                 .findFirst()\n                 .orElseThrow(() -> new AzureResourceException(\"Instance resource not found\"));\n \n+        CloudContext cloudContext = auth.getCloudContext();\n+        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, cloudStack);\n+        AzureClient client = getAzureClient(auth);\n+        VirtualMachine vm = client.getVirtualMachine(resourceGroupName, instance.getName());\n+        Set<String> diskIds = vm.dataDisks().values().stream().map(VirtualMachineDataDisk::id).collect(Collectors.toSet());\n+\n         CloudResource volumeSet = buildableResource.stream()\n                 .filter(cloudResource -> cloudResource.getType().equals(ResourceType.AZURE_VOLUMESET))\n                 .filter(cloudResource -> !instance.getInstanceId().equals(cloudResource.getInstanceId()))\n                 .findFirst()\n                 .orElseThrow(() -> new AzureResourceException(\"Volume set resource not found\"));\n \n-        CloudContext cloudContext = auth.getCloudContext();\n-        String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(cloudContext, cloudStack);\n-        AzureClient client = getAzureClient(auth);\n \n         VolumeSetAttributes volumeSetAttributes = getVolumeSetAttributes(volumeSet);\n         volumeSetAttributes.getVolumes()\n                 .forEach(volume -> {\n-                            Disk disk = client.getDiskById(volume.getId());\n-                            VirtualMachine vm = client.getVirtualMachine(resourceGroupName, instance.getName());\n-                            client.attachDiskToVm(disk, vm);\n-                        });\n+                    Disk disk = client.getDiskById(volume.getId());\n+                    if (!diskIds.contains(disk.id())) {\n+                        if (disk.isAttachedToVirtualMachine()) {\n+                            client.detachDiskFromVm(disk.id(), client.getVirtualMachine(disk.virtualMachineId()));", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyODQ4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443828487", "bodyText": "Could you please raise a jira ticket about this improvement?", "author": "schfeca75", "createdAt": "2020-06-22T21:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0ODA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MjExMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443652112", "bodyText": "We should log all the generated resource names here.", "author": "pdarvasi", "createdAt": "2020-06-22T15:40:57Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/service/AzureResourceNameService.java", "diffHunk": "@@ -43,20 +41,20 @@ public String resourceName(ResourceType resourceType, Object... parts) {\n \n     private String volumeSetResourceName(Object[] parts) {\n         checkArgs(VOLUMESET_PART_COUNT, parts);\n+        String hash = String.valueOf(parts[VOLUMESET_PART_COUNT - 1]);\n         String name = instanceName(parts);\n-        name = trimHash(name);\n-        name = appendHash(name, new Date());\n+        name = appendHash(name, hash);\n         name = adjustBaseLength(name, maxResourceNameLength);\n         return name;\n     }\n \n     private String attachedDiskResourceName(Object[] parts) {\n         checkArgs(ATTACHED_DISKS_PART_COUNT, parts);\n-        String cnt = String.valueOf(parts[ATTACHED_DISKS_PART_COUNT - 1]);\n+        String cnt = String.valueOf(parts[ATTACHED_DISKS_PART_COUNT - 2]);", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyNjczNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443826736", "bodyText": "The resourceName() method is extended with the logging.", "author": "schfeca75", "createdAt": "2020-06-22T21:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MjExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MzQwNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443653406", "bodyText": "minor typo: it has thrown --> it has been thrown", "author": "pdarvasi", "createdAt": "2020-06-22T15:42:51Z", "path": "cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/handler/LaunchStackHandler.java", "diffHunk": "@@ -73,6 +74,9 @@ public void accept(Event<LaunchStackRequest> launchStackRequestEvent) {\n             eventBus.notify(result.selector(), new Event<>(launchStackRequestEvent.getHeaders(), result));\n             LOGGER.debug(\"Launching the stack successfully finished for {}\", cloudContext);\n         } catch (Exception e) {\n+            if (ExceptionUtils.getRootCause(e) instanceof InterruptedException) {\n+                LOGGER.info(\"Interrupted exception is ignored as it has thrown because of graceful shutdown of the java process.\");", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTM5NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/8334#discussion_r443655394", "bodyText": "I would pass the cut length as param instead of always taking DATE_FORMAT.length", "author": "pdarvasi", "createdAt": "2020-06-22T15:45:49Z", "path": "cloud-reactor/src/main/java/com/sequenceiq/cloudbreak/cloud/service/CloudbreakResourceNameService.java", "diffHunk": "@@ -119,6 +120,8 @@ protected String appendHash(String name, Date timestamp) {\n         DateFormat df = new SimpleDateFormat(DATE_FORMAT);\n         return Joiner.on(\"\").join(name, DELIMITER, df.format(timestamp));\n     }\n-}\n-\n \n+    protected String appendHash(String name, String toBeHashed) {\n+        return Joiner.on(\"\").join(name, DELIMITER, DigestUtils.md5DigestAsHex(toBeHashed.getBytes()).substring(0, DATE_FORMAT.length()));", "originalCommit": "4920093688a1b570840fee1feadba79c29ec80f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0219e77e54107970794ffb746208c7fc88dcc593", "url": "https://github.com/hortonworks/cloudbreak/commit/0219e77e54107970794ffb746208c7fc88dcc593", "message": "CB-6013 Azure cluster creation fails due to interruption during subscription", "committedDate": "2020-06-22T21:00:37Z", "type": "commit"}, {"oid": "0219e77e54107970794ffb746208c7fc88dcc593", "url": "https://github.com/hortonworks/cloudbreak/commit/0219e77e54107970794ffb746208c7fc88dcc593", "message": "CB-6013 Azure cluster creation fails due to interruption during subscription", "committedDate": "2020-06-22T21:00:37Z", "type": "forcePushed"}]}