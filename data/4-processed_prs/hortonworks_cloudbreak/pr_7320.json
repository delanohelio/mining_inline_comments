{"pr_number": 7320, "pr_title": "CB-5468 The subnet selection logic be part of the cloud moduls", "pr_createdAt": "2020-02-19T08:40:50Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7320", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNzUwMw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381207503", "bodyText": "I think an object would better here which contains all of the property", "author": "doktoric", "createdAt": "2020-02-19T10:34:03Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsNetworkConnector.java", "diffHunk": "@@ -126,6 +133,19 @@ public String getNetworkCidr(Network network, CloudCredential credential) {\n         return vpcCidrs.get(0);\n     }\n \n+    @Override\n+    public List<CloudSubnet> selectSubnets(List<CloudSubnet> subnetMetas, Tunnel tunnel, boolean ha, boolean preferPrivateAnyways) {", "originalCommit": "8f5ff1e1be1cff92ef4daa6501ca028157690307", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwODAxOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381208018", "bodyText": "Yes, definitely, I thought the same. Thanks.", "author": "gergopapi2", "createdAt": "2020-02-19T10:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNzUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwODQxNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381208416", "bodyText": "No suitable subnet found because ther eis no public subnet in {} list", "author": "doktoric", "createdAt": "2020-02-19T10:35:50Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategySinglePreferPrivate.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategySinglePreferPrivate extends SubnetSelectorStrategy {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategySinglePreferPrivate.class);\n+\n+    @Inject\n+    private SubnetSelectorService subnetSelectorService;\n+\n+    @Override\n+    public List<CloudSubnet> selectInternal(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> foundSubnet = subnetSelectorService.getOnePrivateSubnet(subnetMetas);\n+        if (foundSubnet.isEmpty()) {\n+            foundSubnet = subnetSelectorService.getOnePublicSubnet(subnetMetas);\n+            if (foundSubnet.isEmpty()) {\n+                error(\"No suitable subnet found.\");", "originalCommit": "8f5ff1e1be1cff92ef4daa6501ca028157690307", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwOTY3Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381209673", "bodyText": "I think these test are great but would be beneficial to say what is happenning like testCollectOnePrivateSubnetPerAzWhenTwoInOneAZ -> testCollectOnePrivateSubnetPerAzWhenTwoInOneAZThenShouldReturnOneAZ", "author": "doktoric", "createdAt": "2020-02-19T10:38:05Z", "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorServiceTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_A;\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_B;\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_C;\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_D;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SubnetSelectorServiceTest {\n+\n+    private final SubnetSelectorService subnetSelectorService = new SubnetSelectorService();\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAzWhenEmpty() {\n+        List<CloudSubnet> cloudSubnets = new SubnetBuilder()\n+                .build();\n+\n+        Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(cloudSubnets, 3);\n+\n+        assertTrue(privateSubnetsPerAz.isEmpty());\n+    }\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAz() {\n+        List<CloudSubnet> cloudSubnets = new SubnetBuilder()\n+                .withPrivateSubnet(AZ_A)\n+                .withPrivateSubnet(AZ_B)\n+                .withPrivateSubnet(AZ_C)\n+                .build();\n+\n+        Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(cloudSubnets, 3);\n+\n+        assertThat(privateSubnetsPerAz.values(), hasSize(3));\n+    }\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAzWhenMoreThanThree() {\n+        List<CloudSubnet> cloudSubnets = new SubnetBuilder()\n+                .withPrivateSubnet(AZ_A)\n+                .withPrivateSubnet(AZ_B)\n+                .withPrivateSubnet(AZ_C)\n+                .withPrivateSubnet(AZ_D)\n+                .build();\n+\n+        Map<String, CloudSubnet> privateSubnetsPerAz = subnetSelectorService.collectOnePrivateSubnetPerAz(cloudSubnets, 3);\n+\n+        assertThat(privateSubnetsPerAz.values(), hasSize(3));\n+    }\n+\n+    @Test\n+    public void testCollectOnePrivateSubnetPerAzWhenTwoInOneAZ() {", "originalCommit": "8f5ff1e1be1cff92ef4daa6501ca028157690307", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMTAxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381211010", "bodyText": "I agree, I like the test-when-then naming convention. However, without some separators the test names would become too long to read and so just skipped it for brevity. I would prefer some java \"illegal\" conventions like\ntestMethodname_whenCondition_thenExpectation\nto make it readable.", "author": "gergopapi2", "createdAt": "2020-02-19T10:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwOTY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMjA2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381212067", "bodyText": "I mostly using this testMethodnameWhenConditionThenExpectation", "author": "doktoric", "createdAt": "2020-02-19T10:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwOTY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxMDMzMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r381210330", "bodyText": "the name of the test should be more specific", "author": "doktoric", "createdAt": "2020-02-19T10:39:17Z", "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategySinglePreferPrivateTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import static com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector.SubnetBuilder.AZ_A;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.BadRequestException;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SubnetSelectorStrategySinglePreferPrivateTest {\n+    @Rule\n+    public final ExpectedException thrown = ExpectedException.none();\n+\n+    @Mock\n+    private SubnetSelectorService subnetSelectorService;\n+\n+    @InjectMocks\n+    private SubnetSelectorStrategySinglePreferPrivate underTest;\n+\n+    private final SubnetHelper subnetHelper = new SubnetHelper();\n+\n+    @Before\n+    public void setup() {\n+        when(subnetSelectorService.getOnePrivateSubnet(ArgumentMatchers.any())).thenCallRealMethod();\n+        when(subnetSelectorService.getOnePublicSubnet(ArgumentMatchers.any())).thenCallRealMethod();\n+    }\n+\n+    @Test\n+    public void testWhenOnePrivateSubnet() {", "originalCommit": "8f5ff1e1be1cff92ef4daa6501ca028157690307", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35eca3d912f81f7e8e42b344d1fe093703ce71a4", "url": "https://github.com/hortonworks/cloudbreak/commit/35eca3d912f81f7e8e42b344d1fe093703ce71a4", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-19T15:14:27Z", "type": "forcePushed"}, {"oid": "9be1775460835525551699cb126e2d3cc9f991e8", "url": "https://github.com/hortonworks/cloudbreak/commit/9be1775460835525551699cb126e2d3cc9f991e8", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-20T08:12:09Z", "type": "forcePushed"}, {"oid": "2e3d1eb97ca333983ac2e40e943a4f833484d0ad", "url": "https://github.com/hortonworks/cloudbreak/commit/2e3d1eb97ca333983ac2e40e943a4f833484d0ad", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-20T09:22:42Z", "type": "forcePushed"}, {"oid": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "url": "https://github.com/hortonworks/cloudbreak/commit/2cbf1fe59e511ba0f734de74b0fb86f974515c44", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-20T09:42:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0ODY4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383148685", "bodyText": "this could be simplified with stream, like:\nsubnetMetas.stream().filter(isPrivate).limit(max).collect(Collectors.toMap(key,value,(existing, new)->existing))", "author": "lacikaaa", "createdAt": "2020-02-24T09:17:37Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+class SubnetSelectorService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorService.class);\n+\n+    Map<String, CloudSubnet> collectOnePrivateSubnetPerAz(List<CloudSubnet> subnetMetas, int max) {\n+        Map<String, CloudSubnet> subnetsPerAz = new HashMap<>();\n+        Iterator<CloudSubnet> subnetIterator = subnetMetas.iterator();\n+        while (subnetsPerAz.size() < max && subnetIterator.hasNext()) {\n+            CloudSubnet nextSubnet = subnetIterator.next();\n+            if (nextSubnet.isPrivateSubnet()) {\n+                subnetsPerAz.putIfAbsent(nextSubnet.getAvailabilityZone(), nextSubnet);\n+            }\n+        }", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzODQ5MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383938491", "bodyText": "Thank you for the suggestion, did it.", "author": "gergopapi2", "createdAt": "2020-02-25T15:08:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0ODY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTI3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383979276", "bodyText": "Hm, it does not work. I think limit will stop checking for more private subnets when it reached the desired count, irrespective of their AZ.", "author": "gergopapi2", "createdAt": "2020-02-25T16:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0ODY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTU4Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383151583", "bodyText": "it's similar to the private one, could be replaced with stream.", "author": "lacikaaa", "createdAt": "2020-02-24T09:24:11Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorService.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Service\n+class SubnetSelectorService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorService.class);\n+\n+    Map<String, CloudSubnet> collectOnePrivateSubnetPerAz(List<CloudSubnet> subnetMetas, int max) {\n+        Map<String, CloudSubnet> subnetsPerAz = new HashMap<>();\n+        Iterator<CloudSubnet> subnetIterator = subnetMetas.iterator();\n+        while (subnetsPerAz.size() < max && subnetIterator.hasNext()) {\n+            CloudSubnet nextSubnet = subnetIterator.next();\n+            if (nextSubnet.isPrivateSubnet()) {\n+                subnetsPerAz.putIfAbsent(nextSubnet.getAvailabilityZone(), nextSubnet);\n+            }\n+        }\n+        LOGGER.debug(\"Private subnets per AZ: {}\", subnetsPerAz.values().stream().map(CloudSubnet::getId).collect(Collectors.joining(\",\")));\n+        return subnetsPerAz;\n+    }\n+\n+    Optional<CloudSubnet> getOnePrivateSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> foundCloudSubnet = subnetMetas.stream()\n+                .filter(CloudSubnet::isPrivateSubnet)\n+                .findFirst();\n+        LOGGER.debug(\"Found private subnet: {}\", foundCloudSubnet.map(CloudSubnet::getId).orElse(\"Not found\"));\n+        return foundCloudSubnet;\n+    }\n+\n+    Map<String, CloudSubnet> collectOnePublicSubnetPerAz(List<CloudSubnet> subnetMetas, int max) {\n+        Map<String, CloudSubnet> subnetsPerAz = new HashMap<>();\n+        Iterator<CloudSubnet> subnetIterator = subnetMetas.iterator();\n+        while (subnetsPerAz.size() < max && subnetIterator.hasNext()) {\n+            CloudSubnet nextSubnet = subnetIterator.next();\n+            if (isUsablePublicSubnet(nextSubnet)) {\n+                subnetsPerAz.putIfAbsent(nextSubnet.getAvailabilityZone(), nextSubnet);\n+            }\n+        }", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzODU3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383938577", "bodyText": "Thanks, did it.", "author": "gergopapi2", "createdAt": "2020-02-25T15:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NDE5OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383984198", "bodyText": "Finally I kept the original implementation.", "author": "gergopapi2", "createdAt": "2020-02-25T16:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1NzE3Ng==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383157176", "bodyText": "could you move this into @Values so we can modify it easily if needed", "author": "lacikaaa", "createdAt": "2020-02-24T09:35:46Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategyMultiplePreferPrivate extends SubnetSelectorStrategy {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPrivate.class);\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DIFFERENT_AZ = 3;", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NDMzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383984337", "bodyText": "Yes, did it, thanks.", "author": "gergopapi2", "createdAt": "2020-02-25T16:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1NzE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1ODIyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383158227", "bodyText": "line break seems unnecessary", "author": "lacikaaa", "createdAt": "2020-02-24T09:38:04Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPrivate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategyMultiplePreferPrivate extends SubnetSelectorStrategy {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetSelectorStrategyMultiplePreferPrivate.class);\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DIFFERENT_AZ = 3;\n+\n+    @Inject\n+    private SubnetSelectorService subnetSelectorService;\n+\n+    @Override\n+    public List<CloudSubnet> selectInternal(List<CloudSubnet> subnetMetas) {\n+        Map<String, CloudSubnet> selectedSubnets = subnetSelectorService.collectOnePrivateSubnetPerAz(subnetMetas, MAX_SUBNET_IN_DIFFERENT_AZ);\n+        if (selectedSubnets.size() < MIN_SUBNET_IN_DIFFERENT_AZ) {\n+            Map<String, CloudSubnet> publicSubnetsPerAz = subnetSelectorService.collectOnePublicSubnetPerAz(subnetMetas, MIN_SUBNET_IN_DIFFERENT_AZ);\n+            subnetSelectorService.collectSubnetsOfMissingAz(selectedSubnets, publicSubnetsPerAz,\n+                    MIN_SUBNET_IN_DIFFERENT_AZ);", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NDU1NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383984555", "bodyText": "Ops, you are right. I corrected it.", "author": "gergopapi2", "createdAt": "2020-02-25T16:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1ODIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1OTQzOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383159438", "bodyText": "same as above", "author": "lacikaaa", "createdAt": "2020-02-24T09:40:34Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/service/subnetselector/SubnetSelectorStrategyMultiplePreferPublic.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.sequenceiq.cloudbreak.cloud.aws.service.subnetselector;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+\n+@Component\n+public class SubnetSelectorStrategyMultiplePreferPublic extends SubnetSelectorStrategy {\n+\n+    private static final int MIN_SUBNET_IN_DIFFERENT_AZ = 2;\n+\n+    private static final int MAX_SUBNET_IN_DIFFERENT_AZ = 3;", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTQ0OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383985449", "bodyText": "Yes, I made it injectable via Value.", "author": "gergopapi2", "createdAt": "2020-02-25T16:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1OTQzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTg2Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383161867", "bodyText": "on AWS implementation there is a validation if subnetMetas is null. I think it would make sense to have the same here", "author": "lacikaaa", "createdAt": "2020-02-24T09:45:04Z", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkConnector.java", "diffHunk": "@@ -137,6 +139,16 @@ public String getNetworkCidr(Network network, CloudCredential credential) {\n         return networkCidrs.get(0);\n     }\n \n+    @Override\n+    public List<CloudSubnet> selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetMetas.isEmpty()) {", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTU2NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383985565", "bodyText": "Yes, thanks, I added it.", "author": "gergopapi2", "createdAt": "2020-02-25T16:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MjIzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383162232", "bodyText": "same here, check if it's null", "author": "lacikaaa", "createdAt": "2020-02-24T09:45:47Z", "path": "cloud-mock/src/main/java/com/sequenceiq/cloudbreak/cloud/mock/MockNetworkConnector.java", "diffHunk": "@@ -45,6 +55,16 @@ public String getNetworkCidr(Network network, CloudCredential credential) {\n         return \"10.0.0.0/8\";\n     }\n \n+    @Override\n+    public List<CloudSubnet> selectSubnets(List<CloudSubnet> subnetMetas, SubnetSelectionParameters subnetSelectionParameters) {\n+        if (subnetMetas.isEmpty()) {", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTYzMg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383985632", "bodyText": "Did it.", "author": "gergopapi2", "createdAt": "2020-02-25T16:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MjIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2NTU4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r383165581", "bodyText": "I would move this logic into DBStack as it could be reused there.\nalso the CloudPlatform parameter is not necessary, as it's in dbStack", "author": "lacikaaa", "createdAt": "2020-02-24T09:52:00Z", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/service/network/SubnetChooserService.java", "diffHunk": "@@ -7,38 +7,41 @@\n \n import org.springframework.stereotype.Service;\n \n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudPlatformVariant;\n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.cloud.model.SubnetSelectionParameters;\n import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n-import com.sequenceiq.redbeams.exception.BadRequestException;\n-import com.sequenceiq.redbeams.exception.RedbeamsException;\n+import com.sequenceiq.redbeams.api.endpoint.v4.stacks.aws.AwsDatabaseServerV4Parameters;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n \n @Service\n public class SubnetChooserService {\n \n     @Inject\n-    private AwsSubnetChooser awsSubnetChooser;\n-\n-    public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas, CloudPlatform cloudPlatform, Map<String, String> dbParameters) {\n-        switch (cloudPlatform) {\n-            case AWS:\n-                return awsSubnetChooser.chooseSubnets(subnetMetas, dbParameters);\n-            case AZURE:\n-                return chooseSubnetsAzure(subnetMetas);\n-            case MOCK:\n-                return chooseSubnetsMock(subnetMetas);\n-            default:\n-                throw new RedbeamsException(String.format(\"Support for cloud platform %s not yet added\", cloudPlatform.name()));\n-        }\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    public List<CloudSubnet> chooseSubnets(List<CloudSubnet> subnetMetas, CloudPlatform cloudPlatform, DBStack dbStack) {\n+        return cloudPlatformConnectors.get(new CloudPlatformVariant(dbStack.getCloudPlatform(), dbStack.getPlatformVariant()))\n+                .networkConnector()\n+                .selectSubnets(\n+                        subnetMetas,\n+                        SubnetSelectionParameters.builder()\n+                                .withHa(isHa(cloudPlatform, dbStack))\n+                                .withPreferPrivateNetwork()\n+                                .build()\n+                );\n     }\n \n-    private List<CloudSubnet> chooseSubnetsAzure(List<CloudSubnet> subnetMetas) {\n-        if (subnetMetas.isEmpty()) {\n-            throw new BadRequestException(\"Insufficient number of subnets: at least one subnet needed\");\n+    private boolean isHa(CloudPlatform cloudPlatform, DBStack dbStack) {\n+        boolean ha = true;\n+        if (CloudPlatform.AWS.equals(cloudPlatform)) {\n+            ha = !isAwsNoHaRequested(dbStack.getParameters());\n         }\n-        return subnetMetas.subList(0, 1);\n+        return ha;\n     }", "originalCommit": "2cbf1fe59e511ba0f734de74b0fb86f974515c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxNDYwMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7320#discussion_r384314600", "bodyText": "Great idea, this belongs there. Did it.\nOn the other hand, cloudPlatform in DBStack is a string. I did not want to convert again.", "author": "gergopapi2", "createdAt": "2020-02-26T07:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2NTU4MQ=="}], "type": "inlineReview"}, {"oid": "bef272fdb57fe6c7e9f8f691cfbd0a38b1ebb609", "url": "https://github.com/hortonworks/cloudbreak/commit/bef272fdb57fe6c7e9f8f691cfbd0a38b1ebb609", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-25T16:42:52Z", "type": "forcePushed"}, {"oid": "73b7641e057f33c7240e79992b4a41c8db548500", "url": "https://github.com/hortonworks/cloudbreak/commit/73b7641e057f33c7240e79992b4a41c8db548500", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-26T07:39:24Z", "type": "forcePushed"}, {"oid": "3011f2378d810f9f56c9d5f792f9ec568d9fbe4b", "url": "https://github.com/hortonworks/cloudbreak/commit/3011f2378d810f9f56c9d5f792f9ec568d9fbe4b", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-26T11:20:51Z", "type": "forcePushed"}, {"oid": "c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "url": "https://github.com/hortonworks/cloudbreak/commit/c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-26T13:31:16Z", "type": "commit"}, {"oid": "c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "url": "https://github.com/hortonworks/cloudbreak/commit/c43a5c525dea54caaa4f4bf122d2cef43dc6768e", "message": "CB-5468 The subnet selection logic be part of the cloud moduls", "committedDate": "2020-02-26T13:31:16Z", "type": "forcePushed"}]}