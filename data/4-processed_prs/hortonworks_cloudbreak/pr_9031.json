{"pr_number": 9031, "pr_title": "Cb 8494 audit integration", "pr_createdAt": "2020-09-17T09:58:15Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/9031", "timeline": [{"oid": "8acc81cff740d1471e9fd8674e76f7464bb25634", "url": "https://github.com/hortonworks/cloudbreak/commit/8acc81cff740d1471e9fd8674e76f7464bb25634", "message": "CB-8494 Integrate Audit service with Environment service. Send the audit events to the central audit service", "committedDate": "2020-09-17T09:59:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEyODgwNA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490128804", "bodyText": "Maybe CREATE/DELETE/UPDATE a credential?", "author": "biharitomi", "createdAt": "2020-09-17T10:10:35Z", "path": "audit-connector/src/main/java/com/sequenceiq/cloudbreak/audit/model/AuditEventName.java", "diffHunk": "@@ -21,5 +21,10 @@\n     RETRY_DATALAKE_CLUSTER,\n     INSTANCE_DELETE_DATALAKE_CLUSTER,\n     MAINTAIN_DATALAKE_CLUSTER,\n-    START_DATALAKE_CLUSTER\n+    START_DATALAKE_CLUSTER,\n+\n+    CREATE_ENVIRONMENT,\n+    DELETE_ENVIRONMENT,\n+    STOP_ENVIRONMENT,\n+    START_ENVIRONMENT", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNzM4Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490217387", "bodyText": "Credential audit logs are added", "author": "topolyai5", "createdAt": "2020-09-17T12:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEyODgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNTQxMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490135410", "bodyText": "EnvironmentCreationFlowOperation.... would sound better to me, what do yo think?", "author": "biharitomi", "createdAt": "2020-09-17T10:22:43Z", "path": "environment/src/main/java/com/sequenceiq/environment/audit/flow/CreationEnvironmentFlowOperationAuditEventNameConverter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.sequenceiq.environment.audit.flow;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+\n+@Component\n+public class CreationEnvironmentFlowOperationAuditEventNameConverter implements EnvironmentFlowOperationAuditEventNameConverter {", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNzg3NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490137874", "bodyText": "One return statement would be easier to read.", "author": "biharitomi", "createdAt": "2020-09-17T10:27:15Z", "path": "environment/src/main/java/com/sequenceiq/environment/audit/rest/EnvironmentRestResourceAuditEventConverter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.sequenceiq.environment.audit.rest;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredRestCallEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CDPRestCommonService;\n+import com.sequenceiq.cloudbreak.structuredevent.service.audit.auditeventname.rest.CDPRestResourceAuditEventConverter;\n+\n+@Component\n+public class EnvironmentRestResourceAuditEventConverter implements CDPRestResourceAuditEventConverter {\n+\n+    @Inject\n+    private CDPRestCommonService restCommonService;\n+\n+    @Override\n+    public AuditEventName auditEventName(CDPStructuredRestCallEvent structuredEvent) {\n+        String method = structuredEvent.getRestCall().getRestRequest().getMethod();\n+        AuditEventName eventName = null;\n+        String resourceEvent = structuredEvent.getOperation().getResourceEvent();\n+        if (\"POST\".equals(method) || \"PUT\".equals(method)) {\n+            if (resourceEvent == null) {\n+                eventName = AuditEventName.CREATE_ENVIRONMENT;\n+            } else {\n+                eventName = updateRest(resourceEvent);\n+            }\n+        } else if (\"DELETE\".equals(method)) {\n+            eventName = deletionRest(resourceEvent, structuredEvent.getOperation());\n+        }\n+        return eventName;\n+    }\n+\n+    private AuditEventName deletionRest(String resourceEvent, CDPOperationDetails operationDetails) {\n+        if (StringUtils.isEmpty(resourceEvent)\n+                || resourceEvent.equals(operationDetails.getResourceName())\n+                || resourceEvent.equals(operationDetails.getResourceCrn())) {\n+            return AuditEventName.DELETE_ENVIRONMENT;\n+        }\n+        return null;\n+    }\n+\n+    private AuditEventName updateRest(String resourceEvent) {", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MTA3NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490141075", "bodyText": "It indicates the type of the given operation and JSON deserialisation logic uses that field. I wouldn't change it, because it has already fixed previously to work properly. Please test it with querying events from the backend, because I am sure this change would break get operation on structured events.", "author": "biharitomi", "createdAt": "2020-09-17T10:33:19Z", "path": "environment/src/main/java/com/sequenceiq/environment/events/EnvironmentStructuredFlowEventFactory.java", "diffHunk": "@@ -40,11 +41,11 @@ public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDet\n     @Override\n     public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed, Exception exception) {\n         Environment environment = environmentService.findEnvironmentByIdOrThrow(resourceId);\n-        String resourceType = CDPStructuredFlowEvent.class.getSimpleName();\n+        String resourceType = CloudbreakEventService.ENVIRONMENT_RESOURCE_TYPE;", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzY3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490143677", "bodyText": "Shouldn't we be prepared for cases when Reactor is not able to process the event?", "author": "biharitomi", "createdAt": "2020-09-17T10:38:14Z", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAsyncAuditStructuredEventSender.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.conf.StructuredEventEnablementConfig;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEventSenderService;\n+import com.sequenceiq.flow.reactor.ErrorHandlerAwareReactorEventFactory;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CDPAsyncAuditStructuredEventSender implements CDPStructuredEventSenderService {\n+\n+    public static final String AUDIT_EVENT_LOG_MESSAGE = \"AUDIT_EVENT_LOG_MESSAGE\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPAsyncAuditStructuredEventSender.class);\n+\n+    @Inject\n+    private StructuredEventEnablementConfig structuredEventSenderConfig;\n+\n+    @Inject\n+    private ErrorHandlerAwareReactorEventFactory eventFactory;\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private Map<String, CDPEventDataExtractor<? extends CDPStructuredEvent>> eventDataExtractorMap;\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return structuredEventSenderConfig.isAuditServiceEnabled();\n+    }\n+\n+    @Override\n+    public void create(CDPStructuredEvent structuredEvent) {\n+        StructuredEventType eventType = structuredEvent.getOperation().getEventType();\n+        CDPEventDataExtractor<? extends CDPStructuredEvent> eventDataExtractor =\n+                eventDataExtractorMap.get(eventType.name().toLowerCase() + \"CDPEventDataExtractor\");\n+        if (eventDataExtractor == null) {\n+            LOGGER.debug(\"Event data converter does not exist for event type of {}\", eventType);\n+            return;\n+        }\n+        boolean shouldAudit = eventDataExtractor.shouldAudit(structuredEvent);\n+        if (shouldAudit) {\n+            sendAsyncEvent(AUDIT_EVENT_LOG_MESSAGE, eventFactory.createEvent(structuredEvent));\n+        } else {\n+            LOGGER.debug(\"Audit Event is disabled for this structure event: {}\", structuredEvent);\n+        }\n+    }\n+\n+    private void sendAsyncEvent(String selector, Event<?> event) {\n+        eventBus.notify(selector, event);", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2OTMzMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490169330", "bodyText": "Only one handler exists and this handler always subscribe to the event", "author": "topolyai5", "createdAt": "2020-09-17T11:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDE3MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490144171", "bodyText": "I think a happy log message could be welcomed here :)", "author": "biharitomi", "createdAt": "2020-09-17T10:39:09Z", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAsyncAuditStructuredEventSender.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.conf.StructuredEventEnablementConfig;\n+import com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEventSenderService;\n+import com.sequenceiq.flow.reactor.ErrorHandlerAwareReactorEventFactory;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class CDPAsyncAuditStructuredEventSender implements CDPStructuredEventSenderService {\n+\n+    public static final String AUDIT_EVENT_LOG_MESSAGE = \"AUDIT_EVENT_LOG_MESSAGE\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPAsyncAuditStructuredEventSender.class);\n+\n+    @Inject\n+    private StructuredEventEnablementConfig structuredEventSenderConfig;\n+\n+    @Inject\n+    private ErrorHandlerAwareReactorEventFactory eventFactory;\n+\n+    @Inject\n+    private EventBus eventBus;\n+\n+    @Inject\n+    private Map<String, CDPEventDataExtractor<? extends CDPStructuredEvent>> eventDataExtractorMap;\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return structuredEventSenderConfig.isAuditServiceEnabled();\n+    }\n+\n+    @Override\n+    public void create(CDPStructuredEvent structuredEvent) {\n+        StructuredEventType eventType = structuredEvent.getOperation().getEventType();\n+        CDPEventDataExtractor<? extends CDPStructuredEvent> eventDataExtractor =\n+                eventDataExtractorMap.get(eventType.name().toLowerCase() + \"CDPEventDataExtractor\");\n+        if (eventDataExtractor == null) {\n+            LOGGER.debug(\"Event data converter does not exist for event type of {}\", eventType);\n+            return;\n+        }\n+        boolean shouldAudit = eventDataExtractor.shouldAudit(structuredEvent);\n+        if (shouldAudit) {\n+            sendAsyncEvent(AUDIT_EVENT_LOG_MESSAGE, eventFactory.createEvent(structuredEvent));", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDk2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490144969", "bodyText": "Warn level should be enough here, as it is just a warning without propagating any error about that the audit event could not be send and/or processed.", "author": "biharitomi", "createdAt": "2020-09-17T10:40:44Z", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/CDPAuditStructuredEventHandler.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.audit.AuditClient;\n+import com.sequenceiq.cloudbreak.audit.model.ActorCrn;\n+import com.sequenceiq.cloudbreak.audit.model.AuditEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredEvent;\n+import com.sequenceiq.flow.reactor.api.handler.EventHandler;\n+\n+import reactor.bus.Event;\n+\n+@Component\n+public class CDPAuditStructuredEventHandler<T extends CDPStructuredEvent> implements EventHandler<T> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CDPAuditStructuredEventHandler.class);\n+\n+    @Inject\n+    private AuditClient auditClient;\n+\n+    @Inject\n+    private Map<String, CDPEventDataExtractor<T>> eventDataExtractorMap;\n+\n+    @Override\n+    public String selector() {\n+        return CDPAsyncAuditStructuredEventSender.AUDIT_EVENT_LOG_MESSAGE;\n+    }\n+\n+    @Override\n+    public void accept(Event<T> structuredEvent) {\n+        try {\n+            T data = structuredEvent.getData();\n+            CDPOperationDetails operation = data.getOperation();\n+            CDPEventDataExtractor<T> extractor = eventDataExtractorMap.get(operation.getEventType().name().toLowerCase() + \"CDPEventDataExtractor\");\n+            LOGGER.info(\"Extract audit event as {}\", extractor);\n+            AuditEvent event = AuditEvent.builder()\n+                    .withAccountId(operation.getAccountId())\n+                    .withActor(ActorCrn.builder().withActorCrn(operation.getUserCrn()).build())\n+                    .withEventData(extractor.eventData(data))\n+                    .withEventName(extractor.eventName(data))\n+                    .withEventSource(extractor.eventSource(data))\n+                    .withSourceIp(extractor.sourceIp(data))\n+                    .build();\n+            auditClient.createAuditEvent(event);\n+        } catch (UnsupportedOperationException e) {\n+            LOGGER.debug(\"Audit log is unnecessary: {}\", e.getMessage());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Cannot perform auditing: {}\", e.getMessage(), e);", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NzIwMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490147201", "bodyText": "Is this implemented somewhere? or it is for future purposes?", "author": "biharitomi", "createdAt": "2020-09-17T10:44:58Z", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/audit/auditeventname/flow/CDPFlowResourceAuditEventConverter.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.structuredevent.service.audit.auditeventname.flow;\n+\n+import com.sequenceiq.cloudbreak.audit.model.AuditEventName;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+\n+public interface CDPFlowResourceAuditEventConverter {", "originalCommit": "8acc81cff740d1471e9fd8674e76f7464bb25634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MDIwOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9031#discussion_r490170209", "bodyText": "Yes it is implemented here: public class EnvironmentFlowAuditEventNameConverter implements CDPFlowResourceAuditEventConverter {", "author": "topolyai5", "createdAt": "2020-09-17T11:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NzIwMQ=="}], "type": "inlineReview"}, {"oid": "d0793f3acfab13fc52532939a25497511d717f24", "url": "https://github.com/hortonworks/cloudbreak/commit/d0793f3acfab13fc52532939a25497511d717f24", "message": "CB-8494 Integrate Audit service with Environment service. Send the audit events to the central audit service", "committedDate": "2020-09-17T11:38:42Z", "type": "forcePushed"}, {"oid": "45e9b7f784a8f2346906e519ab9721ecb792c014", "url": "https://github.com/hortonworks/cloudbreak/commit/45e9b7f784a8f2346906e519ab9721ecb792c014", "message": "CB-8494 Integrate Audit service with Environment service. Send the audit events to the central audit service", "committedDate": "2020-09-17T16:01:37Z", "type": "forcePushed"}, {"oid": "3b993554b772ff519bd723c0bc0fb1d04332d8d6", "url": "https://github.com/hortonworks/cloudbreak/commit/3b993554b772ff519bd723c0bc0fb1d04332d8d6", "message": "CB-8494 Integrate Audit service with Environment service. Send the audit events to the central audit service", "committedDate": "2020-09-17T16:41:55Z", "type": "forcePushed"}, {"oid": "c1a71486f7957e3a9d92eee6e7d5a4526851cb0c", "url": "https://github.com/hortonworks/cloudbreak/commit/c1a71486f7957e3a9d92eee6e7d5a4526851cb0c", "message": "CB-8494 Integrate Audit service with Environment service. Send the audit events to the central audit service", "committedDate": "2020-09-17T16:47:10Z", "type": "commit"}, {"oid": "c1a71486f7957e3a9d92eee6e7d5a4526851cb0c", "url": "https://github.com/hortonworks/cloudbreak/commit/c1a71486f7957e3a9d92eee6e7d5a4526851cb0c", "message": "CB-8494 Integrate Audit service with Environment service. Send the audit events to the central audit service", "committedDate": "2020-09-17T16:47:10Z", "type": "forcePushed"}]}