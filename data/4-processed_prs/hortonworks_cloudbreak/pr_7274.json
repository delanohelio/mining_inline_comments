{"pr_number": 7274, "pr_title": "CB-5526 Subnet should be private if it has no IG", "pr_createdAt": "2020-02-12T10:32:21Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7274", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxOTU4MQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378219581", "bodyText": "We use this method here AwsNetworkService#80. Is it same?", "author": "topolyai5", "createdAt": "2020-02-12T12:26:45Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -389,7 +389,7 @@ private DescribeVpcsRequest getDescribeVpcsRequestWIthFilters(Map<String, String\n                             subnetName.orElse(subnet.getSubnetId()),\n                             subnet.getAvailabilityZone(),\n                             subnet.getCidrBlock(),\n-                            !subnet.isMapPublicIpOnLaunch(),", "originalCommit": "573f1db7fea0504727a0ac9d9ef419e11bacca41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2825eaa28aaf219564f16d3e0ad71b8fcb7d53e", "url": "https://github.com/hortonworks/cloudbreak/commit/d2825eaa28aaf219564f16d3e0ad71b8fcb7d53e", "message": "CB-5526 Subnet should be private if it has no IG", "committedDate": "2020-02-13T08:38:12Z", "type": "forcePushed"}, {"oid": "7d578002716ff7a165098fee2b6a470c036e5290", "url": "https://github.com/hortonworks/cloudbreak/commit/7d578002716ff7a165098fee2b6a470c036e5290", "message": "CB-5526 Subnet should be private if it has no IG", "committedDate": "2020-02-13T09:24:37Z", "type": "forcePushed"}, {"oid": "65d879a6e4c53c009d13680f08b3c46b79ac4516", "url": "https://github.com/hortonworks/cloudbreak/commit/65d879a6e4c53c009d13680f08b3c46b79ac4516", "message": "CB-5526 Subnet should be private if it has no IG", "committedDate": "2020-02-13T09:29:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTMzOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378805339", "bodyText": "We are passing hasInternetGateway's value 2 times here.", "author": "keyki", "createdAt": "2020-02-13T11:31:02Z", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -389,7 +389,7 @@ private DescribeVpcsRequest getDescribeVpcsRequestWIthFilters(Map<String, String\n                             subnetName.orElse(subnet.getSubnetId()),\n                             subnet.getAvailabilityZone(),\n                             subnet.getCidrBlock(),\n-                            !subnet.isMapPublicIpOnLaunch(),\n+                            !hasInternetGateway,", "originalCommit": "65d879a6e4c53c009d13680f08b3c46b79ac4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDMyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378810328", "bodyText": "thats ok, as private subnet flag is driven by it", "author": "lacikaaa", "createdAt": "2020-02-13T11:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxOTkyOA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378919928", "bodyText": "Ok, I see the value in that and addressed it with a new ctor. However, it would be great to refactor CloudSubnet as it has too many ctors.", "author": "gergopapi2", "createdAt": "2020-02-13T15:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNTMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjQzNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378806437", "bodyText": "return with the optional here", "author": "lacikaaa", "createdAt": "2020-02-13T11:33:43Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        String chosenSubnetId = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (StringUtils.isEmpty(chosenSubnetId) && !preferPrivate) {\n+            chosenSubnetId = tryGetOnePrivateSubnet(subnetMetas);\n         }\n+        if (StringUtils.isEmpty(chosenSubnetId)) {\n+            chosenSubnetId = subnetMetas.get(0).getId();\n+        }\n+        return chosenSubnetId;\n+    }\n+\n+    private String tryGetOnePublicSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> publicSubnet = subnetMetas.stream()\n+                .filter(sn -> !sn.isPrivateSubnet() && sn.isMapPublicIpOnLaunch())\n+                .findAny();\n+        return publicSubnet.isPresent() ? publicSubnet.get().getId() : \"\";\n     }\n \n-    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate) {\n-        Optional<CloudSubnet> subnet =\n-                network.getSubnetMetas().values().stream().filter(cloudSubnet -> preferPrivate == cloudSubnet.isPrivateSubnet()).findAny();\n-        return subnet.isPresent() ? subnet.get().getId() : network.getSubnetIds().iterator().next();\n+    private String tryGetOnePrivateSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> privateSubnet = subnetMetas.stream()\n+                .filter(CloudSubnet::isPrivateSubnet)\n+                .findFirst();\n+        return privateSubnet.isPresent() ? privateSubnet.get().getId() : \"\";", "originalCommit": "65d879a6e4c53c009d13680f08b3c46b79ac4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDA0NA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378920044", "bodyText": "Good idea, did it, thanks.", "author": "gergopapi2", "createdAt": "2020-02-13T15:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjcxMQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378806711", "bodyText": "return with optional here", "author": "lacikaaa", "createdAt": "2020-02-13T11:34:19Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        String chosenSubnetId = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (StringUtils.isEmpty(chosenSubnetId) && !preferPrivate) {\n+            chosenSubnetId = tryGetOnePrivateSubnet(subnetMetas);\n         }\n+        if (StringUtils.isEmpty(chosenSubnetId)) {\n+            chosenSubnetId = subnetMetas.get(0).getId();\n+        }\n+        return chosenSubnetId;\n+    }\n+\n+    private String tryGetOnePublicSubnet(List<CloudSubnet> subnetMetas) {\n+        Optional<CloudSubnet> publicSubnet = subnetMetas.stream()\n+                .filter(sn -> !sn.isPrivateSubnet() && sn.isMapPublicIpOnLaunch())\n+                .findAny();\n+        return publicSubnet.isPresent() ? publicSubnet.get().getId() : \"\";", "originalCommit": "65d879a6e4c53c009d13680f08b3c46b79ac4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDExMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378920110", "bodyText": "Good idea, did it, thanks.", "author": "gergopapi2", "createdAt": "2020-02-13T15:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwNjcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwODk1Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378808952", "bodyText": "I'm missing the scenario here, when we prefer private, but we don't have one, we should choose a public with mapPublicIpOnLaunch enabled if it's possible, and fall back to any subnet if it fails", "author": "lacikaaa", "createdAt": "2020-02-13T11:39:47Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,58 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n-            return null;\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        return network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty() && !network.getSubnetMetas().isEmpty()\n+                ? getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform)\n+                : null;\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {", "originalCommit": "65d879a6e4c53c009d13680f08b3c46b79ac4516", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDI4NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378920285", "bodyText": "Yes, that is also useful, added it. Thanks.", "author": "gergopapi2", "createdAt": "2020-02-13T15:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwODk1Mg=="}], "type": "inlineReview"}, {"oid": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270", "url": "https://github.com/hortonworks/cloudbreak/commit/c0f05ac94d668948ad4b694bcf6f01b7c61e4270", "message": "CB-5526 Subnet should be private if it has no IG", "committedDate": "2020-02-13T15:07:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMTE3OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378931178", "bodyText": "it would reflect the logic more if you move this if into the upper one", "author": "lacikaaa", "createdAt": "2020-02-13T15:26:05Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,66 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetIdProvider.class);\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        LOGGER.debug(\"Choosing subnet, network: {},  platform: {}, tunnel: {}\", network, cloudPlatform, tunnel);\n+        if (network == null || network.getSubnetIds() == null || network.getSubnetIds().isEmpty() || network.getSubnetMetas().isEmpty()) {\n+            LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n+        return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        LOGGER.debug(\"Choosing aws subnet, preferring private: {}, available\", preferPrivate);\n+        Optional<CloudSubnet> foundCloudSubnet = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet alternate strategy\");\n+            // This is just trying the reverse option, i.e. if we preferred private but there was no private then let's look for a suitable public subnet\n+            foundCloudSubnet = preferPrivate ? tryGetOnePublicSubnet(subnetMetas) : tryGetOnePrivateSubnet(subnetMetas);\n+        }\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet, fallback to any subnet\");\n+            foundCloudSubnet = Optional.of(subnetMetas.get(0));\n+        }", "originalCommit": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNDEwNg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378934106", "bodyText": "I see. Actually I like to avoid many indentations, they are hard to read. Also, this is yet another step to try to get a subnet, different from the previous one.", "author": "gergopapi2", "createdAt": "2020-02-13T15:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMTE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNTQyMA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378935420", "bodyText": "also can be moved to a separate method called like fallbackToAny", "author": "lacikaaa", "createdAt": "2020-02-13T15:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNjQyNQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378936425", "bodyText": "this could be moved out and givne a meaningful name so we don't need the comment", "author": "lacikaaa", "createdAt": "2020-02-13T15:33:49Z", "path": "environment/src/main/java/com/sequenceiq/environment/network/service/SubnetIdProvider.java", "diffHunk": "@@ -1,27 +1,66 @@\n package com.sequenceiq.environment.network.service;\n \n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Optional;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.cloud.model.CloudSubnet;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n import com.sequenceiq.common.api.type.Tunnel;\n import com.sequenceiq.environment.network.dto.NetworkDto;\n \n @Component\n public class SubnetIdProvider {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SubnetIdProvider.class);\n \n-    public String provide(NetworkDto network, Tunnel tunnel) {\n-        if (network != null && network.getSubnetIds() != null && !network.getSubnetIds().isEmpty()) {\n-            return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm());\n-        } else {\n+    public String provide(NetworkDto network, Tunnel tunnel, CloudPlatform cloudPlatform) {\n+        LOGGER.debug(\"Choosing subnet, network: {},  platform: {}, tunnel: {}\", network, cloudPlatform, tunnel);\n+        if (network == null || network.getSubnetIds() == null || network.getSubnetIds().isEmpty() || network.getSubnetMetas().isEmpty()) {\n+            LOGGER.debug(\"Check failed, returning null\");\n             return null;\n         }\n+        return getSubnetIdByPreferedSubnetType(network, tunnel.useCcm(), cloudPlatform);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetType(NetworkDto network, boolean preferPrivate, CloudPlatform cloudPlatform) {\n+        List<CloudSubnet> subnetMetas = new ArrayList<>(network.getSubnetMetas().values());\n+        return AZURE.equals(cloudPlatform)\n+                ? subnetMetas.get(0).getId()\n+                : getSubnetIdByPreferedSubnetTypeAws(subnetMetas, preferPrivate);\n+    }\n+\n+    private String getSubnetIdByPreferedSubnetTypeAws(List<CloudSubnet> subnetMetas, boolean preferPrivate) {\n+        LOGGER.debug(\"Choosing aws subnet, preferring private: {}, available\", preferPrivate);\n+        Optional<CloudSubnet> foundCloudSubnet = preferPrivate ? tryGetOnePrivateSubnet(subnetMetas) : tryGetOnePublicSubnet(subnetMetas);\n+        if (foundCloudSubnet.isEmpty()) {\n+            LOGGER.debug(\"Choosing subnet alternate strategy\");\n+            // This is just trying the reverse option, i.e. if we preferred private but there was no private then let's look for a suitable public subnet\n+            foundCloudSubnet = preferPrivate ? tryGetOnePublicSubnet(subnetMetas) : tryGetOnePrivateSubnet(subnetMetas);\n+        }", "originalCommit": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzODk2Mw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378938963", "bodyText": "I don't like it's called privateSubnet and we set the IGW from it. We request the IGW setting boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, subnet.getSubnetId()); from AWS so it would make sense, that the parameter is called IGW, and we set the privateSubnet from it's value and not reversed.", "author": "lacikaaa", "createdAt": "2020-02-13T15:37:45Z", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/CloudSubnet.java", "diffHunk": "@@ -39,6 +39,16 @@ public CloudSubnet(String id, String name, String availabilityZone, String cidr)\n         this.cidr = cidr;\n     }\n \n+    public CloudSubnet(String id, String name, String availabilityZone, String cidr, boolean privateSubnet, boolean mapPublicIpOnLaunch) {", "originalCommit": "c0f05ac94d668948ad4b694bcf6f01b7c61e4270", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0MDYxOQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7274#discussion_r378940619", "bodyText": "Yes, that's what I did first, but then the tests were harder to read. The two terms on aws are interchangeable. But of course, I can change.", "author": "gergopapi2", "createdAt": "2020-02-13T15:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzODk2Mw=="}], "type": "inlineReview"}, {"oid": "4f935b7f4a84db806438c1a9c28eded56d67a30f", "url": "https://github.com/hortonworks/cloudbreak/commit/4f935b7f4a84db806438c1a9c28eded56d67a30f", "message": "CB-5526 Subnet should be private if it has no IG", "committedDate": "2020-02-13T16:01:58Z", "type": "forcePushed"}, {"oid": "ae9d508abd4cdb842f193a494ee1b002bb280ec7", "url": "https://github.com/hortonworks/cloudbreak/commit/ae9d508abd4cdb842f193a494ee1b002bb280ec7", "message": "CB-5526 Subnet should be private if it has no IG", "committedDate": "2020-02-13T18:15:50Z", "type": "commit"}, {"oid": "ae9d508abd4cdb842f193a494ee1b002bb280ec7", "url": "https://github.com/hortonworks/cloudbreak/commit/ae9d508abd4cdb842f193a494ee1b002bb280ec7", "message": "CB-5526 Subnet should be private if it has no IG", "committedDate": "2020-02-13T18:15:50Z", "type": "forcePushed"}]}