{"pr_number": 595, "pr_title": "remove fastjson", "pr_createdAt": "2020-06-09T08:09:52Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/595", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzMyOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437217328", "bodyText": "[PMD Java] The class 'Account' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=6, WMC=6) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T08:10:34Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/gm/KeyInfo.java", "diffHunk": "@@ -23,6 +23,36 @@\n \n     KeyInfo() {}\n \n+    private static class Account {", "originalCommit": "913337a9a8559cac2470db8f31792eb8391167db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzMzNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437217334", "bodyText": "[PMD Java] It is somewhat confusing to have a field name matching the declaring class name (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidFieldNameMatchingTypeName\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T08:10:34Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/gm/KeyInfo.java", "diffHunk": "@@ -23,6 +23,36 @@\n \n     KeyInfo() {}\n \n+    private static class Account {\n+        private String privateKey;\n+        private String publicKey;\n+        private String account;", "originalCommit": "913337a9a8559cac2470db8f31792eb8391167db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzMzNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437217337", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T08:10:34Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/gm/KeyInfo.java", "diffHunk": "@@ -104,18 +134,13 @@ public int loadKeyInfo(String keyFile) {\n         System.out.println(\"\");\n         System.out.println(\"===key info:\" + keyInfoJsonStr);\n         try {\n-            JSONObject keyInfoJsonObj = JSONObject.parseObject(keyInfoJsonStr);\n-            if (keyInfoJsonObj == null) {\n-                System.out.println(\"load json str from key info failed\");\n-                logger.error(\"load json str from key info failed\");\n-                return RetCode.parseJsonFailed;\n-            }\n-            if (keyInfoJsonObj.containsKey(privJsonKey))\n-                privateKey = keyInfoJsonObj.getString(privJsonKey);\n-            if (keyInfoJsonObj.containsKey(pubJsonKey))\n-                publicKey = keyInfoJsonObj.getString(pubJsonKey);\n-            if (keyInfoJsonObj.containsKey(accountJsonKey))\n-                account = keyInfoJsonObj.getString(accountJsonKey);\n+            Account key =\n+                    ObjectMapperFactory.getObjectMapper().readValue(keyInfoJsonStr, Account.class);", "originalCommit": "913337a9a8559cac2470db8f31792eb8391167db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzMzOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437217339", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T08:10:34Z", "path": "src/main/java/org/fisco/bcos/web3j/crypto/gm/KeyInfo.java", "diffHunk": "@@ -159,13 +184,12 @@ private static int writeFile(String keyFile, String content) {\n     @Override\n     public int storeKeyInfo(String keyFile) {\n         try {\n-            // Map<String, String> keyMap = new HashMap<String, String>();\n-            JSONObject keyMapJson = new JSONObject();\n-            keyMapJson.put(privJsonKey, privateKey);\n-            keyMapJson.put(pubJsonKey, publicKey);\n-            keyMapJson.put(accountJsonKey, account);\n+            Account key = new Account();\n+            key.setPrivateKey(getPrivateKey());\n+            key.setPublicKey(getPublicKey());\n+            key.setAccount(getAccount());\n \n-            String keyJsonInfo = keyMapJson.toString();\n+            String keyJsonInfo = ObjectMapperFactory.getObjectMapper().writeValueAsString(key);", "originalCommit": "913337a9a8559cac2470db8f31792eb8391167db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxNzM0NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437217345", "bodyText": "[PMD Java] The String literal \" invalid json, abi: {}, e: {} \" appears 4 times in this file; the first occurrence is on line 83 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T08:10:35Z", "path": "src/main/java/org/fisco/bcos/web3j/tx/txdecode/ContractAbiUtil.java", "diffHunk": "@@ -38,31 +44,45 @@\n      * @return\n      */\n     public static AbiDefinition getConstructorAbiDefinition(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n-        AbiDefinition result = null;\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n-                result = abiDefinition;\n-                break;\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n+                    return abiDefinition;\n+                }\n             }\n+        } catch (JsonProcessingException e) {\n+            logger.warn(\" invalid  json, abi: {}, e: {} \", contractAbi, e);\n+        } catch (IOException e) {\n+            logger.warn(\" invalid  json, abi: {}, e: {} \", contractAbi, e);\n         }\n-        return result;\n+        return null;\n     }\n \n     /**\n      * @param contractAbi\n      * @return\n      */\n     public static List<AbiDefinition> getFuncAbiDefinition(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n         List<AbiDefinition> result = new ArrayList<>();\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_FUNCTION.equals(abiDefinition.getType())\n-                    || TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n-                result.add(abiDefinition);\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_FUNCTION.equals(abiDefinition.getType())\n+                        || TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n+                    result.add(abiDefinition);\n+                }\n             }\n+        } catch (JsonProcessingException e) {\n+            logger.warn(\" invalid json, abi: {}, e: {} \", contractAbi, e);", "originalCommit": "913337a9a8559cac2470db8f31792eb8391167db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0bbc5e566bd4efde3b8fbe3d6bf6fa43f1cf9656", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/0bbc5e566bd4efde3b8fbe3d6bf6fa43f1cf9656", "message": "remove fastjson", "committedDate": "2020-06-09T16:26:54Z", "type": "commit"}, {"oid": "0bbc5e566bd4efde3b8fbe3d6bf6fa43f1cf9656", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/0bbc5e566bd4efde3b8fbe3d6bf6fa43f1cf9656", "message": "remove fastjson", "committedDate": "2020-06-09T16:26:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MjQzMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437562432", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T16:27:30Z", "path": "src/main/java/org/fisco/bcos/web3j/tx/txdecode/ContractAbiUtil.java", "diffHunk": "@@ -38,49 +42,69 @@\n      * @return\n      */\n     public static AbiDefinition getConstructorAbiDefinition(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n-        AbiDefinition result = null;\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n-                result = abiDefinition;\n-                break;\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n+                    return abiDefinition;\n+                }\n             }\n+        } catch (Exception e) {", "originalCommit": "0bbc5e566bd4efde3b8fbe3d6bf6fa43f1cf9656", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MjQzMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437562433", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T16:27:31Z", "path": "src/main/java/org/fisco/bcos/web3j/tx/txdecode/ContractAbiUtil.java", "diffHunk": "@@ -38,49 +42,69 @@\n      * @return\n      */\n     public static AbiDefinition getConstructorAbiDefinition(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n-        AbiDefinition result = null;\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n-                result = abiDefinition;\n-                break;\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n+                    return abiDefinition;\n+                }\n             }\n+        } catch (Exception e) {\n+            logger.warn(\" invalid  json, abi: {}, e: \", contractAbi, e);\n         }\n-        return result;\n+        return null;\n     }\n \n     /**\n      * @param contractAbi\n      * @return\n      */\n     public static List<AbiDefinition> getFuncAbiDefinition(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n         List<AbiDefinition> result = new ArrayList<>();\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_FUNCTION.equals(abiDefinition.getType())\n-                    || TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n-                result.add(abiDefinition);\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_FUNCTION.equals(abiDefinition.getType())\n+                        || TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n+                    result.add(abiDefinition);\n+                }\n             }\n+\n+            return result;\n+        } catch (Exception e) {", "originalCommit": "0bbc5e566bd4efde3b8fbe3d6bf6fa43f1cf9656", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MjQzOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/595#discussion_r437562438", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.23.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-06-09T16:27:31Z", "path": "src/main/java/org/fisco/bcos/web3j/tx/txdecode/ContractAbiUtil.java", "diffHunk": "@@ -38,49 +42,69 @@\n      * @return\n      */\n     public static AbiDefinition getConstructorAbiDefinition(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n-        AbiDefinition result = null;\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n-                result = abiDefinition;\n-                break;\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n+                    return abiDefinition;\n+                }\n             }\n+        } catch (Exception e) {\n+            logger.warn(\" invalid  json, abi: {}, e: \", contractAbi, e);\n         }\n-        return result;\n+        return null;\n     }\n \n     /**\n      * @param contractAbi\n      * @return\n      */\n     public static List<AbiDefinition> getFuncAbiDefinition(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n         List<AbiDefinition> result = new ArrayList<>();\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_FUNCTION.equals(abiDefinition.getType())\n-                    || TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n-                result.add(abiDefinition);\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_FUNCTION.equals(abiDefinition.getType())\n+                        || TYPE_CONSTRUCTOR.equals(abiDefinition.getType())) {\n+                    result.add(abiDefinition);\n+                }\n             }\n+\n+            return result;\n+        } catch (Exception e) {\n+            logger.warn(\" invalid json, abi: {}, e: \", contractAbi, e);\n+            return new ArrayList<>();\n         }\n-        return result;\n     }\n \n     /**\n      * @param contractAbi\n      * @return\n      */\n     public static List<AbiDefinition> getEventAbiDefinitions(String contractAbi) {\n-        JSONArray abiArr = JSONArray.parseArray(contractAbi);\n         List<AbiDefinition> result = new ArrayList<>();\n-        for (Object object : abiArr) {\n-            AbiDefinition abiDefinition = JSON.parseObject(object.toString(), AbiDefinition.class);\n-            if (TYPE_EVENT.equals(abiDefinition.getType())) {\n-                result.add(abiDefinition);\n+        try {\n+            ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+            AbiDefinition[] abiDefinitions =\n+                    objectMapper.readValue(contractAbi, AbiDefinition[].class);\n+\n+            for (AbiDefinition abiDefinition : abiDefinitions) {\n+                if (TYPE_EVENT.equals(abiDefinition.getType())) {\n+                    result.add(abiDefinition);\n+                }\n             }\n+\n+            return result;\n+        } catch (Exception e) {", "originalCommit": "0bbc5e566bd4efde3b8fbe3d6bf6fa43f1cf9656", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}