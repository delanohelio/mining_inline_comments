{"pr_number": 715, "pr_title": "update netty-all to 4.1.53 and update netty-sm-ssl-context to 1.2.0", "pr_createdAt": "2020-10-22T02:24:02Z", "pr_url": "https://github.com/FISCO-BCOS/web3sdk/pull/715", "timeline": [{"oid": "cd7208b908ebc0cdcb87156ee0a8a0345ff8e912", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/cd7208b908ebc0cdcb87156ee0a8a0345ff8e912", "message": "update netty-all to 4.1.53 and update netty-sm-ssl-context to 1.2.0", "committedDate": "2020-10-22T02:22:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAyNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015026", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:33Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());\n+\n+        } catch (Exception e) {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAyOA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015028", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:34Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzMA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015030", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:34Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015032", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:34Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015034", "bodyText": "[PMD Java] Overridable method 'init' called during object construction (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nConstructorCallsOverridableMethod\nError Prone\n1\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:34Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015036", "bodyText": "[PMD Java] The class 'BlockTransactionReceiptsInfo' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=5) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:34Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.util.List;\n+\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+\n+public class BlockTransactionReceipts\n+        extends Response<BlockTransactionReceipts.BlockTransactionReceiptsInfo> {\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts() {\n+        return getResult();\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzOQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015039", "bodyText": "[PMD Java] The class 'BlockInfo' is suspected to be a Data Class (WOC=11.111%, NOPA=0, NOAM=8, WMC=9) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:34Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.util.List;\n+\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+\n+public class BlockTransactionReceipts\n+        extends Response<BlockTransactionReceipts.BlockTransactionReceiptsInfo> {\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts() {\n+        return getResult();\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {\n+        private BlockInfo blockInfo;\n+        private List<TransactionReceipt> transactionReceipts;\n+\n+        public BlockInfo getBlockInfo() {\n+            return blockInfo;\n+        }\n+\n+        public void setBlockInfo(BlockInfo blockInfo) {\n+            this.blockInfo = blockInfo;\n+        }\n+\n+        public List<TransactionReceipt> getTransactionReceipts() {\n+            return transactionReceipts;\n+        }\n+\n+        public void setTransactionReceipts(List<TransactionReceipt> transactionReceipts) {\n+            this.transactionReceipts = transactionReceipts;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ReceiptsInfo{\"\n+                    + \"blockInfo=\"\n+                    + blockInfo\n+                    + \", transactionReceipts=\"\n+                    + transactionReceipts\n+                    + '}';\n+        }\n+    }\n+\n+    public static class BlockInfo {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA0Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015043", "bodyText": "[PMD Java] System.exit() should not be used in J2EE/JEE apps (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDoNotCallSystemExit\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#donotcallsystemexit\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:35Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA0Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015047", "bodyText": "[PMD Java] System.exit() should not be used in J2EE/JEE apps (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDoNotCallSystemExit\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#donotcallsystemexit\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:35Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());\n+\n+        } catch (Exception e) {\n+            System.out.println(\" Failed => \" + e.getMessage());\n+            logger.error(\"e: \", e);\n+        } finally {\n+            System.exit(0);", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA1MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015051", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:35Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA1Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015052", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:35Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA1Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015056", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:35Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015060", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:35Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2Mg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015062", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:36Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015065", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:36Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015068", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:36Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA3NA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015074", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:36Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA3Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015076", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:36Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA3OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015078", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:36Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4MA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015080", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:37Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015083", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:37Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015086", "bodyText": "[PMD Java] A switch statement does not contain a break (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nMissingBreakInSwitch\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#missingbreakinswitch\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:37Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4OQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015089", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:37Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA5MQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015091", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:37Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA5NQ==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015095", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:37Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA5Nw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015097", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:37Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTEwMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015102", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:38Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTEwNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015104", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:38Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTEwNw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015107", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:38Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTExNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015114", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T09:27:38Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());", "originalCommit": "3b91509331bc45b2d5a2a7d23106be73d8b85533", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5d08d0924cb86ea4cb6aa264472c8e20e92f47b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/d5d08d0924cb86ea4cb6aa264472c8e20e92f47b", "message": "add getBlockTransactionReceipts and getBlockTransactionReceiptsByHash", "committedDate": "2020-10-22T12:07:17Z", "type": "commit"}, {"oid": "d5d08d0924cb86ea4cb6aa264472c8e20e92f47b", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/d5d08d0924cb86ea4cb6aa264472c8e20e92f47b", "message": "add getBlockTransactionReceipts and getBlockTransactionReceiptsByHash", "committedDate": "2020-10-22T12:07:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTA5OA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121098", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T12:30:26Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);", "originalCommit": "d908e3739f5676bd3b333d53e46174a7cf059b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTEwMw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121103", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T12:30:27Z", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);\n+\n+        /** zip compression data */\n+        byte[] jsonData = uncompress(zipData);\n+\n+        BlockTransactionReceiptsInfo blockTransactionReceiptsInfo =\n+                ObjectMapperFactory.getObjectMapper()", "originalCommit": "d908e3739f5676bd3b333d53e46174a7cf059b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTEwNg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121106", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T12:30:27Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());", "originalCommit": "d908e3739f5676bd3b333d53e46174a7cf059b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTExMg==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121112", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T12:30:27Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());", "originalCommit": "d908e3739f5676bd3b333d53e46174a7cf059b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTExNA==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121114", "bodyText": "[PMD Java] The initializer for variable 'blockTxReceipts' is never used (overwritten on line 112) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUnusedAssignment\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#unusedassignment\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T12:30:27Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;", "originalCommit": "d908e3739f5676bd3b333d53e46174a7cf059b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "message": "update getBlockTransactionReceipts and getBlockTransactionReceiptsByHash inteface", "committedDate": "2020-10-22T12:45:59Z", "type": "commit"}, {"oid": "4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "url": "https://github.com/FISCO-BCOS/web3sdk/commit/4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "message": "update getBlockTransactionReceipts and getBlockTransactionReceiptsByHash inteface", "committedDate": "2020-10-22T12:45:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzMTU2Mw==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510131563", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T12:47:09Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\n+                    \" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());", "originalCommit": "4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzMTU2Ng==", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510131566", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "author": "sider", "createdAt": "2020-10-22T12:47:09Z", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(", "originalCommit": "4394c5f5d77b7946b57152d1dfa500f63ef4dc71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}