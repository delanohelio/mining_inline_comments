{"pr_number": 7088, "pr_title": "Performance optimization for ProfiledCasesCounter", "pr_createdAt": "2020-01-31T18:19:45Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/7088", "timeline": [{"oid": "d7f2ce4c3d89cbcd531d64caec8b148df244333f", "url": "https://github.com/cBioPortal/cbioportal/commit/d7f2ce4c3d89cbcd531d64caec8b148df244333f", "message": "Performance optimization for ProfiledCasesCounter\n- Original code loops through genes and calculates gene panel cases each time\n- Cache/store gene panel cases and reuse instead of recalculating\n- Other cleanup related to creating maps to store reused objects", "committedDate": "2020-02-03T14:21:56Z", "type": "forcePushed"}, {"oid": "ab3d20b195ea8f04331ce0eb7373e2cb50d80cca", "url": "https://github.com/cBioPortal/cbioportal/commit/ab3d20b195ea8f04331ce0eb7373e2cb50d80cca", "message": "Performance optimization for ProfiledCasesCounter\n- Original code loops through genes and calculates gene panel cases each time\n- Cache/store gene panel cases and reuse instead of recalculating\n- Other cleanup related to creating maps to store reused objects", "committedDate": "2020-02-03T14:25:59Z", "type": "forcePushed"}, {"oid": "7ece85bb02c3bec8cc69778b8bd0f4448a979437", "url": "https://github.com/cBioPortal/cbioportal/commit/7ece85bb02c3bec8cc69778b8bd0f4448a979437", "message": "Performance optimization for ProfiledCasesCounter\n- Original code loops through genes and calculates gene panel cases each time\n- Cache/store gene panel cases and reuse instead of recalculating\n- Other cleanup related to creating maps to store reused objects", "committedDate": "2020-02-03T14:27:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MzA0MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7088#discussion_r374173040", "bodyText": "let's revert this change here @averyniceday", "author": "ao508", "createdAt": "2020-02-03T15:37:44Z", "path": "web/src/main/java/org/cbioportal/web/StudyViewController.java", "diffHunk": "@@ -281,7 +281,6 @@\n                 });\n             }\n         }\n-", "originalCommit": "7ece85bb02c3bec8cc69778b8bd0f4448a979437", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2712375fe8152540fe978a2422738da8e58c669", "url": "https://github.com/cBioPortal/cbioportal/commit/d2712375fe8152540fe978a2422738da8e58c669", "message": "Performance optimization for ProfiledCasesCounter\n- Original code loops through genes and calculates gene panel cases each time\n- Cache/store gene panel cases and reuse instead of recalculating\n- Other cleanup related to creating maps to store reused objects", "committedDate": "2020-02-03T17:22:50Z", "type": "commit"}, {"oid": "d2712375fe8152540fe978a2422738da8e58c669", "url": "https://github.com/cBioPortal/cbioportal/commit/d2712375fe8152540fe978a2422738da8e58c669", "message": "Performance optimization for ProfiledCasesCounter\n- Original code loops through genes and calculates gene panel cases each time\n- Cache/store gene panel cases and reuse instead of recalculating\n- Other cleanup related to creating maps to store reused objects", "committedDate": "2020-02-03T17:22:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MzgyNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7088#discussion_r374783824", "bodyText": "I think this loop could be combined with the previous loop (the iteration is the same), although I am not positive. If the three inner lines were appended to the inner lines of the previous loop would the data still be valid?\nLooping twice is perhaps not too much overhead, if it is helpful for code clarity.", "author": "sheridancbio", "createdAt": "2020-02-04T16:35:14Z", "path": "service/src/main/java/org/cbioportal/service/util/ProfiledCasesCounter.java", "diffHunk": "@@ -58,32 +59,42 @@ public void calculate(List<String> molecularProfileIds, List<String> sampleIds,\n                 .map(x -> x.getStudyId() + (countByPatients ? x.getPatientId() : x.getSampleId()))\n                 .collect(Collectors.toSet());\n \n+        \n+        Map<String, Set<String>> genePanelToCases = new HashMap<String, Set<String>>();\n+        \n         for (AlterationCountByGene alterationCountByGene : alterationCounts) {\n             final Set<String> profiledCasesForGene = new HashSet<String>();\n             Integer entrezGeneId = alterationCountByGene.getEntrezGeneId();\n             List<GenePanel> allPanels = new ArrayList<>();\n             \n+            Set<String> totalProfiledCases = new HashSet<String>();\n+            Set<String> allMatchingGenePanelIds = new HashSet<String>();\n+            // different calculations depending on if gene is linked to gene panels \n             if (geneGenePanelMap.containsKey(entrezGeneId)) {\n-                geneGenePanelMap.get(entrezGeneId).forEach(genePanel -> {\n-                    Set<String> casesWithPanelData = genePanelDataMap\n+                // calculate and store cases for each gene panel\n+                for (GenePanel genePanel : geneGenePanelMap.get(entrezGeneId)) {\n+                    if (!genePanelToCases.containsKey(genePanel.getStableId())) {\n+                        Set<String> casesWithPanelData = genePanelDataMap\n                             .get(genePanel.getStableId())\n                             .stream()\n-                            // there can be duplicate patient or sample id, append study id\n                             .map(x -> x.getStudyId() + (countByPatients ? x.getPatientId() : x.getSampleId()))\n                             .collect(Collectors.toSet());\n-                    profiledCasesForGene.addAll(casesWithPanelData);\n-                    allPanels.add(genePanel);\n-                });\n-                \n-                profiledCasesForGene.addAll(casesWithoutPanelData);\n+                        genePanelToCases.put(genePanel.getStableId(), casesWithPanelData);\n+                    }\n+                }\n+                // for every gene panel associated containing the gene, use the sum of unique cases\n+                // as well as cases without panel data\n+                for (GenePanel genePanel : geneGenePanelMap.get(entrezGeneId)) {", "originalCommit": "d2712375fe8152540fe978a2422738da8e58c669", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNTI1MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7088#discussion_r374835250", "bodyText": "Updated genePanelToCases can be completely outside of block iterating alterationCounts (line 63).\nmay be\n        Map<String, Set<String>> genePanelToCases = genePanelDataMap\n                .entrySet().stream()\n                .collect(Collectors\n                        .toMap(\n                                e -> e.getKey(),\n                                e -> {\n                                    return e.getValue()\n                                            .stream()\n                                            .map(x -> x.getStudyId() + (countByPatients ? x.getPatientId() : x.getSampleId()))\n                                            .collect(Collectors.toSet());\n                                    }\n                                ));", "author": "kalletlak", "createdAt": "2020-02-04T18:09:29Z", "path": "service/src/main/java/org/cbioportal/service/util/ProfiledCasesCounter.java", "diffHunk": "@@ -58,32 +59,42 @@ public void calculate(List<String> molecularProfileIds, List<String> sampleIds,\n                 .map(x -> x.getStudyId() + (countByPatients ? x.getPatientId() : x.getSampleId()))\n                 .collect(Collectors.toSet());\n \n+        \n+        Map<String, Set<String>> genePanelToCases = new HashMap<String, Set<String>>();\n+        \n         for (AlterationCountByGene alterationCountByGene : alterationCounts) {\n             final Set<String> profiledCasesForGene = new HashSet<String>();\n             Integer entrezGeneId = alterationCountByGene.getEntrezGeneId();\n             List<GenePanel> allPanels = new ArrayList<>();\n             \n+            Set<String> totalProfiledCases = new HashSet<String>();\n+            Set<String> allMatchingGenePanelIds = new HashSet<String>();\n+            // different calculations depending on if gene is linked to gene panels \n             if (geneGenePanelMap.containsKey(entrezGeneId)) {\n-                geneGenePanelMap.get(entrezGeneId).forEach(genePanel -> {\n-                    Set<String> casesWithPanelData = genePanelDataMap\n+                // calculate and store cases for each gene panel\n+                for (GenePanel genePanel : geneGenePanelMap.get(entrezGeneId)) {", "originalCommit": "d2712375fe8152540fe978a2422738da8e58c669", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1NjU0OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7088#discussion_r374856549", "bodyText": "I'm still trying to intuitively understand these constructs.\nMy interpretation of your suggested code:\nGenePanelData records are linkages between a sample/patient/profile/gene_panel/study and a boolean flag for whether or not the sample was \"profiled\". I don't fully understand how a sample would be part of a genetic profile and yet not be profiled ... although I guess I know that there are some samples which are part of a mutation profile and which were profiled but for which no mutation events were found. I still think there is some constraint in this collection of objects which I do not understand.\nAnyway, what we fetch via fetchGenePanelDataInMultipleMolecularProfiles is a big aggregate of all of these membership records, and then we group these into buckets based on the gene panel id. So the map genePanelDataMap has one bucket of sample memberships per panel. These can span across profiles and studies.\nSo the suggested code will loop through every entry in genePanelDataMap (each panel) and insert a mapping from the panel_id to a set of \"sample/study\" identifier strings, which will be constructed by looping through each of the membership records which were in the bucket for that gene panel, and aggregating / uniqueifying the cases.\nOnce this is done, we would not need to check within the loop which examines all genes whether or not the genePanelToCases entry for this gene panel needs to be computed or not --- because we have precomputed all of them.\nOk, I think I understand.", "author": "sheridancbio", "createdAt": "2020-02-04T18:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNTI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNjI0MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7088#discussion_r374836240", "bodyText": "never used. cleanup", "author": "kalletlak", "createdAt": "2020-02-04T18:11:28Z", "path": "service/src/main/java/org/cbioportal/service/util/ProfiledCasesCounter.java", "diffHunk": "@@ -58,32 +59,42 @@ public void calculate(List<String> molecularProfileIds, List<String> sampleIds,\n                 .map(x -> x.getStudyId() + (countByPatients ? x.getPatientId() : x.getSampleId()))\n                 .collect(Collectors.toSet());\n \n+        \n+        Map<String, Set<String>> genePanelToCases = new HashMap<String, Set<String>>();\n+        \n         for (AlterationCountByGene alterationCountByGene : alterationCounts) {\n             final Set<String> profiledCasesForGene = new HashSet<String>();", "originalCommit": "d2712375fe8152540fe978a2422738da8e58c669", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzNjQyOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7088#discussion_r374836429", "bodyText": "never used. cleanup", "author": "kalletlak", "createdAt": "2020-02-04T18:11:46Z", "path": "service/src/main/java/org/cbioportal/service/util/ProfiledCasesCounter.java", "diffHunk": "@@ -58,32 +59,42 @@ public void calculate(List<String> molecularProfileIds, List<String> sampleIds,\n                 .map(x -> x.getStudyId() + (countByPatients ? x.getPatientId() : x.getSampleId()))\n                 .collect(Collectors.toSet());\n \n+        \n+        Map<String, Set<String>> genePanelToCases = new HashMap<String, Set<String>>();\n+        \n         for (AlterationCountByGene alterationCountByGene : alterationCounts) {\n             final Set<String> profiledCasesForGene = new HashSet<String>();\n             Integer entrezGeneId = alterationCountByGene.getEntrezGeneId();\n             List<GenePanel> allPanels = new ArrayList<>();", "originalCommit": "d2712375fe8152540fe978a2422738da8e58c669", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "24255d505c33fe21e46c7879edd17099c97873e7", "url": "https://github.com/cBioPortal/cbioportal/commit/24255d505c33fe21e46c7879edd17099c97873e7", "message": "precompute gene panel cases prior to gene loop\n- move computation of membership to start of calculate() function\n- instead of partitioning GenePanelData records first into gene panel and later constructing unique case string set ... directly compute set and store in map\n- create shared function for computing unique case id based on boolean countByPatients", "committedDate": "2020-02-04T21:31:57Z", "type": "commit"}, {"oid": "4cf2986ad994056670281b3a18060d8702b14588", "url": "https://github.com/cBioPortal/cbioportal/commit/4cf2986ad994056670281b3a18060d8702b14588", "message": "Merge pull request #13 from sheridancbio/studyview-performance\n\nprecompute gene panel cases prior to gene loop", "committedDate": "2020-02-04T21:32:15Z", "type": "commit"}]}