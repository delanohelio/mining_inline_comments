{"pr_number": 7695, "pr_title": "Add script that allows for update to existing gene panel ", "pr_createdAt": "2020-07-16T03:09:03Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/7695", "timeline": [{"oid": "f0d9601c902af9c39ffe071580e7f02fc6cc0e51", "url": "https://github.com/cBioPortal/cbioportal/commit/f0d9601c902af9c39ffe071580e7f02fc6cc0e51", "message": "Added UpdateGenePanel", "committedDate": "2020-07-16T13:43:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0MjUxOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r456642519", "bodyText": "moved the conditions out of the else block", "author": "jtquach1", "createdAt": "2020-07-17T19:48:11Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -264,63 +258,55 @@ private static void updateGenePanelGeneList(Integer internalId, Set<CanonicalGen\n                 return;\n             }\n \n-            else {", "originalCommit": "e35b40daadfba1182fb2446d44468b472e663b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNDQ5MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r456704490", "bodyText": "System.err.println() displays red text in Eclipse console.\nSystem.out.println() displays black text.", "author": "jtquach1", "createdAt": "2020-07-17T22:47:03Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -185,6 +207,35 @@ public UpdateGenePanel(String[] args) {\n      */\n     public static void main(String[] args) {\n         ConsoleRunnable runner = new UpdateGenePanel(args);\n-        runner.runInConsole();\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+\n+        System.err.println(\"WARNING: This script is ONLY for updating a gene panel, not for adding a new gene panel. To add a new gene panel, run the ImportGenePanel script.\");", "originalCommit": "e35b40daadfba1182fb2446d44468b472e663b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDg3OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r456944879", "bodyText": "not sure if I should've used a Pair instead, but the type casting messages to Set don't seem to crash anything", "author": "jtquach1", "createdAt": "2020-07-19T19:20:02Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -199,114 +197,137 @@ public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canon\n         }\n \n         try {\n-        \tupdateGenePanelGeneList(internalId, canonicalGenes);\n+            updateGenePanelGeneList(internalId, canonicalGenes);\n         } finally {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n         }\n     }\n \n-    \n-    /*copied from addGenePanelGeneList above*/\n-    private static void updateGenePanelGeneList(Integer internalId, Set<CanonicalGene> canonicalGenes) throws DaoException {\n+    /**\n+     * Gets a pair representing the sets of genes to add and to remove from a gene\n+     * panel in the database.\n+     * \n+     * @param incoming\n+     * @param original\n+     * @return\n+     */\n+    private static Object[] getAddRemove(Set<CanonicalGene> incoming, Set<CanonicalGene> original) {\n+        // A -> incoming, B -> original\n+        Set<CanonicalGene> toAdd = new HashSet<CanonicalGene>();\n+        Set<CanonicalGene> toRemove = new HashSet<CanonicalGene>();\n+        Set<CanonicalGene> AnB = intersectionTwoLists(new ArrayList<>(incoming), new ArrayList<>(original));\n+        Set<CanonicalGene> AuB = unionTwoLists(new ArrayList<>(incoming), new ArrayList<>(original));\n+\n+        // 1. Is A == B?\n+        if (AnB.equals(AuB)) {\n+            ;\n+        }\n+\n+        // 2. Is A ^ B = nil?\n+        else if (AnB.isEmpty()) {\n+            // Remove B\n+            toRemove = original;\n+            // Add A\n+            toAdd = incoming;\n+        }\n+\n+        // 3. Is AnB == B?\n+        else if (AnB.equals(original)) {\n+            // Add A - B\n+            toAdd = diffTwoLists(new ArrayList<>(incoming), new ArrayList<>(original));\n+        }\n+\n+        // 4. Is AnB == A?\n+        else if (AnB.equals(incoming)) {\n+            // Remove B - A\n+            toRemove = diffTwoLists(new ArrayList<>(original), new ArrayList<>(incoming));\n+        }\n+\n+        // 5. Intersect but neither are supersets of one other\n+        else {\n+            // Add A - AnB\n+            toAdd = diffTwoLists(new ArrayList<>(incoming), new ArrayList<>(AnB));\n+            // Remove B - AnB\n+            toRemove = diffTwoLists(new ArrayList<>(original), new ArrayList<>(AnB));\n+        }\n+\n+        return new Object[] { toAdd, toRemove };", "originalCommit": "5e8a40192716334588c0b2f748ded5cec21e84da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2ODk0Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457468947", "bodyText": "After you make the edits lets talk about your options here.", "author": "Luke-Sikina", "createdAt": "2020-07-20T15:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MjA0Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r455772047", "bodyText": "I have a hunch that Windows is changing the newline characters in this file, hence the weird diff. I'll look around for solutions.", "author": "Luke-Sikina", "createdAt": "2020-07-16T13:08:37Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -1,184 +1,384 @@\n-/*\n- * Copyright (c) 2017 Memorial Sloan-Kettering Cancer Center.\n- *\n- * This library is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n- * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n- * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n- * obligations to provide maintenance, support, updates, enhancements or\n- * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n- * liable to any party for direct, indirect, special, incidental or\n- * consequential damages, including lost profits, arising out of the use of this\n- * software and its documentation, even if Memorial Sloan-Kettering Cancer\n- * Center has been advised of the possibility of such damage.\n- */\n-\n-/*\n- * This file is part of cBioPortal.\n- *\n- * cBioPortal is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as\n- * published by the Free Software Foundation, either version 3 of the\n- * License.\n- *\n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-*/\n-\n-package org.mskcc.cbio.portal.dao;\n-\n-import java.sql.*;\n-import java.util.*;\n-import org.mskcc.cbio.portal.model.*;\n-\n-/**\n- *\n- * @author heinsz\n- */\n-public class DaoGenePanel {\n-    private static Map<String, GenePanel> genePanelMap = initMap();\n-\n-    public static GenePanel getGenePanelByStableId(String stableId) {\n-        return genePanelMap.get(stableId);\n-    }\n-\n-    private static Map<String, GenePanel> initMap() {\n-        Map<String, GenePanel> genePanelMap = null;\n-        Connection con = null;\n-        PreparedStatement pstmt = null;\n-        ResultSet rs = null;\n-        try {\n-            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n-            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel\");\n-            rs = pstmt.executeQuery();\n-            genePanelMap = extractGenePanelMap(rs);\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        } catch (DaoException e) {\n-            e.printStackTrace();\n-        } finally {\n-            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n-        }\n-        return genePanelMap;\n-    }\n-\n-    private static Map<String, GenePanel> extractGenePanelMap(ResultSet rs) throws DaoException {\n-        Map<String, GenePanel> genePanelMap = new HashMap<>();\n-        try {\n-            while(rs.next()) {\n-                GenePanel gp = new GenePanel();\n-                gp.setInternalId(rs.getInt(\"INTERNAL_ID\"));\n-                gp.setStableId(rs.getString(\"STABLE_ID\"));\n-                gp.setDescription(rs.getString(\"DESCRIPTION\"));\n-                gp.setGenes(extractGenePanelGenes(gp.getInternalId()));\n-                genePanelMap.put(gp.getStableId(), gp);\n-            }\n-        }\n-        catch (SQLException e) {\n-            throw new DaoException(e);\n-        }\n-        return genePanelMap;\n-    }\n-\n-    private static Set<CanonicalGene> extractGenePanelGenes(Integer genePanelId) throws DaoException {\n-        Connection con = null;\n-        PreparedStatement pstmt = null;\n-        ResultSet rs = null;\n-        HashSet<CanonicalGene> toReturn = new HashSet<CanonicalGene>();\n-        try {\n-            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n-            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel_list where INTERNAL_ID = ?\");\n-            pstmt.setInt(1, genePanelId);\n-            rs = pstmt.executeQuery();\n-            DaoGeneOptimized daoGeneOpt = DaoGeneOptimized.getInstance();\n-            while (rs.next()) {\n-                CanonicalGene gene = daoGeneOpt.getGene(rs.getLong(2));\n-                toReturn.add(gene);\n-            }\n-        }\n-        catch (SQLException e) {\n-            throw new DaoException(e);\n-        }\n-        finally {\n-            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n-        }\n-        return toReturn;\n-    }\n-\n-    public static void addGenePanel(String stableId, String description, Set<CanonicalGene> canonicalGenes) throws DaoException {\n-        Connection con = null;\n-        PreparedStatement pstmt = null;\n-        ResultSet rs = null;\n-\n-        if (stableId == null) {\n-            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n-        }\n-        if (canonicalGenes == null || canonicalGenes.isEmpty()) {\n-            throw new DaoException(\"Gene Panel gene list cannot be null or empty.\");\n-        }\n-\n-        try {\n-            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n-            pstmt = con.prepareStatement(\"INSERT INTO gene_panel (`STABLE_ID`, `DESCRIPTION`) VALUES (?,?)\", Statement.RETURN_GENERATED_KEYS);\n-            pstmt.setString(1, stableId);\n-            pstmt.setString(2, description);\n-            pstmt.executeUpdate();\n-            rs = pstmt.getGeneratedKeys();\n-            if (rs.next()) {\n-                addGenePanelGeneList(rs.getInt(1), canonicalGenes);\n-                // add panel to class map\n-                GenePanel gp = new GenePanel();\n-                gp.setInternalId(rs.getInt(1));\n-                gp.setStableId(stableId);\n-                gp.setDescription(description);\n-                gp.setGenes(canonicalGenes);\n-                genePanelMap.put(stableId, gp);\n-            }\n-        } catch (SQLException e) {\n-            throw new DaoException(e);\n-        } finally {\n-            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n-        }\n-    }\n-\n-    private static void addGenePanelGeneList(Integer internalId, Set<CanonicalGene> canonicalGenes) throws DaoException {\n-        Connection con = null;\n-        PreparedStatement pstmt = null;\n-        ResultSet rs = null;\n-        try {\n-            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n-            for (CanonicalGene canonicalGene : canonicalGenes) {\n-                pstmt = con.prepareStatement(\"INSERT INTO gene_panel_list (`INTERNAL_ID`, `GENE_ID`) VALUES (?,?)\");\n-                pstmt.setInt(1, internalId);\n-                pstmt.setLong(2, canonicalGene.getEntrezGeneId());\n-                pstmt.executeUpdate();\n-            }\n-        } catch (SQLException e) {\n-            throw new DaoException(e);\n-        } finally {\n-            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n-        }\n-    }\n-\n-\n-    public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n-        Connection con = null;\n-        PreparedStatement pstmt = null;\n-        try {\n-            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n-            pstmt = con.prepareStatement(\"DELETE from gene_panel WHERE INTERNAL_ID = ?\");\n-            pstmt.setInt(1, genePanel.getInternalId());\n-            pstmt.executeUpdate();\n-            genePanelMap.remove(genePanel.getStableId());\n-        } catch (SQLException e) {\n-            throw new DaoException(e);\n-        } finally {\n-            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n-        }\n-    }\n-}\n+/*\r", "originalCommit": "21b2133da3d16b73ebaffb2f0bb745ffd9945a2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5MzM4MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457493381", "bodyText": "I think so too, as I get this message from doing commits:\njtquach@DESKTOP-IST3H2B:~/cbioportal_windows10$ git add core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java\nwarning: LF will be replaced by CRLF in core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java.\nThe file will have its original line endings in your working directory", "author": "jtquach1", "createdAt": "2020-07-20T15:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MjA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MzY3NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457373674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n          \n          \n            \n                    System.err.println(\"Proceed? This action is irreversible. (Y/n)\");", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:18:16Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzAyMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457377021", "bodyText": "genePanel != null is always true because if genePanel were null, you would NPE inside DaoGenePanel.updatePreview(genePanel, canonicalGenes);", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:22:13Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjEzOA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457646138", "bodyText": "The null check has been removed now (well earlier, but I forgot to respond here)", "author": "jtquach1", "createdAt": "2020-07-20T19:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3OTcwMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457379700", "bodyText": "This should not be static. Rule of thumb with Java - unless something needs to be static, don't make it static.", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:25:11Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NjI1Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457466252", "bodyText": "The functions I changed from ImportGenePanel were importData and main, so getPropertyValue and all other functions were part of the original implementation.\nI will keep this in mind, though!", "author": "jtquach1", "createdAt": "2020-07-20T14:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3OTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MDYwMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457380603", "bodyText": "Are you planning to use this in more than 1 place? Right now both propertyName and noSpaceAllowed are effectively constant.", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:26:12Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5NjM0MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457496341", "bodyText": "I think I might delete the methods getPropertyValue and getGenes since they're static and already defined in ImportGenePanel, although I'm not sure if that's a good programming practice?", "author": "jtquach1", "createdAt": "2020-07-20T15:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MDYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMTYwNQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457501605", "bodyText": "Never mind, getPropertyValue and getGenes are private (not public)", "author": "jtquach1", "createdAt": "2020-07-20T15:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MDYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NjMyMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457646322", "bodyText": "changed to public as part of GenePanelUtil.java", "author": "jtquach1", "createdAt": "2020-07-20T19:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MDYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MjEyMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457382120", "bodyText": "This is pedantic, but I do not like this method name. I generally reserve get method names for true accessors. I would call this extractGenes or something like that.", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:27:54Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties) {", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0Njg5Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457646892", "bodyText": "acknowledged and changed!", "author": "jtquach1", "createdAt": "2020-07-20T19:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MjEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MzcxNg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457383716", "bodyText": "Is the property key for the genes ever going to not be gene_list? If no, we don't need the propertyName param.", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:29:37Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties) {", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTQ2OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457569468", "bodyText": "It looks like this is the history for ImportGenePanel, with the last commit from Jun 3 showing the latest implementation to getGenes.\nI'm also wondering if I should put my username as part of the \"author\" comment in UpdateGenePanel..?", "author": "jtquach1", "createdAt": "2020-07-20T17:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MzcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2OTMxMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458369312", "bodyText": "Now I understand what you mean; I think getting rid of propertyName and just using gene_list would be clearer too given the method name", "author": "jtquach1", "createdAt": "2020-07-21T20:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MzcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NTg5MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457385890", "bodyText": "propertyValue == null is always true right now.", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:32:06Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties) {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+        if (propertyValue == null || propertyValue.length() == 0) {", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyODg3OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457628879", "bodyText": "When I hover over the propertyValue == null condition in GenePanelUtil.java, IntelliJ says Condition 'propertyValue == null' is always 'false' and 'Simplify provertyValue == null' to false", "author": "jtquach1", "createdAt": "2020-07-20T19:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2ODA3Ng==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458368076", "bodyText": "update: removed propertyValue == null", "author": "jtquach1", "createdAt": "2020-07-21T20:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NjA0NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457386044", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \treturn new HashSet<CanonicalGene>();\n          \n          \n            \n                    \treturn new HashSet<>();", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:32:17Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties) {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+        \treturn new HashSet<CanonicalGene>();", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4NjY2NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457386664", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<CanonicalGene> canonicalGenes = new HashSet<CanonicalGene>();\n          \n          \n            \n                    Set<CanonicalGene> canonicalGenes = new HashSet<>();", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:32:55Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties) {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+        \treturn new HashSet<CanonicalGene>();\n+        }\n+\n+        String[] genes = propertyValue.split(\"\\t\");\n+        Set<CanonicalGene> canonicalGenes = new HashSet<CanonicalGene>();", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNDA5Mw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457404093", "bodyText": "We have this y/N parsing logic in two places. Let's make a method that parses it and returns a boolean and use it in both places.", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:52:05Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2016 Memorial Sloan-Kettering Cancer Center.\n+ *\n+ * This library is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS\n+ * FOR A PARTICULAR PURPOSE. The software and documentation provided hereunder\n+ * is on an \"as is\" basis, and Memorial Sloan-Kettering Cancer Center has no\n+ * obligations to provide maintenance, support, updates, enhancements or\n+ * modifications. In no event shall Memorial Sloan-Kettering Cancer Center be\n+ * liable to any party for direct, indirect, special, incidental or\n+ * consequential damages, including lost profits, arising out of the use of this\n+ * software and its documentation, even if Memorial Sloan-Kettering Cancer\n+ * Center has been advised of the possibility of such damage.\n+ */\n+\n+/*\n+ * This file is part of cBioPortal.\n+ *\n+ * cBioPortal is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+/**\n+ *\n+ * @author heinsz\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts( \"data\",\n+                   \"gene panel file\" ).withRequiredArg().describedAs( \"data_file.txt\" ).ofType( String.class );\n+            parser.accepts(\"noprogress\", \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse( args );\n+            } catch (OptionException e) {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        e.getMessage());\n+            }\n+            File genePanel_f= null;\n+            if( options.has( data ) ){\n+                genePanel_f = new File( options.valueOf( data ) );\n+            } else {\n+                throw new UsageException(\n+                        progName, description, parser,\n+                        \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n+        \n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversable. (Y/N)\");\n+\n+        while (!confirmed) {\n+            String answer = s.nextLine();\n+            \n+            switch (answer) {\n+\t            case \"Y\":\n+\t            case \"y\":\n+\t            \tSystem.err.println(\"Proceeding with changes.\");\n+\t            \tconfirmed = true;\n+\t                // Updating should be done exclusively in the case where the gene panel exists and is already being used.         \n+\t                if (genePanel != null) {\n+\t                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+\t                    }\n+\t                    else {\n+\t                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+\t                    }\n+\t                \tDaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+\t                }\n+\t                // If the gene panel does not exist, the program should print an error message and exit.\n+\t                else {\n+\t                \tProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database and is not being used. Exiting!\");\n+\t                }\n+\t            \tbreak;\n+\t            case \"N\":\n+\t            case \"n\":\n+\t            \tSystem.err.println(\"Discarding changes.\");\n+\t            \tconfirmed = true;\n+\t            \tbreak;\n+\t\t\t\tdefault:\n+\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/N)\");\n+\t            \tbreak;\n+            }\n+        }\n+    }\n+\n+    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    private static Set<CanonicalGene> getGenes(String propertyName, Properties properties) {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+        if (propertyValue == null || propertyValue.length() == 0) {\n+        \treturn new HashSet<CanonicalGene>();\n+        }\n+\n+        String[] genes = propertyValue.split(\"\\t\");\n+        Set<CanonicalGene> canonicalGenes = new HashSet<CanonicalGene>();\n+        DaoGeneOptimized daoGeneOptimized = DaoGeneOptimized.getInstance();\n+        for (String panelGene : genes) {\n+            try {\n+                Long geneId = Long.parseLong(panelGene);\n+                CanonicalGene canonicalGene = daoGeneOptimized.getGene(geneId);\n+                if (canonicalGene != null) {\n+                    canonicalGenes.add(canonicalGene);\n+                }\n+                else {\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + String.valueOf(geneId));\n+                }\n+            }\n+            catch (NumberFormatException e) {\n+                List<CanonicalGene> canonicalGenesList = daoGeneOptimized.getGene(panelGene, true);\n+                if (canonicalGenesList != null && !canonicalGenesList.isEmpty()) {\n+                    // we do not want multiple genes added to the gene panel object\n+                    // for a single gene symbol found in the data file \n+                    canonicalGenes.add(canonicalGenesList.get(0));\n+                }\n+                else {\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + panelGene);\n+                }\n+            }\n+        }\n+\n+        return (canonicalGenes.size() == genes.length) ? canonicalGenes : null;\n+    }\n+\n+    public void setFile(File genePanelFile)\n+    {\n+        this.genePanelFile = genePanelFile;\n+    }\n+\n+    /**\n+     * Makes an instance to run with the given command line arguments.\n+     *\n+     * @param args  the command line arguments to be used\n+     */\n+    public UpdateGenePanel(String[] args) {\n+        super(args);\n+    }\n+\n+    /**\n+     * Runs the command as a script and exits with an appropriate exit code.\n+     *\n+     * @param args  the arguments given on the command line\n+     */\n+    public static void main(String[] args) {\n+        ConsoleRunnable runner = new UpdateGenePanel(args);\n+        Scanner s = new Scanner(System.in);\n+        boolean confirmed = false;\n+\n+        System.err.println(\"WARNING: This script is ONLY for updating a gene panel, not for adding a new gene panel. To add a new gene panel, run the ImportGenePanel script.\");\n+        System.err.println(\"If you are making changes to an existing gene panel due to a miscount of genes, proceed.\");\n+        System.err.println(\"Otherwise, if you would like to add a new version of a gene panel, please exit this script and import the gene panel with a new stable ID!\");\n+        System.err.println(\"Will you proceed to update an existing gene panel? (Y/N)\");\n+\n+        // Prompt user for Y/N\n+        while (!confirmed) {", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0ODY2OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457548669", "bodyText": "Done! I added a public method promptUser which abstracts the logic", "author": "jtquach1", "createdAt": "2020-07-20T16:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNDA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNDM2MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457404361", "bodyText": "Why are these commented out?", "author": "Luke-Sikina", "createdAt": "2020-07-20T13:52:24Z", "path": "core/src/test/resources/seed_mini.sql", "diffHunk": "@@ -491,6 +491,22 @@ INSERT INTO \"sample_profile\" (\"SAMPLE_ID\",\"GENETIC_PROFILE_ID\",\"PANEL_ID\") VALUE\n INSERT INTO \"sample_profile\" (\"SAMPLE_ID\",\"GENETIC_PROFILE_ID\",\"PANEL_ID\") VALUES (14,2,NULL);\n INSERT INTO \"sample_profile\" (\"SAMPLE_ID\",\"GENETIC_PROFILE_ID\",\"PANEL_ID\") VALUES (14,4,NULL);\n \n+-- gene_panel\n+DELETE FROM \"gene_panel\" WHERE \"STABLE_ID\"=\"TESTPANEL3\";\n+INSERT INTO \"gene_panel\" (\"INTERNAL_ID\", \"STABLE_ID\", \"DESCRIPTION\") VALUES (3, \"TESTPANEL3\", \"Gene panel used for unit testing in seed_mini.sql\");\n+\n+-- gene_panel_list", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5MTEwMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457491102", "bodyText": "ah, I wasn't sure about including it since I'm not sure how to run seed_mini.sql yet (or if I am)", "author": "jtquach1", "createdAt": "2020-07-20T15:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNDM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNTUxMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457415511", "bodyText": "The existing methods in this file all interact with the database in some way. Lets move your utility methods into a seperate class in core/src/main/java/org/mskcc/cbio/portal/util. Put all methods that don't interact with the database directly there.", "author": "Luke-Sikina", "createdAt": "2020-07-20T14:04:21Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -34,7 +34,10 @@\n \n import java.sql.*;\n import java.util.*;\n+import java.util.stream.Collectors;", "originalCommit": "a9881f07a6d0595c7609d73417ba8e357a4e9c84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxMTU0NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457511544", "bodyText": "just to clarify: are you referring to the union/intersection/difference methods that use streams?", "author": "jtquach1", "createdAt": "2020-07-20T15:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNTUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTI0Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457605242", "bodyText": "Just moved getPropertyValue and getGenes to GenePanelUtil.java (new file) in core\\src\\main\\java\\org\\mskcc\\cbio\\portal\\util", "author": "jtquach1", "createdAt": "2020-07-20T18:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNTUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTQzMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457549431", "bodyText": "I have the auto formatter setting on in VS code, hence why so many lines are changed", "author": "jtquach1", "createdAt": "2020-07-20T16:44:26Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -55,25 +55,22 @@ public void run() {\n             String description = \"Update gene panel files.\";\n \n             OptionParser parser = new OptionParser();\n-            OptionSpec<String> data = parser.accepts( \"data\",", "originalCommit": "fa827286e9378eb98201c291133e9a52007e3168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTY0Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457549642", "bodyText": "This is the real change of the commit", "author": "jtquach1", "createdAt": "2020-07-20T16:44:48Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -92,46 +89,51 @@ public void importData() throws Exception {\n \n         String stableId = getPropertyValue(\"stable_id\", properties, true);\n         Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n-        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);        \n-        \n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n         // Add user prompt here about changes to be made to gene panel\n         Scanner s = new Scanner(System.in);\n-        boolean confirmed = false;\n         System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n         DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n         System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n-\n-        while (!confirmed) {\n-            String answer = s.nextLine();\n-            \n-            switch (answer) {\n-\t            case \"Y\":\n-\t            case \"y\":\n-\t            \tSystem.err.println(\"Proceeding with changes.\");\n-\t            \tconfirmed = true;\n-\t                // Update if the gene panel exists and is already being used.         \n-                    if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n-                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database and is being used. Proceeding with gene panel update!\");\n-                    }\n-                    else {\n-                        ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" already exists in database but is unused. Proceeding with gene panel update!\");\n-                    }\n-                    DaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n-\t            \tbreak;\n-\t            case \"N\":\n-\t            case \"n\":\n-\t            \tSystem.err.println(\"Discarding changes.\");\n-\t            \tconfirmed = true;\n-\t            \tbreak;\n-\t\t\t\tdefault:\n-\t            \tSystem.err.println(\"Unrecognized input, try again. (Y/n)\");\n-\t            \tbreak;\n+        boolean confirmed = promptUser(s);\n+        if (confirmed) {\n+            // Update if the gene panel exists and is already being used.\n+            if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                        + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+            } else {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                        + \" already exists in database but is unused. Proceeding with gene panel update!\");\n             }\n-            s.close();\n+            DaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n         }\n+        s.close();\n     }\n \n-    private static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+    public static boolean promptUser(Scanner s) {", "originalCommit": "fa827286e9378eb98201c291133e9a52007e3168", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMjQzNg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457712436", "bodyText": "I just removed the Java doc comments (since I'm not sure what their purpose is)", "author": "jtquach1", "createdAt": "2020-07-20T21:51:58Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -204,10 +202,6 @@ public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canon\n     \n     /**\n      * Prints the genes to be added and removed from a gene panel in the database.\n-     * ", "originalCommit": "888afb595e82c92ff2be892644e888156e94869b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcxMjU5MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r457712590", "bodyText": "since this always computes to false; same below", "author": "jtquach1", "createdAt": "2020-07-20T21:52:23Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -66,7 +66,7 @@\n     public static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n         String propertyValue = properties.getProperty(propertyName).trim();\n \n-        if (propertyValue == null || propertyValue.length() == 0) {", "originalCommit": "888afb595e82c92ff2be892644e888156e94869b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNjYzNQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458326635", "bodyText": "based on IntelliJ code suggestions, just removed references to Generic types", "author": "jtquach1", "createdAt": "2020-07-21T19:09:35Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -55,7 +64,7 @@ public static String getPropertyValue(String propertyName, Properties properties\n         }\n \n         String[] genes = propertyValue.split(\"\\t\");\n-        Set<CanonicalGene> canonicalGenes = new HashSet<CanonicalGene>();", "originalCommit": "5bec9e2251b30cda9ab27ff8954bee95e942180d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNjg1NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458326855", "bodyText": "since long geneId is automatically converted to String", "author": "jtquach1", "createdAt": "2020-07-21T19:09:59Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -65,7 +74,7 @@ public static String getPropertyValue(String propertyName, Properties properties\n                     canonicalGenes.add(canonicalGene);\n                 }\n                 else {\n-                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + String.valueOf(geneId));", "originalCommit": "5bec9e2251b30cda9ab27ff8954bee95e942180d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyNzE0MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458327141", "bodyText": "needed to implement equals so assertEquals within the unit tests won't throw errors", "author": "jtquach1", "createdAt": "2020-07-21T19:10:32Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -137,6 +146,20 @@ public Pair(Set<CanonicalGene> add, Set<CanonicalGene> remove) {\n             this.add = add;\n             this.remove = remove;\n         }\n+\n+        @Override\n+        public boolean equals(Object o) {", "originalCommit": "5bec9e2251b30cda9ab27ff8954bee95e942180d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "url": "https://github.com/cBioPortal/cbioportal/commit/e9c9eeced51359e342ea6ffe63ba330642f76d17", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-21T19:52:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2OTY3OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458769678", "bodyText": "What are these variables actually doing? You set them all to null, then never reassign them. Look at JdbcUtil.closeAll - all these variables are null checked before anything happens to them. I think you can delete these variables entirely.", "author": "Luke-Sikina", "createdAt": "2020-07-22T12:55:15Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +180,92 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canonicalGenes) throws DaoException {\n+        Connection con = null;", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3NzUzNw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458777537", "bodyText": "I think this block of code could benefit from string templating and using some streams functions. How about this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n          \n          \n            \n                    Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;\n          \n          \n            \n            \n          \n          \n            \n                    System.out.print(\"ADD:\");\n          \n          \n            \n                    for (CanonicalGene canonicalGene : toAdd) {\n          \n          \n            \n                        System.out.print(\"\\t\" + canonicalGene);\n          \n          \n            \n                    }\n          \n          \n            \n                    System.out.println();\n          \n          \n            \n                    System.out.print(\"REMOVE:\");\n          \n          \n            \n                    for (CanonicalGene canonicalGene : toRemove) {\n          \n          \n            \n                        System.out.print(\"\\t\" + canonicalGene);\n          \n          \n            \n                    }\n          \n          \n            \n                    System.out.println();\n          \n          \n            \n                    String add = pair.add.stream()\n          \n          \n            \n                        .map(CanonicalGene::toString)\n          \n          \n            \n                        .collect(Collectors.joining(\", \"));\n          \n          \n            \n                    String remove = pair.remove.stream()\n          \n          \n            \n                        .map(CanonicalGene::toString)\n          \n          \n            \n                        .collect(Collectors.joining(\", \"));\n          \n          \n            \n            \n          \n          \n            \n                    System.out.printf(\"ADD: %s\\n\", add);\n          \n          \n            \n                    System.out.printf(\"REMOVE: %s\\n\", remove);", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:08:18Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +180,92 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canonicalGenes) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        try {\n+            updateGenePanelGeneList(internalId, canonicalGenes);\n+        } finally {\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n+        }\n+    }\n+    \n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));\n+        Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n+        Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;\n+\n+        System.out.print(\"ADD:\");\n+        for (CanonicalGene canonicalGene : toAdd) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();\n+        System.out.print(\"REMOVE:\");\n+        for (CanonicalGene canonicalGene : toRemove) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3ODc4OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458778789", "bodyText": "Also, I made the genes ,  delimited instead of tab delimited. Not sure that tabs are going to show up consistently on all terminals.", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3NzUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5MTIwNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458891204", "bodyText": "Wow, streams are pretty nifty! Does the :: map/apply toString to CanonicalGene?", "author": "jtquach1", "createdAt": "2020-07-22T15:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3NzUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc4MTI1Mw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458781253", "bodyText": "Lets pull this out into its own function that returns the genePanelMap. My rule of thumb here is that extracting code into its own method is generally better than a comment explaining a block of code. With a function, it's more reusable, the name of the function servers as the comment, and it has a clear start and end.", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:14:09Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +180,92 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canonicalGenes) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        try {\n+            updateGenePanelGeneList(internalId, canonicalGenes);\n+        } finally {\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n+        }\n+    }\n+    \n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));\n+        Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n+        Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;\n+\n+        System.out.print(\"ADD:\");\n+        for (CanonicalGene canonicalGene : toAdd) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();\n+        System.out.print(\"REMOVE:\");\n+        for (CanonicalGene canonicalGene : toRemove) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();\n+    }\n+\n+    /**\n+     * Inserts and deletes genes from a gene panel represented by an internalId in\n+     * the database.\n+     */\n+    private static void updateGenePanelGeneList(Integer internalId, Set<CanonicalGene> incoming) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        Map<String, GenePanel> genePanelMap = null;\n+\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+\n+            // Does the gene panel exist in gene_panel?\n+            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel WHERE internal_id = ?\");\n+            pstmt.setInt(1, internalId);\n+            rs = pstmt.executeQuery();\n+            genePanelMap = extractGenePanelMap(rs);\n+\n+            if (genePanelMap.isEmpty()) {\n+                System.out.println(\"Gene panel does not exist in gene_panel, exiting\");\n+                return;\n+            }", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NDMzNw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458794337", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n          \n          \n            \n                        Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;\n          \n          \n            \n                        Set<CanonicalGene> toAdd = pair.add;\n          \n          \n            \n                        Set<CanonicalGene> toRemove = pair.remove;", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:33:10Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +180,92 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canonicalGenes) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        try {\n+            updateGenePanelGeneList(internalId, canonicalGenes);\n+        } finally {\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n+        }\n+    }\n+    \n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));\n+        Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n+        Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;\n+\n+        System.out.print(\"ADD:\");\n+        for (CanonicalGene canonicalGene : toAdd) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();\n+        System.out.print(\"REMOVE:\");\n+        for (CanonicalGene canonicalGene : toRemove) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();\n+    }\n+\n+    /**\n+     * Inserts and deletes genes from a gene panel represented by an internalId in\n+     * the database.\n+     */\n+    private static void updateGenePanelGeneList(Integer internalId, Set<CanonicalGene> incoming) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        Map<String, GenePanel> genePanelMap = null;\n+\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+\n+            // Does the gene panel exist in gene_panel?\n+            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel WHERE internal_id = ?\");\n+            pstmt.setInt(1, internalId);\n+            rs = pstmt.executeQuery();\n+            genePanelMap = extractGenePanelMap(rs);\n+\n+            if (genePanelMap.isEmpty()) {\n+                System.out.println(\"Gene panel does not exist in gene_panel, exiting\");\n+                return;\n+            }\n+\n+            Pair pair = getAddRemove(incoming, extractGenePanelGenes(internalId));\n+            Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n+            Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5OTk4OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458799989", "bodyText": "You could do this in a single statement, but this is super readable, and I don't think performance is a major concern. Let's keep it this way. Nice job here.", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:41:12Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +180,92 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canonicalGenes) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        try {\n+            updateGenePanelGeneList(internalId, canonicalGenes);\n+        } finally {\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n+        }\n+    }\n+    \n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));\n+        Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n+        Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;\n+\n+        System.out.print(\"ADD:\");\n+        for (CanonicalGene canonicalGene : toAdd) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();\n+        System.out.print(\"REMOVE:\");\n+        for (CanonicalGene canonicalGene : toRemove) {\n+            System.out.print(\"\\t\" + canonicalGene);\n+        }\n+        System.out.println();\n+    }\n+\n+    /**\n+     * Inserts and deletes genes from a gene panel represented by an internalId in\n+     * the database.\n+     */\n+    private static void updateGenePanelGeneList(Integer internalId, Set<CanonicalGene> incoming) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        Map<String, GenePanel> genePanelMap = null;\n+\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+\n+            // Does the gene panel exist in gene_panel?\n+            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel WHERE internal_id = ?\");\n+            pstmt.setInt(1, internalId);\n+            rs = pstmt.executeQuery();\n+            genePanelMap = extractGenePanelMap(rs);\n+\n+            if (genePanelMap.isEmpty()) {\n+                System.out.println(\"Gene panel does not exist in gene_panel, exiting\");\n+                return;\n+            }\n+\n+            Pair pair = getAddRemove(incoming, extractGenePanelGenes(internalId));\n+            Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;\n+            Set<CanonicalGene> toRemove = (Set<CanonicalGene>) pair.remove;\n+\n+            // Add and remove genes from specified gene panel\n+            for (CanonicalGene canonicalGene : toAdd) {", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMDQ3NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458800475", "bodyText": "Good rename.", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:41:53Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/ImportGenePanel.java", "diffHunk": "@@ -92,7 +95,7 @@ public void importData() throws Exception {\n \n         String stableId = getPropertyValue(\"stable_id\", properties, true);\n         String description = getPropertyValue(\"description\", properties, false);\n-        Set<CanonicalGene> canonicalGenes = getGenes(\"gene_list\", properties);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(\"gene_list\", properties, false);", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMjgwOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458802809", "bodyText": "We know the update is happening in a MySQL database - it's the only database we support. :)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Updates an existing gene panel in a MySQL database.\n          \n          \n            \n             * Updates an existing, potentially in use gene panel.", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:44:59Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNDA5MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458804090", "bodyText": "When chaining, I prefer each function call to have its own line if you cannot fit everything on one line. I think this makes it a little easier to read.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n          \n          \n            \n                                .describedAs(\"data_file.txt\").ofType(String.class);\n          \n          \n            \n                        OptionSpec<String> data = parser\n          \n          \n            \n                                .accepts(\"data\", \"gene panel file\")\n          \n          \n            \n                                .withRequiredArg()\n          \n          \n            \n                                .describedAs(\"data_file.txt\")\n          \n          \n            \n                                .ofType(String.class);", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:46:47Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.\n+ * \n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n+                    .describedAs(\"data_file.txt\").ofType(String.class);", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NDQ1Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458944452", "bodyText": "ah, I may have to find a Prettier plugin for Eclipse/IntelliJ\nedit: never mind, Ctrl+Alt+L formats a file's code", "author": "jtquach1", "createdAt": "2020-07-22T16:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNDA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNTg0OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458805848", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n          \n          \n            \n                    System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \":\");", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:49:14Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.\n+ * \n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n+                    .describedAs(\"data_file.txt\").ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                    \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f = null;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(\"gene_list\", properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNzMxMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458807312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                    ProgressMonitor.setCurrentMessage(\"Retrieving matching gene panel from database\");", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:51:16Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.\n+ * \n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n+                    .describedAs(\"data_file.txt\").ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                    \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f = null;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTkwNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458809904", "bodyText": "In both cases where this is used, the scanner is created, passed to this method, never used again, and then closed. Why not just create and close the scanner in this method?", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:54:28Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.\n+ * \n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n+                    .describedAs(\"data_file.txt\").ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                    \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f = null;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(\"gene_list\", properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n+        boolean confirmed = promptUser(s);\n+        if (confirmed) {\n+            // Update if the gene panel exists and is already being used.\n+            if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                        + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+            } else {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                        + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+            }\n+            DaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+        }\n+        s.close();\n+    }\n+\n+    private static boolean promptUser(Scanner s) {", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0MDQzMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459040433", "bodyText": "turns out after closing a scanner once, that breaks InputStream for the rest of the class forever\n(fix was to make the Scanner a class variable)", "author": "jtquach1", "createdAt": "2020-07-22T19:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwOTkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMDU1OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458810559", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean confirmed = promptUser(s);\n          \n          \n            \n                    if (confirmed) {\n          \n          \n            \n                    if (promptUser(s)) {", "author": "Luke-Sikina", "createdAt": "2020-07-22T13:55:10Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.\n+ * \n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n+                    .describedAs(\"data_file.txt\").ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                    \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f = null;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(\"gene_list\", properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n+        boolean confirmed = promptUser(s);\n+        if (confirmed) {", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2NDQwOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458964409", "bodyText": "put both calls to promptUser inside if condition", "author": "jtquach1", "createdAt": "2020-07-22T17:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMDU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxNDk1NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458814955", "bodyText": "This is really picky, but I'm not a huge fan leveraging switch statement fall through unless totally necessary, since programming languages are really split on what the default behavior should be. In this case, we can just toUpper the string to avoid using it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String answer = s.nextLine();\n          \n          \n            \n            \n          \n          \n            \n                    switch (answer) {\n          \n          \n            \n                        case \"Y\":\n          \n          \n            \n                        case \"y\":\n          \n          \n            \n                            System.err.println(\"Proceeding with update script.\");\n          \n          \n            \n                            confirmed = true;\n          \n          \n            \n                            break;\n          \n          \n            \n                        case \"N\":\n          \n          \n            \n                        case \"n\":\n          \n          \n            \n                            System.err.println(\"Exiting update script.\");\n          \n          \n            \n                            break;\n          \n          \n            \n                        default:\n          \n          \n            \n                            System.err.println(\"Unrecognized input, exiting.\");\n          \n          \n            \n                            break;\n          \n          \n            \n                   String answer = s.nextLine().toUpperCase();\n          \n          \n            \n            \n          \n          \n            \n                    switch (answer) {\n          \n          \n            \n                        case \"Y\":\n          \n          \n            \n                            System.err.println(\"Proceeding with update script.\");\n          \n          \n            \n                            return true;\n          \n          \n            \n                        case \"N\":\n          \n          \n            \n                            System.err.println(\"Exiting update script.\");\n          \n          \n            \n                            return false;\n          \n          \n            \n                        default:\n          \n          \n            \n                            System.err.println(\"Unrecognized input, exiting.\");\n          \n          \n            \n                            return false;", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:01:15Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.\n+ * \n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n+                    .describedAs(\"data_file.txt\").ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                    \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f = null;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(\"gene_list\", properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        // Add user prompt here about changes to be made to gene panel\n+        Scanner s = new Scanner(System.in);\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \".\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n+        boolean confirmed = promptUser(s);\n+        if (confirmed) {\n+            // Update if the gene panel exists and is already being used.\n+            if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                        + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+            } else {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                        + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+            }\n+            DaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+        }\n+        s.close();\n+    }\n+\n+    private static boolean promptUser(Scanner s) {\n+        boolean confirmed = false;\n+        String answer = s.nextLine();\n+\n+        switch (answer) {\n+            case \"Y\":\n+            case \"y\":\n+                System.err.println(\"Proceeding with update script.\");\n+                confirmed = true;\n+                break;\n+            case \"N\":\n+            case \"n\":\n+                System.err.println(\"Exiting update script.\");\n+                break;\n+            default:\n+                System.err.println(\"Unrecognized input, exiting.\");\n+                break;", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxOTU2Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458819567", "bodyText": "I don't think you need to cast these sets to lists. Same applies to union and difference\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n          \n          \n            \n                    return intersection(new ArrayList<>(first), new ArrayList<>(second));\n          \n          \n            \n                }\n          \n          \n            \n                private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n          \n          \n            \n                    return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n          \n          \n            \n                }\n          \n          \n            \n                public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n          \n          \n            \n                    return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n          \n          \n            \n                }", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:07:42Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B\n+    public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return intersection(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n+    }", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMDMxMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458820310", "bodyText": "Make this an actual javadoc comment. Same goes for the other comment like this.", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:08:45Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyOTUxMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459029513", "bodyText": "Removed union, intersection, difference since the below suggestion for getAddRemove (committed) makes them obsolete", "author": "jtquach1", "createdAt": "2020-07-22T19:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyOTc3OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459029778", "bodyText": "Added javadoc comments to all public functions in DaoGenePanel.java and GenePanelUtil.java", "author": "jtquach1", "createdAt": "2020-07-22T19:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMDMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMTE0Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458821147", "bodyText": "!", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:09:52Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B\n+    public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return intersection(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A - B\n+    public static Set<CanonicalGene> difference(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return difference(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> difference(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> !second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A V B\n+    public static Set<CanonicalGene> union(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return union(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> union(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        HashSet<CanonicalGene> union = new HashSet<>();", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMjUxMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458822510", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (propertyValue.length() == 0) {\n          \n          \n            \n                    if (propertyValue.isEmpty()) {", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:11:45Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B\n+    public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return intersection(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A - B\n+    public static Set<CanonicalGene> difference(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return difference(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> difference(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> !second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A V B\n+    public static Set<CanonicalGene> union(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return union(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> union(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        HashSet<CanonicalGene> union = new HashSet<>();\n+        union.addAll(first);\n+        union.addAll(second);\n+        return union;\n+    }\n+\n+    public static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue.length() == 0) {", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyMzMzMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458823331", "bodyText": "Same complaint as with getGenes. This is not a getter.", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:12:56Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B\n+    public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return intersection(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A - B\n+    public static Set<CanonicalGene> difference(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return difference(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> difference(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> !second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A V B\n+    public static Set<CanonicalGene> union(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return union(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> union(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        HashSet<CanonicalGene> union = new HashSet<>();\n+        union.addAll(first);\n+        union.addAll(second);\n+        return union;\n+    }\n+\n+    public static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjI2OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458826268", "bodyText": "Add javadoc. Also, isUpdating isn't a great name for that variable. It reflects your usage of it, but not necessarily its general usage. In this function, isUpdating determines if you're allowed to have an empty set of genes. It should be named according to that.", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:16:59Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B\n+    public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return intersection(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A - B\n+    public static Set<CanonicalGene> difference(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return difference(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> difference(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> !second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A V B\n+    public static Set<CanonicalGene> union(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return union(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> union(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        HashSet<CanonicalGene> union = new HashSet<>();\n+        union.addAll(first);\n+        union.addAll(second);\n+        return union;\n+    }\n+\n+    public static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    public static Set<CanonicalGene> extractGenes(String propertyName, Properties properties, Boolean isUpdating) {", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyODkxOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458828919", "bodyText": "Wait, so if a gene cannot be found, we don't return any of the genes? Odd. Was this existing behavior? If so, at the very least, document this in the javadoc for this function", "author": "Luke-Sikina", "createdAt": "2020-07-22T14:20:30Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B\n+    public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return intersection(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A - B\n+    public static Set<CanonicalGene> difference(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return difference(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> difference(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> !second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A V B\n+    public static Set<CanonicalGene> union(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return union(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> union(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        HashSet<CanonicalGene> union = new HashSet<>();\n+        union.addAll(first);\n+        union.addAll(second);\n+        return union;\n+    }\n+\n+    public static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    public static Set<CanonicalGene> extractGenes(String propertyName, Properties properties, Boolean isUpdating) {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+        if (propertyValue.length() == 0) {\n+            if (isUpdating) {\n+                return new HashSet<>();\n+            }\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        String[] genes = propertyValue.split(\"\\t\");\n+        Set<CanonicalGene> canonicalGenes = new HashSet<>();\n+        DaoGeneOptimized daoGeneOptimized = DaoGeneOptimized.getInstance();\n+        for (String panelGene : genes) {\n+            try {\n+                long geneId = Long.parseLong(panelGene);\n+                CanonicalGene canonicalGene = daoGeneOptimized.getGene(geneId);\n+                if (canonicalGene != null) {\n+                    canonicalGenes.add(canonicalGene);\n+                }\n+                else {\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + geneId);\n+                }\n+            }\n+            catch (NumberFormatException e) {\n+                List<CanonicalGene> canonicalGenesList = daoGeneOptimized.getGene(panelGene, true);\n+                if (canonicalGenesList != null && !canonicalGenesList.isEmpty()) {\n+                    // we do not want multiple genes added to the gene panel object\n+                    // for a single gene symbol found in the data file \n+                    canonicalGenes.add(canonicalGenesList.get(0));\n+                }\n+                else {\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + panelGene);\n+                }\n+            }\n+        }\n+\n+        return (canonicalGenes.size() == genes.length) ? canonicalGenes : null;", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTQ3OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458885478", "bodyText": "it's existing behavior, but I can document it in the Java doc @return", "author": "jtquach1", "createdAt": "2020-07-22T15:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyODkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MDgwNw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458860807", "bodyText": "This seems too complex for what it was trying to do. I replaced it with this and it passed all the tests:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Pair getAddRemove(Set<CanonicalGene> incoming, Set<CanonicalGene> original) {\n          \n          \n            \n                    // A -> incoming, B -> original\n          \n          \n            \n                    Set<CanonicalGene> toAdd = new HashSet<>();\n          \n          \n            \n                    Set<CanonicalGene> toRemove = new HashSet<>();\n          \n          \n            \n                    Set<CanonicalGene> AnB = intersection(new ArrayList<>(incoming), new ArrayList<>(original));\n          \n          \n            \n                    Set<CanonicalGene> AuB = union(new ArrayList<>(incoming), new ArrayList<>(original));\n          \n          \n            \n            \n          \n          \n            \n                    // 1. Is A == B?\n          \n          \n            \n                    if (AnB.equals(AuB)) {\n          \n          \n            \n                        return new Pair(toAdd, toRemove);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // 2. Is A ^ B == nil?\n          \n          \n            \n                    else if (AnB.isEmpty()) {\n          \n          \n            \n                        // Remove B\n          \n          \n            \n                        toRemove = original;\n          \n          \n            \n                        // Add A\n          \n          \n            \n                        toAdd = incoming;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // 3. Is AnB == B?\n          \n          \n            \n                    else if (AnB.equals(original)) {\n          \n          \n            \n                        // Add A - B\n          \n          \n            \n                        toAdd = difference(new ArrayList<>(incoming), new ArrayList<>(original));\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // 4. Is AnB == A?\n          \n          \n            \n                    else if (AnB.equals(incoming)) {\n          \n          \n            \n                        // Remove B - A\n          \n          \n            \n                        toRemove = difference(new ArrayList<>(original), new ArrayList<>(incoming));\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    // 5. Intersect but neither are supersets of one other\n          \n          \n            \n                    else {\n          \n          \n            \n                        // Add A - AnB\n          \n          \n            \n                        toAdd = difference(new ArrayList<>(incoming), new ArrayList<>(AnB));\n          \n          \n            \n                        // Remove B - AnB\n          \n          \n            \n                        toRemove = difference(new ArrayList<>(original), new ArrayList<>(AnB));\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return new Pair(toAdd, toRemove);\n          \n          \n            \n                }\n          \n          \n            \n                public static Pair getAddRemove(Set<CanonicalGene> incoming, Set<CanonicalGene> original) {\n          \n          \n            \n                    Set<CanonicalGene> add = incoming.stream()\n          \n          \n            \n                        .filter(e -> !original.contains(e))\n          \n          \n            \n                        .collect(Collectors.toSet());\n          \n          \n            \n                    Set<CanonicalGene> remove = original.stream()\n          \n          \n            \n                        .filter(e -> !incoming.contains(e))\n          \n          \n            \n                        .collect(Collectors.toSet());\n          \n          \n            \n                    \n          \n          \n            \n                    return new Pair(add, remove);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nAre these functionally equivalent, or am I missing something?", "author": "Luke-Sikina", "createdAt": "2020-07-22T15:02:26Z", "path": "core/src/main/java/org/mskcc/cbio/portal/util/GenePanelUtil.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.mskcc.cbio.portal.dao.DaoGeneOptimized;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for operations on sets and importing/updating gene panels.\n+ *\n+ * @author jtquach1\n+ */\n+public class GenePanelUtil {\n+\n+    // A ^ B\n+    public static Set<CanonicalGene> intersection(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return intersection(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> intersection(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> first.contains(f) && second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A - B\n+    public static Set<CanonicalGene> difference(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return difference(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> difference(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        return first.stream().filter(f -> !second.contains(f)).collect(Collectors.toSet());\n+    }\n+\n+    // A V B\n+    public static Set<CanonicalGene> union(Set<CanonicalGene> first, Set<CanonicalGene> second) {\n+        return union(new ArrayList<>(first), new ArrayList<>(second));\n+    }\n+    private static Set<CanonicalGene> union(List<CanonicalGene> first, List<CanonicalGene> second) {\n+        HashSet<CanonicalGene> union = new HashSet<>();\n+        union.addAll(first);\n+        union.addAll(second);\n+        return union;\n+    }\n+\n+    public static String getPropertyValue(String propertyName, Properties properties, boolean noSpaceAllowed) throws IllegalArgumentException {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+\n+        if (propertyValue.length() == 0) {\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        if (noSpaceAllowed && propertyValue.contains(\" \")) {\n+            throw new IllegalArgumentException(propertyName + \" cannot contain spaces: \" + propertyValue);\n+        }\n+\n+        return propertyValue;\n+    }\n+\n+    public static Set<CanonicalGene> extractGenes(String propertyName, Properties properties, Boolean isUpdating) {\n+        String propertyValue = properties.getProperty(propertyName).trim();\n+        if (propertyValue.length() == 0) {\n+            if (isUpdating) {\n+                return new HashSet<>();\n+            }\n+            throw new IllegalArgumentException(propertyName + \" is not specified.\");\n+        }\n+\n+        String[] genes = propertyValue.split(\"\\t\");\n+        Set<CanonicalGene> canonicalGenes = new HashSet<>();\n+        DaoGeneOptimized daoGeneOptimized = DaoGeneOptimized.getInstance();\n+        for (String panelGene : genes) {\n+            try {\n+                long geneId = Long.parseLong(panelGene);\n+                CanonicalGene canonicalGene = daoGeneOptimized.getGene(geneId);\n+                if (canonicalGene != null) {\n+                    canonicalGenes.add(canonicalGene);\n+                }\n+                else {\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + geneId);\n+                }\n+            }\n+            catch (NumberFormatException e) {\n+                List<CanonicalGene> canonicalGenesList = daoGeneOptimized.getGene(panelGene, true);\n+                if (canonicalGenesList != null && !canonicalGenesList.isEmpty()) {\n+                    // we do not want multiple genes added to the gene panel object\n+                    // for a single gene symbol found in the data file \n+                    canonicalGenes.add(canonicalGenesList.get(0));\n+                }\n+                else {\n+                    ProgressMonitor.logWarning(\"Could not find gene in the database: \" + panelGene);\n+                }\n+            }\n+        }\n+\n+        return (canonicalGenes.size() == genes.length) ? canonicalGenes : null;\n+    }\n+\n+    /**\n+     * Gets a Pair representing the sets of genes to add and to remove from a gene\n+     * panel in the database.\n+     */\n+    public static Pair getAddRemove(Set<CanonicalGene> incoming, Set<CanonicalGene> original) {\n+        // A -> incoming, B -> original\n+        Set<CanonicalGene> toAdd = new HashSet<>();\n+        Set<CanonicalGene> toRemove = new HashSet<>();\n+        Set<CanonicalGene> AnB = intersection(new ArrayList<>(incoming), new ArrayList<>(original));\n+        Set<CanonicalGene> AuB = union(new ArrayList<>(incoming), new ArrayList<>(original));\n+\n+        // 1. Is A == B?\n+        if (AnB.equals(AuB)) {\n+            return new Pair(toAdd, toRemove);\n+        }\n+\n+        // 2. Is A ^ B == nil?\n+        else if (AnB.isEmpty()) {\n+            // Remove B\n+            toRemove = original;\n+            // Add A\n+            toAdd = incoming;\n+        }\n+\n+        // 3. Is AnB == B?\n+        else if (AnB.equals(original)) {\n+            // Add A - B\n+            toAdd = difference(new ArrayList<>(incoming), new ArrayList<>(original));\n+        }\n+\n+        // 4. Is AnB == A?\n+        else if (AnB.equals(incoming)) {\n+            // Remove B - A\n+            toRemove = difference(new ArrayList<>(original), new ArrayList<>(incoming));\n+        }\n+\n+        // 5. Intersect but neither are supersets of one other\n+        else {\n+            // Add A - AnB\n+            toAdd = difference(new ArrayList<>(incoming), new ArrayList<>(AnB));\n+            // Remove B - AnB\n+            toRemove = difference(new ArrayList<>(original), new ArrayList<>(AnB));\n+        }\n+\n+        return new Pair(toAdd, toRemove);\n+    }", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyODk2Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459028962", "bodyText": "I never thought of it that way... I think they are functionally equivalent!", "author": "jtquach1", "createdAt": "2020-07-22T19:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MDgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MTQzMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458861432", "bodyText": "We'll circle back to these in the next review. Don't bother with them for now.", "author": "Luke-Sikina", "createdAt": "2020-07-22T15:03:19Z", "path": "core/src/test/java/org/mskcc/cbio/portal/util/TestGenePanelUtil.java", "diffHunk": "@@ -0,0 +1,313 @@\n+package org.mskcc.cbio.portal.util;", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2NjYwNQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458866605", "bodyText": "Let's have some logic here that explicitly checks to make sure the gene panel is not null, and errors and exits if it is null", "author": "Luke-Sikina", "createdAt": "2020-07-22T15:10:23Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.getPropertyValue;\n+\n+/**\n+ * Updates an existing gene panel in a MySQL database.\n+ * \n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser.accepts(\"data\", \"gene panel file\").withRequiredArg()\n+                    .describedAs(\"data_file.txt\").ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                    \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options = null;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f = null;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        String stableId = getPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(\"gene_list\", properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA5NjQ2MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459096460", "bodyText": "Done with\nif (genePanel == null) {\n    ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");\n    return;\n}", "author": "jtquach1", "createdAt": "2020-07-22T21:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2NjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3MjQwOQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r458872409", "bodyText": "Get rid of casts", "author": "Luke-Sikina", "createdAt": "2020-07-22T15:18:11Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +180,92 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> canonicalGenes) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        try {\n+            updateGenePanelGeneList(internalId, canonicalGenes);\n+        } finally {\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n+        }\n+    }\n+    \n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));\n+        Set<CanonicalGene> toAdd = (Set<CanonicalGene>) pair.add;", "originalCommit": "e9c9eeced51359e342ea6ffe63ba330642f76d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dad1b5b070cdc979079b7575cce3e16723e6c329", "url": "https://github.com/cBioPortal/cbioportal/commit/dad1b5b070cdc979079b7575cce3e16723e6c329", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-22T21:45:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5NDc0NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459494744", "bodyText": "Delete", "author": "Luke-Sikina", "createdAt": "2020-07-23T14:31:54Z", "path": "core/src/test/java/org/mskcc/cbio/portal/util/TestGenePanelUtil.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.*;\n+\n+import org.junit.Test;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class TestGenePanelUtil {\n+    Properties p1;\n+    Properties p2;\n+    Properties p3;\n+    Properties p4;\n+    Properties p5;\n+    Properties p6;\n+    Set<CanonicalGene> g1;\n+    Set<CanonicalGene> g2;\n+    Set<CanonicalGene> g3;\n+    Set<CanonicalGene> g4;\n+    Set<CanonicalGene> g5;\n+    Set<CanonicalGene> g6;\n+\n+    CanonicalGene otor = makeGene(13321, 56914, \"OTOR\", makeAliases(\"FDP\", \"MIAL1\"));\n+    CanonicalGene cadm2 = makeGene(20001, 253559, \"CADM2\", makeAliases(\"IGSF4D\", \"Necl-3\", \"NECL3\", \"SynCAM 2\", \"synCAM2\"));\n+    CanonicalGene msh3 = makeGene(3573, 4437, \"MSH3\", makeAliases(\"MRP1\", \"DUP\", \"FAP4\"));\n+    CanonicalGene p2ry10 = makeGene(10455, 27334, \"P2RY10\", makeAliases(\"P2Y10\", \"LYPSR2\"));\n+    CanonicalGene adamts20 = makeGene(15009, 80070, \"ADAMTS20\", makeAliases(\"ADAM-TS20\", \"GON-1\", \"ADAMTS-20\"));\n+    CanonicalGene kat2a = makeGene(2154, 2648, \"KAT2A\", makeAliases(\"hGCN5\", \"GCN5\", \"GCN5L2\", \"PCAF-b\"));\n+    CanonicalGene myb = makeGene(3674, 4602, \"MYB\", makeAliases(\"c-myb_CDS\", \"Cmyb\", \"c-myb\", \"efg\"));\n+    CanonicalGene npipb15 = makeGene(24049, 440348, \"NPIPB15\", makeAliases(\"A-761H5.4\", \"NPIPL2\"));\n+    CanonicalGene dtnb = makeGene(1492, 1838, \"DTNB\", null);\n+    CanonicalGene ablim1 = makeGene(3239, 3983, \"ABLIM1\", makeAliases(\"LIMAB1\", \"abLIM-1\", \"ABLIM\", \"LIMATIN\"));\n+    CanonicalGene piezo1 = makeGene(7609, 9780, \"PIEZO1\", makeAliases(\"FAM38A\", \"Mib\", \"LMPH3\", \"DHS\"));\n+    CanonicalGene fgfr3 = makeGene(1827, 2261, \"FGFR3\", makeAliases(\"JTK4\", \"HSFGFR3EX\", \"ACH\", \"CEK2\", \"CD333\"));\n+\n+    public TestGenePanelUtil() {\n+        setProperties();\n+        setGenes();\n+    }\n+\n+    public void setProperties() {\n+        p1 = new Properties();\n+        p1.setProperty(\"stable_id\", \"TESTPANEL1\");\n+        p1.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p1.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+\n+        p2 = new Properties();\n+        p2.setProperty(\"stable_id\", \"TESTPANEL2\");\n+        p2.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p2.setProperty(\"gene_list\", \"CADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\\tFGFR3\\tPIEZO1\");\n+\n+        p3 = new Properties();\n+        p3.setProperty(\"stable_id\", \"TESTPANEL3\");\n+        p3.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p3.setProperty(\"gene_list\", \"\");\n+\n+        p4 = new Properties();\n+        p4.setProperty(\"stable_id\", \"TESTPANEL1_UNIQUE\");\n+        p4.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p4.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\");\n+\n+        p5 = new Properties();\n+        p5.setProperty(\"stable_id\", \"TESTPANEL2_UNIQUE\");\n+        p5.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p5.setProperty(\"gene_list\", \"FGFR3\\tPIEZO1\");\n+\n+        p6 = new Properties();\n+        p6.setProperty(\"stable_id\", \"TESTPANEL12_SHARED\");\n+        p6.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p6.setProperty(\"gene_list\", \"CADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+    }\n+\n+    public void setGenes() {\n+        g1 = makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1);\n+        g2 = makeGeneSet(otor, cadm2, piezo1, msh3, fgfr3, p2ry10, kat2a, myb, npipb15, dtnb);\n+        g3 = new HashSet<>();\n+        g4 = makeGeneSet(adamts20, ablim1);\n+        g5 = makeGeneSet(piezo1, fgfr3);\n+        g6 = makeGeneSet(otor, cadm2, msh3, p2ry10, kat2a, myb, npipb15, dtnb);\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValue() {\n+        String expected;\n+        String actual;\n+\n+        actual = extractPropertyValue(\"stable_id\", p1, true);\n+        expected = \"TESTPANEL1\";\n+        assertEquals(expected, actual);\n+\n+        actual = extractPropertyValue(\"description\", p1, false);\n+        expected = \"Example gene panel meta file for testing purposes.\";\n+        assertEquals(expected, actual);\n+\n+        actual = extractPropertyValue(\"gene_list\", p1, true);\n+        expected = \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\";\n+        assertEquals(expected, actual);\n+\n+        // gene_list only contains \\t as delimiters\n+        actual = extractPropertyValue(\"gene_list\", p1, false);\n+        assertEquals(expected, actual);\n+\n+        // cannot test on p3 since its gene_list is empty\n+    }\n+\n+    @Test\n+    public void testExtractGenes() {\n+        Set<CanonicalGene> expected;\n+        Set<CanonicalGene> actual;\n+\n+        // Check for a non-empty result\n+        expected = new HashSet<>();\n+        actual = extractGenes(p4, false);\n+\n+        HashSet<String> hs = makeAliases(\"ADAM-TS20\", \"GON-1\", \"ADAMTS-20\");\n+        CanonicalGene cg = makeGene(15009, 80070, \"ADAMTS20\", hs);\n+        expected.add(cg);\n+\n+        hs = makeAliases(\"LIMAB1\", \"abLIM-1\", \"ABLIM\", \"LIMATIN\");\n+        cg = makeGene(3239, 3983, \"ABLIM1\", hs);\n+        expected.add(cg);\n+\n+        assertEquals(expected, actual);\n+\n+        // Check for an empty result\n+        expected = new HashSet<>();\n+        actual = extractGenes(p3, true);\n+        assertEquals(expected, actual);\n+    }\n+\n+    private HashSet<String> makeAliases(String... aliases) {\n+        return new HashSet<>(Arrays.asList(aliases));\n+    }\n+\n+    private HashSet<CanonicalGene> makeGeneSet(CanonicalGene... genes) {\n+        return new HashSet<>(Arrays.asList(genes));\n+    }\n+\n+    private CanonicalGene makeGene(int geneticEntityId, long entrezGeneId, String hugoGeneSymbol, Set<String> aliases) {\n+        CanonicalGene gene = new CanonicalGene(geneticEntityId, entrezGeneId, hugoGeneSymbol, aliases);\n+        gene.setType(\"protein-coding\");\n+        return gene;\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveAEqualsB() {\n+        Pair expected = new Pair(new HashSet<>(), new HashSet<>());\n+        Pair actual = getAddRemove(g3, g3);\n+        assertEquals(expected, actual);\n+        actual = getAddRemove(g4, g4);\n+        assertEquals(expected, actual);\n+    }\n+    \n+    @Test\n+    public void testGetAddRemoveEmptyIntersection() {\n+        Pair expected = new Pair(g4, g5);\n+        Pair actual = getAddRemove(g4, g5);\n+        assertEquals(expected, actual);\n+        expected = new Pair(g5, g4);\n+        actual = getAddRemove(g5, g4);\n+        assertEquals(expected, actual);\n+    }\n+    \n+    @Test\n+    public void testGetAddRemoveAOrBEmpty() {\n+        Pair expected = new Pair(g4, g3);\n+        Pair actual = getAddRemove(g4, g3);\n+        assertEquals(expected, actual);\n+        expected = new Pair(g3, g4);\n+        actual = getAddRemove(g3, g4);\n+        assertEquals(expected, actual);\n+    }\n+    \n+    @Test\n+    public void testGetAddRemoveOnlyAdd() {\n+        Pair expected = new Pair(g6, g3);\n+        Pair actual = getAddRemove(g1, g4);\n+        assertEquals(expected, actual);\n+        actual = getAddRemove(g2, g5);\n+        assertEquals(expected, actual);\n+    }\n+    \n+    @Test\n+    public void testGetAddRemoveOnlyRemove() {\n+        Pair expected = new Pair(g3, g6);\n+        Pair actual = getAddRemove(g4, g1);\n+        assertEquals(expected, actual);\n+        actual = getAddRemove(g5, g2);\n+        assertEquals(expected, actual);\n+    }\n+    \n+    @Test\n+    public void testGetAddRemoveAddAndRemove() {\n+        Pair expected = new Pair(g4, g5);\n+        Pair actual = getAddRemove(g1, g2);\n+        assertEquals(expected, actual);\n+        expected = new Pair(g5, g4);\n+        actual = getAddRemove(g2, g1);\n+        assertEquals(expected, actual);\n+    }\n+    \n+    @Test\n+    public void testGetAddRemove() {", "originalCommit": "8527ef6f7e0cda5cb7c3c72456790a3251895f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5NTUyNg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459495526", "bodyText": "We don't need the duplicate examples for each test case. It just makes this harder to read. It doesn't really add much in terms of additional verification.", "author": "Luke-Sikina", "createdAt": "2020-07-23T14:32:58Z", "path": "core/src/test/java/org/mskcc/cbio/portal/util/TestGenePanelUtil.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.*;\n+\n+import org.junit.Test;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class TestGenePanelUtil {\n+    Properties p1;\n+    Properties p2;\n+    Properties p3;\n+    Properties p4;\n+    Properties p5;\n+    Properties p6;\n+    Set<CanonicalGene> g1;\n+    Set<CanonicalGene> g2;\n+    Set<CanonicalGene> g3;\n+    Set<CanonicalGene> g4;\n+    Set<CanonicalGene> g5;\n+    Set<CanonicalGene> g6;\n+\n+    CanonicalGene otor = makeGene(13321, 56914, \"OTOR\", makeAliases(\"FDP\", \"MIAL1\"));\n+    CanonicalGene cadm2 = makeGene(20001, 253559, \"CADM2\", makeAliases(\"IGSF4D\", \"Necl-3\", \"NECL3\", \"SynCAM 2\", \"synCAM2\"));\n+    CanonicalGene msh3 = makeGene(3573, 4437, \"MSH3\", makeAliases(\"MRP1\", \"DUP\", \"FAP4\"));\n+    CanonicalGene p2ry10 = makeGene(10455, 27334, \"P2RY10\", makeAliases(\"P2Y10\", \"LYPSR2\"));\n+    CanonicalGene adamts20 = makeGene(15009, 80070, \"ADAMTS20\", makeAliases(\"ADAM-TS20\", \"GON-1\", \"ADAMTS-20\"));\n+    CanonicalGene kat2a = makeGene(2154, 2648, \"KAT2A\", makeAliases(\"hGCN5\", \"GCN5\", \"GCN5L2\", \"PCAF-b\"));\n+    CanonicalGene myb = makeGene(3674, 4602, \"MYB\", makeAliases(\"c-myb_CDS\", \"Cmyb\", \"c-myb\", \"efg\"));\n+    CanonicalGene npipb15 = makeGene(24049, 440348, \"NPIPB15\", makeAliases(\"A-761H5.4\", \"NPIPL2\"));\n+    CanonicalGene dtnb = makeGene(1492, 1838, \"DTNB\", null);\n+    CanonicalGene ablim1 = makeGene(3239, 3983, \"ABLIM1\", makeAliases(\"LIMAB1\", \"abLIM-1\", \"ABLIM\", \"LIMATIN\"));\n+    CanonicalGene piezo1 = makeGene(7609, 9780, \"PIEZO1\", makeAliases(\"FAM38A\", \"Mib\", \"LMPH3\", \"DHS\"));\n+    CanonicalGene fgfr3 = makeGene(1827, 2261, \"FGFR3\", makeAliases(\"JTK4\", \"HSFGFR3EX\", \"ACH\", \"CEK2\", \"CD333\"));\n+\n+    public TestGenePanelUtil() {\n+        setProperties();\n+        setGenes();\n+    }\n+\n+    public void setProperties() {\n+        p1 = new Properties();\n+        p1.setProperty(\"stable_id\", \"TESTPANEL1\");\n+        p1.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p1.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+\n+        p2 = new Properties();\n+        p2.setProperty(\"stable_id\", \"TESTPANEL2\");\n+        p2.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p2.setProperty(\"gene_list\", \"CADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\\tFGFR3\\tPIEZO1\");\n+\n+        p3 = new Properties();\n+        p3.setProperty(\"stable_id\", \"TESTPANEL3\");\n+        p3.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p3.setProperty(\"gene_list\", \"\");\n+\n+        p4 = new Properties();\n+        p4.setProperty(\"stable_id\", \"TESTPANEL1_UNIQUE\");\n+        p4.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p4.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\");\n+\n+        p5 = new Properties();\n+        p5.setProperty(\"stable_id\", \"TESTPANEL2_UNIQUE\");\n+        p5.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p5.setProperty(\"gene_list\", \"FGFR3\\tPIEZO1\");\n+\n+        p6 = new Properties();\n+        p6.setProperty(\"stable_id\", \"TESTPANEL12_SHARED\");\n+        p6.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        p6.setProperty(\"gene_list\", \"CADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+    }\n+\n+    public void setGenes() {\n+        g1 = makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1);\n+        g2 = makeGeneSet(otor, cadm2, piezo1, msh3, fgfr3, p2ry10, kat2a, myb, npipb15, dtnb);\n+        g3 = new HashSet<>();\n+        g4 = makeGeneSet(adamts20, ablim1);\n+        g5 = makeGeneSet(piezo1, fgfr3);\n+        g6 = makeGeneSet(otor, cadm2, msh3, p2ry10, kat2a, myb, npipb15, dtnb);\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValue() {\n+        String expected;\n+        String actual;\n+\n+        actual = extractPropertyValue(\"stable_id\", p1, true);\n+        expected = \"TESTPANEL1\";\n+        assertEquals(expected, actual);\n+\n+        actual = extractPropertyValue(\"description\", p1, false);\n+        expected = \"Example gene panel meta file for testing purposes.\";\n+        assertEquals(expected, actual);\n+\n+        actual = extractPropertyValue(\"gene_list\", p1, true);\n+        expected = \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\";\n+        assertEquals(expected, actual);\n+\n+        // gene_list only contains \\t as delimiters\n+        actual = extractPropertyValue(\"gene_list\", p1, false);\n+        assertEquals(expected, actual);\n+\n+        // cannot test on p3 since its gene_list is empty\n+    }\n+\n+    @Test\n+    public void testExtractGenes() {\n+        Set<CanonicalGene> expected;\n+        Set<CanonicalGene> actual;\n+\n+        // Check for a non-empty result\n+        expected = new HashSet<>();\n+        actual = extractGenes(p4, false);\n+\n+        HashSet<String> hs = makeAliases(\"ADAM-TS20\", \"GON-1\", \"ADAMTS-20\");\n+        CanonicalGene cg = makeGene(15009, 80070, \"ADAMTS20\", hs);\n+        expected.add(cg);\n+\n+        hs = makeAliases(\"LIMAB1\", \"abLIM-1\", \"ABLIM\", \"LIMATIN\");\n+        cg = makeGene(3239, 3983, \"ABLIM1\", hs);\n+        expected.add(cg);\n+\n+        assertEquals(expected, actual);\n+\n+        // Check for an empty result\n+        expected = new HashSet<>();\n+        actual = extractGenes(p3, true);\n+        assertEquals(expected, actual);\n+    }\n+\n+    private HashSet<String> makeAliases(String... aliases) {\n+        return new HashSet<>(Arrays.asList(aliases));\n+    }\n+\n+    private HashSet<CanonicalGene> makeGeneSet(CanonicalGene... genes) {\n+        return new HashSet<>(Arrays.asList(genes));\n+    }\n+\n+    private CanonicalGene makeGene(int geneticEntityId, long entrezGeneId, String hugoGeneSymbol, Set<String> aliases) {\n+        CanonicalGene gene = new CanonicalGene(geneticEntityId, entrezGeneId, hugoGeneSymbol, aliases);\n+        gene.setType(\"protein-coding\");\n+        return gene;\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveAEqualsB() {", "originalCommit": "8527ef6f7e0cda5cb7c3c72456790a3251895f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5NjIyMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459496221", "bodyText": "Make these class variables, remove the gene sets, create gene sets as local variables in each test case.", "author": "Luke-Sikina", "createdAt": "2020-07-23T14:33:57Z", "path": "core/src/test/java/org/mskcc/cbio/portal/util/TestGenePanelUtil.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.*;\n+\n+import org.junit.Test;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+public class TestGenePanelUtil {\n+    Properties p1;\n+    Properties p2;\n+    Properties p3;\n+    Properties p4;\n+    Properties p5;\n+    Properties p6;\n+    Set<CanonicalGene> g1;\n+    Set<CanonicalGene> g2;\n+    Set<CanonicalGene> g3;\n+    Set<CanonicalGene> g4;\n+    Set<CanonicalGene> g5;\n+    Set<CanonicalGene> g6;\n+\n+    CanonicalGene otor = makeGene(13321, 56914, \"OTOR\", makeAliases(\"FDP\", \"MIAL1\"));", "originalCommit": "8527ef6f7e0cda5cb7c3c72456790a3251895f0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6c2b646e7298f53a87b815ebc190f2a2ad557b6", "url": "https://github.com/cBioPortal/cbioportal/commit/d6c2b646e7298f53a87b815ebc190f2a2ad557b6", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-23T19:14:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMjM5OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459732399", "bodyText": "Couldn't they just run the script again with the old gene panel file? Seems pretty reversible to me.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n          \n          \n            \n                    System.err.println(\"Proceed? (Y/n)\");", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:15:41Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractPropertyValue;\n+\n+/**\n+ * Updates an existing, potentially in use gene panel.\n+ *\n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+    private static final Scanner s = new Scanner(System.in);\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser\n+                .accepts(\"data\", \"gene panel file\")\n+                .withRequiredArg()\n+                .describedAs(\"data_file.txt\")\n+                .ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        ProgressMonitor.setCurrentMessage(\"Retrieving matching gene panel from database.\");\n+        String stableId = extractPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        if (genePanel == null) {\n+            ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");\n+            return;\n+        }\n+\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \":\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4MTIwMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459781200", "bodyText": "Oh that's true, what I mean is that for that specific panel, if you end up removing some genes and you try to import them back, the genes won't have an entry in the sample_profile (I think)", "author": "jtquach1", "createdAt": "2020-07-23T23:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMjM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMjc5Ng==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459732796", "bodyText": "promptUser is a little vague (I may have told you to call the method this). Let's call it confirmContinue", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:16:34Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractPropertyValue;\n+\n+/**\n+ * Updates an existing, potentially in use gene panel.\n+ *\n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+    private static final Scanner s = new Scanner(System.in);\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser\n+                .accepts(\"data\", \"gene panel file\")\n+                .withRequiredArg()\n+                .describedAs(\"data_file.txt\")\n+                .ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        ProgressMonitor.setCurrentMessage(\"Retrieving matching gene panel from database.\");\n+        String stableId = extractPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        if (genePanel == null) {\n+            ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");\n+            return;\n+        }\n+\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \":\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n+\n+        if (promptUser()) {\n+            if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                    + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+            } else {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                    + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+            }\n+            DaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+        }\n+    }\n+\n+    private static boolean promptUser() {", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzExNQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459733115", "bodyText": "Shouldn't this be logDebug instead of logWarning?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ProgressMonitor.logWarning(\"Gene panel \" + stableId\n          \n          \n            \n                            ProgressMonitor.logDebug(\"Gene panel \" + stableId", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:17:15Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractPropertyValue;\n+\n+/**\n+ * Updates an existing, potentially in use gene panel.\n+ *\n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+    private static final Scanner s = new Scanner(System.in);\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser\n+                .accepts(\"data\", \"gene panel file\")\n+                .withRequiredArg()\n+                .describedAs(\"data_file.txt\")\n+                .ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        ProgressMonitor.setCurrentMessage(\"Retrieving matching gene panel from database.\");\n+        String stableId = extractPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        if (genePanel == null) {\n+            ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");\n+            return;\n+        }\n+\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \":\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n+\n+        if (promptUser()) {\n+            if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4NTIxMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459785212", "bodyText": "hm, I suppose so since it's not a \"warning\" the user has to be worried about on their end, but I'm not sure whether to use setCurrentMessage over logDebug", "author": "jtquach1", "createdAt": "2020-07-23T23:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzE4OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459733189", "bodyText": "ditto", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:17:24Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractPropertyValue;\n+\n+/**\n+ * Updates an existing, potentially in use gene panel.\n+ *\n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+    private static final Scanner s = new Scanner(System.in);\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser\n+                .accepts(\"data\", \"gene panel file\")\n+                .withRequiredArg()\n+                .describedAs(\"data_file.txt\")\n+                .ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        ProgressMonitor.setCurrentMessage(\"Retrieving matching gene panel from database.\");\n+        String stableId = extractPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        if (genePanel == null) {\n+            ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");\n+            return;\n+        }\n+\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \":\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n+\n+        if (promptUser()) {\n+            if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                    + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+            } else {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNDkzMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459734932", "bodyText": "This is super picky, but I don't like the multiple method calls here. Let's just make this one big block. Also, I added a few more new lines. I like to stick to about 80 columns for console output. Oh, also, why is this going to standard err instead of standard out? This isn't an error message.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.err.println(\n          \n          \n            \n                        \"WARNING: This script is ONLY for updating a gene panel, not for adding a new gene panel. To add a new gene panel, run the ImportGenePanel script.\");\n          \n          \n            \n                    System.err.println(\"If you are making changes to an existing gene panel due to a miscount of genes, proceed.\");\n          \n          \n            \n                    System.err.println(\n          \n          \n            \n                        \"Otherwise, if you would like to add a new version of a gene panel, please exit this script and import the gene panel with a new stable ID!\");\n          \n          \n            \n                    System.err.println(\"Will you proceed to update an existing gene panel? (Y/n)\");\n          \n          \n            \n                    System.out.print(\n          \n          \n            \n                        \"WARNING: This script is ONLY for updating a gene panel, not for adding a new gene panel.\\n\" + \n          \n          \n            \n                        \"To add a new gene panel, run the ImportGenePanel script.\\n\" +\n          \n          \n            \n                        \"If you are making changes to an existing gene panel due to a miscount of genes, proceed.\\n\" +\n          \n          \n            \n                        \"Otherwise, if you would like to add a new version of a gene panel, please exit this script\\n\" +\n          \n          \n            \n                        \"and import the gene panel with a new stable ID!\\n\" +\n          \n          \n            \n                        \"Will you proceed to update an existing gene panel? (Y/n)\\n\"\n          \n          \n            \n                    );", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:21:05Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractPropertyValue;\n+\n+/**\n+ * Updates an existing, potentially in use gene panel.\n+ *\n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+    private static final Scanner s = new Scanner(System.in);\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser\n+                .accepts(\"data\", \"gene panel file\")\n+                .withRequiredArg()\n+                .describedAs(\"data_file.txt\")\n+                .ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        ProgressMonitor.setCurrentMessage(\"Retrieving matching gene panel from database.\");\n+        String stableId = extractPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        if (genePanel == null) {\n+            ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");\n+            return;\n+        }\n+\n+        System.err.println(\"WARNING: You are about to make the following changes to gene panel \" + stableId + \":\");\n+        DaoGenePanel.updatePreview(genePanel, canonicalGenes);\n+        System.err.println(\"Proceed? This action is irreversible. (Y/n)\");\n+\n+        if (promptUser()) {\n+            if (DaoSampleProfile.sampleProfileMappingExistsByPanel(genePanel.getInternalId())) {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                    + \" already exists in database and is being used. Proceeding with gene panel update!\");\n+            } else {\n+                ProgressMonitor.logWarning(\"Gene panel \" + stableId\n+                    + \" already exists in database but is unused. Proceeding with gene panel update!\");\n+            }\n+            DaoGenePanel.updateGenePanel(genePanel, canonicalGenes);\n+        }\n+    }\n+\n+    private static boolean promptUser() {\n+        boolean confirmed = false;\n+        String answer = s.nextLine().toUpperCase();\n+\n+        switch (answer) {\n+            case \"Y\":\n+                System.err.println(\"Proceeding with update script.\");\n+                confirmed = true;\n+                break;\n+            case \"N\":\n+                System.err.println(\"Exiting update script.\");\n+                break;\n+            default:\n+                System.err.println(\"Unrecognized input, exiting.\");\n+                break;\n+        }\n+\n+        return confirmed;\n+    }\n+\n+    public void setFile(File genePanelFile) {\n+        this.genePanelFile = genePanelFile;\n+    }\n+\n+    /**\n+     * Makes an instance to run with the given command line arguments.\n+     *\n+     * @param args the command line arguments to be used\n+     */\n+    public UpdateGenePanel(String[] args) {\n+        super(args);\n+    }\n+\n+    /**\n+     * Runs the command as a script and exits with an appropriate exit code.\n+     *\n+     * @param args the arguments given on the command line\n+     */\n+    public static void main(String[] args) {\n+        ConsoleRunnable runner = new UpdateGenePanel(args);\n+        System.err.println(\n+            \"WARNING: This script is ONLY for updating a gene panel, not for adding a new gene panel. To add a new gene panel, run the ImportGenePanel script.\");\n+        System.err.println(\"If you are making changes to an existing gene panel due to a miscount of genes, proceed.\");\n+        System.err.println(\n+            \"Otherwise, if you would like to add a new version of a gene panel, please exit this script and import the gene panel with a new stable ID!\");\n+        System.err.println(\"Will you proceed to update an existing gene panel? (Y/n)\");", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0MTU0MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459741541", "bodyText": "I reckoned that the red text from the System.err.print looks more alerting than the black text from System.out.print, but yes it is not an error message perse", "author": "jtquach1", "createdAt": "2020-07-23T21:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTc0MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459735741", "bodyText": "Delete", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:22:43Z", "path": "core/src/test/java/org/mskcc/cbio/portal/util/TestGenePanelUtil.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.junit.Test;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.*;\n+\n+public class TestGenePanelUtil {\n+\n+    CanonicalGene otor = makeGene(13321, 56914, \"OTOR\", makeAliases(\"FDP\", \"MIAL1\"));\n+    CanonicalGene cadm2 = makeGene(20001, 253559, \"CADM2\", makeAliases(\"IGSF4D\", \"Necl-3\", \"NECL3\", \"SynCAM 2\", \"synCAM2\"));\n+    CanonicalGene msh3 = makeGene(3573, 4437, \"MSH3\", makeAliases(\"MRP1\", \"DUP\", \"FAP4\"));\n+    CanonicalGene p2ry10 = makeGene(10455, 27334, \"P2RY10\", makeAliases(\"P2Y10\", \"LYPSR2\"));\n+    CanonicalGene adamts20 = makeGene(15009, 80070, \"ADAMTS20\", makeAliases(\"ADAM-TS20\", \"GON-1\", \"ADAMTS-20\"));\n+    CanonicalGene kat2a = makeGene(2154, 2648, \"KAT2A\", makeAliases(\"hGCN5\", \"GCN5\", \"GCN5L2\", \"PCAF-b\"));\n+    CanonicalGene myb = makeGene(3674, 4602, \"MYB\", makeAliases(\"c-myb_CDS\", \"Cmyb\", \"c-myb\", \"efg\"));\n+    CanonicalGene npipb15 = makeGene(24049, 440348, \"NPIPB15\", makeAliases(\"A-761H5.4\", \"NPIPL2\"));\n+    CanonicalGene dtnb = makeGene(1492, 1838, \"DTNB\", null);\n+    CanonicalGene ablim1 = makeGene(3239, 3983, \"ABLIM1\", makeAliases(\"LIMAB1\", \"abLIM-1\", \"ABLIM\", \"LIMATIN\"));\n+    CanonicalGene piezo1 = makeGene(7609, 9780, \"PIEZO1\", makeAliases(\"FAM38A\", \"Mib\", \"LMPH3\", \"DHS\"));\n+    CanonicalGene fgfr3 = makeGene(1827, 2261, \"FGFR3\", makeAliases(\"JTK4\", \"HSFGFR3EX\", \"ACH\", \"CEK2\", \"CD333\"));\n+\n+    public TestGenePanelUtil() {", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4MjUzMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459782533", "bodyText": "Do you mean the class constructor or the genes? The genes are used in the tests but deleting the constructor still lets the tests run and pass", "author": "jtquach1", "createdAt": "2020-07-23T23:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNjI5OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459736299", "bodyText": "Just to make things even easier to read, I'd do makeGeneSet() instead of new HashSet<>()", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:23:52Z", "path": "core/src/test/java/org/mskcc/cbio/portal/util/TestGenePanelUtil.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.junit.Test;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.*;\n+\n+public class TestGenePanelUtil {\n+\n+    CanonicalGene otor = makeGene(13321, 56914, \"OTOR\", makeAliases(\"FDP\", \"MIAL1\"));\n+    CanonicalGene cadm2 = makeGene(20001, 253559, \"CADM2\", makeAliases(\"IGSF4D\", \"Necl-3\", \"NECL3\", \"SynCAM 2\", \"synCAM2\"));\n+    CanonicalGene msh3 = makeGene(3573, 4437, \"MSH3\", makeAliases(\"MRP1\", \"DUP\", \"FAP4\"));\n+    CanonicalGene p2ry10 = makeGene(10455, 27334, \"P2RY10\", makeAliases(\"P2Y10\", \"LYPSR2\"));\n+    CanonicalGene adamts20 = makeGene(15009, 80070, \"ADAMTS20\", makeAliases(\"ADAM-TS20\", \"GON-1\", \"ADAMTS-20\"));\n+    CanonicalGene kat2a = makeGene(2154, 2648, \"KAT2A\", makeAliases(\"hGCN5\", \"GCN5\", \"GCN5L2\", \"PCAF-b\"));\n+    CanonicalGene myb = makeGene(3674, 4602, \"MYB\", makeAliases(\"c-myb_CDS\", \"Cmyb\", \"c-myb\", \"efg\"));\n+    CanonicalGene npipb15 = makeGene(24049, 440348, \"NPIPB15\", makeAliases(\"A-761H5.4\", \"NPIPL2\"));\n+    CanonicalGene dtnb = makeGene(1492, 1838, \"DTNB\", null);\n+    CanonicalGene ablim1 = makeGene(3239, 3983, \"ABLIM1\", makeAliases(\"LIMAB1\", \"abLIM-1\", \"ABLIM\", \"LIMATIN\"));\n+    CanonicalGene piezo1 = makeGene(7609, 9780, \"PIEZO1\", makeAliases(\"FAM38A\", \"Mib\", \"LMPH3\", \"DHS\"));\n+    CanonicalGene fgfr3 = makeGene(1827, 2261, \"FGFR3\", makeAliases(\"JTK4\", \"HSFGFR3EX\", \"ACH\", \"CEK2\", \"CD333\"));\n+\n+    public TestGenePanelUtil() {\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValueStableId() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"stable_id\", \"TESTPANEL1\");\n+        String actual = extractPropertyValue(\"stable_id\", p1, true);\n+        String expected = \"TESTPANEL1\";\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValueDescription() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        String actual = extractPropertyValue(\"description\", p1, false);\n+        String expected = \"Example gene panel meta file for testing purposes.\";\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValueGeneList() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        String actual = extractPropertyValue(\"gene_list\", p1, true);\n+        String expected = \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\";\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testExtractPropertyValueUnknownPropertyName() {\n+        Properties p1 = new Properties();\n+        extractPropertyValue(\"stable_id\", p1, true);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testExtractPropertyValueNoPropertyValue() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"stable_id\", \"\");\n+        extractPropertyValue(\"stable_id\", p1, true);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testExtractPropertyValueNoSpaceAllowed() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        extractPropertyValue(\"description\", p1, true);\n+    }\n+\n+    @Test\n+    public void testExtractGenesAllowEmptyGenePanel() {\n+        Properties p = new Properties();\n+        p.setProperty(\"gene_list\", \"\");\n+        Set<CanonicalGene> expected = new HashSet<>();\n+        Set<CanonicalGene> actual = extractGenes(p, true);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testExtractGenesDisallowEmptyGenePanel() {\n+        Properties p = new Properties();\n+        p.setProperty(\"gene_list\", \"\");\n+        extractGenes(p, false);\n+    }\n+\n+    @Test\n+    public void testExtractGenesMissingTab() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"ABLIM1 ADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertNull(actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesNonEmptyGenePanel() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> expected = makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1);\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesAliasedGenes() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"LIMAB1\\tGON-1\\tSynCAM 2\\tDTNB\\tPCAF-b\\tDUP\\tc-myb\\tA-761H5.4\\tMIAL1\\tLYPSR2\");\n+        Set<CanonicalGene> expected = makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1);\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesUnknownParseableLong() {\n+        String NOT_A_GENE = \"111111111111\";\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", NOT_A_GENE + \"\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertNull(actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesUnknownUnparseableLong() {\n+        String NOT_A_GENE = \"HELLOWORLD!\";\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", NOT_A_GENE + \"\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertNull(actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveAEqualsB() {\n+        Pair expected = new Pair(\n+            new HashSet<>(),\n+            new HashSet<>()\n+        );\n+        Pair actual = getAddRemove(\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1),\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1)\n+        );\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveEmptyIntersection() {\n+        Pair expected = new Pair(\n+            makeGeneSet(adamts20, ablim1),\n+            makeGeneSet(piezo1, fgfr3));\n+        Pair actual = getAddRemove(\n+            makeGeneSet(adamts20, ablim1),\n+            makeGeneSet(piezo1, fgfr3));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveAOrBEmpty() {\n+        Pair expected = new Pair(\n+            new HashSet<>(),", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4NzIwMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459787202", "bodyText": "for all instances of new HashSet<>()?", "author": "jtquach1", "createdAt": "2020-07-23T23:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNjI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczODAzMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r459738032", "bodyText": "Remind me tomorrow and I'll show you a fun way to generify this and then I'll explain why its a bad idea.", "author": "Luke-Sikina", "createdAt": "2020-07-23T21:27:41Z", "path": "core/src/test/java/org/mskcc/cbio/portal/util/TestGenePanelUtil.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package org.mskcc.cbio.portal.util;\n+\n+import org.junit.Test;\n+import org.mskcc.cbio.portal.model.CanonicalGene;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.*;\n+\n+public class TestGenePanelUtil {\n+\n+    CanonicalGene otor = makeGene(13321, 56914, \"OTOR\", makeAliases(\"FDP\", \"MIAL1\"));\n+    CanonicalGene cadm2 = makeGene(20001, 253559, \"CADM2\", makeAliases(\"IGSF4D\", \"Necl-3\", \"NECL3\", \"SynCAM 2\", \"synCAM2\"));\n+    CanonicalGene msh3 = makeGene(3573, 4437, \"MSH3\", makeAliases(\"MRP1\", \"DUP\", \"FAP4\"));\n+    CanonicalGene p2ry10 = makeGene(10455, 27334, \"P2RY10\", makeAliases(\"P2Y10\", \"LYPSR2\"));\n+    CanonicalGene adamts20 = makeGene(15009, 80070, \"ADAMTS20\", makeAliases(\"ADAM-TS20\", \"GON-1\", \"ADAMTS-20\"));\n+    CanonicalGene kat2a = makeGene(2154, 2648, \"KAT2A\", makeAliases(\"hGCN5\", \"GCN5\", \"GCN5L2\", \"PCAF-b\"));\n+    CanonicalGene myb = makeGene(3674, 4602, \"MYB\", makeAliases(\"c-myb_CDS\", \"Cmyb\", \"c-myb\", \"efg\"));\n+    CanonicalGene npipb15 = makeGene(24049, 440348, \"NPIPB15\", makeAliases(\"A-761H5.4\", \"NPIPL2\"));\n+    CanonicalGene dtnb = makeGene(1492, 1838, \"DTNB\", null);\n+    CanonicalGene ablim1 = makeGene(3239, 3983, \"ABLIM1\", makeAliases(\"LIMAB1\", \"abLIM-1\", \"ABLIM\", \"LIMATIN\"));\n+    CanonicalGene piezo1 = makeGene(7609, 9780, \"PIEZO1\", makeAliases(\"FAM38A\", \"Mib\", \"LMPH3\", \"DHS\"));\n+    CanonicalGene fgfr3 = makeGene(1827, 2261, \"FGFR3\", makeAliases(\"JTK4\", \"HSFGFR3EX\", \"ACH\", \"CEK2\", \"CD333\"));\n+\n+    public TestGenePanelUtil() {\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValueStableId() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"stable_id\", \"TESTPANEL1\");\n+        String actual = extractPropertyValue(\"stable_id\", p1, true);\n+        String expected = \"TESTPANEL1\";\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValueDescription() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        String actual = extractPropertyValue(\"description\", p1, false);\n+        String expected = \"Example gene panel meta file for testing purposes.\";\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractPropertyValueGeneList() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        String actual = extractPropertyValue(\"gene_list\", p1, true);\n+        String expected = \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\";\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testExtractPropertyValueUnknownPropertyName() {\n+        Properties p1 = new Properties();\n+        extractPropertyValue(\"stable_id\", p1, true);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testExtractPropertyValueNoPropertyValue() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"stable_id\", \"\");\n+        extractPropertyValue(\"stable_id\", p1, true);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testExtractPropertyValueNoSpaceAllowed() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"description\", \"Example gene panel meta file for testing purposes.\");\n+        extractPropertyValue(\"description\", p1, true);\n+    }\n+\n+    @Test\n+    public void testExtractGenesAllowEmptyGenePanel() {\n+        Properties p = new Properties();\n+        p.setProperty(\"gene_list\", \"\");\n+        Set<CanonicalGene> expected = new HashSet<>();\n+        Set<CanonicalGene> actual = extractGenes(p, true);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testExtractGenesDisallowEmptyGenePanel() {\n+        Properties p = new Properties();\n+        p.setProperty(\"gene_list\", \"\");\n+        extractGenes(p, false);\n+    }\n+\n+    @Test\n+    public void testExtractGenesMissingTab() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"ABLIM1 ADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertNull(actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesNonEmptyGenePanel() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"ABLIM1\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> expected = makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1);\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesAliasedGenes() {\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", \"LIMAB1\\tGON-1\\tSynCAM 2\\tDTNB\\tPCAF-b\\tDUP\\tc-myb\\tA-761H5.4\\tMIAL1\\tLYPSR2\");\n+        Set<CanonicalGene> expected = makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1);\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesUnknownParseableLong() {\n+        String NOT_A_GENE = \"111111111111\";\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", NOT_A_GENE + \"\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertNull(actual);\n+    }\n+\n+    @Test\n+    public void testExtractGenesUnknownUnparseableLong() {\n+        String NOT_A_GENE = \"HELLOWORLD!\";\n+        Properties p1 = new Properties();\n+        p1.setProperty(\"gene_list\", NOT_A_GENE + \"\\tADAMTS20\\tCADM2\\tDTNB\\tKAT2A\\tMSH3\\tMYB\\tNPIPB15\\tOTOR\\tP2RY10\");\n+        Set<CanonicalGene> actual = extractGenes(p1, false);\n+        assertNull(actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveAEqualsB() {\n+        Pair expected = new Pair(\n+            new HashSet<>(),\n+            new HashSet<>()\n+        );\n+        Pair actual = getAddRemove(\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1),\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1)\n+        );\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveEmptyIntersection() {\n+        Pair expected = new Pair(\n+            makeGeneSet(adamts20, ablim1),\n+            makeGeneSet(piezo1, fgfr3));\n+        Pair actual = getAddRemove(\n+            makeGeneSet(adamts20, ablim1),\n+            makeGeneSet(piezo1, fgfr3));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveAOrBEmpty() {\n+        Pair expected = new Pair(\n+            new HashSet<>(),\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1)\n+        );\n+        Pair actual = getAddRemove(\n+            new HashSet<>(),\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1)\n+        );\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveIntersectAndOnlyAdd() {\n+        Pair expected = new Pair(\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, kat2a, myb, npipb15, dtnb),\n+            new HashSet<>()\n+        );\n+        Pair actual = getAddRemove(\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1),\n+            makeGeneSet(adamts20, ablim1)\n+        );\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveIntersectAndOnlyRemove() {\n+        Pair expected = new Pair(\n+            new HashSet<>(),\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, kat2a, myb, npipb15, dtnb)\n+        );\n+        Pair actual = getAddRemove(\n+            makeGeneSet(adamts20, ablim1),\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1)\n+        );\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testGetAddRemoveIntersectAndAndRemove() {\n+        Pair expected = new Pair(\n+            makeGeneSet(adamts20, ablim1),\n+            makeGeneSet(piezo1, fgfr3)\n+        );\n+        Pair actual = getAddRemove(\n+            makeGeneSet(otor, cadm2, msh3, p2ry10, adamts20, kat2a, myb, npipb15, dtnb, ablim1),\n+            makeGeneSet(otor, cadm2, piezo1, msh3, fgfr3, p2ry10, kat2a, myb, npipb15, dtnb)\n+        );\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    public void testPair() {\n+        Pair expected = new Pair(\n+            makeGeneSet(ablim1, adamts20, fgfr3, piezo1),\n+            new HashSet<>()\n+        );\n+        Pair actual = new Pair(\n+            makeGeneSet(ablim1, fgfr3, adamts20, piezo1),\n+            new HashSet<>()\n+        );\n+        assertEquals(expected, actual);\n+    }\n+    \n+    private HashSet<String> makeAliases(String... aliases) {", "originalCommit": "c5f10387c80f2cd58b5f5816f1f225b47a8711a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fcb2010d82b7dec08032cc219ab83d38f6c48cc3", "url": "https://github.com/cBioPortal/cbioportal/commit/fcb2010d82b7dec08032cc219ab83d38f6c48cc3", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-23T23:50:53Z", "type": "forcePushed"}, {"oid": "6deeade0c24a1aaf0e493922862a70f2a38cbd67", "url": "https://github.com/cBioPortal/cbioportal/commit/6deeade0c24a1aaf0e493922862a70f2a38cbd67", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 10 testpanel genes for testing\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>\n\nMinor syntax changes", "committedDate": "2020-07-24T15:19:04Z", "type": "forcePushed"}, {"oid": "928255b8cd89aa7d819d83e54d1fac2210c93b11", "url": "https://github.com/cBioPortal/cbioportal/commit/928255b8cd89aa7d819d83e54d1fac2210c93b11", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 10 testpanel genes for testing\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-24T17:22:49Z", "type": "forcePushed"}, {"oid": "c39562063754bdd65a58ed924ee2639f3dee2de5", "url": "https://github.com/cBioPortal/cbioportal/commit/c39562063754bdd65a58ed924ee2639f3dee2de5", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 10 testpanel genes for testing\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>\n\nAdded gene aliases to seed_mini.sql", "committedDate": "2020-07-24T18:03:22Z", "type": "forcePushed"}, {"oid": "075eb159b6168c6e5f0a608a292084fdc6104c1a", "url": "https://github.com/cBioPortal/cbioportal/commit/075eb159b6168c6e5f0a608a292084fdc6104c1a", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-24T18:40:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3NjUzMg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r461676532", "bodyText": "Can we wait to grab a database connection until the check for gene panel existence is complete?", "author": "n1zea144", "createdAt": "2020-07-28T15:34:21Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +198,103 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    /**\n+     * Updates an existing gene panel to the incoming set of genes.\n+     *\n+     * @param genePanel\n+     * @param incoming\n+     * @throws DaoException\n+     */\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        updateGenePanelGeneList(internalId, incoming);\n+    }\n+\n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     *\n+     * @param genePanel\n+     * @param incoming\n+     * @throws DaoException\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));\n+        String add = pair.add.stream()\n+            .map(CanonicalGene::toString)\n+            .collect(Collectors.joining(\", \"));\n+        String remove = pair.remove.stream()\n+            .map(CanonicalGene::toString)\n+            .collect(Collectors.joining(\", \"));\n+\n+        System.out.printf(\"ADD: %s\\n\", add);\n+        System.out.printf(\"REMOVE: %s\\n\", remove);\n+    }\n+\n+    private static boolean genePanelExists(Integer internalId) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        Map<String, GenePanel> genePanelMap;\n+\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel WHERE internal_id = ?\");\n+            pstmt.setInt(1, internalId);\n+            rs = pstmt.executeQuery();\n+            genePanelMap = extractGenePanelMap(rs);\n+            return !genePanelMap.isEmpty();\n+        } catch (SQLException e) {\n+            return false;\n+        } finally {\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n+        }\n+    }\n+\n+    /**\n+     * Inserts and deletes genes from a gene panel represented by an internalId in\n+     * the database.\n+     */\n+    private static void updateGenePanelGeneList(Integer internalId, Set<CanonicalGene> incoming) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);", "originalCommit": "075eb159b6168c6e5f0a608a292084fdc6104c1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwNTgwNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r461705804", "bodyText": "Thanks for the note! I've moved line 270 after the gene panel existence check, and will rebase again", "author": "jtquach1", "createdAt": "2020-07-28T16:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3NjUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY4NDY4MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r461684681", "bodyText": "Is this a newer feature of Java where class name does not have to be prepended to method call?", "author": "n1zea144", "createdAt": "2020-07-28T15:46:02Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +198,103 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    /**\n+     * Updates an existing gene panel to the incoming set of genes.\n+     *\n+     * @param genePanel\n+     * @param incoming\n+     * @throws DaoException\n+     */\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        updateGenePanelGeneList(internalId, incoming);\n+    }\n+\n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     *\n+     * @param genePanel\n+     * @param incoming\n+     * @throws DaoException\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));", "originalCommit": "075eb159b6168c6e5f0a608a292084fdc6104c1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwMzg0OA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r461703848", "bodyText": "According to the Java 1.5 documentation, one can call static methods without their class name. I didn't know this since IntelliJ suggested this import style. I also opted to follow this convention since ImportGenePanel.java also called static methods without their class names.", "author": "jtquach1", "createdAt": "2020-07-28T16:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY4NDY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDQ0Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r461690447", "bodyText": "Just wondering if there was any thought to combining the update functionality into the Import script?", "author": "n1zea144", "createdAt": "2020-07-28T15:53:42Z", "path": "core/src/main/java/org/mskcc/cbio/portal/scripts/UpdateGenePanel.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.mskcc.cbio.portal.scripts;\n+\n+import org.mskcc.cbio.portal.model.*;\n+import org.mskcc.cbio.portal.dao.*;\n+import org.mskcc.cbio.portal.util.ProgressMonitor;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import joptsimple.*;\n+\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractGenes;\n+import static org.mskcc.cbio.portal.util.GenePanelUtil.extractPropertyValue;\n+\n+/**\n+ * Updates an existing, potentially in use gene panel.\n+ *\n+ * @author jtquach1\n+ */\n+public class UpdateGenePanel extends ConsoleRunnable {\n+\n+    private File genePanelFile;\n+    private static final Scanner s = new Scanner(System.in);\n+\n+    @Override\n+    public void run() {\n+        try {\n+            String progName = \"UpdateGenePanel\";\n+            String description = \"Update gene panel files.\";\n+\n+            OptionParser parser = new OptionParser();\n+            OptionSpec<String> data = parser\n+                .accepts(\"data\", \"gene panel file\")\n+                .withRequiredArg()\n+                .describedAs(\"data_file.txt\")\n+                .ofType(String.class);\n+            parser.accepts(\"noprogress\",\n+                \"this option can be given to avoid the messages regarding memory usage and % complete\");\n+\n+            OptionSet options;\n+            try {\n+                options = parser.parse(args);\n+            } catch (OptionException e) {\n+                throw new UsageException(progName, description, parser, e.getMessage());\n+            }\n+            File genePanel_f;\n+            if (options.has(data)) {\n+                genePanel_f = new File(options.valueOf(data));\n+            } else {\n+                throw new UsageException(progName, description, parser, \"'data' argument required.\");\n+            }\n+\n+            setFile(genePanel_f);\n+            importData();\n+        } catch (RuntimeException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void importData() throws Exception {\n+        ProgressMonitor.setCurrentMessage(\"Reading data from:  \" + genePanelFile.getAbsolutePath());\n+        Properties properties = new Properties();\n+        properties.load(new FileInputStream(genePanelFile));\n+\n+        ProgressMonitor.setCurrentMessage(\"Retrieving matching gene panel from database.\");\n+        String stableId = extractPropertyValue(\"stable_id\", properties, true);\n+        Set<CanonicalGene> canonicalGenes = extractGenes(properties, true);\n+        GenePanel genePanel = DaoGenePanel.getGenePanelByStableId(stableId);\n+\n+        if (genePanel == null) {\n+            ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");", "originalCommit": "075eb159b6168c6e5f0a608a292084fdc6104c1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwODk1Ng==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r461708956", "bodyText": "According to Luke, the import and update functionality should be separate from each other", "author": "jtquach1", "createdAt": "2020-07-28T16:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0NjIzOA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r461746238", "bodyText": "@n1zea144 Leaving them as separate scripts makes it a bit harder to make the mistake of updating an existing gene panel when you instead meant to upload a new version of a gene panel for new samples. I think this is an easy enough mistake- the user copies the gene panel file, vims it, updates the genes, but forgets to change the name of the panel before running the script. By keeping the two scripts separate, we make it so a user that ignores warning messages and just presses enter a bunch cannot end up making this mistake.", "author": "Luke-Sikina", "createdAt": "2020-07-28T17:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDQ0Nw=="}], "type": "inlineReview"}, {"oid": "9a30c2eba086aa2692c629178c5c2181fb0377b3", "url": "https://github.com/cBioPortal/cbioportal/commit/9a30c2eba086aa2692c629178c5c2181fb0377b3", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-28T16:22:58Z", "type": "forcePushed"}, {"oid": "524a21e631441b5f52ac820d7145248d29183994", "url": "https://github.com/cBioPortal/cbioportal/commit/524a21e631441b5f52ac820d7145248d29183994", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\nAdded Perl script and updated markdown documentation\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-28T17:39:27Z", "type": "forcePushed"}, {"oid": "d2b14f7ba76616633e572df5ef367e4348429232", "url": "https://github.com/cBioPortal/cbioportal/commit/d2b14f7ba76616633e572df5ef367e4348429232", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow user to update with empty gene panel, which removes all genes\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\nAdded Perl script and updated markdown documentation\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-28T17:48:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463108024", "bodyText": "It looks like its possible to remove all genes from the panel.  Should we check this and if so, should we prevent this from happening ?", "author": "n1zea144", "createdAt": "2020-07-30T16:07:25Z", "path": "core/src/main/java/org/mskcc/cbio/portal/dao/DaoGenePanel.java", "diffHunk": "@@ -181,4 +198,103 @@ public static void deleteGenePanel(GenePanel genePanel) throws DaoException {\n             JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, null);\n         }\n     }\n+\n+    /**\n+     * Updates an existing gene panel to the incoming set of genes.\n+     *\n+     * @param genePanel\n+     * @param incoming\n+     * @throws DaoException\n+     */\n+    public static void updateGenePanel(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        String stableId = genePanel.getStableId();\n+        Integer internalId = genePanel.getInternalId();\n+\n+        if (stableId == null) {\n+            throw new DaoException(\"Gene Panel stable ID cannot be null.\");\n+        }\n+\n+        updateGenePanelGeneList(internalId, incoming);\n+    }\n+\n+    /**\n+     * Prints the genes to be added and removed from a gene panel in the database.\n+     *\n+     * @param genePanel\n+     * @param incoming\n+     * @throws DaoException\n+     */\n+    public static void updatePreview(GenePanel genePanel, Set<CanonicalGene> incoming) throws DaoException {\n+        Pair pair = getAddRemove(incoming, extractGenePanelGenes(genePanel.getInternalId()));\n+        String add = pair.add.stream()\n+            .map(CanonicalGene::toString)\n+            .collect(Collectors.joining(\", \"));\n+        String remove = pair.remove.stream()\n+            .map(CanonicalGene::toString)\n+            .collect(Collectors.joining(\", \"));\n+\n+        System.out.printf(\"ADD: %s\\n\", add);\n+        System.out.printf(\"REMOVE: %s\\n\", remove);\n+    }\n+\n+    private static boolean genePanelExists(Integer internalId) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+        Map<String, GenePanel> genePanelMap;\n+\n+        try {\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+            pstmt = con.prepareStatement(\"SELECT * FROM gene_panel WHERE internal_id = ?\");\n+            pstmt.setInt(1, internalId);\n+            rs = pstmt.executeQuery();\n+            genePanelMap = extractGenePanelMap(rs);\n+            return !genePanelMap.isEmpty();\n+        } catch (SQLException e) {\n+            return false;\n+        } finally {\n+            JdbcUtil.closeAll(DaoGenePanel.class, con, pstmt, rs);\n+        }\n+    }\n+\n+    /**\n+     * Inserts and deletes genes from a gene panel represented by an internalId in\n+     * the database.\n+     */\n+    private static void updateGenePanelGeneList(Integer internalId, Set<CanonicalGene> incoming) throws DaoException {\n+        Connection con = null;\n+        PreparedStatement pstmt = null;\n+        ResultSet rs = null;\n+\n+        try {\n+            if (!genePanelExists(internalId)) {\n+                System.out.println(\"Gene panel does not exist in gene_panel, exiting\");\n+                return;\n+            }\n+\n+            con = JdbcUtil.getDbConnection(DaoGenePanel.class);\n+            Pair pair = getAddRemove(incoming, extractGenePanelGenes(internalId));\n+            Set<CanonicalGene> toAdd = pair.add;\n+            Set<CanonicalGene> toRemove = pair.remove;\n+\n+            // Add and remove genes from specified gene panel\n+            for (CanonicalGene canonicalGene : toAdd) {\n+                pstmt = con.prepareStatement(\"INSERT INTO gene_panel_list (`INTERNAL_ID`, `GENE_ID`) VALUES (?,?)\");\n+                pstmt.setInt(1, internalId);\n+                pstmt.setLong(2, canonicalGene.getEntrezGeneId());\n+                pstmt.executeUpdate();\n+            }\n+            for (CanonicalGene canonicalGene : toRemove) {", "originalCommit": "d2b14f7ba76616633e572df5ef367e4348429232", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExMjAxMQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463112011", "bodyText": "In UpdateGenePanel.java, the user prompt in importData() verifies the changes that will be made to the gene panel, like so:\n\nOther than that, I asked Luke if importing an empty gene panel should allow for the removal of all existing genes, and he stated that behavior sounds reasonable. I suppose if the user wanted to add back the genes, they could pull up an older version of their input file with the gene names.\nI'll ping Luke about whether after all genes are removed, that the gene panel should be removed from gene_panel_list as well", "author": "jtquach1", "createdAt": "2020-07-30T16:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNDA0NA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463114044", "bodyText": "ah, so removal of all genes means stop the update script and don't make the deletions", "author": "jtquach1", "createdAt": "2020-07-30T16:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExNTc1NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463115755", "bodyText": "It's not meaningful to have a panel in the database, which samples refer to in sample_profile, that contain no genes.  I'm also not sure what the affect is on the web page.  One approach is to remove the the panel and subsequent records in sample_profile (via cascade), but thats a bit messy and could happen by mistake.", "author": "n1zea144", "createdAt": "2020-07-30T16:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNTIyMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463125220", "bodyText": "Spoke with @Luke-Sikina via Slack.  Best approach is not to prevent an update which results in empty panel in database.", "author": "n1zea144", "createdAt": "2020-07-30T16:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNjU5OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463126599", "bodyText": "Oh, does that mean that within UpdateGenePanel, checking if the incoming set of genes is empty and aborting the script is not needed?", "author": "jtquach1", "createdAt": "2020-07-30T16:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNjQ2MA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463136460", "bodyText": "I've just added the check on lines 77-80 on UpdateGenePanel, after the gene panel null check:\n        if (genePanel == null) {\n            ProgressMonitor.logWarning(\"Gene panel \" + stableId + \" does not exist in the database! Exiting.\");\n            return;\n        }\n\n        if (canonicalGenes == null || canonicalGenes.isEmpty()) {\n            ProgressMonitor.logWarning(\"Incoming gene panel is empty, which would result in the removal of all genes from gene panel \" + stableId + \". Exiting.\");\n            return;\n        }\n(edited since I realized to use ProgressMonitor.logWarning instead of System.err.println)", "author": "jtquach1", "createdAt": "2020-07-30T16:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTI3Mg==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463225272", "bodyText": "Yeah, checking/aborting when the incoming gene list from the panel file is empty should suffice, thanks for the adjustment.", "author": "n1zea144", "createdAt": "2020-07-30T19:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNjY4OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463226689", "bodyText": "Thank you for the reviews!", "author": "jtquach1", "createdAt": "2020-07-30T19:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NjE2Mw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7695#discussion_r463246163", "bodyText": "I've just updated the markdown file again to reflect that trying to import an empty gene panel will abort the script.", "author": "jtquach1", "createdAt": "2020-07-30T20:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODAyNA=="}], "type": "inlineReview"}, {"oid": "0468141b84c35b42ca7dda779511e576ffce4e82", "url": "https://github.com/cBioPortal/cbioportal/commit/0468141b84c35b42ca7dda779511e576ffce4e82", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow empty gene panel to be inputted, but abort script if so\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\nAdded Perl script and updated markdown documentation\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-30T16:49:30Z", "type": "forcePushed"}, {"oid": "83c7b912de2b0f518a5c39ee205035660733feb4", "url": "https://github.com/cBioPortal/cbioportal/commit/83c7b912de2b0f518a5c39ee205035660733feb4", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow empty gene panel to be inputted, but abort script if so\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\nAdded Perl script and updated markdown documentation\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-30T16:57:06Z", "type": "forcePushed"}, {"oid": "e4833962299a4cbb8c59c03b649bf326ca1f31fe", "url": "https://github.com/cBioPortal/cbioportal/commit/e4833962299a4cbb8c59c03b649bf326ca1f31fe", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow empty gene panel to be inputted, but abort script if so\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\nAdded Perl script and updated markdown documentation\nEdited markdown documentation on how to use the update script\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-30T20:13:43Z", "type": "commit"}, {"oid": "e4833962299a4cbb8c59c03b649bf326ca1f31fe", "url": "https://github.com/cBioPortal/cbioportal/commit/e4833962299a4cbb8c59c03b649bf326ca1f31fe", "message": "Add script that allows for update to existing gene panel\n\nAdded UpdateGenePanel, based off ImportGenePanel\nRefactored and moved identical methods into new util file\nUpdating allows user to add/remove genes from existing gene panel in database\nAllow empty gene panel to be inputted, but abort script if so\nPrompt user with Y/n to notify that this is an update and not import script\nPreview genes to be added/removed before finalizing Y/n prompt\nUnit tests for utility methods\nUpdated ImportGenePanel calls\nFormatted code for readability\nAdded javadocs\nAdded null check in extractPropertyValue\nAdded 12 testpanel genes and their aliases for testing\nAdded Perl script and updated markdown documentation\nEdited markdown documentation on how to use the update script\n\nCo-authored-by: Luke Sikina <lucas.sikina@gmail.com>", "committedDate": "2020-07-30T20:13:43Z", "type": "forcePushed"}]}