{"pr_number": 7973, "pr_title": "Update validator for generic assay binary and categorical data", "pr_createdAt": "2020-10-15T17:19:03Z", "pr_url": "https://github.com/cBioPortal/cbioportal/pull/7973", "timeline": [{"oid": "42acccb659378c75590d902297a56590ba3ec3fa", "url": "https://github.com/cBioPortal/cbioportal/commit/42acccb659378c75590d902297a56590ba3ec3fa", "message": "update tests", "committedDate": "2020-10-15T17:52:37Z", "type": "forcePushed"}, {"oid": "9b43e5e2ff30e7029298fd38553c88e00fd12ee3", "url": "https://github.com/cBioPortal/cbioportal/commit/9b43e5e2ff30e7029298fd38553c88e00fd12ee3", "message": "update tests", "committedDate": "2020-10-15T19:00:10Z", "type": "forcePushed"}, {"oid": "97004a8cfaea970828339c294f3a39af303df09f", "url": "https://github.com/cBioPortal/cbioportal/commit/97004a8cfaea970828339c294f3a39af303df09f", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-16T00:57:13Z", "type": "forcePushed"}, {"oid": "f8c3da2e5a68cd98582b9984d2a2b9241b128636", "url": "https://github.com/cBioPortal/cbioportal/commit/f8c3da2e5a68cd98582b9984d2a2b9241b128636", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-16T02:11:36Z", "type": "forcePushed"}, {"oid": "508403a06c51c512a4a7a16cf8ba2747c0bb0ae8", "url": "https://github.com/cBioPortal/cbioportal/commit/508403a06c51c512a4a7a16cf8ba2747c0bb0ae8", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-16T03:26:08Z", "type": "forcePushed"}, {"oid": "fefa150024a079be81ee969614959ae275c4efa6", "url": "https://github.com/cBioPortal/cbioportal/commit/fefa150024a079be81ee969614959ae275c4efa6", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-16T04:31:40Z", "type": "forcePushed"}, {"oid": "669316a00f68da77ad3626fd0927262782d9b2ae", "url": "https://github.com/cBioPortal/cbioportal/commit/669316a00f68da77ad3626fd0927262782d9b2ae", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-16T14:46:32Z", "type": "forcePushed"}, {"oid": "087b6e27982b596b3975a7a35a0a5768b0b8ce37", "url": "https://github.com/cBioPortal/cbioportal/commit/087b6e27982b596b3975a7a35a0a5768b0b8ce37", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-16T15:33:18Z", "type": "forcePushed"}, {"oid": "7ee4b02a12b71c970d0304deb44d37f6ce7e93b6", "url": "https://github.com/cBioPortal/cbioportal/commit/7ee4b02a12b71c970d0304deb44d37f6ce7e93b6", "message": "update document", "committedDate": "2020-10-19T18:13:01Z", "type": "forcePushed"}, {"oid": "a48900aadb74e7774e425e891e0e04b9f9c14bd3", "url": "https://github.com/cBioPortal/cbioportal/commit/a48900aadb74e7774e425e891e0e04b9f9c14bd3", "message": "update document", "committedDate": "2020-10-19T18:13:41Z", "type": "forcePushed"}, {"oid": "0cbfb831ba229459c01580900140d0f48db6db61", "url": "https://github.com/cBioPortal/cbioportal/commit/0cbfb831ba229459c01580900140d0f48db6db61", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-19T18:41:54Z", "type": "forcePushed"}, {"oid": "09e7045d4268606e252bed1f8e68e01738138937", "url": "https://github.com/cBioPortal/cbioportal/commit/09e7045d4268606e252bed1f8e68e01738138937", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-19T20:34:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MzIwMw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r511963203", "bodyText": "Just a small question. Are the binary values fixed?", "author": "rmadupuri", "createdAt": "2020-10-26T13:35:31Z", "path": "core/src/main/scripts/importer/validateData.py", "diffHunk": "@@ -4361,56 +4358,113 @@ class GenericAssayValidator(GenericAssayWiseFileValidator):\n     # (1) Cell contains a value without decimals and is not prefixed by \">\"; value appears to be truncated but lacks \">\" truncation indicator\n     def checkValue(self, value, col_index):\n         \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # if the value is prefixed with '>' or '<' remove this prefix\n+        # prior to evaluation of the numeric value\n+        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n+        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n+\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n \n         # value is not defined (empty cell)\n-        stripped_value = value.strip()\n-        if stripped_value == \"\":\n-            self.logger.error(\"Cell is empty. A response value value is expected. Use 'NA' to indicate missing values.\",\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A value is expected. Use 'NA' to indicate missing values.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n-        # 'NA' is an allowed value. No further validations apply.\n-        if stripped_value == 'NA':\n-            return\n-\n-        # if the value is prefixed with '>' or '<' remove this prefix\n-        # prior to evaluation of the numeric value\n-        hasTruncSymbol = re.match(\"^[><]\", stripped_value)\n-        stripped_value = re.sub(r\"^[><]\\s*\",\"\", stripped_value)\n-\n         try:\n             numeric_value = float(stripped_value)\n         except ValueError:\n-            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid response value.\",\n+            self.logger.error(\"Value cannot be interpreted as a floating point number and is not valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isnan(numeric_value):\n-            self.logger.error(\"Value is NaN, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is NaN, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if math.isinf(numeric_value):\n-            self.logger.error(\"Value is infinite and, therefore, not a valid response value.\",\n+            self.logger.error(\"Value is infinite and, therefore, not a valid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n             return\n \n         if numeric_value % 1 == 0 and not hasTruncSymbol:\n-            self.logger.warning(\"Value has no decimals and may represent an invalid response value.\",\n+            self.logger.warning(\"Value has no decimals and may represent an invalid value.\",\n                 extra={'line_number': self.line_number,\n                 'column_number': col_index + 1,\n                 'cause': value})\n \n         return\n \n+class GenericAssayCategoricalValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay categorical values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayCategoricalValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) non-empty string\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    def checkValue(self, value, col_index):\n+        \"\"\"Check a value in a sample column.\"\"\"\n+        stripped_value = value.strip()\n+        # do not check null values\n+        # 'NA' is an allowed value. No further validations apply.\n+        if stripped_value in self.NULL_VALUES:\n+            return\n+        # non-empty string\n+        if len(stripped_value) == 0:\n+            self.logger.error(\"Cell is empty. A categorical value is expected. Use 'NA' to indicate missing values.\",\n+                extra={'line_number': self.line_number,\n+                'column_number': col_index + 1,\n+                'cause': value})\n+\n+        return\n+\n+class GenericAssayBinaryValidator(GenericAssayWiseFileValidator):\n+\n+    \"\"\" Validator for files containing generic assay binary values.\n+    \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        \"\"\"Initialize the instance attributes of the data file validator.\"\"\"\n+        super(GenericAssayBinaryValidator, self).__init__(*args, **kwargs)\n+\n+    # (1) values defined in ALLOWED_VALUES\n+    # (2) NA cell value is allowed; means value was not tested on a sample\n+\n+    ALLOWED_VALUES = ['yes', 'no', 'true', 'false'] + GenericAssayWiseFileValidator.NULL_VALUES", "originalCommit": "09e7045d4268606e252bed1f8e68e01738138937", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NDI2NQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512064265", "bodyText": "Yes, in the RFC, we planned to have a controlled vocabulary for binary type: https://docs.google.com/document/d/1-6O16_j5b5LeHA5SnChnlEKQTYhcwNh4AEwCxB8FwC8/edit?disco=AAAAHCuNjcs.", "author": "dippindots", "createdAt": "2020-10-26T15:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MzIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzA1MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512073051", "bodyText": "Right. We can extend the list if we have to introduce other binary values.", "author": "rmadupuri", "createdAt": "2020-10-26T15:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2MzIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r511967300", "bodyText": "Just to be consistent with how we define datatype in other profiles, can we update the line to datatype: LIMIT-VALUE, CATEGORICAL or BINARY?", "author": "rmadupuri", "createdAt": "2020-10-26T13:41:17Z", "path": "docs/File-Formats.md", "diffHunk": "@@ -1298,15 +1298,15 @@ The cells contain the p-value for the GSVA score: A real number, between 0.0 and\n YAML or JSON file which contains extra information about the cancer study. No compulsory fields are required for this file (free-form). To enable this feature, you need to add a line in the cancer study meta file with `tags_file:` followed the YAML/JSON file name. The information on the YAML or JSON file will be displayed in a table when mousing over a tag logo in the studies on the query page.\n \n ## Generic Assay\n-Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a real number represents a captured measurement.\n+Generic Assay is a two dimensional matrix generalized to capture non-genetic measurements per sample. Instead of a gene per row and a sample per column, a Generic Assay file contains a generic entity per row and a sample per column. A generic entity is defined by the data curator and generally means something other than a gene. Some examples include, treatment response or mutational signatures. For each generic entity - sample pair, a (real number / text / binary value) represents a captured measurement.\n \n ### Generic Assay meta file\n The generic assay metadata file should contain the following fields:\n ```\n cancer_study_identifier: Same value as specified in meta file of the study\n genetic_alteration_type: GENERIC_ASSAY\n generic_assay_type: <GENERIC_ASSAY_TYPE>, e.g., \"TREATMENT_RESPONSE\" or \"MUTATIONAL_SIGNATURE\"\n-datatype: LIMIT-VALUE\n+datatype: value from LIMIT-VALUE / CATEGORICAL / BINARY", "originalCommit": "09e7045d4268606e252bed1f8e68e01738138937", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NzcxMA==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512067710", "bodyText": "Sure, updated!", "author": "dippindots", "createdAt": "2020-10-26T15:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3MzI3OQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512073279", "bodyText": "Thanks!", "author": "rmadupuri", "createdAt": "2020-10-26T15:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NTM5MQ==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512075391", "bodyText": "The failed tests seems to be not related to the changes in this PR. Can we merge?", "author": "rmadupuri", "createdAt": "2020-10-26T15:59:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3Njk2Nw==", "url": "https://github.com/cBioPortal/cbioportal/pull/7973#discussion_r512076967", "bodyText": "Yes, I think we can merge!", "author": "dippindots", "createdAt": "2020-10-26T16:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk2NzMwMA=="}], "type": "inlineReview"}, {"oid": "38dc58b115939d2d7ddd7ea34b19c29f10d09311", "url": "https://github.com/cBioPortal/cbioportal/commit/38dc58b115939d2d7ddd7ea34b19c29f10d09311", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-26T15:49:22Z", "type": "commit"}, {"oid": "38dc58b115939d2d7ddd7ea34b19c29f10d09311", "url": "https://github.com/cBioPortal/cbioportal/commit/38dc58b115939d2d7ddd7ea34b19c29f10d09311", "message": "generic assay binary data and categorical data validator", "committedDate": "2020-10-26T15:49:22Z", "type": "forcePushed"}]}