{"pr_number": 578, "pr_title": "Add tests to the KafkaStreams quickstart", "pr_createdAt": "2020-05-24T18:55:38Z", "pr_url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MjgwOQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r440762809", "bodyText": "Can we pull this as a managed version from the Quarkus BOM?", "author": "gunnarmorling", "createdAt": "2020-06-16T10:54:51Z", "path": "kafka-streams-quickstart/aggregator/pom.xml", "diffHunk": "@@ -54,6 +54,28 @@\n       <artifactId>rest-assured</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.kafka</groupId>\n+      <artifactId>kafka-streams-test-utils</artifactId>\n+      <version>2.5.0</version>", "originalCommit": "dfba66bb47e3594ca078f0b16137d656c4eddbf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNjQzMQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r440806431", "bodyText": "Yes ! It was added to the BOM meanwhile.", "author": "rquinio", "createdAt": "2020-06-16T12:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MjgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MzcyMw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r440763723", "bodyText": "Would be good to add a timeout, in case the records never materialize. I think Awaitility is used in similar situations already in other tests.", "author": "gunnarmorling", "createdAt": "2020-06-16T10:56:39Z", "path": "kafka-streams-quickstart/aggregator/src/test/java/org/acme/kafka/streams/aggregator/streams/AggregatorTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.acme.kafka.streams.aggregator.streams;\r\n+\r\n+import io.quarkus.kafka.client.serialization.JsonbDeserializer;\r\n+import io.quarkus.kafka.client.serialization.JsonbSerializer;\r\n+import io.quarkus.test.common.QuarkusTestResource;\r\n+import io.quarkus.test.junit.QuarkusTest;\r\n+import org.acme.kafka.streams.aggregator.model.Aggregation;\r\n+import org.acme.kafka.streams.aggregator.model.WeatherStation;\r\n+import org.apache.kafka.clients.consumer.Consumer;\r\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\r\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\r\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\r\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\r\n+import org.apache.kafka.clients.producer.KafkaProducer;\r\n+import org.apache.kafka.clients.producer.ProducerConfig;\r\n+import org.apache.kafka.clients.producer.ProducerRecord;\r\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\r\n+import org.apache.kafka.common.serialization.IntegerSerializer;\r\n+import org.apache.kafka.common.serialization.StringSerializer;\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.jupiter.api.Timeout;\r\n+\r\n+import java.time.Duration;\r\n+import java.time.Instant;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.TEMPERATURES_AGGREGATED_TOPIC;\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.TEMPERATURE_VALUES_TOPIC;\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.WEATHER_STATIONS_TOPIC;\r\n+\r\n+/**\r\n+ * Integration testing of the application with an embedded broker.\r\n+ */\r\n+@QuarkusTest\r\n+@QuarkusTestResource(KafkaResource.class)\r\n+public class AggregatorTest {\r\n+\r\n+    static final String BROKER_LIST = \"localhost:9092\";\r\n+\r\n+    KafkaProducer<Integer, String> temperatureProducer;\r\n+\r\n+    KafkaProducer<Integer, WeatherStation> weatherStationsProducer;\r\n+\r\n+    KafkaConsumer<Integer, Aggregation> weatherStationsConsumer;\r\n+\r\n+    @BeforeEach\r\n+    public void setUp(){\r\n+        temperatureProducer = new KafkaProducer(producerProps(), new IntegerSerializer(), new StringSerializer());\r\n+        weatherStationsProducer = new KafkaProducer(producerProps(), new IntegerSerializer(), new JsonbSerializer());\r\n+        weatherStationsConsumer =  new KafkaConsumer(consumerProps(), new IntegerDeserializer(), new JsonbDeserializer<>(Aggregation.class));\r\n+    }\r\n+\r\n+    @AfterEach\r\n+    public void tearDown(){\r\n+        temperatureProducer.close();\r\n+        weatherStationsProducer.close();\r\n+        weatherStationsConsumer.close();\r\n+    }\r\n+\r\n+    @Test\r\n+    @Timeout(value = 10, unit = TimeUnit.SECONDS)\r\n+    public void test() throws InterruptedException {\r\n+        weatherStationsConsumer.subscribe(Collections.singletonList(TEMPERATURES_AGGREGATED_TOPIC));\r\n+        weatherStationsProducer.send(new ProducerRecord<>(WEATHER_STATIONS_TOPIC, 1, new WeatherStation()));\r\n+        temperatureProducer.send(new ProducerRecord<>(TEMPERATURE_VALUES_TOPIC, 1,Instant.now() + \";\" + \"15\" ));\r\n+        temperatureProducer.send(new ProducerRecord<>(TEMPERATURE_VALUES_TOPIC, 1,Instant.now() + \";\" + \"25\" ));\r\n+        List<ConsumerRecord<Integer, Aggregation>> results = poll(weatherStationsConsumer,1);\r\n+\r\n+        // Assumes the state store was initially empty\r\n+        Assertions.assertEquals(2, results.get(0).value().count);\r\n+        Assertions.assertEquals(20, results.get(0).value().avg);\r\n+    }\r\n+\r\n+    private Properties consumerProps() {\r\n+        Properties props = new Properties();\r\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST);\r\n+        props.put(ConsumerConfig.GROUP_ID_CONFIG, \"test-group-id\");\r\n+        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"true\");\r\n+        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\r\n+        return props;\r\n+    }\r\n+\r\n+    private Properties producerProps() {\r\n+        Properties props = new Properties();\r\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BROKER_LIST);\r\n+        return props;\r\n+    }\r\n+\r\n+    private List<ConsumerRecord<Integer, Aggregation>> poll(Consumer<Integer, Aggregation> consumer, int expectedRecordCount) {\r\n+        int fetched = 0;\r\n+        List<ConsumerRecord<Integer, Aggregation>> result = new ArrayList<>();\r\n+        while (fetched < expectedRecordCount) {\r", "originalCommit": "dfba66bb47e3594ca078f0b16137d656c4eddbf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MDM1OA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r441140358", "bodyText": "There's actually a JUnit timeout (10s) at test level, could it be enough ?\nI guess a failure could be clearer with Awaitility, but I've only used it for async calls, not sure what's the pattern for a while loop ?", "author": "rquinio", "createdAt": "2020-06-16T21:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MzcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1Mjg1MQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r441352851", "bodyText": "There's actually a JUnit timeout (10s) at test level, could it be enough ?\n\nAh yes, I see.\n\nnot sure what's the pattern for a while loop ?\n\nHere's how we use it in Debezium: https://github.com/debezium/debezium-examples/blob/master/testcontainers/src/test/java/io/debezium/examples/testcontainers/DebeziumContainerTest.java#L134-L148\nLeaving it to you which way to go.", "author": "gunnarmorling", "createdAt": "2020-06-17T07:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NDQ2Mw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r440764463", "bodyText": "Also assert the station name so to see the joining works?", "author": "gunnarmorling", "createdAt": "2020-06-16T10:58:05Z", "path": "kafka-streams-quickstart/aggregator/src/test/java/org/acme/kafka/streams/aggregator/streams/TopologyProducerTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.acme.kafka.streams.aggregator.streams;\r\n+\r\n+import io.quarkus.kafka.client.serialization.JsonbDeserializer;\r\n+import io.quarkus.kafka.client.serialization.JsonbSerializer;\r\n+import io.quarkus.test.junit.QuarkusTest;\r\n+import org.acme.kafka.streams.aggregator.model.Aggregation;\r\n+import org.acme.kafka.streams.aggregator.model.WeatherStation;\r\n+import org.apache.kafka.common.serialization.StringSerializer;\r\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\r\n+import org.apache.kafka.common.serialization.IntegerSerializer;\r\n+import org.apache.kafka.streams.StreamsConfig;\r\n+import org.apache.kafka.streams.TestInputTopic;\r\n+import org.apache.kafka.streams.TestOutputTopic;\r\n+import org.apache.kafka.streams.Topology;\r\n+import org.apache.kafka.streams.TopologyTestDriver;\r\n+import org.apache.kafka.streams.test.TestRecord;\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n+\r\n+import javax.inject.Inject;\r\n+import java.time.Instant;\r\n+import java.util.Properties;\r\n+\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.TEMPERATURES_AGGREGATED_TOPIC;\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.TEMPERATURE_VALUES_TOPIC;\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.WEATHER_STATIONS_STORE;\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.WEATHER_STATIONS_TOPIC;\r\n+\r\n+/**\r\n+ * Testing of the Topology without a broker, using TopologyTestDriver\r\n+ */\r\n+@QuarkusTest\r\n+public class TopologyProducerTest {\r\n+\r\n+    @Inject\r\n+    Topology topology;\r\n+\r\n+    TopologyTestDriver testDriver;\r\n+\r\n+    TestInputTopic<Integer, String> temperatures;\r\n+\r\n+    TestInputTopic<Integer, WeatherStation> weatherStations;\r\n+\r\n+    TestOutputTopic<Integer, Aggregation> temperaturesAggregated;\r\n+\r\n+    @BeforeEach\r\n+    public void setUp(){\r\n+        Properties config = new Properties();\r\n+        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"testApplicationId\");\r\n+        config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy:1234\");\r\n+        testDriver = new TopologyTestDriver(topology, config);\r\n+\r\n+        temperatures = testDriver.createInputTopic(TEMPERATURE_VALUES_TOPIC, new IntegerSerializer(), new StringSerializer());\r\n+        weatherStations = testDriver.createInputTopic(WEATHER_STATIONS_TOPIC, new IntegerSerializer(), new JsonbSerializer());\r\n+\r\n+        temperaturesAggregated = testDriver.createOutputTopic(TEMPERATURES_AGGREGATED_TOPIC, new IntegerDeserializer(),\r\n+                new JsonbDeserializer<>(Aggregation.class));\r\n+    }\r\n+\r\n+    @AfterEach\r\n+    public void tearDown(){\r\n+        testDriver.getTimestampedKeyValueStore(WEATHER_STATIONS_STORE).flush();\r\n+        testDriver.close();\r\n+    }\r\n+\r\n+    @Test\r\n+    public void test(){\r\n+        weatherStations.pipeInput(1, new WeatherStation());\r\n+        temperatures.pipeInput(1, Instant.now() + \";\" + \"15\");\r\n+        temperatures.pipeInput(1, Instant.now() + \";\" + \"25\");\r\n+\r\n+        temperaturesAggregated.readRecord();\r\n+        TestRecord<Integer, Aggregation> result = temperaturesAggregated.readRecord();\r\n+\r\n+        Assertions.assertEquals(2, result.getValue().count);\r\n+        Assertions.assertEquals(20, result.getValue().avg);\r", "originalCommit": "dfba66bb47e3594ca078f0b16137d656c4eddbf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NDc3OQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r440764779", "bodyText": "Also assert the station name?", "author": "gunnarmorling", "createdAt": "2020-06-16T10:58:38Z", "path": "kafka-streams-quickstart/aggregator/src/test/java/org/acme/kafka/streams/aggregator/streams/AggregatorTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.acme.kafka.streams.aggregator.streams;\r\n+\r\n+import io.quarkus.kafka.client.serialization.JsonbDeserializer;\r\n+import io.quarkus.kafka.client.serialization.JsonbSerializer;\r\n+import io.quarkus.test.common.QuarkusTestResource;\r\n+import io.quarkus.test.junit.QuarkusTest;\r\n+import org.acme.kafka.streams.aggregator.model.Aggregation;\r\n+import org.acme.kafka.streams.aggregator.model.WeatherStation;\r\n+import org.apache.kafka.clients.consumer.Consumer;\r\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\r\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\r\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\r\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\r\n+import org.apache.kafka.clients.producer.KafkaProducer;\r\n+import org.apache.kafka.clients.producer.ProducerConfig;\r\n+import org.apache.kafka.clients.producer.ProducerRecord;\r\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\r\n+import org.apache.kafka.common.serialization.IntegerSerializer;\r\n+import org.apache.kafka.common.serialization.StringSerializer;\r\n+import org.junit.jupiter.api.AfterEach;\r\n+import org.junit.jupiter.api.Assertions;\r\n+import org.junit.jupiter.api.BeforeEach;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.jupiter.api.Timeout;\r\n+\r\n+import java.time.Duration;\r\n+import java.time.Instant;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.TEMPERATURES_AGGREGATED_TOPIC;\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.TEMPERATURE_VALUES_TOPIC;\r\n+import static org.acme.kafka.streams.aggregator.streams.TopologyProducer.WEATHER_STATIONS_TOPIC;\r\n+\r\n+/**\r\n+ * Integration testing of the application with an embedded broker.\r\n+ */\r\n+@QuarkusTest\r\n+@QuarkusTestResource(KafkaResource.class)\r\n+public class AggregatorTest {\r\n+\r\n+    static final String BROKER_LIST = \"localhost:9092\";\r\n+\r\n+    KafkaProducer<Integer, String> temperatureProducer;\r\n+\r\n+    KafkaProducer<Integer, WeatherStation> weatherStationsProducer;\r\n+\r\n+    KafkaConsumer<Integer, Aggregation> weatherStationsConsumer;\r\n+\r\n+    @BeforeEach\r\n+    public void setUp(){\r\n+        temperatureProducer = new KafkaProducer(producerProps(), new IntegerSerializer(), new StringSerializer());\r\n+        weatherStationsProducer = new KafkaProducer(producerProps(), new IntegerSerializer(), new JsonbSerializer());\r\n+        weatherStationsConsumer =  new KafkaConsumer(consumerProps(), new IntegerDeserializer(), new JsonbDeserializer<>(Aggregation.class));\r\n+    }\r\n+\r\n+    @AfterEach\r\n+    public void tearDown(){\r\n+        temperatureProducer.close();\r\n+        weatherStationsProducer.close();\r\n+        weatherStationsConsumer.close();\r\n+    }\r\n+\r\n+    @Test\r\n+    @Timeout(value = 10, unit = TimeUnit.SECONDS)\r\n+    public void test() throws InterruptedException {\r\n+        weatherStationsConsumer.subscribe(Collections.singletonList(TEMPERATURES_AGGREGATED_TOPIC));\r\n+        weatherStationsProducer.send(new ProducerRecord<>(WEATHER_STATIONS_TOPIC, 1, new WeatherStation()));\r\n+        temperatureProducer.send(new ProducerRecord<>(TEMPERATURE_VALUES_TOPIC, 1,Instant.now() + \";\" + \"15\" ));\r\n+        temperatureProducer.send(new ProducerRecord<>(TEMPERATURE_VALUES_TOPIC, 1,Instant.now() + \";\" + \"25\" ));\r\n+        List<ConsumerRecord<Integer, Aggregation>> results = poll(weatherStationsConsumer,1);\r\n+\r\n+        // Assumes the state store was initially empty\r\n+        Assertions.assertEquals(2, results.get(0).value().count);\r", "originalCommit": "dfba66bb47e3594ca078f0b16137d656c4eddbf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6f302a06b3a5aa09af2f1c4b1b889efeccc267b3", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/6f302a06b3a5aa09af2f1c4b1b889efeccc267b3", "message": "Add tests to the KafkaStreams quickstart\n\n- Add a QuarkusTest using Kafka Streams TopologyTestDriver\n- Add a QuarkusTest using Debezium embedded Kafka broker\n- Add a NativeImageTest, based off the embedded broker QuarkusTest\n- Workaround missing HOSTNAME env variable on CI and Windows", "committedDate": "2020-06-16T20:58:41Z", "type": "commit"}, {"oid": "6f302a06b3a5aa09af2f1c4b1b889efeccc267b3", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/6f302a06b3a5aa09af2f1c4b1b889efeccc267b3", "message": "Add tests to the KafkaStreams quickstart\n\n- Add a QuarkusTest using Kafka Streams TopologyTestDriver\n- Add a QuarkusTest using Debezium embedded Kafka broker\n- Add a NativeImageTest, based off the embedded broker QuarkusTest\n- Workaround missing HOSTNAME env variable on CI and Windows", "committedDate": "2020-06-16T20:58:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MjAxMg==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r441142012", "bodyText": "I had to manage debezium.version as it was moved to quarkus-test-bom, but it seems quickstarts can't directly reference a quarkus version so it stays compatible with the quarkus-platform ?", "author": "rquinio", "createdAt": "2020-06-16T21:06:24Z", "path": "kafka-streams-quickstart/aggregator/pom.xml", "diffHunk": "@@ -19,6 +19,7 @@\n     <quarkus.platform.version>999-SNAPSHOT</quarkus.platform.version>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+    <debezium.version>1.1.0.Final</debezium.version>", "originalCommit": "6f302a06b3a5aa09af2f1c4b1b889efeccc267b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MzE1NA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r441353154", "bodyText": "Let's ask @gsmet as he's more savvy with all those build details.", "author": "gunnarmorling", "createdAt": "2020-06-17T07:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MjAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwNTk0Mg==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/578#discussion_r441405942", "bodyText": "I think it's OK as it is.", "author": "gsmet", "createdAt": "2020-06-17T09:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0MjAxMg=="}], "type": "inlineReview"}]}