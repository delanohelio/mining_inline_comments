{"pr_number": 1351, "pr_title": "Fix bug involving record production on rhs", "pr_createdAt": "2020-06-17T17:43:20Z", "pr_url": "https://github.com/kframework/k/pull/1351", "timeline": [{"oid": "ead29011b0cda8b0959423755327969253993ddf", "url": "https://github.com/kframework/k/commit/ead29011b0cda8b0959423755327969253993ddf", "message": "add location info to error", "committedDate": "2020-06-17T17:42:29Z", "type": "commit"}, {"oid": "8cfc3b8d3572d31ad8449dbdf9de9922c8dbff67", "url": "https://github.com/kframework/k/commit/8cfc3b8d3572d31ad8449dbdf9de9922c8dbff67", "message": "add test", "committedDate": "2020-06-17T17:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMzE4Nw==", "url": "https://github.com/kframework/k/pull/1351#discussion_r441803187", "bodyText": "It's a little confusing to me that you're passing the entire t: Term into anonVar, because why would it need a term? Are you able to pass just the Location in for it to use? I'm approving anyway, but something to think about.", "author": "ehildenb", "createdAt": "2020-06-17T20:07:33Z", "path": "kore/src/main/scala/org/kframework/parser/TreeNodesToKORE.scala", "diffHunk": "@@ -24,18 +24,18 @@ class TreeNodesToKORE(parseSort: java.util.function.Function[String, Sort], stri\n     case Ambiguity(items) => KApply(KLabel(\"amb\"), KList(items.asScala.toList map apply asJava), Att.empty)\n   }\n \n-  def anonVar(sort: Sort): K = {\n+  def anonVar(sort: Sort, t: Term): K = {\n     val lbl = KLabel(\"#SemanticCastTo\" + sort.toString())\n-    if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable)), Att.empty.add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable)\n+    if (strict) KApply(lbl, KList(KToken(\"_\", Sorts.KVariable, locationToAtt(t.location, t.source))), locationToAtt(t.location, t.source).add(classOf[Production], Production(lbl, Seq(), sort, Seq(NonTerminal(sort, None))))) else KToken(\"_\", Sorts.KVariable, locationToAtt(t.location, t.source))\n   }\n \n   def termConsToKApply(t: TermCons): K = {\n     if (t.production.att.contains(\"recordPrd\", classOf[Production])) {\n       val realProd = t.production.att.get(\"recordPrd\", classOf[Production])\n       val map = new util.ArrayList(t.items).asScala.reverse.zipWithIndex.map { case (item, idx) => (t.production.nonterminal(idx).name.get, apply(item))} toMap\n       val realItems = realProd.nonterminals.map {\n-        case NonTerminal(sort, None) => anonVar(sort)\n-        case NonTerminal(sort, Some(x)) => map.getOrElse(x, anonVar(sort))\n+        case NonTerminal(sort, None) => anonVar(sort, t)\n+        case NonTerminal(sort, Some(x)) => map.getOrElse(x, anonVar(sort, t))", "originalCommit": "8cfc3b8d3572d31ad8449dbdf9de9922c8dbff67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMzQ5NA==", "url": "https://github.com/kframework/k/pull/1351#discussion_r442223494", "bodyText": "I changed the signature of the method to t: HasLocation to make it clearer what is happening.", "author": "dwightguth", "createdAt": "2020-06-18T13:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMzE4Nw=="}], "type": "inlineReview"}, {"oid": "f188739d21affe40ab2f637f69552be390c9b95f", "url": "https://github.com/kframework/k/commit/f188739d21affe40ab2f637f69552be390c9b95f", "message": "haslocation", "committedDate": "2020-06-18T13:25:38Z", "type": "commit"}, {"oid": "47a8a2ee1f65d1a0a74cbf94f4a221654f4eebe2", "url": "https://github.com/kframework/k/commit/47a8a2ee1f65d1a0a74cbf94f4a221654f4eebe2", "message": "Merge branch 'master' into rhs", "committedDate": "2020-06-18T14:21:52Z", "type": "commit"}]}