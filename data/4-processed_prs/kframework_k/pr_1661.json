{"pr_number": 1661, "pr_title": "Haskell symbolic lookup rule", "pr_createdAt": "2020-11-18T18:34:50Z", "pr_url": "https://github.com/kframework/k/pull/1661", "timeline": [{"oid": "6a612c3e748dd7e93b63945f0a4473d712bbf384", "url": "https://github.com/kframework/k/commit/6a612c3e748dd7e93b63945f0a4473d712bbf384", "message": "Add symbolic lookup simplification rule", "committedDate": "2020-11-18T18:32:48Z", "type": "commit"}, {"oid": "bfc1b28f088e0658636981b514c4cf6009652a87", "url": "https://github.com/kframework/k/commit/bfc1b28f088e0658636981b514c4cf6009652a87", "message": "Add map-symbolic-tests-haskell", "committedDate": "2020-11-18T18:33:19Z", "type": "commit"}, {"oid": "42cf58378890473413c892f7f68b4e296c527be8", "url": "https://github.com/kframework/k/commit/42cf58378890473413c892f7f68b4e296c527be8", "message": "Rule and \"assignment-\" tests", "committedDate": "2020-11-19T14:15:22Z", "type": "commit"}, {"oid": "dbf18d941b0a10708889b65e56110a335b1a5ecc", "url": "https://github.com/kframework/k/commit/dbf18d941b0a10708889b65e56110a335b1a5ecc", "message": "Fix rules", "committedDate": "2020-11-20T11:04:49Z", "type": "commit"}, {"oid": "8d09f68a2d246fee459d7d720181764d7819ecf8", "url": "https://github.com/kframework/k/commit/8d09f68a2d246fee459d7d720181764d7819ecf8", "message": "Some tests", "committedDate": "2020-11-20T12:49:48Z", "type": "commit"}, {"oid": "e10b69c53023dbe119e5be885b2c1e3f8a1e4088", "url": "https://github.com/kframework/k/commit/e10b69c53023dbe119e5be885b2c1e3f8a1e4088", "message": "Some tests", "committedDate": "2020-11-20T12:50:44Z", "type": "commit"}, {"oid": "592eb00fea1322ecf43438626477d3fe05eaa1ef", "url": "https://github.com/kframework/k/commit/592eb00fea1322ecf43438626477d3fe05eaa1ef", "message": "Fix tests", "committedDate": "2020-11-23T16:01:28Z", "type": "commit"}, {"oid": "0c9bacd813e4fc345a52d0656c589a8fdf591e8f", "url": "https://github.com/kframework/k/commit/0c9bacd813e4fc345a52d0656c589a8fdf591e8f", "message": "map-symbolic-tests-haskell: Update assignment specs", "committedDate": "2020-11-23T17:19:33Z", "type": "commit"}, {"oid": "34adc879728f876e639c219941a325fd0b4d78b1", "url": "https://github.com/kframework/k/commit/34adc879728f876e639c219941a325fd0b4d78b1", "message": "domains.md: Add a rule for double Map update", "committedDate": "2020-11-23T17:19:33Z", "type": "commit"}, {"oid": "2dd68abbef81c5054e01004dc7039ec91d2d09bb", "url": "https://github.com/kframework/k/commit/2dd68abbef81c5054e01004dc7039ec91d2d09bb", "message": "domains.md: Add a rule for swapping double Map updates", "committedDate": "2020-11-23T17:19:33Z", "type": "commit"}, {"oid": "73ee70e339be2b89731986b553a4ba7475f86f6c", "url": "https://github.com/kframework/k/commit/73ee70e339be2b89731986b553a4ba7475f86f6c", "message": "map-symbolic-tests-haskell/gen-tests.sh: Update specs unconditionally", "committedDate": "2020-11-23T17:19:34Z", "type": "commit"}, {"oid": "b644a9574609e4bad2df487d7dd12a4370e9591a", "url": "https://github.com/kframework/k/commit/b644a9574609e4bad2df487d7dd12a4370e9591a", "message": "Generate tests for lookup, inkeys, and remove", "committedDate": "2020-11-24T11:19:24Z", "type": "commit"}, {"oid": "242e45e5959786d47b061477e61dce9ff98d2e3c", "url": "https://github.com/kframework/k/commit/242e45e5959786d47b061477e61dce9ff98d2e3c", "message": "Merge remote-tracking branch 'upstream/master' into haskell-symbolic-MAP.update", "committedDate": "2020-11-24T11:20:21Z", "type": "commit"}, {"oid": "781785807df99c75a22dab87aea62b5aafd67a56", "url": "https://github.com/kframework/k/commit/781785807df99c75a22dab87aea62b5aafd67a56", "message": "Generate tests; use old RHS", "committedDate": "2020-11-24T11:23:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NzA1MQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r529477051", "bodyText": "On the Java backend, the result is\n<k>\n  lookupResult ( false )\n</k>", "author": "ana-pantilie", "createdAt": "2020-11-24T11:33:24Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-7-spec.k.out", "diffHunk": "@@ -0,0 +1 @@\n+#Top", "originalCommit": "781785807df99c75a22dab87aea62b5aafd67a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4MDEyMw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r529480123", "bodyText": "These tests are missing from the Java backend test suite, even though they exist in the inkeys file.", "author": "ana-pantilie", "createdAt": "2020-11-24T11:38:39Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys", "diffHunk": "@@ -0,0 +1,9 @@\n+claim <k> inkeys ( X:MyId in_keys ( .Map  ) ) => . </k>\n+claim <k> inkeys ( Y:MyId in_keys ( M:Map ) ) => . </k> requires Y in_keys(M)\n+claim <k> inkeys ( Y:MyId in_keys ( M:Map ) ) => . </k> requires notBool Y in_keys(M)", "originalCommit": "781785807df99c75a22dab87aea62b5aafd67a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NTEzNQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r530445135", "bodyText": "We don't expect these to pass until we finish kframework/kore#2249.", "author": "ttuegel", "createdAt": "2020-11-25T15:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4MDEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4MDY4MA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r529480680", "bodyText": "Should this be inkeysResult ( true )?", "author": "ana-pantilie", "createdAt": "2020-11-24T11:39:39Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-2-spec.k.out", "diffHunk": "@@ -0,0 +1,9 @@\n+  <k>\n+    inkeysResult ( Y:MyId in_keys ( M ) ) ~> .", "originalCommit": "781785807df99c75a22dab87aea62b5aafd67a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4MTU1NA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r529481554", "bodyText": "Should this be inkeysResult ( false )?", "author": "ana-pantilie", "createdAt": "2020-11-24T11:41:12Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-3-spec.k.out", "diffHunk": "@@ -0,0 +1,9 @@\n+  <k>\n+    inkeysResult ( Y:MyId in_keys ( M ) ) ~> .", "originalCommit": "781785807df99c75a22dab87aea62b5aafd67a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4MjUyNA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r529482524", "bodyText": "This is the expected output on the Java backend as well, but I don't understand what this really tests. Maybe it would make sense if the expected output is inkeysResult ( false ), and we add X =/=K Y to the requires? I tried this out and it fails, but it's just an idea.", "author": "ana-pantilie", "createdAt": "2020-11-24T11:42:59Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-6-spec.k.out", "diffHunk": "@@ -0,0 +1,16 @@\n+  <k>\n+    inkeysResult ( Y:MyId in_keys ( M\n+    ( X:MyId |-> 0 ) ) ) ~> .", "originalCommit": "781785807df99c75a22dab87aea62b5aafd67a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5MDE4MA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r529490180", "bodyText": "This is the expected output on the Java backend as well, I don't understand what this tests.", "author": "ana-pantilie", "createdAt": "2020-11-24T11:56:36Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-8-spec.k.out", "diffHunk": "@@ -0,0 +1,23 @@\n+  #Not ( {\n+    X\n+  #Equals\n+    Z\n+  } )\n+#And\n+  <k>\n+    inkeysResult ( Y:MyId in_keys ( M\n+    X:MyId |-> 0\n+    ( Z:MyId |-> 1 ) ) ) ~> .", "originalCommit": "781785807df99c75a22dab87aea62b5aafd67a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5NDA0Mw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r529494043", "bodyText": "I can't find this test either.", "author": "ana-pantilie", "createdAt": "2020-11-24T12:03:09Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys", "diffHunk": "@@ -0,0 +1,9 @@\n+claim <k> inkeys ( X:MyId in_keys ( .Map  ) ) => . </k>\n+claim <k> inkeys ( Y:MyId in_keys ( M:Map ) ) => . </k> requires Y in_keys(M)\n+claim <k> inkeys ( Y:MyId in_keys ( M:Map ) ) => . </k> requires notBool Y in_keys(M)\n+claim <k> inkeys ( X:MyId in_keys ( M:Map X      |-> 0 ) ) => . </k>\n+claim <k> inkeys ( Y:MyId in_keys ( M:Map X:MyId |-> 0 ) ) => . </k>\n+claim <k> inkeys ( Y:MyId in_keys ( M:Map X:MyId |-> 0 ) ) => . </k> requires notBool Y in_keys(M)\n+claim <k> inkeys ( X:MyId in_keys ( Z:MyId |-> 1 M:Map X      |-> 0 ) ) => . </k>\n+claim <k> inkeys ( Y:MyId in_keys ( Z:MyId |-> 1 M:Map X:MyId |-> 0 ) ) => . </k>\n+claim <k> inkeys ( Y:MyId in_keys ( Z:MyId |-> 1 M:Map X:MyId |-> 0 ) ) => . </k> requires notBool Y in_keys(M)", "originalCommit": "781785807df99c75a22dab87aea62b5aafd67a56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a224045a78841291aefc921878ba3147b018e02d", "url": "https://github.com/kframework/k/commit/a224045a78841291aefc921878ba3147b018e02d", "message": "Add remove-8 and remove-12", "committedDate": "2020-11-25T16:06:38Z", "type": "commit"}, {"oid": "75889d89ee078c4218154dfc24a994e087fddba5", "url": "https://github.com/kframework/k/commit/75889d89ee078c4218154dfc24a994e087fddba5", "message": "Remove lookup tests since Ana is working on them", "committedDate": "2020-11-26T18:02:10Z", "type": "commit"}, {"oid": "b3a2838c2d23dd88529f7dbd3bc15b83efcb7c3b", "url": "https://github.com/kframework/k/commit/b3a2838c2d23dd88529f7dbd3bc15b83efcb7c3b", "message": "Add rules to make tests pass", "committedDate": "2020-11-27T14:17:19Z", "type": "commit"}, {"oid": "b2bcdbf3b86bb9f09b216df2202de6831185f9c0", "url": "https://github.com/kframework/k/commit/b2bcdbf3b86bb9f09b216df2202de6831185f9c0", "message": "Merge remote-tracking branch 'upstream/master' into haskell-symbolic-MAP.update", "committedDate": "2020-11-27T14:17:49Z", "type": "commit"}, {"oid": "64963418d133990e1eb00984b5e606849d141543", "url": "https://github.com/kframework/k/commit/64963418d133990e1eb00984b5e606849d141543", "message": "Use fail; regenerate all tests with expected RHS; move failing to failing", "committedDate": "2020-11-27T19:07:27Z", "type": "commit"}, {"oid": "de869f9137f46c5c6ab067e1a473ebcd78fdcf3d", "url": "https://github.com/kframework/k/commit/de869f9137f46c5c6ab067e1a473ebcd78fdcf3d", "message": "Merge remote-tracking branch 'andrei-burdusa/haskell-symbolic-MAP.update' into haskell-symbolic-lookup", "committedDate": "2020-12-02T04:04:20Z", "type": "commit"}, {"oid": "dc53346536111059b85a7fd3fd754a24fbe941c9", "url": "https://github.com/kframework/k/commit/dc53346536111059b85a7fd3fd754a24fbe941c9", "message": "Revert change", "committedDate": "2020-12-02T13:40:25Z", "type": "commit"}, {"oid": "dd909f6ebf34827e2e57726870a0ba8d10055035", "url": "https://github.com/kframework/k/commit/dd909f6ebf34827e2e57726870a0ba8d10055035", "message": "Add previously failing tests", "committedDate": "2020-12-02T13:41:01Z", "type": "commit"}, {"oid": "742dc4a6aa3de74f48c364ccaf021ebb01bc6d00", "url": "https://github.com/kframework/k/commit/742dc4a6aa3de74f48c364ccaf021ebb01bc6d00", "message": "Add simplification rule; new test results", "committedDate": "2020-12-02T14:28:24Z", "type": "commit"}, {"oid": "49f648c8b88d30f264ad7a4ce65adfce6ad9a856", "url": "https://github.com/kframework/k/commit/49f648c8b88d30f264ad7a4ce65adfce6ad9a856", "message": "Add simplification rule; modify tests outputs", "committedDate": "2020-12-02T22:15:08Z", "type": "commit"}, {"oid": "d54b9e133feae36a5fce0080973c74804dd43181", "url": "https://github.com/kframework/k/commit/d54b9e133feae36a5fce0080973c74804dd43181", "message": "Add lookup simplification rules; update tests", "committedDate": "2020-12-03T16:59:41Z", "type": "commit"}, {"oid": "9982ce6c03aa8500ba2fdac53855965103d31ddb", "url": "https://github.com/kframework/k/commit/9982ce6c03aa8500ba2fdac53855965103d31ddb", "message": "Remove old failing directory", "committedDate": "2020-12-03T19:16:22Z", "type": "commit"}, {"oid": "8a4981d6f381772e8ca3f5c2b9b9ed2e0aef4b57", "url": "https://github.com/kframework/k/commit/8a4981d6f381772e8ca3f5c2b9b9ed2e0aef4b57", "message": "All Java tests; failing states; regenerate", "committedDate": "2020-12-04T09:08:11Z", "type": "commit"}, {"oid": "5deab3b6a89b28cf1b98cb1fffbfc8915ec46e60", "url": "https://github.com/kframework/k/commit/5deab3b6a89b28cf1b98cb1fffbfc8915ec46e60", "message": "Fix assignment-18", "committedDate": "2020-12-04T09:47:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3NDY4Mw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r535974683", "bodyText": "I think this gets simplified correctly.\nOn the Java backend, though, the expected result is:\n<k>\n  assignmentResult ( 1 |-> 4\n  ( ( X |-> 3 ) [ 0 <- 5 ] ) )\n</k>\n\nIt's also in the failing directory. So I don't know what to make of this test.", "author": "ana-pantilie", "createdAt": "2020-12-04T09:54:12Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-26-spec.k.out", "diffHunk": "@@ -0,0 +1,5 @@\n+<k>\n+  assignmentResult ( 0 |-> 5\n+  1 |-> 4\n+  X:MyId |-> 3 ) ~> .\n+</k>", "originalCommit": "8a4981d6f381772e8ca3f5c2b9b9ed2e0aef4b57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "207d2e818bbd4ed127ad529974604cae772c6d35", "url": "https://github.com/kframework/k/commit/207d2e818bbd4ed127ad529974604cae772c6d35", "message": "Fix assigment-29", "committedDate": "2020-12-04T10:02:01Z", "type": "commit"}, {"oid": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "url": "https://github.com/kframework/k/commit/e4e663c209352a6136ab3f39b17bf61ebbc79a01", "message": "Fix assignment-5", "committedDate": "2020-12-04T10:07:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4ODYyMg==", "url": "https://github.com/kframework/k/pull/1661#discussion_r535988622", "bodyText": "The expected Java result is:\n<k>\n  removeResult ( ( MAP\n  X |-> 1 ) [ Y <- undef ] [ Z ] )\n</k>\n\nSince Z =/=K X, I think the Haskell backend result (removeResult ( MAP [ Y:MyId <- undef ] [ Z:MyId ] )) is correct.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:15:56Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove-6-spec.k.out", "diffHunk": "@@ -0,0 +1,41 @@\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  #Not ( {\n+    X\n+  #Equals\n+    Z\n+  } )\n+#And\n+  <k>\n+    removeResult ( MAP [ Y:MyId <- undef ] [ Z:MyId ] ~> . ) ~> .", "originalCommit": "8a4981d6f381772e8ca3f5c2b9b9ed2e0aef4b57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5MTE4Mw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r535991183", "bodyText": "I think this is similar to remove-6.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:19:55Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove-9-spec.k.out", "diffHunk": "@@ -0,0 +1,47 @@\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  #Not ( {\n+    X\n+  #Equals\n+    Z\n+  } )\n+#And\n+  #Not ( {\n+    Y\n+  #Equals\n+    Z\n+  } )\n+#And\n+  <k>\n+    removeResult ( MAP [ Y:MyId <- undef ] [ Z:MyId ] ~> . ) ~> .", "originalCommit": "8a4981d6f381772e8ca3f5c2b9b9ed2e0aef4b57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NjkyNA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r535996924", "bodyText": "This does not fail on the Java backend.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:29:10Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-13-spec.k.out", "diffHunk": "@@ -0,0 +1,24 @@\n+  #Not ( {", "originalCommit": "8a4981d6f381772e8ca3f5c2b9b9ed2e0aef4b57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NzYwOQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r535997609", "bodyText": "This does not fail on the Java backend.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:30:13Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-20-spec.k.out", "diffHunk": "@@ -0,0 +1,24 @@\n+  #Not ( {", "originalCommit": "8a4981d6f381772e8ca3f5c2b9b9ed2e0aef4b57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODA4NQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r535998085", "bodyText": "This fails on the Java backend as well.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:31:05Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-11-spec.k.out", "diffHunk": "@@ -0,0 +1,51 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODI3Ng==", "url": "https://github.com/kframework/k/pull/1661#discussion_r535998276", "bodyText": "This fails on the Java backend as well.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:31:22Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-12-spec.k.out", "diffHunk": "@@ -0,0 +1,24 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MTc5Nw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536081797", "bodyText": "Does not fail on Haskell backend after 7735052.", "author": "ana-pantilie", "createdAt": "2020-12-04T12:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMDY5MA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536000690", "bodyText": "If I'm not mistaken, we already discussed that we can't support this at the moment, so it will go to failing.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:35:11Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-10-spec.k.out", "diffHunk": "@@ -0,0 +1,37 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMDc4Mg==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536000782", "bodyText": "If I'm not mistaken, we already discussed that we can't support this at the moment, so it will go to failing.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:35:20Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-11-spec.k.out", "diffHunk": "@@ -0,0 +1,38 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMTY2Mw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536001663", "bodyText": "If I'm not mistaken, we already discussed that we can't support this at the moment, so it will go to failing.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:36:42Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-6-spec.k.out", "diffHunk": "@@ -0,0 +1,23 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzAwNQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536003005", "bodyText": "This does not fail on the Java backend.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:38:53Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-5-spec.k.out", "diffHunk": "@@ -0,0 +1,38 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MDE0Nw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536080147", "bodyText": "Outdated after 7735052.", "author": "ana-pantilie", "createdAt": "2020-12-04T12:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzM3OQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536003379", "bodyText": "This does not fail on the Java backend.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:39:28Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-6-spec.k.out", "diffHunk": "@@ -0,0 +1,42 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MDIyNQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536080225", "bodyText": "Outdated after 7735052.", "author": "ana-pantilie", "createdAt": "2020-12-04T12:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzM3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzY1MQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536003651", "bodyText": "This does not fail on the Java backend.", "author": "ana-pantilie", "createdAt": "2020-12-04T10:39:57Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-7-spec.k.out", "diffHunk": "@@ -0,0 +1,44 @@\n+  #Not ( {", "originalCommit": "e4e663c209352a6136ab3f39b17bf61ebbc79a01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MDMzOQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536080339", "bodyText": "Outdated after 7735052.", "author": "ana-pantilie", "createdAt": "2020-12-04T12:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzY1MQ=="}], "type": "inlineReview"}, {"oid": "7735052eb2d17c2a39e2897d157e432ed139bd7e", "url": "https://github.com/kframework/k/commit/7735052eb2d17c2a39e2897d157e432ed139bd7e", "message": "Add new update rule, remove rule, regenerate tests", "committedDate": "2020-12-04T12:31:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2NzA0NQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536067045", "bodyText": "After adding the rule at 419 (in 7735052), assignment-15 would loop if I kept 418 as well.", "author": "ana-pantilie", "createdAt": "2020-12-04T12:33:00Z", "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -407,9 +407,34 @@ endmodule\n \n module MAP-KORE-SYMBOLIC [kore,symbolic]\n   imports MAP\n+  imports K-EQUAL\n \n    rule #Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K) [anywhere, simplification]\n \n+   // Symbolic update\n+   rule (K |-> _ M:Map) [ K <- V ] => (K |-> V M) [simplification]\n+   rule M:Map [ K <- V ] => (K |-> V M) requires notBool (K in_keys(M)) [simplification]\n+   rule M:Map [ K <- _ ] [ K <- V ] => M [ K <- V ] [simplification]\n+   // rule M:Map [ K1 <- V1 ] [ K2 <- V2 ] => M [ K2 <- V2 ] [ K1 <- V1 ] requires K1 =/=K K2 andBool K2 in_keys(M) [simplification]\n+   rule (K1 |-> V1 M:Map) [ K2 <- V2 ] => (K1 |-> V1 (M [ K2 <- V2 ])) requires K1 =/=K K2 [simplification]", "originalCommit": "7735052eb2d17c2a39e2897d157e432ed139bd7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28fa09b4fc21f1de4c97ab8eed5b67b3f1835cab", "url": "https://github.com/kframework/k/commit/28fa09b4fc21f1de4c97ab8eed5b67b3f1835cab", "message": "Remove accidentally added archive", "committedDate": "2020-12-04T12:41:56Z", "type": "commit"}, {"oid": "21842fa41f664176ab0a1a93b77708380f3cc51c", "url": "https://github.com/kframework/k/commit/21842fa41f664176ab0a1a93b77708380f3cc51c", "message": "Fix assignment-10 output", "committedDate": "2020-12-04T12:43:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA3NTY3OQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536075679", "bodyText": "This is consistent with the Java backend result, meaning that [ Y <- 2] appears before X |-> 1. I believe this is a consequence of adding the simplification rule from 419 in domains.k (7735052). There are other tests with the same behavior. I believe that this rule application would only be visible (checked) in the test if we kept the RHS as fail. Edit: we decided on using . on the RHS for all the claims.", "author": "ana-pantilie", "createdAt": "2020-12-04T12:48:11Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-10-spec.k.out", "diffHunk": "@@ -0,0 +1,28 @@\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  #Not ( {\n+    Y\n+  #Equals\n+    Z\n+  } )\n+#And\n+  <k>\n+    assignmentResult ( ( MAP [ Y:MyId <- 2 ]\n+    X:MyId |-> 1 ) [ Z:MyId <- 3 ] ) ~> .\n+  </k>", "originalCommit": "21842fa41f664176ab0a1a93b77708380f3cc51c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MTY2OA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536171668", "bodyText": "If this passes all the tests, I think we can go ahead and delete this rule.", "author": "ttuegel", "createdAt": "2020-12-04T15:16:13Z", "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -407,9 +407,34 @@ endmodule\n \n module MAP-KORE-SYMBOLIC [kore,symbolic]\n   imports MAP\n+  imports K-EQUAL\n \n    rule #Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K) [anywhere, simplification]\n \n+   // Symbolic update\n+   rule (K |-> _ M:Map) [ K <- V ] => (K |-> V M) [simplification]\n+   rule M:Map [ K <- V ] => (K |-> V M) requires notBool (K in_keys(M)) [simplification]\n+   rule M:Map [ K <- _ ] [ K <- V ] => M [ K <- V ] [simplification]\n+   // rule M:Map [ K1 <- V1 ] [ K2 <- V2 ] => M [ K2 <- V2 ] [ K1 <- V1 ] requires K1 =/=K K2 andBool K2 in_keys(M) [simplification]", "originalCommit": "21842fa41f664176ab0a1a93b77708380f3cc51c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "url": "https://github.com/kframework/k/commit/c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "message": "Revert tests to use . on RHS; regenerate", "committedDate": "2020-12-05T13:21:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3ODg1Mw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536778853", "bodyText": "Should this be -Int 30 instead?", "author": "ana-pantilie", "createdAt": "2020-12-05T14:05:36Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-29-spec.k.out", "diffHunk": "@@ -1 +1,23 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  <k>\n+    assignmentResult ( MAP\n+    X:MyId |-> BAL_TO:Int\n+    Y:MyId |-> BAL_FROM +Int -30 ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjgyMjcwMg==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536822702", "bodyText": "I think there is a simplification rule for this, but maybe I'm thinking of EVM?", "author": "ttuegel", "createdAt": "2020-12-05T16:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3ODg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3NjU3MA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r537476570", "bodyText": "No, the arithmetic simplification rules are in domains.k now. But it looks like this particular result comes from the application of this rule.", "author": "ana-pantilie", "createdAt": "2020-12-07T12:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3ODg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3ODk5NA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536778994", "bodyText": "Should this be -Int 30 instead?", "author": "ana-pantilie", "createdAt": "2020-12-05T14:05:56Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-30-spec.k.out", "diffHunk": "@@ -1 +1,23 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  <k>\n+    assignmentResult ( MAP\n+    foo ( X ) |-> BAL_TO:Int\n+    foo ( Y ) |-> BAL_FROM +Int -30 ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3OTEzMw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536779133", "bodyText": "Should this be -Int 30 instead?", "author": "ana-pantilie", "createdAt": "2020-12-05T14:06:22Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/assignment-31-spec.k.out", "diffHunk": "@@ -1 +1,23 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  <k>\n+    assignmentResult ( MAP\n+    foo ( X ) |-> BAL_TO:Int\n+    foo ( Y ) |-> BAL_FROM +Int -30 ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MDQ5Nw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536780497", "bodyText": "Why doesn't this get simplified further?", "author": "ana-pantilie", "createdAt": "2020-12-05T14:09:24Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-2-spec.k.out", "diffHunk": "@@ -1 +1,9 @@\n-#Top\n+  <k>\n+    inkeysResult ( Y:MyId in_keys ( M ) ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MDY4NQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536780685", "bodyText": "Why doesn't this get simplified further?", "author": "ana-pantilie", "createdAt": "2020-12-05T14:09:44Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/inkeys-3-spec.k.out", "diffHunk": "@@ -1 +1,9 @@\n-#Top\n+  <k>\n+    inkeysResult ( Y:MyId in_keys ( M ) ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NDM3NQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536784375", "bodyText": "Why doesn't this get simplified any further? I think this is correct, actually.", "author": "ana-pantilie", "createdAt": "2020-12-05T14:17:33Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-23-spec.k.out", "diffHunk": "@@ -1 +1,16 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    y\n+  } )\n+#And\n+  <k>\n+    lookupResult ( ( X:MyId |-> 3 ) [ x <- 5 ] [ X:MyId ] ~> . ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NTMwNQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536785305", "bodyText": "I think this is actually the correct result, since Y =/=K Z.", "author": "ana-pantilie", "createdAt": "2020-12-05T14:19:32Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-9-spec.k.out", "diffHunk": "@@ -1 +1,47 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  #Not ( {\n+    X\n+  #Equals\n+    Z\n+  } )\n+#And\n+  #Not ( {\n+    Y\n+  #Equals\n+    Z\n+  } )\n+#And\n+  <k>\n+    lookupResult ( MAP [ Z:MyId ] ~> . ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4NjQ2Mg==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536786462", "bodyText": "I think this is actually the correct result, since X =/=K y.", "author": "ana-pantilie", "createdAt": "2020-12-05T14:22:03Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove-17-spec.k.out", "diffHunk": "@@ -1 +1,28 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    y\n+  } )\n+#And\n+  <k>\n+    removeResult ( ( X:MyId |-> 3 ) [ x <- undef ] [ X:MyId ] ~> . ) ~> .", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4OTk4Mg==", "url": "https://github.com/kframework/k/pull/1661#discussion_r536789982", "bodyText": "The output is still #Top here, and I'm not sure if this is right.", "author": "ana-pantilie", "createdAt": "2020-12-05T14:29:55Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove-2-spec.k", "diffHunk": "@@ -6,6 +6,6 @@ requires \"map-tests.k\"\n module REMOVE-2-SPEC\n     imports MAP-TESTS\n \n-    claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => removeResult ( MAP [ Z ] ) </k> requires Y ==K X andBool Z  ==K Y andBool Z  ==K X\n+    claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y ==K X andBool Z  ==K Y andBool Z  ==K X", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5ODEyMw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r537498123", "bodyText": "That is correct. All the keys are the same. Looking up the key after deleting it is \\bottom.", "author": "ttuegel", "createdAt": "2020-12-07T13:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4OTk4Mg=="}], "type": "inlineReview"}, {"oid": "8679fd4c64dc0a9a35342ef4a9715622c85cfcfc", "url": "https://github.com/kframework/k/commit/8679fd4c64dc0a9a35342ef4a9715622c85cfcfc", "message": "Clean-up", "committedDate": "2020-12-08T10:34:35Z", "type": "commit"}, {"oid": "88fff3f18e5031a9f16a9dede252347f184d5854", "url": "https://github.com/kframework/k/commit/88fff3f18e5031a9f16a9dede252347f184d5854", "message": "Remove inkeys2 inkeys3, regenerate", "committedDate": "2020-12-08T10:35:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI3MTY2Mw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r538271663", "bodyText": "I think the result above is correct, but this should be simplified further. The X is obviously in the keys of the map.", "author": "ttuegel", "createdAt": "2020-12-08T11:44:26Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-23-spec.k.out", "diffHunk": "@@ -1 +1,16 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    y\n+  } )\n+#And\n+  <k>\n+    lookupResult ( ( X:MyId |-> 3 ) [ x <- 5 ] [ X:MyId ] ~> . ) ~> .\n+  </k>\n+#And\n+  {\n+    true\n+  #Equals\n+    X:MyId in_keys ( ( X:MyId |-> 3 ) [ x <- 5 ]", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI3NDM5Ng==", "url": "https://github.com/kframework/k/pull/1661#discussion_r538274396", "bodyText": "This is a little weird. Strictly, we only need the { true #Equals Z:MyId in_keys ( MAP ) } side condition.", "author": "ttuegel", "createdAt": "2020-12-08T11:47:01Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup-9-spec.k.out", "diffHunk": "@@ -1 +1,47 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    Y\n+  } )\n+#And\n+  #Not ( {\n+    X\n+  #Equals\n+    Z\n+  } )\n+#And\n+  #Not ( {\n+    Y\n+  #Equals\n+    Z\n+  } )\n+#And\n+  <k>\n+    lookupResult ( MAP [ Z:MyId ] ~> . ) ~> .\n+  </k>\n+#And\n+  {\n+    false\n+  #Equals\n+    X:MyId in_keys ( MAP )\n+  }\n+#And\n+  {\n+    true\n+  #Equals\n+    Z:MyId in_keys ( ( MAP\n+    X:MyId |-> 1 ) [ Y:MyId <- 2 ] )\n+  }\n+#And\n+  {\n+    true\n+  #Equals\n+    Z:MyId in_keys ( MAP )\n+  }\n+#And\n+  {\n+    true\n+  #Equals\n+    Z:MyId in_keys ( MAP [ Y:MyId <- 2 ]\n+    ( X:MyId |-> 1 ) )\n+  }", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI3NTk1MA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r538275950", "bodyText": "The result above is correct, but I think this should be simplified away.", "author": "ttuegel", "createdAt": "2020-12-08T11:48:24Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove-17-spec.k.out", "diffHunk": "@@ -1 +1,28 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    y\n+  } )\n+#And\n+  <k>\n+    removeResult ( ( X:MyId |-> 3 ) [ x <- undef ] [ X:MyId ] ~> . ) ~> .\n+  </k>\n+#And\n+  {\n+    false\n+  #Equals\n+    y in_keys ( ( X:MyId |-> 3 ) [ x <- undef ] )\n+  }", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI3NjM0NQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r538276345", "bodyText": "This should also be simplified, I think.", "author": "ttuegel", "createdAt": "2020-12-08T11:48:46Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove-17-spec.k.out", "diffHunk": "@@ -1 +1,28 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    y\n+  } )\n+#And\n+  <k>\n+    removeResult ( ( X:MyId |-> 3 ) [ x <- undef ] [ X:MyId ] ~> . ) ~> .\n+  </k>\n+#And\n+  {\n+    false\n+  #Equals\n+    y in_keys ( ( X:MyId |-> 3 ) [ x <- undef ] )\n+  }\n+#And\n+  {\n+    true\n+  #Equals\n+    X:MyId in_keys ( ( X:MyId |-> 3 ) [ x <- undef ]\n+    ( y |-> 4 ) )\n+  }", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI3Njc3OA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r538276778", "bodyText": "I think this should not be simplified. We don't know that X =/= x.", "author": "ttuegel", "createdAt": "2020-12-08T11:49:09Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove-17-spec.k.out", "diffHunk": "@@ -1 +1,28 @@\n-#Top\n+  #Not ( {\n+    X\n+  #Equals\n+    y\n+  } )\n+#And\n+  <k>\n+    removeResult ( ( X:MyId |-> 3 ) [ x <- undef ] [ X:MyId ] ~> . ) ~> .\n+  </k>\n+#And\n+  {\n+    false\n+  #Equals\n+    y in_keys ( ( X:MyId |-> 3 ) [ x <- undef ] )\n+  }\n+#And\n+  {\n+    true\n+  #Equals\n+    X:MyId in_keys ( ( X:MyId |-> 3 ) [ x <- undef ]\n+    ( y |-> 4 ) )\n+  }\n+#And\n+  {\n+    true\n+  #Equals\n+    X:MyId in_keys ( ( X:MyId |-> 3 ) [ x <- undef ] )\n+  }", "originalCommit": "c6b95d30ceb02decb4c6ec72ce35d651e09992c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3350e3d1a60ed90714201ae25037975e2886eca", "url": "https://github.com/kframework/k/commit/a3350e3d1a60ed90714201ae25037975e2886eca", "message": "Merge branch 'master' into haskell-symbolic-lookup", "committedDate": "2020-12-15T15:10:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNDg3Nw==", "url": "https://github.com/kframework/k/pull/1661#discussion_r543504877", "bodyText": "Could you please add\nclaim <k> lookup ( (Y:MyId |-> 1 X:MyId |-> 2) [ Y:MyId ] ) => . </k>\n\nI'm curious to see what the backend does here.", "author": "ttuegel", "createdAt": "2020-12-15T16:41:45Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/lookup", "diffHunk": "@@ -0,0 +1,24 @@\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y ==K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y ==K X andBool Z  ==K Y andBool Z  ==K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y ==K X andBool Z =/=K Y andBool Z =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k>\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z =/=K Y\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z  ==K Y andBool Z =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z =/=K Y andBool Z =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Z  ==K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Z =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Z  ==K Y\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Z =/=K Y\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Z =/=K Y andBool Z =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1) [Y:MyId <- 2] [ Z:MyId ] ) => . </k> requires Z =/=K Y andBool Z  ==K X andBool Y =/=K X\n+claim <k> lookup ( (MAP:Map X:MyId |-> 1 Y:MyId |-> 2) [ Y:MyId ] ) => . </k> requires X =/=K Y\n+claim <k> lookup ( (MAP:Map Y:MyId |-> 1 X:MyId |-> 2) [ Y:MyId ] ) => . </k> requires X =/=K Y\n+claim <k> lookup ( (X:MyId |-> 1 MAP:Map Y:MyId |-> 2) [ Y:MyId ] ) => . </k> requires X =/=K Y\n+claim <k> lookup ( (Y:MyId |-> 1 MAP:Map X:MyId |-> 2) [ Y:MyId ] ) => . </k> requires X =/=K Y\n+claim <k> lookup ( (X:MyId |-> 1 Y:MyId |-> 2 MAP:Map) [ Y:MyId ] ) => . </k> requires X =/=K Y\n+claim <k> lookup ( (Y:MyId |-> 1 X:MyId |-> 2 MAP:Map) [ Y:MyId ] ) => . </k> requires X =/=K Y", "originalCommit": "a3350e3d1a60ed90714201ae25037975e2886eca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxODc4MA==", "url": "https://github.com/kframework/k/pull/1661#discussion_r544218780", "bodyText": "The result is:\n<k>\n  lookupResult ( 1 ~> . ) ~> .\n</k>", "author": "ana-pantilie", "createdAt": "2020-12-16T11:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNDg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNTEzNQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r543505135", "bodyText": "I have a pointed question about this rule, below.", "author": "ttuegel", "createdAt": "2020-12-15T16:42:00Z", "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -408,9 +408,33 @@ endmodule\n \n module MAP-KORE-SYMBOLIC [kore,symbolic]\n   imports MAP\n+  imports K-EQUAL\n+\n+  rule #Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K) [anywhere, simplification]\n+\n+  // Symbolic update\n+  rule (K |-> _ M:Map) [ K <- V ] => (K |-> V M) [simplification]\n+  rule M:Map [ K <- V ] => (K |-> V M) requires notBool (K in_keys(M)) [simplification]\n+  rule M:Map [ K <- _ ] [ K <- V ] => M [ K <- V ] [simplification]\n+  rule (K1 |-> V1 M:Map) [ K2 <- V2 ] => (K1 |-> V1 (M [ K2 <- V2 ])) requires K1 =/=K K2 [simplification]\n \n-   rule #Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K) [anywhere, simplification]\n+  // Symbolic remove\n+  rule (K |-> _ M:Map) [ K <- undef ] => M [simplification]\n+  rule M:Map [ K <- undef ] => M requires notBool (K in_keys(M)) [simplification]\n+  rule (K1 |-> V1 M:Map) [ K2 <- undef ] => (K1 |-> V1 (M [ K2 <- undef ])) requires K1 =/=K K2 [simplification]\n \n+  // Symbolic lookup\n+  rule (K |-> V _:Map) [ K ] => V [simplification]", "originalCommit": "a3350e3d1a60ed90714201ae25037975e2886eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNjY5Mg==", "url": "https://github.com/kframework/k/pull/1661#discussion_r543506692", "bodyText": "Could you please add\nclaim <k> remove ( (X:MyId |-> 1 Y:MyId |-> 2) [ X <- undef ] ) => . </k>", "author": "ttuegel", "createdAt": "2020-12-15T16:43:50Z", "path": "k-distribution/tests/regression-new/map-symbolic-tests-haskell/remove", "diffHunk": "@@ -0,0 +1,17 @@\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y ==K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y ==K X andBool Z  ==K Y andBool Z  ==K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y ==K X andBool Z =/=K Y andBool Z =/=K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k>\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y =/=K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z =/=K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z =/=K Y\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z  ==K Y andBool Z =/=K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Y =/=K X andBool Z =/=K Y andBool Z =/=K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Z  ==K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Z =/=K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Z  ==K Y\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Z =/=K Y\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Z =/=K Y andBool Z =/=K X\n+claim <k> remove ( (MAP:Map X:MyId |-> 1) [Y:MyId <- undef] [ Z:MyId ] ) => . </k> requires Z =/=K Y andBool Z  ==K X andBool Y =/=K X\n+claim <k> remove ( (X:MyId |-> 3 y |-> 4) [ x <- undef ] [ X ] ) => . </k> requires X =/=K x\n+claim <k> remove ( (X:MyId |-> 3 y |-> 4) [ x <- undef ] [ X ] ) => . </k> requires X =/=K y", "originalCommit": "a3350e3d1a60ed90714201ae25037975e2886eca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMDU5OQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r544220599", "bodyText": "The result is:\n<k>\n  removeResult ( Y:MyId |-> 2 ~> . ) ~> .\n</k>", "author": "ana-pantilie", "createdAt": "2020-12-16T11:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNjY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNjg5NQ==", "url": "https://github.com/kframework/k/pull/1661#discussion_r543506895", "bodyText": "I also have a pointed question about this rule below.", "author": "ttuegel", "createdAt": "2020-12-15T16:44:05Z", "path": "k-distribution/include/kframework/builtin/domains.md", "diffHunk": "@@ -408,9 +408,33 @@ endmodule\n \n module MAP-KORE-SYMBOLIC [kore,symbolic]\n   imports MAP\n+  imports K-EQUAL\n+\n+  rule #Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K) [anywhere, simplification]\n+\n+  // Symbolic update\n+  rule (K |-> _ M:Map) [ K <- V ] => (K |-> V M) [simplification]\n+  rule M:Map [ K <- V ] => (K |-> V M) requires notBool (K in_keys(M)) [simplification]\n+  rule M:Map [ K <- _ ] [ K <- V ] => M [ K <- V ] [simplification]\n+  rule (K1 |-> V1 M:Map) [ K2 <- V2 ] => (K1 |-> V1 (M [ K2 <- V2 ])) requires K1 =/=K K2 [simplification]\n \n-   rule #Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K) [anywhere, simplification]\n+  // Symbolic remove\n+  rule (K |-> _ M:Map) [ K <- undef ] => M [simplification]", "originalCommit": "a3350e3d1a60ed90714201ae25037975e2886eca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d7f29904fe3c7444c158d245477dd5a88d695564", "url": "https://github.com/kframework/k/commit/d7f29904fe3c7444c158d245477dd5a88d695564", "message": "Review: add two new tests", "committedDate": "2020-12-16T15:48:28Z", "type": "commit"}, {"oid": "ef717ebb8d7ebcb5ea66e3bb23c4f3819648ee21", "url": "https://github.com/kframework/k/commit/ef717ebb8d7ebcb5ea66e3bb23c4f3819648ee21", "message": "Merge branch 'master' into haskell-symbolic-lookup", "committedDate": "2020-12-18T11:04:50Z", "type": "commit"}, {"oid": "a5c5d85e9d441deeff2d6eee7ac6a963aaed2f6c", "url": "https://github.com/kframework/k/commit/a5c5d85e9d441deeff2d6eee7ac6a963aaed2f6c", "message": "Rebuild", "committedDate": "2020-12-18T15:54:56Z", "type": "commit"}, {"oid": "8f8370675e2da5f2a20d918f9434e84facddc084", "url": "https://github.com/kframework/k/commit/8f8370675e2da5f2a20d918f9434e84facddc084", "message": "Merge branch 'haskell-symbolic-lookup' of github.com:ana-pantilie/k into haskell-symbolic-lookup", "committedDate": "2020-12-18T15:55:56Z", "type": "commit"}, {"oid": "9a048aa2b0465b74dab9fe97259a20be7bfaeeac", "url": "https://github.com/kframework/k/commit/9a048aa2b0465b74dab9fe97259a20be7bfaeeac", "message": "Merge branch 'master' into haskell-symbolic-lookup", "committedDate": "2020-12-21T09:31:13Z", "type": "commit"}, {"oid": "474835a941af427fab9f40a2fbbeed57b3b24138", "url": "https://github.com/kframework/k/commit/474835a941af427fab9f40a2fbbeed57b3b24138", "message": "Remove unused fail constructor", "committedDate": "2020-12-21T12:22:03Z", "type": "commit"}, {"oid": "8f87c531de02d99930334861bfebe0c712139251", "url": "https://github.com/kframework/k/commit/8f87c531de02d99930334861bfebe0c712139251", "message": "Merge branch 'master' into haskell-symbolic-lookup", "committedDate": "2021-01-05T15:35:04Z", "type": "commit"}, {"oid": "f2dd6a74094e01eff808ab779f818c245f4ee39b", "url": "https://github.com/kframework/k/commit/f2dd6a74094e01eff808ab779f818c245f4ee39b", "message": "Trigger workflows", "committedDate": "2021-01-05T16:24:39Z", "type": "commit"}, {"oid": "257d5dc67721141731a0665e1c7eaae9d39dfe10", "url": "https://github.com/kframework/k/commit/257d5dc67721141731a0665e1c7eaae9d39dfe10", "message": "Merge branch 'master' into haskell-symbolic-lookup", "committedDate": "2021-01-05T17:10:11Z", "type": "commit"}]}