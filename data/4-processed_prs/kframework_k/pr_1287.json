{"pr_number": 1287, "pr_title": "Changes to K frontend to support new C++ unparsing", "pr_createdAt": "2020-05-14T15:49:10Z", "pr_url": "https://github.com/kframework/k/pull/1287", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4Mzg0NQ==", "url": "https://github.com/kframework/k/pull/1287#discussion_r425383845", "bodyText": "Why is this for loop inside the above one? It does not seem to depend on sort, which, I guess, would mean that genSubsortAxiom below generates multiple identical axioms (assuming that the bracketProductionsFor can have more than one entry).", "author": "virgil-serbanuta", "createdAt": "2020-05-14T19:37:22Z", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -198,6 +197,26 @@ public String convert(boolean heatCoolEq, StringBuilder sb) {\n         }\n         translateSymbols(attributes, functionRules, impurities, overloads, sb);\n \n+        // print syntax definition\n+        int length = sb.length();\n+        for (Tuple2<Sort, scala.collection.immutable.List<Production>> sort : iterable(module.bracketProductionsFor())) {\n+            for (Production prod : iterable(sort._2())) {\n+                translateSymbol(attributes, functionRules, impurities, overloads, prod.att().get(\"bracketLabel\", KLabel.class), prod, sb);\n+            }\n+            for (Production prod : iterable(module.sortedProductions())) {", "originalCommit": "7bb81ce3852919f4cdc64224c8ef055ee55bdd7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NzI5Mg==", "url": "https://github.com/kframework/k/pull/1287#discussion_r425397292", "bodyText": "good catch. I did not notice that.", "author": "dwightguth", "createdAt": "2020-05-14T20:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4Mzg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NTgzMg==", "url": "https://github.com/kframework/k/pull/1287#discussion_r425395832", "bodyText": "It would be nice if these new attributes would be documented somewhere.", "author": "virgil-serbanuta", "createdAt": "2020-05-14T19:59:35Z", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -1452,17 +1404,62 @@ private Att addKoreAttributes(Production prod, SetMultimap<KLabel, Rule> functio\n         String format = att.getOptional(\"format\").orElse(Formatter.defaultFormat(prod.items().size()));\n         int nt = 1;\n         boolean hasFormat = true;\n+        int terminals = 0;\n         for (int i = 0; i < prod.items().size(); i++) {\n           if (prod.items().apply(i) instanceof NonTerminal) {\n             format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%\" + (nt++));\n           } else if (prod.items().apply(i) instanceof Terminal) {\n             format = format.replaceAll(\"%\" + (i+1) + \"(?![0-9])\", \"%c\" + ((Terminal)prod.items().apply(i)).value().replace(\"\\\\\", \"\\\\\\\\\").replace(\"$\", \"\\\\$\") + \"%r\");\n+            terminals++;\n           } else {\n             hasFormat = false;\n           }\n         }\n         if (hasFormat) {\n           att = att.add(\"format\", format);\n+          if (att.contains(\"color\")) {\n+            boolean escape = false;\n+            StringBuilder colors = new StringBuilder();\n+            String conn = \"\";\n+            for (int i = 0; i < format.length(); i++) {\n+              if (escape && format.charAt(i) == 'c') {\n+                colors.append(conn).append(att.get(\"color\"));\n+                conn = \",\";\n+              }\n+              if (format.charAt(i) == '%') {\n+                escape = true;\n+              } else {\n+                escape = false;\n+              }\n+            }\n+            att = att.add(\"colors\", colors.toString());", "originalCommit": "7bb81ce3852919f4cdc64224c8ef055ee55bdd7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NDQxOQ==", "url": "https://github.com/kframework/k/pull/1287#discussion_r427194419", "bodyText": "Seconded. I see that color, colors, format are already documented in pending-documentation.md.\npriorities, left, right are not, please add these to pending-documentation.md. I also see that bracket is folded into the paremetric productions section of pending-documentation.md, maybe it should be made into it's own section though?\nI also see terminals here as an attribute and nat, but I don't think that's something we want the users setting, so maybe we shouldn't document that. If these are supposed to be user exposed, also add to pending-documentation.md. If not, then maybe we should either (i) make sure they don't exist in the attributes before adding them in, or (ii) have a check in the frontend that they do not occur.", "author": "ehildenb", "createdAt": "2020-05-19T10:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NTgzMg=="}], "type": "inlineReview"}, {"oid": "66fede522a2ee4f7c1955b24530a22fcb5ba55f9", "url": "https://github.com/kframework/k/commit/66fede522a2ee4f7c1955b24530a22fcb5ba55f9", "message": "remove old unparsing data in text files", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "ed17c609d4f7aff050d16e9fb5c586e87334657b", "url": "https://github.com/kframework/k/commit/ed17c609d4f7aff050d16e9fb5c586e87334657b", "message": "refactor out Att.BRACKET() value", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "a58baa0c15ae7fd8826d29211fbf8c8975fdf26b", "url": "https://github.com/kframework/k/commit/a58baa0c15ae7fd8826d29211fbf8c8975fdf26b", "message": "code to annotate bracket productions with what their klabel would have\nbeen", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "429c4488e8a333b64466fba4f7836ee5fc82ffad", "url": "https://github.com/kframework/k/commit/429c4488e8a333b64466fba4f7836ee5fc82ffad", "message": "delete dead code", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "565a54f2add8df0352919f9a0dc3fb0525a514c9", "url": "https://github.com/kframework/k/commit/565a54f2add8df0352919f9a0dc3fb0525a514c9", "message": "refactor out translateSymbol method", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "184033879c07b3a2c6df436551ca3423330ce4b9", "url": "https://github.com/kframework/k/commit/184033879c07b3a2c6df436551ca3423330ce4b9", "message": "print attribute of type KList as kore", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "b267134a21517e2e206d9246def5da1fa3c407ab", "url": "https://github.com/kframework/k/commit/b267134a21517e2e206d9246def5da1fa3c407ab", "message": "add attributes for formatting", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "88c90879443af0847d4bfc5f377cd6a5276ab37c", "url": "https://github.com/kframework/k/commit/88c90879443af0847d4bfc5f377cd6a5276ab37c", "message": "emit only syntax definition plus brackets", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "33aa3087ee3bad02df2a2ddffe9c78b020b19b0e", "url": "https://github.com/kframework/k/commit/33aa3087ee3bad02df2a2ddffe9c78b020b19b0e", "message": "fix bug from review comment", "committedDate": "2020-05-15T19:03:56Z", "type": "commit"}, {"oid": "30faa4cf3eec04504c2873fe8d463e41f0619074", "url": "https://github.com/kframework/k/commit/30faa4cf3eec04504c2873fe8d463e41f0619074", "message": "update llvm backend submodule", "committedDate": "2020-05-15T19:04:43Z", "type": "commit"}, {"oid": "30faa4cf3eec04504c2873fe8d463e41f0619074", "url": "https://github.com/kframework/k/commit/30faa4cf3eec04504c2873fe8d463e41f0619074", "message": "update llvm backend submodule", "committedDate": "2020-05-15T19:04:43Z", "type": "forcePushed"}, {"oid": "eed3187c9e1357798eae5588ea4f19f37ab70378", "url": "https://github.com/kframework/k/commit/eed3187c9e1357798eae5588ea4f19f37ab70378", "message": "fix bug involving colors attribute", "committedDate": "2020-05-15T19:48:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzU4OQ==", "url": "https://github.com/kframework/k/pull/1287#discussion_r426537589", "bodyText": "I don't see this used anywhere. It's just incremented in the below loop, but then the value doesn't seem to be used.", "author": "ehildenb", "createdAt": "2020-05-18T10:49:56Z", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -1416,17 +1370,62 @@ private Att addKoreAttributes(Production prod, SetMultimap<KLabel, Rule> functio\n         String format = att.getOptional(\"format\").orElse(Formatter.defaultFormat(prod.items().size()));\n         int nt = 1;\n         boolean hasFormat = true;\n+        int terminals = 0;", "originalCommit": "eed3187c9e1357798eae5588ea4f19f37ab70378", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NTk4NQ==", "url": "https://github.com/kframework/k/pull/1287#discussion_r427195985", "bodyText": "@dwightguth I still don't see any uses of this variable.", "author": "ehildenb", "createdAt": "2020-05-19T10:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODIxOA==", "url": "https://github.com/kframework/k/pull/1287#discussion_r426538218", "bodyText": "So now instead of writing separate files with the unparsing information, we're adding attributes to the generated Kore file?\nI like the approach more, just want to make sure I understand.", "author": "ehildenb", "createdAt": "2020-05-18T10:51:09Z", "path": "kernel/src/main/java/org/kframework/backend/kore/ModuleToKORE.java", "diffHunk": "@@ -356,87 +361,34 @@ private void translateSymbols(Map<String, Boolean> attributes, SetMultimap<KLabe\n             if (impurities.contains(prod.klabel().get())) {\n                 impureFunctions.add(prod.klabel().get().name());\n             }\n-            sb.append(\"  \");\n-            if (isFunction(prod) && prod.att().contains(Att.HOOK()) && isRealHook(prod.att())) {\n-                sb.append(\"hooked-\");\n-            }\n-            sb.append(\"symbol \");\n-            convert(prod.klabel().get(), prod.params(), sb);\n-            String conn;\n-            sb.append(\"(\");\n-            conn = \"\";\n-            for (NonTerminal nt : iterable(prod.nonterminals())) {\n-                Sort sort = nt.sort();\n-                sb.append(conn);\n-                convert(sort, prod, sb);\n-                conn = \", \";\n-            }\n-            sb.append(\") : \");\n-            convert(prod.sort(), prod, sb);\n-            sb.append(\" \");\n-            Att koreAtt = addKoreAttributes(prod, functionRules, impurities, overloads);\n-            convert(attributes, koreAtt, sb, null, null);\n-            writeUnparsingDataForSymbol(prod, koreAtt);\n-            sb.append(\"\\n\");\n+            translateSymbol(attributes, functionRules, impurities, overloads, prod.klabel().get(), prod, sb);\n         }\n     }\n \n-    private void writeUnparsingDataForSymbol(Production prod, Att koreAtt) {\n-        if (koreAtt.contains(\"format\")) {\n-            formats.append(\"Lbl\");\n-            convert(prod.klabel().get().name(), formats);\n-            formats.append('\\n');\n-            formats.append(koreAtt.get(\"format\"));\n-            formats.append('\\n');\n-        }\n-        if (koreAtt.contains(\"color\")) {\n-            colors.append(\"Lbl\");\n-            convert(prod.klabel().get().name(), colors);\n-            colors.append('\\n');\n-            for (int i = 0; i < prod.items().size(); i++) {\n-                if (prod.items().apply(i) instanceof Terminal) {\n-                    colors.append(koreAtt.get(\"color\"));\n-                    colors.append('\\n');\n-                }\n-            }\n-            if (koreAtt.contains(\"format\")) {\n-              String format = koreAtt.get(\"format\");\n-              boolean escape = false;\n-              for (int i = 0; i < format.length(); i++) {\n-                if (escape && format.charAt(i) == 'c') {\n-                  colors.append(koreAtt.get(\"color\"));\n-                  colors.append('\\n');\n-                }\n-                if (format.charAt(i) == '%') {\n-                  escape = true;\n-                } else {\n-                  escape = false;\n-                }\n-              }\n-            }\n-            colors.append('\\n');\n-        } else if (koreAtt.contains(\"colors\")) {\n-            String[] data = koreAtt.get(\"colors\").split(\",\");\n-            colors.append(\"Lbl\");\n-            convert(prod.klabel().get().name(), colors);\n-            colors.append('\\n');\n-            for (int i = 0; i < data.length; i++) {\n-                colors.append(data[i].trim());\n-                colors.append('\\n');\n-            }\n-            colors.append('\\n');\n-        }\n-        if (koreAtt.contains(\"assoc\")) {\n-            assocs.append(\"Lbl\");\n-            convert(prod.klabel().get().name(), assocs);\n-            assocs.append('\\n');\n+    private void translateSymbol(Map<String, Boolean> attributes, SetMultimap<KLabel, Rule> functionRules, Set<KLabel> impurities, Set<Production> overloads, KLabel label, Production prod, StringBuilder sb) {\n+        sb.append(\"  \");\n+        if (isFunction(prod) && prod.att().contains(Att.HOOK()) && isRealHook(prod.att())) {\n+            sb.append(\"hooked-\");\n         }\n-        if (koreAtt.contains(\"comm\")) {\n-            comms.append(\"Lbl\");\n-            convert(prod.klabel().get().name(), comms);\n-            comms.append('\\n');\n+        sb.append(\"symbol \");\n+        convert(label, prod.params(), sb);\n+        String conn;\n+        sb.append(\"(\");\n+        conn = \"\";\n+        for (NonTerminal nt : iterable(prod.nonterminals())) {\n+            Sort sort = nt.sort();\n+            sb.append(conn);\n+            convert(sort, prod, sb);\n+            conn = \", \";\n         }\n+        sb.append(\") : \");\n+        convert(prod.sort(), prod, sb);\n+        sb.append(\" \");\n+        Att koreAtt = addKoreAttributes(prod, functionRules, impurities, overloads);", "originalCommit": "eed3187c9e1357798eae5588ea4f19f37ab70378", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyOTUxMA==", "url": "https://github.com/kframework/k/pull/1287#discussion_r426729510", "bodyText": "I ended up needing extra information to support the bracket pass, so I decided to reevaluate the approach. The only reason I had used separate files originally was because it proved to be significantly faster. But I was able to optimize the code sufficiently that it became less of an issue, which is why I went back to my original idea, which was the kore file attributes.", "author": "dwightguth", "createdAt": "2020-05-18T15:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODIxOA=="}], "type": "inlineReview"}, {"oid": "9d2ea3ef953228240c7e8155c539e74425d0f697", "url": "https://github.com/kframework/k/commit/9d2ea3ef953228240c7e8155c539e74425d0f697", "message": "fix whitespace", "committedDate": "2020-05-18T17:25:22Z", "type": "commit"}, {"oid": "a9db0b494bbee12cdf6b68ffa7eee10ddd2171e9", "url": "https://github.com/kframework/k/commit/a9db0b494bbee12cdf6b68ffa7eee10ddd2171e9", "message": "Merge branch 'master' into bracket", "committedDate": "2020-05-18T17:25:51Z", "type": "commit"}, {"oid": "10e637b9bef004c5047e911d868e2a7baed90526", "url": "https://github.com/kframework/k/commit/10e637b9bef004c5047e911d868e2a7baed90526", "message": "delete unused variable", "committedDate": "2020-05-20T14:16:36Z", "type": "commit"}, {"oid": "79b0fa255e2974368180cca745369ccd00bd157f", "url": "https://github.com/kframework/k/commit/79b0fa255e2974368180cca745369ccd00bd157f", "message": "Merge branch 'master' into bracket", "committedDate": "2020-05-20T14:16:42Z", "type": "commit"}, {"oid": "841867634b04ebf7bd8e2372c5f2e49a9320d209", "url": "https://github.com/kframework/k/commit/841867634b04ebf7bd8e2372c5f2e49a9320d209", "message": "Merge branch 'master' into bracket", "committedDate": "2020-05-20T18:16:42Z", "type": "commit"}, {"oid": "e5dd7b37740e113686578017383258516ccd8a54", "url": "https://github.com/kframework/k/commit/e5dd7b37740e113686578017383258516ccd8a54", "message": "update llvm backend submodule", "committedDate": "2020-05-20T18:16:57Z", "type": "commit"}, {"oid": "a4c81d9b99757e91232074304a23878417f8cd63", "url": "https://github.com/kframework/k/commit/a4c81d9b99757e91232074304a23878417f8cd63", "message": "Merge branch 'master' into bracket", "committedDate": "2020-05-21T21:52:46Z", "type": "commit"}]}