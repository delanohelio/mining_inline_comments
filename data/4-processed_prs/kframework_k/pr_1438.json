{"pr_number": 1438, "pr_title": "Report location of import on error importing something", "pr_createdAt": "2020-07-17T17:36:05Z", "pr_url": "https://github.com/kframework/k/pull/1438", "timeline": [{"oid": "86d499eca6e09776dea0e0e700ffe7a5cc8f6672", "url": "https://github.com/kframework/k/commit/86d499eca6e09776dea0e0e700ffe7a5cc8f6672", "message": "track attributes of imports", "committedDate": "2020-07-17T17:34:44Z", "type": "commit"}, {"oid": "b6d3ce20ba0b6c3f8ae09361b5df9018ec0aa0fd", "url": "https://github.com/kframework/k/commit/b6d3ce20ba0b6c3f8ae09361b5df9018ec0aa0fd", "message": "add tests", "committedDate": "2020-07-17T17:34:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxOTY3Mg==", "url": "https://github.com/kframework/k/pull/1438#discussion_r456619672", "bodyText": "Hmmmm, shouldn't we be correctly encoding/decoding the imports to JSON?", "author": "ehildenb", "createdAt": "2020-07-17T18:55:53Z", "path": "kernel/src/main/java/org/kframework/parser/json/JsonParser.java", "diffHunk": "@@ -155,8 +156,8 @@ public static FlatModule toFlatModule(JsonObject data) throws IOException {\n         String name = data.getString(\"name\");\n \n         JsonArray jsonimports = data.getJsonArray(\"imports\");\n-        Set<String> imports = new HashSet<>();\n-        jsonimports.getValuesAs(JsonString.class).forEach(i -> imports.add(i.getString()));\n+        Set<Import> imports = new HashSet<>();\n+        jsonimports.getValuesAs(JsonString.class).forEach(i -> imports.add(Import.apply(i.getString(), Att.empty())));\n ", "originalCommit": "b6d3ce20ba0b6c3f8ae09361b5df9018ec0aa0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxOTk3NA==", "url": "https://github.com/kframework/k/pull/1438#discussion_r456619974", "bodyText": "As in, shouldn't we change the JSON encoding to include the attributes on imports instead of assuming it's empty?", "author": "ehildenb", "createdAt": "2020-07-17T18:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxOTY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMTI4Ng==", "url": "https://github.com/kframework/k/pull/1438#discussion_r456621286", "bodyText": "I mean, those attributes don't actually get kept. You are converting from a Module back to a FlatModule and the attributes will have been lost by that point anyway. We would need a much larger change that tracked the attributes of imports through the entire compilation process if we were going to be able to do what you suggest here. But since imports can't actually have attributes and the attributes are just placeholders for the location, and the location information isn't really needed by the json, I figured this was good enough.", "author": "dwightguth", "createdAt": "2020-07-17T18:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxOTY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyMDkzOA==", "url": "https://github.com/kframework/k/pull/1438#discussion_r456620938", "bodyText": "Because the JSON encoding is directly an encoding of the FlatModule, I think it should be a faithful encoding of the actual Import, not just the name.", "author": "ehildenb", "createdAt": "2020-07-17T18:58:33Z", "path": "kore/src/main/scala/org/kframework/definition/outer-ext.scala", "diffHunk": "@@ -61,7 +63,32 @@ object FlatModule {\n   }\n }\n \n-case class FlatModule(name: String, imports: Set[String], localSentences: Set[Sentence], @(Nonnull@param) val att: Att = Att.empty)\n+case class Import(name: String, att: Att = Att.empty) extends HasLocation {\n+  override def location(): Optional[Location] = att.getOptional(classOf[Location])\n+  override def source(): Optional[Source] = att.getOptional(classOf[Source])\n+}\n+\n+object Import {\n+  val syntaxString = \"$SYNTAX\"\n+\n+  def isSyntax(name: String): Boolean = name.endsWith(syntaxString)\n+\n+  def asSyntax(_import: Import): Import =\n+    if (isSyntax(_import.name))\n+      _import\n+    else\n+      Import(_import.name ++ syntaxString, _import.att)\n+\n+  def noSyntax(name: String): String =\n+    if (isSyntax(name))\n+      name.dropRight(syntaxString.length)\n+    else\n+      name\n+}\n+\n+\n+\n+case class FlatModule(name: String, imports: Set[Import], localSentences: Set[Sentence], @(Nonnull@param) val att: Att = Att.empty)", "originalCommit": "b6d3ce20ba0b6c3f8ae09361b5df9018ec0aa0fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}