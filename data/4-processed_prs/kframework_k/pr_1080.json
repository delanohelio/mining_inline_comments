{"pr_number": 1080, "pr_title": "Collection cell documenation", "pr_createdAt": "2020-02-04T03:28:08Z", "pr_url": "https://github.com/kframework/k/pull/1080", "timeline": [{"oid": "9a5e9475dcb2dfaa3fc0f055ad52b33137c0bcd9", "url": "https://github.com/kframework/k/commit/9a5e9475dcb2dfaa3fc0f055ad52b33137c0bcd9", "message": "pending-documentation: add example of exit attribute on configuration", "committedDate": "2020-02-04T03:03:01Z", "type": "commit"}, {"oid": "1e1e7fe197009747b2ecdf122bc44e3101273bbd", "url": "https://github.com/kframework/k/commit/1e1e7fe197009747b2ecdf122bc44e3101273bbd", "message": "pending-documentation: add documentation for cell collections", "committedDate": "2020-02-04T03:27:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NDQ4NQ==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374464485", "bodyText": "Should \"admin\" be \"admit\"? I'm not sure what \"admin\" would mean as a verb here (maybe just short for \"administer\")?", "author": "kmbarry1", "createdAt": "2020-02-04T04:02:35Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admin a single `<set>` instance at", "originalCommit": "1e1e7fe197009747b2ecdf122bc44e3101273bbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NjY2Mg==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374466662", "bodyText": "Yeah it should, fixed.", "author": "ehildenb", "createdAt": "2020-02-04T04:14:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2NDQ4NQ=="}], "type": "inlineReview"}, {"oid": "a858c05ee326776b8f5a23909b73dda155d497f5", "url": "https://github.com/kframework/k/commit/a858c05ee326776b8f5a23909b73dda155d497f5", "message": "pending-documentation: typo", "committedDate": "2020-02-04T04:14:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNzQxNA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374517414", "bodyText": "What is the point of having type Set if we have multiplicity ? ?", "author": "traiansf", "createdAt": "2020-02-04T07:52:44Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>", "originalCommit": "a858c05ee326776b8f5a23909b73dda155d497f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2NjEzMA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374766130", "bodyText": "Either it exists  or not, I figured. Can we have multiplicity=\"?\" without type=\"Set\"? Not sure.", "author": "ehildenb", "createdAt": "2020-02-04T16:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxNzQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374518802", "bodyText": "Maybe write both list introduction rules?", "author": "traiansf", "createdAt": "2020-02-04T07:56:35Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>", "originalCommit": "a858c05ee326776b8f5a23909b73dda155d497f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTA0Mw==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374519043", "bodyText": "(and elimination). I know you said it in words, but the rules are faster to comprehend, IMO", "author": "traiansf", "createdAt": "2020-02-04T07:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTE5Mw==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374785193", "bodyText": "I've added both left and right elim/intro rules.", "author": "ehildenb", "createdAt": "2020-02-04T16:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxODgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374519637", "bodyText": "The fact that we use .Bag seems a bit confusing...  I would prefer using . without any qualification then .Bag when I think about it as a Set or List, or Map", "author": "traiansf", "createdAt": "2020-02-04T07:59:14Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty", "originalCommit": "a858c05ee326776b8f5a23909b73dda155d497f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc2NjMzOA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374766338", "bodyText": "Well, sure. But I would say open an issue for it rather than fix it before it's documented.", "author": "ehildenb", "createdAt": "2020-02-04T16:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTIzMw==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795233", "bodyText": "it should really be .Cells but yeah, we can change that separately since it's not a backwards compatible change.", "author": "dwightguth", "createdAt": "2020-02-04T16:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxOTYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374520130", "bodyText": "So the name of the key cell does not have any influence?  Maybe that should be explicitly mentioned.  Would we want to advise as good practice to use a naming convention, though?", "author": "traiansf", "createdAt": "2020-02-04T08:00:44Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.", "originalCommit": "a858c05ee326776b8f5a23909b73dda155d497f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDg3Ng==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374520876", "bodyText": "Also, can we have more than two subcells?  As far as I remember, the map values are actually the contents of the entire cell, including the key.   if so, maybe we should say so.", "author": "traiansf", "createdAt": "2020-02-04T08:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTU3MA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374785570", "bodyText": "I've added a second sub-cell, and made it clear that the cell names mean nothing. I also mention that the cell map value includes the entire collection cell, though I think that may be confusing for users, but we'll see.", "author": "ehildenb", "createdAt": "2020-02-04T16:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTQ4OQ==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795489", "bodyText": "You actually do not need to mention the cell key. It will just do a nondeterministic choice if you don't.", "author": "dwightguth", "createdAt": "2020-02-04T16:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NDczOQ==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374954739", "bodyText": "Fixed.", "author": "ehildenb", "createdAt": "2020-02-04T22:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMDEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMTIyMg==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374521222", "bodyText": "This rule is interesting, because it says the values would be initialized with the defaults from the initial configuration.  Maybe we should mention that.", "author": "traiansf", "createdAt": "2020-02-04T08:03:48Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n+de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+\n+For example, the following rules introduce, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>", "originalCommit": "a858c05ee326776b8f5a23909b73dda155d497f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDQ5NA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374784494", "bodyText": "Added a sentence towards the end explaining what happens when sub-cells are missing.", "author": "ehildenb", "createdAt": "2020-02-04T16:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjAwNQ==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374522005", "bodyText": "Maybe we should mention the effect that * and ? have on building the initial configuration.", "author": "traiansf", "createdAt": "2020-02-04T08:06:04Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.", "originalCommit": "a858c05ee326776b8f5a23909b73dda155d497f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDM2Ng==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374784366", "bodyText": "Added, please check it.", "author": "ehildenb", "createdAt": "2020-02-04T16:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjI5NA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374522294", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be\n          \n          \n            \n            Declaring `type=\"Set\"` indicates that duplicate occurrences of the cell should be", "author": "traiansf", "createdAt": "2020-02-04T08:06:52Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,94 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value> \"\":String </map-value>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurances of the cell should be", "originalCommit": "a858c05ee326776b8f5a23909b73dda155d497f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDI3MQ==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374784271", "bodyText": "Fixed.", "author": "ehildenb", "createdAt": "2020-02-04T16:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUyMjI5NA=="}], "type": "inlineReview"}, {"oid": "858d2b9c83258f07217f546f35529fcc550dcb9c", "url": "https://github.com/kframework/k/commit/858d2b9c83258f07217f546f35529fcc550dcb9c", "message": "pending-documentation: add start and end list intro/elim rules", "committedDate": "2020-02-04T16:25:51Z", "type": "commit"}, {"oid": "b7c41e5d47bffd52932e5b246dd369251798c8e0", "url": "https://github.com/kframework/k/commit/b7c41e5d47bffd52932e5b246dd369251798c8e0", "message": "pending-documentation: more thorough documentation about cell maps", "committedDate": "2020-02-04T16:33:36Z", "type": "commit"}, {"oid": "e96c5e715d31b71d93985e43275972f79bc17160", "url": "https://github.com/kframework/k/commit/e96c5e715d31b71d93985e43275972f79bc17160", "message": "pending-documentation: initial configuration for cell collections", "committedDate": "2020-02-04T16:34:49Z", "type": "commit"}, {"oid": "e9d81e1f31489ff302d21f8b3cf17b7006524a00", "url": "https://github.com/kframework/k/commit/e9d81e1f31489ff302d21f8b3cf17b7006524a00", "message": "pending-documentation: typo", "committedDate": "2020-02-04T16:35:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTg5MA==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374795890", "bodyText": "you can only omit cells if you have a ... in the parent.", "author": "dwightguth", "createdAt": "2020-02-04T16:55:07Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the\n+initial configuration will start with 0 instances of the cell collection.\n+\n+`type` can take on values `Set`, `List`, and `Map`. For example, here we declare\n+several collecion cells:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <sets>  <set  multiplicity=\"?\" type=\"Set\">  0:Int </set>  </sets>\n+              <lists> <list multiplicity=\"*\" type=\"List\"> 0:Int </list> </lists>\n+              <maps>\n+                <map multiplicity=\"*\" type=\"Map\">\n+                  <map-key> 0:Int </map-key>\n+                  <map-value-1> \"\":String </map-value-1>\n+                  <map-value-2> 0:Int     </map-value-2>\n+                </map>\n+              </maps>\n+```\n+\n+Declaring `type=\"Set\"` indicates that duplicate occurrences of the cell should\n+be de-duplicated, and accesses to instances of the cell will be nondeterministic\n+choices (constrained by any other parts of the match and side-conditions).\n+Similarly, declaring `type=\"List\"` means that new instances of the cell can be\n+added at the front or back, and elements can be accessed from the front or back,\n+and the order of the cells will be maintained. The following are examples of\n+introduction and elimination rules for these collections:\n+\n+```k\n+rule <k> introduce-set(I:Int) => . ... </k>\n+     <sets> .Bag => <set> I </set> </sets>\n+\n+rule <k> eliminate-set => I ... </k>\n+     <sets> <set> I </set> => .Bag </sets>\n+\n+rule <k> introduce-list-start(I:Int) => . ... </k>\n+     <lists> (.Bag => <list> I </list>) ... </lists>\n+\n+rule <k> introduce-list-end(I:Int) => . ... </k>\n+     <lists> ... (.Bag => <list> I </list>) </lists>\n+\n+rule <k> eliminate-list-start => I ... </k>\n+     <lists> (<list> I </list> => .Bag) ... </lists>\n+\n+rule <k> eliminate-list-end => I ... </k>\n+     <lists> ... (<list> I </list> => .Bag) </lists>\n+```\n+\n+Notice that for `multiplicity=\"?\"`, we only admit a single `<set>` instance at\n+a time. For the `type=List` cell, we can add/eliminate cells from the from or\n+back of the `<lists>` cell. Also note that we use `.Bag` to indicate the empty\n+cell collection in all cases.\n+\n+Declaring `type=\"Map\"` indicates that the first sub-cell will be used as a\n+cell-key. This means that matching on those cells will be done as a map-lookup\n+operation, so rules which match on the subcells _must_ mention the cell-key.\n+Note that there is no special meaning to the name of the cells (in this case\n+`<map>`, `<map-key>`, `<map-value-1>`, and `<map-value-2>`). Additionally, any\n+number of sub-cells are allowed, and the _entire_ instance of the cell\n+collection is considered part of the cell-value, including the cell-key\n+(`<map-key>` in this case) and the surrounding collection cell (`<map>` in this\n+case).\n+\n+For example, the following rules introduce, set, retrieve from, and eliminate\n+`type=\"Map\"` cells:\n+\n+```k\n+rule <k> introduce-map(I:Int) => . ... </k>\n+     <maps> ... (.Bag => <map> <map-key> I </map-key> ... </map>) ... </maps>\n+\n+rule <k> set-map-value-1(I:Int, S:String) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> _ => S </map-value-1> ... </map>\n+\n+rule <k> set-map-value-2(I:Int, V:Int) => . ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> _ => V </map-value-2> ... </map>\n+\n+rule <k> retrieve-map-value-1(I:Int) => S ... </k>\n+     <map> <map-key> I </map-key> <map-value-1> S </map-value-1> ... </map>\n+\n+rule <k> retrieve-map-value-2(I:Int) => V ... </k>\n+     <map> <map-key> I </map-key> <map-value-2> V </map-value-2> ... </map>\n+\n+rule <k> eliminate-map(I:Int) => . ... </k>\n+     <maps> ... (<map> <map-key> I </map-key> ... </map> => .Bag) ... </maps>\n+```\n+\n+Note how each rule makes sure that `<map-key>` cell is mentioned, and we\n+continue to use `.Bag` to indicate the empty collection. Also note that\n+when introducing new map elements, you may omit any of the sub-cells which are\n+not the cell-key. In case you do omit sub-cells, they will recieve the default\n+value given in the `configuration ...` declaration.\n+", "originalCommit": "e9d81e1f31489ff302d21f8b3cf17b7006524a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NDUyMQ==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374954521", "bodyText": "Fixed.", "author": "ehildenb", "createdAt": "2020-02-04T22:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwMzUyNg==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374903526", "bodyText": "this is not true. If a multiplicity cell contains configuration variables it will start with exactly one instance of that cell.", "author": "dwightguth", "createdAt": "2020-02-04T20:25:15Z", "path": "pending-documentation.md", "diffHunk": "@@ -457,6 +457,120 @@ A single configuration cell containing an integer may have the \"exit\"\n attribute. This integer will then be used as the return value on the console\n when executing the program.\n \n+For example:\n+\n+```k\n+configuration <k> $PGM:Pgm </k>\n+              <status-code exit=\"\"> 1 </status-code>\n+```\n+\n+declares that the cell `status-code` should be used as the exit-code for\n+invocations of `krun`. Additionally, we state that the default exit-code is `1`\n+(an error state). One use of this is for writing testing harnesses which assume\n+that the test fails until proven otherwise and only set the `<status-code>` cell\n+to `0` if the test succeeds.\n+\n+### Collection Cells: `multiplicity` and `type` attributes\n+\n+Sometimes a semantics needs to allow multiple copies of the same cell, for\n+example if you are making a concurrent multi-threading programming language.\n+For this purpose, K supports the `multiplicity` and `type` attributes on cells\n+declared in the configuration.\n+\n+`multiplicity` can take on values `*` and `?`. Declaring `multiplicity=\"*\"`\n+indicates that the cell may appear any number of times in a runtime\n+configuration. Setting `multiplicity=\"?\"` indicates that the cell may only\n+appear exactly 0 or 1 times in a runtime configuration. In both cases, the", "originalCommit": "e9d81e1f31489ff302d21f8b3cf17b7006524a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1NDU3Mg==", "url": "https://github.com/kframework/k/pull/1080#discussion_r374954572", "bodyText": "Fixed.", "author": "ehildenb", "createdAt": "2020-02-04T22:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwMzUyNg=="}], "type": "inlineReview"}, {"oid": "26ae2c34a4f7c9a481472247acb09964efce478a", "url": "https://github.com/kframework/k/commit/26ae2c34a4f7c9a481472247acb09964efce478a", "message": "pending-documentation: correct documentation", "committedDate": "2020-02-04T22:16:39Z", "type": "commit"}, {"oid": "6a5007cc398ef5ee7eaea9a04363358de171c397", "url": "https://github.com/kframework/k/commit/6a5007cc398ef5ee7eaea9a04363358de171c397", "message": "Merge branch 'master' into collection-cell-docs", "committedDate": "2020-02-05T22:21:54Z", "type": "commit"}]}