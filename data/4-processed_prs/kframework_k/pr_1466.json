{"pr_number": 1466, "pr_title": "Convert lambda to markdown", "pr_createdAt": "2020-07-28T17:37:47Z", "pr_url": "https://github.com/kframework/k/pull/1466", "timeline": [{"oid": "fe2821016caab1b0fa4a7ab50dbdf8d64264ef5e", "url": "https://github.com/kframework/k/commit/fe2821016caab1b0fa4a7ab50dbdf8d64264ef5e", "message": "Convert lambda to markdown", "committedDate": "2020-07-29T16:04:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MjU1MQ==", "url": "https://github.com/kframework/k/pull/1466#discussion_r462452551", "bodyText": "Use the format used in other markdown files for the copyright instead. Look at k-distribution/tutorial/1_k/README.md for an example.", "author": "ehildenb", "createdAt": "2020-07-29T17:05:50Z", "path": "k-distribution/tutorial/1_k/1_lambda/lesson_9/lambda.md", "diffHunk": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2019 K Team. All Rights Reserved.\n+<!--- Copyright (c) 2014-2020 K Team. All Rights Reserved. --->\n ", "originalCommit": "fe2821016caab1b0fa4a7ab50dbdf8d64264ef5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MTAwOQ==", "url": "https://github.com/kframework/k/pull/1466#discussion_r462591009", "bodyText": "I used the format from imp.md. I changed both files.", "author": "radumereuta", "createdAt": "2020-07-29T21:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1MjU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MDk4OQ==", "url": "https://github.com/kframework/k/pull/1466#discussion_r463180989", "bodyText": "let's remove this comment and replace it with something talking about how markdown works, because this is not accurate otherwise.", "author": "dwightguth", "createdAt": "2020-07-30T18:11:05Z", "path": "k-distribution/tutorial/1_k/1_lambda/lesson_9/lambda.md", "diffHunk": "@@ -1,4 +1,6 @@\n-// Copyright (c) 2014-2019 K Team. All Rights Reserved.\n+---\n+copyright: Copyright (c) 2014-2020 K Team. All Rights Reserved.\n+---\n \n // C/Java-like comments like this one are completely ignored by the K tool.", "originalCommit": "8ce14922096a0e59b44ac1a952a653b6edf860dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MTM3MA==", "url": "https://github.com/kframework/k/pull/1466#discussion_r463181370", "bodyText": "let's adjust the language here too.", "author": "dwightguth", "createdAt": "2020-07-30T18:11:49Z", "path": "k-distribution/tutorial/1_k/1_lambda/lesson_9/lambda.md", "diffHunk": "@@ -13,103 +15,103 @@ several lines, are ignored, too.  */\n // of the generated Latex documentation, that is, before \"\\begin{document}\"\n // (e.g., when your comment includes macros, or defines a title, etc.)\n \n-/*!\n-\\setlength{\\parindent}{1em}\n-\\title{Tutorial 1 --- LAMBDA}\n-\\author {Grigore Ro\\c{s}u (\\texttt{grosu@illinois.edu})}\n-\\organization{University of Illinois at Urbana-Champaign}\n-*/\n+Tutorial 1 --- LAMBDA\n+=====================\n \n-/*@ \\section{Abstract}\n-This file defines a simple functional language in \\K, called LAMBDA,\n+Author: Grigore Ro\u0219u (grosu@illinois.edu)  \n+Organization: University of Illinois at Urbana-Champaign\n+\n+### Abstract\n+This file defines a simple functional language in **K**, called LAMBDA,\n using a substitution style.  The explicit objective here is to teach some\n-\\K concepts and how they work in the K tool, and not to teach\n-$\\lambda$-calculus or to argue for one definitional style against another\n+**K** concepts and how they work in the K tool, and not to teach\n+\u03bb-calculus or to argue for one definitional style against another\n (e.g., some may prefer environment/closure-based definitions of such\n languages).\n \n Note that the subsequent definition is so simple, that it hardly shows any\n-of the strengths of \\K.  Perhaps the most interesting \\K aspect it shows is\n+of the strengths of **K**.  Perhaps the most interesting **K** aspect it shows is\n that substitution can be defined fully generically, and then used to give\n semantics to various constructs in various languages.\n \n-\\paragraph{Note:}{\n-\\K follows the\n-\\href{https://en.wikipedia.org/wiki/Literate_programming}{literate\n-programming} approach.  The various semantic features defined in a \\K\n+Note:\n+ **K** follows the\n+[literate programming](https://en.wikipedia.org/wiki/Literate_programming)\n+approach. The various semantic features defined in a **K**\n module can be reordered at will and can be commented using normal\n comments like in C/C++/Java.  If those comments start with\n-`\\texttt{@}' preceded by no space (e.g.,\n-`\\texttt{//{@} {\\textbackslash}section\\{Variable declarations\\}}'\n+`\\texttt{@}` preceded by no space (e.g.,", "originalCommit": "8ce14922096a0e59b44ac1a952a653b6edf860dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTMyOQ==", "url": "https://github.com/kframework/k/pull/1466#discussion_r463815329", "bodyText": "this is another reference that should probably be adjusted", "author": "dwightguth", "createdAt": "2020-07-31T20:16:34Z", "path": "k-distribution/tutorial/1_k/1_lambda/lesson_9/lambda.md", "diffHunk": "@@ -0,0 +1,145 @@\n+---\n+copyright: Copyright (c) 2014-2020 K Team. All Rights Reserved.\n+---\n+\n+**K** code can be nested inside Markdown using annotated code blocks.\n+Use the tag `k` to tell the compiler which blocks to select.\n+\n+Inside `.k` files, C/Java-like comments are available.\n+```k\n+// Single line comment\n+/* Multiline\n+comments */\n+```\n+\n+Tutorial 1 --- LAMBDA\n+=====================\n+\n+Author: Grigore Ro\u0219u (grosu@illinois.edu)  \n+Organization: University of Illinois at Urbana-Champaign\n+\n+### Abstract\n+This file defines a simple functional language in **K**, called LAMBDA,\n+using a substitution style.  The explicit objective here is to teach some\n+**K** concepts and how they work in the K tool, and not to teach\n+\u03bb-calculus or to argue for one definitional style against another\n+(e.g., some may prefer environment/closure-based definitions of such\n+languages).\n+\n+Note that the subsequent definition is so simple, that it hardly shows any\n+of the strengths of **K**.  Perhaps the most interesting **K** aspect it shows is\n+that substitution can be defined fully generically, and then used to give\n+semantics to various constructs in various languages.\n+\n+Note:\n+ **K** follows the\n+[literate programming](https://en.wikipedia.org/wiki/Literate_programming)\n+approach. The various semantic features defined in a **K**\n+module can be reordered at will and can be commented using normal\n+comments like in C/C++/Java.\n+While comments are useful in general, they can annoy the expert user\n+of **K**. To turn them off, you can do one of the following (unless you\n+want to remove them manually):  \n+(1) Use an [editor](https://github.com/kframework/k-editor-support) which can\n+hide or highlight Markdown and conventional C-like comments; or  \n+(2) Run `kompile --debug <def>`. Inside `./.kompiled-xxx/.md2.k/` you will find\n+all the K code extracted from the markdown files as used for compilation.\n+\n+### Substitution\n+We need the predefined substitution module, so we require it with the command\n+below.  Then we should make sure we import its module called SUBSTITUTION\n+in our LAMBDA module below.\n+\n+```k\n+require \"substitution.md\"\n+\n+module LAMBDA\n+  imports DOMAINS\n+  imports SUBSTITUTION\n+```\n+### Basic Call-by-value \u03bb-Calculus\n+\n+We first define a conventional call-by-value \u03bb-calculus, making sure\n+we declare the lambda abstraction construct to be a binder, the\n+lambda application to be strict, and the parentheses used for grouping as\n+a bracket.\n+\n+Note:\n+Syntax in **K** is defined using the familiar BNF notation, with\n+terminals enclosed in quotes and nonterminals starting with capital\n+letters. **K** actually extends BNF with several attributes, which will be\n+described in this tutorial.\n+\n+Note:\n+The `strict` constructs can evaluate their arguments in any (fully\n+interleaved) order.\n+\n+\n+The initial syntax of our \u03bb-calculus:\n+```k\n+  syntax Val ::= KVar\n+               | \"lambda\" KVar \".\" Exp  [binder, latex(\\lambda{#1}.{#2})]\n+  syntax Exp ::= Val\n+               | Exp Exp              [left, strict]\n+               | \"(\" Exp \")\"          [bracket]\n+  syntax KResult ::= Val\n+```\n+### \u03b2-reduction\n+\n+```k\n+  rule (lambda X:KVar . E:Exp) V:Val => E[V / X]\n+```\n+\n+### Integer and Boolean Builtins\n+The LAMBDA arithmetic and Boolean expression constructs are simply rewritten\n+to their builtin counterparts once their arguments are evaluated.\n+The operations with subscripts in the right-hand sides of the rules below are\n+builtin and come with the corresponding builtin sort; they are actually\n+written like `+Int` in ASCII, but they have LaTeX attributes to be", "originalCommit": "95bb3c1dbc698c92ffa562dc0a082a1f6e40cafc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNTk4NA==", "url": "https://github.com/kframework/k/pull/1466#discussion_r463825984", "bodyText": "This is referring to the latex attributes.\nWhen I converted imp for the first time, you (or Everett) asked me not to remove them.\nSo what do we want to do with them? At this moment I don't see how they are useful.", "author": "radumereuta", "createdAt": "2020-07-31T20:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTMyOQ=="}], "type": "inlineReview"}, {"oid": "2b7e1b3f501c73b6c17e1cddf1d91276bebd4f45", "url": "https://github.com/kframework/k/commit/2b7e1b3f501c73b6c17e1cddf1d91276bebd4f45", "message": "Rename extension to md", "committedDate": "2020-07-31T21:03:20Z", "type": "commit"}, {"oid": "115ea170e2008759992e3ccebb6ac3e00b0bb606", "url": "https://github.com/kframework/k/commit/115ea170e2008759992e3ccebb6ac3e00b0bb606", "message": "Convert lambda to markdown", "committedDate": "2020-07-31T21:03:43Z", "type": "commit"}, {"oid": "115ea170e2008759992e3ccebb6ac3e00b0bb606", "url": "https://github.com/kframework/k/commit/115ea170e2008759992e3ccebb6ac3e00b0bb606", "message": "Convert lambda to markdown", "committedDate": "2020-07-31T21:03:43Z", "type": "forcePushed"}, {"oid": "42b66572b5945c88d34eeeee49c6cf032bde7cd7", "url": "https://github.com/kframework/k/commit/42b66572b5945c88d34eeeee49c6cf032bde7cd7", "message": "Merge branch 'master' into lambdaMD", "committedDate": "2020-08-03T16:18:21Z", "type": "commit"}, {"oid": "6af80df734765bc20cc9ba91acec17b5174bdb47", "url": "https://github.com/kframework/k/commit/6af80df734765bc20cc9ba91acec17b5174bdb47", "message": "Merge branch 'master' into lambdaMD", "committedDate": "2020-08-04T18:24:24Z", "type": "commit"}]}