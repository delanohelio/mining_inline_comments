{"pr_number": 1292, "pr_title": "Upstream symbolic integer reasoning", "pr_createdAt": "2020-05-16T11:01:03Z", "pr_url": "https://github.com/kframework/k/pull/1292", "timeline": [{"oid": "aa2b74df3384b45236a1a2d0c0bbfd6bfec29830", "url": "https://github.com/kframework/k/commit/aa2b74df3384b45236a1a2d0c0bbfd6bfec29830", "message": "domains-lemmas-no-smt: add case that Daejun suggested", "committedDate": "2020-05-17T08:03:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MTk2MQ==", "url": "https://github.com/kframework/k/pull/1292#discussion_r430641961", "bodyText": "These must have attribute simplification. I don't think anywhere is necessary: it should have no effect because #Ceil isn't a constructor. However, it shouldn't hurt anything.", "author": "ttuegel", "createdAt": "2020-05-26T19:05:57Z", "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -444,39 +444,40 @@ module INT-SYMBOLIC [symbolic, kore]\n   imports  INT-COMMON\n   imports ML-SYNTAX\n \n-  /**\n-   * Definability conditions\n-   */\n-\n-  rule\n-    #Ceil(@I1:Int /Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int %Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int modInt @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int >>Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int <<Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n+  // Definability Conditions\n+  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]", "originalCommit": "aa2b74df3384b45236a1a2d0c0bbfd6bfec29830", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NTE2OQ==", "url": "https://github.com/kframework/k/pull/1292#discussion_r431865169", "bodyText": "I've incorporated the update #1305 so this shouldn't be an issue anymore.", "author": "ehildenb", "createdAt": "2020-05-28T14:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MTk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MjM4Ng==", "url": "https://github.com/kframework/k/pull/1292#discussion_r430642386", "bodyText": "What is this priority attribute intended to do?", "author": "ttuegel", "createdAt": "2020-05-26T19:06:43Z", "path": "k-distribution/include/builtin/domains.k", "diffHunk": "@@ -444,39 +444,40 @@ module INT-SYMBOLIC [symbolic, kore]\n   imports  INT-COMMON\n   imports ML-SYNTAX\n \n-  /**\n-   * Definability conditions\n-   */\n-\n-  rule\n-    #Ceil(@I1:Int /Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int %Int @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int modInt @I2:Int)\n-  =>\n-    {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int >>Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n-\n-  rule\n-    #Ceil(@I1:Int <<Int @I2:Int)\n-  =>\n-    {(@I2 >=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)\n-  [anywhere]\n+  // Definability Conditions\n+  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [anywhere]\n+\n+  // Arithmetic Normalization\n+  rule I +Int 0 => I [simplification]\n+  rule I -Int 0 => I [simplification]\n+\n+  rule I +Int B => B +Int I          [concrete(I), symbolic(B), priority(51), simplification]\n+  rule A -Int I => A +Int (0 -Int I) [concrete(I), symbolic(A), priority(51), simplification]", "originalCommit": "aa2b74df3384b45236a1a2d0c0bbfd6bfec29830", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2Njk0Mg==", "url": "https://github.com/kframework/k/pull/1292#discussion_r431866942", "bodyText": "It's to make sure the rules preceding it are applied first:\n  rule I +Int 0 => I [simplification]\n  rule I -Int 0 => I [simplification]\n\n  rule I +Int B => B +Int I          [concrete(I), symbolic(B), priority(51), simplification]\n  rule A -Int I => A +Int (0 -Int I) [concrete(I), symbolic(A), priority(51), simplification]\n\nFor example, if you have X -Int 0, then you want it to go directly to X (and not to X +Int (0 -Int 0)).", "author": "ehildenb", "createdAt": "2020-05-28T14:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MjM4Ng=="}], "type": "inlineReview"}, {"oid": "261188ad51f93b9bfe3e6d9c26a79d2fadc06034", "url": "https://github.com/kframework/k/commit/261188ad51f93b9bfe3e6d9c26a79d2fadc06034", "message": "domains.k: formatting", "committedDate": "2020-05-28T09:23:00Z", "type": "commit"}, {"oid": "5b9de70741a04d8ae326ad50f78dbd5484e29cc6", "url": "https://github.com/kframework/k/commit/5b9de70741a04d8ae326ad50f78dbd5484e29cc6", "message": "domains.k: arithmetic normalization lemmas from KEVM", "committedDate": "2020-05-28T09:23:26Z", "type": "commit"}, {"oid": "5246a16af533b5abef8792e3091f7715003b0a22", "url": "https://github.com/kframework/k/commit/5246a16af533b5abef8792e3091f7715003b0a22", "message": "k-distribution/tests/regression-new/domains-lemmas-no-smt: upstream tests from KEVM", "committedDate": "2020-05-28T09:23:27Z", "type": "commit"}, {"oid": "33afccdb2cfbb32ba0da333f9be8f045a532dd4f", "url": "https://github.com/kframework/k/commit/33afccdb2cfbb32ba0da333f9be8f045a532dd4f", "message": "tests/domains-lemmas-no-smt: allow other types of proofs", "committedDate": "2020-05-28T09:23:27Z", "type": "commit"}, {"oid": "26207324325dcf16e71e477c3d64898bad19e734", "url": "https://github.com/kframework/k/commit/26207324325dcf16e71e477c3d64898bad19e734", "message": "tests/domains-lemmas-smt: add tests of modular arithmetic", "committedDate": "2020-05-28T09:23:27Z", "type": "commit"}, {"oid": "30a063c47e1ff1f0cef06ae3d80667b66dc927c4", "url": "https://github.com/kframework/k/commit/30a063c47e1ff1f0cef06ae3d80667b66dc927c4", "message": "tests/domains-lemmas-no-smt: test double increment simplification", "committedDate": "2020-05-28T09:23:27Z", "type": "commit"}, {"oid": "07c24be88623f7f033c5a39e7ef639d8134f8eaf", "url": "https://github.com/kframework/k/commit/07c24be88623f7f033c5a39e7ef639d8134f8eaf", "message": "domains.k: add modular arith and bitshifts", "committedDate": "2020-05-28T09:23:27Z", "type": "commit"}, {"oid": "2d12eac66ab8db50dcfa2c3d1ed2f2285772c509", "url": "https://github.com/kframework/k/commit/2d12eac66ab8db50dcfa2c3d1ed2f2285772c509", "message": "domains. domains-lemmas-no-smt-spec: simplify out identities", "committedDate": "2020-05-28T09:23:27Z", "type": "commit"}, {"oid": "90ee5e265c456f12af5fbf02c9587bcc2f8d9e80", "url": "https://github.com/kframework/k/commit/90ee5e265c456f12af5fbf02c9587bcc2f8d9e80", "message": "domains-lemmas-no-smt: add case that Daejun suggested", "committedDate": "2020-05-28T09:23:27Z", "type": "commit"}, {"oid": "0c0125a8e6463aee6079b25666856a35f5f3efab", "url": "https://github.com/kframework/k/commit/0c0125a8e6463aee6079b25666856a35f5f3efab", "message": "domains.k: formatting", "committedDate": "2020-05-28T14:06:51Z", "type": "commit"}, {"oid": "2036b12ad72f8f9f81fe89ae450ee264bddaaaa6", "url": "https://github.com/kframework/k/commit/2036b12ad72f8f9f81fe89ae450ee264bddaaaa6", "message": "regression-new/domains-lemmas-{no-smt,smt}: update Makefile", "committedDate": "2020-05-28T14:09:56Z", "type": "commit"}, {"oid": "2036b12ad72f8f9f81fe89ae450ee264bddaaaa6", "url": "https://github.com/kframework/k/commit/2036b12ad72f8f9f81fe89ae450ee264bddaaaa6", "message": "regression-new/domains-lemmas-{no-smt,smt}: update Makefile", "committedDate": "2020-05-28T14:09:56Z", "type": "forcePushed"}, {"oid": "987076020476ae91679f45ba45745ac9e17b42e4", "url": "https://github.com/kframework/k/commit/987076020476ae91679f45ba45745ac9e17b42e4", "message": "Merge branch 'master' into upstream-symbolic-reasoning", "committedDate": "2020-05-28T15:21:57Z", "type": "commit"}]}