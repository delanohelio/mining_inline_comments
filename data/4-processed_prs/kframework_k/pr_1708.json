{"pr_number": 1708, "pr_title": "Warnings and errors for cmd line vars", "pr_createdAt": "2020-12-14T23:10:51Z", "pr_url": "https://github.com/kframework/k/pull/1708", "timeline": [{"oid": "d626a2cb2fd4f5564f778867be54883b8f3d7938", "url": "https://github.com/kframework/k/commit/d626a2cb2fd4f5564f778867be54883b8f3d7938", "message": "Put all temp files in only one dir\n\nTODO: multiple tests for warnings and errors kx and krun", "committedDate": "2020-12-20T18:52:03Z", "type": "forcePushed"}, {"oid": "6e5f81c13473afc0d617b348ad5743ebfe3955a5", "url": "https://github.com/kframework/k/commit/6e5f81c13473afc0d617b348ad5743ebfe3955a5", "message": "IO is an exception", "committedDate": "2021-01-11T20:29:29Z", "type": "forcePushed"}, {"oid": "c6eb2f5c9518170d7debcd4e0620e48cffb678d1", "url": "https://github.com/kframework/k/commit/c6eb2f5c9518170d7debcd4e0620e48cffb678d1", "message": "Revert changes to ktest-fail.mak", "committedDate": "2021-01-12T20:55:23Z", "type": "forcePushed"}, {"oid": "e99eb017e58d3764d305b4933c201dfe0e789c5b", "url": "https://github.com/kframework/k/commit/e99eb017e58d3764d305b4933c201dfe0e789c5b", "message": "Revert changes to ktest-fail.mak", "committedDate": "2021-01-12T20:57:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5MDk4Nw==", "url": "https://github.com/kframework/k/pull/1708#discussion_r556090987", "bodyText": "This is something which I don't understand.\nWhy is this call needed?", "author": "radumereuta", "createdAt": "2021-01-12T20:59:42Z", "path": "k-distribution/src/main/scripts/bin/kx", "diffHunk": "@@ -449,12 +463,13 @@ else\n       unescaped=$(</dev/stdin)\n       stdinText=$(awk 'BEGIN {for(n=0;n<256;n++)ord[sprintf(\"%c\",n)]=n} {text = text $0 ORS} END {split(text, chars, \"\"); for (i=1; i<=length(text); i++) { if (chars[i] == \"\\\"\") { printf(\"%s\", \"\\\\\\\"\") } else if (chars[i] == \"\\\\\") { printf(\"%s\", \"\\\\\\\\\") } else if (chars[i] == \"\\n\") { printf(\"%s\", \"\\\\n\") } else if (chars[i] == \"\\t\") { printf(\"%s\", \"\\\\t\") } else if (chars[i] == \"\\r\") { printf(\"%s\", \"\\\\r\") } else if (chars[i] == \"\\f\") { printf(\"%s\", \"\\\\f\") } else if (ord[chars[i]] >= 32 && ord[chars[i]] < 127) { printf(\"%s\", chars[i]) } else { printf(\"\\\\x%02x\", ord[chars[i]]) } } }' <<< \"$unescaped\")\n     fi\n-    stdinFile=\"$(mktemp tmp.stdin.XXXXXXXXXX)\"\n+    stdinFile=\"$(mktemp ${tempDir}/tmp.stdin.XXXXXXXXXX)\"\n     tempFiles+=(\"$stdinFile\")\n     printf '\\dv{SortString{}}(\\\"%s\\\")\\n' \"$stdinText\" > \"$stdinFile\"\n-    configVars=\"$configVars -c STDIN $stdinFile String korefile\"\n+    configVars=\"$configVars -c STDIN $(basename $stdinFile) String korefile\"\n   fi\n-  execute llvm-krun $configVars -d \"$kompiledDir\" $flags --dry-run -o \"$input_file\"\n+  # llvm-krun creates temp files in the cwd so execute it in $tempDir instead\n+  (cd $tempDir; execute llvm-krun $configVars -d \"../$kompiledDir\" $flags --dry-run -o \"$(basename $input_file)\")", "originalCommit": "e99eb017e58d3764d305b4933c201dfe0e789c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcyMDQ2Nw==", "url": "https://github.com/kframework/k/pull/1708#discussion_r556720467", "bodyText": "Uh, it creates the initial configuration that gets passed to the interpreter? It's a very important step.", "author": "dwightguth", "createdAt": "2021-01-13T17:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5MDk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcxNzYwOA==", "url": "https://github.com/kframework/k/pull/1708#discussion_r556717608", "bodyText": "let's not use find for this. Find is recursive and likely to take longer when you can probably just use a glob.", "author": "dwightguth", "createdAt": "2021-01-13T17:51:55Z", "path": "k-distribution/src/main/scripts/bin/kx", "diffHunk": "@@ -403,36 +407,46 @@ if [ \"$outputFile\" = \"-\" ]; then\n   outputFile=/dev/stdout\n fi\n \n+# verify and parse config variables/cmd line parameters\n if $term; then\n   if [ -z \"${parser_PGM+unset}\" ]; then\n     execute kast -d \"$dir\" -m \"$mainModuleName\" \"$config_var_PGM\" -o kore > \"$input_file\"\n   else\n     execute $parser_PGM \"$config_var_PGM\" > \"$input_file\"\n   fi\n else\n+  for configVar in `find $kompiledDir -type f -name 'sort_*' | sed 's|.*sort_\\(.*\\).txt|\\1|'`; do", "originalCommit": "e99eb017e58d3764d305b4933c201dfe0e789c5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcxNzkzNg==", "url": "https://github.com/kframework/k/pull/1708#discussion_r556717936", "bodyText": "let's copy over the logic from my PR rather than this warning.", "author": "dwightguth", "createdAt": "2021-01-13T17:52:22Z", "path": "k-distribution/src/main/scripts/bin/kx", "diffHunk": "@@ -403,36 +407,46 @@ if [ \"$outputFile\" = \"-\" ]; then\n   outputFile=/dev/stdout\n fi\n \n+# verify and parse config variables/cmd line parameters\n if $term; then\n   if [ -z \"${parser_PGM+unset}\" ]; then\n     execute kast -d \"$dir\" -m \"$mainModuleName\" \"$config_var_PGM\" -o kore > \"$input_file\"\n   else\n     execute $parser_PGM \"$config_var_PGM\" > \"$input_file\"\n   fi\n else\n+  for configVar in `find $kompiledDir -type f -name 'sort_*' | sed 's|.*sort_\\(.*\\).txt|\\1|'`; do\n+    if [[ $configVar != \"IO\" && $configVar != \"STDIN\" && ! \"${params[@]}\" =~ \"$configVar\" ]]; then\n+      error \"Configuration variable missing: \\$$configVar. Use -c$configVar=<Value> in the command line to set.\"\n+    fi\n+  done\n   for name in \"${params[@]}\"; do\n     parser_name=\"parser_$name\"\n     config_name=\"config_var_$name\"\n-    tempFile=\"$(mktemp tmp.in.\"$name\".XXXXXXXXXX)\"\n+    tempFile=\"$(mktemp ${tempDir}/tmp.in.\"$name\".XXXXXXXXXX)\"\n     tempFiles+=(\"$tempFile\")\n-    sortName=`cat \"$kompiledDir\"/sort_\"$name\".txt`\n-    if [ -z \"${!parser_name+unset}\" ]; then\n-      if [ -f \"$kompiledDir/parser_$name\" ]; then\n-        parser=(\"$kompiledDir/parser_$name\")\n-      elif [ \"$name\" = \"PGM\" ]; then\n-        if $hasArgv; then\n-          parser=(kast -d \"$dir\" -o kore)\n+    if [ -f $kompiledDir\"/sort_\"$name\".txt\" ]; then\n+      sortName=`cat \"$kompiledDir\"/sort_\"$name\".txt`\n+      if [ -z \"${!parser_name+unset}\" ]; then\n+        if [ -f \"$kompiledDir/parser_$name\" ]; then\n+          parser=(\"$kompiledDir/parser_$name\")\n+        elif [ \"$name\" = \"PGM\" ]; then\n+          if $hasArgv; then\n+            parser=(kast -d \"$dir\" -o kore)\n+          else\n+            parser=(kast -d \"$dir\" -m \"$mainModuleName\" -o kore)\n+          fi\n         else\n           parser=(kast -d \"$dir\" -m \"$mainModuleName\" -o kore)\n         fi\n       else\n-        parser=(kast -d \"$dir\" -m \"$mainModuleName\" -o kore)\n+        parser=(\"${!parser_name}\")\n       fi\n+      execute \"${parser[@]}\" \"${!config_name}\" > \"$tempFile\"\n+      configVars=\"$configVars -c $name $(basename $tempFile) $sortName korefile\"\n     else\n-      parser=(\"${!parser_name}\")\n+      warning \"Command line variable $name not found in the configuration. Ignoring.\"", "originalCommit": "e99eb017e58d3764d305b4933c201dfe0e789c5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcyMTM1OQ==", "url": "https://github.com/kframework/k/pull/1708#discussion_r556721359", "bodyText": "please don't remove braces like this. I know it's not strictly necessary since there's only one statement inside the braces, but it's still bad code style.", "author": "dwightguth", "createdAt": "2021-01-13T17:57:23Z", "path": "kernel/src/main/java/org/kframework/krun/KRun.java", "diffHunk": "@@ -152,17 +153,22 @@ public static Rule parsePattern(FileUtil files, KExceptionManager kem, String pa\n \n     private K parseConfigVars(KRunOptions options, CompiledDefinition compiledDef) {\n         HashMap<KToken, K> output = new HashMap<>();\n+        scala.collection.Set<KToken> expectedConfigVars = new ConfigurationInfoFromModule(compiledDef.kompiledDefinition.mainModule()).configVars();\n         for (Map.Entry<String, Pair<String, String>> entry\n                 : options.configurationCreation.configVars(compiledDef.getParsedDefinition().mainModule().name(), files).entrySet()) {\n             String name = entry.getKey();\n-            String value = entry.getValue().getLeft();\n-            String parser = entry.getValue().getRight();\n             String configVarName = \"$\" + name;\n-            Sort sort = compiledDef.configurationVariableDefaultSorts.getOrDefault(configVarName, compiledDef.programStartSymbol);\n-            K configVar = externalParse(parser, value, sort, Source.apply(\"<command line: -c\" + name + \">\"), compiledDef);\n-            output.put(KToken(configVarName, Sorts.KConfigVar()), configVar);\n+            if (!expectedConfigVars.contains(KToken(configVarName, Sorts.KConfigVar())) && !name.equals(\"$STDIN\") && !name.equals(\"$IO\")) {\n+                kem.registerCompilerWarning(ExceptionType.INVALID_CONFIG_VAR, \"Command line variable \" + name + \" not found in the configuration. Ignoring.\");\n+            } else {\n+                String value = entry.getValue().getLeft();\n+                String parser = entry.getValue().getRight();\n+                Sort sort = compiledDef.configurationVariableDefaultSorts.getOrDefault(configVarName, compiledDef.programStartSymbol);\n+                K configVar = externalParse(parser, value, sort, Source.apply(\"<command line: -c\" + name + \">\"), compiledDef);\n+                output.put(KToken(configVarName, Sorts.KConfigVar()), configVar);\n+            }\n         }\n-        if (compiledDef.kompiledDefinition.mainModule().allSorts().contains(Sorts.String())) {\n+        if (compiledDef.kompiledDefinition.mainModule().allSorts().contains(Sorts.String()))", "originalCommit": "e99eb017e58d3764d305b4933c201dfe0e789c5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcyMTYwMQ==", "url": "https://github.com/kframework/k/pull/1708#discussion_r556721601", "bodyText": "same with these", "author": "dwightguth", "createdAt": "2021-01-13T17:57:42Z", "path": "kernel/src/main/java/org/kframework/krun/KRun.java", "diffHunk": "@@ -171,32 +177,12 @@ private K parseConfigVars(KRunOptions options, CompiledDefinition compiledDef) {\n                 output.put(KToken(\"$STDIN\", Sorts.KConfigVar()), KToken(StringUtil.enquoteKString(stdin), Sorts.String()));\n                 output.put(KToken(\"$IO\", Sorts.KConfigVar()), KToken(\"\\\"off\\\"\", Sorts.String()));\n             }\n-        }\n-        if (options.global.debug()) {\n-            // on the critical path, so don't perform this check because it's slow unless we're debugging.\n-            checkConfigVars(output.keySet(), compiledDef);\n-        }\n+        for (KToken defConfigVar : mutable(expectedConfigVars))", "originalCommit": "e99eb017e58d3764d305b4933c201dfe0e789c5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0da00b6653737ce1996868bbf675a7063f846ef9", "url": "https://github.com/kframework/k/commit/0da00b6653737ce1996868bbf675a7063f846ef9", "message": "Warnings and errors for cmd line vars", "committedDate": "2021-01-14T18:16:57Z", "type": "commit"}, {"oid": "a0b259e1716259acccd11a2fd379e22e370ca1f0", "url": "https://github.com/kframework/k/commit/a0b259e1716259acccd11a2fd379e22e370ca1f0", "message": "kx reports missing configVar and warn extra configVar", "committedDate": "2021-01-14T18:16:57Z", "type": "commit"}, {"oid": "f8289ed938bbcd59ee0d6a08288e51f9f996d8c6", "url": "https://github.com/kframework/k/commit/f8289ed938bbcd59ee0d6a08288e51f9f996d8c6", "message": "kx prints to stderr", "committedDate": "2021-01-14T18:16:57Z", "type": "commit"}, {"oid": "1880b73fb599366d032dfd46d01d57325b1f076a", "url": "https://github.com/kframework/k/commit/1880b73fb599366d032dfd46d01d57325b1f076a", "message": "Put all temp files in only one dir\n\nTODO: multiple tests for warnings and errors kx and krun", "committedDate": "2021-01-14T18:16:57Z", "type": "commit"}, {"oid": "91c3c00002a55e8c272df1712703705c220c0b4d", "url": "https://github.com/kframework/k/commit/91c3c00002a55e8c272df1712703705c220c0b4d", "message": "IO is an exception", "committedDate": "2021-01-14T18:16:57Z", "type": "commit"}, {"oid": "45f773811d10083f5e3ecfe557151a9e70ddefd2", "url": "https://github.com/kframework/k/commit/45f773811d10083f5e3ecfe557151a9e70ddefd2", "message": "STDIN needs special treatment too", "committedDate": "2021-01-14T18:16:57Z", "type": "commit"}, {"oid": "a312ecf3a54b0d5a1074592b39d24a4dde343f17", "url": "https://github.com/kframework/k/commit/a312ecf3a54b0d5a1074592b39d24a4dde343f17", "message": "Revert changes to ktest-fail.mak", "committedDate": "2021-01-14T18:16:57Z", "type": "commit"}, {"oid": "0dfeb76e4c30004c12f19ed9762801637d3b45ef", "url": "https://github.com/kframework/k/commit/0dfeb76e4c30004c12f19ed9762801637d3b45ef", "message": "PR comments", "committedDate": "2021-01-14T20:16:11Z", "type": "commit"}, {"oid": "0dfeb76e4c30004c12f19ed9762801637d3b45ef", "url": "https://github.com/kframework/k/commit/0dfeb76e4c30004c12f19ed9762801637d3b45ef", "message": "PR comments", "committedDate": "2021-01-14T20:16:11Z", "type": "forcePushed"}]}