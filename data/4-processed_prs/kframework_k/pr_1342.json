{"pr_number": 1342, "pr_title": "Updates to pyk library for processing rule merges", "pr_createdAt": "2020-06-14T21:12:06Z", "pr_url": "https://github.com/kframework/k/pull/1342", "timeline": [{"oid": "babdc1ada80ba5036a000def1e2b951ae322581a", "url": "https://github.com/kframework/k/commit/babdc1ada80ba5036a000def1e2b951ae322581a", "message": "pyk/__init__.py: give _teeProcessStdout a timeout option", "committedDate": "2020-06-13T05:11:32Z", "type": "commit"}, {"oid": "927c7b90b3bd662b9a0c4aa6e0fb4793888e01a0", "url": "https://github.com/kframework/k/commit/927c7b90b3bd662b9a0c4aa6e0fb4793888e01a0", "message": "pyk/kastManip: better simplifying of side-conditions in minimizeRule", "committedDate": "2020-06-14T23:23:47Z", "type": "commit"}, {"oid": "9204a87256c8c33b4b9ae4bf237e14fa932c1ff0", "url": "https://github.com/kframework/k/commit/9204a87256c8c33b4b9ae4bf237e14fa932c1ff0", "message": "pyk/__init__.py: formatting", "committedDate": "2020-06-14T23:50:09Z", "type": "commit"}, {"oid": "af24036c3cacaeb6b6e5cc7085574a7f771de7a7", "url": "https://github.com/kframework/k/commit/af24036c3cacaeb6b6e5cc7085574a7f771de7a7", "message": "pyk/kastManip: typo", "committedDate": "2020-06-15T00:32:45Z", "type": "commit"}, {"oid": "2f547e96e2ebe43d2ee304f21fc27eb360c96dda", "url": "https://github.com/kframework/k/commit/2f547e96e2ebe43d2ee304f21fc27eb360c96dda", "message": "pyk/kastManip: more boolean simplifications", "committedDate": "2020-06-15T01:15:03Z", "type": "commit"}, {"oid": "9c799d3c176ca2e5ec3e6ee5ab0f0f2d7413a6ef", "url": "https://github.com/kframework/k/commit/9c799d3c176ca2e5ec3e6ee5ab0f0f2d7413a6ef", "message": "pyk/kastManip: remove useless requires/ensures clauses", "committedDate": "2020-06-15T01:15:18Z", "type": "commit"}, {"oid": "753be73e059b70d9beb0c28afa9915028299b4ba", "url": "https://github.com/kframework/k/commit/753be73e059b70d9beb0c28afa9915028299b4ba", "message": "pyk/kastManip: integer simplification rules", "committedDate": "2020-06-15T01:19:42Z", "type": "commit"}, {"oid": "2e365dfbba5efb744eb12ad63b381ce63c261092", "url": "https://github.com/kframework/k/commit/2e365dfbba5efb744eb12ad63b381ce63c261092", "message": "pyk/kastManip: formatting", "committedDate": "2020-06-15T02:58:33Z", "type": "commit"}, {"oid": "993ce648c37c8197d11af0951e10eeebddffd67c", "url": "https://github.com/kframework/k/commit/993ce648c37c8197d11af0951e10eeebddffd67c", "message": "pyk/kastManip: push rewrites down through ksequences", "committedDate": "2020-06-15T02:59:05Z", "type": "commit"}, {"oid": "7990884583dfe50b9723b02ccdf58f84ede8d657", "url": "https://github.com/kframework/k/commit/7990884583dfe50b9723b02ccdf58f84ede8d657", "message": "pyk/kastManip: check for None before simplifying rules/predicates", "committedDate": "2020-06-15T05:51:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ==", "url": "https://github.com/kframework/k/pull/1342#discussion_r441080715", "bodyText": "Is this really true? I thought the # values were used for matching logic operators and terms, not for the regular boolean operators.", "author": "hjorthjort", "createdAt": "2020-06-16T19:08:32Z", "path": "k-distribution/src/main/scripts/lib/pyk/kastManip.py", "diffHunk": "@@ -84,27 +84,41 @@ def rewriteAnywhereWith(rule, pattern):\n     return traverseBottomUp(pattern, lambda p: rewriteWith(rule, p))\n \n def mlPredToBool(k):\n-    klabelMap = { \"#And\"    : \"_andBool_\"\n-                , \"#Or\"     : \"_orBool_\"\n-                , \"#Not\"    : \"notBool_\"\n-                , \"#Equals\" : '_==K_'\n-                }\n-    return replaceKLabels(k, klabelMap)\n+    if k is None:\n+        return None\n+    mlPredToBoolRules = [ (KApply('#True', [])  , KToken('true', 'Bool'))\n+                        , (KApply('#False', []) , KToken('false', 'Bool'))\n+                        , (KApply('#And'    , [KVariable('#V1'), KVariable('#V2')]) , KApply('_andBool_' , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Or'     , [KVariable('#V1'), KVariable('#V2')]) , KApply('_orBool_'  , [KVariable('#V1'), KVariable('#V2')]))\n+                        , (KApply('#Not'    , [KVariable('#V1')])                   , KApply('notBool_'  , [KVariable('#V1')]))\n+                        , (KApply('#Equals' , [KVariable('#V1'), KVariable('#V2')]) , KApply('_==K_'     , [KVariable('#V1'), KVariable('#V2')]))", "originalCommit": "7990884583dfe50b9723b02ccdf58f84ede8d657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5MTY0Ng==", "url": "https://github.com/kframework/k/pull/1342#discussion_r441091646", "bodyText": "No, it's technically not true, #Equals is just #Equals, not _==K_. But _==K_ usually gets translated to #Equals for the Haskell backend, so this just translates it back for printing out.\nWe could make it more specific, but saying that #Equals is only translated back for some specific cases, but it's a lot of cases that we would have to list.", "author": "ehildenb", "createdAt": "2020-06-16T19:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NTE5Mg==", "url": "https://github.com/kframework/k/pull/1342#discussion_r441095192", "bodyText": "My only worry is that we'll get a rule that doesn't work because #And and andBool work differently, for example, where one expresses matching over sets. And if an #And is introduced for ML specific purposes it would be very wrong to translate it back. So I'm a bit skeptical. I would rather have it behind a flag or option or something, since it's a little bit dangerous I don't think it should be the default.", "author": "hjorthjort", "createdAt": "2020-06-16T19:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NjcxOA==", "url": "https://github.com/kframework/k/pull/1342#discussion_r441096718", "bodyText": "I can rename the function mlPredToBool => mlPredToBoolUnsafe if you want?", "author": "ehildenb", "createdAt": "2020-06-16T19:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwMTA4MA==", "url": "https://github.com/kframework/k/pull/1342#discussion_r441101080", "bodyText": "Sure, that would do it. And maybe add a docstring explaining why it's unsafe: all boolean operators translate to the ML operators, but not vice versa.", "author": "hjorthjort", "createdAt": "2020-06-16T19:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNTU1Mg==", "url": "https://github.com/kframework/k/pull/1342#discussion_r441115552", "bodyText": "Done, I've made the renaming and some documentation.", "author": "ehildenb", "createdAt": "2020-06-16T20:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MDcxNQ=="}], "type": "inlineReview"}, {"oid": "2ab507f8702debd6d466f39c91c5dbcc78c4a182", "url": "https://github.com/kframework/k/commit/2ab507f8702debd6d466f39c91c5dbcc78c4a182", "message": "pyk/kastManip: mlPredToBool => unsafeMlPredToBool", "committedDate": "2020-06-16T20:15:25Z", "type": "commit"}, {"oid": "1184ec0e66a92c646be57de920f87a70a529813f", "url": "https://github.com/kframework/k/commit/1184ec0e66a92c646be57de920f87a70a529813f", "message": "Merge branch 'master' into pyk-updates", "committedDate": "2020-06-16T21:22:23Z", "type": "commit"}]}