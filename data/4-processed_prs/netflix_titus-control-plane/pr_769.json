{"pr_number": 769, "pr_title": "process C* resultsets outside of C* driver threads", "pr_createdAt": "2020-02-13T20:25:39Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/769", "timeline": [{"oid": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72", "url": "https://github.com/Netflix/titus-control-plane/commit/ed09ad6ea1ba5ef01b0066db2396dd085c193d72", "message": "process C* resultsets outside of C* driver threads", "committedDate": "2020-02-13T20:21:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTk3OA==", "url": "https://github.com/Netflix/titus-control-plane/pull/769#discussion_r379609978", "bodyText": "Minor - but potentially a common 'fetchAllPages' method that takes scheduler as a parameter could simplify both of these test case code", "author": "amit-git", "createdAt": "2020-02-14T19:38:46Z", "path": "titus-ext/cassandra/src/test/java/com/netflix/titus/ext/cassandra/store/CassStoreHelperTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.ext.cassandra.store;\n+\n+import java.util.Arrays;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.datastax.driver.core.PreparedStatement;\n+import com.datastax.driver.core.ResultSet;\n+import com.datastax.driver.core.Session;\n+import org.cassandraunit.CassandraCQLUnit;\n+import org.cassandraunit.dataset.cql.ClassPathCQLDataSet;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import static com.datastax.driver.core.querybuilder.QueryBuilder.bindMarker;\n+import static com.datastax.driver.core.querybuilder.QueryBuilder.insertInto;\n+import static com.datastax.driver.core.querybuilder.QueryBuilder.select;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CassStoreHelperTest {\n+\n+    private static final long STARTUP_TIMEOUT = 30_000L;\n+\n+    /**\n+     * As Cassandra uses memory mapped files there are sometimes issues with virtual disks storing the project files.\n+     * To solve this issue, we relocate the default embedded Cassandra folder to /var/tmp/embeddedCassandra.\n+     */\n+    private static final String CONFIGURATION_FILE_NAME = \"relocated-cassandra.yaml\";\n+\n+    @Rule\n+    public CassandraCQLUnit cassandraCQLUnit = new CassandraCQLUnit(\n+            new ClassPathCQLDataSet(\"tables.cql\", \"titus_integration_tests\"),\n+            CONFIGURATION_FILE_NAME,\n+            STARTUP_TIMEOUT\n+    );\n+\n+    @Test\n+    public void paginatedResultSetCanBeFetchedAsync() {\n+        int numberOfRecords = 500;\n+        int numberOfPages = 10;\n+        Session session = cassandraCQLUnit.getSession();\n+        PreparedStatement insertStmt = session.prepare(insertInto(\"app_scale_jobs\").values(\n+                Arrays.asList(\"job_id\", \"ref_id\"),\n+                Arrays.asList(bindMarker(), bindMarker())\n+        ));\n+\n+        for (int i = 0; i < numberOfRecords; i++) {\n+            ResultSet resultSet = session.execute(insertStmt.bind(\"job-\" + i, UUID.randomUUID()));\n+            assertThat(resultSet.wasApplied()).isTrue();\n+        }\n+\n+        PreparedStatement loadStmt = session.prepare(select(\"job_id\", \"ref_id\").from(\"app_scale_jobs\"));\n+        Observable<ResultSet> results = new CassStoreHelper(session, Schedulers.io()).execute(loadStmt.bind()\n+                // force pagination, and pages to be fetched on demand as the ResultSet is iterated on\n+                .setFetchSize(numberOfRecords / numberOfPages));\n+\n+        results.doOnNext(rows -> rows.forEach(row ->\n+                assertThat(row.getString(0)).startsWith(\"job-\"))\n+        ).toCompletable().await(1, TimeUnit.MINUTES);\n+    }\n+\n+    @Test(expected = IllegalStateException.class /* the datastax driver complains that page fetching will cause a deadlock */ )\n+    public void paginatedResultInCassandraThreadsThrowsException() {", "originalCommit": "ed09ad6ea1ba5ef01b0066db2396dd085c193d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMjIyNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/769#discussion_r379632225", "bodyText": "Minor - but potentially a common 'fetchAllPages' method that takes scheduler as a parameter could simplify both of these test case code\n\nThat would require pre-loading all rows in memory, which iterating on resultsets is trying to avoid. I can see a callback or stream/reactive based API for it (e.g. walkAllPages(Consumer<T> processor)), but I didn't see a need to overcomplicate ATM", "author": "fabiokung", "createdAt": "2020-02-14T20:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMjkwMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/769#discussion_r379632900", "bodyText": "nvm, I see what you mean. I agree code duplication on both test cases could be reduced, next time.", "author": "fabiokung", "createdAt": "2020-02-14T20:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTk3OA=="}], "type": "inlineReview"}]}