{"pr_number": 850, "pr_title": "Feature/kube informer sync", "pr_createdAt": "2020-05-21T19:58:07Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/850", "timeline": [{"oid": "a642f9497bc1c8b92a6b39093d9202b8443af51e", "url": "https://github.com/Netflix/titus-control-plane/commit/a642f9497bc1c8b92a6b39093d9202b8443af51e", "message": "Move KubeApiClients to its own package", "committedDate": "2020-05-21T18:23:24Z", "type": "commit"}, {"oid": "400aa55ac44f367de3f2d364c58354d8ae147f7a", "url": "https://github.com/Netflix/titus-control-plane/commit/400aa55ac44f367de3f2d364c58354d8ae147f7a", "message": "Add KubeAPI informer sync metric", "committedDate": "2020-05-21T19:55:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2ODEwMw==", "url": "https://github.com/Netflix/titus-control-plane/pull/850#discussion_r428968103", "bodyText": "use ExecutorsExt.instrumentedCachedThreadPool(...) to get thread pool metrics", "author": "fabiokung", "createdAt": "2020-05-21T23:30:35Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/client/KubeApiClients.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.titus.master.mesos.kubeapiserver.client;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.base.Strings;\n+import com.netflix.titus.common.runtime.TitusRuntime;\n+import io.kubernetes.client.informer.SharedInformerFactory;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.util.Config;\n+import okhttp3.Request;\n+\n+public class KubeApiClients {\n+\n+    public static final Pattern UUID_PATTERN = Pattern.compile(\"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\");\n+\n+    public static final Function<Request, String> DEFAULT_URI_MAPPER = r -> {\n+        String path = '/' + String.join(\"/\", r.url().pathSegments());\n+        Matcher matcher = UUID_PATTERN.matcher(path);\n+        return matcher.replaceAll(\"\");\n+    };\n+\n+    public static ApiClient createApiClient(String kubeApiServerUrl,\n+                                            String kubeConfigPath,\n+                                            String metricsNamePrefix,\n+                                            TitusRuntime titusRuntime,\n+                                            long readTimeoutMs) {\n+        return createApiClient(kubeApiServerUrl, kubeConfigPath, metricsNamePrefix, titusRuntime, DEFAULT_URI_MAPPER, readTimeoutMs);\n+    }\n+\n+    public static ApiClient createApiClient(String kubeApiServerUrl,\n+                                            String kubeConfigPath,\n+                                            String metricsNamePrefix,\n+                                            TitusRuntime titusRuntime,\n+                                            Function<Request, String> uriMapper,\n+                                            long readTimeoutMs) {\n+        OkHttpMetricsInterceptor metricsInterceptor = new OkHttpMetricsInterceptor(metricsNamePrefix, titusRuntime.getRegistry(),\n+                titusRuntime.getClock(), uriMapper);\n+\n+        ApiClient client;\n+        if (Strings.isNullOrEmpty(kubeApiServerUrl)) {\n+            try {\n+                client = Config.fromConfig(kubeConfigPath);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        } else {\n+            client = Config.fromUrl(kubeApiServerUrl);\n+        }\n+\n+        client.setHttpClient(\n+                client.getHttpClient().newBuilder()\n+                        .addInterceptor(metricsInterceptor)\n+                        .readTimeout(readTimeoutMs, TimeUnit.SECONDS)\n+                        .build()\n+        );\n+        return client;\n+    }\n+\n+    public static SharedInformerFactory createSharedInformerFactory(String threadNamePrefix, ApiClient apiClient) {\n+        AtomicLong nextThreadNum = new AtomicLong(0);\n+        return new SharedInformerFactory(apiClient, Executors.newCachedThreadPool(runnable -> {", "originalCommit": "400aa55ac44f367de3f2d364c58354d8ae147f7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7cddc2a106fa9f4d7874abf5099567a0f5ced17e", "url": "https://github.com/Netflix/titus-control-plane/commit/7cddc2a106fa9f4d7874abf5099567a0f5ced17e", "message": "Code review updates", "committedDate": "2020-05-26T17:18:11Z", "type": "commit"}]}