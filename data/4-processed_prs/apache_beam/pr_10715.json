{"pr_number": 10715, "pr_title": "[BEAM-9179] Cleanup ZetaSQLQueryPlanner and ExpressionConverter code", "pr_createdAt": "2020-01-29T19:50:10Z", "pr_url": "https://github.com/apache/beam/pull/10715", "timeline": [{"oid": "cb02468bbe216c307c800561710b992ef86a90fe", "url": "https://github.com/apache/beam/commit/cb02468bbe216c307c800561710b992ef86a90fe", "message": "Cleanup ZetaSQLQueryPlanner and ExpressionConverter code", "committedDate": "2020-01-29T19:46:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5OTI5OA==", "url": "https://github.com/apache/beam/pull/10715#discussion_r372599298", "bodyText": "There are problems with missing ZetaSQL functionality, so we might have to remove this line: #10707", "author": "ibzib", "createdAt": "2020-01-29T19:57:06Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -1002,27 +1001,27 @@ private static boolean isZetaSQLCast(TypeKind fromType, TypeKind toType) {\n   }\n \n   private RexNode convertResolvedParameter(ResolvedParameter parameter) {\n-    if (queryParams.getKind() == Kind.NAMED) {\n-      Map<String, Value> queryParameterMap = (Map<String, Value>) queryParams.named();\n-      Value value = queryParameterMap.get(parameter.getName());\n-      Preconditions.checkState(\n-          parameter.getType().equals(value.getType()),\n-          String.format(\n-              \"Expected resolved parameter %s to have type %s, but it has type %s\",\n-              parameter.getName(), value.getType(), parameter.getType()));\n-      return convertValueToRexNode(value.getType(), value);\n-    } else if (queryParams.getKind() == Kind.POSITIONAL) {\n-      List<Value> queryParameterList = (List<Value>) queryParams.positional();\n-      // parameter is 1-indexed, while parameter list is 0-indexed.\n-      Value value = queryParameterList.get((int) parameter.getPosition() - 1);\n-      Preconditions.checkState(\n-          parameter.getType().equals(value.getType()),\n-          String.format(\n-              \"Expected resolved parameter %d to have type %s, but it has type %s\",\n-              parameter.getPosition(), value.getType(), parameter.getType()));\n-      return convertValueToRexNode(value.getType(), value);\n+    Value value;\n+    String identifier;\n+    switch (queryParams.getKind()) {\n+      case NAMED:\n+        value = ((Map<String, Value>) queryParams.named()).get(parameter.getName());\n+        identifier = parameter.getName();\n+        break;\n+      case POSITIONAL:\n+        // parameter is 1-indexed, while parameter list is 0-indexed.\n+        value = ((List<Value>) queryParams.positional()).get((int) parameter.getPosition() - 1);\n+        identifier = Long.toString(parameter.getPosition());\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Found unexpected parameter \" + parameter);\n     }\n-    throw new IllegalArgumentException(\"Found unexpected parameter \" + parameter);\n+    Preconditions.checkState(\n+        parameter.getType().equals(value.getType()),\n+        String.format(\n+            \"Expected resolved parameter %s to have type %s, but it has type %s\",", "originalCommit": "cb02468bbe216c307c800561710b992ef86a90fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}