{"pr_number": 11838, "pr_title": "[BEAM-9322] Modify the TestStream to output a dict when no output_tags are specified", "pr_createdAt": "2020-05-27T21:42:39Z", "pr_url": "https://github.com/apache/beam/pull/11838", "timeline": [{"oid": "846748076b33dcf238eb71c30a4dc962f66b6985", "url": "https://github.com/apache/beam/commit/846748076b33dcf238eb71c30a4dc962f66b6985", "message": "Modify the streaming cache to always have multiple outputs\n\nChange-Id: I6a8eba4e323bf0fff318a56e44e512916c06266f", "committedDate": "2020-05-27T21:32:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2NTk2OA==", "url": "https://github.com/apache/beam/pull/11838#discussion_r431465968", "bodyText": "Rather than introduce a sentinel label, how about returning a dict from expand iff output_tags was manually specified (or, alternatively, something other than {None})?", "author": "robertwb", "createdAt": "2020-05-27T21:56:47Z", "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -304,6 +304,18 @@ def read(self, *labels):\n       return iter([]), -1\n     return StreamingCache.Reader([header], [reader]).read(), 1\n \n+  @staticmethod\n+  def sentinel_label():", "originalCommit": "846748076b33dcf238eb71c30a4dc962f66b6985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3MTYwOQ==", "url": "https://github.com/apache/beam/pull/11838#discussion_r431471609", "bodyText": "Yeah that can work, I like that because it keeps the same semantics. I'll go with the {None} alternative because the output_tags are always manually specified in the from_runner_api_parameter method.", "author": "rohdesamuel", "createdAt": "2020-05-27T22:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2NTk2OA=="}], "type": "inlineReview"}, {"oid": "9b6c737ce21fce1ab1a377ddd5452e13b916df17", "url": "https://github.com/apache/beam/commit/9b6c737ce21fce1ab1a377ddd5452e13b916df17", "message": "Change TestStream to output a dict if the output_tags are {None}\n\nChange-Id: I0f755a3d39adfbb83b4056a6cfa857fa78aa230a", "committedDate": "2020-05-27T22:11:14Z", "type": "commit"}, {"oid": "d644a973f9f7d747518c646637e4a1bcaae9dbe1", "url": "https://github.com/apache/beam/commit/d644a973f9f7d747518c646637e4a1bcaae9dbe1", "message": "tox\n\nChange-Id: Icd1a740eab640c66a7cc3c4a5725c26e7e592a09", "committedDate": "2020-05-27T22:12:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTQ5NQ==", "url": "https://github.com/apache/beam/pull/11838#discussion_r431469495", "bodyText": "This is a little hard to read.\nIsn't a label l a str, so a sub_l is a character of that str?\nI suppose if not [sub_l for ...] evaluates to True when the [sub_l for ...] is empty.\nAnd the emptiness of [sub_l for ...] is based on whether the sentinel_label exists in the sub_l? This is where I get confused.", "author": "KevinGG", "createdAt": "2020-05-27T22:05:12Z", "path": "sdks/python/apache_beam/runners/interactive/caching/streaming_cache.py", "diffHunk": "@@ -315,6 +327,7 @@ def read_multiple(self, labels):\n         StreamingCacheSource(self._cache_dir, l,\n                              self._is_cache_complete).read(tail=True)\n         for l in labels\n+        if not [sub_l for sub_l in l if self.sentinel_label() in sub_l]", "originalCommit": "846748076b33dcf238eb71c30a4dc962f66b6985", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4MDQ2Ng==", "url": "https://github.com/apache/beam/pull/11838#discussion_r431480466", "bodyText": "Or if a label l is a list of str and *labels is a list of list of str, then this makes sense.", "author": "KevinGG", "createdAt": "2020-05-27T22:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA0MTYyOQ==", "url": "https://github.com/apache/beam/pull/11838#discussion_r432041629", "bodyText": "Sorry, I changed the PR and it looks like your comment is out of date. Can you PTAL?", "author": "rohdesamuel", "createdAt": "2020-05-28T18:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2OTQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMjUyMw==", "url": "https://github.com/apache/beam/pull/11838#discussion_r437702523", "bodyText": "If the user explicitly sets the output tags to {None}, they might be expecting a dict. (Specifically, they might get a set from elsewhere, and set the output tags from that set, and it would be awkward to have to check that set to determine how to interpret the result. So in this case I would do\nif not self.output_tags:\n  return pvalue.PCollection(self.pipeline, is_bounded=False)\nelse:\n  return { ... for tag in self.output_tags}", "author": "robertwb", "createdAt": "2020-06-09T20:36:41Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -291,10 +291,10 @@ def expand(self, pbegin):\n     assert isinstance(pbegin, pvalue.PBegin)\n     self.pipeline = pbegin.pipeline\n     if not self.output_tags:\n-      self.output_tags = set([None])\n+      self.output_tags = {None}", "originalCommit": "d644a973f9f7d747518c646637e4a1bcaae9dbe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NDk4Mw==", "url": "https://github.com/apache/beam/pull/11838#discussion_r437784983", "bodyText": "This is a little harder to implement, mainly because the TestStream retrieves its output_tags from the keys of the PTransform payload holding it. This means that output_tags = None and output_tags = {None} look the same to the PTransform payload outputs as a map with a single key being None. When a TestStream is reconstructed, even if the original output_tags was unset, it will be constructed with output_tags = {None}.\nI think the best we can do is to treat {None} and None the same way.", "author": "rohdesamuel", "createdAt": "2020-06-09T23:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMjUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NzkwNg==", "url": "https://github.com/apache/beam/pull/11838#discussion_r437787906", "bodyText": "OK, in that case I'm fine with this.", "author": "robertwb", "createdAt": "2020-06-10T00:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMjUyMw=="}], "type": "inlineReview"}]}