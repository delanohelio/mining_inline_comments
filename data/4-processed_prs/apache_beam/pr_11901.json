{"pr_number": 11901, "pr_title": "Prototype schema-inferring Row constructor.", "pr_createdAt": "2020-06-02T23:13:22Z", "pr_url": "https://github.com/apache/beam/pull/11901", "timeline": [{"oid": "2be2669fdf5540c13ee9aa8e5f04901320719bed", "url": "https://github.com/apache/beam/commit/2be2669fdf5540c13ee9aa8e5f04901320719bed", "message": "Prototype schema-inferring Row constructor.", "committedDate": "2020-06-02T23:12:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTQ3MA==", "url": "https://github.com/apache/beam/pull/11901#discussion_r434245470", "bodyText": "It looks like this is an unrelated change that got pulled in?", "author": "TheNeuralBit", "createdAt": "2020-06-03T00:29:00Z", "path": "sdks/python/apache_beam/typehints/opcodes.py", "diffHunk": "@@ -120,7 +120,7 @@ def get_iter(state, unused_arg):\n \n def symmetric_binary_op(state, unused_arg):\n   # TODO(robertwb): This may not be entirely correct...\n-  b, a = state.stack.pop(), state.stack.pop()\n+  b, a = Const.unwrap(state.stack.pop()), Const.unwrap(state.stack.pop())", "originalCommit": "2be2669fdf5540c13ee9aa8e5f04901320719bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDQ2NA==", "url": "https://github.com/apache/beam/pull/11901#discussion_r434734464", "bodyText": "This was needed for my test. (It now correctly infers x + 1 for ints x.) I thought it small enough to not merit a new PR.", "author": "robertwb", "createdAt": "2020-06-03T17:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA==", "url": "https://github.com/apache/beam/pull/11901#discussion_r434246368", "bodyText": "This is definitely useful for SQL but I don't think it should be SQL-specific. What about putting it in apache_beam/typehints/schemas.py?", "author": "TheNeuralBit", "createdAt": "2020-06-03T00:32:12Z", "path": "sdks/python/apache_beam/transforms/sql.py", "diffHunk": "@@ -74,3 +77,8 @@ def __init__(self, query, dialect=None):\n             SqlTransformSchema(query=query, dialect=dialect)),\n         BeamJarExpansionService(\n             ':sdks:java:extensions:sql:expansion-service:shadowJar'))\n+\n+\n+class Row(object):\n+  def __init__(self, **kwargs):\n+    self.__dict__.update(kwargs)", "originalCommit": "2be2669fdf5540c13ee9aa8e5f04901320719bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDc4NA==", "url": "https://github.com/apache/beam/pull/11901#discussion_r434734784", "bodyText": "I'd rather users not be importing stuff from typehints. Is there a better place?", "author": "robertwb", "createdAt": "2020-06-03T17:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MjE3OQ==", "url": "https://github.com/apache/beam/pull/11901#discussion_r434772179", "bodyText": "Hm yeah that makes sense. Maybe we need a new file or package for user-facing schema tools?", "author": "TheNeuralBit", "createdAt": "2020-06-03T18:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDUzOA==", "url": "https://github.com/apache/beam/pull/11901#discussion_r437080538", "bodyText": "Is there going to be any other top-level schema stuff that it would make sense for this to be a sibling to? Otherwise, perhaps I could just put at a top level, and one would use it as apache_beam.Row.", "author": "robertwb", "createdAt": "2020-06-09T01:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNjExNQ==", "url": "https://github.com/apache/beam/pull/11901#discussion_r437536115", "bodyText": "Mm nothing comes to mind. I suppose it could just be apache_beam.Row for now, and we can alias it if we add a schema package with other top-level schema stuff later.", "author": "TheNeuralBit", "createdAt": "2020-06-09T15:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0OTU0MA==", "url": "https://github.com/apache/beam/pull/11901#discussion_r437749540", "bodyText": "Moved to pvalue (imported to the top level), like TaggedOutput.", "author": "robertwb", "createdAt": "2020-06-09T22:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NjM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzYxOA==", "url": "https://github.com/apache/beam/pull/11901#discussion_r437533618", "bodyText": "Could you move this inference to typehints.schemas alongside named_tuple_to_schema? I have a WIP PR for batching schema'd PCollections that are inputs to Dataframes and I should re-use this logic there.", "author": "TheNeuralBit", "createdAt": "2020-06-09T15:45:21Z", "path": "sdks/python/apache_beam/coders/row_coder.py", "diffHunk": "@@ -82,8 +86,19 @@ def from_runner_api_parameter(schema, components, unused_context):\n     return RowCoder(schema)\n \n   @staticmethod\n-  def from_type_hint(named_tuple_type, registry):\n-    return RowCoder(named_tuple_to_schema(named_tuple_type))\n+  def from_type_hint(type_hint, registry):\n+    if isinstance(type_hint, row_type.RowTypeConstraint):\n+      schema = schema_pb2.Schema(\n+          fields=[\n+              schema_pb2.Field(\n+                  name=name,\n+                  type=typing_to_runner_api(type))\n+              for (name, type) in type_hint._fields\n+          ],\n+          id=str(uuid.uuid4()))", "originalCommit": "2be2669fdf5540c13ee9aa8e5f04901320719bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc0OTQyNQ==", "url": "https://github.com/apache/beam/pull/11901#discussion_r437749425", "bodyText": "Done.", "author": "robertwb", "createdAt": "2020-06-09T22:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzYxOA=="}], "type": "inlineReview"}, {"oid": "f2333b00137e4ca87a3778647344322ea480bafa", "url": "https://github.com/apache/beam/commit/f2333b00137e4ca87a3778647344322ea480bafa", "message": "lint", "committedDate": "2020-06-09T17:21:50Z", "type": "commit"}, {"oid": "24891dcddfc2fc3fb6a5f9065947ee9ba767018b", "url": "https://github.com/apache/beam/commit/24891dcddfc2fc3fb6a5f9065947ee9ba767018b", "message": "Move Row out of sql.", "committedDate": "2020-06-09T17:36:00Z", "type": "commit"}, {"oid": "5fd42b376d61b8ead9167fd966367ffc07e417ce", "url": "https://github.com/apache/beam/commit/5fd42b376d61b8ead9167fd966367ffc07e417ce", "message": "move schema building", "committedDate": "2020-06-09T17:45:40Z", "type": "commit"}, {"oid": "98ebb71605165c114c64cbfd81ec5d3bfb5ac838", "url": "https://github.com/apache/beam/commit/98ebb71605165c114c64cbfd81ec5d3bfb5ac838", "message": "lint, py2", "committedDate": "2020-06-09T19:29:57Z", "type": "commit"}, {"oid": "d4407d81cbfa06f85d5dd3583b7492016bbef219", "url": "https://github.com/apache/beam/commit/d4407d81cbfa06f85d5dd3583b7492016bbef219", "message": "lint", "committedDate": "2020-06-09T20:01:20Z", "type": "commit"}, {"oid": "32eb0a4166f720ae7e92faabc8e3955203337ecb", "url": "https://github.com/apache/beam/commit/32eb0a4166f720ae7e92faabc8e3955203337ecb", "message": "superfluous-parens", "committedDate": "2020-06-09T21:45:41Z", "type": "commit"}]}