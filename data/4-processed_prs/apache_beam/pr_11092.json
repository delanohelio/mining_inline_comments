{"pr_number": 11092, "pr_title": "[BEAM-9085] Fix performance regression in SyntheticSource on Python 3", "pr_createdAt": "2020-03-10T15:58:24Z", "pr_url": "https://github.com/apache/beam/pull/11092", "timeline": [{"oid": "1e230fa01b0471422b2713c7d7dc5172bab186ee", "url": "https://github.com/apache/beam/commit/1e230fa01b0471422b2713c7d7dc5172bab186ee", "message": "[BEAM-9085] Fix performance regression in SyntheticSource\n\nBeam was using `numpy.random.RandomState` during generation of Synthetic input, which, starting from NumPy 1.17, is considered as a legacy generator. This caused the slowdown on Python 3. The solution was using `random` module instead of Numpy.", "committedDate": "2020-04-07T13:01:14Z", "type": "commit"}, {"oid": "0c59f45cf2a313b5f5f8c7f0b76318c279df5bcc", "url": "https://github.com/apache/beam/commit/0c59f45cf2a313b5f5f8c7f0b76318c279df5bcc", "message": "fix: Disable \"map built-in referenced when not iterating\" pylint warning", "committedDate": "2020-04-07T13:01:14Z", "type": "commit"}, {"oid": "1bdbcae364277d5ea20547e8ed24df1920dec4b0", "url": "https://github.com/apache/beam/commit/1bdbcae364277d5ea20547e8ed24df1920dec4b0", "message": "fix: keep using numpy.RandomState for python 2.7", "committedDate": "2020-04-08T09:10:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg==", "url": "https://github.com/apache/beam/pull/11092#discussion_r405397492", "bodyText": "@tvalentyn Do we have a JIRA issue that accumulates all things that have to be done when Beam drops py2? I know there is a https://issues.apache.org/jira/browse/BEAM-5949, but this refers only to __ne__", "author": "kamilwu", "createdAt": "2020-04-08T09:46:02Z", "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n), *map(self.getrandbits, itertools.repeat(64,\n+                                                                 n)))[:length]\n+\n+\n+Generator = _Random\n+\n+# TODO: Remove this when Beam drops Python 2.", "originalCommit": "1bdbcae364277d5ea20547e8ed24df1920dec4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMTE3NQ==", "url": "https://github.com/apache/beam/pull/11092#discussion_r405711175", "bodyText": "yes - https://issues.apache.org/jira/browse/BEAM-7372", "author": "tvalentyn", "createdAt": "2020-04-08T17:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMTM0Mw==", "url": "https://github.com/apache/beam/pull/11092#discussion_r405711343", "bodyText": "Commented on BEAM-5459, thank you!", "author": "tvalentyn", "createdAt": "2020-04-08T18:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NDU2OA==", "url": "https://github.com/apache/beam/pull/11092#discussion_r406054568", "bodyText": "Thanks, this is what I was looking for", "author": "kamilwu", "createdAt": "2020-04-09T08:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzQ5Mg=="}], "type": "inlineReview"}, {"oid": "a5a8bb35576b37e403f5071c7ec24ff93a42eae7", "url": "https://github.com/apache/beam/commit/a5a8bb35576b37e403f5071c7ec24ff93a42eae7", "message": "fix: keep using numpy.RandomState for python 2.7", "committedDate": "2020-04-08T09:50:07Z", "type": "commit"}, {"oid": "a5a8bb35576b37e403f5071c7ec24ff93a42eae7", "url": "https://github.com/apache/beam/commit/a5a8bb35576b37e403f5071c7ec24ff93a42eae7", "message": "fix: keep using numpy.RandomState for python 2.7", "committedDate": "2020-04-08T09:50:07Z", "type": "forcePushed"}, {"oid": "e6ab608743e0c0fc182e4ab10da48239da1cf18c", "url": "https://github.com/apache/beam/commit/e6ab608743e0c0fc182e4ab10da48239da1cf18c", "message": "fix: silent sphinx warning", "committedDate": "2020-04-08T13:08:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA==", "url": "https://github.com/apache/beam/pull/11092#discussion_r405921080", "bodyText": "Since we don't need py2 compatibility anymore, consider using to_bytes. Here's an equivalent for chunk_size=8. It seems to be somewhat slower than current method (perhaps since I'm not using map+repeat()), but with larger chuck_size, seems to be more efficient. Large chunk size may be less efficient for short bytesequences.\nchunk_size_bytes = 8 // TBD - larger chunks seem to improve performance.\nchunk_size_bits = chunk_size_bytes * 8\nnum_chunks = length // chunk_size_bytes + 1\n\nreturn b''.join([self.getrandbits(chunk_size_bits).to_bytes(chunk_size_bytes, sys.byteorder) for _ in range(num_chunks)])[:length]\n\nIf you decide to keep current implementation - please add a comment explaining the mechanics for readers not familiar with this code (we generate 8-byte stings, and then fit them into a representation of C++'s long-long, which also takes up 8 bytes).", "author": "tvalentyn", "createdAt": "2020-04-09T02:27:53Z", "path": "sdks/python/apache_beam/testing/synthetic_pipeline.py", "diffHunk": "@@ -61,6 +65,35 @@\n   np = None\n \n \n+class _Random(Random):\n+  \"\"\"A subclass of `random.Random` from the Python Standard Library that\n+  provides a method returning random bytes of arbitrary length.\n+  \"\"\"\n+\n+  # `numpy.random.RandomState` does not provide `random()` method, we keep this\n+  # for compatibility reasons.\n+  random_sample = Random.random\n+\n+  def bytes(self, length):\n+    \"\"\"Returns random bytes.\n+\n+    Args:\n+      length (int): Number of random bytes.\n+    \"\"\"\n+    n = length // 8 + 1\n+    # pylint: disable=map-builtin-not-iterating\n+    return struct.pack(\n+        '{}Q'.format(n),\n+        *map(self.getrandbits, itertools.repeat(64, n)))[:length]", "originalCommit": "e6ab608743e0c0fc182e4ab10da48239da1cf18c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MjI0NQ==", "url": "https://github.com/apache/beam/pull/11092#discussion_r406142245", "bodyText": "How about not using chunks at all? I did some tests again and, surprisingly, it looks like we don't need them.\nHere's a test with a set of different chunk sizes:\nfor CHUNK_SIZE in {4,8,32,64}; do python -m timeit -s \"import random; import sys; chunk_size=$CHUNK_SIZE; len=10; num_chunks=len//chunk_size+1\" 'b\"\".join([random.getrandbits(chunk_size * 8).to_bytes(chunk_size, sys.byteorder) for _ in range(num_chunks)])[:len]'; done \nResults:\nfor len==10:\n200000 loops, best of 5: 1.62 usec per loop\n200000 loops, best of 5: 1.34 usec per loop\n200000 loops, best of 5: 1.02 usec per loop\n200000 loops, best of 5: 1.19 usec per loop\nfor len==1000:\n5000 loops, best of 5: 87.7 usec per loop\n5000 loops, best of 5: 50.7 usec per loop\n20000 loops, best of 5: 16.7 usec per loop\n20000 loops, best of 5: 11 usec per loop\nAnd without chunks:\npython -m timeit -s \"import random; import sys; len=10\" 'random.getrandbits(len * 8).to_bytes(len, sys.byteorder)'\nfor len==10:\n1000000 loops, best of 5: 358 nsec per loop\nfor len==1000:\n50000 loops, best of 5: 4.5 usec per loop", "author": "kamilwu", "createdAt": "2020-04-09T11:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NDcyNg==", "url": "https://github.com/apache/beam/pull/11092#discussion_r406144726", "bodyText": "I'll push a commit with that so you can see how it looks in the code.", "author": "kamilwu", "createdAt": "2020-04-09T11:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2OTI2Mg==", "url": "https://github.com/apache/beam/pull/11092#discussion_r406369262", "bodyText": "This is great. I really like how we simplified this code.", "author": "tvalentyn", "createdAt": "2020-04-09T17:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMTA4MA=="}], "type": "inlineReview"}, {"oid": "3a983f5960d6dfe040cb733b5d1f07516e4cd147", "url": "https://github.com/apache/beam/commit/3a983f5960d6dfe040cb733b5d1f07516e4cd147", "message": "fix: add jira issue id", "committedDate": "2020-04-09T08:50:45Z", "type": "commit"}, {"oid": "102f8626334419eeda1f14cae64bed4bad97402f", "url": "https://github.com/apache/beam/commit/102f8626334419eeda1f14cae64bed4bad97402f", "message": "fix: use `to_bytes`", "committedDate": "2020-04-09T11:49:25Z", "type": "commit"}, {"oid": "102f8626334419eeda1f14cae64bed4bad97402f", "url": "https://github.com/apache/beam/commit/102f8626334419eeda1f14cae64bed4bad97402f", "message": "fix: use `to_bytes`", "committedDate": "2020-04-09T11:49:25Z", "type": "forcePushed"}]}