{"pr_number": 11792, "pr_title": "[BEAM-10435] Add ValidatesRunner task for local_job_service and Java SDK harness", "pr_createdAt": "2020-05-22T03:54:21Z", "pr_url": "https://github.com/apache/beam/pull/11792", "timeline": [{"oid": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "url": "https://github.com/apache/beam/commit/46252f59cf1b6c032abd26eb4b2890d965cd088f", "message": "Add ability to specify stdout and stderr files for local_job_service", "committedDate": "2020-05-22T03:57:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTYwMA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429029600", "bodyText": "@robertwb @lukecwik first thing I hit putting this together was exceeding message size limit", "author": "kennknowles", "createdAt": "2020-05-22T03:54:55Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/artifact/ArtifactRetrievalService.java", "diffHunk": "@@ -39,7 +39,7 @@\n public class ArtifactRetrievalService\n     extends ArtifactRetrievalServiceGrpc.ArtifactRetrievalServiceImplBase implements FnService {\n \n-  public static final int DEFAULT_BUFFER_SIZE = 4 << 20; // 4 MB\n+  public static final int DEFAULT_BUFFER_SIZE = 2 << 20; // 2 MB", "originalCommit": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTc4Ng==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429029786", "bodyText": "TODO(me): remove these imports\nI first went through the \"normal\" route of using all this stuff to watch for the pid file but it was verbose and had race conditions. No point. Just check and sleep, now.", "author": "kennknowles", "createdAt": "2020-05-22T03:55:45Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -1,3 +1,13 @@\n+import groovy.json.JsonOutput\n+\n+import java.nio.file.FileSystems", "originalCommit": "1cdd67b3dcec4fe33ce74131ba77cc27e846c268", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxMTQxMQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r430611411", "bodyText": "You shouldn't have to watch, when the --background flag is set it waits for the service to be up before terminating.", "author": "robertwb", "createdAt": "2020-05-26T18:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MzI3Mg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r431343272", "bodyText": "Great, I'll remove that. I think in an early draft I made the gradle task not wait for the process to terminate (because the daemonized process was causing the hang, but that turned out to be a different configuration)", "author": "kennknowles", "createdAt": "2020-05-27T18:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyOTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDMzMw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429030333", "bodyText": "TODO(me): remove this once we get past the sanity checking phase", "author": "kennknowles", "createdAt": "2020-05-22T03:58:34Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {\n+  doLast {\n+    exec {\n+      commandLine \"virtualenv\", virtualenvDir, \"--python=python3\"\n+    }\n+    execInVirtualenv \"pip\", \"install\", \"--retries\", \"10\", \"--upgrade\", \"tox==3.11.1\", \"--requirement\", \"${project.rootDir}/sdks/python/build-requirements.txt\"\n+    execInVirtualenv \"python\", \"setup.py\", \"build\", \"--build-base=${buildDir}\"\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"\n+  }\n+}\n+\n+task startLocalJobService {\n+  dependsOn virtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+\n+    File pidFile = new File(localJobServicePidFile)\n+    int totalSleep = 0\n+    while (!pidFile.exists()) {\n+      sleep(500)\n+      totalSleep += 500\n+      if (totalSleep > 5000) {\n+        throw new RuntimeException(\"Local job service pid file never showed up\");\n+      }\n+    }\n+  }\n+}\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {\n+    dependsOn startLocalJobService\n+  }\n+\n+  group = \"Verification\"\n+  description \"PortableRunner Java subprocess ValidatesRunner suite\"\n+  classpath = configurations.validatesRunner\n+  systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+      \"--runner=TestUniversalRunner\",\n+      \"--localJobServicePortFile=${localJobServicePortFile}\"\n+  ])\n+  testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+  useJUnit {\n+    includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+  }\n+  filter {\n+    includeTestsMatching 'ImpulseTest'", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDQ2Mg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429030462", "bodyText": "It would be nicer for the port to be an output of the task and read it in by the other task, but that plumbing seems to be unnatural based on gradle docs I could find.", "author": "kennknowles", "createdAt": "2020-05-22T03:59:13Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {\n+  doLast {\n+    exec {\n+      commandLine \"virtualenv\", virtualenvDir, \"--python=python3\"\n+    }\n+    execInVirtualenv \"pip\", \"install\", \"--retries\", \"10\", \"--upgrade\", \"tox==3.11.1\", \"--requirement\", \"${project.rootDir}/sdks/python/build-requirements.txt\"\n+    execInVirtualenv \"python\", \"setup.py\", \"build\", \"--build-base=${buildDir}\"\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"\n+  }\n+}\n+\n+task startLocalJobService {\n+  dependsOn virtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMDU5Mw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429030593", "bodyText": "Had to add this, because TestPortableRunner couples \"check that the job succeeds\" logic with a bunch of other things having to do with launching an existing Java runner as a portable runner, not relevant to actual portable runner services.", "author": "kennknowles", "createdAt": "2020-05-22T03:59:52Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkState;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.options.Validation;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTM1NA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429031354", "bodyText": "This verbosity is because Gradle exec tasks do not terminate when there are open subprocesses.", "author": "kennknowles", "createdAt": "2020-05-22T04:03:45Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTQ2OQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429031469", "bodyText": "This verbosity is because ProcessBuilder.inheritIO does not work in this context (don't know if it is Gradle or Groovy breaking it)", "author": "kennknowles", "createdAt": "2020-05-22T04:04:18Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng==", "url": "https://github.com/apache/beam/pull/11792#discussion_r429031586", "bodyText": "I tried registering outputs.dir virtualenvDir and inputs.dir pythonSdkDir but it did not result in incremental build.", "author": "kennknowles", "createdAt": "2020-05-22T04:04:55Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxMjQ1Nw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r430612457", "bodyText": "Can we use the existing virtualenv tasks we have?", "author": "robertwb", "createdAt": "2020-05-26T18:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NjUyMg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r431346522", "bodyText": "I didn't use them because I was attempting to do more proper idempotent/cached gradle tasks.", "author": "kennknowles", "createdAt": "2020-05-27T18:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MDk3Mg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r431350972", "bodyText": "I hey now I recall - applyPythonNature causes conflicting configurations. Really would like to move away from these nature things.", "author": "kennknowles", "createdAt": "2020-05-27T18:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1MDg1MA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r432050850", "bodyText": "I wouldn't want Beam to move to a build setup where each gradle file does its own thing because the fragmentation will hurt debugging build issues and slow down rolling out build changes that impact more then one project.\nOne example where we decided to split a common setup was between releasing java projects and releasing vendored projects which lead to fixes that weren't done in both places leading to bugs that lasted for months.", "author": "lukecwik", "createdAt": "2020-05-28T18:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3MDcwNA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r451770704", "bodyText": "I'm not suggesting moving each build.gradle to do their own thing. Beam Java modules and vendored libraries can share as much code as they like. They shouldn't share an entrypoint because they are different things.\nIn this case, the code suggested to be shared is coupled with creating a Beam Python module, which this is not. \"Do Python things\" is not an adequate or meaningful abstraction. Applying the vague blanket logic is a liability, even if it worked here, which it does not. It is likely that I can do some tweaks to applyPythonNature to \"make it work\", but that would be bad engineering.\n\nAdding near-duplicate code when maybe there is an abstraction: tech debt\nAdding a dependency on something that isn't ready/meant for it: tech debt\n\nI interpret Robert's comment as an invitation to improve our build code into some kind of meaningful abstraction that can be shared without incurring yet more tech debt.", "author": "kennknowles", "createdAt": "2020-07-08T19:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3MjU1NA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r451772554", "bodyText": "(I will explore this invitation once the tests are running properly)", "author": "kennknowles", "createdAt": "2020-07-08T19:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc3OTM4MA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r451779380", "bodyText": "Adding a dependency on something that is ready and is meant for it, but is not polished and named to make clear that it is a logical necessity: tech debt)", "author": "kennknowles", "createdAt": "2020-07-08T19:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDE3MQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r430614171", "bodyText": "We shouldn't have to wait, once the above exec completes it should be there (or not). Does the above task error if the return code is non-zero?", "author": "robertwb", "createdAt": "2020-05-26T18:17:51Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +45,123 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.virtualenvDir = \"${project.buildDir}/virtualenv\"\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+ext.pythonSdkDir = \"${project.rootDir}/sdks/python\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n }\n+\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${virtualenvDir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task virtualenv {\n+  doLast {\n+    exec {\n+      commandLine \"virtualenv\", virtualenvDir, \"--python=python3\"\n+    }\n+    execInVirtualenv \"pip\", \"install\", \"--retries\", \"10\", \"--upgrade\", \"tox==3.11.1\", \"--requirement\", \"${project.rootDir}/sdks/python/build-requirements.txt\"\n+    execInVirtualenv \"python\", \"setup.py\", \"build\", \"--build-base=${buildDir}\"\n+    execInVirtualenv \"pip\", \"install\", \"-e\", \".\"\n+  }\n+}\n+\n+task startLocalJobService {\n+  dependsOn virtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+\n+    File pidFile = new File(localJobServicePidFile)\n+    int totalSleep = 0\n+    while (!pidFile.exists()) {\n+      sleep(500)", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2MTA2MQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r451761061", "bodyText": "Removed. This code was left over from when I was struggling to get gradle to allow the thing to daemonize itself.", "author": "kennknowles", "createdAt": "2020-07-08T18:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNjk4NA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r430616984", "bodyText": "I'm not sure what happens here when this process exits (and possibly tries to close these files?).", "author": "robertwb", "createdAt": "2020-05-26T18:22:39Z", "path": "sdks/python/apache_beam/runners/portability/local_job_service_main.py", "diffHunk": "@@ -99,11 +105,23 @@ def run(argv):\n       options.port_file = os.path.splitext(options.pid_file)[0] + '.port'\n       argv.append('--port_file')\n       argv.append(options.port_file)\n+\n+    if not options.stdout_file:\n+      raise RuntimeError('--stdout_file must be specified with --background')\n+    stdout_dest = open(options.stdout_file, mode='w')\n+\n+    if options.stderr_file:\n+      stderr_dest=open(options.stderr_file, mode='w')\n+    else:\n+      stderr_dest=subprocess.STDOUT\n+\n     subprocess.Popen([\n         sys.executable,\n         '-m',\n         'apache_beam.runners.portability.local_job_service_main'\n-    ] + argv)\n+    ] + argv,\n+        stderr=stderr_dest,", "originalCommit": "46252f59cf1b6c032abd26eb4b2890d965cd088f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1ODcwNw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r451758707", "bodyText": "I didn't read the subprocess code, and the docs are vague. The special subprocess.STDOUT token indicates that the output should be \"captured\" into the same file handle. Comments at https://stackoverflow.com/questions/31980411/closing-files-from-subprocess-stdout imply that closing the file is the responsibility of this process. I did not run the experiments suggested there. I also did not try to refactor this code to allow a with statement.", "author": "kennknowles", "createdAt": "2020-07-08T18:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNjk4NA=="}], "type": "inlineReview"}, {"oid": "ca74559e39a1d51250e638bb17c90172a441e39f", "url": "https://github.com/apache/beam/commit/ca74559e39a1d51250e638bb17c90172a441e39f", "message": "Add ability to specify stdout and stderr files for local_job_service", "committedDate": "2020-06-16T21:33:02Z", "type": "forcePushed"}, {"oid": "56cec5f3586e6361f1a93e02e91665ef4b524a0b", "url": "https://github.com/apache/beam/commit/56cec5f3586e6361f1a93e02e91665ef4b524a0b", "message": "Add ability to specify stdout and stderr files for local_job_service;", "committedDate": "2020-07-08T18:45:17Z", "type": "forcePushed"}, {"oid": "c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "url": "https://github.com/apache/beam/commit/c4668557b2bdb5e96256ec9c0325b93409bfbe5a", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T21:20:12Z", "type": "forcePushed"}, {"oid": "f156314f115d2fd6767fd18096f8e1bd9d58e462", "url": "https://github.com/apache/beam/commit/f156314f115d2fd6767fd18096f8e1bd9d58e462", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T21:36:02Z", "type": "forcePushed"}, {"oid": "cbb175a309560a39315742b4920b53b28a7eb3e3", "url": "https://github.com/apache/beam/commit/cbb175a309560a39315742b4920b53b28a7eb3e3", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T21:57:51Z", "type": "forcePushed"}, {"oid": "65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "url": "https://github.com/apache/beam/commit/65e3bf46c97abf66b884fa4e01e0c636a1d9ec9a", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:19:21Z", "type": "forcePushed"}, {"oid": "07c38633ab1a6a4dceac99757bc185c25d8f66cf", "url": "https://github.com/apache/beam/commit/07c38633ab1a6a4dceac99757bc185c25d8f66cf", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:32:51Z", "type": "forcePushed"}, {"oid": "e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "url": "https://github.com/apache/beam/commit/e7254e2c28f2d433a0d2ccc16cf79db611e108f6", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:36:12Z", "type": "forcePushed"}, {"oid": "da4acef9b5c62069632978612c9692d7feace03c", "url": "https://github.com/apache/beam/commit/da4acef9b5c62069632978612c9692d7feace03c", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-09T22:39:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NTI3Ng==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452955276", "bodyText": "These lines can be removed now, right?", "author": "robertwb", "createdAt": "2020-07-10T16:43:36Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4ODE5Nw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452988197", "bodyText": "Done", "author": "kennknowles", "createdAt": "2020-07-10T17:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NTYwMg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452955602", "bodyText": "Very convenient.", "author": "robertwb", "createdAt": "2020-07-10T16:44:11Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//\n+//    File pidFile = new File(localJobServicePidFile)\n+//    int totalSleep = 0\n+//    while (!pidFile.exists()) {\n+//      sleep(500)\n+//      totalSleep += 500\n+//      if (totalSleep > 5000) {\n+//        throw new RuntimeException(\"Local job service pid file never showed up\");\n+//      }\n+//    }\n+  }\n }\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjExNw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452956117", "bodyText": "Consider passing --defaultEnvironmentType=LOOPBACK. You can then remove the docker dependency as well. (Maybe we could run one test with docker, but all of them seems overkill and expensive.)", "author": "robertwb", "createdAt": "2020-07-10T16:45:16Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//\n+//    File pidFile = new File(localJobServicePidFile)\n+//    int totalSleep = 0\n+//    while (!pidFile.exists()) {\n+//      sleep(500)\n+//      totalSleep += 500\n+//      if (totalSleep > 5000) {\n+//        throw new RuntimeException(\"Local job service pid file never showed up\");\n+//      }\n+//    }\n+  }\n }\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {\n+    dependsOn startLocalJobService\n+  }\n+\n+  group = \"Verification\"\n+  description \"PortableRunner Java subprocess ValidatesRunner suite\"\n+  classpath = configurations.validatesRunner\n+  systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+      \"--runner=TestUniversalRunner\",\n+      \"--experiments=beam_fn_api\",\n+      \"--localJobServicePortFile=${localJobServicePortFile}\"\n+  ])", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4OTU1Mw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452989553", "bodyText": "I rather specifically want the docker dependency, to have a test of the true Java SDK harness container without the complexity of a production runner. But that can be postcommit and if LOOPBACK is faster and easier to debug that's good for precommit. I'd like to leave as-is to avoid churning this PR, but will follow up and create a LOOPBACK version prior to creating any Jenkins job.", "author": "kennknowles", "createdAt": "2020-07-10T17:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5OTg4MQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453099881", "bodyText": "Ack. I don't think it makes sense to run every test to verify the container/harness setup works (this is reminiscent of other threads) but definitely agree these choices can be postponed while we get this PR in.", "author": "robertwb", "createdAt": "2020-07-10T22:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjY3Mg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452956672", "bodyText": "Could you create JIRAs for these (at whatever granularity seems appropriate) and add them here?", "author": "robertwb", "createdAt": "2020-07-10T16:46:21Z", "path": "runners/portability/java/build.gradle", "diffHunk": "@@ -31,9 +38,161 @@ dependencies {\n   compile project(path: \":sdks:java:harness\", configuration: \"shadow\")\n   compile library.java.vendored_grpc_1_26_0\n   compile library.java.slf4j_api\n+\n   testCompile project(path: \":runners:core-construction-java\", configuration: \"testRuntime\")\n   testCompile library.java.hamcrest_core\n   testCompile library.java.junit\n   testCompile library.java.mockito_core\n   testCompile library.java.slf4j_jdk14\n+\n+  validatesRunner project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n+  validatesRunner project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  validatesRunner project(path: project.path, configuration: \"testRuntime\")\n+}\n+\n+\n+project.evaluationDependsOn(\":sdks:java:core\")\n+project.evaluationDependsOn(\":runners:core-java\")\n+\n+ext.localJobServicePidFile = \"${project.buildDir}/local_job_service_pid\"\n+ext.localJobServicePortFile = project.hasProperty(\"localJobServicePortFile\") ? project.property(\"localJobServicePortFile\") : \"${project.buildDir}/local_job_service_port\"\n+ext.localJobServiceStdoutFile = \"${project.buildDir}/local_job_service_stdout\"\n+\n+void execInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  exec {\n+    workingDir pythonSdkDir\n+    commandLine \"sh\", \"-c\", shellCommand\n+  }\n+}\n+\n+// Does not background the process, but allows the process to daemonize itself\n+void execBackgroundInVirtualenv(String... args) {\n+  String shellCommand = \". ${project.ext.envdir}/bin/activate && \" + args.collect { arg -> \"'\" + arg.replaceAll(\"'\", \"\\\\'\") + \"'\" }.join(\" \")\n+  println \"execBackgroundInVirtualEnv: ${shellCommand}\"\n+  ProcessBuilder pb = new ProcessBuilder().redirectErrorStream(true).directory(new File(pythonSdkDir)).command([\"sh\", \"-c\", shellCommand])\n+  Process proc = pb.start();\n+\n+  // redirectIO does not work for connecting to groovy/gradle stdout\n+  BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+  String line\n+  while ((line = reader.readLine()) != null) {\n+    println line\n+  }\n+  proc.waitFor();\n+}\n+\n+task startLocalJobService {\n+  dependsOn setupVirtualenv\n+\n+  doLast {\n+    execBackgroundInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--background\",\n+        \"--stdout_file=${localJobServiceStdoutFile}\",\n+        \"--pid_file=${localJobServicePidFile}\",\n+        \"--port_file=${localJobServicePortFile}\"\n+//\n+//    File pidFile = new File(localJobServicePidFile)\n+//    int totalSleep = 0\n+//    while (!pidFile.exists()) {\n+//      sleep(500)\n+//      totalSleep += 500\n+//      if (totalSleep > 5000) {\n+//        throw new RuntimeException(\"Local job service pid file never showed up\");\n+//      }\n+//    }\n+  }\n }\n+\n+task stopLocalJobService {\n+  doLast {\n+    execInVirtualenv \"python\",\n+        \"-m\", \"apache_beam.runners.portability.local_job_service_main\",\n+        \"--stop\",\n+        \"--pid_file=${localJobServicePidFile}\"\n+  }\n+}\n+\n+startLocalJobService.finalizedBy stopLocalJobService\n+\n+/**\n+ * Runs Java ValidatesRunner tests against the Universal Local Runner (ULR) aka local_job_service_main\n+ * with subprocess SDK harness environments.\n+ */\n+task ulrValidatesRunnerTests(type: Test) {\n+  dependsOn \":sdks:java:container:docker\"\n+\n+  if (!project.hasProperty(\"localJobServicePortFile\")) {\n+    dependsOn startLocalJobService\n+  }\n+\n+  group = \"Verification\"\n+  description \"PortableRunner Java subprocess ValidatesRunner suite\"\n+  classpath = configurations.validatesRunner\n+  systemProperty \"beamTestPipelineOptions\", JsonOutput.toJson([\n+      \"--runner=TestUniversalRunner\",\n+      \"--experiments=beam_fn_api\",\n+      \"--localJobServicePortFile=${localJobServicePortFile}\"\n+  ])\n+  testClassesDirs = files(project(\":sdks:java:core\").sourceSets.test.output.classesDirs)\n+  useJUnit {\n+    includeCategories 'org.apache.beam.sdk.testing.ValidatesRunner'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesGaugeMetrics'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesOnWindowExpiration'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesMapState'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesSetState'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesTestStreamWithMultipleStages'\n+    excludeCategories 'org.apache.beam.sdk.testing.UsesTimersInParDo'\n+  }\n+  filter {\n+    // There is not currently a category for excluding these _only_ in committed mode", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NTg0NQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452995845", "bodyText": "Done. Also added a new Jira component runner-universal since I did not find one, in case there's a need to search for these.", "author": "kennknowles", "createdAt": "2020-07-10T18:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NjY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTAyMg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452959022", "bodyText": "Nit: I'd make this more local (it's thrown only at Files.readAllBytes).", "author": "robertwb", "createdAt": "2020-07-10T16:51:15Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n+    return new TestUniversalRunner(options);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    try {\n+      Options testOptions = options.as(Options.class);\n+      String endpoint =\n+          \"localhost:\"\n+              + new String(\n+                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n+                      Charsets.UTF_8)\n+                  .trim();\n+\n+      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n+      portableOptions.setJobEndpoint(endpoint);\n+      portableOptions.setRunner(PortableRunner.class);\n+      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n+      PipelineResult result = runner.run(pipeline);\n+      assertThat(\n+          \"Pipeline did not succeed.\",\n+          result.waitUntilFinish(),\n+          Matchers.is(PipelineResult.State.DONE));\n+      return result;\n+    } catch (IOException e) {", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NjczNw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452996737", "bodyText": "Done", "author": "kennknowles", "createdAt": "2020-07-10T18:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452959763", "bodyText": "Logically, it would make sense to let this be optional (e.g. one could instead provide jobEndpoint directly). A point could be made that the testing infrastructure should be the one reading the file and setting jobEndpoint, rather than passing the file path as an option (but I don't know how much messier that'd make things).", "author": "robertwb", "createdAt": "2020-07-10T16:52:47Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/testing/TestUniversalRunner.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.portability.testing;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import com.google.auto.service.AutoService;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.beam.runners.portability.PortableRunner;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsRegistrar;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.runners.PipelineRunnerRegistrar;\n+import org.apache.beam.sdk.testing.TestPipelineOptions;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Charsets;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+import org.hamcrest.Matchers;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@link PipelineRunner} a {@link Pipeline} against a {@code JobService}. */\n+public class TestUniversalRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestUniversalRunner.class);\n+\n+  private final PipelineOptions options;\n+\n+  private TestUniversalRunner(PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  /**\n+   * Constructs a runner from the provided options.\n+   *\n+   * @param options Properties which configure the runner.\n+   * @return The newly created runner.\n+   */\n+  public static TestUniversalRunner fromOptions(PipelineOptions options) {\n+    return new TestUniversalRunner(options);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    try {\n+      Options testOptions = options.as(Options.class);\n+      String endpoint =\n+          \"localhost:\"\n+              + new String(\n+                      Files.readAllBytes(Paths.get(testOptions.getLocalJobServicePortFile())),\n+                      Charsets.UTF_8)\n+                  .trim();\n+\n+      PortablePipelineOptions portableOptions = options.as(PortablePipelineOptions.class);\n+      portableOptions.setJobEndpoint(endpoint);\n+      portableOptions.setRunner(PortableRunner.class);\n+      PortableRunner runner = PortableRunner.fromOptions(portableOptions);\n+      PipelineResult result = runner.run(pipeline);\n+      assertThat(\n+          \"Pipeline did not succeed.\",\n+          result.waitUntilFinish(),\n+          Matchers.is(PipelineResult.State.DONE));\n+      return result;\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  public interface Options extends TestPipelineOptions, PortablePipelineOptions {\n+    /**\n+     * A file containing the job service port, since Gradle needs to know this filename statically\n+     * to provide it in Beam testing options.\n+     */\n+    @Description(\"File containing local job service port.\")", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwMTIyMQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453001221", "bodyText": "Yea, this sort of thing is what took 90% of the time for this PR actually. Scraping around Gradle's docs and the internet for ways to insert that little bit of logic, because realizing it was sort of against the grain. Pipeline options are passed as a Java system property, and those are set up in the Gradle graph construction phase. More generally, there's not a Gradle graph execution-time slot for free-form code that also re-uses the Test task type. Perhaps they expect you to use inheritance and make a new Task type. Which I would rather not do ;_;\nIt would be fine to have two pipeline options, so that simple use could be simple.", "author": "kennknowles", "createdAt": "2020-07-10T18:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMDg3Nw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453100877", "bodyText": "We already have the plain jobEndpoint option, just make (re)setting it conditional on LocalJobServicePortFile being set.", "author": "robertwb", "createdAt": "2020-07-10T22:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxMTc0MA==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453911740", "bodyText": "Done", "author": "kennknowles", "createdAt": "2020-07-13T20:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTM3Mg==", "url": "https://github.com/apache/beam/pull/11792#discussion_r452961372", "bodyText": "I think I mentioned this before, but is it an issue that these file descriptors might get closed on completion of this process?", "author": "robertwb", "createdAt": "2020-07-10T16:56:02Z", "path": "sdks/python/apache_beam/runners/portability/local_job_service_main.py", "diffHunk": "@@ -99,11 +104,23 @@ def run(argv):\n       options.port_file = os.path.splitext(options.pid_file)[0] + '.port'\n       argv.append('--port_file')\n       argv.append(options.port_file)\n+\n+    if not options.stdout_file:\n+      raise RuntimeError('--stdout_file must be specified with --background')\n+    stdout_dest = open(options.stdout_file, mode='w')", "originalCommit": "da4acef9b5c62069632978612c9692d7feace03c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwMTYwMQ==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453001601", "bodyText": "Yea I think my rebasing clobbered that thread. It is not an issue. Parent file descriptors are not closed. You can find some links I think on the PR front page it will still have the prior conversation.\n(I won't rebase from here on out, until review is done)", "author": "kennknowles", "createdAt": "2020-07-10T18:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTAzMw==", "url": "https://github.com/apache/beam/pull/11792#discussion_r453101033", "bodyText": "No problem. My comment was from something like a mont ago. Thanks for the references.", "author": "robertwb", "createdAt": "2020-07-10T22:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTM3Mg=="}], "type": "inlineReview"}, {"oid": "d261b9567bf9c9e78414f3be1f54c5332ce88390", "url": "https://github.com/apache/beam/commit/d261b9567bf9c9e78414f3be1f54c5332ce88390", "message": "Only add test task in applyPythonNature if it does not already exist", "committedDate": "2020-07-13T20:01:37Z", "type": "commit"}, {"oid": "73e1ccd6ceef2bd3b49c864be5d5cd33609faf90", "url": "https://github.com/apache/beam/commit/73e1ccd6ceef2bd3b49c864be5d5cd33609faf90", "message": "Add UsesTimersInParDo to test that was missing it", "committedDate": "2020-07-13T20:01:37Z", "type": "commit"}, {"oid": "fe66ea00525518429c22d48eb377afac47febc89", "url": "https://github.com/apache/beam/commit/fe66ea00525518429c22d48eb377afac47febc89", "message": "Reduce Java portable ArtifactRetrieval chunk size to avoid breaking limit", "committedDate": "2020-07-13T20:01:37Z", "type": "commit"}, {"oid": "1f4cb7235d33426d56550ee04ec1193d4a8a4ce6", "url": "https://github.com/apache/beam/commit/1f4cb7235d33426d56550ee04ec1193d4a8a4ce6", "message": "Add ability to specify stdout and stderr files for local_job_service;", "committedDate": "2020-07-13T20:01:38Z", "type": "commit"}, {"oid": "60e03d4e2f2126f09e0accbfe27b368a25a12abf", "url": "https://github.com/apache/beam/commit/60e03d4e2f2126f09e0accbfe27b368a25a12abf", "message": "Create TestUniversalRunner for testing against Python ULR", "committedDate": "2020-07-13T20:30:13Z", "type": "commit"}, {"oid": "fec66720fd2e8feaffe198ddb714fed5da312a02", "url": "https://github.com/apache/beam/commit/fec66720fd2e8feaffe198ddb714fed5da312a02", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-13T20:30:13Z", "type": "commit"}, {"oid": "fec66720fd2e8feaffe198ddb714fed5da312a02", "url": "https://github.com/apache/beam/commit/fec66720fd2e8feaffe198ddb714fed5da312a02", "message": "Add validatesRunner suite for local job service", "committedDate": "2020-07-13T20:30:13Z", "type": "forcePushed"}]}