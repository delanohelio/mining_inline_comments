{"pr_number": 13635, "pr_title": "[BEAM-11538] Add a Deque Encoder", "pr_createdAt": "2020-12-30T11:03:39Z", "pr_url": "https://github.com/apache/beam/pull/13635", "timeline": [{"oid": "9868fb2211020d25822bd581411f99354c28be2a", "url": "https://github.com/apache/beam/commit/9868fb2211020d25822bd581411f99354c28be2a", "message": "[BEAM-11538] Add a Deque Encoder", "committedDate": "2020-12-30T11:03:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MTIyOA==", "url": "https://github.com/apache/beam/pull/13635#discussion_r551481228", "bodyText": "DequeCoder.elemCoder or better to even not reference private variables and say \"Coder for elements of DequeCoder must be determistic\".", "author": "kennknowles", "createdAt": "2021-01-04T18:12:09Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/coders/DequeCoder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeParameter;\n+\n+/**\n+ * A {@link Coder} for {@link Deque}, using the format of {@link IterableLikeCoder}.\n+ *\n+ * @param <T> the type of the elements of the Deques being transcoded\n+ */\n+public class DequeCoder<T> extends IterableLikeCoder<T, Deque<T>> {\n+\n+  public static <T> DequeCoder<T> of(Coder<T> elemCoder) {\n+    return new DequeCoder<>(elemCoder);\n+  }\n+\n+  /////////////////////////////////////////////////////////////////////////////\n+  // Internal operations below here.\n+\n+  @Override\n+  protected Deque<T> decodeToIterable(List<T> decodedElements) {\n+    return new ArrayDeque<>(decodedElements);\n+  }\n+\n+  protected DequeCoder(Coder<T> elemCoder) {\n+    super(elemCoder, \"Deque\");\n+  }\n+\n+  @Override\n+  public boolean consistentWithEquals() {\n+    return getElemCoder().consistentWithEquals();\n+  }\n+\n+  @Override\n+  public Object structuralValue(Deque<T> values) {\n+    if (consistentWithEquals()) {\n+      return values;\n+    } else {\n+      final Deque<Object> ret = new ArrayDeque<>(values.size());\n+      for (T value : values) {\n+        ret.add(getElemCoder().structuralValue(value));\n+      }\n+      return ret;\n+    }\n+  }\n+\n+  /**\n+   * Deque sizes are always known, so DequeIterable may be deterministic while the general\n+   * IterableLikeCoder is not.\n+   */\n+  @Override\n+  public void verifyDeterministic() throws NonDeterministicException {\n+    verifyDeterministic(this, \"ListCoder.elemCoder must be deterministic\", getElemCoder());", "originalCommit": "e4ffa71884d7e9288d2107c24fd879d7d16fd956", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2MzEwMQ==", "url": "https://github.com/apache/beam/pull/13635#discussion_r551563101", "bodyText": "I've copied this from the SetCoder, but that's a good point!", "author": "Fokko", "createdAt": "2021-01-04T20:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MTIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MjM4OQ==", "url": "https://github.com/apache/beam/pull/13635#discussion_r551482389", "bodyText": "Prefer ImmutableList.of since this is not converting an array to a list, but just building a list.", "author": "kennknowles", "createdAt": "2021-01-04T18:14:37Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/coders/DequeCoderTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.testing.CoderProperties;\n+import org.apache.beam.sdk.transforms.windowing.GlobalWindow;\n+import org.apache.beam.sdk.util.CoderUtils;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Test case for {@link DequeCoder}. */\n+@RunWith(JUnit4.class)\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})\n+public class DequeCoderTest {\n+\n+  private static final Coder<Deque<Integer>> TEST_CODER = DequeCoder.of(VarIntCoder.of());\n+\n+  private static final List<Deque<Integer>> TEST_VALUES =\n+      Arrays.asList(", "originalCommit": "e4ffa71884d7e9288d2107c24fd879d7d16fd956", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2MzU4Mg==", "url": "https://github.com/apache/beam/pull/13635#discussion_r551563582", "bodyText": "Good one, updated.", "author": "Fokko", "createdAt": "2021-01-04T20:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MjgzNA==", "url": "https://github.com/apache/beam/pull/13635#discussion_r551482834", "bodyText": "It would be good to have some tests where the element type is not integer. For example for the case where the inner type is arrays or some other nested structure.", "author": "kennknowles", "createdAt": "2021-01-04T18:15:33Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/coders/DequeCoderTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.testing.CoderProperties;\n+import org.apache.beam.sdk.transforms.windowing.GlobalWindow;\n+import org.apache.beam.sdk.util.CoderUtils;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Test case for {@link DequeCoder}. */\n+@RunWith(JUnit4.class)\n+@SuppressWarnings({\n+  \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n+})\n+public class DequeCoderTest {\n+\n+  private static final Coder<Deque<Integer>> TEST_CODER = DequeCoder.of(VarIntCoder.of());\n+\n+  private static final List<Deque<Integer>> TEST_VALUES =\n+      Arrays.asList(\n+          new ArrayDeque<>(),\n+          new ArrayDeque<>(Collections.singleton(13)),\n+          new ArrayDeque<>(Arrays.asList(31, -5, 83)));", "originalCommit": "e4ffa71884d7e9288d2107c24fd879d7d16fd956", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3MTU1OQ==", "url": "https://github.com/apache/beam/pull/13635#discussion_r551571559", "bodyText": "Sure, I've added the following test:\n  @Test\n  public void encodeDequeWithList() throws Exception {\n    DequeCoder<List<Long>> OBJECT_TEST_CODER = DequeCoder.of(ListCoder.of(VarLongCoder.of()));\n\n    CoderProperties.coderDecodeEncodeContentsEqual(\n        OBJECT_TEST_CODER,\n        new ArrayDeque<>(\n            ImmutableList.of(\n                ImmutableList.of(18L, 15L), ImmutableList.of(19L, 25L), ImmutableList.of(22L))));\n  }\nLet me know if there are any other cases that you would like to see.", "author": "Fokko", "createdAt": "2021-01-04T21:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MjgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MjkwNA==", "url": "https://github.com/apache/beam/pull/13635#discussion_r554092904", "bodyText": "I don't believe this one is tested.", "author": "kennknowles", "createdAt": "2021-01-08T17:38:58Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/coders/DequeCoder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.coders;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+import org.apache.beam.sdk.values.TypeParameter;\n+\n+/**\n+ * A {@link Coder} for {@link Deque}, using the format of {@link IterableLikeCoder}.\n+ *\n+ * @param <T> the type of the elements of the Deques being transcoded\n+ */\n+public class DequeCoder<T> extends IterableLikeCoder<T, Deque<T>> {\n+\n+  public static <T> DequeCoder<T> of(Coder<T> elemCoder) {\n+    return new DequeCoder<>(elemCoder);\n+  }\n+\n+  /////////////////////////////////////////////////////////////////////////////\n+  // Internal operations below here.\n+\n+  @Override\n+  protected Deque<T> decodeToIterable(List<T> decodedElements) {\n+    return new ArrayDeque<>(decodedElements);\n+  }\n+\n+  protected DequeCoder(Coder<T> elemCoder) {\n+    super(elemCoder, \"Deque\");\n+  }\n+\n+  @Override\n+  public boolean consistentWithEquals() {\n+    return getElemCoder().consistentWithEquals();\n+  }\n+\n+  @Override\n+  public Object structuralValue(Deque<T> values) {", "originalCommit": "16ea0bf7ab7eb13585d61adcd05af6ef42848ac7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODgzNjU4MA==", "url": "https://github.com/apache/beam/pull/13635#discussion_r558836580", "bodyText": "I'm actually looking into this, but it isn't that trivial. This method is only tested for the MapCoder and ListCoder. My startingpoint was the tests of the SetCoder, where this wasn't covered. The issue with the Deque is that it do\nLinkedList extends AbstractSequentialList which extends AbstractList which does override equals and hashCode - so the implementation is not inherited from Object. ArrayDeque, on the other hand, really doesn't inherit anything other implementation as far as I can see. Its direct superclass (AbstractCollection) doesn't override them. So the test is failing for the Deque since the objects aren't equal (it only tests lhs == rhs, as this is the equals implementation of Object.", "author": "Fokko", "createdAt": "2021-01-16T10:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MjkwNA=="}], "type": "inlineReview"}, {"oid": "cc27eaa6e57c3b5e87ab1e213bf23f06f2bc9d2f", "url": "https://github.com/apache/beam/commit/cc27eaa6e57c3b5e87ab1e213bf23f06f2bc9d2f", "message": "Revert unrelated changes", "committedDate": "2021-01-17T20:36:59Z", "type": "forcePushed"}, {"oid": "d1de1ab76d00a656199ddfd138523974f5dfd703", "url": "https://github.com/apache/beam/commit/d1de1ab76d00a656199ddfd138523974f5dfd703", "message": "[BEAM-11538] Add a Deque Encoder", "committedDate": "2021-01-18T11:06:15Z", "type": "commit"}, {"oid": "d1de1ab76d00a656199ddfd138523974f5dfd703", "url": "https://github.com/apache/beam/commit/d1de1ab76d00a656199ddfd138523974f5dfd703", "message": "[BEAM-11538] Add a Deque Encoder", "committedDate": "2021-01-18T11:06:15Z", "type": "forcePushed"}]}