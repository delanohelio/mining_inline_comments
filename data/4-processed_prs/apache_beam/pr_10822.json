{"pr_number": 10822, "pr_title": "[BEAM-7746] Minor typing updates / fixes", "pr_createdAt": "2020-02-10T19:41:13Z", "pr_url": "https://github.com/apache/beam/pull/10822", "timeline": [{"oid": "35258c78a35af368ff63efd501025e6f9bd796b6", "url": "https://github.com/apache/beam/commit/35258c78a35af368ff63efd501025e6f9bd796b6", "message": "more typing fixes", "committedDate": "2020-02-12T04:25:44Z", "type": "forcePushed"}, {"oid": "9d5ed3e93516bfd51a71651fc66e92abd72252dd", "url": "https://github.com/apache/beam/commit/9d5ed3e93516bfd51a71651fc66e92abd72252dd", "message": "more typing fixes", "committedDate": "2020-02-22T19:28:55Z", "type": "forcePushed"}, {"oid": "9b2ab75152a3d614fa26e42f76d69a3f652f3e4f", "url": "https://github.com/apache/beam/commit/9b2ab75152a3d614fa26e42f76d69a3f652f3e4f", "message": "more typing fixes", "committedDate": "2020-02-23T20:50:15Z", "type": "forcePushed"}, {"oid": "e112249cbf0fdb7daca294b80dfdd57a49b1d653", "url": "https://github.com/apache/beam/commit/e112249cbf0fdb7daca294b80dfdd57a49b1d653", "message": "Fix typing issue with python 3.5.2", "committedDate": "2020-02-24T05:12:25Z", "type": "forcePushed"}, {"oid": "19ba9d8e6f54be306d28b305ade429908035335d", "url": "https://github.com/apache/beam/commit/19ba9d8e6f54be306d28b305ade429908035335d", "message": "Fix typing issue with python 3.5.2", "committedDate": "2020-02-25T17:19:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NTg1MQ==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384665851", "bodyText": "I don't know that we want to restrict this to integral values.", "author": "robertwb", "createdAt": "2020-02-26T18:00:53Z", "path": "sdks/python/apache_beam/io/iobase.py", "diffHunk": "@@ -1289,9 +1289,9 @@ class RestrictionProgress(object):\n   \"\"\"\n   def __init__(self, **kwargs):\n     # Only accept keyword arguments.\n-    self._fraction = kwargs.pop('fraction', None)\n-    self._completed = kwargs.pop('completed', None)\n-    self._remaining = kwargs.pop('remaining', None)\n+    self._fraction = kwargs.pop('fraction', None)  # type: Optional[float]\n+    self._completed = kwargs.pop('completed', None)  # type: Optional[int]", "originalCommit": "19ba9d8e6f54be306d28b305ade429908035335d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3ODQ5Mw==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384678493", "bodyText": "I was a pretty confused by this class, and I think there may actually be some bugs in its handling of None-values, so I tried to do the bare minimum of what I thought was right.  No worries. I will revert this and leave this as a final typing task to someone who understands it.", "author": "chadrik", "createdAt": "2020-02-26T18:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NjU1OA==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384666558", "bodyText": "Why this change? (And below.)", "author": "robertwb", "createdAt": "2020-02-26T18:02:07Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -375,7 +379,7 @@ class DoFnInvoker(object):\n   represented by a given DoFnSignature.\"\"\"\n \n   def __init__(self,\n-               output_processor,  # type: OutputProcessor\n+               output_processor,  # type: _OutputProcessor", "originalCommit": "19ba9d8e6f54be306d28b305ade429908035335d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMDgzNQ==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384700835", "bodyText": "hmmm... well, at the time that I made this change I think it resolved an error, but either I am mistaken or something changed in the module.   I'm rolling this back.", "author": "chadrik", "createdAt": "2020-02-26T19:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NjU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NjcxNg==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384666716", "bodyText": "Same.", "author": "robertwb", "createdAt": "2020-02-26T18:02:25Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -529,7 +530,7 @@ class SimpleInvoker(DoFnInvoker):\n   \"\"\"An invoker that processes elements ignoring windowing information.\"\"\"\n \n   def __init__(self,\n-               output_processor,  # type: OutputProcessor\n+               output_processor,  # type: _OutputProcessor", "originalCommit": "19ba9d8e6f54be306d28b305ade429908035335d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384669757", "bodyText": "I prefer the previous format, where there was single assignment rather than re-assignment. Is there any benefit to typing this?", "author": "robertwb", "createdAt": "2020-02-26T18:08:16Z", "path": "sdks/python/apache_beam/transforms/external_java.py", "diffHunk": "@@ -37,18 +39,19 @@\n \n # Protect against environments where apitools library is not available.\n # pylint: disable=wrong-import-order, wrong-import-position\n+apiclient = None  # type: Optional[types.ModuleType]", "originalCommit": "19ba9d8e6f54be306d28b305ade429908035335d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4OTA5OA==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384689098", "bodyText": "I completely agree.  Unfortunately, this is a syntax error in mypy:\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient  # type: Optional[types.ModuleType]\nexcept ImportError:\n  apiclient = None\nAs is this:\ntry:\n  import apache_beam.runners.dataflow.internal.apiclient as apiclient  # type: Optional[types.ModuleType]\nexcept ImportError:\n  apiclient = None\nThe reason is that type comments are (by design) not capable of doing anything that the new PEP 526 variable annotations are not.  In other words, this is obviously wrong:\ntry:\n  Optional[types.ModuleType]: import apache_beam.runners.dataflow.internal.apiclient as apiclient \nexcept ImportError:\n  apiclient = None\nIn that context, this makes more sense:\napiclient: Optional[types.ModuleType] = None\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient\nexcept ImportError:\n  pass", "author": "chadrik", "createdAt": "2020-02-26T18:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4ODI2OQ==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384788269", "bodyText": "My question is why we need to type apiclient as types.ModuleType at all.", "author": "robertwb", "createdAt": "2020-02-26T21:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNzQyMQ==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384807421", "bodyText": "My question is why we need to type apiclient as types.ModuleType at all.\n\nFair question.\nIf we don't do this (i.e. as with the original code), we get the following error:\napache_beam/transforms/external_java.py:46: error: Incompatible types in assignment (expression has type \"None\", variable has type Module)  [assignment]\n\nTo resolve this, we need to mark apiclient as Optional\n\nwhy can't we save ourselves some headache and leave out of the types.ModuleType part?\napiclient = None  # type: Optional\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient\nexcept ImportError:\n  pass\nIf we do this, apiclient will become Optional[Any]\n\nWhy can't we ignore the error?\nWe can, but then mypy will mark the type as non-Optional, and that would remove the added protections that mypy provides against accidentally using the variable when it's None.\n\nWhy can't we just add the type comment on the original apiclient = None line?\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient\nexcept ImportError:\n  apiclient = None  # type: Optional[types.ModuleType]\nWith this, we get the following error:\napache_beam/transforms/external_java.py:46: error: Name 'apiclient' already defined (by an import)  [no-redef]\n\nThere is only one opportunity to override/influence the inferred type of a variable:  on the first line where it is defined (think of type variable definitions like C/C++, but with python scoping rules).  However, apiclient is defined via an import rather than an assignment, which forces us to preface the import with a variable definition.", "author": "chadrik", "createdAt": "2020-02-26T22:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzNjMwNg==", "url": "https://github.com/apache/beam/pull/10822#discussion_r384836306", "bodyText": "I did some more research on this, and I found this mypy issue: python/mypy#1297\nIt suggests this idiom:\ntry:\n  from apache_beam.runners.dataflow.internal import apiclient as _apiclient\nexcept ImportError:\n  apiclient = None\nelse:\n  apiclient = _apiclient\nThe import is a bit longer and uglier, but it has 2 advantages:\n\nno need to import Optional or ModuleType\nthe idiom I was using was actually making apiclient a generic ModuleType, dropping all knowledge of the members of apache_beam.runners.dataflow.internal.  That's bad!\n\nThe reason this works without explicit Optional annotation that mypy will automatically determine optionality in some cases, like this:\nif some_conditional():\n  x = None\nelse:\n  x = 1\nreveal_type(x)  # Revealed type is 'Union[builtins.int, None]'", "author": "chadrik", "createdAt": "2020-02-26T23:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2OTc1Nw=="}], "type": "inlineReview"}, {"oid": "e60fb10d58dcdad883af7d51672c63590d3e8cd1", "url": "https://github.com/apache/beam/commit/e60fb10d58dcdad883af7d51672c63590d3e8cd1", "message": "fixes", "committedDate": "2020-02-26T19:02:21Z", "type": "forcePushed"}, {"oid": "d16797bb19cb432e0dba1f1ac0064a2730271356", "url": "https://github.com/apache/beam/commit/d16797bb19cb432e0dba1f1ac0064a2730271356", "message": "fixes", "committedDate": "2020-02-26T19:06:17Z", "type": "forcePushed"}, {"oid": "22b349bf337ae5cd0e344c6434382e92bc9f75d9", "url": "https://github.com/apache/beam/commit/22b349bf337ae5cd0e344c6434382e92bc9f75d9", "message": "fixes", "committedDate": "2020-02-26T19:18:53Z", "type": "forcePushed"}, {"oid": "432ca174f82a0ac9cda637ee87d2b815dcb052dd", "url": "https://github.com/apache/beam/commit/432ca174f82a0ac9cda637ee87d2b815dcb052dd", "message": "Improve the idiom used for conditional imports", "committedDate": "2020-02-26T23:47:06Z", "type": "forcePushed"}, {"oid": "7852b4b666129d69cfe0f63fe6dda18854aee5f1", "url": "https://github.com/apache/beam/commit/7852b4b666129d69cfe0f63fe6dda18854aee5f1", "message": "Improve the idiom used for conditional imports", "committedDate": "2020-02-26T23:47:42Z", "type": "forcePushed"}, {"oid": "b6afeb23d9eb909801d3e89aa61ef754a4907a5d", "url": "https://github.com/apache/beam/commit/b6afeb23d9eb909801d3e89aa61ef754a4907a5d", "message": "Improve the idiom used for conditional imports", "committedDate": "2020-02-26T23:49:00Z", "type": "forcePushed"}, {"oid": "13797174bcace9c8b41e3331e1a3b4731d5ababd", "url": "https://github.com/apache/beam/commit/13797174bcace9c8b41e3331e1a3b4731d5ababd", "message": "Fix more issues", "committedDate": "2020-02-27T07:01:44Z", "type": "forcePushed"}, {"oid": "7a50378841d3a7c15ba444b5ab059b6e25bbdb9d", "url": "https://github.com/apache/beam/commit/7a50378841d3a7c15ba444b5ab059b6e25bbdb9d", "message": "more typing fixes", "committedDate": "2020-02-28T17:31:07Z", "type": "commit"}, {"oid": "6ad25c11938ba78935bcec175af405e86d858d9b", "url": "https://github.com/apache/beam/commit/6ad25c11938ba78935bcec175af405e86d858d9b", "message": "Fix typing issue with python 3.5.2", "committedDate": "2020-02-28T17:31:07Z", "type": "commit"}, {"oid": "e5cfa131e8e25f30810054a3c88794237b5c7c91", "url": "https://github.com/apache/beam/commit/e5cfa131e8e25f30810054a3c88794237b5c7c91", "message": "fixes\n\nMore fixes\n\nLint fixes", "committedDate": "2020-02-28T17:31:07Z", "type": "commit"}, {"oid": "aaa5fc2f3db23219f3884d027a68f3ea6275c2ff", "url": "https://github.com/apache/beam/commit/aaa5fc2f3db23219f3884d027a68f3ea6275c2ff", "message": "Address more issues discovered after rebase\n\nLint fix", "committedDate": "2020-02-28T17:31:07Z", "type": "commit"}, {"oid": "2cdde4a2403ecaaf854d96c601e2d47dc244a41d", "url": "https://github.com/apache/beam/commit/2cdde4a2403ecaaf854d96c601e2d47dc244a41d", "message": "Improve the idiom used for conditional imports", "committedDate": "2020-02-28T17:31:07Z", "type": "commit"}, {"oid": "d63d08f65e155c1388da224ea163125ce21ab984", "url": "https://github.com/apache/beam/commit/d63d08f65e155c1388da224ea163125ce21ab984", "message": "Fix more issues\n\nA few more fixes", "committedDate": "2020-02-28T17:31:07Z", "type": "commit"}, {"oid": "114bbc4170c69f1078a0c5807ddc034193f79901", "url": "https://github.com/apache/beam/commit/114bbc4170c69f1078a0c5807ddc034193f79901", "message": "Update to latest mypy version", "committedDate": "2020-02-28T17:31:07Z", "type": "commit"}, {"oid": "114bbc4170c69f1078a0c5807ddc034193f79901", "url": "https://github.com/apache/beam/commit/114bbc4170c69f1078a0c5807ddc034193f79901", "message": "Update to latest mypy version", "committedDate": "2020-02-28T17:31:07Z", "type": "forcePushed"}]}