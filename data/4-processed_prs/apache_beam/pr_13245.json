{"pr_number": 13245, "pr_title": "[BEAM-11075] Go SDK's synthetic source supports hot keys generation", "pr_createdAt": "2020-11-02T13:35:00Z", "pr_url": "https://github.com/apache/beam/pull/13245", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MTk2Mw==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516081963", "bodyText": "Why \"2\"?", "author": "kamilwu", "createdAt": "2020-11-02T16:10:52Z", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -165,10 +175,12 @@ type SourceConfigBuilder struct {\n func DefaultSourceConfig() *SourceConfigBuilder {\n \treturn &SourceConfigBuilder{\n \t\tcfg: SourceConfig{\n-\t\t\tNumElements:   1, // 0 is invalid (drops elements).\n-\t\t\tInitialSplits: 1, // 0 is invalid (drops elements).\n-\t\t\tKeySize:       8, // 0 is invalid (drops elements).\n-\t\t\tValueSize:     8, // 0 is invalid (drops elements).\n+\t\t\tNumElements:    1, // 0 is invalid (drops elements).\n+\t\t\tInitialSplits:  1, // 0 is invalid (drops elements).\n+\t\t\tKeySize:        8, // 0 is invalid (drops elements).\n+\t\t\tValueSize:      8, // 0 is invalid (drops elements).\n+\t\t\tHotKeys:        2, // 0 is invalid (drops elements).", "originalCommit": "e88a4588d5fee0ed8f275f61e54f9858b47f8eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NTkyMg==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516085922", "bodyText": "By default, there should be no hot keys at all (every key should be unique).", "author": "kamilwu", "createdAt": "2020-11-02T16:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMjI5OA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516502298", "bodyText": "NumElements:    1, // 0 is invalid (drops elements).\nInitialSplits:  1, // 0 is invalid (drops elements).\nKeySize:        8, // 0 is invalid (drops elements).\nValueSize:      8, // 0 is invalid (drops elements).\nNumHotKeys:     0,\nHotKeyFraction: 0,", "author": "tszerszen", "createdAt": "2020-11-03T08:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4MTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NDM5NQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516084395", "bodyText": "Python tests use num_hot_keys, let's do the same in Go. hot_key_fraction is correct.", "author": "kamilwu", "createdAt": "2020-11-02T16:14:21Z", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -262,8 +281,10 @@ func (b *SourceConfigBuilder) BuildFromJSON(jsonData []byte) SourceConfig {\n // synthetic source. It should be created via a SourceConfigBuilder, not by\n // directly initializing it (the fields are public to allow encoding).\n type SourceConfig struct {\n-\tNumElements   int `json:\"num_records\"`\n-\tInitialSplits int `json:\"initial_splits\"`\n-\tKeySize       int `json:\"key_size\"`\n-\tValueSize     int `json:\"value_size\"`\n+\tNumElements    int `json:\"num_records\"`\n+\tInitialSplits  int `json:\"initial_splits\"`\n+\tHotKeys        int `json:\"hot_keys\"`", "originalCommit": "e88a4588d5fee0ed8f275f61e54f9858b47f8eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA5MTExOQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516091119", "bodyText": "I think you forgot about setters for your new variables. Please add them, because right now, we can only set them via JSON.", "author": "kamilwu", "createdAt": "2020-11-02T16:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NDM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMzMxNQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516503315", "bodyText": "NumHotKeys     int     `json:\"num_hot_keys\"`\n\tHotKeyFraction float64 `json:\"hot_key_fraction\"`", "author": "tszerszen", "createdAt": "2020-11-03T08:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NDM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMzYwMA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516503600", "bodyText": "// NumHotKeys determines the number of keys with the same value among\n// generated keys.\n//\n// Valid values are in the range of [0, ...] and the default value is 0.\nfunc (b *SourceConfigBuilder) NumHotKeys(val int) *SourceConfigBuilder {\n\tb.cfg.NumHotKeys = val\n\treturn b\n}\n\n// HotKeyFraction determines the value of hot key fraction.\n//\n// Valid values are floating point numbers from 0 to 1.\nfunc (b *SourceConfigBuilder) HotKeyFraction(val float64) *SourceConfigBuilder {\n\tb.cfg.HotKeyFraction = val\n\treturn b\n}", "author": "tszerszen", "createdAt": "2020-11-03T08:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NDM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4ODQ1Mw==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516088453", "bodyText": "HotKeyFraction is supposed to be a floating point number from 0 to 1, right?", "author": "kamilwu", "createdAt": "2020-11-02T16:20:16Z", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -235,6 +247,12 @@ func (b *SourceConfigBuilder) Build() SourceConfig {\n \tif b.cfg.ValueSize <= 0 {\n \t\tpanic(fmt.Sprintf(\"SourceConfig.ValueSize must be >= 1. Got: %v\", b.cfg.ValueSize))\n \t}\n+\tif b.cfg.HotKeys <= 0 {\n+\t\tpanic(fmt.Sprintf(\"SourceConfig.HotKeys must be >= 1. Got: %v\", b.cfg.HotKeys))\n+\t}\n+\tif b.cfg.HotKeyFraction <= 0 {\n+\t\tpanic(fmt.Sprintf(\"SourceConfig.HotKeyFraction must be >= 1. Got: %v\", b.cfg.HotKeyFraction))", "originalCommit": "e88a4588d5fee0ed8f275f61e54f9858b47f8eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMzgzNg==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516503836", "bodyText": "if b.cfg.HotKeyFraction < 0 || b.cfg.HotKeyFraction > 1 {\n\t\tpanic(fmt.Sprintf(\"SourceConfig.HotKeyFraction must be a floating point number from 0 and 1. Got: %v\", b.cfg.NumHotKeys))\n\t}", "author": "tszerszen", "createdAt": "2020-11-03T08:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4ODQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA5MTgzMQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516091831", "bodyText": "num_keys -> num_hot_keys", "author": "kamilwu", "createdAt": "2020-11-02T16:25:03Z", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -246,7 +264,8 @@ func (b *SourceConfigBuilder) Build() SourceConfig {\n // {\n // \t \"num_records\": 5,\n // \t \"key_size\": 5,\n-// \t \"value_size\": 5\n+// \t \"value_size\": 5,\n+//\t \"num_keys\": 5,", "originalCommit": "e88a4588d5fee0ed8f275f61e54f9858b47f8eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwNDE4Mw==", "url": "https://github.com/apache/beam/pull/13245#discussion_r516504183", "bodyText": "// {\n// \t \"num_records\": 5,\n// \t \"key_size\": 5,\n// \t \"value_size\": 5\n// \t \"value_size\": 5,\n//\t \"num_hot_keys\": 5,\n// }", "author": "tszerszen", "createdAt": "2020-11-03T08:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA5MTgzMQ=="}], "type": "inlineReview"}, {"oid": "493eea026e613d40c48cbd4588ed227379d7a210", "url": "https://github.com/apache/beam/commit/493eea026e613d40c48cbd4588ed227379d7a210", "message": "[BEAM-11075] - GO SDK - Synthetic source HotKeys and HotKeysFraction", "committedDate": "2020-11-03T08:18:24Z", "type": "forcePushed"}, {"oid": "da2a652ec242dae35bfaefdebf285a94b1b67173", "url": "https://github.com/apache/beam/commit/da2a652ec242dae35bfaefdebf285a94b1b67173", "message": "[BEAM-11075] - GO SDK - Synthetic source HotKeys and HotKeysFraction", "committedDate": "2020-11-03T08:13:25Z", "type": "forcePushed"}, {"oid": "31fb1dc9167cde74b593c26ec2bdac5a84c8b8ce", "url": "https://github.com/apache/beam/commit/31fb1dc9167cde74b593c26ec2bdac5a84c8b8ce", "message": "[BEAM-11075] - GO SDK - Synthetic source HotKeys and HotKeysFraction", "committedDate": "2020-11-03T08:23:07Z", "type": "commit"}, {"oid": "31fb1dc9167cde74b593c26ec2bdac5a84c8b8ce", "url": "https://github.com/apache/beam/commit/31fb1dc9167cde74b593c26ec2bdac5a84c8b8ce", "message": "[BEAM-11075] - GO SDK - Synthetic source HotKeys and HotKeysFraction", "committedDate": "2020-11-03T08:23:07Z", "type": "forcePushed"}, {"oid": "1794c6947d22f06f461a3779650bca0a04e64f31", "url": "https://github.com/apache/beam/commit/1794c6947d22f06f461a3779650bca0a04e64f31", "message": "[BEAM-11075] - GO SDK - Tests for synthetic source HotKeys", "committedDate": "2020-11-04T08:56:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxODQyNA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517218424", "bodyText": "I think this whole logic could be simplified. What we need to do is to count distinct elements in the keys slice. So it can look something like this:\ncounter := make(map[byte]int) // no need to convert to string\nfor _, key := range keys {\n    counter[key]++\n}\nAfter that you can use len(keys) and len(counter) in assertions.", "author": "kamilwu", "createdAt": "2020-11-04T09:48:43Z", "path": "sdks/go/pkg/beam/io/synthetic/source_test.go", "diffHunk": "@@ -162,6 +164,83 @@ func TestSourceConfig_BuildFromJSON(t *testing.T) {\n \t}\n }\n \n+// TestSourceConfig_NumHotKeys tests that setting the number of hot keys\n+// for a synthetic source works correctly.\n+func TestSourceConfigBuilder_NumHotKeys(t *testing.T) {\n+\ttests := []struct {\n+\t\telms    int\n+\t\thotKeys int\n+\t}{\n+\t\t{elms: 15, hotKeys: 2},\n+\t\t{elms: 30, hotKeys: 10},\n+\t\t{elms: 50, hotKeys: 25},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(elm = %v)\", test.hotKeys), func(t *testing.T) {\n+\t\t\tdfn := sourceFn{}\n+\t\t\tcfg := DefaultSourceConfig()\n+\t\t\tcfg.NumElements(test.elms)\n+\t\t\tcfg.HotKeyFraction(1.0)\n+\t\t\tcfg.NumHotKeys(test.hotKeys)\n+\n+\t\t\tkeys, _, err := simulateSourceFn(t, &dfn, cfg.Build())\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"Failure processing sourceFn: %v\", err)\n+\t\t\t}\n+\n+\t\t\ttype val struct {\n+\t\t\t\tnum      int\n+\t\t\t\tisHotKey bool\n+\t\t\t}\n+\n+\t\t\tm := make(map[string]val)", "originalCommit": "1794c6947d22f06f461a3779650bca0a04e64f31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1NDkxNA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517254914", "bodyText": "Thank you for help!\n@kamilwu wrote:\ncounter := make(map[byte]int) // no need to convert to string\nI think it should be byte array\ncounter := make(map[[]byte]int) \nAnd you can't use byte array in map.\nfor _, key := range keys {\n    counter[key]++\n}\nYou're right. In the last commit I removed the struct and used direct counter, also I added support for testing HotKeyFraction. However I'm a bit worried that testing HotKeyFraction could be Flaky, what do you think?", "author": "tszerszen", "createdAt": "2020-11-04T10:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxODQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4NTU5Ng==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517285596", "bodyText": "Yes, you're right, it should be a byte array. We can't use arrays/slices as a key, but we can convert []byte to string. You've already done this, so this is good!\n\nHowever I'm a bit worried that testing HotKeyFraction could be Flaky, what do you think?\n\nYes, there is some probability that this would happen unless we mock the generator. Let's set HotKeyFraction to 1.0. Testing only NumHotKeys is fine for me.", "author": "kamilwu", "createdAt": "2020-11-04T11:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxODQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4OTE5NA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517289194", "bodyText": "@kamilwu wrote:\nLet's set HotKeyFraction to 1.0. Testing only NumHotKeys is fine for me.\nI commented test cases with HotKeyFraction < 1.0 and left the logic behind it. Is that ok?", "author": "tszerszen", "createdAt": "2020-11-04T11:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxODQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NTI4OA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517295288", "bodyText": "I left the comment below.", "author": "kamilwu", "createdAt": "2020-11-04T12:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxODQyNA=="}], "type": "inlineReview"}, {"oid": "4fb85a5832faa316d13572fbabe8b0cee1cec43b", "url": "https://github.com/apache/beam/commit/4fb85a5832faa316d13572fbabe8b0cee1cec43b", "message": "GO SDK - Tests for synthetic source hotKeyFraction", "committedDate": "2020-11-04T10:36:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2MzkwNQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517263905", "bodyText": "Do you really need nested iterations? If I'm not mistaken, this code would be just fine:\nfor _, key := range keys {\n  encoded := hex.EncodeToString(key)\n  m[encoded]++", "author": "kamilwu", "createdAt": "2020-11-04T11:03:02Z", "path": "sdks/go/pkg/beam/io/synthetic/source_test.go", "diffHunk": "@@ -168,62 +169,48 @@ func TestSourceConfig_BuildFromJSON(t *testing.T) {\n // for a synthetic source works correctly.\n func TestSourceConfigBuilder_NumHotKeys(t *testing.T) {\n \ttests := []struct {\n-\t\telms    int\n-\t\thotKeys int\n+\t\telms           int\n+\t\thotKeys        int\n+\t\thotKeyFraction float64\n \t}{\n-\t\t{elms: 15, hotKeys: 2},\n-\t\t{elms: 30, hotKeys: 10},\n-\t\t{elms: 50, hotKeys: 25},\n+\t\t{elms: 15, hotKeys: 2, hotKeyFraction: 1.0},\n+\t\t{elms: 30, hotKeys: 10, hotKeyFraction: 1.0},\n+\t\t{elms: 50, hotKeys: 25, hotKeyFraction: 1.0},\n+\t\t{elms: 30, hotKeys: 10, hotKeyFraction: 0.5},\n+\t\t{elms: 50, hotKeys: 25, hotKeyFraction: 0.75},\n \t}\n \tfor _, test := range tests {\n \t\ttest := test\n \t\tt.Run(fmt.Sprintf(\"(elm = %v)\", test.hotKeys), func(t *testing.T) {\n \t\t\tdfn := sourceFn{}\n \t\t\tcfg := DefaultSourceConfig()\n \t\t\tcfg.NumElements(test.elms)\n-\t\t\tcfg.HotKeyFraction(1.0)\n+\t\t\tcfg.HotKeyFraction(test.hotKeyFraction)\n \t\t\tcfg.NumHotKeys(test.hotKeys)\n \n \t\t\tkeys, _, err := simulateSourceFn(t, &dfn, cfg.Build())\n \t\t\tif err != nil {\n \t\t\t\tt.Errorf(\"Failure processing sourceFn: %v\", err)\n \t\t\t}\n \n-\t\t\ttype val struct {\n-\t\t\t\tnum      int\n-\t\t\t\tisHotKey bool\n-\t\t\t}\n-\n-\t\t\tm := make(map[string]val)\n+\t\t\tm := make(map[string]int)\n \t\t\tfor i := 0; i < len(keys); i++ {", "originalCommit": "4fb85a5832faa316d13572fbabe8b0cee1cec43b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2ODczOA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517268738", "bodyText": "You're right, thank you I pushed the fix.", "author": "tszerszen", "createdAt": "2020-11-04T11:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2MzkwNQ=="}], "type": "inlineReview"}, {"oid": "c8641b6232021b4c4230b4fffd1bf8991ea3dc42", "url": "https://github.com/apache/beam/commit/c8641b6232021b4c4230b4fffd1bf8991ea3dc42", "message": "fix: User range when counting keys instead of nested for loops", "committedDate": "2020-11-04T11:10:50Z", "type": "commit"}, {"oid": "3aa11c34329732cc1331c720849747f3c68bf8dc", "url": "https://github.com/apache/beam/commit/3aa11c34329732cc1331c720849747f3c68bf8dc", "message": "fix: don't run flaky hotKeyFraction tests only with hotKeyFraction 1.0", "committedDate": "2020-11-04T11:48:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDg1Mg==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517294852", "bodyText": "In general, we shouldn't commit commented out code. That being said, there are two solutions:\n\nremove this completely,\nif you feel that hotKeyFraction should be tested, but not necessarily now for whatever reason, create a // TODO(BEAM-xxx) and describe what should be done here.", "author": "kamilwu", "createdAt": "2020-11-04T12:01:59Z", "path": "sdks/go/pkg/beam/io/synthetic/source_test.go", "diffHunk": "@@ -175,8 +175,8 @@ func TestSourceConfigBuilder_NumHotKeys(t *testing.T) {\n \t\t{elms: 15, hotKeys: 2, hotKeyFraction: 1.0},\n \t\t{elms: 30, hotKeys: 10, hotKeyFraction: 1.0},\n \t\t{elms: 50, hotKeys: 25, hotKeyFraction: 1.0},\n-\t\t{elms: 30, hotKeys: 10, hotKeyFraction: 0.5},\n-\t\t{elms: 50, hotKeys: 25, hotKeyFraction: 0.75},\n+\t\t// {elms: 30, hotKeys: 10, hotKeyFraction: 0.5}, tests for hotKeyFraction < 1.0 could be Flaky", "originalCommit": "3aa11c34329732cc1331c720849747f3c68bf8dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5Njc5OA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517296798", "bodyText": "I got it, I removed Hot Key Fraction testing completely.", "author": "tszerszen", "createdAt": "2020-11-04T12:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI5NDg1Mg=="}], "type": "inlineReview"}, {"oid": "09b9e46ca0cd626a216d4235e6fecd4c2ebd8df4", "url": "https://github.com/apache/beam/commit/09b9e46ca0cd626a216d4235e6fecd4c2ebd8df4", "message": "fix: remove hot key fraction testing", "committedDate": "2020-11-04T12:05:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc3ODY2MA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517778660", "bodyText": "Nit: The style in the Go SDK is to separate standard Go package imports from other others. So in this case it's actually the beam/core/sdf import that should be moved to the lower group, separate from the standard Go packages.", "author": "youngoli", "createdAt": "2020-11-05T03:57:09Z", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -26,13 +26,12 @@ import (\n \t\"bytes\"\n \t\"encoding/json\"\n \t\"fmt\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"", "originalCommit": "09b9e46ca0cd626a216d4235e6fecd4c2ebd8df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzMzQyOA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517833428", "bodyText": "Thank you for your review, I reorganised the imports that way.", "author": "tszerszen", "createdAt": "2020-11-05T07:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc3ODY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MTkxNQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517781915", "bodyText": "It's unnecessary to create a new sourceFn here just to use the rng field. You should be able to get the same behavior by using the rand.Rand object directly.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tgenerator := sourceFn{}\n          \n          \n            \n            \t\tgenerator.rng = rand.New(rand.NewSource(i))\n          \n          \n            \n            \t\trandomSample := generator.rng.Float64()\n          \n          \n            \n            \t\tgenerator := rand.New(rand.NewSource(i))\n          \n          \n            \n            \t\trandomSample := generator.Float64()", "author": "youngoli", "createdAt": "2020-11-05T04:11:51Z", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -131,8 +130,19 @@ func (fn *sourceFn) ProcessElement(rt *sdf.LockRTracker, config SourceConfig, em\n \tfor i := rt.GetRestriction().(offsetrange.Restriction).Start; rt.TryClaim(i) == true; i++ {\n \t\tkey := make([]byte, config.KeySize)\n \t\tval := make([]byte, config.ValueSize)\n-\t\tif _, err := fn.rng.Read(key); err != nil {\n-\t\t\treturn err\n+\t\tgenerator := sourceFn{}\n+\t\tgenerator.rng = rand.New(rand.NewSource(i))\n+\t\trandomSample := generator.rng.Float64()", "originalCommit": "09b9e46ca0cd626a216d4235e6fecd4c2ebd8df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzMzc4MQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517833781", "bodyText": "You're right I fixed it, thank you.", "author": "tszerszen", "createdAt": "2020-11-05T07:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4ODE0OQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517788149", "bodyText": "I would avoid making local instances of rand.Rand here unless you have a very good reason here. Is the reason you're creating new, local instances of rand.Rand and seeding them with the restriction positions because you want to get completely deterministic behavior, regardless of any splitting that might occur on the restriction?\nIf so: Then be aware that this implementation is going to get identical results per input (in this case, per SourceConfig). For example, if you make two SourceConfigs for 10 elements each, then both of them will seed these generators with the numbers 0-9, which can lead to strangely identical results. If you want purely deterministic output that is still different per SourceConfig, then each SourceConfig will probably need some kind of unique but deterministic salt that can be added to these numbers (example: rand.NewSource(i + fn.salt))).\nOn the other hand, if this check and the hotkey distributions don't need to be deterministic, then I would simplify a bit and just use the existing Rand object (fn.rng) more. Or, if you need to customize the rng for test purposes, you can add more randWrapper fields to the SourceFn struct. I think the only spot where you would need deterministic values in that case is for filling out the actual hotkey value, and even then I think there's room for optimizing so we don't constantly create and reseed a rand.Rand.", "author": "youngoli", "createdAt": "2020-11-05T04:38:49Z", "path": "sdks/go/pkg/beam/io/synthetic/source.go", "diffHunk": "@@ -131,8 +130,19 @@ func (fn *sourceFn) ProcessElement(rt *sdf.LockRTracker, config SourceConfig, em\n \tfor i := rt.GetRestriction().(offsetrange.Restriction).Start; rt.TryClaim(i) == true; i++ {\n \t\tkey := make([]byte, config.KeySize)\n \t\tval := make([]byte, config.ValueSize)\n-\t\tif _, err := fn.rng.Read(key); err != nil {\n-\t\t\treturn err\n+\t\tgenerator := sourceFn{}\n+\t\tgenerator.rng = rand.New(rand.NewSource(i))", "originalCommit": "09b9e46ca0cd626a216d4235e6fecd4c2ebd8df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNTQ4Nw==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517835487", "bodyText": "@youngoli thank you for your feedback. Since I have the most experience with Python, when I was implementing it I was following the way it was implemented in Python.\nIn Python generator is seed with each index, therefore I did the same in Go, and I seed the generator with a NewSource on each iteration. There is no salt in config in other SDKs implementation and the idea behind it was: To be consistent with other SDKs to be able to compare them.\n  def _gen_kv_pair(self, generator, index):\n    generator.seed(index)\n    rand = generator.random_sample()\n\n    # Determines whether to generate hot key or not.\n    if rand < self._hot_key_fraction:\n      # Generate hot key.\n      # An integer is randomly selected from the range [0, numHotKeys-1]\n      # with equal probability.\n      generator_hot = Generator(index % self._num_hot_keys)\n      bytes_ = generator_hot.bytes(self._key_size), generator.bytes(\n        self._value_size)\n    else:\n      bytes_ = generator.bytes(self.element_size)\n      bytes_ = bytes_[:self._key_size], bytes_[self._key_size:]\n    return bytes_\n\n  def read(self, range_tracker):\n    index = range_tracker.start_position()\n    generator = Generator()\n    while range_tracker.try_claim(index):\n      time.sleep(self._sleep_per_input_record_sec)\n      yield self._gen_kv_pair(generator, index)\n      index += 1", "author": "tszerszen", "createdAt": "2020-11-05T07:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4ODE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1MjgxNQ==", "url": "https://github.com/apache/beam/pull/13245#discussion_r518452815", "bodyText": "Hm... I have objections with the way that one is coded too, but that's something for me to discuss with the original author. It's definitely reasonable to match the Python implementation.\nIn that case, my only remaining advice is, instead of creating a new Rand object with a new source each time you want to reseed (in other words, in each position), create the Rand objects in the beginning of ProcessElement and then call Rand.Seed when you want to reseed.", "author": "youngoli", "createdAt": "2020-11-06T00:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4ODE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU2NTE0Nw==", "url": "https://github.com/apache/beam/pull/13245#discussion_r518565147", "bodyText": "@youngoli  Thank you, I pushed the changes you suggested.", "author": "tszerszen", "createdAt": "2020-11-06T07:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4ODE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5MDA4OA==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517790088", "bodyText": "I don't think the numOfAllKeys check here is necessary. It essentially boils down to counting the number of elements emitted which is already done by other unit tests. The only reason I can see for this is if you suspect that enabling hot keys might cause elements to drop, when they wouldn't otherwise, but based on your implementation I don't think that's something to worry about.", "author": "youngoli", "createdAt": "2020-11-05T04:46:47Z", "path": "sdks/go/pkg/beam/io/synthetic/source_test.go", "diffHunk": "@@ -162,6 +163,59 @@ func TestSourceConfig_BuildFromJSON(t *testing.T) {\n \t}\n }\n \n+// TestSourceConfig_NumHotKeys tests that setting the number of hot keys\n+// for a synthetic source works correctly.\n+func TestSourceConfigBuilder_NumHotKeys(t *testing.T) {\n+\ttests := []struct {\n+\t\telms    int\n+\t\thotKeys int\n+\t}{\n+\t\t{elms: 15, hotKeys: 2},\n+\t\t{elms: 30, hotKeys: 10},\n+\t\t{elms: 50, hotKeys: 25},\n+\t}\n+\tfor _, test := range tests {\n+\t\ttest := test\n+\t\tt.Run(fmt.Sprintf(\"(elm = %v)\", test.hotKeys), func(t *testing.T) {\n+\t\t\tdfn := sourceFn{}\n+\t\t\tcfg := DefaultSourceConfig()\n+\t\t\tcfg.NumElements(test.elms)\n+\t\t\tcfg.HotKeyFraction(1.0)\n+\t\t\tcfg.NumHotKeys(test.hotKeys)\n+\n+\t\t\tkeys, _, err := simulateSourceFn(t, &dfn, cfg.Build())\n+\t\t\tif err != nil {\n+\t\t\t\tt.Errorf(\"Failure processing sourceFn: %v\", err)\n+\t\t\t}\n+\n+\t\t\tm := make(map[string]int)\n+\t\t\tfor _, key := range keys {\n+\t\t\t\tencoded := hex.EncodeToString(key)\n+\t\t\t\tm[encoded]++\n+\t\t\t}\n+\n+\t\t\tnumOfHotKeys := 0\n+\t\t\tnumOfAllKeys := 0\n+\t\t\tfor _, element := range m {\n+\t\t\t\tnumOfAllKeys += element\n+\t\t\t\tif element > 1 {\n+\t\t\t\t\tnumOfHotKeys += 1\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif numOfAllKeys != test.elms {", "originalCommit": "09b9e46ca0cd626a216d4235e6fecd4c2ebd8df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzMjk0Mw==", "url": "https://github.com/apache/beam/pull/13245#discussion_r517832943", "bodyText": "Thank you, I removed this check.", "author": "tszerszen", "createdAt": "2020-11-05T07:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5MDA4OA=="}], "type": "inlineReview"}, {"oid": "6f510db4e642cd733c45b2365e8b761f016405d5", "url": "https://github.com/apache/beam/commit/6f510db4e642cd733c45b2365e8b761f016405d5", "message": "fix: dont create new sourceFn and remove check numOfAllElms for hot keys test", "committedDate": "2020-11-05T06:55:01Z", "type": "commit"}, {"oid": "fd8a7693dd642afdaa0ae4b7dffb7dd382b826a0", "url": "https://github.com/apache/beam/commit/fd8a7693dd642afdaa0ae4b7dffb7dd382b826a0", "message": "fix: create generator before for loop and seed it inside fori", "committedDate": "2020-11-06T07:22:02Z", "type": "commit"}]}