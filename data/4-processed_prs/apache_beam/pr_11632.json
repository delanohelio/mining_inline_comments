{"pr_number": 11632, "pr_title": "[BEAM-7746] Fix type errors and enable checks for apache_beam.dataframe.*", "pr_createdAt": "2020-05-07T19:11:27Z", "pr_url": "https://github.com/apache/beam/pull/11632", "timeline": [{"oid": "610e28988cd6caa66ab47f50d057d028988e39cf", "url": "https://github.com/apache/beam/commit/610e28988cd6caa66ab47f50d057d028988e39cf", "message": "[BEAM-7746] Fix type errors and enable checks for apache_beam.dataflow.", "committedDate": "2020-05-07T19:10:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA==", "url": "https://github.com/apache/beam/pull/11632#discussion_r421789390", "bodyText": "Scoping these imports is not a bad idea since it keeps the module namespace cleaner, but there are a couple of issues with this:\n\nonce we get to python 3.x, and move from type comments to annotations, this will fail, as we'll be referencing non-existent objects in our annotations.\nit's not consistent with how we've done this throughout the rest of the code", "author": "chadrik", "createdAt": "2020-05-07T20:57:33Z", "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -16,13 +16,23 @@\n \n from __future__ import absolute_import\n \n+import typing\n+\n import inspect\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:\n+  # pylint: disable=ungrouped-imports\n+  from typing import Any\n+  from typing import Dict\n+  from typing import Tuple\n+  from typing import Union", "originalCommit": "610e28988cd6caa66ab47f50d057d028988e39cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MDExNg==", "url": "https://github.com/apache/beam/pull/11632#discussion_r421790116", "bodyText": "I should mention that a solution to the first issue is that we can refer to these types as strings, such as 'Any', but that's certainly a lot more awkward, and developers are likely to forget to do so and get confused/frustrated.", "author": "chadrik", "createdAt": "2020-05-07T20:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MTc3Mg==", "url": "https://github.com/apache/beam/pull/11632#discussion_r421871772", "bodyText": "I actually prefer unconditionally importing them, but was just trying to avoid lint issues (and did see this pattern elsewhere). Changed.", "author": "robertwb", "createdAt": "2020-05-08T00:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzMzI3OA==", "url": "https://github.com/apache/beam/pull/11632#discussion_r422233278", "bodyText": "So lint complains about unguarded imports, so I put them back. We'll just to a massive sweep to fix these when we change to use type annotations.", "author": "robertwb", "createdAt": "2020-05-08T16:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3Mzg0NQ==", "url": "https://github.com/apache/beam/pull/11632#discussion_r422273845", "bodyText": "What's the lint error?   Is it because of the unused typing import?\nI'm confused because unguarded typing imports are used all over the beam codebase without any lint errors.  Check pipeline, pipeline_context, pipeline_options, for starters.", "author": "chadrik", "createdAt": "2020-05-08T17:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2MzAzNw==", "url": "https://github.com/apache/beam/pull/11632#discussion_r423863037", "bodyText": "I had a look at the lint errors, and they are legitimate, but scoping the imports is not the right solution.\nFor example, these:\n\u00a0 | apache_beam/dataframe/frame_base.py:21:0: W0611: Unused Any imported from typing (unused-import)\n\u00a0 | apache_beam/dataframe/frame_base.py:23:0: W0611: Unused Tuple imported from typing (unused-import)\u00a0\n\u00a0 | apache_beam/dataframe/frame_base.py:24:0: W0611: Unused Union imported from typing (unused-import)\n\nAny, Tuple, and Union aren't used in this module. Dict is the only typing import that is used.", "author": "chadrik", "createdAt": "2020-05-12T16:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjY5Ng==", "url": "https://github.com/apache/beam/pull/11632#discussion_r423906696", "bodyText": "Note that pylint is pretty good about detecting the use of typing imports, even in comments.  I have encountered a few edge cases but I reported them and they were fixed pretty quickly.\nThe only issue I know of in the version of pylint that we're using is with typing.BinaryIO.  You'll notice a few lines like these in the code:\nfrom typing import BinaryIO  # pylint: disable=unused-import\nI reported this bug and it's been fixed, so we can actually get rid of these exceptions if we upgrade to the latest pylint.", "author": "chadrik", "createdAt": "2020-05-12T17:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MTc2Ng==", "url": "https://github.com/apache/beam/pull/11632#discussion_r429361766", "bodyText": "This note hasn't been addressed:\n\nI had a look at the lint errors, and they are legitimate, but scoping the imports is not the right solution.\n\nsee above.", "author": "chadrik", "createdAt": "2020-05-22T17:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNTA0NA==", "url": "https://github.com/apache/beam/pull/11632#discussion_r430715044", "bodyText": "Oh, yes. Thanks for catching this. Fixed.", "author": "robertwb", "createdAt": "2020-05-26T21:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxOTk3NA==", "url": "https://github.com/apache/beam/pull/11632#discussion_r430719974", "bodyText": "I think it still needs to be fixed for dataframe.convert.", "author": "chadrik", "createdAt": "2020-05-26T21:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg0ODA5Mg==", "url": "https://github.com/apache/beam/pull/11632#discussion_r430848092", "bodyText": "[sigh] It still didn't like PCollection. apache_beam/dataframe/transforms.py:30:0: W0611: Unused PCollection imported from apache_beam.pvalue (unused-import). But the rest are OK.", "author": "robertwb", "createdAt": "2020-05-27T04:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MTcxMg==", "url": "https://github.com/apache/beam/pull/11632#discussion_r431251712", "bodyText": "And pandas needs to be guarded. Hopefully that should be it. PTAL.", "author": "robertwb", "createdAt": "2020-05-27T15:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4OTM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjY0OA==", "url": "https://github.com/apache/beam/pull/11632#discussion_r421796648", "bodyText": "do we want to cover the List[T] case for valueish?\nAlternately, do we wan to make this more generic:\ndef _flatten(\n    valueish,  # type: Union[T, Iterable[T], Mapping[Any, T]]\n    root=(),  # type: Tuple[Any, ...]\n    ):\n  # type: (...) -> Dict[Tuple[Any, ...], T]\n  \"\"\"Given a nested structure of dicts, tuples, and lists, return a flat\n  dictionary where the values are the leafs and the keys are the \"paths\" to\n  these leaves.\n\n  For example `{a: x, b: (y, z)}` becomes `{(a,): x, (b, 0): y, (b, 1): c}`.\n  \"\"\"\n  if isinstance(valueish, typing.Mapping):\n    return _dict_union(_flatten(v, root + (k, )) for k, v in valueish.items())\n  elif isinstance(valueish, typing.Iterable):\n    return _dict_union(\n        _flatten(v, root + (ix, )) for ix, v in enumerate(valueish))\n  else:\n    return {root: valueish}\nAnother thought, is it valid / worthwhile to create a relationship between valueish, root, and the result key?:\ndef _flatten(\n    valueish,  # type: Union[T, Iterable[T], Mapping[U, T]]\n    root=(),  # type: Tuple[U, ...]\n    ):\n  # type: (...) -> Dict[Tuple[U, ...], T]", "author": "chadrik", "createdAt": "2020-05-07T21:11:02Z", "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -248,7 +261,12 @@ def _dict_union(dicts):\n   return result\n \n \n-def _flatten(valueish, root=()):\n+def _flatten(\n+    valueish,  # type: Union[T, Tuple[T, ...], Dict[Any, T]]", "originalCommit": "610e28988cd6caa66ab47f50d057d028988e39cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5OTEwMw==", "url": "https://github.com/apache/beam/pull/11632#discussion_r421799103", "bodyText": "I should mention that typing provides a lot of opportunity to go down rabbit-holes, so the right answer is often \"it would be more accurate, but it's not that valuable\".   A common motivator behind investing in accurately typing utility functions is when it allows you to avoid adding manual / explicit types or casts elsewhere in the code.   Imagine a scenario where mypy knows key of the valueish map, but after it passes through _flatten, you need to re-type the result because it becomes Any.", "author": "chadrik", "createdAt": "2020-05-07T21:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODQ5MQ==", "url": "https://github.com/apache/beam/pull/11632#discussion_r421878491", "bodyText": "Generally I'd agree that Iterable/Mapping would be preferable, but here I want to be restrictive about the kinds of values I decompose.\nThe keys types of the mapping would be Union[None, int, U], so you'd have to cast anyway, so I think it's simpler to leave as is.\nStill, good food for thought.", "author": "robertwb", "createdAt": "2020-05-08T01:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjY0OA=="}], "type": "inlineReview"}, {"oid": "76339b7a45aa67a61c4be8582db4a39ff0c46ffb", "url": "https://github.com/apache/beam/commit/76339b7a45aa67a61c4be8582db4a39ff0c46ffb", "message": "fixup: refactor imporgs, generalize typing", "committedDate": "2020-05-08T01:01:07Z", "type": "commit"}, {"oid": "d9a6ede93da12058f0d15a25a1c85c0ad37863fd", "url": "https://github.com/apache/beam/commit/d9a6ede93da12058f0d15a25a1c85c0ad37863fd", "message": "use dict, not mapping", "committedDate": "2020-05-08T01:02:10Z", "type": "commit"}, {"oid": "5038d09df4b43a9e3df8d3d7bb213c1f8408b1f7", "url": "https://github.com/apache/beam/commit/5038d09df4b43a9e3df8d3d7bb213c1f8408b1f7", "message": "restore guarded imports to make lint happy", "committedDate": "2020-05-08T16:12:39Z", "type": "commit"}, {"oid": "96528748f8537e18fb371f94d20aea34f59cdd78", "url": "https://github.com/apache/beam/commit/96528748f8537e18fb371f94d20aea34f59cdd78", "message": "fix types the right way", "committedDate": "2020-05-26T21:20:40Z", "type": "commit"}, {"oid": "21c41432afb6632e60a46a1ca5c7932cd48c8ec8", "url": "https://github.com/apache/beam/commit/21c41432afb6632e60a46a1ca5c7932cd48c8ec8", "message": "fix convert", "committedDate": "2020-05-27T00:09:28Z", "type": "commit"}, {"oid": "5ce65b6d079f807a4bb5858b2fd0c98349e69b2b", "url": "https://github.com/apache/beam/commit/5ce65b6d079f807a4bb5858b2fd0c98349e69b2b", "message": "re-guard PCollection", "committedDate": "2020-05-27T04:17:43Z", "type": "commit"}, {"oid": "289cd34628c6e1b3ddbe164335ff52485b27e8d7", "url": "https://github.com/apache/beam/commit/289cd34628c6e1b3ddbe164335ff52485b27e8d7", "message": "also guard pandas import", "committedDate": "2020-05-27T15:52:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NDE1Mg==", "url": "https://github.com/apache/beam/pull/11632#discussion_r431264152", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            from typing import Any\n          \n          \n            \n            from typing import TYPE_CHECKING\n          \n          \n            \n            from typing import Any", "author": "chadrik", "createdAt": "2020-05-27T16:07:42Z", "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -17,12 +17,20 @@\n from __future__ import absolute_import\n \n import inspect\n+from typing import Any", "originalCommit": "289cd34628c6e1b3ddbe164335ff52485b27e8d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NDU2OA==", "url": "https://github.com/apache/beam/pull/11632#discussion_r431264568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            if typing.TYPE_CHECKING:\n          \n          \n            \n            if TYPE_CHECKING:", "author": "chadrik", "createdAt": "2020-05-27T16:08:13Z", "path": "sdks/python/apache_beam/dataframe/convert.py", "diffHunk": "@@ -17,12 +17,20 @@\n from __future__ import absolute_import\n \n import inspect\n+from typing import Any\n+from typing import Dict\n+from typing import Tuple\n+from typing import Union\n \n from apache_beam import pvalue\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frame_base\n from apache_beam.dataframe import transforms\n \n+if typing.TYPE_CHECKING:", "originalCommit": "289cd34628c6e1b3ddbe164335ff52485b27e8d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njk1OQ==", "url": "https://github.com/apache/beam/pull/11632#discussion_r431266959", "bodyText": "The prevailing style for TYPE_CHECKING is to import it as from typing import TYPE_CHECKING.  I think we should stay consistent.  If we want to change that, it's fine by me, but we can do that in another PR.", "author": "chadrik", "createdAt": "2020-05-27T16:11:42Z", "path": "sdks/python/apache_beam/dataframe/transforms.py", "diffHunk": "@@ -16,13 +16,28 @@\n \n from __future__ import absolute_import\n \n+import typing\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import Mapping\n+from typing import Tuple\n+from typing import TypeVar\n+from typing import Union\n+\n import pandas as pd\n \n import apache_beam as beam\n from apache_beam import transforms\n from apache_beam.dataframe import expressions\n from apache_beam.dataframe import frames  # pylint: disable=unused-import\n \n+if typing.TYPE_CHECKING:", "originalCommit": "289cd34628c6e1b3ddbe164335ff52485b27e8d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDc5Ng==", "url": "https://github.com/apache/beam/pull/11632#discussion_r432170796", "bodyText": "+1 for consistency. Changed.", "author": "robertwb", "createdAt": "2020-05-28T23:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2Njk1OQ=="}], "type": "inlineReview"}, {"oid": "d51dca358bfb8d8f782a9dc863e025dc610a4d1e", "url": "https://github.com/apache/beam/commit/d51dca358bfb8d8f782a9dc863e025dc610a4d1e", "message": "one last import fix", "committedDate": "2020-05-28T23:03:30Z", "type": "commit"}]}