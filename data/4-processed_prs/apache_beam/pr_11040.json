{"pr_number": 11040, "pr_title": "[BEAM-9305] Allow value provider query strings in _CustomBigQuerySource", "pr_createdAt": "2020-03-04T10:23:28Z", "pr_url": "https://github.com/apache/beam/pull/11040", "timeline": [{"oid": "c78b3d149bedf9d839ef2ce0444639baea6d1c4f", "url": "https://github.com/apache/beam/commit/c78b3d149bedf9d839ef2ce0444639baea6d1c4f", "message": "Allow value provider query strings in _ReadFromBigQuery -> _CustomBigQuerySource", "committedDate": "2020-03-04T10:19:08Z", "type": "commit"}, {"oid": "a3f37c81364b4eac46689abd92dce53af54d4b59", "url": "https://github.com/apache/beam/commit/a3f37c81364b4eac46689abd92dce53af54d4b59", "message": "Moved vp.get() to estimate_size", "committedDate": "2020-03-04T10:46:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NzY4Mg==", "url": "https://github.com/apache/beam/pull/11040#discussion_r387847682", "bodyText": "could you use the value provider in another one of the tests in this file? Since each test in this file takes ~5min to run, I'd prefer to avoid adding a new test.", "author": "pabloem", "createdAt": "2020-03-04T18:19:59Z", "path": "sdks/python/apache_beam/io/gcp/bigquery_read_it_test.py", "diffHunk": "@@ -162,6 +163,15 @@ def test_iobase_source(self):\n               query=self.query, use_standard_sql=True, project=self.project))\n       assert_that(result, equal_to(self.TABLE_DATA))\n \n+  @attr('IT')\n+  def test_valueprovider_query_string(self):\n+    query = StaticValueProvider(str, self.query)\n+    with beam.Pipeline(argv=self.args) as p:\n+      result = (\n+          p | 'read' >> beam.io._ReadFromBigQuery(\n+              query=query, use_standard_sql=True, project=self.project))\n+      assert_that(result, equal_to(self.TABLE_DATA))", "originalCommit": "a3f37c81364b4eac46689abd92dce53af54d4b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MDA2MQ==", "url": "https://github.com/apache/beam/pull/11040#discussion_r387850061", "bodyText": "I would probably do this without changing the class variable.\nI'd do a local variable: query = self.query.get(), and do it on every instance where self.query is accessed.\nThe reason is that the Source objects may be recreated in different workers, and the  self.query variable would contain the original ValueProvider in all of those.", "author": "pabloem", "createdAt": "2020-03-04T18:24:17Z", "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -644,6 +644,8 @@ def estimate_size(self):\n           self.table_reference.tableId)\n       return int(table.numBytes)\n     else:\n+      if isinstance(self.query, ValueProvider):\n+        self.query = self.query.get()", "originalCommit": "a3f37c81364b4eac46689abd92dce53af54d4b59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d95ccba9d5f2bcada1a8c265aba6cbbd02617cda", "url": "https://github.com/apache/beam/commit/d95ccba9d5f2bcada1a8c265aba6cbbd02617cda", "message": "Moved VP initialisation to _ReadFromBigQuery PTransform", "committedDate": "2020-03-05T10:28:43Z", "type": "commit"}, {"oid": "935e3169937f10897fc6c0453263afb36548db8d", "url": "https://github.com/apache/beam/commit/935e3169937f10897fc6c0453263afb36548db8d", "message": "Updated docstring of gcs_location to reflect value provider usage", "committedDate": "2020-03-05T10:37:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4ODIxMQ==", "url": "https://github.com/apache/beam/pull/11040#discussion_r388788211", "bodyText": "Do we need an integration test to cover your value provider's logic? Take a look at TestReadFromBigQuery test case in bigquery_test.py. Those are unit tests for _ReadFromBigQuery that actually run very fast, because pipeline is not executed.\nAdding new tests in bigquery_read_it_test.py causes huge overhead, since they are all executed by three runners (Direct, Dataflow and Flink) on every supported Python version.", "author": "kamilwu", "createdAt": "2020-03-06T09:13:17Z", "path": "sdks/python/apache_beam/io/gcp/bigquery_read_it_test.py", "diffHunk": "@@ -156,12 +157,19 @@ def test_native_source(self):\n \n   @attr('IT')\n   def test_iobase_source(self):\n+    query = StaticValueProvider(str, self.query)\n     with beam.Pipeline(argv=self.args) as p:\n       result = (\n           p | 'read' >> beam.io._ReadFromBigQuery(\n               query=self.query, use_standard_sql=True, project=self.project))\n       assert_that(result, equal_to(self.TABLE_DATA))\n \n+    with beam.Pipeline(argv=self.args) as p:", "originalCommit": "935e3169937f10897fc6c0453263afb36548db8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzMjcyNQ==", "url": "https://github.com/apache/beam/pull/11040#discussion_r389532725", "bodyText": "To actually evaluate the value providers, the pipeline needs to be executed right? Cause these are realistically only 'known' at runtime. The tests in TestReadFromBigQuery just validate the input data to the initialisation.\nWe can of course just validate that query is of type ValueProvider after initialising a pipeline, but I figured we want to check that the value provider query is actually evaluated to a string type on pipeline execution.\nAm I perhaps missing something?", "author": "EDjur", "createdAt": "2020-03-09T09:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4ODIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzNTkyMg==", "url": "https://github.com/apache/beam/pull/11040#discussion_r389835922", "bodyText": "What I would say is use the value provider in the first pipeline of this method, and don't add a second pipeline. I think that should be fine. WDYT @kamilwu ?", "author": "pabloem", "createdAt": "2020-03-09T17:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4ODIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MDMzMA==", "url": "https://github.com/apache/beam/pull/11040#discussion_r390250330", "bodyText": "@EDjur Thanks for explanation. That's right, if we want to check that query is successfully evaluated to a string, we have to execute the pipeline.\n@pabloem I think this is good idea. Let's do it this way.", "author": "kamilwu", "createdAt": "2020-03-10T11:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4ODIxMQ=="}], "type": "inlineReview"}, {"oid": "1b1443ffa3bdd28f2c0b1ee567fd7882af5d37af", "url": "https://github.com/apache/beam/commit/1b1443ffa3bdd28f2c0b1ee567fd7882af5d37af", "message": "test_iobase_source uses value providers instead of string query", "committedDate": "2020-03-10T12:37:49Z", "type": "commit"}, {"oid": "ec5fb4686b8b049f9b400e1d0d175d052d0fa5b5", "url": "https://github.com/apache/beam/commit/ec5fb4686b8b049f9b400e1d0d175d052d0fa5b5", "message": "Merged master", "committedDate": "2020-03-10T12:42:57Z", "type": "commit"}, {"oid": "72285e347dc4bb1c46b09dc46d6f4bc15e0a1c9a", "url": "https://github.com/apache/beam/commit/72285e347dc4bb1c46b09dc46d6f4bc15e0a1c9a", "message": "Moved vp evaluation to pipeline execution phase", "committedDate": "2020-03-12T08:33:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2MDc5MQ==", "url": "https://github.com/apache/beam/pull/11040#discussion_r391760791", "bodyText": "There's a check_accessible decorator that could be used for this function (as well as for estimate_size).\nI think you could also test if self.query is a ValueProvider or not in the constructor. If it's not, you can then create a StaticValueProvider object. self.evaluate_query_valueprovider() would be unnecessary.\nHere'a en example:\n\n  \n    \n      beam/sdks/python/apache_beam/io/filebasedsource.py\n    \n    \n        Lines 115 to 117\n      in\n      f75838f\n    \n    \n    \n    \n\n        \n          \n           if isinstance(file_pattern, (str, unicode)): \n        \n\n        \n          \n             file_pattern = StaticValueProvider(str, file_pattern) \n        \n\n        \n          \n           self._pattern = file_pattern", "author": "kamilwu", "createdAt": "2020-03-12T16:58:45Z", "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -694,14 +699,16 @@ def read(self, range_tracker):\n     raise NotImplementedError('BigQuery source must be split before being read')\n \n   def _setup_temporary_dataset(self, bq):\n+    query = self.evaluate_query_valueprovider()", "originalCommit": "72285e347dc4bb1c46b09dc46d6f4bc15e0a1c9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyMjc2OQ==", "url": "https://github.com/apache/beam/pull/11040#discussion_r392122769", "bodyText": "Thanks for the tip re: check_accessible, I didn't know about that. I've updated the PR based on these suggestions.", "author": "EDjur", "createdAt": "2020-03-13T09:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2MDc5MQ=="}], "type": "inlineReview"}, {"oid": "acf02d3805c62c56c0df964fd79ad6f161a13418", "url": "https://github.com/apache/beam/commit/acf02d3805c62c56c0df964fd79ad6f161a13418", "message": "Cast query to vp always and evaluate in methods using check_accessible", "committedDate": "2020-03-13T09:42:45Z", "type": "commit"}]}