{"pr_number": 10637, "pr_title": "[BEAM-9186] Allow injection of custom equality function.", "pr_createdAt": "2020-01-19T15:00:39Z", "pr_url": "https://github.com/apache/beam/pull/10637", "timeline": [{"oid": "3b8368c4022d652724fda35375a45df6b64e9152", "url": "https://github.com/apache/beam/commit/3b8368c4022d652724fda35375a45df6b64e9152", "message": "Allow injection of custom equality function.", "committedDate": "2020-01-19T14:58:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzOTQ3Mw==", "url": "https://github.com/apache/beam/pull/10637#discussion_r370439473", "bodyText": "This creates a side-effect, making equal_to not thread-safe. Can we access equals_fn from the outer scope as we do with expected ?", "author": "tvalentyn", "createdAt": "2020-01-24T01:31:55Z", "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -154,41 +154,50 @@ def equal_to_per_window(expected_window_to_elements):\n # Note that equal_to checks if expected and actual are permutations of each\n # other. However, only permutations of the top level are checked. Therefore\n # [1,2] and [2,1] are considered equal and [[1,2]] and [[2,1]] are not.\n-def equal_to(expected):\n+def equal_to(expected, equals_fn=None):\n+  equal_to.equals_fn=equals_fn", "originalCommit": "3b8368c4022d652724fda35375a45df6b64e9152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NzgxMQ==", "url": "https://github.com/apache/beam/pull/10637#discussion_r370447811", "bodyText": "Yes, I tried that but it indeed does not work. PTAL and the alternative I just committed.", "author": "sorensenjs", "createdAt": "2020-01-24T02:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzOTQ3Mw=="}], "type": "inlineReview"}, {"oid": "a861a312db777051d76bc8a977dfd437ad53ceed", "url": "https://github.com/apache/beam/commit/a861a312db777051d76bc8a977dfd437ad53ceed", "message": "Avoid thread unsafe issue by passing argument explicitly.", "committedDate": "2020-01-24T02:11:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNzc5MQ==", "url": "https://github.com/apache/beam/pull/10637#discussion_r370807791", "bodyText": "We can remove BeamAssertException from here. The remaining code in the block would not raise that exception.", "author": "aaltay", "createdAt": "2020-01-24T19:36:44Z", "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -154,41 +154,48 @@ def equal_to_per_window(expected_window_to_elements):\n # Note that equal_to checks if expected and actual are permutations of each\n # other. However, only permutations of the top level are checked. Therefore\n # [1,2] and [2,1] are considered equal and [[1,2]] and [[2,1]] are not.\n-def equal_to(expected):\n+def equal_to(expected, equals_fn=None):\n \n-  def _equal(actual):\n+  def _equal(actual, equals_fn=equals_fn):\n     expected_list = list(expected)\n \n     # Try to compare actual and expected by sorting. This fails with a\n     # TypeError in Python 3 if different types are present in the same\n     # collection. It can also raise false negatives for types that don't have\n     # a deterministic sort order, like pyarrow Tables as of 0.14.1\n-    try:\n-      sorted_expected = sorted(expected)\n-      sorted_actual = sorted(actual)\n-      if sorted_expected != sorted_actual:\n-        raise BeamAssertException(\n-            'Failed assert: %r == %r' % (sorted_expected, sorted_actual))\n+    if not equals_fn:\n+      try:\n+        sorted_expected = sorted(expected)\n+        sorted_actual = sorted(actual)\n+        if sorted_expected == sorted_actual:\n+          return\n+      except (BeamAssertException, TypeError):", "originalCommit": "a861a312db777051d76bc8a977dfd437ad53ceed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3264beb501323a3dd2882a583e107922ba3783d0", "url": "https://github.com/apache/beam/commit/3264beb501323a3dd2882a583e107922ba3783d0", "message": "Remove unreachable exception type.", "committedDate": "2020-01-24T19:40:24Z", "type": "commit"}]}