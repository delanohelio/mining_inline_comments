{"pr_number": 11179, "pr_title": "[BEAM-3301] Bugfix in DoFn validation.", "pr_createdAt": "2020-03-20T05:16:02Z", "pr_url": "https://github.com/apache/beam/pull/11179", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0NDMyNg==", "url": "https://github.com/apache/beam/pull/11179#discussion_r395444326", "bodyText": "No need to have this exported right now, since we can't make a breaking change later. It's only used in the same package. Let's not expand the user surface unless there are good user usages, as a broad API get confusing.\n\n\nIsKV would be a more precise name, since PCollections are a logical representation of all their data, not actually a source or a sink. They can represent KV type or they aren't.\n\n\nThis isn't checking if it's a KV type, it's checking if it's a Keyed type or not, since it's also checking if it's a CoGBK.\n\n\nSince this is only used in the one place, it's reasonable to move the conditional there instead of adding the one off helper method.\n\n\nI'm always willing to hear other opinions!", "author": "lostluck", "createdAt": "2020-03-20T05:26:28Z", "path": "sdks/go/pkg/beam/pcollection.go", "diffHunk": "@@ -60,6 +60,12 @@ func (p PCollection) Type() FullType {\n \treturn p.n.Type()\n }\n \n+// OutputsKV returns whether the output of this PCollection are single value\n+// elements or KV pairs.\n+func (p PCollection) OutputsKV() bool {", "originalCommit": "4c819e412fc0d8bb3b03f60235efa27af81bf58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzNjA3MQ==", "url": "https://github.com/apache/beam/pull/11179#discussion_r395836071", "bodyText": "I was originally picturing this as a helper function for callers of NewDoFn. It seems easy for future callers to make a mistake and only check if the PCollection is a KV and forget to check for CoGBK, so I thought a helper method would be useful in the future.\n\nI missed that pardo.go is in the same package as pcollection.go. I'm also leaning to not expanding the user surface if it's not necessary.\n\n2 & 3. Yeah I was unsure about the name, since it's not technically checking for KVs, I just couldn't think of anything better. IsKeyed sounds good though.\n\nThat's the other part I was debating. My goal was to make it easy to avoid the mistake in the future, but thinking about it... It seems unlikely that anyone else would even be using this code, and I would expect that if they were they were an advanced user doing something tricky.\n\nI think I'll go with just putting the conditional in pardo.go and adding a comment. We can always turn it into a helper later if it does get used in multiple places.", "author": "youngoli", "createdAt": "2020-03-20T19:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0NDMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgzODM3OA==", "url": "https://github.com/apache/beam/pull/11179#discussion_r395838378", "bodyText": "That's my usual guideline. If I use it once, keep it in place; twice, copy it; three times, helper function.", "author": "lostluck", "createdAt": "2020-03-20T19:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0NDMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0MDI3MA==", "url": "https://github.com/apache/beam/pull/11179#discussion_r395840270", "bodyText": "...must be a value type..", "author": "lostluck", "createdAt": "2020-03-20T19:10:41Z", "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -446,23 +444,16 @@ func validateMainInputs(fn *Fn, method *funcx.Fn, methodName string, numMainIn m\n \t\treturn err\n \t}\n \n-\t// Check that the first numMainIn inputs are not side inputs (Iters or\n-\t// ReIters). We aren't able to catch singleton side inputs here since\n-\t// they're indistinguishable from main inputs.\n-\tmainInputs := method.Param[pos : pos+int(numMainIn)]\n-\tfor i, p := range mainInputs {\n-\t\tif p.Kind != funcx.FnValue {\n-\t\t\terr := errors.Errorf(\"expected main input parameter but found \"+\n-\t\t\t\t\"side input parameter in position %v\",\n-\t\t\t\tpos+i)\n-\t\t\terr = errors.SetTopLevelMsgf(err,\n-\t\t\t\t\"Method %v in DoFn %v should have all main inputs before side inputs, \"+\n-\t\t\t\t\t\"but a side input (as Iter or ReIter) appears as parameter %v when a \"+\n-\t\t\t\t\t\"main input was expected.\",\n-\t\t\t\tmethodName, fn.Name(), pos+i)\n-\t\t\terr = errors.WithContextf(err, \"method %v\", methodName)\n-\t\t\treturn err\n-\t\t}\n+\t// Check that the first input is not an Iter or ReIter (those aren't valid\n+\t// as the first main input).\n+\tfirst := method.Param[pos].Kind\n+\tif first != funcx.FnValue {\n+\t\terr := errors.New(\"first main input parameter must be value type\")", "originalCommit": "4c819e412fc0d8bb3b03f60235efa27af81bf58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MDI5NQ==", "url": "https://github.com/apache/beam/pull/11179#discussion_r395850295", "bodyText": "I'll just add it in real quick while squashing the commits.", "author": "youngoli", "createdAt": "2020-03-20T19:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0MDI3MA=="}], "type": "inlineReview"}, {"oid": "78141f25c49682afae4e7c28a3d2532127834d6c", "url": "https://github.com/apache/beam/commit/78141f25c49682afae4e7c28a3d2532127834d6c", "message": "[BEAM-3301] Bugfix in DoFn validation.\n\nAccidentally left a bug in DoFn validation. It was treating main inputs\nas if they could only be FnValues, when they could also be FnIter or\nFnReIter as well, such as in the case of a GBK or CoGBK, which meant\nvalid pipelines were failing validation. This fixes that.", "committedDate": "2020-03-20T19:35:11Z", "type": "commit"}, {"oid": "78141f25c49682afae4e7c28a3d2532127834d6c", "url": "https://github.com/apache/beam/commit/78141f25c49682afae4e7c28a3d2532127834d6c", "message": "[BEAM-3301] Bugfix in DoFn validation.\n\nAccidentally left a bug in DoFn validation. It was treating main inputs\nas if they could only be FnValues, when they could also be FnIter or\nFnReIter as well, such as in the case of a GBK or CoGBK, which meant\nvalid pipelines were failing validation. This fixes that.", "committedDate": "2020-03-20T19:35:11Z", "type": "forcePushed"}]}