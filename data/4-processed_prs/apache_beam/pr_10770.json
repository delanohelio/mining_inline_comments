{"pr_number": 10770, "pr_title": "[BEAM-2645] Define the display data model type", "pr_createdAt": "2020-02-04T23:55:06Z", "pr_url": "https://github.com/apache/beam/pull/10770", "timeline": [{"oid": "73939e5e9328c1b2f6c03e44787c08e2c8ce4318", "url": "https://github.com/apache/beam/commit/73939e5e9328c1b2f6c03e44787c08e2c8ce4318", "message": "[BEAM-2645] Define the display data model type\n\nUse a URN + value system with an optional label allowing for 'dynamic' types to be specified and labelled with a set of well known types.\nFix-up existing Java usage.", "committedDate": "2020-02-05T00:37:52Z", "type": "commit"}, {"oid": "73939e5e9328c1b2f6c03e44787c08e2c8ce4318", "url": "https://github.com/apache/beam/commit/73939e5e9328c1b2f6c03e44787c08e2c8ce4318", "message": "[BEAM-2645] Define the display data model type\n\nUse a URN + value system with an optional label allowing for 'dynamic' types to be specified and labelled with a set of well known types.\nFix-up existing Java usage.", "committedDate": "2020-02-05T00:37:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU2OTc1NQ==", "url": "https://github.com/apache/beam/pull/10770#discussion_r375569755", "bodyText": "Isn't it best practice to start with 1, so that unset == 0?", "author": "robertwb", "createdAt": "2020-02-05T23:39:18Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1205,58 +1207,58 @@ message FunctionSpec {\n   bytes payload = 3;\n }\n \n-// TODO: transfer javadoc here\n-message DisplayData {\n-\n-  // (Required) The list of display data.\n-  repeated Item items = 1;\n-\n-  // A complete identifier for a DisplayData.Item\n-  message Identifier {\n-\n-    // (Required) The transform originating this display data.\n-    string transform_id = 1;\n-\n-    // (Optional) The URN indicating the type of the originating transform,\n-    // if there is one.\n-    string transform_urn = 2;\n-\n-    string key = 3;\n+// A set of well known URNs describing display data.\n+//\n+// All descriptions must contain how the value should be classified and how it\n+// is encoded. Note that some types are logical types which convey contextual\n+// information about the pipeline in addition to an encoding while others only\n+// specify the encoding itself.\n+message StandardDisplayData {\n+  enum DisplayData {\n+    // A string label and value. Has a payload containing an encoded\n+    // LabelledStringPayload.\n+    LABELLED_STRING = 0 [(beam_urn) = \"beam:display_data:labelled_string:v1\"];", "originalCommit": "73939e5e9328c1b2f6c03e44787c08e2c8ce4318", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwMjM3MA==", "url": "https://github.com/apache/beam/pull/10770#discussion_r375602370", "bodyText": "It doesn't matter for these constant fields since we don't expect to use the enum as an actual field anywhere on a message and only use them for lookups. We can always change it if we need to in the future and it won't impact execution or existing pipelines either.", "author": "lukecwik", "createdAt": "2020-02-06T01:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU2OTc1NQ=="}], "type": "inlineReview"}]}