{"pr_number": 12819, "pr_title": "[BEAM-9561] Initial framework for testing pandas website docs.", "pr_createdAt": "2020-09-11T00:30:25Z", "pr_url": "https://github.com/apache/beam/pull/12819", "timeline": [{"oid": "7e43337c2a04bef868953b9ee37c95ba213af8a1", "url": "https://github.com/apache/beam/commit/7e43337c2a04bef868953b9ee37c95ba213af8a1", "message": "[BEAM-9561] Initial framework for testing pandas website docs.", "committedDate": "2020-09-11T00:29:31Z", "type": "commit"}, {"oid": "7e81f23797b2479e4ff53aea790662f516f93cdd", "url": "https://github.com/apache/beam/commit/7e81f23797b2479e4ff53aea790662f516f93cdd", "message": "Global summary.", "committedDate": "2020-09-11T01:14:38Z", "type": "commit"}, {"oid": "0905e6a313d3b9b41faf53ab1e635de1ea072f50", "url": "https://github.com/apache/beam/commit/0905e6a313d3b9b41faf53ab1e635de1ea072f50", "message": "Auto-generate test list.", "committedDate": "2020-09-11T19:00:59Z", "type": "commit"}, {"oid": "1fc8e1547dc60eb8b35d22146bd7c262fe0ca6ee", "url": "https://github.com/apache/beam/commit/1fc8e1547dc60eb8b35d22146bd7c262fe0ca6ee", "message": "Merge branch 'master' into pandas-site-tests", "committedDate": "2020-09-11T19:12:36Z", "type": "commit"}, {"oid": "6719e29187ba841f82b33d40a6c2cbaaf942e154", "url": "https://github.com/apache/beam/commit/6719e29187ba841f82b33d40a6c2cbaaf942e154", "message": "Merge branch 'dataframes-summarize' into pandas-site-tests", "committedDate": "2020-09-11T19:16:42Z", "type": "commit"}, {"oid": "fc9e793091570a2a4196dc5fdd10d518feff9a9a", "url": "https://github.com/apache/beam/commit/fc9e793091570a2a4196dc5fdd10d518feff9a9a", "message": "avoid unitttest", "committedDate": "2020-09-11T19:54:17Z", "type": "commit"}, {"oid": "6c76ee87799319a405264f4131926e057f4b1386", "url": "https://github.com/apache/beam/commit/6c76ee87799319a405264f4131926e057f4b1386", "message": "jenkins fixes", "committedDate": "2020-09-11T20:00:18Z", "type": "commit"}, {"oid": "76f2c1c5c2d296b53ca9dacfd8e4178a61b7eb7e", "url": "https://github.com/apache/beam/commit/76f2c1c5c2d296b53ca9dacfd8e4178a61b7eb7e", "message": "Merge branch 'master' into pandas-site-tests", "committedDate": "2020-09-11T20:00:39Z", "type": "commit"}, {"oid": "f5b9c877e52271455f0e88bc1718a5c0b1ba4453", "url": "https://github.com/apache/beam/commit/f5b9c877e52271455f0e88bc1718a5c0b1ba4453", "message": "lint", "committedDate": "2020-09-11T22:00:31Z", "type": "commit"}, {"oid": "0e3c400942d54ce45036e0473058642d3aa549c8", "url": "https://github.com/apache/beam/commit/0e3c400942d54ce45036e0473058642d3aa549c8", "message": "lint, try to fix docs", "committedDate": "2020-09-15T16:16:50Z", "type": "commit"}, {"oid": "ce69f94b95991e1eb83f9fb0f8e2fc04855da6e0", "url": "https://github.com/apache/beam/commit/ce69f94b95991e1eb83f9fb0f8e2fc04855da6e0", "message": "yet another attempt to make docs + linter happy", "committedDate": "2020-09-15T17:54:30Z", "type": "commit"}, {"oid": "b6285c6b2de7da817607dc49f0b8f65c602a196d", "url": "https://github.com/apache/beam/commit/b6285c6b2de7da817607dc49f0b8f65c602a196d", "message": "Merge branch 'master' into pandas-site-tests", "committedDate": "2020-09-24T22:30:05Z", "type": "commit"}, {"oid": "95362de2fe3bdbf168f95f13116c0e56cf654660", "url": "https://github.com/apache/beam/commit/95362de2fe3bdbf168f95f13116c0e56cf654660", "message": "fix merge changes", "committedDate": "2020-09-25T00:07:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMDMwOA==", "url": "https://github.com/apache/beam/pull/12819#discussion_r493930308", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and someting that'll fail (due to fake vs. read pandas)\n          \n          \n            \n            and someting that'll fail (due to fake vs. real pandas)", "author": "TheNeuralBit", "createdAt": "2020-09-23T22:27:49Z", "path": "sdks/python/apache_beam/dataframe/doctests_test.py", "diffHunk": "@@ -77,6 +77,46 @@\n failed exception\n '''\n \n+RST_IPYTHON = '''\n+Here is an example\n+.. ipython::\n+\n+    2 + 2\n+\n+and a multi-line example\n+\n+.. ipython::\n+\n+    def foo(x):\n+        return x * x\n+    foo(4)\n+\n+history is preserved\n+\n+    foo(3)\n+    foo(4)\n+\n+and finally an example with pandas\n+\n+.. ipython::\n+\n+    pd.Series([1, 2, 3]).max()\n+\n+\n+This one should be skipped:\n+\n+.. ipython::\n+\n+   @verbatim\n+   not run or tested\n+\n+and someting that'll fail (due to fake vs. read pandas)", "originalCommit": "ce69f94b95991e1eb83f9fb0f8e2fc04855da6e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMDUyMA==", "url": "https://github.com/apache/beam/pull/12819#discussion_r493930520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                print('Extrating', zip)\n          \n          \n            \n                print('Extracting', zip)", "author": "TheNeuralBit", "createdAt": "2020-09-23T22:28:37Z", "path": "sdks/python/apache_beam/dataframe/pandas_docs_test.py", "diffHunk": "@@ -0,0 +1,90 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"A module for running the pandas docs (such as the users guide) against our\n+dataframe implementation.\n+\n+Run as python -m apache_beam.dataframe.pandas_docs_test [getting_started ...]\n+\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import print_function\n+\n+import os\n+import sys\n+import zipfile\n+\n+from apache_beam.dataframe import doctests\n+\n+PANDAS_VERSION = '1.1.1'\n+PANDAS_DIR = os.path.expanduser(\"~/.apache_beam/cache/pandas-\" + PANDAS_VERSION)\n+PANDAS_DOCS_SOURCE = os.path.join(PANDAS_DIR, 'doc', 'source')\n+\n+\n+def main():\n+  # Not available for Python 2.\n+  import urllib.request\n+  if not os.path.exists(PANDAS_DIR):\n+    # Download the pandas source.\n+    os.makedirs(os.path.dirname(PANDAS_DIR), exist_ok=True)\n+    zip = os.path.join(PANDAS_DIR + '.zip')\n+    if not os.path.exists(zip):\n+      url = (\n+          'https://github.com/pandas-dev/pandas/archive/v%s.zip' %\n+          PANDAS_VERSION)\n+      print('Downloading', url)\n+      with urllib.request.urlopen(url) as fin:\n+        with open(zip, 'wb') as fout:\n+          fout.write(fin.read())\n+\n+    print('Extrating', zip)", "originalCommit": "ce69f94b95991e1eb83f9fb0f8e2fc04855da6e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMTk3OQ==", "url": "https://github.com/apache/beam/pull/12819#discussion_r493931979", "bodyText": "Nice, we should use this to aggregate pandas_doctests_test too", "author": "TheNeuralBit", "createdAt": "2020-09-23T22:32:50Z", "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -350,16 +355,57 @@ def fake_pandas_module(self):\n \n   def summarize(self):\n     super(BeamDataframeDoctestRunner, self).summarize()\n+    self.summary().summarize()\n \n+  def summary(self):\n+    return Summary(\n+        self.failures,\n+        self.tries,\n+        self.skipped,\n+        self.wont_implement,\n+        self._wont_implement_reasons)\n+\n+\n+class AugmentedTestResults(doctest.TestResults):\n+  pass\n+\n+\n+class Summary(object):\n+  def __init__(\n+      self,\n+      failures=0,\n+      tries=0,\n+      skipped=0,\n+      wont_implement=0,\n+      wont_implement_reasons=None):\n+    self.failures = failures\n+    self.tries = tries\n+    self.skipped = skipped\n+    self.wont_implement = wont_implement\n+    self.wont_implement_reasons = wont_implement_reasons or []\n+\n+  def __add__(self, other):\n+    return Summary(\n+        self.failures + other.failures,\n+        self.tries + other.tries,\n+        self.skipped + other.skipped,\n+        self.wont_implement + other.wont_implement,\n+        self.wont_implement_reasons + other.wont_implement_reasons)", "originalCommit": "ce69f94b95991e1eb83f9fb0f8e2fc04855da6e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1NTQ4OA==", "url": "https://github.com/apache/beam/pull/12819#discussion_r497155488", "bodyText": "Yeah, we could probably do something with a test-class-level aggregator. https://issues.apache.org/jira/browse/BEAM-10989", "author": "robertwb", "createdAt": "2020-09-29T23:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMTk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTc2Nw==", "url": "https://github.com/apache/beam/pull/12819#discussion_r496201767", "bodyText": "We should probably check for :verbatim: https://ipython.readthedocs.io/en/stable/sphinxext.html#pseudo-decorators", "author": "TheNeuralBit", "createdAt": "2020-09-28T20:05:59Z", "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -428,7 +482,106 @@ def print_partition(indent, desc, n, total):\n     print()\n \n \n-def teststring(text, report=True, **runner_kwargs):\n+def parse_rst_ipython_tests(rst, name, extraglobs=None, optionflags=None):\n+  \"\"\"Extracts examples from an rst file and produce a test suite by running\n+  them through pandas to get the expected outputs.\n+  \"\"\"\n+\n+  # Optional dependency.\n+  import IPython\n+  from traitlets.config import Config\n+\n+  def get_indent(line):\n+    return len(line) - len(line.lstrip())\n+\n+  def is_example_line(line):\n+    line = line.strip()\n+    return line and not line.startswith('#') and not line[0] == line[-1] == ':'\n+\n+  IMPORT_PANDAS = 'import pandas as pd'\n+\n+  example_srcs = []\n+  lines = iter(\n+      [line.rstrip()\n+       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+\n+  # https://ipython.readthedocs.io/en/stable/sphinxext.html\n+  for line in lines:\n+    if line.startswith('.. ipython::'):\n+      line = next(lines)\n+      indent = get_indent(line)\n+      example = []\n+      example_srcs.append(example)\n+      while get_indent(line) >= indent:\n+        if '@verbatim' in line or '@savefig' in line:", "originalCommit": "95362de2fe3bdbf168f95f13116c0e56cf654660", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNzkyNA==", "url": "https://github.com/apache/beam/pull/12819#discussion_r496207924", "bodyText": "Would be good to drop this unrelated change", "author": "TheNeuralBit", "createdAt": "2020-09-28T20:18:35Z", "path": "sdks/python/apache_beam/runners/direct/evaluation_context.py", "diffHunk": "@@ -102,7 +102,8 @@ def __init__(self, side_inputs):\n         list\n     )  # type: DefaultDict[Optional[AppliedPTransform], List[pvalue.AsSideInput]]\n     # this appears unused:\n-    self._side_input_to_blocked_tasks = collections.defaultdict(list)  # type: ignore\n+    self._side_input_to_blocked_tasks = collections.defaultdict(\n+        list)  # type: ignore", "originalCommit": "95362de2fe3bdbf168f95f13116c0e56cf654660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1NjA2Mw==", "url": "https://github.com/apache/beam/pull/12819#discussion_r497156063", "bodyText": "Hmm... I think the linter did that to me.", "author": "robertwb", "createdAt": "2020-09-29T23:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwNzkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwOTQyNw==", "url": "https://github.com/apache/beam/pull/12819#discussion_r496209427", "bodyText": "If doctests supported it would we want this to allow WontImplement and NotImplemented?", "author": "TheNeuralBit", "createdAt": "2020-09-28T20:21:30Z", "path": "sdks/python/apache_beam/dataframe/pandas_docs_test.py", "diffHunk": "@@ -0,0 +1,91 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"A module for running the pandas docs (such as the users guide) against our\n+dataframe implementation.\n+\n+Run as python -m apache_beam.dataframe.pandas_docs_test [getting_started ...]\n+\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import print_function\n+\n+import os\n+import sys\n+import zipfile\n+\n+from apache_beam.dataframe import doctests\n+\n+PANDAS_VERSION = '1.1.1'\n+PANDAS_DIR = os.path.expanduser(\"~/.apache_beam/cache/pandas-\" + PANDAS_VERSION)\n+PANDAS_DOCS_SOURCE = os.path.join(PANDAS_DIR, 'doc', 'source')\n+\n+\n+def main():\n+  # Not available for Python 2.\n+  import urllib.request\n+  if not os.path.exists(PANDAS_DIR):\n+    # Download the pandas source.\n+    os.makedirs(os.path.dirname(PANDAS_DIR), exist_ok=True)\n+    zip = os.path.join(PANDAS_DIR + '.zip')\n+    if not os.path.exists(zip):\n+      url = (\n+          'https://github.com/pandas-dev/pandas/archive/v%s.zip' %\n+          PANDAS_VERSION)\n+      print('Downloading', url)\n+      with urllib.request.urlopen(url) as fin:\n+        with open(zip + '.tmp', 'wb') as fout:\n+          fout.write(fin.read())\n+        os.rename(zip + '.tmp', zip)\n+\n+    print('Extrating', zip)\n+    with zipfile.ZipFile(zip, 'r') as handle:\n+      handle.extractall(os.path.dirname(PANDAS_DIR))\n+\n+  tests = sys.argv[1:] or ['getting_started', 'user_guide']\n+  paths = []\n+  filters = []\n+\n+  # Explicit paths.\n+  for test in tests:\n+    if os.path.exists(test):\n+      paths.append(test)\n+    else:\n+      filters.append(test)\n+\n+  # Names of pandas source files.\n+  for root, _, files in os.walk(PANDAS_DOCS_SOURCE):\n+    for name in files:\n+      if name.endswith('.rst'):\n+        path = os.path.join(root, name)\n+        if any(filter in path for filter in filters):\n+          paths.append(path)\n+\n+  # Now run all the tests.\n+  running_summary = doctests.Summary()\n+  for path in paths:\n+    with open(path) as f:\n+      rst = f.read()\n+    running_summary += doctests.test_rst_ipython(\n+        rst, path, report=True, wont_implement_ok=['*'], use_beam=False).summary", "originalCommit": "95362de2fe3bdbf168f95f13116c0e56cf654660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1OTQwMw==", "url": "https://github.com/apache/beam/pull/12819#discussion_r497159403", "bodyText": "Yes, this change was just created before that one.", "author": "robertwb", "createdAt": "2020-09-29T23:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwOTQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjI0Mg==", "url": "https://github.com/apache/beam/pull/12819#discussion_r496212242", "bodyText": "Are you sure this is never consuming the start of another example? It looks like rst may require a blank line after a .. ipython:: block, but I just wanted to check that something like this wont happen:\n.. ipython::\n  df = ..\n.. ipython::\n  df", "author": "TheNeuralBit", "createdAt": "2020-09-28T20:27:11Z", "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -428,7 +482,106 @@ def print_partition(indent, desc, n, total):\n     print()\n \n \n-def teststring(text, report=True, **runner_kwargs):\n+def parse_rst_ipython_tests(rst, name, extraglobs=None, optionflags=None):\n+  \"\"\"Extracts examples from an rst file and produce a test suite by running\n+  them through pandas to get the expected outputs.\n+  \"\"\"\n+\n+  # Optional dependency.\n+  import IPython\n+  from traitlets.config import Config\n+\n+  def get_indent(line):\n+    return len(line) - len(line.lstrip())\n+\n+  def is_example_line(line):\n+    line = line.strip()\n+    return line and not line.startswith('#') and not line[0] == line[-1] == ':'\n+\n+  IMPORT_PANDAS = 'import pandas as pd'\n+\n+  example_srcs = []\n+  lines = iter(\n+      [line.rstrip()\n+       for line in rst.split('\\n') if is_example_line(line)] + ['END'])\n+\n+  # https://ipython.readthedocs.io/en/stable/sphinxext.html\n+  for line in lines:\n+    if line.startswith('.. ipython::'):\n+      line = next(lines)\n+      indent = get_indent(line)\n+      example = []\n+      example_srcs.append(example)\n+      while get_indent(line) >= indent:\n+        if '@verbatim' in line or '@savefig' in line:\n+          example_srcs.pop()\n+          break\n+        example.append(line[indent:])\n+        line = next(lines)\n+        if get_indent(line) == indent:\n+          example = []\n+          example_srcs.append(example)", "originalCommit": "95362de2fe3bdbf168f95f13116c0e56cf654660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1ODk0NA==", "url": "https://github.com/apache/beam/pull/12819#discussion_r497158944", "bodyText": "Good point. I'm pretty sure we need (and there will be) a newline. I've added an assert just in case.", "author": "robertwb", "createdAt": "2020-09-29T23:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE3OTA0NA==", "url": "https://github.com/apache/beam/pull/12819#discussion_r497179044", "bodyText": "Actually, this may happen because I'm eliding empty lines. Fixed.", "author": "robertwb", "createdAt": "2020-09-30T00:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIxMjI0Mg=="}], "type": "inlineReview"}, {"oid": "f65a8b0a1b8426843711ad3954c4aaa7a2301dc4", "url": "https://github.com/apache/beam/commit/f65a8b0a1b8426843711ad3954c4aaa7a2301dc4", "message": "Apply suggestions from code review\r\n\r\nspelling\n\nCo-authored-by: Brian Hulette <hulettbh@gmail.com>", "committedDate": "2020-09-29T23:48:45Z", "type": "commit"}, {"oid": "9fb6676fd731a6980d6ebca1c0ce7e98204cc6df", "url": "https://github.com/apache/beam/commit/9fb6676fd731a6980d6ebca1c0ce7e98204cc6df", "message": "address reviewer comments", "committedDate": "2020-09-29T23:59:08Z", "type": "commit"}, {"oid": "a0a3099e1d64522891b52bc77f3949890b5edd65", "url": "https://github.com/apache/beam/commit/a0a3099e1d64522891b52bc77f3949890b5edd65", "message": "fixup not-implemented-error", "committedDate": "2020-09-30T00:29:57Z", "type": "commit"}]}