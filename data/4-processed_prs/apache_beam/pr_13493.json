{"pr_number": 13493, "pr_title": "[BEAM-10475] Add output type hints for GroupIntoBatches.", "pr_createdAt": "2020-12-05T23:45:14Z", "pr_url": "https://github.com/apache/beam/pull/13493", "timeline": [{"oid": "eefd9b7cdcf84b4e27a9c50e4980c07cf54ae3b0", "url": "https://github.com/apache/beam/commit/eefd9b7cdcf84b4e27a9c50e4980c07cf54ae3b0", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-06T23:51:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1NjM0Mg==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537156342", "bodyText": "This seems to be casuing lint failure. I was following the WindowedValue example:\n\n  \n    \n      beam/sdks/python/apache_beam/typehints/typehints.py\n    \n    \n         Line 1050\n      in\n      30f9a60\n    \n    \n    \n    \n\n        \n          \n           class WindowedTypeConstraint(with_metaclass(GetitemConstructor, TypeConstraint)", "author": "nehsyc", "createdAt": "2020-12-07T00:07:42Z", "path": "sdks/python/apache_beam/typehints/sharded_key_type.py", "diffHunk": "@@ -25,8 +25,12 @@\n from apache_beam.typehints.typehints import match_type_variables\n from apache_beam.utils.sharded_key import ShardedKey\n \n+from future.utils import with_metaclass\n \n-class ShardedKeyTypeConstraint(typehints.TypeConstraint):\n+\n+class ShardedKeyTypeConstraint(with_metaclass(typehints.GetitemConstructor,", "originalCommit": "eefd9b7cdcf84b4e27a9c50e4980c07cf54ae3b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwMzYzNA==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537903634", "bodyText": "What kind of lint errors are you getting?", "author": "boyuanzz", "createdAt": "2020-12-07T23:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1NjM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMjMxMw==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537912313", "bodyText": "I don't know what with_metaclass does. You could add the __getitem__ implementation directly if it's causing issues.", "author": "udim", "createdAt": "2020-12-07T23:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1NjM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMTQwMw==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538631403", "bodyText": "GetItemConstructor basically defines __getitem__. I tried getting rid of it and defining __getitem__ directly but I got the error\nTypeError: 'type' object is not subscriptable", "author": "nehsyc", "createdAt": "2020-12-08T17:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1NjM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2MjEwMA==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538762100", "bodyText": "This works:\n  def __class_getitem__(cls, py_type):\n    return cls(py_type)\nThe alternative is to use a wrapper object instance such as IterableHint that has __getitem__, and then define Iterable = IterableHint().", "author": "udim", "createdAt": "2020-12-08T19:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1NjM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxNTE0MQ==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538915141", "bodyText": "Thanks for the tip!!! Updated the code to define __class_getitem__ directly in ShardedKeyTypeConstraint.", "author": "nehsyc", "createdAt": "2020-12-09T00:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE1NjM0Mg=="}], "type": "inlineReview"}, {"oid": "f55adc964bd0455ade15b4abc9c23566866794e5", "url": "https://github.com/apache/beam/commit/f55adc964bd0455ade15b4abc9c23566866794e5", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-07T00:30:16Z", "type": "forcePushed"}, {"oid": "06e43c039b4f703fcb3da79922e4d2191b2b6219", "url": "https://github.com/apache/beam/commit/06e43c039b4f703fcb3da79922e4d2191b2b6219", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-07T01:29:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwMzE4NA==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537903184", "bodyText": "Just curious, does @typehints.with_output_types not work here?", "author": "boyuanzz", "createdAt": "2020-12-07T23:10:59Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -785,7 +788,6 @@ def expand(self, pcoll):\n \n   @experimental()\n   @typehints.with_input_types(Tuple[K, V])\n-  @typehints.with_output_types(Tuple[K, Iterable[V]])", "originalCommit": "06e43c039b4f703fcb3da79922e4d2191b2b6219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMTMzMg==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538631332", "bodyText": "Udi also had a similar question. I got TypeError when trying to use Tuple[ShardedKey,...]. See my reply below.", "author": "nehsyc", "createdAt": "2020-12-08T17:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwMzE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDgwMg==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537894802", "bodyText": "Please use:\nfrom apache_beam.typehints import ShardedKeyType\n\nAnd use Tuple and Iterable types from the typing module (they will get converted to the ones in typehints). In general use either typing.Tuple or apache_beam.typehints.Tuple. The constraint classes are internal to the typehints modules.\nFor the ShardedKeyType import to work, you can add the corresponding import statement to apache_beam/typehints/__init__.py. This also avoid the cyclic import you mentioned that happened with my suggestion to put ShardedKeyType in typehints.py.", "author": "udim", "createdAt": "2020-12-07T22:53:32Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -72,6 +72,9 @@\n from apache_beam.transforms.window import NonMergingWindowFn\n from apache_beam.transforms.window import TimestampCombiner\n from apache_beam.transforms.window import TimestampedValue\n+from apache_beam.typehints.sharded_key_type import ShardedKeyType\n+from apache_beam.typehints.typehints import IterableTypeConstraint\n+from apache_beam.typehints.typehints import TupleConstraint", "originalCommit": "06e43c039b4f703fcb3da79922e4d2191b2b6219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxNDc5Nw==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538914797", "bodyText": "Updated the code to use Tuple and Iterable directly. Couldn't add ShardedKeyType to apache_beam/typehints/__init__.py due to circular imports in coders\nImportError while loading conftest '/usr/local/google/home/sychen/Documents/GitHub/working_dir/beam/sdks/python/conftest.py'.\nconftest.py:23: in <module>\n    from apache_beam.options import pipeline_options\napache_beam/__init__.py:95: in <module>\n    from apache_beam import coders\napache_beam/coders/__init__.py:19: in <module>\n    from apache_beam.coders.coders import *\napache_beam/coders/coders.py:52: in <module>\n    from apache_beam.typehints import typehints\napache_beam/typehints/__init__.py:25: in <module>\n    from apache_beam.typehints.sharded_key_type import ShardedKeyType\napache_beam/typehints/sharded_key_type.py:22: in <module>\n    from apache_beam.coders import typecoders\napache_beam/coders/typecoders.py:81: in <module>\n    from apache_beam.coders.coders import CoderElementType\nE   ImportError: cannot import name 'CoderElementType' from partially initialized module 'apache_beam.coders.coders' (most likely due to a circular import) (/usr/local/google/home/sychen/Documents/GitHub/working_dir/beam/sdks/python/apache_beam/coders/coders.py)", "author": "nehsyc", "createdAt": "2020-12-09T00:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk1OTUxOA==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538959518", "bodyText": "Okay, this is fine then :)", "author": "udim", "createdAt": "2020-12-09T02:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5ODYxOA==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537898618", "bodyText": "Any reason why this isn't:\n  @typehints.with_output_types(Tuple[ShardedKeyType[K], Iterable[V]])\n?", "author": "udim", "createdAt": "2020-12-07T23:01:24Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -785,7 +788,6 @@ def expand(self, pcoll):\n \n   @experimental()\n   @typehints.with_input_types(Tuple[K, V])\n-  @typehints.with_output_types(Tuple[K, Iterable[V]])", "originalCommit": "06e43c039b4f703fcb3da79922e4d2191b2b6219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMTIzNg==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538631236", "bodyText": "Because I got an error saying:\narg = ShardedKey[int], msg = 'Tuple[t0, t1, ...]: each t must be a type.', is_argument = True\n\n    def _type_check(arg, msg, is_argument=True):\n        \"\"\"Check that the argument is a type, and return it (internal helper).\n    \n        As a special case, accept None and return type(None) instead. Also wrap strings\n        into ForwardRef instances. Consider several corner cases, for example plain\n        special forms like Union are not valid, while Union[int, str] is OK, etc.\n        The msg argument is a human-readable error message, e.g::\n    \n            \"Union[arg, ...]: arg should be a type.\"\n    \n        We append the repr() of the actual value (truncated to 100 chars).\n        \"\"\"\n        invalid_generic_forms = (Generic, Protocol)\n        if is_argument:\n            invalid_generic_forms = invalid_generic_forms + (ClassVar, Final)\n    \n        if arg is None:\n            return type(None)\n        if isinstance(arg, str):\n            return ForwardRef(arg)\n        if (isinstance(arg, _GenericAlias) and\n                arg.__origin__ in invalid_generic_forms):\n            raise TypeError(f\"{arg} is not valid as type argument\")\n        if (isinstance(arg, _SpecialForm) and arg not in (Any, NoReturn) or\n                arg in (Generic, Protocol)):\n            raise TypeError(f\"Plain {arg} is not valid as type argument\")\n        if isinstance(arg, (type, TypeVar, ForwardRef)):\n            return arg\n        if not callable(arg):\n>           raise TypeError(f\"{msg} Got {arg!r:.100}.\")\nE           TypeError: Tuple[t0, t1, ...]: each t must be a type. Got ShardedKey[int].\n\n../../../../../../.pyenv/versions/3.8.5/lib/python3.8/typing.py:149: TypeError\n\n\nAny insights?", "author": "nehsyc", "createdAt": "2020-12-08T17:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5ODYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc3NTQ3NQ==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538775475", "bodyText": "Right, Python's typing types don't recognize Beam's own internal types.\n\n\nProbably not a solution:\nShardedKeyTypeConstraint could inherit from typing.Generic[typing.TypeVar('K')], but that produces 2 more problems. Neither are hard but add complexity, plus none of the other Beam typehints do this.\n\nAccessing the type argument that Generic stores on different versions of Python. (__args__ or __parameters__ I believe)\nPickling. Python's typing types have had issues with pickling.\n\n\n\nProbably the right solution but breaks consistency with the other decorators:\n@typehints.with_output_types(typehints.Tuple[ShardedKeyType[K], typehints.Iterable[V]])\nBeam already converts to internal type so this is a cosmetic change.", "author": "udim", "createdAt": "2020-12-08T20:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5ODYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxNDc1Mg==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538914752", "bodyText": "Ah that explains. To avoid the decorator inconsistency I still keep the infer_output_type method but instead use typehint.Tuple as opposed to TupleConstraint directly. Is that acceptable?", "author": "nehsyc", "createdAt": "2020-12-09T00:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5ODYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk1ODc2Mg==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538958762", "bodyText": "I don't believe you need infer_output_type if you have the with_output_types decorator.\nAlso, I tested this a bit myself and it ended up looking like this:\n  @typehints.with_input_types(typehints.Tuple[K_i, V_i])\n  @typehints.with_output_types(typehints.Tuple[ShardedKeyType[K_i], typehints.Iterable[V_i]])\n  class WithShardedKey(PTransform):\nwhere:\nK_i = typehints.TypeVariable('K_i')\nV_i = typehints.TypeVariable('V_i')\nedit: not sure if with_input_types needs to change but it looks consistent", "author": "udim", "createdAt": "2020-12-09T02:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5ODYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzODExMQ==", "url": "https://github.com/apache/beam/pull/13493#discussion_r539038111", "bodyText": "Sorry I misunderstood and thought having something like typehints.Tuple in the decoration was not preferred. Pushed a commit to use decoration instead.", "author": "nehsyc", "createdAt": "2020-12-09T06:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5ODYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4NzEwMw==", "url": "https://github.com/apache/beam/pull/13493#discussion_r539587103", "bodyText": "It's not preferred, but I'd rather have the output type documented there than not at all.", "author": "udim", "createdAt": "2020-12-09T19:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5ODYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTE4Nw==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537899187", "bodyText": "If you keep this line, I believe the value_type should be Iterable[value_type].", "author": "udim", "createdAt": "2020-12-07T23:02:33Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -815,18 +817,25 @@ def __init__(self, batch_size, max_buffering_duration_secs=None):\n     _shard_id_prefix = uuid.uuid4().bytes\n \n     def expand(self, pcoll):\n+      key_type, value_type = pcoll.element_type.tuple_types\n       sharded_pcoll = pcoll | Map(\n           lambda key_value: (\n               ShardedKey(\n                   key_value[0],\n                   # Use [uuid, thread id] as the shard id.\n                   GroupIntoBatches.WithShardedKey._shard_id_prefix + bytes(\n                       threading.get_ident().to_bytes(8, 'big'))),\n-              key_value[1]))\n+              key_value[1])).with_output_types(\n+                  TupleConstraint([ShardedKeyType[key_type], value_type]))", "originalCommit": "06e43c039b4f703fcb3da79922e4d2191b2b6219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMTE4Nw==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538631187", "bodyText": "Why? The MapFn converts the input K, V to ShardedKey, V. The output of the composite transform is ShardedKey, Iterable[V].", "author": "nehsyc", "createdAt": "2020-12-08T17:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyOTk1Mw==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538729953", "bodyText": "Sorry, my mistake I didn't read this carefully enough.", "author": "udim", "createdAt": "2020-12-08T19:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNzM5OQ==", "url": "https://github.com/apache/beam/pull/13493#discussion_r537907399", "bodyText": "If you keep the with_output_types decorator, please remove this.", "author": "udim", "createdAt": "2020-12-07T23:19:41Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -815,18 +817,25 @@ def __init__(self, batch_size, max_buffering_duration_secs=None):\n     _shard_id_prefix = uuid.uuid4().bytes\n \n     def expand(self, pcoll):\n+      key_type, value_type = pcoll.element_type.tuple_types\n       sharded_pcoll = pcoll | Map(\n           lambda key_value: (\n               ShardedKey(\n                   key_value[0],\n                   # Use [uuid, thread id] as the shard id.\n                   GroupIntoBatches.WithShardedKey._shard_id_prefix + bytes(\n                       threading.get_ident().to_bytes(8, 'big'))),\n-              key_value[1]))\n+              key_value[1])).with_output_types(\n+                  TupleConstraint([ShardedKeyType[key_type], value_type]))\n       return (\n           sharded_pcoll\n           | GroupIntoBatches(self.batch_size, self.max_buffering_duration_secs))\n \n+    def infer_output_type(self, input_type):", "originalCommit": "06e43c039b4f703fcb3da79922e4d2191b2b6219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYzMTExNQ==", "url": "https://github.com/apache/beam/pull/13493#discussion_r538631115", "bodyText": "Couldn't use the decorator due to the error I mentioned in another comment.", "author": "nehsyc", "createdAt": "2020-12-08T17:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNzM5OQ=="}], "type": "inlineReview"}, {"oid": "091827cfa9774c0c64efdb308ea5f5ac24ee81d5", "url": "https://github.com/apache/beam/commit/091827cfa9774c0c64efdb308ea5f5ac24ee81d5", "message": "define getitem;avoid using typeconstraint classes directly", "committedDate": "2020-12-09T00:32:28Z", "type": "forcePushed"}, {"oid": "e75766f0340e7324a6c76a07ab07dcfd6af83346", "url": "https://github.com/apache/beam/commit/e75766f0340e7324a6c76a07ab07dcfd6af83346", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-09T19:52:25Z", "type": "forcePushed"}, {"oid": "08925dd139b5fc7c5c0655a3fb5fced4783b17a7", "url": "https://github.com/apache/beam/commit/08925dd139b5fc7c5c0655a3fb5fced4783b17a7", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-09T21:05:57Z", "type": "forcePushed"}, {"oid": "94db9add6d92c0d24b7277aceeae4b5eaa435d75", "url": "https://github.com/apache/beam/commit/94db9add6d92c0d24b7277aceeae4b5eaa435d75", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-09T21:18:07Z", "type": "forcePushed"}, {"oid": "4abf223b16d8b5ec6d0b3e63d144a60e345dd763", "url": "https://github.com/apache/beam/commit/4abf223b16d8b5ec6d0b3e63d144a60e345dd763", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-09T21:53:55Z", "type": "forcePushed"}, {"oid": "8268f09c0f6c9b6cb8e44516d86418e6650e36fd", "url": "https://github.com/apache/beam/commit/8268f09c0f6c9b6cb8e44516d86418e6650e36fd", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-09T22:01:52Z", "type": "forcePushed"}, {"oid": "dfed81f8d1e7f9722360eab7fccd8215c05b70a7", "url": "https://github.com/apache/beam/commit/dfed81f8d1e7f9722360eab7fccd8215c05b70a7", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-10T05:30:48Z", "type": "forcePushed"}, {"oid": "1e59dbfae964026f9f2f1edf295039fbc7db70c0", "url": "https://github.com/apache/beam/commit/1e59dbfae964026f9f2f1edf295039fbc7db70c0", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-10T17:51:25Z", "type": "forcePushed"}, {"oid": "0564e7f8fde35b7bd9d20f92041417f8e6f3259a", "url": "https://github.com/apache/beam/commit/0564e7f8fde35b7bd9d20f92041417f8e6f3259a", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-10T18:00:04Z", "type": "forcePushed"}, {"oid": "43291126802ae3dc79ff479b3a68db6369fe3afa", "url": "https://github.com/apache/beam/commit/43291126802ae3dc79ff479b3a68db6369fe3afa", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-10T19:07:53Z", "type": "commit"}, {"oid": "43291126802ae3dc79ff479b3a68db6369fe3afa", "url": "https://github.com/apache/beam/commit/43291126802ae3dc79ff479b3a68db6369fe3afa", "message": "Add output type hints for GroupIntoBatches.", "committedDate": "2020-12-10T19:07:53Z", "type": "forcePushed"}]}