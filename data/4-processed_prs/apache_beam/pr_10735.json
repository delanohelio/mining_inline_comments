{"pr_number": 10735, "pr_title": "[BEAM-8280][BEAM-8629] Make IOTypeHints immutable", "pr_createdAt": "2020-01-31T00:40:02Z", "pr_url": "https://github.com/apache/beam/pull/10735", "timeline": [{"oid": "917bfb263aa57a2b94f08913de5cd383058fe618", "url": "https://github.com/apache/beam/commit/917bfb263aa57a2b94f08913de5cd383058fe618", "message": "[BEAM-8280][BEAM-8629] Make IOTypeHints immutable\n\nAlso adds an `origin` field that hopefully aids in debugging type check\nerrors.", "committedDate": "2020-01-31T00:39:31Z", "type": "commit"}, {"oid": "06394dccb690dc2c3a66d0dda5753f64400d1d9b", "url": "https://github.com/apache/beam/commit/06394dccb690dc2c3a66d0dda5753f64400d1d9b", "message": "Fix lint", "committedDate": "2020-01-31T17:51:44Z", "type": "commit"}, {"oid": "1590b0d9b1992644bff105bd889fe1d954c26ce7", "url": "https://github.com/apache/beam/commit/1590b0d9b1992644bff105bd889fe1d954c26ce7", "message": "Lint fixes", "committedDate": "2020-01-31T18:23:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2NzA0NA==", "url": "https://github.com/apache/beam/pull/10735#discussion_r373667044", "bodyText": "Type comment should go after the function.  No need for ... unless you are skipping the definition of an argument (the type of self is implicit).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def strip_iterable(self):  # type: (...) -> IOTypeHints\n          \n          \n            \n              def strip_iterable(self):\n          \n          \n            \n                # type: () -> IOTypeHints", "author": "chadrik", "createdAt": "2020-01-31T20:16:36Z", "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -305,7 +326,7 @@ def has_simple_output_type(self):\n     return (self.output_types and len(self.output_types[0]) == 1 and\n             not self.output_types[1])\n \n-  def strip_iterable(self):\n+  def strip_iterable(self):  # type: (...) -> IOTypeHints", "originalCommit": "1590b0d9b1992644bff105bd889fe1d954c26ce7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDQ3Nw==", "url": "https://github.com/apache/beam/pull/10735#discussion_r373714477", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def with_output_types(self, *args, **kwargs):  # type: (...) -> IOTypeHints\n          \n          \n            \n              def with_output_types(self, *args, **kwargs):\n          \n          \n            \n                # type: (...) -> IOTypeHints", "author": "udim", "createdAt": "2020-01-31T22:31:45Z", "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -283,16 +301,19 @@ def from_callable(fn):\n       output_args.append(typehints.Any)\n \n     return IOTypeHints(input_types=(tuple(input_args), input_kwargs),\n-                       output_types=(tuple(output_args), {}))\n+                       output_types=(tuple(output_args), {}),\n+                       origin=cls._make_traceback(None))\n \n-  def set_input_types(self, *args, **kwargs):\n-    self.input_types = args, kwargs\n+  def with_input_types(self, *args, **kwargs):  # type: (...) -> IOTypeHints\n+    return self._replace(input_types=(args, kwargs),\n+                         origin=self._make_traceback(self))\n \n-  def set_output_types(self, *args, **kwargs):\n-    self.output_types = args, kwargs\n+  def with_output_types(self, *args, **kwargs):  # type: (...) -> IOTypeHints", "originalCommit": "1590b0d9b1992644bff105bd889fe1d954c26ce7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDU4NA==", "url": "https://github.com/apache/beam/pull/10735#discussion_r373714584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def with_input_types(self, *args, **kwargs):  # type: (...) -> IOTypeHints\n          \n          \n            \n              def with_input_types(self, *args, **kwargs):\n          \n          \n            \n                # type: (...) -> IOTypeHints", "author": "udim", "createdAt": "2020-01-31T22:32:06Z", "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -283,16 +301,19 @@ def from_callable(fn):\n       output_args.append(typehints.Any)\n \n     return IOTypeHints(input_types=(tuple(input_args), input_kwargs),\n-                       output_types=(tuple(output_args), {}))\n+                       output_types=(tuple(output_args), {}),\n+                       origin=cls._make_traceback(None))\n \n-  def set_input_types(self, *args, **kwargs):\n-    self.input_types = args, kwargs\n+  def with_input_types(self, *args, **kwargs):  # type: (...) -> IOTypeHints", "originalCommit": "1590b0d9b1992644bff105bd889fe1d954c26ce7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cea11604369f827b9babf424e505c5ec8c4b7941", "url": "https://github.com/apache/beam/commit/cea11604369f827b9babf424e505c5ec8c4b7941", "message": "Apply suggestions from code review\n\nCo-Authored-By: Chad Dombrova <chadrik@gmail.com>", "committedDate": "2020-01-31T22:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MDk3Nw==", "url": "https://github.com/apache/beam/pull/10735#discussion_r374260977", "bodyText": "My guess is that this is going to trip up mypy, but we can defer that to a future mypy PR if you'd like.  This is the pattern that I use for these cases:\n_IOTypeHints = NamedTuple('_IOTypeHints', [\n    ('input_types', Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]),\n    ('output_types', Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]),\n    ('origin', List[str])\n])\n\nclass IOTypeHints(_IOTypeHints):", "author": "chadrik", "createdAt": "2020-02-03T18:19:51Z", "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -217,7 +220,10 @@ def get_signature(func):\n   return signature\n \n \n-class IOTypeHints(object):\n+class IOTypeHints(NamedTuple('IOTypeHints', [\n+    ('input_types', Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]),\n+    ('output_types', Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]),\n+    ('origin', List[str])])):", "originalCommit": "cea11604369f827b9babf424e505c5ec8c4b7941", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2NDc1Mw==", "url": "https://github.com/apache/beam/pull/10735#discussion_r374264753", "bodyText": "The tradeoff is that this produces a sub-par repr for IOTypeHints:\nIn [2]: from typing import *\n\nIn [3]: _IOTypeHints = NamedTuple('_IOTypeHints', [\n   ...:     ('input_types', Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]),\n   ...:     ('output_types', Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]),\n   ...:     ('origin', List[str])\n   ...: ])\n\nIn [4]: class IOTypeHints(_IOTypeHints):pass\n\nIn [5]: x = IOTypeHints(None, None, ['foo'])\n\nIn [6]: x\nOut[6]: _IOTypeHints(input_types=None, output_types=None, origin=['foo'])\nDoing a quick investigation to see if there's a hack fix for this.", "author": "chadrik", "createdAt": "2020-02-03T18:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDI3NA==", "url": "https://github.com/apache/beam/pull/10735#discussion_r374270274", "bodyText": "Something like this:\n    def __repr__(self):\n      repr_fmt = '{typename}({repr_fmt})'.format(\n            typename=type(self).__name__, \n            repr_fmt=', '.join('{name}=%r'.format(name=name) for name in self._fields)\n      )\n      return repr_fmt % self", "author": "chadrik", "createdAt": "2020-02-03T18:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMDI1Ng==", "url": "https://github.com/apache/beam/pull/10735#discussion_r374300256", "bodyText": "Trip up how?\nI see this error in lint (should be fixed in next commit):\napache_beam/typehints/decorators.py:353: error: Value of type \"Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]\" is not indexable  [index]\n\nThis is the line:\noutput_type = self.output_types[0][0]\n\nSo it seems that mypy is correctly parsing these type hints.", "author": "udim", "createdAt": "2020-02-03T19:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MDk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwODA1NQ==", "url": "https://github.com/apache/beam/pull/10735#discussion_r374308055", "bodyText": "I assumed that mypy would need the intermediate class or would want that class's name to match the name provided to NamedTuple().  For example, both of these are invalid:\nclass Foo(Generic[TypeVar('T')]):  # TypeVar needs to be defined above\n    pass\n\nT = TypeVar('T_with_suffix')  # TypeVar name needs to match variable name\nclass Bar(Generic[T]):\n    pass\nI just did my own isolated test of this and you're right, mypy has no issue with it, so it appears there's nothing special about the name given to NamedTuple, as far as mypy is concerned.\nThanks for taking the time to test that.  I was trying to give some quick feedback without getting too drawn in, but once I did get drawn in, I should have gone back and checked my original assumption!", "author": "chadrik", "createdAt": "2020-02-03T19:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MDk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MjAxNg==", "url": "https://github.com/apache/beam/pull/10735#discussion_r374262016", "bodyText": "would be nice to add a type annotation to this:\n  def empty(cls):\n    # type: () -> IOTypeHints\n    return IOTypeHints(None, None, [])", "author": "chadrik", "createdAt": "2020-02-03T18:21:57Z", "path": "sdks/python/apache_beam/typehints/decorators.py", "diffHunk": "@@ -228,18 +234,30 @@ class IOTypeHints(object):\n       May be None. The list and dict correspond to args and kwargs.\n     output_types: (tuple, dict) List of typing types, and an optional dictionary\n       (unused). Only the first element of the list is used. May be None.\n+    origin: (List[str]) Stack of tracebacks of method calls used to create this\n+      instance.\n   \"\"\"\n-  __slots__ = ('input_types', 'output_types')\n \n-  def __init__(self,\n-               input_types=None,  # type: Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]\n-               output_types=None  # type: Optional[Tuple[Tuple[Any, ...], Dict[str, Any]]]\n-              ):\n-    self.input_types = input_types\n-    self.output_types = output_types\n+  traceback_limit = 5\n \n-  @staticmethod\n-  def from_callable(fn):\n+  @classmethod\n+  def _make_traceback(cls, base):  # type: (Optional[IOTypeHints]) -> List[str]\n+    # Omit this method and the IOTypeHints method that called it.\n+    num_frames_skip = 2\n+    tb = traceback.format_stack(limit=cls.traceback_limit + num_frames_skip)\n+    tb_lines = 'TH>' + ''.join(tb[:-num_frames_skip]).replace('\\n', '\\nTH>')\n+\n+    res = [tb_lines + '\\nbased on: ' + str(base)]\n+    if base is not None:\n+      res += base.origin\n+    return res\n+\n+  @classmethod\n+  def empty(cls):\n+    return IOTypeHints(None, None, [])", "originalCommit": "cea11604369f827b9babf424e505c5ec8c4b7941", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTM3OA==", "url": "https://github.com/apache/beam/pull/10735#discussion_r374305378", "bodyText": "done", "author": "udim", "createdAt": "2020-02-03T19:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MjAxNg=="}], "type": "inlineReview"}, {"oid": "f36609fde696e50b341827c86650c3e69b4c6670", "url": "https://github.com/apache/beam/commit/f36609fde696e50b341827c86650c3e69b4c6670", "message": "Type hint and mypy fixes", "committedDate": "2020-02-03T19:49:17Z", "type": "commit"}]}