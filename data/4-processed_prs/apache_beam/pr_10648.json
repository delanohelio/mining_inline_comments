{"pr_number": 10648, "pr_title": "[BEAM-3419] Support iterable on Dataflow runner when using the unified worker.", "pr_createdAt": "2020-01-21T23:24:54Z", "pr_url": "https://github.com/apache/beam/pull/10648", "timeline": [{"oid": "95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e", "url": "https://github.com/apache/beam/commit/95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e", "message": "[BEAM-3419] Support iterable on Dataflow runner when using the unified worker.\n\nNote that all other portable runners are using iterable side inputs.", "committedDate": "2020-01-21T23:22:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTgyNA==", "url": "https://github.com/apache/beam/pull/10648#discussion_r369821824", "bodyText": "Please file a JIRA to get to the root of this discrepancy.", "author": "robertwb", "createdAt": "2020-01-22T21:47:43Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -320,24 +320,32 @@ def visit_transform(self, transform_node):\n           for ix, side_input in enumerate(transform_node.side_inputs):\n             access_pattern = side_input._side_input_data().access_pattern\n             if access_pattern == common_urns.side_inputs.ITERABLE.urn:\n-              # Add a map to ('', value) as Dataflow currently only handles\n-              # keyed side inputs.\n-              pipeline = side_input.pvalue.pipeline\n-              new_side_input = _DataflowIterableSideInput(side_input)\n-              new_side_input.pvalue = beam.pvalue.PCollection(\n-                  pipeline,\n-                  element_type=typehints.KV[\n-                      bytes, side_input.pvalue.element_type],\n-                  is_bounded=side_input.pvalue.is_bounded)\n-              parent = transform_node.parent or pipeline._root_transform()\n-              map_to_void_key = beam.pipeline.AppliedPTransform(\n-                  pipeline,\n-                  beam.Map(lambda x: (b'', x)),\n-                  transform_node.full_label + '/MapToVoidKey%s' % ix,\n-                  (side_input.pvalue,))\n-              new_side_input.pvalue.producer = map_to_void_key\n-              map_to_void_key.add_output(new_side_input.pvalue)\n-              parent.add_part(map_to_void_key)\n+              if use_unified_worker:\n+                # Patch up the access pattern to appease Dataflow when using", "originalCommit": "95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NDQwOQ==", "url": "https://github.com/apache/beam/pull/10648#discussion_r369874409", "bodyText": "Filed BEAM-9173", "author": "lukecwik", "createdAt": "2020-01-23T00:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NTYwMw==", "url": "https://github.com/apache/beam/pull/10648#discussion_r369875603", "bodyText": "Added link in follow-up #10667", "author": "lukecwik", "createdAt": "2020-01-23T00:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjQwNA==", "url": "https://github.com/apache/beam/pull/10648#discussion_r369822404", "bodyText": "Why is a special _DataflowIterableSideInput needed?", "author": "robertwb", "createdAt": "2020-01-22T21:49:03Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -320,24 +320,32 @@ def visit_transform(self, transform_node):\n           for ix, side_input in enumerate(transform_node.side_inputs):\n             access_pattern = side_input._side_input_data().access_pattern\n             if access_pattern == common_urns.side_inputs.ITERABLE.urn:\n-              # Add a map to ('', value) as Dataflow currently only handles\n-              # keyed side inputs.\n-              pipeline = side_input.pvalue.pipeline\n-              new_side_input = _DataflowIterableSideInput(side_input)\n-              new_side_input.pvalue = beam.pvalue.PCollection(\n-                  pipeline,\n-                  element_type=typehints.KV[\n-                      bytes, side_input.pvalue.element_type],\n-                  is_bounded=side_input.pvalue.is_bounded)\n-              parent = transform_node.parent or pipeline._root_transform()\n-              map_to_void_key = beam.pipeline.AppliedPTransform(\n-                  pipeline,\n-                  beam.Map(lambda x: (b'', x)),\n-                  transform_node.full_label + '/MapToVoidKey%s' % ix,\n-                  (side_input.pvalue,))\n-              new_side_input.pvalue.producer = map_to_void_key\n-              map_to_void_key.add_output(new_side_input.pvalue)\n-              parent.add_part(map_to_void_key)\n+              if use_unified_worker:\n+                # Patch up the access pattern to appease Dataflow when using\n+                # the UW and hardcode the output type to be Any since\n+                # the Dataflow JSON and pipeline proto can differ in coders\n+                # which leads to encoding/decoding issues within the runner.\n+                side_input.pvalue.element_type = typehints.Any\n+                new_side_input = _DataflowIterableSideInput(side_input)", "originalCommit": "95ac61e854bf9d3f3d4085a94dd7ce8b19b91a0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MzAzOA==", "url": "https://github.com/apache/beam/pull/10648#discussion_r369873038", "bodyText": "The dataflow translation logic relies on specific field names for the side input which differ from a Beam side input.", "author": "lukecwik", "createdAt": "2020-01-23T00:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgyMjQwNA=="}], "type": "inlineReview"}]}