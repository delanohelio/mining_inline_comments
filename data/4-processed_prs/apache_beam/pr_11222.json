{"pr_number": 11222, "pr_title": "[BEAM-4150] Don't window PCollection coders.", "pr_createdAt": "2020-03-25T17:51:49Z", "pr_url": "https://github.com/apache/beam/pull/11222", "timeline": [{"oid": "fba0b7ad5a2b7b1b7bc6abd7ac2a07604ad52db8", "url": "https://github.com/apache/beam/commit/fba0b7ad5a2b7b1b7bc6abd7ac2a07604ad52db8", "message": "[BEAM-4150] Don't window PCollection coders.\n\nThis also paves the way for non-elementwise data channel coders.", "committedDate": "2020-03-25T22:57:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyMTQyMQ==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398221421", "bodyText": "This was an extra copy of the method that wasn't used anywhere.", "author": "robertwb", "createdAt": "2020-03-25T22:59:01Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -882,66 +885,13 @@ def _add_residuals_and_channel_splits_to_deferred_inputs(\n         prev_stops[\n             channel_split.transform_id] = channel_split.last_primary_element\n \n-  @staticmethod", "originalCommit": "fba0b7ad5a2b7b1b7bc6abd7ac2a07604ad52db8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8f7a277f69db27c7fc0289a3ad79cfd7db81a99e", "url": "https://github.com/apache/beam/commit/8f7a277f69db27c7fc0289a3ad79cfd7db81a99e", "message": "[BEAM-4150] Don't window PCollection coders.\n\nThis also paves the way for non-elementwise data channel coders.", "committedDate": "2020-03-25T23:00:18Z", "type": "forcePushed"}, {"oid": "a3ac58eedb058fe53125de50ac4aee99e9d9fc91", "url": "https://github.com/apache/beam/commit/a3ac58eedb058fe53125de50ac4aee99e9d9fc91", "message": "[BEAM-4150] Don't window PCollection coders.", "committedDate": "2020-03-26T00:17:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398677414", "bodyText": "Note this check is already done within length_prefix_coder where it will return the original coder id if its a safe coder so you can always use it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if pcoll.coder_id in self.safe_coders:\n          \n          \n            \n                  channel_coder = self.length_prefixed_coder(channel_coder)\n          \n          \n            \n                channel_coder = self.length_prefixed_coder(channel_coder)", "author": "lukecwik", "createdAt": "2020-03-26T15:44:53Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -347,6 +348,22 @@ def add_or_get_coder_id(self,\n     self.components.coders[new_coder_id].CopyFrom(coder_proto)\n     return new_coder_id\n \n+  def add_data_channel_coder(self, pcoll_id):\n+    pcoll = self.components.pcollections[pcoll_id]\n+    proto = beam_runner_api_pb2.Coder(\n+        spec=beam_runner_api_pb2.FunctionSpec(\n+            urn=common_urns.coders.WINDOWED_VALUE.urn),\n+        component_coder_ids=[\n+            pcoll.coder_id,\n+            self.components.windowing_strategies[\n+                pcoll.windowing_strategy_id].window_coder_id\n+        ])\n+    channel_coder = self.add_or_get_coder_id(\n+        proto, pcoll.coder_id + '_windowed')\n+    if pcoll.coder_id in self.safe_coders:\n+      channel_coder = self.length_prefixed_coder(channel_coder)", "originalCommit": "50e29a717edc228fceeec16a36d53635f4baa4c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MDgwNw==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398790807", "bodyText": "Here I want to populate the safe_coders mapping for channel_coder iff the value coder has such a mapping.", "author": "robertwb", "createdAt": "2020-03-26T18:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MzYzMQ==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398793631", "bodyText": "lines 398-399 already do this check as part of the length_prefixed_coder method.", "author": "lukecwik", "createdAt": "2020-03-26T18:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNjg1MA==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398806850", "bodyText": "I now understand the nuance of your statement.", "author": "lukecwik", "createdAt": "2020-03-26T18:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODM4OQ==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398808389", "bodyText": "Yes, but here pcoll.coder_id != channel_coder.", "author": "robertwb", "createdAt": "2020-03-26T18:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NzQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3ODA5OQ==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398678099", "bodyText": "If possible try and keep the typing information on methods.", "author": "lukecwik", "createdAt": "2020-03-26T15:45:48Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/fn_runner.py", "diffHunk": "@@ -426,7 +423,8 @@ def _collect_written_timers_and_add_to_deferred_inputs(\n       pipeline_components,  # type: beam_runner_api_pb2.Components\n       stage,  # type: translations.Stage\n       bundle_context_manager,  # type: execution.BundleContextManager\n-      deferred_inputs  # type: MutableMapping[str, PartitionableBuffer]\n+      deferred_inputs,  # type: MutableMapping[str, PartitionableBuffer]\n+      data_channel_coders,", "originalCommit": "50e29a717edc228fceeec16a36d53635f4baa4c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4OTgxMg==", "url": "https://github.com/apache/beam/pull/11222#discussion_r398789812", "bodyText": "Thanks for calling me out on this. The types themselves aren't very informative as to their meaning, but I added it here and elsewhere.", "author": "robertwb", "createdAt": "2020-03-26T18:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3ODA5OQ=="}], "type": "inlineReview"}, {"oid": "b8678977164b643ce2a9d7f06f47b16790227863", "url": "https://github.com/apache/beam/commit/b8678977164b643ce2a9d7f06f47b16790227863", "message": "[BEAM-4150] Use explicit map for data channel coders.\n\nThis is needed to remove the windowing from PCollection coders, but also\npaves the way for non-elementwise data channel coders.", "committedDate": "2020-03-26T20:46:41Z", "type": "commit"}, {"oid": "019ecf24a0852f3d2145264234fbd4b639da5368", "url": "https://github.com/apache/beam/commit/019ecf24a0852f3d2145264234fbd4b639da5368", "message": "[BEAM-4150] Don't window PCollection coders.", "committedDate": "2020-03-26T20:46:42Z", "type": "commit"}, {"oid": "019ecf24a0852f3d2145264234fbd4b639da5368", "url": "https://github.com/apache/beam/commit/019ecf24a0852f3d2145264234fbd4b639da5368", "message": "[BEAM-4150] Don't window PCollection coders.", "committedDate": "2020-03-26T20:46:42Z", "type": "forcePushed"}]}