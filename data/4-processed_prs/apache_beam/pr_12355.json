{"pr_number": 12355, "pr_title": "[BEAM-10559] Add some comments and clean up SQL example.", "pr_createdAt": "2020-07-23T17:10:08Z", "pr_url": "https://github.com/apache/beam/pull/12355", "timeline": [{"oid": "ee10be114ccdd0b253e1076ccd7dec17a9ab40f4", "url": "https://github.com/apache/beam/commit/ee10be114ccdd0b253e1076ccd7dec17a9ab40f4", "message": "Add some comments and clean up SQL exmple.", "committedDate": "2020-07-23T17:05:17Z", "type": "commit"}, {"oid": "ad943a7f113af0c2764111004647462bf12210c1", "url": "https://github.com/apache/beam/commit/ad943a7f113af0c2764111004647462bf12210c1", "message": "lint", "committedDate": "2020-07-23T17:44:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0Mzc5Mw==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459643793", "bodyText": "\".. that use the SQL transform.\"  (to differentiate from wordcount_xlang.py)", "author": "chamikaramj", "createdAt": "2020-07-23T18:24:29Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,16 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A cross-language word-counting workflow.", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459644349", "bodyText": "I think we need a README file more specific instructions for Dataflow and portable runners for users to easily try this out. I believe @TheNeuralBit is working on it.", "author": "chamikaramj", "createdAt": "2020-07-23T18:25:24Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,16 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A cross-language word-counting workflow.\n+\n+Java and docker must be available to run this pipeline.", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1ODgzNA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459658834", "bodyText": "Yep - BEAM-10559 is tracking this.", "author": "TheNeuralBit", "createdAt": "2020-07-23T18:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mjk4NQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459662985", "bodyText": "Sounds good.", "author": "chamikaramj", "createdAt": "2020-07-23T18:58:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2ODI2MA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459768260", "bodyText": "I don't know what such a readme would say. You run the pipeline with python wordcount_xlang_sql.py or python -m apache_beam.examples.wordcount_xlang_sql just as with all the other examples here. For Dataflow you set --runner=DataflowRunner (plus all the other parameters as documented elsewhere, but I did add a note about the experiment), for Flink you set --runner=FlinkRunner. Unlike kafka, there's no need for special instructions about setting up or connecting to an external cluster. Pretty much anything I can think of putting in a readme for this pipeline would be equally as well placed in a readme for running pipelines in general.\nThe best readme is a readme that is not needed because it just works.\n(I do think it'd be good to have more docs and other more comprehensive examples, e.g. using Row and joins and more complicated queries.)", "author": "robertwb", "createdAt": "2020-07-23T22:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4NzU4Mg==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459787582", "bodyText": "Probably we need to include following information as well (either here on in a README).\n(1) The fact that users have to install Java and which version to install\n(2) Instructions for running from HEAD (for example, you need to push a Docker container to Docker Hub for Dataflow). May be you can just point to kafkataxi README for this.\n(3) Example command for Dataflow with 'use_runner_v2' (and additionally sdk_harness_container_image_overrides for HEAD).", "author": "chamikaramj", "createdAt": "2020-07-23T23:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NTExNg==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459795116", "bodyText": "That's true if I wrote a README, everything for running on Dataflow would just be copied from the kafkataxi README.", "author": "TheNeuralBit", "createdAt": "2020-07-24T00:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NTE1MQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459795151", "bodyText": "At the top we note that Java is required. Good point about versions; I updated this to say java 8. I don't think we need instructions for building and running at head (which are not specific to SQL) in the very first introduction to using SqlTransform.", "author": "robertwb", "createdAt": "2020-07-24T00:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5Njg4Mw==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459796883", "bodyText": "Note that Docker is only required when running at HEAD (with a custom container).", "author": "chamikaramj", "createdAt": "2020-07-24T00:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyODMzOQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r461028339", "bodyText": "Updated the note about docker. It is required to run locally (ULR, local Flink cluster, ...). It's also required to create a custom container, but that's more about custom containers.", "author": "robertwb", "createdAt": "2020-07-27T16:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTMzNQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459645335", "bodyText": "Can we generalize this so that users can easily try this out with Dataflow as well ?", "author": "chamikaramj", "createdAt": "2020-07-23T18:27:16Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -101,12 +89,33 @@ def main():\n   # workflow rely on global context (e.g., a module imported at module level).\n   pipeline_options.view_as(SetupOptions).save_main_session = True\n \n-  p = beam.Pipeline(options=pipeline_options)\n-  # Preemptively start due to BEAM-6666.\n-  p.runner.create_job_service(pipeline_options)\n+  with beam.Pipeline(options=pipeline_options) as p:\n+    if isinstance(p.runner, portable_runner.PortableRunner):", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2OTUyOA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459769528", "bodyText": "This will just work for Dataflow. That's why I added the guard.", "author": "robertwb", "createdAt": "2020-07-23T22:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTc5NA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459645794", "bodyText": "Can we also briefly describe what this pipeline does and what output it produces ?", "author": "chamikaramj", "createdAt": "2020-07-23T18:28:06Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,16 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A cross-language word-counting workflow.\n+", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTcwMA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459765700", "bodyText": "Wordcount is the quintessential example of all Beam pipelines, and this does exactly the same thing that all the other wordcount variants in this folder do. I think it makes more sense to highlight the differences.", "author": "robertwb", "createdAt": "2020-07-23T22:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjM2Nw==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459646367", "bodyText": "What are the other ways ? We should document all such possibilities in the Sql transform. Currently sql.py mentions that input PCollection must have a PCollection NamedTuple type.", "author": "chamikaramj", "createdAt": "2020-07-23T18:29:07Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -31,51 +35,35 @@\n from apache_beam.io import WriteToText\n from apache_beam.options.pipeline_options import PipelineOptions\n from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.runners.portability import portable_runner\n from apache_beam.transforms.sql import SqlTransform\n \n+# The input to SqlTransform must be a PCollection(s) of known schema.\n+# One way to create such a PCollection is to produce a PCollection of\n+# NamedTuple registered with the RowCoder.", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2ODU4MA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459768580", "bodyText": "There is the recently added Row type. The docs on SqlTransform should be updated, but that's not a prerequisite for using these transforms.", "author": "robertwb", "createdAt": "2020-07-23T22:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NjM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MDc1NQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459650755", "bodyText": "We should also document current limitations of sql.py in the pydoc in that file (if any).", "author": "chamikaramj", "createdAt": "2020-07-23T18:36:57Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -31,51 +35,35 @@\n from apache_beam.io import WriteToText\n from apache_beam.options.pipeline_options import PipelineOptions\n from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.runners.portability import portable_runner\n from apache_beam.transforms.sql import SqlTransform\n \n+# The input to SqlTransform must be a PCollection(s) of known schema.\n+# One way to create such a PCollection is to produce a PCollection of\n+# NamedTuple registered with the RowCoder.\n+#\n+# Here we create and register a simple NamedTuple with a single unicode typed\n+# field named 'word' which we will use below.", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjI0Nw==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459652247", "bodyText": "key and count properties are already defined ? Let's clarify that here in a comment.", "author": "chamikaramj", "createdAt": "2020-07-23T18:39:40Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -31,51 +35,35 @@\n from apache_beam.io import WriteToText\n from apache_beam.options.pipeline_options import PipelineOptions\n from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.runners.portability import portable_runner\n from apache_beam.transforms.sql import SqlTransform\n \n+# The input to SqlTransform must be a PCollection(s) of known schema.\n+# One way to create such a PCollection is to produce a PCollection of\n+# NamedTuple registered with the RowCoder.\n+#\n+# Here we create and register a simple NamedTuple with a single unicode typed\n+# field named 'word' which we will use below.\n MyRow = typing.NamedTuple('MyRow', [('word', unicode)])\n coders.registry.register_coder(MyRow, coders.RowCoder)\n \n-# Some more fun queries:\n-# ------\n-# SELECT\n-#   word as key,\n-#   COUNT(*) as `count`\n-# FROM PCOLLECTION\n-# GROUP BY word\n-# ORDER BY `count` DESC\n-# LIMIT 100\n-# ------\n-# SELECT\n-#   len as key,\n-#   COUNT(*) as `count`\n-# FROM (\n-#   SELECT\n-#     LENGTH(word) AS len\n-#   FROM PCOLLECTION\n-# )\n-# GROUP BY len\n-\n \n def run(p, input_file, output_file):\n   #pylint: disable=expression-not-assigned\n   (\n       p\n-      | 'read' >> ReadFromText(input_file)\n-      | 'split' >> beam.FlatMap(str.split)\n-      | 'row' >> beam.Map(MyRow).with_output_types(MyRow)\n-      | 'sql!!' >> SqlTransform(\n+      | 'Read' >> ReadFromText(input_file)\n+      | 'Split' >> beam.FlatMap(lambda line: re.split(r'\\W+', line))\n+      | 'ToRow' >> beam.Map(MyRow).with_output_types(MyRow)\n+      | 'Sql!!' >> SqlTransform(\n           \"\"\"\n                    SELECT\n                      word as key,\n                      COUNT(*) as `count`\n                    FROM PCOLLECTION\n                    GROUP BY word\"\"\")\n-      | 'format' >> beam.Map(lambda row: '{}: {}'.format(row.key, row.count))\n-      | 'write' >> WriteToText(output_file))\n-\n-  result = p.run()\n-  result.wait_until_finish()\n+      | 'Format' >> beam.Map(lambda row: '{}: {}'.format(row.key, row.count))", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MDE4Mg==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459660182", "bodyText": "Perhaps something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  | 'Format' >> beam.Map(lambda row: '{}: {}'.format(row.key, row.count))\n          \n          \n            \n                  # SqlTransform yields a PCollection containing elements of a generated NamedTuple type, with attributes based on the output of the query.\n          \n          \n            \n                  | 'Format' >> beam.Map(lambda row: '{}: {}'.format(row.key, row.count))", "author": "TheNeuralBit", "createdAt": "2020-07-23T18:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2OTI5Mg==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459769292", "bodyText": "Maybe just\nSqlTransform yields a PCollection containing elements with attributes based on the output of the query.\nThe fact that it's a named tuple is not needed for its use (and I'm not sure we want to promise that).", "author": "robertwb", "createdAt": "2020-07-23T22:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NTI5Mg==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459775292", "bodyText": "SGTM \ud83d\udc4d", "author": "TheNeuralBit", "createdAt": "2020-07-23T23:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4ODMyOA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459788328", "bodyText": "SGTM. Probably we need to update sql.py to match this: https://github.com/apache/beam/blob/master/sdks/python/apache_beam/transforms/sql.py#L51", "author": "chamikaramj", "createdAt": "2020-07-23T23:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjUwMw==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459652503", "bodyText": "This should not be done for Dataflow.", "author": "chamikaramj", "createdAt": "2020-07-23T18:40:08Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -101,12 +89,33 @@ def main():\n   # workflow rely on global context (e.g., a module imported at module level).\n   pipeline_options.view_as(SetupOptions).save_main_session = True\n \n-  p = beam.Pipeline(options=pipeline_options)\n-  # Preemptively start due to BEAM-6666.\n-  p.runner.create_job_service(pipeline_options)\n+  with beam.Pipeline(options=pipeline_options) as p:\n+    if isinstance(p.runner, portable_runner.PortableRunner):\n+      # Preemptively start due to BEAM-6666.\n+      p.runner.create_job_service(pipeline_options)", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTU5OQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459661599", "bodyText": "won't the isinstance check ensure it's not?", "author": "TheNeuralBit", "createdAt": "2020-07-23T18:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzIxMQ==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459663211", "bodyText": "Yeah, you are right.", "author": "chamikaramj", "createdAt": "2020-07-23T18:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MjUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MzQwMA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459653400", "bodyText": "Did we confirm that these are working for Daataflow and portable runners ?", "author": "chamikaramj", "createdAt": "2020-07-23T18:41:46Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -101,12 +89,33 @@ def main():\n   # workflow rely on global context (e.g., a module imported at module level).\n   pipeline_options.view_as(SetupOptions).save_main_session = True\n \n-  p = beam.Pipeline(options=pipeline_options)\n-  # Preemptively start due to BEAM-6666.\n-  p.runner.create_job_service(pipeline_options)\n+  with beam.Pipeline(options=pipeline_options) as p:\n+    if isinstance(p.runner, portable_runner.PortableRunner):\n+      # Preemptively start due to BEAM-6666.\n+      p.runner.create_job_service(pipeline_options)\n+\n+    run(p, known_args.input, known_args.output)\n \n-  run(p, known_args.input, known_args.output)\n \n+# Some more fun queries:\n+# ------\n+# SELECT\n+#   word as key,\n+#   COUNT(*) as `count`\n+# FROM PCOLLECTION\n+# GROUP BY word", "originalCommit": "ad943a7f113af0c2764111004647462bf12210c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTgwNg==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459661806", "bodyText": "I ran all these queries when I was demoing on Flink with the prototype last Fall, but haven't done it for a while.", "author": "TheNeuralBit", "createdAt": "2020-07-23T18:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MzQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MzQxMg==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459663412", "bodyText": "Let's try them again and try with Dataflow as well.", "author": "chamikaramj", "createdAt": "2020-07-23T18:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MzQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4NTg3OA==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459785878", "bodyText": "Good idea. I ran all of them on FnApiRunner and Dataflow on 2.23.0-RC2 (with the job service line commented out) and they worked as intended \ud83c\udf89\nJob ids for the Dataflow runs:\n\n2020-07-23_16_00_29-9161755024487428146\n2020-07-23_16_11_11-9635287738762184253\n2020-07-23_16_19_49-9899271126466068112", "author": "TheNeuralBit", "createdAt": "2020-07-23T23:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MzQwMA=="}], "type": "inlineReview"}, {"oid": "85b9c6f7e76108ac7d256480d8dc60870b5eb270", "url": "https://github.com/apache/beam/commit/85b9c6f7e76108ac7d256480d8dc60870b5eb270", "message": "Update decription.", "committedDate": "2020-07-23T22:48:16Z", "type": "commit"}, {"oid": "da6612a2bd9e59ab1e8240700e5121c2a7daf5e0", "url": "https://github.com/apache/beam/commit/da6612a2bd9e59ab1e8240700e5121c2a7daf5e0", "message": "note about java8", "committedDate": "2020-07-24T00:05:56Z", "type": "commit"}, {"oid": "8d51ce31db3bc1985a4e38489137e95e96aa848f", "url": "https://github.com/apache/beam/commit/8d51ce31db3bc1985a4e38489137e95e96aa848f", "message": "More comments in the pipeline.", "committedDate": "2020-07-24T00:09:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NTM0Nw==", "url": "https://github.com/apache/beam/pull/12355#discussion_r459795347", "bodyText": "How about:\nJava 8 must be available to run this pipeline and --experiments=use_runner_v2 flag must be passed for running on Dataflow.\nAdditionally you need to install Docker to run this pipeline from HEAD with a custom Java container. See `here <https://github.com/apache/beam/tree/master/sdks/python/apache_beam/examples/kafkataxi/>` for more details.", "author": "chamikaramj", "createdAt": "2020-07-24T00:13:14Z", "path": "sdks/python/apache_beam/examples/wordcount_xlang_sql.py", "diffHunk": "@@ -15,12 +15,17 @@\n # limitations under the License.\n #\n \n-\"\"\"A cross-language word-counting workflow.\"\"\"\n+\"\"\"A word-counting workflow that uses the SQL transform.\n+\n+Java 8 and docker must be available to run this pipeline, and the", "originalCommit": "da6612a2bd9e59ab1e8240700e5121c2a7daf5e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c7927555e9805adab43c81b62959304cc18c0642", "url": "https://github.com/apache/beam/commit/c7927555e9805adab43c81b62959304cc18c0642", "message": "update note about docker", "committedDate": "2020-07-27T16:50:15Z", "type": "commit"}]}