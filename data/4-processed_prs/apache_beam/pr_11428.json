{"pr_number": 11428, "pr_title": "[BEAM-9764] multi threading & optional pulling", "pr_createdAt": "2020-04-15T20:24:07Z", "pr_url": "https://github.com/apache/beam/pull/11428", "timeline": [{"oid": "3ea2eea21ade21c495b0ef7e99c4ad806150a734", "url": "https://github.com/apache/beam/commit/3ea2eea21ade21c495b0ef7e99c4ad806150a734", "message": "add retries for URLError and set url='skip' when url cannot be identified", "committedDate": "2020-04-15T21:59:23Z", "type": "forcePushed"}, {"oid": "e716a476917e9a78b820047d3e74dd812ced48ac", "url": "https://github.com/apache/beam/commit/e716a476917e9a78b820047d3e74dd812ced48ac", "message": "add retries for URLError and set url='skip' when url cannot be identified", "committedDate": "2020-04-16T22:11:45Z", "type": "forcePushed"}, {"oid": "15998a3613c27dfd65e78cfa9ac669f7f82a43d5", "url": "https://github.com/apache/beam/commit/15998a3613c27dfd65e78cfa9ac669f7f82a43d5", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T02:39:17Z", "type": "forcePushed"}, {"oid": "88a5e5dd80c84bb996f1b51b27db19ccfd5672bf", "url": "https://github.com/apache/beam/commit/88a5e5dd80c84bb996f1b51b27db19ccfd5672bf", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T02:43:58Z", "type": "forcePushed"}, {"oid": "6185239b78fcaeb9f808473dde1c16a1bbea1ecc", "url": "https://github.com/apache/beam/commit/6185239b78fcaeb9f808473dde1c16a1bbea1ecc", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T02:53:52Z", "type": "forcePushed"}, {"oid": "bc723cc52d4f954d62a29070da02e6e8e36bdf0c", "url": "https://github.com/apache/beam/commit/bc723cc52d4f954d62a29070da02e6e8e36bdf0c", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T02:59:01Z", "type": "forcePushed"}, {"oid": "94a5dbcba1eb48baba3859787789711dbcbf607b", "url": "https://github.com/apache/beam/commit/94a5dbcba1eb48baba3859787789711dbcbf607b", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T03:14:00Z", "type": "forcePushed"}, {"oid": "4401e4db083e3e191ca1f7e050a36596279f3718", "url": "https://github.com/apache/beam/commit/4401e4db083e3e191ca1f7e050a36596279f3718", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T03:24:32Z", "type": "forcePushed"}, {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219", "url": "https://github.com/apache/beam/commit/cf238c497bf65f9180d9ade5941102c8db4be219", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T03:29:53Z", "type": "commit"}, {"oid": "cf238c497bf65f9180d9ade5941102c8db4be219", "url": "https://github.com/apache/beam/commit/cf238c497bf65f9180d9ade5941102c8db4be219", "message": "multi threading & check urls instead of pulling", "committedDate": "2020-04-17T03:29:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NzQyMQ==", "url": "https://github.com/apache/beam/pull/11428#discussion_r410387421", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              # create an empty file to aviod no file/dir existing error\n          \n          \n            \n              # create an empty file to avoid no file/dir existing error", "author": "udim", "createdAt": "2020-04-17T18:07:23Z", "path": "sdks/java/container/license_scripts/license_script.sh", "diffHunk": "@@ -25,15 +25,23 @@ pip install PyYAML==5.3\n pip install tenacity==5.0.4\n \n # pull licenses, notices and source code\n-python sdks/java/container/license_scripts/pull_licenses_java.py\n+if [ \"$1\" = 'true' ]; then\n+  python sdks/java/container/license_scripts/pull_licenses_java.py --pull_licenses\n+else\n+  python sdks/java/container/license_scripts/pull_licenses_java.py\n+fi\n \n pip uninstall -y beautifulsoup4\n pip uninstall -y future\n pip uninstall -y PyYAML\n pip uninstall -y tenacity\n \n mkdir sdks/java/container/third_party_licenses\n-gzip -r java_third_party_licenses/*\n-cp -r java_third_party_licenses/*.jar sdks/java/container/third_party_licenses/\n-cp -r java_third_party_licenses/*.csv.gz sdks/java/container/third_party_licenses/\n+if [ \"$1\" = 'true' ]; then\n+  cp -r java_third_party_licenses/*.jar sdks/java/container/third_party_licenses/\n+  cp -r java_third_party_licenses/*.csv sdks/java/container/third_party_licenses/\n+else\n+  # create an empty file to aviod no file/dir existing error", "originalCommit": "cf238c497bf65f9180d9ade5941102c8db4be219", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA==", "url": "https://github.com/apache/beam/pull/11428#discussion_r410390164", "bodyText": "BTW, I wanted to mention that doing a pip install/uninstall like this messes with the user's environment.\nThe standard way to run this would be via tox (see sdks/python/tox.ini), which will take care of creating a virtualenv to run this under (and you can specify a certain python version if you wish).", "author": "udim", "createdAt": "2020-04-17T18:12:48Z", "path": "sdks/java/container/license_scripts/license_script.sh", "diffHunk": "@@ -25,15 +25,23 @@ pip install PyYAML==5.3\n pip install tenacity==5.0.4", "originalCommit": "cf238c497bf65f9180d9ade5941102c8db4be219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NTg1NQ==", "url": "https://github.com/apache/beam/pull/11428#discussion_r411765855", "bodyText": "I reviewed to use tox here, but it is a little complicated. We want to keep it simple within a script, so it's easy to use and maintain. Current scripts run at local machine, (not within a docker), so docker will still have clear environment.", "author": "Hannah-Jiang", "createdAt": "2020-04-20T23:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MTQ1NQ==", "url": "https://github.com/apache/beam/pull/11428#discussion_r412391455", "bodyText": "I don't agree that it's acceptable to modify the user environment. Also, on Jenkins this might cause failure if this script runs concurrently with itself.\nI've opened a bug for this: https://issues.apache.org/jira/browse/BEAM-9797", "author": "udim", "createdAt": "2020-04-21T18:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwMjIxOQ==", "url": "https://github.com/apache/beam/pull/11428#discussion_r412402219", "bodyText": "Thank you Udi for bringing up this issue. Yes, we should fix it. I will merge this PR and work on a different PR to fix it.", "author": "Hannah-Jiang", "createdAt": "2020-04-21T18:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5MDE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA==", "url": "https://github.com/apache/beam/pull/11428#discussion_r410403628", "bodyText": "This looks good, except you're not waiting for all threads to finish so the csv_list might be incomplete.\nA ThreadPoolExecutor would be useful here and do what you want:\nRough example:\nwith concurrent.futures.ThreadPoolExecutor(max_workers=THREADS) as executor:\n  futures = [executor.submit(execute, dep) for dep in dependencies['dependencies']]\n  ... # get the future results as they become available, see example link below\nhttps://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example\nCurrently the code in execute does csv_list.append(csv_dict) at the end, which needs synchronization to work right (I assume that csv_list is shared among threads). Returning csv_dict instead will make it available as a future.result().", "author": "udim", "createdAt": "2020-04-17T18:39:21Z", "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []\n+    no_licenses = []\n+    no_license_type = []\n+    incorrect_source_url = []\n \n-        # pull source code if license_type is one of SOURCE_CODE_REQUIRED_LICENSES.\n-        if any(x in license_type.lower()\n-               for x in SOURCE_CODE_REQUIRED_LICENSES):\n-            try:\n-                base_url = dep_config[name][version]['source']\n-            except:\n-                module = dep['moduleName'].split(':')[0].replace('.', '/')\n-                base_url = maven_url_temp.format(module=module + '/' + name,\n-                                                 version=version)\n-            pull_source_code(base_url, dir_name, name_version,\n-                             incorrect_source_url)\n-            source_included = True\n-        else:\n-            source_included = False\n-\n-        csv_dict[name_version] = {\n-            'url_to_license': license_url,\n-            'license_type': license_type,\n-            'source_included': source_included\n-        }\n+    queue = Queue()\n+    for x in range(THREADS):\n+        worker = Worker(queue)\n+        worker.daemon = True\n+        worker.start()\n+    for dep in dependencies['dependencies']:\n+        queue.put(dep)\n+    queue.join()\n ", "originalCommit": "cf238c497bf65f9180d9ade5941102c8db4be219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxODkwMQ==", "url": "https://github.com/apache/beam/pull/11428#discussion_r411718901", "bodyText": "According to this, queue.join() is unblocked when all items in the queue are processed, so I think it works as intended. (csv_list has all records it should have.)", "author": "Hannah-Jiang", "createdAt": "2020-04-20T21:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MTg5NQ==", "url": "https://github.com/apache/beam/pull/11428#discussion_r411751895", "bodyText": "Sorry, you're right. I wasn't aware of task_done.\nI still believe that a ThreadPoolExecutor is useful, but feel free to resolve this without any changes.", "author": "udim", "createdAt": "2020-04-20T23:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzNDAxOA==", "url": "https://github.com/apache/beam/pull/11428#discussion_r411834018", "bodyText": "Thanks Udi. Yes, I agree ThreadPoolExecutor is better here, but it (concurrent.future) only works with Py3. In order to use virtual env, we need to use tox and it brings unnecessary complexity. I think it's good enough for now and we can change to ThreadPoolExecutor when we sunset down Py2.", "author": "Hannah-Jiang", "createdAt": "2020-04-21T03:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMzYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTM0MQ==", "url": "https://github.com/apache/beam/pull/11428#discussion_r410411341", "bodyText": "These lists need to have synchronized access if they are to be modified by different threads.\nhttps://stackoverflow.com/questions/2227169/are-python-built-in-containers-thread-safe", "author": "udim", "createdAt": "2020-04-17T18:54:50Z", "path": "sdks/java/container/license_scripts/pull_licenses_java.py", "diffHunk": "@@ -108,89 +244,27 @@ def write_to_csv(csv_dict):\n \n     maven_url_temp = 'https://repo1.maven.org/maven2/{module}/{version}'\n \n-    for dep in dependencies['dependencies']:\n-        '''\n-        An example of a Json blob.\n-        {\n-            \"moduleName\": \"antlr:antlr\",\n-            \"moduleUrl\": \"http://www.antlr.org/\",\n-            \"moduleVersion\": \"2.7.7\",\n-            \"moduleLicense\": \"BSD License\",\n-            \"moduleLicenseUrl\": \"http://www.antlr.org/license.html\"\n-        }\n-        '''\n-        name = dep['moduleName'].split(':')[1].lower()\n-        version = dep['moduleVersion']\n-        name_version = name + '-' + version\n-        dir_name = '{license_dir}/{name_version}.jar'.format(\n-            license_dir=LICENSE_DIR, name_version=name_version)\n-        # if auto pulled, directory is existing at {license_dir}\n-        if not os.path.isdir(dir_name):\n-            # skip self dependencies\n-            if dep['moduleName'].startswith('beam'):\n-                print('Skippig', name + '-' + version)\n-                continue\n-            os.mkdir(dir_name)\n-            # pull license\n-            try:\n-                license_url = dep_config[name][version]['license']\n-            except:\n-                license_url = dep['moduleLicenseUrl']\n-            pull_from_url(dir_name + '/LICENSE', license_url, name_version,\n-                          no_licenses)\n-            # pull notice\n-            try:\n-                notice_url = dep_config[name][version]['notice']\n-                pull_from_url(dir_name + '/NOTICE', notice_url, name_version,\n-                              no_licenses)\n-            except:\n-                notice_url = None\n-        else:\n-            try:\n-                license_url = dep['moduleLicenseUrl']\n-            except:\n-                license_url = ''\n-            print(\n-                'License/notice for {name_version} were pulled automatically.'.\n-                format(name_version=name_version))\n-\n-        # get license_type to decide if pull source code.\n-        try:\n-            license_type = dep['moduleLicense']\n-        except:\n-            try:\n-                license_type = dep_config[name][version]['type']\n-            except:\n-                no_license_type.add(name_version)\n-                license_type = ''\n-                continue\n+    csv_list = []", "originalCommit": "cf238c497bf65f9180d9ade5941102c8db4be219", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzNDU4Nw==", "url": "https://github.com/apache/beam/pull/11428#discussion_r411834587", "bodyText": "According to this (post)[https://stackoverflow.com/questions/6319207/are-lists-thread-safe], append operation is thread safe. But I added lock to make sure all records are added and the operation is not expensive.", "author": "Hannah-Jiang", "createdAt": "2020-04-21T03:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTM0MQ=="}], "type": "inlineReview"}, {"oid": "970532900bf1b7d9d2684e9751738caa1ad1209c", "url": "https://github.com/apache/beam/commit/970532900bf1b7d9d2684e9751738caa1ad1209c", "message": "add thread_lock and more logs", "committedDate": "2020-04-21T03:10:51Z", "type": "commit"}, {"oid": "06cb50eda4cc42aeb58e5f0c1d0dc02ed9f88847", "url": "https://github.com/apache/beam/commit/06cb50eda4cc42aeb58e5f0c1d0dc02ed9f88847", "message": "fix package version and import", "committedDate": "2020-04-21T03:10:56Z", "type": "commit"}, {"oid": "06cb50eda4cc42aeb58e5f0c1d0dc02ed9f88847", "url": "https://github.com/apache/beam/commit/06cb50eda4cc42aeb58e5f0c1d0dc02ed9f88847", "message": "fix package version and import", "committedDate": "2020-04-21T03:10:56Z", "type": "forcePushed"}]}