{"pr_number": 12082, "pr_title": "Standardizing BigQuery job names in Beam Python and Java SDKs", "pr_createdAt": "2020-06-24T21:37:44Z", "pr_url": "https://github.com/apache/beam/pull/12082", "timeline": [{"oid": "fd0a2236bf71a0abc4bed0141427750355da653d", "url": "https://github.com/apache/beam/commit/fd0a2236bf71a0abc4bed0141427750355da653d", "message": "Fixup", "committedDate": "2020-06-29T16:52:39Z", "type": "forcePushed"}, {"oid": "60b854c2dbc7f7726ce8224066d607e4f5c22e94", "url": "https://github.com/apache/beam/commit/60b854c2dbc7f7726ce8224066d607e4f5c22e94", "message": "Fixup", "committedDate": "2020-06-29T19:57:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNDUxNA==", "url": "https://github.com/apache/beam/pull/12082#discussion_r457114514", "bodyText": "\"Resources can be any type of BigQuery job started by BigQueryIO and temporary BigQuery resources created by BigQueryIO.\" ?", "author": "chamikaramj", "createdAt": "2020-07-20T07:04:45Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryResourceNaming.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.bigquery;\n+\n+import com.google.api.services.bigquery.model.TableReference;\n+import java.util.Optional;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.hash.Hashing;\n+\n+/**\n+ * This class contains utilities to standardize how resources are named by BigQueryIO.\n+ *\n+ * <p>Resources can be: - BigQuery jobs - Export jobs - Query jobs - Load jobs - Copy jobs -", "originalCommit": "60b854c2dbc7f7726ce8224066d607e4f5c22e94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5OTAyNg==", "url": "https://github.com/apache/beam/pull/12082#discussion_r459699026", "bodyText": "done.", "author": "pabloem", "createdAt": "2020-07-23T20:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNDUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNjA4NA==", "url": "https://github.com/apache/beam/pull/12082#discussion_r457116084", "bodyText": "Probably cleaner to just use String.format() to do the replacement ?\nAlso, mention the standard format in the top level Java doc for easy reference.", "author": "chamikaramj", "createdAt": "2020-07-20T07:07:13Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryResourceNaming.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.bigquery;\n+\n+import com.google.api.services.bigquery.model.TableReference;\n+import java.util.Optional;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.hash.Hashing;\n+\n+/**\n+ * This class contains utilities to standardize how resources are named by BigQueryIO.\n+ *\n+ * <p>Resources can be: - BigQuery jobs - Export jobs - Query jobs - Load jobs - Copy jobs -\n+ * Temporary datasets - Temporary tables\n+ *\n+ * <p>This class has no backwards compatibility guaantees. It is considered internal.\n+ */\n+class BigQueryResourceNaming {\n+\n+  /**\n+   * Generate a BigQuery job ID based on a prefix from {@link\n+   * BigQueryResourceNaming::createJobIdPrefix}, with destination information added to it.\n+   *\n+   * @param prefix A prefix generated in {@link BigQueryResourceNaming::createJobIdPrefix}.\n+   * @param tableDestination A descriptor of the destination table.\n+   * @param partition A partition number in the destination table.\n+   * @param index\n+   * @return\n+   */\n+  static String createJobIdWithDestination(\n+      String prefix, TableDestination tableDestination, int partition, long index) {\n+    // Job ID must be different for each partition of each table.\n+    String destinationHash =\n+        Hashing.murmur3_128().hashUnencodedChars(tableDestination.toString()).toString();\n+    String jobId = String.format(\"%s_%s\", prefix, destinationHash);\n+    if (partition >= 0) {\n+      jobId += String.format(\"_%05d\", partition);\n+    }\n+    if (index >= 0) {\n+      jobId += String.format(\"_%05d\", index);\n+    }\n+    return jobId;\n+  }\n+\n+  public enum JobType {\n+    LOAD,\n+    COPY,\n+    EXPORT,\n+    QUERY,\n+  }\n+\n+  static final String BIGQUERY_JOB_TEMPLATE = \"beam_bq_job_{TYPE}_{JOB_ID}_{STEP}_{RANDOM}\";", "originalCommit": "60b854c2dbc7f7726ce8224066d607e4f5c22e94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMDE0OQ==", "url": "https://github.com/apache/beam/pull/12082#discussion_r459700149", "bodyText": "I used this because I'd like to have named slots for replacement. String.format only supports replacement based on position. Is it okay if I keep this?", "author": "pabloem", "createdAt": "2020-07-23T20:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNjA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyMjUyMQ==", "url": "https://github.com/apache/beam/pull/12082#discussion_r457122521", "bodyText": "Can we add tests to make sure that generated names are consistent with BIGQUERY_JOB_TEMPLATE ?", "author": "chamikaramj", "createdAt": "2020-07-20T07:17:20Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryResourceNamingTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.bigquery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.beam.sdk.io.gcp.bigquery.BigQueryResourceNaming.JobType;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class BigQueryResourceNamingTest {\n+\n+  @Test\n+  public void testJobTypesInNames() {\n+    assertEquals(\n+        \"beam_bq_job_EXPORT_beamappjobtest_abcd\",\n+        BigQueryResourceNaming.createJobIdPrefix(\"beamapp-job-test\", \"abcd\", JobType.EXPORT));\n+", "originalCommit": "60b854c2dbc7f7726ce8224066d607e4f5c22e94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1Njg2Mw==", "url": "https://github.com/apache/beam/pull/12082#discussion_r459756863", "bodyText": "Done.", "author": "pabloem", "createdAt": "2020-07-23T22:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyMjUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNDEyMg==", "url": "https://github.com/apache/beam/pull/12082#discussion_r457124122", "bodyText": "Please add unit tests for Python as well.", "author": "chamikaramj", "createdAt": "2020-07-20T07:19:45Z", "path": "sdks/python/apache_beam/io/gcp/bigquery_tools.py", "diffHunk": "@@ -1465,3 +1465,23 @@ def get_avro_schema_from_table_schema(schema):\n   dict_table_schema = get_dict_table_schema(schema)\n   return bigquery_avro_tools.get_record_schema_from_dict_table_schema(\n       \"root\", dict_table_schema)\n+\n+\n+class BigQueryJobTypes:\n+  EXPORT = 'EXPORT'\n+  COPY = 'COPY'\n+  LOAD = 'LOAD'\n+  QUERY = 'QUERY'\n+\n+\n+_BQ_JOB_NAME_TEMPLATE = \"beam_bq_job_{job_type}_{job_id}_{step_id}_{random}\"", "originalCommit": "60b854c2dbc7f7726ce8224066d607e4f5c22e94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1Njg0MQ==", "url": "https://github.com/apache/beam/pull/12082#discussion_r459756841", "bodyText": "Done.", "author": "pabloem", "createdAt": "2020-07-23T22:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNDEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNTAzMg==", "url": "https://github.com/apache/beam/pull/12082#discussion_r457125032", "bodyText": "Can we standardize and define this format in BigQueryIO (probably with a backwards compatibility warning) so that users can rely on it ?", "author": "chamikaramj", "createdAt": "2020-07-20T07:21:13Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryResourceNaming.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.bigquery;\n+\n+import com.google.api.services.bigquery.model.TableReference;\n+import java.util.Optional;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.hash.Hashing;\n+\n+/**\n+ * This class contains utilities to standardize how resources are named by BigQueryIO.\n+ *\n+ * <p>Resources can be: - BigQuery jobs - Export jobs - Query jobs - Load jobs - Copy jobs -\n+ * Temporary datasets - Temporary tables\n+ *\n+ * <p>This class has no backwards compatibility guaantees. It is considered internal.\n+ */\n+class BigQueryResourceNaming {\n+\n+  /**\n+   * Generate a BigQuery job ID based on a prefix from {@link\n+   * BigQueryResourceNaming::createJobIdPrefix}, with destination information added to it.\n+   *\n+   * @param prefix A prefix generated in {@link BigQueryResourceNaming::createJobIdPrefix}.\n+   * @param tableDestination A descriptor of the destination table.\n+   * @param partition A partition number in the destination table.\n+   * @param index\n+   * @return\n+   */\n+  static String createJobIdWithDestination(\n+      String prefix, TableDestination tableDestination, int partition, long index) {\n+    // Job ID must be different for each partition of each table.\n+    String destinationHash =\n+        Hashing.murmur3_128().hashUnencodedChars(tableDestination.toString()).toString();\n+    String jobId = String.format(\"%s_%s\", prefix, destinationHash);\n+    if (partition >= 0) {\n+      jobId += String.format(\"_%05d\", partition);\n+    }\n+    if (index >= 0) {\n+      jobId += String.format(\"_%05d\", index);\n+    }\n+    return jobId;\n+  }\n+\n+  public enum JobType {\n+    LOAD,\n+    COPY,\n+    EXPORT,\n+    QUERY,\n+  }\n+\n+  static final String BIGQUERY_JOB_TEMPLATE = \"beam_bq_job_{TYPE}_{JOB_ID}_{STEP}_{RANDOM}\";", "originalCommit": "60b854c2dbc7f7726ce8224066d607e4f5c22e94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxMzc1OA==", "url": "https://github.com/apache/beam/pull/12082#discussion_r459713758", "bodyText": "Done.", "author": "pabloem", "createdAt": "2020-07-23T20:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNTAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNTI0NQ==", "url": "https://github.com/apache/beam/pull/12082#discussion_r457125245", "bodyText": "Can we standardize and define this format in bigquery.py (probably with a backwards compatibility warning) so that users can rely on it ?", "author": "chamikaramj", "createdAt": "2020-07-20T07:21:33Z", "path": "sdks/python/apache_beam/io/gcp/bigquery_tools.py", "diffHunk": "@@ -1465,3 +1465,23 @@ def get_avro_schema_from_table_schema(schema):\n   dict_table_schema = get_dict_table_schema(schema)\n   return bigquery_avro_tools.get_record_schema_from_dict_table_schema(\n       \"root\", dict_table_schema)\n+\n+\n+class BigQueryJobTypes:\n+  EXPORT = 'EXPORT'\n+  COPY = 'COPY'\n+  LOAD = 'LOAD'\n+  QUERY = 'QUERY'\n+\n+\n+_BQ_JOB_NAME_TEMPLATE = \"beam_bq_job_{job_type}_{job_id}_{step_id}_{random}\"\n+\n+\n+def generate_bq_job_name(job_name, step_id, job_type, random=None):", "originalCommit": "60b854c2dbc7f7726ce8224066d607e4f5c22e94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxNzk0NA==", "url": "https://github.com/apache/beam/pull/12082#discussion_r459717944", "bodyText": "Done.", "author": "pabloem", "createdAt": "2020-07-23T20:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNTI0NQ=="}], "type": "inlineReview"}, {"oid": "9af54351ddc31c607d1634382704c8a52aaa78f3", "url": "https://github.com/apache/beam/commit/9af54351ddc31c607d1634382704c8a52aaa78f3", "message": "Standardizing BigQuery job names in Beam Python and Java SDKs", "committedDate": "2020-07-23T22:13:02Z", "type": "commit"}, {"oid": "c2fb77d9029e8ca7f97157ab37bf7e408e83a258", "url": "https://github.com/apache/beam/commit/c2fb77d9029e8ca7f97157ab37bf7e408e83a258", "message": "Naming BQ Copy jobs consistently in Python", "committedDate": "2020-07-23T22:13:02Z", "type": "commit"}, {"oid": "b39e05baccc50e77ff354f15154507a21a55b108", "url": "https://github.com/apache/beam/commit/b39e05baccc50e77ff354f15154507a21a55b108", "message": "Fixup", "committedDate": "2020-07-23T22:28:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NzkyOA==", "url": "https://github.com/apache/beam/pull/12082#discussion_r461967928", "bodyText": "Nit: what if the runner is not Dataflow ?", "author": "chamikaramj", "createdAt": "2020-07-29T00:24:30Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryIO.java", "diffHunk": "@@ -457,6 +456,22 @@\n  * </a> for security and permission related information specific to BigQuery.\n  */\n public class BigQueryIO {\n+\n+  /**\n+   * Template for BigQuery jobs created by BigQueryIO. This template is: {@code\n+   * \"beam_bq_job_{TYPE}_{JOB_ID}_{STEP}_{RANDOM}\"}, where:\n+   *\n+   * <ul>\n+   *   <li>{@code TYPE} represents the BigQuery job type (e.g. extract / copy / load / query)\n+   *   <li>{@code JOB_ID} is the Dataflow job name.", "originalCommit": "a7ef0baedbe0b06cbafe6413f044bdae26567b2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NTU4Nw==", "url": "https://github.com/apache/beam/pull/12082#discussion_r463295587", "bodyText": "ah the job name comes from Beam, and is autogenerated if one is not provided. Changed the documentation to express that.", "author": "pabloem", "createdAt": "2020-07-30T22:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NzkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2ODIxNg==", "url": "https://github.com/apache/beam/pull/12082#discussion_r461968216", "bodyText": "Ditto.", "author": "chamikaramj", "createdAt": "2020-07-29T00:25:17Z", "path": "sdks/python/apache_beam/io/gcp/bigquery.py", "diffHunk": "@@ -290,6 +290,20 @@ def compute_table_name(row):\n ]\n \n _LOGGER = logging.getLogger(__name__)\n+\"\"\"\n+Template for BigQuery jobs created by BigQueryIO. This template is:\n+`\"beam_bq_job_{job_type}_{job_id}_{step_id}_{random}\"`, where:\n+\n+- `job_type` represents the BigQuery job type (e.g. extract / copy / load /\n+    query).\n+- `job_id` is the Dataflow job name.", "originalCommit": "a7ef0baedbe0b06cbafe6413f044bdae26567b2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a6b88d2665f040ea4b1913c0f235ab2af3ddd0d8", "url": "https://github.com/apache/beam/commit/a6b88d2665f040ea4b1913c0f235ab2af3ddd0d8", "message": "Applying fixes from comments.", "committedDate": "2020-07-30T21:59:24Z", "type": "commit"}, {"oid": "a6b88d2665f040ea4b1913c0f235ab2af3ddd0d8", "url": "https://github.com/apache/beam/commit/a6b88d2665f040ea4b1913c0f235ab2af3ddd0d8", "message": "Applying fixes from comments.", "committedDate": "2020-07-30T21:59:24Z", "type": "forcePushed"}]}