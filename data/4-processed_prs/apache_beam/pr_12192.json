{"pr_number": 12192, "pr_title": "[BEAM-10420] Move restriction/watermark estimator state into PerWindowInvoker", "pr_createdAt": "2020-07-08T02:12:34Z", "pr_url": "https://github.com/apache/beam/pull/12192", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0Mjk3OQ==", "url": "https://github.com/apache/beam/pull/12192#discussion_r451242979", "bodyText": "This is handled within the PerWindowInvoker already.", "author": "lukecwik", "createdAt": "2020-07-08T02:15:31Z", "path": "sdks/python/apache_beam/runners/direct/sdf_direct_runner.py", "diffHunk": "@@ -507,7 +500,6 @@ def initiate_checkpoint():\n       if self._max_num_outputs and output_count >= self._max_num_outputs:\n         initiate_checkpoint()\n \n-    tracker.check_done()", "originalCommit": "facc70e7be1ddb8c49bd3a980398500f753262c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MzA4OA==", "url": "https://github.com/apache/beam/pull/12192#discussion_r451243088", "bodyText": "This is a bug fix, we should be setting checkpoint_state.checkpointed while holding the lock.", "author": "lukecwik", "createdAt": "2020-07-08T02:15:57Z", "path": "sdks/python/apache_beam/runners/direct/sdf_direct_runner.py", "diffHunk": "@@ -464,19 +461,15 @@ def initiate_checkpoint():\n       with self._checkpoint_lock:\n         if checkpoint_state.checkpointed:\n           return\n-      checkpoint_state.residual_restriction = tracker.checkpoint()\n-      checkpoint_state.checkpointed = object()\n+        checkpoint_state.checkpointed = object()", "originalCommit": "facc70e7be1ddb8c49bd3a980398500f753262c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8efe84c76ffcce1c361e94c21b057f753bdf25b1", "url": "https://github.com/apache/beam/commit/8efe84c76ffcce1c361e94c21b057f753bdf25b1", "message": "[BEAM-10420] Migrate SDF logic into PerWindowInvoker\n\nTo be able to have the windowing optimization stay within the PerWindowInvoker, I needed to have it control the creation of the watermark estimator and the restriction tracker thus I supply the restrication and watermark estimator state.", "committedDate": "2020-07-08T02:54:05Z", "type": "commit"}, {"oid": "8efe84c76ffcce1c361e94c21b057f753bdf25b1", "url": "https://github.com/apache/beam/commit/8efe84c76ffcce1c361e94c21b057f753bdf25b1", "message": "[BEAM-10420] Migrate SDF logic into PerWindowInvoker\n\nTo be able to have the windowing optimization stay within the PerWindowInvoker, I needed to have it control the creation of the watermark estimator and the restriction tracker thus I supply the restrication and watermark estimator state.", "committedDate": "2020-07-08T02:54:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY3NTg2MQ==", "url": "https://github.com/apache/beam/pull/12192#discussion_r452675861", "bodyText": "New type is just 'object' ?", "author": "chamikaramj", "createdAt": "2020-07-10T07:38:59Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -661,8 +661,8 @@ def __init__(self, placeholder):\n \n   def invoke_process(self,\n                      windowed_value,  # type: WindowedValue\n-                     restriction_tracker=None, # type: Optional[RestrictionTracker]\n-                     watermark_estimator=None, # type: Optional[WatermarkEstimator]\n+                     restriction=None,", "originalCommit": "8efe84c76ffcce1c361e94c21b057f753bdf25b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTc3Ng==", "url": "https://github.com/apache/beam/pull/12192#discussion_r452921776", "bodyText": "Yeah, since the user can choose anything they want for the restriction and watermark estimator state type.", "author": "lukecwik", "createdAt": "2020-07-10T15:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY3NTg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY3NjYyMQ==", "url": "https://github.com/apache/beam/pull/12192#discussion_r452676621", "bodyText": "Mention when this can be None.", "author": "chamikaramj", "createdAt": "2020-07-10T07:40:28Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -661,8 +661,8 @@ def __init__(self, placeholder):\n \n   def invoke_process(self,\n                      windowed_value,  # type: WindowedValue\n-                     restriction_tracker=None, # type: Optional[RestrictionTracker]\n-                     watermark_estimator=None, # type: Optional[WatermarkEstimator]\n+                     restriction=None,", "originalCommit": "8efe84c76ffcce1c361e94c21b057f753bdf25b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNTM1NA==", "url": "https://github.com/apache/beam/pull/12192#discussion_r452925354", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-07-10T15:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY3NjYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0OTEwOQ==", "url": "https://github.com/apache/beam/pull/12192#discussion_r452949109", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-07-10T16:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY3NjYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY3ODA1MA==", "url": "https://github.com/apache/beam/pull/12192#discussion_r452678050", "bodyText": "This is a tuple ?", "author": "chamikaramj", "createdAt": "2020-07-10T07:43:30Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -661,8 +661,8 @@ def __init__(self, placeholder):\n \n   def invoke_process(self,\n                      windowed_value,  # type: WindowedValue\n-                     restriction_tracker=None, # type: Optional[RestrictionTracker]\n-                     watermark_estimator=None, # type: Optional[WatermarkEstimator]\n+                     restriction=None,\n+                     watermark_estimator_state=None,", "originalCommit": "8efe84c76ffcce1c361e94c21b057f753bdf25b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjkxMQ==", "url": "https://github.com/apache/beam/pull/12192#discussion_r452922911", "bodyText": "Its a user chosen value like the restriction. They can store anything they want to restore the state for the estimator. For system provided ones its typically the last reported timestamp.", "author": "lukecwik", "createdAt": "2020-07-10T15:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY3ODA1MA=="}], "type": "inlineReview"}, {"oid": "32691b4858996350b6b3a4dc9b9ece45c4e6a976", "url": "https://github.com/apache/beam/commit/32691b4858996350b6b3a4dc9b9ece45c4e6a976", "message": "fixup! Address PR comments\n\nAlso make construction of restriction and watermark estimator state owned by caller of process_invoke.\nThis will prevent an issue where 'None' is being used as either type.", "committedDate": "2020-07-10T16:21:56Z", "type": "commit"}]}