{"pr_number": 13350, "pr_title": "[BEAM-11266] Python IO MongoDB: add bucket_auto aggregation option for bundling in Atlas.", "pr_createdAt": "2020-11-15T12:52:03Z", "pr_url": "https://github.com/apache/beam/pull/13350", "timeline": [{"oid": "94a85339c7008aa7676bc2d9872705309744220c", "url": "https://github.com/apache/beam/commit/94a85339c7008aa7676bc2d9872705309744220c", "message": "[BEAM-11266] Python IO MongoDB: add bucket_auto aggregation option for bundling in Atlas.", "committedDate": "2020-11-15T12:46:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NjA4OQ==", "url": "https://github.com/apache/beam/pull/13350#discussion_r524486089", "bodyText": "The split function will likely be called recursively for dynamic rebalancing, so for a range with start_pos and end_pos, it can be further split upon backend request, so it might not be reasonable to always use the total collection size divided by desired_chunk_size to calculate the bucket count. Is it possible to only get the buckets within the give _id range? and we can probably use an average document size times the number of documents to calculate the size of the range being split.", "author": "y1chi", "createdAt": "2020-11-16T18:32:48Z", "path": "sdks/python/apache_beam/io/mongodbio.py", "diffHunk": "@@ -241,6 +275,27 @@ def _get_split_keys(self, desired_chunk_size_in_mb, start_pos, end_pos):\n               max={'_id': end_pos},\n               maxChunkSize=desired_chunk_size_in_mb)['splitKeys'])\n \n+  def _get_buckets(self, desired_chunk_size, start_pos, end_pos):\n+    if start_pos >= end_pos:\n+      # single document not splittable\n+      return []\n+    size = self.estimate_size()\n+    bucket_count = size // desired_chunk_size", "originalCommit": "94a85339c7008aa7676bc2d9872705309744220c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTIwMQ==", "url": "https://github.com/apache/beam/pull/13350#discussion_r525559201", "bodyText": "Thanks, @y1chi!\nI will look closer how it works in Java sdk and will try to filter by _id ranges.", "author": "nikie", "createdAt": "2020-11-17T22:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NjA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NzkwMg==", "url": "https://github.com/apache/beam/pull/13350#discussion_r524487902", "bodyText": "the return buckets should guarantee the _id range is start_pos and end_pos otherwise same document could be read multiple times.", "author": "y1chi", "createdAt": "2020-11-16T18:35:55Z", "path": "sdks/python/apache_beam/io/mongodbio.py", "diffHunk": "@@ -241,6 +275,27 @@ def _get_split_keys(self, desired_chunk_size_in_mb, start_pos, end_pos):\n               max={'_id': end_pos},\n               maxChunkSize=desired_chunk_size_in_mb)['splitKeys'])\n \n+  def _get_buckets(self, desired_chunk_size, start_pos, end_pos):\n+    if start_pos >= end_pos:\n+      # single document not splittable\n+      return []\n+    size = self.estimate_size()\n+    bucket_count = size // desired_chunk_size\n+    if size % desired_chunk_size != 0:\n+      bucket_count += 1\n+    with beam.io.mongodbio.MongoClient(self.uri, **self.spec) as client:\n+      buckets = list(", "originalCommit": "94a85339c7008aa7676bc2d9872705309744220c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM5MzEyNw==", "url": "https://github.com/apache/beam/pull/13350#discussion_r528393127", "bodyText": "Fixed - return buckets cover all the requested range.", "author": "nikie", "createdAt": "2020-11-22T19:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NzkwMg=="}], "type": "inlineReview"}, {"oid": "7e5f2894572800e7a72dd67de7a6077e9befa1c2", "url": "https://github.com/apache/beam/commit/7e5f2894572800e7a72dd67de7a6077e9befa1c2", "message": "[BEAM-11266] Python IO MongoDB: add bucket_auto aggregation option for bundling in Atlas.\n\nBucket_auto mode:\n- Respects dynamic rebalancing, filter by _id range in each split.\n- Respects custom filter by merging it with the _id range filter, so\n  that splits hold similar number of docs actually matching the filter\n  (not possible in splitVector mode).\n- Estimates bundle size for non-initial splits by counting docs with\n  filters applied and using 'avgObjSize' from MongoDB collstats.\n- Uses bundle generator common with splitVector mode for clarity of\n  covering all the same cases.\n\nMisc:\n- Refactor _merge_id_filter to use '$and' only if necessary.\n- Fix one-off issue with single-document-not-splittable checks\n  for both bucket_auto and splitVector modes (unit test added,\n  before the fix if branches were unreachable).\n\nUnit tests:\n- Increase coverage and sanity.\n- Refactor collection mock filter and projection handling.\n\nIntegration tests:\n- Add read cases: splitVector/bucket_auto * filter/no-filter.\n- Add checks for expected docs count.", "committedDate": "2020-11-22T18:34:39Z", "type": "commit"}]}