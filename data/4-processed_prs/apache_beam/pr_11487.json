{"pr_number": 11487, "pr_title": "[BEAM-6597, BEAM-6467] Add support for reporting monitoring infos to the Java SDK harness.", "pr_createdAt": "2020-04-21T23:20:44Z", "pr_url": "https://github.com/apache/beam/pull/11487", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDU0OQ==", "url": "https://github.com/apache/beam/pull/11487#discussion_r412564549", "bodyText": "Are these values likely to easily change? You could consider writing new matchers in MonitoringInfoMatchers to match that the values are non 0 or something instead to make it easier to maintain.\nOr write matchers that just verify a few fields, unless you really want to verify everything is set on every MonitoringInfo. Might also make it simpler to maintain. Unless you think they are all relevant. Up to your discretion here.", "author": "ajamato", "createdAt": "2020-04-21T23:38:45Z", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/RemoteExecutionTest.java", "diffHunk": "@@ -630,72 +644,100 @@ public void process(ProcessContext ctxt) {\n               (Coder<WindowedValue<?>>) remoteOutputCoder.getValue(), outputContents::add));\n     }\n \n-    Iterable<String> sideInputData = Arrays.asList(\"A\", \"B\", \"C\");\n+    final String testPTransformId = \"create/ParMultiDo(Metrics)\";\n+    BundleProgressHandler progressHandler =\n+        new BundleProgressHandler() {\n+          @Override\n+          public void onProgress(ProcessBundleProgressResponse response) {\n+            MetricsDoFn.ALLOW_COMPLETION.get(metricsDoFn.uuid).countDown();\n+            List<Matcher<MonitoringInfo>> matchers = new ArrayList<>();\n \n-    StateRequestHandler stateRequestHandler =\n-        StateRequestHandlers.forSideInputHandlerFactory(\n-            descriptor.getSideInputSpecs(),\n-            new SideInputHandlerFactory() {\n-              @Override\n-              public <V, W extends BoundedWindow>\n-                  IterableSideInputHandler<V, W> forIterableSideInput(\n-                      String pTransformId,\n-                      String sideInputId,\n-                      Coder<V> elementCoder,\n-                      Coder<W> windowCoder) {\n-                throw new UnsupportedOperationException();\n-              }\n+            // We expect all user counters except for the ones in @FinishBundle\n+            // Since non-user metrics are registered at bundle creation time, they will still report\n+            // values most of which will be 0.\n \n-              @Override\n-              public <K, V, W extends BoundedWindow>\n-                  MultimapSideInputHandler<K, V, W> forMultimapSideInput(\n-                      String pTransformId,\n-                      String sideInputId,\n-                      KvCoder<K, V> elementCoder,\n-                      Coder<W> windowCoder) {\n-                return new MultimapSideInputHandler<K, V, W>() {\n-                  @Override\n-                  public Iterable<V> get(BoundedWindow window) {\n-                    return null;\n-                  }\n+            SimpleMonitoringInfoBuilder builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_SUM_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME, MetricsDoFn.PROCESS_USER_COUNTER_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64SumValue(1);\n+            matchers.add(MonitoringInfoMatchers.matchSetFields(builder.build()));\n \n-                  @Override\n-                  public Coder<K> keyCoder() {\n-                    return elementCoder.getKeyCoder();\n-                  }\n+            builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_SUM_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(MonitoringInfoConstants.Labels.NAME, MetricsDoFn.START_USER_COUNTER_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64SumValue(10);\n+            matchers.add(MonitoringInfoMatchers.matchSetFields(builder.build()));\n \n-                  @Override\n-                  public Coder<V> valueCoder() {\n-                    return elementCoder.getValueCoder();\n-                  }\n+            builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_SUM_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME, MetricsDoFn.FINISH_USER_COUNTER_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            matchers.add(not(MonitoringInfoMatchers.matchSetFields(builder.build())));\n \n-                  @Override\n-                  public Iterable<V> get(K key, W window) {\n-                    return (Iterable) sideInputData;\n-                  }\n-                };\n-              }\n-            });\n+            // User Distributions.\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_DISTRIBUTION_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME,\n+                    MetricsDoFn.PROCESS_USER_DISTRIBUTION_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64DistributionValue(DistributionData.create(1, 1, 1, 1));\n+            matchers.add(MonitoringInfoMatchers.matchSetFields(builder.build()));\n \n-    String testPTransformId = \"create/ParMultiDo(Anonymous)\";\n-    BundleProgressHandler progressHandler =\n-        new BundleProgressHandler() {\n-          @Override\n-          public void onProgress(ProcessBundleProgressResponse progress) {}\n+            builder = new SimpleMonitoringInfoBuilder();\n+            builder\n+                .setUrn(MonitoringInfoConstants.Urns.USER_DISTRIBUTION_INT64)\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAMESPACE, RemoteExecutionTest.class.getName())\n+                .setLabel(\n+                    MonitoringInfoConstants.Labels.NAME, MetricsDoFn.START_USER_DISTRIBUTION_NAME);\n+            builder.setLabel(MonitoringInfoConstants.Labels.PTRANSFORM, testPTransformId);\n+            builder.setInt64DistributionValue(DistributionData.create(10, 1, 10, 10));", "originalCommit": "4f8d092681c71d41d2a43f3cb860b3031395df9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwNTY1NA==", "url": "https://github.com/apache/beam/pull/11487#discussion_r412605654", "bodyText": "The values should only change if the test changes since they are expected to be emitted once. Only the msec counters are non-deterministic really.\nAlso, the MonitoringInfo matcher only compares set fields and ignores fields that aren't set.", "author": "lukecwik", "createdAt": "2020-04-22T01:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDU0OQ=="}], "type": "inlineReview"}, {"oid": "d34c4cbca1a2127b62d76b3d958096d847d938d4", "url": "https://github.com/apache/beam/commit/d34c4cbca1a2127b62d76b3d958096d847d938d4", "message": "[BEAM-6597, BEAM-6467] Add support for reporting monitoring infos to the Java SDK harness.", "committedDate": "2020-04-22T02:36:01Z", "type": "commit"}, {"oid": "c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "url": "https://github.com/apache/beam/commit/c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "message": "fixup! Fix spotbugs failures", "committedDate": "2020-04-22T02:36:01Z", "type": "commit"}, {"oid": "c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "url": "https://github.com/apache/beam/commit/c795eeb49d1f2dcf264fce64e81c9ea2ffafca0d", "message": "fixup! Fix spotbugs failures", "committedDate": "2020-04-22T02:36:01Z", "type": "forcePushed"}]}