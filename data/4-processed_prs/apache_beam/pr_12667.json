{"pr_number": 12667, "pr_title": "[BEAM-9918] Adding tests and documentation to xlang components", "pr_createdAt": "2020-08-21T21:25:11Z", "pr_url": "https://github.com/apache/beam/pull/12667", "timeline": [{"oid": "3b110f2bfd0dd3b0a520abbe8e9dd3dca06b3b06", "url": "https://github.com/apache/beam/commit/3b110f2bfd0dd3b0a520abbe8e9dd3dca06b3b06", "message": "[BEAM-9918]: adding primitive transforms xlang tests", "committedDate": "2020-08-21T06:35:11Z", "type": "commit"}, {"oid": "ada1c59ff1b64c3bbf82248247af9b9c94a06cb6", "url": "https://github.com/apache/beam/commit/ada1c59ff1b64c3bbf82248247af9b9c94a06cb6", "message": "[BEAM-9918] Adding basic tests", "committedDate": "2020-08-21T10:14:44Z", "type": "commit"}, {"oid": "28303cc5cee7fd6b5ebd8a9efd0f042d5ebb69d1", "url": "https://github.com/apache/beam/commit/28303cc5cee7fd6b5ebd8a9efd0f042d5ebb69d1", "message": "[BEAM-9918] adding documentation to all xlang components", "committedDate": "2020-08-21T21:21:48Z", "type": "commit"}, {"oid": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "url": "https://github.com/apache/beam/commit/f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "message": "[BEAM-9918]: adding unit tests for xlang components", "committedDate": "2020-08-21T21:22:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMjI0NA==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475012244", "bodyText": "Please consolidate these imports into two groups, standard library followed by the github imports.\nSeparating out and commenting on the _ imports however is a good practice.\nThis comnment applies to all these example files.", "author": "lostluck", "createdAt": "2020-08-21T23:41:51Z", "path": "sdks/go/examples/xlang/group_by/group_by.go", "diffHunk": "@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// group_by exemplifies using a cross-language group by key transform from a test expansion service.\n+//\n+// Prerequisites to run wordcount:\n+// \u2013> [Required] Job needs to be submitted to a portable runner (--runner=universal)\n+// \u2013> [Required] Endpoint of job service needs to be passed (--endpoint=<ip:port>)\n+// \u2013> [Required] Endpoint of expansion service needs to be passed (--expansion_addr=<ip:port>)\n+// \u2013> [Optional] Environment type can be LOOPBACK. Defaults to DOCKER. (--environment_type=LOOPBACK|DOCKER)\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"sort\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\n+\t\"context\"\n+\t\"flag\"\n+\t\"log\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"", "originalCommit": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzY4NQ==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475027685", "bodyText": "Ack. Updated!", "author": "pskevin", "createdAt": "2020-08-22T01:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMjI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMjM3Ng==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475012376", "bodyText": "There's no need to have an extra blank line at the end of init blocks.", "author": "lostluck", "createdAt": "2020-08-21T23:42:40Z", "path": "sdks/go/examples/xlang/group_by/group_by.go", "diffHunk": "@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// group_by exemplifies using a cross-language group by key transform from a test expansion service.\n+//\n+// Prerequisites to run wordcount:\n+// \u2013> [Required] Job needs to be submitted to a portable runner (--runner=universal)\n+// \u2013> [Required] Endpoint of job service needs to be passed (--endpoint=<ip:port>)\n+// \u2013> [Required] Endpoint of expansion service needs to be passed (--expansion_addr=<ip:port>)\n+// \u2013> [Optional] Environment type can be LOOPBACK. Defaults to DOCKER. (--environment_type=LOOPBACK|DOCKER)\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\t\"sort\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\n+\t\"context\"\n+\t\"flag\"\n+\t\"log\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\texpansionAddr = flag.String(\"expansion_addr\", \"\", \"Address of Expansion Service\")\n+)\n+\n+// formatFn is a DoFn that formats a word and its count as a string.\n+func formatFn(w string, c []int) string {\n+\tsort.Ints(c)\n+\treturn fmt.Sprintf(\"%v:%v\", w, c)\n+}\n+\n+// KV used to represent KV PCollection values\n+type KV struct {\n+\tX string\n+\tY int64\n+}\n+\n+func getKV(kv KV, emit func(string, int64)) {\n+\temit(kv.X, kv.Y)\n+}\n+\n+func collectValues(key string, iter func(*int64) bool) (string, []int) {\n+\tvar count int64\n+\tvar values []int\n+\tfor iter(&count) {\n+\t\tvalues = append(values, int(count))\n+\t}\n+\treturn key, values\n+}\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*KV)(nil)).Elem())\n+\tbeam.RegisterFunction(formatFn)\n+\tbeam.RegisterFunction(getKV)\n+\tbeam.RegisterFunction(collectValues)\n+", "originalCommit": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzcyMQ==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475027721", "bodyText": "Ack. Updated!", "author": "pskevin", "createdAt": "2020-08-22T01:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMjM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMjQ4Nw==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475012487", "bodyText": "There's no need for an empty init block, please remove.", "author": "lostluck", "createdAt": "2020-08-21T23:43:16Z", "path": "sdks/go/examples/xlang/multi_input_output/multi.go", "diffHunk": "@@ -0,0 +1,79 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// multi exemplifies using a cross-language transform with multiple inputs and\n+// outputs from a test expansion service.\n+//\n+// Prerequisites to run wordcount:\n+// \u2013> [Required] Job needs to be submitted to a portable runner (--runner=universal)\n+// \u2013> [Required] Endpoint of job service needs to be passed (--endpoint=<ip:port>)\n+// \u2013> [Required] Endpoint of expansion service needs to be passed (--expansion_addr=<ip:port>)\n+// \u2013> [Optional] Environment type can be LOOPBACK. Defaults to DOCKER. (--environment_type=LOOPBACK|DOCKER)\n+package main\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\n+\t\"context\"\n+\t\"flag\"\n+\t\"log\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\n+\t// Imports to enable correct filesystem access and runner setup in LOOPBACK mode\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/gcs\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/io/filesystem/local\"\n+\t_ \"github.com/apache/beam/sdks/go/pkg/beam/runners/universal\"\n+)\n+\n+var (\n+\texpansionAddr = flag.String(\"expansion_addr\", \"\", \"Address of Expansion Service\")\n+)\n+\n+func init() {", "originalCommit": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzczNA==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475027734", "bodyText": "Ack. Updated!", "author": "pskevin", "createdAt": "2020-08-22T01:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMjQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMzMyNg==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475013326", "bodyText": "Just a style comment: In Go New has the implication that it's creating and initializing a single new pointer object. In this case, there's no need for the New prefix, as it doesn't clarify that. While this is creating new Inbound instances and a map, it's doing much more than a single value creation, so I would drop the prefix.\nSimilar for NewNamedOutboundLinks below.", "author": "lostluck", "createdAt": "2020-08-21T23:47:44Z", "path": "sdks/go/pkg/beam/core/graph/edge.go", "diffHunk": "@@ -303,11 +304,22 @@ func NewCrossLanguage(g *Graph, s *Scope, ext *ExternalTransform, ins []*Inbound\n \treturn edge, isBoundedUpdater\n }\n \n+// NewNamedInboundLinks returns an array of new Inbound links and a map (tag ->", "originalCommit": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzczOA==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475027738", "bodyText": "Ack. Updated!", "author": "pskevin", "createdAt": "2020-08-22T01:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMzgwMw==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475013803", "bodyText": "I'd consider not including the credit in the public documentation to the function. It doesn't help a caller use the DoFn, it's describing an implementation detail.", "author": "lostluck", "createdAt": "2020-08-21T23:50:15Z", "path": "sdks/go/pkg/beam/core/graph/xlang.go", "diffHunk": "@@ -71,8 +93,10 @@ func (ext ExternalTransform) WithNamedOutputs(outputsMap map[string]int) Externa\n \treturn ext\n }\n \n-// TODO(pskevin): Credit one of the best stackoverflow answers @ https://stackoverflow.com/questions/22892120/how-to-generate-a-random-string-of-a-fixed-length-in-go\n-\n+// NewNamespaceGenerator returns a functions that generates a random string of n alphabets\n+//\n+// Adopted from icza's stackoverflow answer @\n+// https://stackoverflow.com/questions/22892120/how-to-generate-a-random-string-of-a-fixed-length-in-go", "originalCommit": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzkwOQ==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475027909", "bodyText": "Ack. Updated!", "author": "pskevin", "createdAt": "2020-08-22T01:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxMzgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxNjYzNg==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475016636", "bodyText": "Please convert this to the expect panic format used in the other tests.", "author": "lostluck", "createdAt": "2020-08-22T00:06:45Z", "path": "sdks/go/pkg/beam/core/runtime/xlangx/namespace_test.go", "diffHunk": "@@ -0,0 +1,584 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package xlangx\n+\n+import (\n+\t\"strings\"\n+\t\"testing\"\n+\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"github.com/google/go-cmp/cmp\"\n+\t\"google.golang.org/protobuf/testing/protocmp\"\n+)\n+\n+func assertPanic(t *testing.T, f func(), err string) {", "originalCommit": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzc1OA==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475027758", "bodyText": "Good catch! Thanks. Updated.", "author": "pskevin", "createdAt": "2020-08-22T01:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxNjYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODgxNw==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475018817", "bodyText": "The naming here is a bit confusing. As a sink, the expectation is 1 input and 0 outputs, rather than 1, with many outputs.  Similarly for the source, we would expect 0 inputs, but get 1 output. rather than many inputs, with 1 output.\nIt's certainly out of scope given the time remaining, given how many place would need to change, but we will probably consider changing these to helper functions which generate the input or output maps with the magic tags, and users always call the top level CrossLanguage call instead.", "author": "lostluck", "createdAt": "2020-08-22T00:15:18Z", "path": "sdks/go/pkg/beam/xlang.go", "diffHunk": "@@ -21,91 +21,154 @@ import (\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/graph\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/graphx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/xlangx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/typex\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n \tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n )\n \n-// This is an experimetnal API and subject to change\n-func CrossLanguage(s Scope, urn string, payload []byte, expansionAddr string, inputs map[string]PCollection, outputTypes map[string]FullType) map[string]PCollection {\n+// xlang exposes an API to execute cross-language transforms within the Go SDK.\n+// It is experimental and likely to change. It exposes convenient wrappers\n+// around the core functions to pass in any combination of named/unnamed\n+// inputs/outputs.\n+\n+// CrossLanguage executes a cross-language transform that uses named inputs and\n+// returns named outputs.\n+func CrossLanguage(\n+\ts Scope,\n+\turn string,\n+\tpayload []byte,\n+\texpansionAddr string,\n+\tnamedInputs map[string]PCollection,\n+\tnamedOutputTypes map[string]FullType,\n+) map[string]PCollection {\n \tif !s.IsValid() {\n \t\tpanic(errors.New(\"invalid scope\"))\n \t}\n \n-\tnamedInputNodes := mapPCollectionToNode(inputs)\n-\n-\tinputsMap, inboundLinks := graph.NewNamedInboundLinks(namedInputNodes)\n-\toutputsMap, outboundLinks := graph.NewNamedOutboundLinks(s.real, outputTypes)\n+\tinputsMap, inboundLinks := graph.NewNamedInboundLinks(mapPCollectionToNode(namedInputs))\n+\toutputsMap, outboundLinks := graph.NewNamedOutboundLinks(s.real, namedOutputTypes)\n \n \text := graph.ExternalTransform{\n \t\tUrn:           urn,\n \t\tPayload:       payload,\n \t\tExpansionAddr: expansionAddr,\n \t}.WithNamedInputs(inputsMap).WithNamedOutputs(outputsMap)\n \n-\toutputNodes, err := TryCrossLanguage(s, &ext, inboundLinks, outboundLinks)\n+\tnamedOutputs, err := TryCrossLanguage(s, &ext, inboundLinks, outboundLinks)\n \tif err != nil {\n \t\tpanic(errors.WithContextf(err, \"tried cross-language and failed\"))\n \t}\n-\treturn mapNodeToPCollection(outputNodes)\n+\treturn mapNodeToPCollection(namedOutputs)\n }\n \n-/*\n-func CrossLanguageWithSink(s Scope, urn string, payload []byte, expansionAddr string, inputs map[string]PCollection, outputType FullType) PCollection {\n-\tinputNodes := mapPCollectionToNode(inputs)\n+// CrossLanguageWithSingleInputOutput executes a cross-language transform that\n+// uses a single unnamed input and returns a single unnamed output.\n+func CrossLanguageWithSingleInputOutput(\n+\ts Scope,\n+\turn string,\n+\tpayload []byte,\n+\texpansionAddr string,\n+\tinput PCollection,\n+\toutputType FullType,\n+) PCollection {\n+\tif !s.IsValid() {\n+\t\tpanic(errors.New(\"invalid scope\"))\n+\t}\n+\n+\t// Adding dummy SourceInputTag to process it as a named input\n+\tnamedInput := mapPCollectionToNode(map[string]PCollection{graph.SourceInputTag: input})\n+\t// Adding dummy SinkOutputTag to process it as a named output\n+\tnamedOutputType := map[string]typex.FullType{graph.SinkOutputTag: outputType}\n \n-\tinputsMap, inboundLinks := graph.NewNamedInboundLinks(inputNodes)\n-\toutputsMap, outboundLinks := graph.NewNamedOutboundLinks(s.real, map[string]typex.FullType{graph.SinkOutputTag: outputType})\n+\tinputsMap, inboundLinks := graph.NewNamedInboundLinks(namedInput)\n+\toutputsMap, outboundLinks := graph.NewNamedOutboundLinks(s.real, namedOutputType)\n \n \text := graph.ExternalTransform{\n \t\tUrn:           urn,\n \t\tPayload:       payload,\n \t\tExpansionAddr: expansionAddr,\n-\t}.WithNamedInputs(inputNodes).WithNamedOutputs(outputTypes)\n+\t}.WithNamedInputs(inputsMap).WithNamedOutputs(outputsMap)\n \n-\toutputNodes, err := TryCrossLanguage(s, &ext, inboundLinks, outboundLinks)\n+\tnamedOutput, err := TryCrossLanguage(s, &ext, inboundLinks, outboundLinks)\n \tif err != nil {\n \t\tpanic(errors.WithContextf(err, \"tried cross-language and failed\"))\n \t}\n-\tnamedOutputNode := mapNodeToPCollection(outputNodes)\n+\treturn nodeToPCollection(namedOutput[graph.SinkOutputTag])\n+}\n \n-\toutputNode, exists := namedOutputNode[graph.SinkOutputTag]\n-\tif !exists {\n-\t\tpanic(\"a\")\n+// CrossLanguageWithSink executes a cross-language transform that uses named\n+// inputs and returns a single unnamed output.", "originalCommit": "f0928e3f71ca7b3bee4024a8ccf9a2e932e7e147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzg0MA==", "url": "https://github.com/apache/beam/pull/12667#discussion_r475027840", "bodyText": "Interesting point. Unfortunately that'll be a bigger change and I hope one that will be addressed later.", "author": "pskevin", "createdAt": "2020-08-22T01:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODgxNw=="}], "type": "inlineReview"}, {"oid": "845d645f75eda2dc1880f48190216fbc270b9ac7", "url": "https://github.com/apache/beam/commit/845d645f75eda2dc1880f48190216fbc270b9ac7", "message": "fix(beam/sdks/go): formatting imports and cleaning up", "committedDate": "2020-08-22T01:08:40Z", "type": "commit"}]}