{"pr_number": 10892, "pr_title": "[BEAM-8335] Make TestStream to/from runner_api include the output_tags property.", "pr_createdAt": "2020-02-18T22:03:56Z", "pr_url": "https://github.com/apache/beam/pull/10892", "timeline": [{"oid": "4bb6918265d02389ce9d39e6d819bbb6b50962e6", "url": "https://github.com/apache/beam/commit/4bb6918265d02389ce9d39e6d819bbb6b50962e6", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-18T22:18:39Z", "type": "forcePushed"}, {"oid": "4e8ea0448b04677de80afbb0fd3fc735c0bfe50d", "url": "https://github.com/apache/beam/commit/4e8ea0448b04677de80afbb0fd3fc735c0bfe50d", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-18T22:34:50Z", "type": "forcePushed"}, {"oid": "6a4d5eb3352ca46df7911af766ed277916b86d3d", "url": "https://github.com/apache/beam/commit/6a4d5eb3352ca46df7911af766ed277916b86d3d", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-18T22:37:22Z", "type": "forcePushed"}, {"oid": "f91f2a8fa7a1334df2f34191aa4038fe643d05c6", "url": "https://github.com/apache/beam/commit/f91f2a8fa7a1334df2f34191aa4038fe643d05c6", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-18T22:58:35Z", "type": "forcePushed"}, {"oid": "1a271279e6f5c301086b48491ddd4657d0f2ddcc", "url": "https://github.com/apache/beam/commit/1a271279e6f5c301086b48491ddd4657d0f2ddcc", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-19T17:55:14Z", "type": "forcePushed"}, {"oid": "677e77772e7b00047788ef7eaebb160f728851bc", "url": "https://github.com/apache/beam/commit/677e77772e7b00047788ef7eaebb160f728851bc", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-19T18:14:56Z", "type": "forcePushed"}, {"oid": "c5fb23e99e856bd3b768c1062a0a751ea28fa180", "url": "https://github.com/apache/beam/commit/c5fb23e99e856bd3b768c1062a0a751ea28fa180", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-19T18:28:06Z", "type": "forcePushed"}, {"oid": "adbc8615c3c57925ff7431deffa97116461bdd57", "url": "https://github.com/apache/beam/commit/adbc8615c3c57925ff7431deffa97116461bdd57", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-19T19:05:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMTU3Mw==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381501573", "bodyText": "nit: this can be simplified to just\nif not self.output_tags:\n\nGoogle's style guide recommends using boolean context whenever possible. Not sure whether there is such a rule in Beam. But since you're already using boolean context elsewhere in the code, it's good to be consistent.", "author": "davidyan74", "createdAt": "2020-02-19T19:40:31Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -188,7 +198,16 @@ def _infer_output_coder(self, input_type=None, input_coder=None):\n   def expand(self, pbegin):\n     assert isinstance(pbegin, pvalue.PBegin)\n     self.pipeline = pbegin.pipeline\n-    return pvalue.PCollection(self.pipeline, is_bounded=False)\n+    if len(self.output_tags) == 0:", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MTMxMg==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381551312", "bodyText": "Gotcha, changed to if not self.output_tags", "author": "rohdesamuel", "createdAt": "2020-02-19T21:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMTU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMjgyOA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381502828", "bodyText": "Is there a reason why we treat the case with only one output_tag as a special case (i.e. not returning a dict) ? Please add the reason as a comment in this code.", "author": "davidyan74", "createdAt": "2020-02-19T19:42:51Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -188,7 +198,16 @@ def _infer_output_coder(self, input_type=None, input_coder=None):\n   def expand(self, pbegin):\n     assert isinstance(pbegin, pvalue.PBegin)\n     self.pipeline = pbegin.pipeline\n-    return pvalue.PCollection(self.pipeline, is_bounded=False)\n+    if len(self.output_tags) == 0:\n+      self.output_tags = set([None])\n+\n+    if len(self.output_tags) == 1:", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MTkxNA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381551914", "bodyText": "For backwards compatibility, existing code already relies on a single PCollection being returned.", "author": "rohdesamuel", "createdAt": "2020-02-19T21:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMjgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNDE2OA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381504168", "bodyText": "Following up my other comment, what happens if the user tags their output to be the string 'None'?", "author": "davidyan74", "createdAt": "2020-02-19T19:45:14Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -276,8 +295,11 @@ def to_runner_api_parameter(self, context):\n   @PTransform.register_urn(\n       common_urns.primitives.TEST_STREAM.urn,\n       beam_runner_api_pb2.TestStreamPayload)\n-  def from_runner_api_parameter(payload, context):\n+  def from_runner_api_parameter(ptransform, payload, context):\n     coder = context.coders.get_by_id(payload.coder_id)\n+    output_tags = set(\n+        None if k == 'None' else k for k in ptransform.outputs.keys())", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1Mjc0MA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381552740", "bodyText": "This behavior isn't unique in the TestStream. This is consistent with the rest of the Python SDK with handling PCollection tags being None. As for what happens, I don't know, there are probably many subtle things that may go wrong.", "author": "rohdesamuel", "createdAt": "2020-02-19T21:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNDE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNjY5MA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381506690", "bodyText": "Is there a reason why the string 'None' is used as the tag here (instead of just None)? Is there a way to distinguish between a non-existent tag and a tag named \"None\"?", "author": "davidyan74", "createdAt": "2020-02-19T19:49:56Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -133,15 +140,17 @@ def __eq__(self, other):\n     return self.new_watermark == other.new_watermark and self.tag == other.tag\n \n   def __hash__(self):\n-    return hash(self.new_watermark)\n+    return hash(str(self.new_watermark) + str(self.tag))\n \n   def __lt__(self, other):\n     return self.new_watermark < other.new_watermark\n \n   def to_runner_api(self, unused_element_coder):\n+    tag = 'None' if self.tag is None else self.tag", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MzAyNw==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381543027", "bodyText": "Looking through the codebase, it seems that 'None' is the special keyword used in the Python SDK to represent a tag that is specifically None. This keeps with the current style of the rest of the Python SDK. @lukecwik is this true?", "author": "rohdesamuel", "createdAt": "2020-02-19T21:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNjY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5MjI1NQ==", "url": "https://github.com/apache/beam/pull/10892#discussion_r384692255", "bodyText": "This is a general problem with python tag naming where there is ambiguity. It was worked around for Dataflow by using out for None and out_<tag> for tag until it was removed in #10971\nUnfortunately this name mangling was applied inconsistently throughout the codebase which lead to arbitrary fix-ups and bugs.", "author": "lukecwik", "createdAt": "2020-02-26T18:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNjY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5NTM0MQ==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381495341", "bodyText": "assert that we aren't losing precision here.", "author": "lukecwik", "createdAt": "2020-02-19T19:28:58Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -133,15 +140,17 @@ def __eq__(self, other):\n     return self.new_watermark == other.new_watermark and self.tag == other.tag\n \n   def __hash__(self):\n-    return hash(self.new_watermark)\n+    return hash(str(self.new_watermark) + str(self.tag))\n \n   def __lt__(self, other):\n     return self.new_watermark < other.new_watermark\n \n   def to_runner_api(self, unused_element_coder):\n+    tag = 'None' if self.tag is None else self.tag\n     return beam_runner_api_pb2.TestStreamPayload.Event(\n         watermark_event=beam_runner_api_pb2.TestStreamPayload.Event.\n-        AdvanceWatermark(new_watermark=self.new_watermark.micros // 1000))\n+        AdvanceWatermark(\n+            new_watermark=self.new_watermark.micros // 1000, tag=tag))", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1Nzk1MA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381557950", "bodyText": "done", "author": "rohdesamuel", "createdAt": "2020-02-19T21:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5NTM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5OTUzMw==", "url": "https://github.com/apache/beam/pull/10892#discussion_r384699533", "bodyText": "This should be done for ProcessingTimeEvent as well", "author": "lukecwik", "createdAt": "2020-02-26T19:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ5NTM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMTE3NQ==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381501175", "bodyText": "I don't think you should need to specify output_tags here since they will get added via the add/advance calls below.", "author": "lukecwik", "createdAt": "2020-02-19T19:39:45Z", "path": "sdks/python/apache_beam/testing/test_stream_test.py", "diffHunk": "@@ -528,6 +529,56 @@ def process(\n \n     p.run()\n \n+  def test_roundtrip_proto(self):\n+    test_stream = (TestStream()\n+                   .advance_processing_time(1)\n+                   .advance_watermark_to(2)\n+                   .add_elements([1, 2, 3])) # yapf: disable\n+\n+    p = TestPipeline(options=StandardOptions(streaming=True))\n+    p | test_stream\n+\n+    pipeline_proto, context = p.to_runner_api(return_context=True)\n+\n+    for t in pipeline_proto.components.transforms.values():\n+      if t.spec.urn == common_urns.primitives.TEST_STREAM.urn:\n+        test_stream_proto = t\n+\n+    self.assertTrue(test_stream_proto)\n+    roundtrip_test_stream = TestStream().from_runner_api(\n+        test_stream_proto, context)\n+\n+    self.assertListEqual(test_stream._events, roundtrip_test_stream._events)\n+    self.assertSetEqual(\n+        test_stream.output_tags, roundtrip_test_stream.output_tags)\n+    self.assertEqual(test_stream.coder, roundtrip_test_stream.coder)\n+\n+  def test_roundtrip_proto_multi(self):\n+    test_stream = (TestStream(output_tags=['a', 'b'])", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MzA0NA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381553044", "bodyText": "Gotcha, removed the output_tags", "author": "rohdesamuel", "createdAt": "2020-02-19T21:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMTE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMTkyOQ==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381501929", "bodyText": "Why do we need to declare output_tags here?\nAre you trying to allow for outputs that have no events, otherwise shouldn't the tags come from the list of events?\nThe answer here impacts what we should be doing in expand in the no output_tags case in expand below.", "author": "lukecwik", "createdAt": "2020-02-19T19:41:08Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -171,13 +180,14 @@ class TestStream(PTransform):\n   time. After all of the specified elements are emitted, ceases to produce\n   output.\n   \"\"\"", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTE0OQ==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381545149", "bodyText": "Are you trying to allow for outputs that have no events, otherwise shouldn't the tags come from the list of events?\n\nYep! The TestStreamService will allow users to define a TestStream with the output_tags specified at creation time and the events supplied at runtime.", "author": "rohdesamuel", "createdAt": "2020-02-19T21:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMTkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMzcyNQ==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381503725", "bodyText": "assert that events tags is a subset of output_tags", "author": "lukecwik", "createdAt": "2020-02-19T19:44:32Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -171,13 +180,14 @@ class TestStream(PTransform):\n   time. After all of the specified elements are emitted, ceases to produce\n   output.\n   \"\"\"\n-  def __init__(self, coder=coders.FastPrimitivesCoder(), events=None):\n+  def __init__(\n+      self, coder=coders.FastPrimitivesCoder(), events=None, output_tags=None):\n     super(TestStream, self).__init__()\n     assert coder is not None\n     self.coder = coder\n     self.watermarks = {None: timestamp.MIN_TIMESTAMP}\n     self._events = [] if events is None else list(events)", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0OTgzNw==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381549837", "bodyText": "Done.", "author": "rohdesamuel", "createdAt": "2020-02-19T21:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMzcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNTg4NQ==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381505885", "bodyText": "nice cleanup", "author": "lukecwik", "createdAt": "2020-02-19T19:48:31Z", "path": "sdks/python/apache_beam/runners/direct/direct_runner.py", "diffHunk": "@@ -73,60 +73,12 @@ class SwitchingDirectRunner(PipelineRunner):\n   def is_fnapi_compatible(self):\n     return BundleBasedDirectRunner.is_fnapi_compatible()\n \n-  def apply_TestStream(self, transform, pbegin, options):", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzODQ2NA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381538464", "bodyText": "thanks!", "author": "rohdesamuel", "createdAt": "2020-02-19T20:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNzU3Mw==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381507573", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This multiplexing the  multiple output PCollections.\n          \n          \n            \n                # Multiplex to the correct PCollection based upon the event tag.", "author": "lukecwik", "createdAt": "2020-02-19T19:51:33Z", "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "diffHunk": "@@ -45,11 +46,69 @@ class _WatermarkController(PTransform):\n    - If the instance receives an ElementEvent, it emits all specified elements\n      to the Global Window with the event time set to the element's timestamp.\n   \"\"\"\n+  def __init__(self, output_tag):\n+    self.output_tag = output_tag\n+\n   def get_windowing(self, _):\n     return core.Windowing(window.GlobalWindows())\n \n   def expand(self, pcoll):\n-    return pvalue.PCollection.from_(pcoll)\n+    ret = pvalue.PCollection.from_(pcoll)\n+    ret.tag = self.output_tag\n+    return ret\n+\n+\n+class _ExpandableTestStream(PTransform):\n+  def __init__(self, test_stream):\n+    self.test_stream = test_stream\n+\n+  def expand(self, pbegin):\n+    \"\"\"Expands the TestStream into the DirectRunner implementation.\n+\n+\n+    Takes the TestStream transform and creates a _TestStream -> multiplexer ->\n+    _WatermarkController.\n+    \"\"\"\n+\n+    assert isinstance(pbegin, pvalue.PBegin)\n+\n+    # If there is only one tag there is no need to add the multiplexer.\n+    if len(self.test_stream.output_tags) == 1:\n+      return (\n+          pbegin\n+          | _TestStream(\n+              self.test_stream.output_tags,\n+              events=self.test_stream._events,\n+              coder=self.test_stream.coder)\n+          | _WatermarkController(list(self.test_stream.output_tags)[0]))\n+\n+    # This multiplexing the  multiple output PCollections.", "originalCommit": "adbc8615c3c57925ff7431deffa97116461bdd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzODM5Mg==", "url": "https://github.com/apache/beam/pull/10892#discussion_r381538392", "bodyText": "Done.", "author": "rohdesamuel", "createdAt": "2020-02-19T20:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNzU3Mw=="}], "type": "inlineReview"}, {"oid": "4dbedcb2b29a23e2139f9866d4fbfb1e9b325bf2", "url": "https://github.com/apache/beam/commit/4dbedcb2b29a23e2139f9866d4fbfb1e9b325bf2", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-19T21:42:09Z", "type": "forcePushed"}, {"oid": "437c88f1c9754fdac9769d734d08f281318fb343", "url": "https://github.com/apache/beam/commit/437c88f1c9754fdac9769d734d08f281318fb343", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-24T22:00:34Z", "type": "commit"}, {"oid": "437c88f1c9754fdac9769d734d08f281318fb343", "url": "https://github.com/apache/beam/commit/437c88f1c9754fdac9769d734d08f281318fb343", "message": "Move TestStream implementation to replacement transform\n\n* This also moves the DirectRunner's TestStream implementation to a\nreplacement transform. This is because the TestStream relies on getting\nthe output_tags from the PTransform.\n\nChange-Id: Ibd80b0d25cd8cc5ff5c28e127f7313638e6664da", "committedDate": "2020-02-24T22:00:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4OTE4NA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r384689184", "bodyText": "Suggested change", "author": "lukecwik", "createdAt": "2020-02-26T18:44:02Z", "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "diffHunk": "@@ -45,11 +46,69 @@ class _WatermarkController(PTransform):\n    - If the instance receives an ElementEvent, it emits all specified elements\n      to the Global Window with the event time set to the element's timestamp.\n   \"\"\"\n+  def __init__(self, output_tag):\n+    self.output_tag = output_tag\n+\n   def get_windowing(self, _):\n     return core.Windowing(window.GlobalWindows())\n \n   def expand(self, pcoll):\n-    return pvalue.PCollection.from_(pcoll)\n+    ret = pvalue.PCollection.from_(pcoll)\n+    ret.tag = self.output_tag\n+    return ret\n+\n+\n+class _ExpandableTestStream(PTransform):\n+  def __init__(self, test_stream):\n+    self.test_stream = test_stream\n+\n+  def expand(self, pbegin):\n+    \"\"\"Expands the TestStream into the DirectRunner implementation.\n+", "originalCommit": "437c88f1c9754fdac9769d734d08f281318fb343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5ODM0Nw==", "url": "https://github.com/apache/beam/pull/10892#discussion_r384698347", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Assert that no prevision is lost.\n          \n          \n            \n                # Assert that no precision is lost.", "author": "lukecwik", "createdAt": "2020-02-26T19:00:35Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -133,15 +140,21 @@ def __eq__(self, other):\n     return self.new_watermark == other.new_watermark and self.tag == other.tag\n \n   def __hash__(self):\n-    return hash(self.new_watermark)\n+    return hash(str(self.new_watermark) + str(self.tag))\n \n   def __lt__(self, other):\n     return self.new_watermark < other.new_watermark\n \n   def to_runner_api(self, unused_element_coder):\n+    tag = 'None' if self.tag is None else self.tag\n+\n+    # Assert that no prevision is lost.", "originalCommit": "437c88f1c9754fdac9769d734d08f281318fb343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5OTAwMg==", "url": "https://github.com/apache/beam/pull/10892#discussion_r384699002", "bodyText": "nit: This would be clearer by checking % has no remainder", "author": "lukecwik", "createdAt": "2020-02-26T19:01:48Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -133,15 +140,21 @@ def __eq__(self, other):\n     return self.new_watermark == other.new_watermark and self.tag == other.tag\n \n   def __hash__(self):\n-    return hash(self.new_watermark)\n+    return hash(str(self.new_watermark) + str(self.tag))\n \n   def __lt__(self, other):\n     return self.new_watermark < other.new_watermark\n \n   def to_runner_api(self, unused_element_coder):\n+    tag = 'None' if self.tag is None else self.tag\n+\n+    # Assert that no prevision is lost.\n+    assert 1000 * (\n+        self.new_watermark.micros // 1000) == self.new_watermark.micros", "originalCommit": "437c88f1c9754fdac9769d734d08f281318fb343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMjM1Ng==", "url": "https://github.com/apache/beam/pull/10892#discussion_r384702356", "bodyText": "Please add pydoc comments mentioning the few important pieces:\n\nspecifying the output_tags allows for adding outputs that produce no events\noutput_tags must be a superset of tags found in events if events is specified", "author": "lukecwik", "createdAt": "2020-02-26T19:08:13Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -171,13 +184,20 @@ class TestStream(PTransform):\n   time. After all of the specified elements are emitted, ceases to produce\n   output.\n   \"\"\"\n-  def __init__(self, coder=coders.FastPrimitivesCoder(), events=None):\n+  def __init__(", "originalCommit": "437c88f1c9754fdac9769d734d08f281318fb343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMzg3MA==", "url": "https://github.com/apache/beam/pull/10892#discussion_r384703870", "bodyText": "State that if only the default output or only one output tag has been specified, then a PCollection will be returned otherwise a dictionary of output name to PCollection.", "author": "lukecwik", "createdAt": "2020-02-26T19:11:00Z", "path": "sdks/python/apache_beam/testing/test_stream.py", "diffHunk": "@@ -171,13 +184,20 @@ class TestStream(PTransform):\n   time. After all of the specified elements are emitted, ceases to produce", "originalCommit": "437c88f1c9754fdac9769d734d08f281318fb343", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}