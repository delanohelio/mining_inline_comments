{"pr_number": 12553, "pr_title": "[BEAM-9615] Add initial schema proto documentation.", "pr_createdAt": "2020-08-12T19:00:06Z", "pr_url": "https://github.com/apache/beam/pull/12553", "timeline": [{"oid": "ec40148d278770f8e072480ecbafb379b51127bd", "url": "https://github.com/apache/beam/commit/ec40148d278770f8e072480ecbafb379b51127bd", "message": "[BEAM-9615] Add initial document schema protos.", "committedDate": "2020-08-12T18:58:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMTk0Nw==", "url": "https://github.com/apache/beam/pull/12553#discussion_r472401947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // for this option.\n          \n          \n            \n              // for this option and value is ignored.", "author": "TheNeuralBit", "createdAt": "2020-08-18T18:36:09Z", "path": "model/pipeline/src/main/proto/schema.proto", "diffHunk": "@@ -97,7 +108,11 @@ message LogicalType {\n }\n \n message Option {\n+  // REQUIRED. Identifier for the option.\n   string name = 1;\n+  // Optional type specifer for the structure of value.\n+  // If not present, assumes no additional configuration is needed\n+  // for this option.", "originalCommit": "ec40148d278770f8e072480ecbafb379b51127bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNjY2OA==", "url": "https://github.com/apache/beam/pull/12553#discussion_r472406668", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               // OPTIONAL. The position of this field's data in the encoding.\n          \n          \n            \n               // Either no fields in a given row are have encoding position populated,\n          \n          \n            \n               // or all of them are. Used to support backwards compatibility with schema\n          \n          \n            \n               // changes.\n          \n          \n            \n               // Two schemas, one with encoding positions and one without, are equal\n          \n          \n            \n               // if the fields when sorted by encoding position would otherwise be equal.\n          \n          \n            \n               // OPTIONAL. The position of this field's data when encoded, e.g. with beam:coder:row:v1.\n          \n          \n            \n               // Either no fields in a given row are have encoding position populated,\n          \n          \n            \n               // or all of them are. Used to support backwards compatibility with schema\n          \n          \n            \n               // changes.\n          \n          \n            \n               // If no fields have encoding position populated the order of encoding is the same as the order in the Schema.\n          \n      \n    \n    \n  \n\nAdded a reference to beam:coder:row:v1 and a note about default behavior. Removed the note about equality - the way equality is implemented in Java, two schemas are only equal if they are exactly the same. There are lower levels of compatibility though, like assignable, equivalent: \n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/Schema.java\n    \n    \n        Lines 340 to 353\n      in\n      29ea00e\n    \n    \n    \n    \n\n        \n          \n           /** Returns true if two Schemas have the same fields, but possibly in different orders. */ \n        \n\n        \n          \n           public boolean equivalent(Schema other) { \n        \n\n        \n          \n             return equivalent(other, EquivalenceNullablePolicy.SAME); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           /** Returns true if this Schema can be assigned to another Schema. * */ \n        \n\n        \n          \n           public boolean assignableTo(Schema other) { \n        \n\n        \n          \n             return equivalent(other, EquivalenceNullablePolicy.WEAKEN); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           /** Returns true if this Schema can be assigned to another Schema, ignoring nullable. * */ \n        \n\n        \n          \n           public boolean assignableToIgnoreNullable(Schema other) { \n        \n\n        \n          \n             return equivalent(other, EquivalenceNullablePolicy.IGNORE); \n        \n\n        \n          \n           }", "author": "TheNeuralBit", "createdAt": "2020-08-18T18:45:19Z", "path": "model/pipeline/src/main/proto/schema.proto", "diffHunk": "@@ -32,16 +32,27 @@ option java_package = \"org.apache.beam.model.pipeline.v1\";\n option java_outer_classname = \"SchemaApi\";\n \n message Schema {\n+  // List of fields for this schema. Two fields may not share a name.\n   repeated Field fields = 1;\n+  // REQUIRED. An RFC 4122 UUID.\n   string id = 2;\n   repeated Option options = 3;\n }\n \n message Field {\n+  // REQUIRED. Name of this field within the schema.\n   string name = 1;\n+  // OPTIONAL. Human readable description of this field, such as the query that generated it.\n   string description = 2;\n   FieldType type = 3;\n+  \n   int32 id = 4;\n+   // OPTIONAL. The position of this field's data in the encoding.\n+   // Either no fields in a given row are have encoding position populated,\n+   // or all of them are. Used to support backwards compatibility with schema\n+   // changes.\n+   // Two schemas, one with encoding positions and one without, are equal\n+   // if the fields when sorted by encoding position would otherwise be equal.", "originalCommit": "ec40148d278770f8e072480ecbafb379b51127bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI0MDAzMA==", "url": "https://github.com/apache/beam/pull/12553#discussion_r488240030", "bodyText": "Ack. There's nothing wrong with only using strict equivalence, rather than assignable equivalence. We do need to document which we're using at some point or all we'll be using is strict equivalence forever. Without a definition of assignable, we can't really use assignable equivalence at all.", "author": "lostluck", "createdAt": "2020-09-14T21:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNjY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwNzE5MA==", "url": "https://github.com/apache/beam/pull/12553#discussion_r472407190", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Optional type specifer for the structure of value.\n          \n          \n            \n              // OPTIONAL. Type specifer for the structure of value.", "author": "TheNeuralBit", "createdAt": "2020-08-18T18:46:17Z", "path": "model/pipeline/src/main/proto/schema.proto", "diffHunk": "@@ -97,7 +108,11 @@ message LogicalType {\n }\n \n message Option {\n+  // REQUIRED. Identifier for the option.\n   string name = 1;\n+  // Optional type specifer for the structure of value.", "originalCommit": "ec40148d278770f8e072480ecbafb379b51127bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1a291625ccbbcb2a18ad968964fc8cfedf01e4d", "url": "https://github.com/apache/beam/commit/b1a291625ccbbcb2a18ad968964fc8cfedf01e4d", "message": "Apply suggestions from code review\r\n\r\nTheNeuralBit's documentation suggestions\n\nCo-authored-by: Brian Hulette <hulettbh@gmail.com>", "committedDate": "2020-09-14T21:51:08Z", "type": "commit"}]}