{"pr_number": 10655, "pr_title": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness.", "pr_createdAt": "2020-01-22T05:38:55Z", "pr_url": "https://github.com/apache/beam/pull/10655", "timeline": [{"oid": "94d67c719e0a784c0139358992a1c7010b4ad292", "url": "https://github.com/apache/beam/commit/94d67c719e0a784c0139358992a1c7010b4ad292", "message": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness.", "committedDate": "2020-01-22T09:10:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw==", "url": "https://github.com/apache/beam/pull/10655#discussion_r371817547", "bodyText": "This won't update the access time when we first create the processor in the except block.", "author": "mxm", "createdAt": "2020-01-28T14:00:02Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -280,6 +283,7 @@ def get(self, instruction_id, bundle_descriptor_id):\n     try:\n       # pop() is threadsafe\n       processor = self.cached_bundle_processors[bundle_descriptor_id].pop()\n+      self.last_access_time[bundle_descriptor_id] = time.time()\n     except IndexError:", "originalCommit": "94d67c719e0a784c0139358992a1c7010b4ad292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NzA1Ng==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372177056", "bodyText": "This is expected. The last_access_time represents the last time the cached_bundle_processors for some bundle_descriptor is accessed. If it exceeds the time limit, the remaining bundle processors cached in the cached_bundle_processors will be shutdown. What's your thought?", "author": "sunjincheng121", "createdAt": "2020-01-29T03:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMjQzMQ==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372312431", "bodyText": "In my eyes, the first time it is accessed is when it is created.", "author": "mxm", "createdAt": "2020-01-29T10:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NTA3NA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372655074", "bodyText": "The strategy here is that the bundle processors which are unused after an amount of time will be shutdown. When a bundle processor is created in the exception block, there are no cached(unused) bundle processors. The bundle processors become unused only when they are added to the cached bundle processors list. What about rename last_access_time to cached_bundle_processors_last_access_time to make it more clear?", "author": "sunjincheng121", "createdAt": "2020-01-29T22:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0NjA2Mw==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372946063", "bodyText": "I still do not understand, the method is named get, so we access the bundle processor independently of whether we create it or not. It is cached, regardless of whether it is created and added to the cache, or retrieved from the cache.\nLogically, you might want to update the time when putting the processor into the cache. That would be in release.\nWhat is the advantage of updating the time here? It should be sufficient to update it in release, directly before putting it back.", "author": "mxm", "createdAt": "2020-01-30T13:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3MjIyMw==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372972223", "bodyText": "Hmm, If a bundle processor is retrieved from the cache, there is a high possibility that the remaining cached bundle processors will be needed in the future and so the last access time is updated.\nIf the bundle processor is newly created, it means that the cached bundle processor list is empty. This is the main reason that the last access time is only updated when bundle processor is retrieved from the cache. However, I think that it does no harm to update the last access time in both cases if it makes the code more readable.\nWhat do you think?", "author": "sunjincheng121", "createdAt": "2020-01-30T14:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4NDk0OA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r373384948", "bodyText": "If the bundle processor is newly created, it means that the cached bundle processor list is empty. This is the main reason that the last access time is only updated when bundle processor is retrieved from the cache.\n\nConsider the case where we just have a single bundle processor. When we call get for the first time, we won't update the last-used time. However, every time we retrieve it afterwards, we will update the time, but the list of cached bundle processors will remain empty.\nI think we should either (1) always update the last-used timestamp in get, regardless of creation or (2) update it only on release.\nI'm leaning towards (2) because while a bundle processor is in-use, it can't be removed anyways. We update the timestamp when we put it back in release.", "author": "mxm", "createdAt": "2020-01-31T09:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQzNzQxNA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r373437414", "bodyText": "Regarding the single bundle processor case, it doesn't harm to update the time as the cached bundle processors is empty. However, in cases where there are multiple bundle processors, it will update the time for the remaining cached bundle processors and so improve the cache hit rate. I think this is main difference between solution (1) and (2). However, I'm fine with both solutions as I think both of them work. Will update the PR according to solution (2) if you are favor of it according to your experience.", "author": "sunjincheng121", "createdAt": "2020-01-31T11:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzk3OA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r371817978", "bodyText": "We may want to make this configurable.", "author": "mxm", "createdAt": "2020-01-28T14:00:54Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:", "originalCommit": "94d67c719e0a784c0139358992a1c7010b4ad292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NzM1NA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372177354", "bodyText": "I'm not pretty sure if it deserves a configuration. What about extracting it to a variable initially as you suggested below?", "author": "sunjincheng121", "createdAt": "2020-01-29T03:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxNDEyMw==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372314123", "bodyText": "Sounds good.", "author": "mxm", "createdAt": "2020-01-29T10:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxNzk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxODE2Mg==", "url": "https://github.com/apache/beam/pull/10655#discussion_r371818162", "bodyText": "Same here. Should be configurable or at least be extracted to a variable.", "author": "mxm", "createdAt": "2020-01-28T14:01:17Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:\n+          BundleProcessorCache._shutdown_cached_bundle_processors(\n+              self.cached_bundle_processors[descriptor_id])\n+\n+    from apache_beam.runners.worker.data_plane import PeriodicThread\n+    self.periodic_shutdown = PeriodicThread(\n+        60, shutdown_inactive_bundle_processors)", "originalCommit": "94d67c719e0a784c0139358992a1c7010b4ad292", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgxOTAxOA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r371819018", "bodyText": "I think we should move this to the import section.", "author": "mxm", "createdAt": "2020-01-28T14:02:59Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:\n+          BundleProcessorCache._shutdown_cached_bundle_processors(\n+              self.cached_bundle_processors[descriptor_id])\n+\n+    from apache_beam.runners.worker.data_plane import PeriodicThread", "originalCommit": "94d67c719e0a784c0139358992a1c7010b4ad292", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMDkzMQ==", "url": "https://github.com/apache/beam/pull/10655#discussion_r371820931", "bodyText": "Don't we have to remove the bundle processor list from the dictionary? Otherwise we may access a cached shutdown bundle processor.", "author": "mxm", "createdAt": "2020-01-28T14:06:31Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +319,47 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in self.last_access_time.items():\n+        if time.time() - last_access_time > 60:\n+          BundleProcessorCache._shutdown_cached_bundle_processors(\n+              self.cached_bundle_processors[descriptor_id])", "originalCommit": "94d67c719e0a784c0139358992a1c7010b4ad292", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3Nzk3Mg==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372177972", "bodyText": "The bundle processor will be popped from the bundle processor list before shutdown and the pop operation is thread safe and so I think this will not happen. What's your thought?", "author": "sunjincheng121", "createdAt": "2020-01-29T03:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMDkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMzI0OA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r372313248", "bodyText": "True, since the pop on the list is thread-safe, we can't wind up with a cached bundle processor being in use.", "author": "mxm", "createdAt": "2020-01-29T10:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMDkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4MzUwOA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r373483508", "bodyText": "nit: you could surround the condition with paranthesis which would make it easier to read, e.g.\n       if (time.time() - last_access_time >\n                DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S):", "author": "mxm", "createdAt": "2020-01-31T13:41:12Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +322,49 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.cached_bundle_processors_last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in \\\n+              self.cached_bundle_processors_last_access_time.items():\n+        if time.time() - last_access_time > \\\n+                DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S:", "originalCommit": "ddf68a2630f9e77ac41b94955e1fb9b2834cdda6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDA0Ng==", "url": "https://github.com/apache/beam/pull/10655#discussion_r373484046", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S = 60\n          \n          \n            \n            DEFAULT_BUNDLE_PROCESSOR_CACHE_SHUTDOWN_THRESHOLD_S = 60", "author": "mxm", "createdAt": "2020-01-31T13:42:16Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -69,6 +71,8 @@\n # 5 minutes * 60 seconds * 1020 millis * 1000 micros * 1000 nanoseconds\n DEFAULT_LOG_LULL_TIMEOUT_NS = 5 * 60 * 1000 * 1000 * 1000\n \n+DEFAULT_BUNDLE_PROCESSOR_CACHE_THRESHOLD_S = 60", "originalCommit": "ddf68a2630f9e77ac41b94955e1fb9b2834cdda6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDE1NA==", "url": "https://github.com/apache/beam/pull/10655#discussion_r373484154", "bodyText": "Same here, use parenthesis.", "author": "mxm", "createdAt": "2020-01-31T13:42:31Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -315,18 +322,49 @@ def release(self, instruction_id):\n     \"\"\"\n     descriptor_id, processor = self.active_bundle_processors.pop(instruction_id)\n     processor.reset()\n+    self.cached_bundle_processors_last_access_time[descriptor_id] = time.time()\n     self.cached_bundle_processors[descriptor_id].append(processor)\n \n   def shutdown(self):\n     \"\"\"\n     Shutdown all ``BundleProcessor``s in the cache.\n     \"\"\"\n+    if self.periodic_shutdown:\n+      self.periodic_shutdown.cancel()\n+      self.periodic_shutdown.join()\n+      self.periodic_shutdown = None\n+\n     for instruction_id in self.active_bundle_processors:\n       self.active_bundle_processors[instruction_id][1].shutdown()\n       del self.active_bundle_processors[instruction_id]\n     for cached_bundle_processors in self.cached_bundle_processors.values():\n-      while len(cached_bundle_processors) > 0:\n-        cached_bundle_processors.pop().shutdown()\n+      BundleProcessorCache._shutdown_cached_bundle_processors(\n+          cached_bundle_processors)\n+\n+  def _schedule_periodic_shutdown(self):\n+    def shutdown_inactive_bundle_processors():\n+      for descriptor_id, last_access_time in \\\n+              self.cached_bundle_processors_last_access_time.items():", "originalCommit": "ddf68a2630f9e77ac41b94955e1fb9b2834cdda6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0OTc4Ng==", "url": "https://github.com/apache/beam/pull/10655#discussion_r373749786", "bodyText": "It seems that it doesn't support parenthesis in the for loop\uff1f", "author": "sunjincheng121", "createdAt": "2020-02-01T02:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2ODM1Ng==", "url": "https://github.com/apache/beam/pull/10655#discussion_r375468356", "bodyText": "It should, there are many examples of for loops using parentheses in the code base already.", "author": "lukecwik", "createdAt": "2020-02-05T19:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMTE1Mw==", "url": "https://github.com/apache/beam/pull/10655#discussion_r376331153", "bodyText": "Ah, I have added a local variable and it should have no this problem now. Is that make sense to you?", "author": "sunjincheng121", "createdAt": "2020-02-07T10:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDE1NA=="}], "type": "inlineReview"}, {"oid": "8d97572204699fb16292c39825bbd1daabe5f782", "url": "https://github.com/apache/beam/commit/8d97572204699fb16292c39825bbd1daabe5f782", "message": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness.", "committedDate": "2020-02-07T08:05:44Z", "type": "commit"}, {"oid": "8d97572204699fb16292c39825bbd1daabe5f782", "url": "https://github.com/apache/beam/commit/8d97572204699fb16292c39825bbd1daabe5f782", "message": "[BEAM-8618] Tear down unused DoFns periodically in Python SDK harness.", "committedDate": "2020-02-07T08:05:44Z", "type": "forcePushed"}, {"oid": "4c288d111de9b6fceb62aee67b3a0f06fce7cfb4", "url": "https://github.com/apache/beam/commit/4c288d111de9b6fceb62aee67b3a0f06fce7cfb4", "message": "fixup! [BEAM-8618] Tear down unused DoFns periodically in Python SDK harness.", "committedDate": "2020-02-25T09:21:29Z", "type": "commit"}]}