{"pr_number": 11067, "pr_title": "[BEAM-9136]Add licenses for dependencies for Python", "pr_createdAt": "2020-03-06T23:24:50Z", "pr_url": "https://github.com/apache/beam/pull/11067", "timeline": [{"oid": "7e2bebb2754a4cb555feeecbcc17e11c91ded674", "url": "https://github.com/apache/beam/commit/7e2bebb2754a4cb555feeecbcc17e11c91ded674", "message": "python licenses", "committedDate": "2020-03-06T23:40:25Z", "type": "forcePushed"}, {"oid": "feb01f1b60847a0435feba7f0d8f7716e0ae9fa0", "url": "https://github.com/apache/beam/commit/feb01f1b60847a0435feba7f0d8f7716e0ae9fa0", "message": "python licenses", "committedDate": "2020-03-06T23:56:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMTI4NA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r390011284", "bodyText": "This line generates a warning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe", "author": "tvalentyn", "createdAt": "2020-03-09T23:13:20Z", "path": "licenses/scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,157 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(command.split(),\n+                             stdout=subprocess.PIPE,\n+                             stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError('Error occurred when running a bash command.',\n+                       'command: ', command, 'error message: ',\n+                       error.decode('utf-8'))\n+  return result.decode('utf-8')\n+\n+\n+try:\n+  import wget\n+except:\n+  command = 'pip install wget --no-cache-dir'\n+  run_bash_command(command)\n+  import wget\n+\n+\n+def install_pip_licenses():\n+  command = 'pip install pip-licenses --no-cache-dir'\n+  run_bash_command(command)\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name']\n+  dest_dir = '/'.join([license_dir, name.lower()])\n+  try:\n+    if not os.path.isdir(dest_dir):\n+      os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+    try:\n+      is_file_available = False\n+      # license is required, but not all dependencies have license.\n+      # In case we have to skip, print out a message.\n+      if config['license'] != 'skip':\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        is_file_available = True\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+        is_file_available = True\n+      # copy from temp dir to final dir only when either file is abailable.\n+      if is_file_available:\n+        if os.path.isdir(dest_dir):\n+          shutil.rmtree(dest_dir)\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print('Error occurred when pull license from url.', 'dependency =',\n+            dep, 'url =', config, 'error = ', e.decode('utf-8'))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  cur_dir = os.getcwd()\n+  if cur_dir.split('/')[-1] != 'beam':\n+    raise RuntimeError('This script should run from ~/beam directory.')\n+  license_dir = os.getcwd() + '/licenses/python'\n+  no_licenses = []\n+\n+  with open('licenses/scripts/dep_urls_py.yaml') as file:\n+    dep_config = yaml.load(file)", "originalCommit": "76483e29d4c3be08a16a1f86b9b394307959a98a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNjU5MQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r390016591", "bodyText": "~ - is a pointer to a home directory. Perhaps say 'from the root of the repository`?", "author": "tvalentyn", "createdAt": "2020-03-09T23:30:30Z", "path": "licenses/scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,157 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(command.split(),\n+                             stdout=subprocess.PIPE,\n+                             stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError('Error occurred when running a bash command.',\n+                       'command: ', command, 'error message: ',\n+                       error.decode('utf-8'))\n+  return result.decode('utf-8')\n+\n+\n+try:\n+  import wget\n+except:\n+  command = 'pip install wget --no-cache-dir'\n+  run_bash_command(command)\n+  import wget\n+\n+\n+def install_pip_licenses():\n+  command = 'pip install pip-licenses --no-cache-dir'\n+  run_bash_command(command)\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name']\n+  dest_dir = '/'.join([license_dir, name.lower()])\n+  try:\n+    if not os.path.isdir(dest_dir):\n+      os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+    try:\n+      is_file_available = False\n+      # license is required, but not all dependencies have license.\n+      # In case we have to skip, print out a message.\n+      if config['license'] != 'skip':\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        is_file_available = True\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+        is_file_available = True\n+      # copy from temp dir to final dir only when either file is abailable.\n+      if is_file_available:\n+        if os.path.isdir(dest_dir):\n+          shutil.rmtree(dest_dir)\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print('Error occurred when pull license from url.', 'dependency =',\n+            dep, 'url =', config, 'error = ', e.decode('utf-8'))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  cur_dir = os.getcwd()\n+  if cur_dir.split('/')[-1] != 'beam':\n+    raise RuntimeError('This script should run from ~/beam directory.')", "originalCommit": "76483e29d4c3be08a16a1f86b9b394307959a98a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMDIyMA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r390020220", "bodyText": "besides pip-licenses, this script needs pyyaml, tenacity, wget. Maybe add a requirements file with required dependencies to run this script + provide instructions how to run the script, for example:\npip install -r ./licenses/scripts/requirements.txt\npython ./licenses/scripts/pull_licenses_py.py", "author": "tvalentyn", "createdAt": "2020-03-09T23:42:39Z", "path": "licenses/scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,157 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(command.split(),\n+                             stdout=subprocess.PIPE,\n+                             stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError('Error occurred when running a bash command.',\n+                       'command: ', command, 'error message: ',\n+                       error.decode('utf-8'))\n+  return result.decode('utf-8')\n+\n+\n+try:\n+  import wget\n+except:\n+  command = 'pip install wget --no-cache-dir'\n+  run_bash_command(command)\n+  import wget\n+\n+\n+def install_pip_licenses():\n+  command = 'pip install pip-licenses --no-cache-dir'\n+  run_bash_command(command)\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name']\n+  dest_dir = '/'.join([license_dir, name.lower()])\n+  try:\n+    if not os.path.isdir(dest_dir):\n+      os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+    try:\n+      is_file_available = False\n+      # license is required, but not all dependencies have license.\n+      # In case we have to skip, print out a message.\n+      if config['license'] != 'skip':\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        is_file_available = True\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+        is_file_available = True\n+      # copy from temp dir to final dir only when either file is abailable.\n+      if is_file_available:\n+        if os.path.isdir(dest_dir):\n+          shutil.rmtree(dest_dir)\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print('Error occurred when pull license from url.', 'dependency =',\n+            dep, 'url =', config, 'error = ', e.decode('utf-8'))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  cur_dir = os.getcwd()\n+  if cur_dir.split('/')[-1] != 'beam':\n+    raise RuntimeError('This script should run from ~/beam directory.')\n+  license_dir = os.getcwd() + '/licenses/python'\n+  no_licenses = []\n+\n+  with open('licenses/scripts/dep_urls_py.yaml') as file:\n+    dep_config = yaml.load(file)\n+\n+  install_pip_licenses()", "originalCommit": "76483e29d4c3be08a16a1f86b9b394307959a98a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NTc2Mw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r395865763", "bodyText": "The script is running at a virtual environment with [apache-beam, test, gcp, docs, aws, interactive] (this list is referred from setup.py) installed. With this virtual environment, pyyaml, tenacity etc are installed, we only need to install wget and pip-licenses. I moved this list to license_requirements.txt and call it within the script.\nThe reason I call the pip install -r within the script is simply the UI for users. Users need to run this script to add licenses when new dependencies are introduced, so wanted to provide a single step tool to do it.", "author": "Hannah-Jiang", "createdAt": "2020-03-20T20:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMDIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMjU3NA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r390022574", "bodyText": "Can you please add a comment here how this list is compiled?", "author": "tvalentyn", "createdAt": "2020-03-09T23:50:45Z", "path": "licenses/scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,106 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:", "originalCommit": "76483e29d4c3be08a16a1f86b9b394307959a98a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMjY2Mw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r390022663", "bodyText": "Can you please add a comment here how this list is compiled?", "author": "tvalentyn", "createdAt": "2020-03-09T23:51:00Z", "path": "licenses/scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,106 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license or \"skip\"\n+  #   (optional)notice: url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  apipkg:\n+    license: \"https://raw.githubusercontent.com/pytest-dev/apipkg/master/LICENSE\"\n+  atomicwrites:\n+    license: \"https://raw.githubusercontent.com/untitaker/python-atomicwrites/master/LICENSE\"\n+  avro-python3:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  beautifulsoup4:\n+    license: \"skip\" # it is manually added.\n+  chardet:\n+    license: \"https://raw.githubusercontent.com/chardet/chardet/master/LICENSE\"\n+  fastavro:\n+    license: \"https://raw.githubusercontent.com/fastavro/fastavro/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/fastavro/fastavro/master/NOTICE.txt\"\n+  freezegun:\n+    license: \"https://raw.githubusercontent.com/spulec/freezegun/master/LICENSE\"\n+  google-apitools:\n+    license: \"https://raw.githubusercontent.com/google/apitools/master/LICENSE\"\n+  grpcio:\n+    license: \"https://raw.githubusercontent.com/grpc/grpc/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/grpc/grpc/master/NOTICE.txt\"\n+  grpcio-gcp:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/grpc-gcp-python/master/LICENSE\"\n+  hdfs:\n+    license: \"https://raw.githubusercontent.com/mtth/hdfs/master/LICENSE\"\n+  httplib2:\n+    license: \"https://raw.githubusercontent.com/httplib2/httplib2/master/LICENSE\"\n+  mock:\n+    license: \"https://raw.githubusercontent.com/testing-cabal/mock/master/LICENSE.txt\"\n+  monotonic:\n+    license: \"https://raw.githubusercontent.com/atdt/monotonic/master/LICENSE\"\n+  mypy-protobuf:\n+    license: \"https://raw.githubusercontent.com/dropbox/mypy-protobuf/master/LICENSE\"\n+  nose:\n+    license: \"https://raw.githubusercontent.com/nose-devs/nose2/master/license.txt\"\n+  nose-xunitmp:\n+    license: \"skip\" # no license available.\n+  numpy:\n+    license: \"https://raw.githubusercontent.com/numpy/numpy/master/LICENSE.txt\"\n+  oauth2client:\n+    license: \"https://raw.githubusercontent.com/googleapis/oauth2client/master/LICENSE\"\n+  pandas:\n+    license: \"https://raw.githubusercontent.com/pandas-dev/pandas/master/LICENSE\"\n+  parameterized:\n+    license: \"https://raw.githubusercontent.com/wolever/parameterized/master/LICENSE.txt\"\n+  pathlib2:\n+    license: \"https://raw.githubusercontent.com/mcmtroffaes/pathlib2/develop/LICENSE.rst\"\n+  pkg-resources:\n+    license: \"https://raw.githubusercontent.com/pypa/setuptools/master/LICENSE\"\n+  protobuf:\n+    license: \"https://raw.githubusercontent.com/protocolbuffers/protobuf/master/LICENSE\"\n+  pyarrow:\n+    license: \"https://raw.githubusercontent.com/apache/arrow/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/arrow/master/NOTICE.txt\"\n+  pyhamcrest:\n+    license: \"https://raw.githubusercontent.com/hamcrest/PyHamcrest/master/LICENSE.txt\"\n+  pymongo:\n+    license: \"https://raw.githubusercontent.com/mongodb/mongo-python-driver/master/LICENSE\"\n+  wget:\n+    license: \"https://raw.githubusercontent.com/mirror/wget/master/COPYING\"\n+  yapf:\n+    license: \"https://raw.githubusercontent.com/google/yapf/master/LICENSE\"\n+\n+docker_dependencies:", "originalCommit": "76483e29d4c3be08a16a1f86b9b394307959a98a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MjUxMA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r390042510", "bodyText": "Can we add some instructions for the users what they should do when they see this error?", "author": "tvalentyn", "createdAt": "2020-03-10T01:07:35Z", "path": "licenses/scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,157 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(command.split(),\n+                             stdout=subprocess.PIPE,\n+                             stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError('Error occurred when running a bash command.',\n+                       'command: ', command, 'error message: ',\n+                       error.decode('utf-8'))\n+  return result.decode('utf-8')\n+\n+\n+try:\n+  import wget\n+except:\n+  command = 'pip install wget --no-cache-dir'\n+  run_bash_command(command)\n+  import wget\n+\n+\n+def install_pip_licenses():\n+  command = 'pip install pip-licenses --no-cache-dir'\n+  run_bash_command(command)\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name']\n+  dest_dir = '/'.join([license_dir, name.lower()])\n+  try:\n+    if not os.path.isdir(dest_dir):\n+      os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+    try:\n+      is_file_available = False\n+      # license is required, but not all dependencies have license.\n+      # In case we have to skip, print out a message.\n+      if config['license'] != 'skip':\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        is_file_available = True\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+        is_file_available = True\n+      # copy from temp dir to final dir only when either file is abailable.\n+      if is_file_available:\n+        if os.path.isdir(dest_dir):\n+          shutil.rmtree(dest_dir)\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print('Error occurred when pull license from url.', 'dependency =',\n+            dep, 'url =', config, 'error = ', e.decode('utf-8'))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  cur_dir = os.getcwd()\n+  if cur_dir.split('/')[-1] != 'beam':\n+    raise RuntimeError('This script should run from ~/beam directory.')\n+  license_dir = os.getcwd() + '/licenses/python'\n+  no_licenses = []\n+\n+  with open('licenses/scripts/dep_urls_py.yaml') as file:\n+    dep_config = yaml.load(file)\n+\n+  install_pip_licenses()\n+  dependencies = run_pip_licenses()\n+  # add licenses for pip installed packages.\n+  # try to pull licenses with pip-licenses tool first, if no license pulled,\n+  # then pull from URLs.\n+  for dep in dependencies:\n+    if not (copy_license_files(dep) or pull_from_url(\n+        dep['Name'].lower(), dep_config['pip_dependencies'])):\n+      no_licenses.append(dep['Name'])\n+\n+  # add licenses for dependencies added to docker\n+  for dep in dep_config['docker_dependencies']:\n+    if not pull_from_url(dep, dep_config['docker_dependencies']):\n+      no_licenses.append(dep)\n+\n+  # check if license are already pulled.\n+  no_licenses = [\n+      dep for dep in no_licenses\n+      if not os.path.isdir(license_dir + '/' + dep.lower())\n+  ]\n+\n+  if no_licenses:\n+    py_version = '%d.%d' % (sys.version_info[0], sys.version_info[1])\n+    raise RuntimeError(", "originalCommit": "76483e29d4c3be08a16a1f86b9b394307959a98a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NTUyNg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r390045526", "bodyText": "I think it would help to add some logging as we are processing each dependency.", "author": "tvalentyn", "createdAt": "2020-03-10T01:20:35Z", "path": "licenses/scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,157 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(command.split(),\n+                             stdout=subprocess.PIPE,\n+                             stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError('Error occurred when running a bash command.',\n+                       'command: ', command, 'error message: ',\n+                       error.decode('utf-8'))\n+  return result.decode('utf-8')\n+\n+\n+try:\n+  import wget\n+except:\n+  command = 'pip install wget --no-cache-dir'\n+  run_bash_command(command)\n+  import wget\n+\n+\n+def install_pip_licenses():\n+  command = 'pip install pip-licenses --no-cache-dir'\n+  run_bash_command(command)\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name']\n+  dest_dir = '/'.join([license_dir, name.lower()])\n+  try:\n+    if not os.path.isdir(dest_dir):\n+      os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+    try:\n+      is_file_available = False\n+      # license is required, but not all dependencies have license.\n+      # In case we have to skip, print out a message.\n+      if config['license'] != 'skip':\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        is_file_available = True\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+        is_file_available = True\n+      # copy from temp dir to final dir only when either file is abailable.\n+      if is_file_available:\n+        if os.path.isdir(dest_dir):\n+          shutil.rmtree(dest_dir)\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print('Error occurred when pull license from url.', 'dependency =',\n+            dep, 'url =', config, 'error = ', e.decode('utf-8'))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  cur_dir = os.getcwd()\n+  if cur_dir.split('/')[-1] != 'beam':\n+    raise RuntimeError('This script should run from ~/beam directory.')\n+  license_dir = os.getcwd() + '/licenses/python'\n+  no_licenses = []\n+\n+  with open('licenses/scripts/dep_urls_py.yaml') as file:\n+    dep_config = yaml.load(file)\n+\n+  install_pip_licenses()\n+  dependencies = run_pip_licenses()\n+  # add licenses for pip installed packages.\n+  # try to pull licenses with pip-licenses tool first, if no license pulled,\n+  # then pull from URLs.\n+  for dep in dependencies:", "originalCommit": "76483e29d4c3be08a16a1f86b9b394307959a98a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0d231ae59aa6f167e06ec29370e5035d43a4c14", "url": "https://github.com/apache/beam/commit/b0d231ae59aa6f167e06ec29370e5035d43a4c14", "message": "fix python licenses", "committedDate": "2020-03-20T22:43:52Z", "type": "forcePushed"}, {"oid": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "url": "https://github.com/apache/beam/commit/2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "message": "fix python licenses", "committedDate": "2020-03-20T22:55:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NTM5NA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398065394", "bodyText": "Instead of checking the LICENSE files in, can these be gathered during container creation?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:08:18Z", "path": "licenses/go/bufio/LICENSE", "diffHunk": "@@ -0,0 +1,27 @@\n+Copyright (c) 2009 The Go Authors. All rights reserved.", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4ODg4Mw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398088883", "bodyText": "I'll second the comment that we should not include the list of license files in the beam repository itself, but just add the script to the container build process to install them into the container.\n\nI agree. It would seem better for all languages to add the license retrieval to the container build script.\n\nI will make this change in the next commit.", "author": "Hannah-Jiang", "createdAt": "2020-03-25T18:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NTM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2Nzg4Mg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398067882", "bodyText": "I don't see a task for running pull_licenses_go.py ... can that be added?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:12:15Z", "path": "sdks/go/container/build.gradle", "diffHunk": "@@ -45,6 +45,11 @@ golang {\n   }\n }\n \n+task copyDependencyLicenses(type: Copy) {", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MTMyOQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398071329", "bodyText": "I see many duplicates in go licenses. Can only unique licenses be stored?\ndocker run -it --entrypoint bash apache/beam_go_sdk:latest\nfind /opt/apache/beam/licenses/ -type f -exec sha1sum {} ; | awk '{print $1}' | sort | uniq -c\nShows only 3 unique licenses:\n2 2b8b815229aa8a61e483fb4ba0588b8b6c491890\n1 aa9b240f558caed367795f667629ccbca28f20b2\n36 d6a5f1ecaedd723c325a2063375b3517e808a2b5", "author": "alanmyrvold", "createdAt": "2020-03-25T18:17:25Z", "path": "sdks/go/container/license_scripts/pull_licenses_go.py", "diffHunk": "@@ -0,0 +1,132 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\"\"\"A script to pull licenses for Go.\n+\"\"\"\n+\n+import os\n+import re\n+import shutil\n+import subprocess\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(command.split(),\n+                             stdout=subprocess.PIPE,\n+                             stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError('Error occurred when running a bash command.',\n+                       'command: ', command, 'error message: ',\n+                       error.decode('utf-8'))\n+  return result.decode('utf-8')\n+\n+\n+def get_final_dependencies(deps):\n+  final_deps = set()\n+  for dep in deps:\n+    # remove Beam internal dependencies.\n+    if dep.startswith('github.com/apache/beam'):\n+      continue\n+    if dep.startswith('vendor/'):\n+      dep = dep.replace('vendor/', '')\n+    # the list contains all nested dependencies, following if statements\n+    # dedup nested dependencies and includes root dependencies only.\n+    # if dep is from github.com, ex: github.com/golang/protobuf/proto\n+    if dep.startswith('github.com'):\n+      final_deps.add('/'.join(dep.split('/')[:3]))\n+    # if dep is from google.golang.org, ex:google.golang.org/grpc\n+    elif dep.startswith('google.golang.org'):\n+      final_deps.add('/'.join(dep.split('/')[:2]))\n+    # if dep is from golang.org, ex: golang.org/x/net/http2\n+    elif dep.startswith('golang.org'):\n+      final_deps.add('/'.join(dep.split('/')[:3]))\n+    else:  # embedded dependencies, ex: debug, crypto/tls\n+      final_deps.add(dep.split('/')[0])\n+  return final_deps\n+\n+\n+def get_dependency_list():\n+  command = \"go list -f '{{.Deps}}' github.com/apache/beam/sdks/go/pkg/beam\"\n+  dependencies = run_bash_command(command)\n+  # dependencies returned from the command is '[dep0 dpe1 ...]'.\n+  # \"'\", \"[\", \"]\" should be removed from the bytes.\n+  str_dependencies = re.sub(r\"([\\'\\[\\]])\", r\"\", dependencies)\n+  final_dependencies = get_final_dependencies(str_dependencies.split())\n+  return final_dependencies\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_license(dep):", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDMyNA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398884324", "bodyText": "There are four different type of Go packages.\n\nGo embedded packages. (hash, byte etc) (BSD 3-Clause, with copyright 2009)\ngithub.com/golang/ package. (BSD 3-Clause, with copyright 2010)\ngolang.org/x/ (BSD 3-Clause, with copyright 2009)\ngoogle.golang.org/ (Apache-2.0), 2 packages\n\nso the 2 licenses are from 4, 1 licenses are from 2 and other 36 licenses are from 1 and 3.\nI manually checked several of the licenses and the script pulled the licenses correctly. I think this is an expected behavior. Go packages seem like don't update licenses and use default licenses.\nThen I think we don't need to include embedded licenses in 1 because they are not third party dependencies, I will go ahead and update the scripts if it sounds good.", "author": "Hannah-Jiang", "createdAt": "2020-03-26T20:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MTMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MzE3MQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398073171", "bodyText": "Can this task be added to buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy in applyDockerNature?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:20:12Z", "path": "sdks/java/container/build.gradle", "diffHunk": "@@ -68,6 +68,11 @@ golang {\n   }\n }\n \n+task copyDependencyLicenses(type: Copy) {", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MzUyNg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398073526", "bodyText": "Can this dependency be added to buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy in applyDockerNature?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:20:45Z", "path": "sdks/java/container/build.gradle", "diffHunk": "@@ -82,3 +87,4 @@ docker {\n // Ensure that we build the required resources and copy and file dependencies from related projects\n dockerPrepare.dependsOn goBuild\n dockerPrepare.dependsOn copyDockerfileDependencies\n+dockerPrepare.dependsOn copyDependencyLicenses", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjE5OA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398076198", "bodyText": "Does this file need to be checked in?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:24:53Z", "path": "licenses/java/index.html", "diffHunk": "@@ -0,0 +1,6290 @@\n+", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjY5NQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398076695", "bodyText": "Can this task be added to buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy in applyDockerNature?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:25:42Z", "path": "sdks/python/container/py2/build.gradle", "diffHunk": "@@ -51,6 +51,11 @@ task copyLauncherDependencies(type: Copy) {\n   }\n }\n \n+task copyDependencyLicenses(type: Copy) {", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5ODMxMQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398298311", "bodyText": "For Python, license files are written to docker image directly, so this task is no longer needed.\nI will review Go and Java later when I work on them.,", "author": "Hannah-Jiang", "createdAt": "2020-03-26T03:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjgxNw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398076817", "bodyText": "Can this task be added to buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy in applyDockerNature?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:25:53Z", "path": "sdks/python/container/py35/build.gradle", "diffHunk": "@@ -51,6 +51,11 @@ task copyLauncherDependencies(type: Copy) {\n   }\n }\n \n+task copyDependencyLicenses(type: Copy) {", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjkxMw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398076913", "bodyText": "Can this task be added to buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy in applyDockerNature?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:26:03Z", "path": "sdks/python/container/py36/build.gradle", "diffHunk": "@@ -51,6 +51,11 @@ task copyLauncherDependencies(type: Copy) {\n   }\n }\n \n+task copyDependencyLicenses(type: Copy) {", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NzAwMw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398077003", "bodyText": "Can this task be added to buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy in applyDockerNature?", "author": "alanmyrvold", "createdAt": "2020-03-25T18:26:12Z", "path": "sdks/python/container/py37/build.gradle", "diffHunk": "@@ -51,6 +51,11 @@ task copyLauncherDependencies(type: Copy) {\n   }\n }\n \n+task copyDependencyLicenses(type: Copy) {", "originalCommit": "2832dd93c77ae277571d3e1889fd7abee4d7c5e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "47e35b85c26c2bd208349542719fcfa13c975deb", "url": "https://github.com/apache/beam/commit/47e35b85c26c2bd208349542719fcfa13c975deb", "message": "fix comments for python scripts", "committedDate": "2020-03-26T03:23:42Z", "type": "forcePushed"}, {"oid": "90488d1e4ce4c7b598c6e5f56ac71d53cc2678cf", "url": "https://github.com/apache/beam/commit/90488d1e4ce4c7b598c6e5f56ac71d53cc2678cf", "message": "go licenses", "committedDate": "2020-03-26T03:37:53Z", "type": "forcePushed"}, {"oid": "7984deb2f95962ed2a04badb7a74aeeff04a2688", "url": "https://github.com/apache/beam/commit/7984deb2f95962ed2a04badb7a74aeeff04a2688", "message": "go licenses", "committedDate": "2020-03-26T03:41:08Z", "type": "forcePushed"}, {"oid": "d8787736212f600b6fc1b7356b268de3ac3a2128", "url": "https://github.com/apache/beam/commit/d8787736212f600b6fc1b7356b268de3ac3a2128", "message": "PreCommit_Python_DockerBuild", "committedDate": "2020-03-26T17:57:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0Njg0OA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398846848", "bodyText": "The 'Python' is defined in the python precommit. The namebase must be unique. It could be PythonDocker or something else. It will be used when generating the trigger phrase.", "author": "yifanzou", "createdAt": "2020-03-26T19:46:57Z", "path": ".test-infra/jenkins/job_PreCommit_Python_DockerBuild.groovy", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import PrecommitJobBuilder\n+\n+PrecommitJobBuilder builder = new PrecommitJobBuilder(\n+    scope: this,\n+    nameBase: 'Python',", "originalCommit": "d8787736212f600b6fc1b7356b268de3ac3a2128", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3OTcxOA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398879718", "bodyText": "This fixed the issue, thank you.", "author": "Hannah-Jiang", "createdAt": "2020-03-26T20:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5MTQxNg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398891416", "bodyText": "Isn't docker built as part of the precommit tests already?", "author": "robertwb", "createdAt": "2020-03-26T21:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNzg5MQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r398907891", "bodyText": "They are not for Python Precommit.", "author": "Hannah-Jiang", "createdAt": "2020-03-26T21:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0Njg0OA=="}], "type": "inlineReview"}, {"oid": "7bdb98ad0e6d2379af50771c43230006fe78982c", "url": "https://github.com/apache/beam/commit/7bdb98ad0e6d2379af50771c43230006fe78982c", "message": "PreCommit_Python_DockerBuild", "committedDate": "2020-03-26T20:03:09Z", "type": "forcePushed"}, {"oid": "c33510b39a5f03a5ba805537ed827a5308907c86", "url": "https://github.com/apache/beam/commit/c33510b39a5f03a5ba805537ed827a5308907c86", "message": "python scripts", "committedDate": "2020-03-26T21:54:49Z", "type": "commit"}, {"oid": "7ead962c020d9127079edd406a6a5b2963a5ae91", "url": "https://github.com/apache/beam/commit/7ead962c020d9127079edd406a6a5b2963a5ae91", "message": "PreCommit_Python_DockerBuild", "committedDate": "2020-03-26T21:54:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwNDU5MQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399504591", "bodyText": "Let's retry with a back-off, so that there is more chance that we avoid a temporary  connection problem.", "author": "tvalentyn", "createdAt": "2020-03-27T19:51:29Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTAyOQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399509029", "bodyText": "we can drop .keys()", "author": "tvalentyn", "createdAt": "2020-03-27T20:00:38Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxMDY1OQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399610659", "bodyText": "You can use tempfile.mkdtemp()", "author": "tvalentyn", "createdAt": "2020-03-28T02:58:00Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxMTMyNA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399611324", "bodyText": "Will this condition ever evaluate to false? Sounds like we can just remove the if.", "author": "tvalentyn", "createdAt": "2020-03-28T03:05:05Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      elif config['license'] == 'manual':\n+        shutil.copyfile(\n+            '/tmp/manual_licenses/{dep}/LICENSE'.format(dep=dep),\n+            cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully copied license for {dep} from manual_licenses/{dep}/'\n+            'LICENSE.'.format(dep=dep))\n+      else:  # pull from url\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully pulled license for {dep} from internet.'.format(\n+                dep=dep))\n+\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+      # copy from temp dir to final dir only when either file is available.\n+      if os.listdir(cur_temp_dir):", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxMTUxNg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399611516", "bodyText": "s/if possible/if available", "author": "tvalentyn", "createdAt": "2020-03-28T03:07:44Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      elif config['license'] == 'manual':\n+        shutil.copyfile(\n+            '/tmp/manual_licenses/{dep}/LICENSE'.format(dep=dep),\n+            cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully copied license for {dep} from manual_licenses/{dep}/'\n+            'LICENSE.'.format(dep=dep))\n+      else:  # pull from url\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully pulled license for {dep} from internet.'.format(\n+                dep=dep))\n+\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+      # copy from temp dir to final dir only when either file is available.\n+      if os.listdir(cur_temp_dir):\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print(\n+          'Error occurred when pull license for {dep} from {url}. \\n'\n+          'Error: {error}'.format(dep=dep, url=config, error=e.decode('utf-8')))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  # the script is executed within DockerFile.\n+  license_dir = '/opt/apache/beam/third_party_licenses'\n+  os.makedirs(license_dir)\n+  no_licenses = []\n+\n+  with open('/tmp/dep_urls_py.yaml') as file:\n+    dep_config = yaml.full_load(file)\n+\n+  dependencies = run_pip_licenses()\n+  # add licenses for pip installed packages.\n+  # try to pull licenses with pip-licenses tool first, if no license pulled,\n+  # then pull from URLs.\n+  for dep in dependencies:\n+    if not (copy_license_files(dep) or\n+            pull_from_url(dep['Name'].lower(), dep_config['pip_dependencies'])):\n+      no_licenses.append(dep['Name'].lower())\n+\n+  if no_licenses:\n+    py_ver = '%d.%d' % (sys.version_info[0], sys.version_info[1])\n+    how_to = 'These licenses were not able to be pulled automatically. ' \\\n+             'Please search code source of the dependencies on the internet ' \\\n+             'and add urls to RAW license file at sdks/python/container/' \\\n+             'license_scripts/dep_urls_py.yaml for each missing license ' \\\n+             'and rerun the test. If no such urls can be found, you need ' \\\n+             'to manually add LICENSE and NOTICE (if possible) files at ' \\", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxMTczNg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399611736", "bodyText": "I would slightly reword this: Could not retrieve licences for packages: ... in Python ... environment . ...", "author": "tvalentyn", "createdAt": "2020-03-28T03:09:30Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      elif config['license'] == 'manual':\n+        shutil.copyfile(\n+            '/tmp/manual_licenses/{dep}/LICENSE'.format(dep=dep),\n+            cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully copied license for {dep} from manual_licenses/{dep}/'\n+            'LICENSE.'.format(dep=dep))\n+      else:  # pull from url\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully pulled license for {dep} from internet.'.format(\n+                dep=dep))\n+\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+      # copy from temp dir to final dir only when either file is available.\n+      if os.listdir(cur_temp_dir):\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print(\n+          'Error occurred when pull license for {dep} from {url}. \\n'\n+          'Error: {error}'.format(dep=dep, url=config, error=e.decode('utf-8')))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  # the script is executed within DockerFile.\n+  license_dir = '/opt/apache/beam/third_party_licenses'\n+  os.makedirs(license_dir)\n+  no_licenses = []\n+\n+  with open('/tmp/dep_urls_py.yaml') as file:\n+    dep_config = yaml.full_load(file)\n+\n+  dependencies = run_pip_licenses()\n+  # add licenses for pip installed packages.\n+  # try to pull licenses with pip-licenses tool first, if no license pulled,\n+  # then pull from URLs.\n+  for dep in dependencies:\n+    if not (copy_license_files(dep) or\n+            pull_from_url(dep['Name'].lower(), dep_config['pip_dependencies'])):\n+      no_licenses.append(dep['Name'].lower())\n+\n+  if no_licenses:\n+    py_ver = '%d.%d' % (sys.version_info[0], sys.version_info[1])\n+    how_to = 'These licenses were not able to be pulled automatically. ' \\", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxMTkwOA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399611908", "bodyText": "Have you tested that this error blocks container build?", "author": "tvalentyn", "createdAt": "2020-03-28T03:11:48Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      elif config['license'] == 'manual':\n+        shutil.copyfile(\n+            '/tmp/manual_licenses/{dep}/LICENSE'.format(dep=dep),\n+            cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully copied license for {dep} from manual_licenses/{dep}/'\n+            'LICENSE.'.format(dep=dep))\n+      else:  # pull from url\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully pulled license for {dep} from internet.'.format(\n+                dep=dep))\n+\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+      # copy from temp dir to final dir only when either file is available.\n+      if os.listdir(cur_temp_dir):\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print(\n+          'Error occurred when pull license for {dep} from {url}. \\n'\n+          'Error: {error}'.format(dep=dep, url=config, error=e.decode('utf-8')))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  # the script is executed within DockerFile.\n+  license_dir = '/opt/apache/beam/third_party_licenses'\n+  os.makedirs(license_dir)\n+  no_licenses = []\n+\n+  with open('/tmp/dep_urls_py.yaml') as file:\n+    dep_config = yaml.full_load(file)\n+\n+  dependencies = run_pip_licenses()\n+  # add licenses for pip installed packages.\n+  # try to pull licenses with pip-licenses tool first, if no license pulled,\n+  # then pull from URLs.\n+  for dep in dependencies:\n+    if not (copy_license_files(dep) or\n+            pull_from_url(dep['Name'].lower(), dep_config['pip_dependencies'])):\n+      no_licenses.append(dep['Name'].lower())\n+\n+  if no_licenses:\n+    py_ver = '%d.%d' % (sys.version_info[0], sys.version_info[1])\n+    how_to = 'These licenses were not able to be pulled automatically. ' \\\n+             'Please search code source of the dependencies on the internet ' \\\n+             'and add urls to RAW license file at sdks/python/container/' \\\n+             'license_scripts/dep_urls_py.yaml for each missing license ' \\\n+             'and rerun the test. If no such urls can be found, you need ' \\\n+             'to manually add LICENSE and NOTICE (if possible) files at ' \\\n+             'sdks/python/container/license_scripts/manual_licenses/{dep}/ ' \\\n+             'and add entries to sdks/python/container/license_scripts/' \\\n+             'dep_urls_py.yaml.'\n+    raise RuntimeError(\n+        'Some dependencies are missing licenses at python{py_ver} environment. '", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MjA4NQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400542085", "bodyText": "Yep, here is a link to the log when it fails: https://builds.apache.org/job/beam_PreCommit_PythonDocker_Commit/1/console", "author": "Hannah-Jiang", "createdAt": "2020-03-30T22:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxMTkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYxNDkwNA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399614904", "bodyText": "I think this is the license for nose.\nhttps://github.com/nose-devs/nose/blob/master/lgpl.txt", "author": "tvalentyn", "createdAt": "2020-03-28T03:48:50Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,116 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # this is a list of packages whose license cannot be pulled with pip-licenses tool.\n+  # pip-licenses scans site-packages/ directory to get a list of packages installed.\n+  # for the packages who missing licenses in distributed package should be pulled from a url or manually added.\n+  # An entry is needed if license cannot be pull with pip-licenses in ANY Python environment.\n+\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license, \"skip\" or \"manual\"\n+  #     # skip: don't add license for the dependency\n+  #     # manual: license is manually added. The license is copied from manual_licenses/{dep}/LICENSE.\n+  #   notice: it's optional, url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  appdirs:\n+    license: \"https://raw.githubusercontent.com/ActiveState/appdirs/master/LICENSE.txt\"\n+  avro:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  avro-python3:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  backports.weakref:\n+    license: \"https://raw.githubusercontent.com/PiDelport/backports.weakref/master/LICENSE\"\n+  chardet:\n+    license: \"https://raw.githubusercontent.com/chardet/chardet/master/LICENSE\"\n+  certifi:\n+    license: \"https://raw.githubusercontent.com/certifi/python-certifi/master/LICENSE\"\n+  cython:\n+    license: \"https://raw.githubusercontent.com/cython/cython/master/LICENSE.txt\"\n+  enum34:\n+    license: \"manual\"\n+  fastavro:\n+    license: \"https://raw.githubusercontent.com/fastavro/fastavro/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/fastavro/fastavro/master/NOTICE.txt\"\n+  funcsigs:\n+    license: \"https://raw.githubusercontent.com/aliles/funcsigs/master/LICENSE\"\n+  futures:\n+    license: \"https://raw.githubusercontent.com/agronholm/pythonfutures/master/LICENSE\"\n+  google-apitools:\n+    license: \"https://raw.githubusercontent.com/google/apitools/master/LICENSE\"\n+  googledatastore:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/google-cloud-datastore/master/LICENSE\"\n+  grpcio:\n+    license: \"https://raw.githubusercontent.com/grpc/grpc/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/grpc/grpc/master/NOTICE.txt\"\n+  grpcio-gcp:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/grpc-gcp-python/master/LICENSE\"\n+  guppy:\n+    license: \"https://raw.githubusercontent.com/joshwcomeau/guppy/master/LICENSE.md\"\n+  guppy3:\n+    license: \"https://raw.githubusercontent.com/zhuyifei1999/guppy3/master/LICENSE\"\n+  h5py:\n+    license: \"https://raw.githubusercontent.com/h5py/h5py/master/LICENSE\"\n+  hdfs:\n+    license: \"https://raw.githubusercontent.com/mtth/hdfs/master/LICENSE\"\n+  httplib2:\n+    license: \"https://raw.githubusercontent.com/httplib2/httplib2/master/LICENSE\"\n+  mock:\n+    license: \"https://raw.githubusercontent.com/testing-cabal/mock/master/LICENSE.txt\"\n+  monotonic:\n+    license: \"https://raw.githubusercontent.com/atdt/monotonic/master/LICENSE\"\n+  nose:\n+    license: \"https://raw.githubusercontent.com/nose-devs/nose2/master/license.txt\"", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxMjg0Ng==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399712846", "bodyText": "Consider following wording:\n  # This is a list of packages whose license files cannot be pulled with pip-licenses tool.\n  # pip-licenses scans site-packages/ directory to get a list of packages installed and their licenses.\n  # For packages that do not include licenses in their distribution, we need to manually \n  # provide license files in ./manual_licences/, or provide a url where they can be downloaded from.\n  # We need to manually configure licenses for a dependency if pip-licenses fails to retrieve\n  # the license file under any Python version we support.", "author": "tvalentyn", "createdAt": "2020-03-28T21:40:41Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,116 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # this is a list of packages whose license cannot be pulled with pip-licenses tool.", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNDExOA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399714118", "bodyText": "Consider adding comment below where applicable:\n# TODO(BEAM-8371): License for this dependency cannot be automatically retrieved on Python 2.", "author": "tvalentyn", "createdAt": "2020-03-28T21:54:54Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,116 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # this is a list of packages whose license cannot be pulled with pip-licenses tool.\n+  # pip-licenses scans site-packages/ directory to get a list of packages installed.\n+  # for the packages who missing licenses in distributed package should be pulled from a url or manually added.\n+  # An entry is needed if license cannot be pull with pip-licenses in ANY Python environment.\n+\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license, \"skip\" or \"manual\"\n+  #     # skip: don't add license for the dependency\n+  #     # manual: license is manually added. The license is copied from manual_licenses/{dep}/LICENSE.\n+  #   notice: it's optional, url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  appdirs:", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNDU2Nw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399714567", "bodyText": "I think this is the license actually (looks like one of BSD licenses), so we can switch this to:\nlicense: \"https://raw.githubusercontent.com/google/python-gflags/master/COPYING\"", "author": "tvalentyn", "createdAt": "2020-03-28T21:59:55Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,116 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # this is a list of packages whose license cannot be pulled with pip-licenses tool.\n+  # pip-licenses scans site-packages/ directory to get a list of packages installed.\n+  # for the packages who missing licenses in distributed package should be pulled from a url or manually added.\n+  # An entry is needed if license cannot be pull with pip-licenses in ANY Python environment.\n+\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license, \"skip\" or \"manual\"\n+  #     # skip: don't add license for the dependency\n+  #     # manual: license is manually added. The license is copied from manual_licenses/{dep}/LICENSE.\n+  #   notice: it's optional, url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  appdirs:\n+    license: \"https://raw.githubusercontent.com/ActiveState/appdirs/master/LICENSE.txt\"\n+  avro:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  avro-python3:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  backports.weakref:\n+    license: \"https://raw.githubusercontent.com/PiDelport/backports.weakref/master/LICENSE\"\n+  chardet:\n+    license: \"https://raw.githubusercontent.com/chardet/chardet/master/LICENSE\"\n+  certifi:\n+    license: \"https://raw.githubusercontent.com/certifi/python-certifi/master/LICENSE\"\n+  cython:\n+    license: \"https://raw.githubusercontent.com/cython/cython/master/LICENSE.txt\"\n+  enum34:\n+    license: \"manual\"\n+  fastavro:\n+    license: \"https://raw.githubusercontent.com/fastavro/fastavro/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/fastavro/fastavro/master/NOTICE.txt\"\n+  funcsigs:\n+    license: \"https://raw.githubusercontent.com/aliles/funcsigs/master/LICENSE\"\n+  futures:\n+    license: \"https://raw.githubusercontent.com/agronholm/pythonfutures/master/LICENSE\"\n+  google-apitools:\n+    license: \"https://raw.githubusercontent.com/google/apitools/master/LICENSE\"\n+  googledatastore:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/google-cloud-datastore/master/LICENSE\"\n+  grpcio:\n+    license: \"https://raw.githubusercontent.com/grpc/grpc/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/grpc/grpc/master/NOTICE.txt\"\n+  grpcio-gcp:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/grpc-gcp-python/master/LICENSE\"\n+  guppy:\n+    license: \"https://raw.githubusercontent.com/joshwcomeau/guppy/master/LICENSE.md\"\n+  guppy3:\n+    license: \"https://raw.githubusercontent.com/zhuyifei1999/guppy3/master/LICENSE\"\n+  h5py:\n+    license: \"https://raw.githubusercontent.com/h5py/h5py/master/LICENSE\"\n+  hdfs:\n+    license: \"https://raw.githubusercontent.com/mtth/hdfs/master/LICENSE\"\n+  httplib2:\n+    license: \"https://raw.githubusercontent.com/httplib2/httplib2/master/LICENSE\"\n+  mock:\n+    license: \"https://raw.githubusercontent.com/testing-cabal/mock/master/LICENSE.txt\"\n+  monotonic:\n+    license: \"https://raw.githubusercontent.com/atdt/monotonic/master/LICENSE\"\n+  nose:\n+    license: \"https://raw.githubusercontent.com/nose-devs/nose2/master/license.txt\"\n+  numpy:\n+    license: \"https://raw.githubusercontent.com/numpy/numpy/master/LICENSE.txt\"\n+  oauth2client:\n+    license: \"https://raw.githubusercontent.com/googleapis/oauth2client/master/LICENSE\"\n+  pandas:\n+    license: \"https://raw.githubusercontent.com/pandas-dev/pandas/master/LICENSE\"\n+  pathlib2:\n+    license: \"https://raw.githubusercontent.com/mcmtroffaes/pathlib2/develop/LICENSE.rst\"\n+  protobuf:\n+    license: \"https://raw.githubusercontent.com/protocolbuffers/protobuf/master/LICENSE\"\n+  protorpc:\n+    license: \"https://raw.githubusercontent.com/google/protorpc/master/LICENSE\"\n+  pyarrow:\n+    license: \"https://raw.githubusercontent.com/apache/arrow/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/arrow/master/NOTICE.txt\"\n+  pyhamcrest:\n+    license: \"https://raw.githubusercontent.com/hamcrest/PyHamcrest/master/LICENSE.txt\"\n+  pymongo:\n+    license: \"https://raw.githubusercontent.com/mongodb/mongo-python-driver/master/LICENSE\"\n+  python-gflags:\n+    license: \"manual\"\n+    notice: \"https://raw.githubusercontent.com/google/python-gflags/master/COPYING\"", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNTQ3NQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399715475", "bodyText": "Consider setting pip-licences<3.0.0 to use the most recent version within a major version. Looks like this project uses semantic versioning, so we may want to pick up newer versions once they are released.\"", "author": "tvalentyn", "createdAt": "2020-03-28T22:09:09Z", "path": "sdks/python/container/license_scripts/license_requirements.txt", "diffHunk": "@@ -0,0 +1,23 @@\n+###############################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+###############################################################################\n+\n+# These packages are needed to run pull_license_py.py.\n+\n+wget==3.2\n+pip-licenses==2.1.1;python_version>=\"3.5\"", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNTg4MA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399715880", "bodyText": "This file does not include the copyright notice, see: https://bitbucket.org/stoneleaf/enum34/raw/c208549a93b71b948ff7bbdfd29dce8f85527916/enum/LICENSE", "author": "tvalentyn", "createdAt": "2020-03-28T22:13:31Z", "path": "sdks/python/container/license_scripts/manual_licenses/enum34/LICENSE", "diffHunk": "@@ -0,0 +1,9 @@\n+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n+\n+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3MzU3OA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400473578", "bodyText": "We can use this link to download? changed code accordingly.", "author": "Hannah-Jiang", "createdAt": "2020-03-30T20:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNTg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNjUxMA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399716510", "bodyText": "The copyright notice is missing - see the pip-license tool output on Py3 which includes: Copyright (c) 2008-2011 Volvox Development Team", "author": "tvalentyn", "createdAt": "2020-03-28T22:20:37Z", "path": "sdks/python/container/license_scripts/manual_licenses/termcolor/LICENSE", "diffHunk": "@@ -0,0 +1,5 @@\n+Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxNjU0OA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399716548", "bodyText": "License & notice files are the same here, see also comment above - we can remove this from 'manual'.", "author": "tvalentyn", "createdAt": "2020-03-28T22:21:21Z", "path": "sdks/python/container/license_scripts/manual_licenses/python-gflags/LICENSE", "diffHunk": "@@ -0,0 +1,9 @@\n+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxOTA0Mw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399719043", "bodyText": "Looks like we should configure license url for pip-licenses, since we install it also.", "author": "tvalentyn", "createdAt": "2020-03-28T22:51:24Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,116 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # this is a list of packages whose license cannot be pulled with pip-licenses tool.\n+  # pip-licenses scans site-packages/ directory to get a list of packages installed.\n+  # for the packages who missing licenses in distributed package should be pulled from a url or manually added.\n+  # An entry is needed if license cannot be pull with pip-licenses in ANY Python environment.\n+\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license, \"skip\" or \"manual\"\n+  #     # skip: don't add license for the dependency\n+  #     # manual: license is manually added. The license is copied from manual_licenses/{dep}/LICENSE.\n+  #   notice: it's optional, url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  appdirs:\n+    license: \"https://raw.githubusercontent.com/ActiveState/appdirs/master/LICENSE.txt\"\n+  avro:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  avro-python3:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  backports.weakref:\n+    license: \"https://raw.githubusercontent.com/PiDelport/backports.weakref/master/LICENSE\"\n+  chardet:\n+    license: \"https://raw.githubusercontent.com/chardet/chardet/master/LICENSE\"\n+  certifi:\n+    license: \"https://raw.githubusercontent.com/certifi/python-certifi/master/LICENSE\"\n+  cython:\n+    license: \"https://raw.githubusercontent.com/cython/cython/master/LICENSE.txt\"\n+  enum34:\n+    license: \"manual\"\n+  fastavro:\n+    license: \"https://raw.githubusercontent.com/fastavro/fastavro/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/fastavro/fastavro/master/NOTICE.txt\"\n+  funcsigs:\n+    license: \"https://raw.githubusercontent.com/aliles/funcsigs/master/LICENSE\"\n+  futures:\n+    license: \"https://raw.githubusercontent.com/agronholm/pythonfutures/master/LICENSE\"\n+  google-apitools:\n+    license: \"https://raw.githubusercontent.com/google/apitools/master/LICENSE\"\n+  googledatastore:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/google-cloud-datastore/master/LICENSE\"\n+  grpcio:\n+    license: \"https://raw.githubusercontent.com/grpc/grpc/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/grpc/grpc/master/NOTICE.txt\"\n+  grpcio-gcp:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/grpc-gcp-python/master/LICENSE\"\n+  guppy:\n+    license: \"https://raw.githubusercontent.com/joshwcomeau/guppy/master/LICENSE.md\"\n+  guppy3:\n+    license: \"https://raw.githubusercontent.com/zhuyifei1999/guppy3/master/LICENSE\"\n+  h5py:\n+    license: \"https://raw.githubusercontent.com/h5py/h5py/master/LICENSE\"\n+  hdfs:\n+    license: \"https://raw.githubusercontent.com/mtth/hdfs/master/LICENSE\"\n+  httplib2:\n+    license: \"https://raw.githubusercontent.com/httplib2/httplib2/master/LICENSE\"\n+  mock:\n+    license: \"https://raw.githubusercontent.com/testing-cabal/mock/master/LICENSE.txt\"\n+  monotonic:\n+    license: \"https://raw.githubusercontent.com/atdt/monotonic/master/LICENSE\"\n+  nose:\n+    license: \"https://raw.githubusercontent.com/nose-devs/nose2/master/license.txt\"\n+  numpy:\n+    license: \"https://raw.githubusercontent.com/numpy/numpy/master/LICENSE.txt\"\n+  oauth2client:\n+    license: \"https://raw.githubusercontent.com/googleapis/oauth2client/master/LICENSE\"\n+  pandas:\n+    license: \"https://raw.githubusercontent.com/pandas-dev/pandas/master/LICENSE\"\n+  pathlib2:\n+    license: \"https://raw.githubusercontent.com/mcmtroffaes/pathlib2/develop/LICENSE.rst\"\n+  protobuf:", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNTkyNA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400215924", "bodyText": "Alternative: we uninstall pip-licenses. Note that we need to do this in the same RUN command that installs it, otherwise it will not be deleted from the container. This way we can get rid of license_requirements.txt entriely.\nCOPY target/dep_urls_py.yaml target/pull_licenses_py.py /tmp/\nRUN pip install -v /opt/apache/beam/tars/apache-beam.tar.gz[gcp] && \\\n   pip install pip-licenses && \\  \n   python /tmp/pull_licenses_py.py && \\\n   pip uninstall pip-licenses && \\\n   rm -rf /root/.cache/pip\n\n# Log complete list of what exact packages and versions are installed.\nRUN pip freeze --all", "author": "tvalentyn", "createdAt": "2020-03-30T14:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxOTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2NzM0NQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400467345", "bodyText": "I prefer the alternative method you suggested. Code changed to implement it.", "author": "Hannah-Jiang", "createdAt": "2020-03-30T20:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxOTA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxOTgxMw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399719813", "bodyText": "Tenacity documentation says @retry will retry whenever an Exception occurs until a value is returned. So I think in this case, the function will return a value False, and we will not retry anymore.", "author": "tvalentyn", "createdAt": "2020-03-28T23:00:40Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwMDQwNg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400500406", "bodyText": "I changed code not return False (return True only when succeed) to trigger the retry.", "author": "Hannah-Jiang", "createdAt": "2020-03-30T21:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcxOTgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMDI4NA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399720284", "bodyText": "It may be better to move all constants to the beginning of the script and rename them all caps, e.g. LICENSE_DIR.", "author": "tvalentyn", "createdAt": "2020-03-28T23:06:47Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      elif config['license'] == 'manual':\n+        shutil.copyfile(\n+            '/tmp/manual_licenses/{dep}/LICENSE'.format(dep=dep),\n+            cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully copied license for {dep} from manual_licenses/{dep}/'\n+            'LICENSE.'.format(dep=dep))\n+      else:  # pull from url\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully pulled license for {dep} from internet.'.format(\n+                dep=dep))\n+\n+      # notice is optional.\n+      if 'notice' in config:\n+        wget.download(config['notice'], cur_temp_dir + '/NOTICE')\n+      # copy from temp dir to final dir only when either file is available.\n+      if os.listdir(cur_temp_dir):\n+        shutil.copytree(cur_temp_dir, dest_dir)\n+      result = True\n+    except Exception as e:\n+      print(\n+          'Error occurred when pull license for {dep} from {url}. \\n'\n+          'Error: {error}'.format(dep=dep, url=config, error=e.decode('utf-8')))\n+      result = False\n+    finally:\n+      shutil.rmtree(cur_temp_dir)\n+      return result\n+  else:\n+    return False\n+\n+\n+if __name__ == \"__main__\":\n+  # the script is executed within DockerFile.\n+  license_dir = '/opt/apache/beam/third_party_licenses'", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyMzE5MQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399723191", "bodyText": "We can simplify this to: return subprocess.check_output(command.split()).decode('utf-8')", "author": "tvalentyn", "createdAt": "2020-03-28T23:43:37Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyNDIzOA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399724238", "bodyText": "Let's print a meaningful message (could not copy dependency x from y).\nAlso traceback.print_exc()  would preserve the stacktrace unlike print(e), so it will be easier to debug.", "author": "tvalentyn", "createdAt": "2020-03-28T23:57:21Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyNDYyOQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399724629", "bodyText": "What about NOTICE files? I am not sure if they are necessary, but just want to call out that they won't be copied.", "author": "tvalentyn", "createdAt": "2020-03-29T00:01:52Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NjM5NQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400486395", "bodyText": "They are needed if NOTICE is part of the package. However, pip-licenses scan license file only, so at the moment, only LICENSE is available.", "author": "Hannah-Jiang", "createdAt": "2020-03-30T20:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcyNDYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0NzIzOQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r399747239", "bodyText": "Consider changing the semantic of dep_urls_py.yaml so that the keys in the inner dictionary are the actual file names, such as 'LICENSE', 'NOTICE',... and values are the path. The path can be http://, local (retrieved from pip-licenses), or local path. Manual licenses that are copied in Beam repo can be referenced via path like: {'LICENSE': '/tmp/manual_licences/enum34/LICENSE'}. So the flow might look similar to:\npreconfigured_licenses = yaml.full_load(...)\ninstalled_packages = run_pip_licenses()\n\n# Remove self-dependency\ndel installed_packages['apache-beam']\ndep_licenses = {\n    # We will assemble a map of license files for each dependency:\n    # 'dependency1 : {'LICENSE' : '/path/to/LICENSE'} \n    # 'dependency2' : {'NOTICE' : 'http://path.to/NOTICE.txt'}\n    # etc...\n}\n\n# pip-licences will not include itself in the list, but we still install it in containers.\ndep_licenses['pip-licenses'] = dep_licenses_manual['pip-licenses']\n\nfor dep in installed_packages:\n  dep_licenses[dep] = {}\n\n  if dep in preconfigured_licenses:\n    dep_licenses[dep] = preconfigured_licenses[dep]\n\n  # Prefer the actual license file retrieved from site-packages, if available. \n  if installed_packages[dep]['LicenseFile'].lowercase() != \"unknown\":\n    dep_licenses[dep]['LICENSE'] = installed_packages[dep]['LicenseFile']\n    # TODO: Also retrieve NOTICE files in the future? I am still not sure if this is necessary...\n\nfor dep, license_files in dep_licenses.items():\n  if not license_files:\n     ... missing license ...\n  else:\n     for name, path in license_files.items():\n        if path.startswith('http'):\n           path = save_to_tempfile(path)\n        # save the 'path' under  'name' in the folder for 'dep'\n\nTake this as a suggestion, you can keep current logic if you think it's simpler.", "author": "tvalentyn", "createdAt": "2020-03-29T05:19:27Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,116 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # this is a list of packages whose license cannot be pulled with pip-licenses tool.\n+  # pip-licenses scans site-packages/ directory to get a list of packages installed.\n+  # for the packages who missing licenses in distributed package should be pulled from a url or manually added.\n+  # An entry is needed if license cannot be pull with pip-licenses in ANY Python environment.\n+\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license, \"skip\" or \"manual\"\n+  #     # skip: don't add license for the dependency\n+  #     # manual: license is manually added. The license is copied from manual_licenses/{dep}/LICENSE.\n+  #   notice: it's optional, url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  appdirs:\n+    license: \"https://raw.githubusercontent.com/ActiveState/appdirs/master/LICENSE.txt\"\n+  avro:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  avro-python3:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  backports.weakref:\n+    license: \"https://raw.githubusercontent.com/PiDelport/backports.weakref/master/LICENSE\"\n+  chardet:\n+    license: \"https://raw.githubusercontent.com/chardet/chardet/master/LICENSE\"\n+  certifi:\n+    license: \"https://raw.githubusercontent.com/certifi/python-certifi/master/LICENSE\"\n+  cython:\n+    license: \"https://raw.githubusercontent.com/cython/cython/master/LICENSE.txt\"\n+  enum34:\n+    license: \"manual\"\n+  fastavro:\n+    license: \"https://raw.githubusercontent.com/fastavro/fastavro/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/fastavro/fastavro/master/NOTICE.txt\"\n+  funcsigs:\n+    license: \"https://raw.githubusercontent.com/aliles/funcsigs/master/LICENSE\"\n+  futures:\n+    license: \"https://raw.githubusercontent.com/agronholm/pythonfutures/master/LICENSE\"\n+  google-apitools:\n+    license: \"https://raw.githubusercontent.com/google/apitools/master/LICENSE\"\n+  googledatastore:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/google-cloud-datastore/master/LICENSE\"\n+  grpcio:\n+    license: \"https://raw.githubusercontent.com/grpc/grpc/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/grpc/grpc/master/NOTICE.txt\"\n+  grpcio-gcp:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/grpc-gcp-python/master/LICENSE\"\n+  guppy:\n+    license: \"https://raw.githubusercontent.com/joshwcomeau/guppy/master/LICENSE.md\"\n+  guppy3:\n+    license: \"https://raw.githubusercontent.com/zhuyifei1999/guppy3/master/LICENSE\"\n+  h5py:\n+    license: \"https://raw.githubusercontent.com/h5py/h5py/master/LICENSE\"\n+  hdfs:\n+    license: \"https://raw.githubusercontent.com/mtth/hdfs/master/LICENSE\"\n+  httplib2:\n+    license: \"https://raw.githubusercontent.com/httplib2/httplib2/master/LICENSE\"\n+  mock:\n+    license: \"https://raw.githubusercontent.com/testing-cabal/mock/master/LICENSE.txt\"\n+  monotonic:\n+    license: \"https://raw.githubusercontent.com/atdt/monotonic/master/LICENSE\"\n+  nose:\n+    license: \"https://raw.githubusercontent.com/nose-devs/nose2/master/license.txt\"\n+  numpy:\n+    license: \"https://raw.githubusercontent.com/numpy/numpy/master/LICENSE.txt\"\n+  oauth2client:\n+    license: \"https://raw.githubusercontent.com/googleapis/oauth2client/master/LICENSE\"\n+  pandas:\n+    license: \"https://raw.githubusercontent.com/pandas-dev/pandas/master/LICENSE\"\n+  pathlib2:\n+    license: \"https://raw.githubusercontent.com/mcmtroffaes/pathlib2/develop/LICENSE.rst\"\n+  protobuf:\n+    license: \"https://raw.githubusercontent.com/protocolbuffers/protobuf/master/LICENSE\"\n+  protorpc:\n+    license: \"https://raw.githubusercontent.com/google/protorpc/master/LICENSE\"\n+  pyarrow:\n+    license: \"https://raw.githubusercontent.com/apache/arrow/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/arrow/master/NOTICE.txt\"\n+  pyhamcrest:\n+    license: \"https://raw.githubusercontent.com/hamcrest/PyHamcrest/master/LICENSE.txt\"\n+  pymongo:\n+    license: \"https://raw.githubusercontent.com/mongodb/mongo-python-driver/master/LICENSE\"\n+  python-gflags:\n+    license: \"manual\"\n+    notice: \"https://raw.githubusercontent.com/google/python-gflags/master/COPYING\"\n+  pyvcf:\n+    license: \"https://raw.githubusercontent.com/jamescasbon/PyVCF/master/LICENSE\"\n+  scipy:\n+    license: \"https://raw.githubusercontent.com/scipy/scipy/master/LICENSE.txt\"\n+  termcolor:\n+    license: \"manual\"", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3NzIwNA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400177204", "bodyText": "RUN pip freeze --all should be the last command.", "author": "tvalentyn", "createdAt": "2020-03-30T13:09:23Z", "path": "sdks/python/container/Dockerfile", "diffHunk": "@@ -58,9 +58,17 @@ RUN pip install -v /opt/apache/beam/tars/apache-beam.tar.gz[gcp] && \\\n # Log complete list of what exact packages and versions are installed.\n RUN pip freeze --all", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwNDI5NA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400204294", "bodyText": "You can use a native python mechanism to avoid a dependency on wget (which is not maintained). See an example here for how to make it compatible on Py2 and 3:\n\n  \n    \n      beam/sdks/python/apache_beam/utils/subprocess_server.py\n    \n    \n         Line 227\n      in\n      55d374e\n    \n    \n    \n    \n\n        \n          \n           shutil.copyfileobj(url_read, jar_write, length=1 << 20) \n        \n    \n  \n\n.\nIt should also work with copying local files, if you prepend the path with \"file://\", so you can avoid branching.", "author": "tvalentyn", "createdAt": "2020-03-30T13:46:59Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,153 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"A script to pull licenses for Python.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import wget\n+import yaml\n+\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+\n+\n+def run_bash_command(command):\n+  process = subprocess.Popen(\n+      command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+  result, error = process.communicate()\n+  if error:\n+    raise RuntimeError(\n+        'Error occurred when running a bash command.',\n+        'command: {command}, error: {error}'.format(\n+            command=command, error=error.decode('utf-8')),\n+    )\n+  return result.decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([license_dir, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(e)\n+    return False\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs.keys():\n+    config = configs[dep]\n+    dest_dir = '/'.join([license_dir, dep])\n+    cur_temp_dir = 'temp_license_' + dep\n+    os.mkdir(cur_temp_dir)\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      elif config['license'] == 'manual':\n+        shutil.copyfile(\n+            '/tmp/manual_licenses/{dep}/LICENSE'.format(dep=dep),\n+            cur_temp_dir + '/LICENSE')\n+        print(\n+            'Successfully copied license for {dep} from manual_licenses/{dep}/'\n+            'LICENSE.'.format(dep=dep))\n+      else:  # pull from url\n+        wget.download(config['license'], cur_temp_dir + '/LICENSE')", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxODYxNg==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400218616", "bodyText": "Another possibility is to link the licenses for a couple 'manual' dependencies using a URL to Beam repo. This will make the treatment of all packages more uniform. but we would need to check licenses in the repo first.", "author": "tvalentyn", "createdAt": "2020-03-30T14:05:54Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,116 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # this is a list of packages whose license cannot be pulled with pip-licenses tool.\n+  # pip-licenses scans site-packages/ directory to get a list of packages installed.\n+  # for the packages who missing licenses in distributed package should be pulled from a url or manually added.\n+  # An entry is needed if license cannot be pull with pip-licenses in ANY Python environment.\n+\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license, \"skip\" or \"manual\"\n+  #     # skip: don't add license for the dependency\n+  #     # manual: license is manually added. The license is copied from manual_licenses/{dep}/LICENSE.\n+  #   notice: it's optional, url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  appdirs:\n+    license: \"https://raw.githubusercontent.com/ActiveState/appdirs/master/LICENSE.txt\"\n+  avro:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  avro-python3:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  backports.weakref:\n+    license: \"https://raw.githubusercontent.com/PiDelport/backports.weakref/master/LICENSE\"\n+  chardet:\n+    license: \"https://raw.githubusercontent.com/chardet/chardet/master/LICENSE\"\n+  certifi:\n+    license: \"https://raw.githubusercontent.com/certifi/python-certifi/master/LICENSE\"\n+  cython:\n+    license: \"https://raw.githubusercontent.com/cython/cython/master/LICENSE.txt\"\n+  enum34:\n+    license: \"manual\"", "originalCommit": "7ead962c020d9127079edd406a6a5b2963a5ae91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "69e865ba11a0253f07359800435ee8d301dd6d17", "url": "https://github.com/apache/beam/commit/69e865ba11a0253f07359800435ee8d301dd6d17", "message": "fix comments", "committedDate": "2020-03-31T01:44:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MjUxOQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r400642519", "bodyText": "What would be retry the intervals with this spec?\nI think it's going to be max(2, 30) = 30, max(4, 30) = 30, ..., max(32, 30) = 32, then 64, 128, then 180, 180, 180, .. indefinitely.\nI would have an initial retry faster, and then increase the delay, and give up after a few attempts - perhaps somebody made a typo, so it's better to find out sooner than later.\nWDYT about:\n@retry(reraise=True, wait=wait_exponential(multiplier=2), stop=stop_after_attempt(5))\nThis should translate to :  4s, 8s, 16s, 32s -> timeout.\nreraise will capture the original stacktrace, instead of throwing RetryError.", "author": "tvalentyn", "createdAt": "2020-03-31T04:53:47Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -63,11 +61,13 @@ def copy_license_files(dep):\n             dep=name))\n     return True\n   except Exception as e:\n-    print(e)\n-    return False\n+    print(\n+        'Failed to copy from {source} to {dest}'.format(\n+            source=source_license_file, dest=dest_dir + '/LICENSE'))\n+    traceback.print_exc()\n \n \n-@retry(stop=stop_after_attempt(3))\n+@retry(wait=wait_exponential(multiplier=1, min=30, max=180))", "originalCommit": "69e865ba11a0253f07359800435ee8d301dd6d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjMxMQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401176311", "bodyText": "Since you are catching the exception, tenacity will not know about it.", "author": "tvalentyn", "createdAt": "2020-03-31T19:56:36Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,143 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+A script to pull licenses for Python.\n+The script is executed within Docker.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+import traceback\n+import yaml\n+\n+from future.moves.urllib.request import urlopen\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+from tenacity import wait_exponential\n+\n+LICENSE_DIR = '/opt/apache/beam/third_party_licenses'\n+\n+\n+def run_bash_command(command):\n+  return subprocess.check_output(command.split()).decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([LICENSE_DIR, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:", "originalCommit": "69e865ba11a0253f07359800435ee8d301dd6d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4NzYyOQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401987629", "bodyText": "missing raise", "author": "tvalentyn", "createdAt": "2020-04-02T00:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MDI4OQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401240289", "bodyText": "You can move\n      shutil.rmtree(cur_temp_dir)\n\nto finally block.\nAlso same comment here - you are catching all exceptions, so tenacity will not retry.", "author": "tvalentyn", "createdAt": "2020-03-31T21:58:38Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,143 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+A script to pull licenses for Python.\n+The script is executed within Docker.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+import traceback\n+import yaml\n+\n+from future.moves.urllib.request import urlopen\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+from tenacity import wait_exponential\n+\n+LICENSE_DIR = '/opt/apache/beam/third_party_licenses'\n+\n+\n+def run_bash_command(command):\n+  return subprocess.check_output(command.split()).decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([LICENSE_DIR, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(\n+        'Failed to copy from {source} to {dest}'.format(\n+            source=source_license_file, dest=dest_dir + '/LICENSE'))\n+    traceback.print_exc()\n+\n+\n+@retry(wait=wait_exponential(multiplier=1, min=30, max=180))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs:\n+    config = configs[dep]\n+    dest_dir = '/'.join([LICENSE_DIR, dep])\n+    cur_temp_dir = tempfile.mkdtemp()\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      else:\n+        url_read = urlopen(config['license'])\n+        with open(cur_temp_dir + '/LICENSE', 'wb') as temp_write:\n+          shutil.copyfileobj(url_read, temp_write, length=1 << 20)\n+        print(\n+            'Successfully pulled license for {dep} from {url}.'.format(\n+                dep=dep, url=config['license']))\n+\n+      # notice is optional.\n+      if 'notice' in config:\n+        url_read = urlopen(config['notice'])\n+        with open(cur_temp_dir + '/NOTICE', 'wb') as temp_write:\n+          shutil.copyfileobj(url_read, temp_write, length=1 << 20)\n+\n+      shutil.copytree(cur_temp_dir, dest_dir)\n+      shutil.rmtree(cur_temp_dir)\n+      return True\n+    except Exception as e:\n+      shutil.rmtree(cur_temp_dir)", "originalCommit": "69e865ba11a0253f07359800435ee8d301dd6d17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwNTg4Nw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401905887", "bodyText": "If we want to put this to finally, we need to move the return True at L106 to the finally too, then retry will not be triggered.", "author": "Hannah-Jiang", "createdAt": "2020-04-01T20:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MDI4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk4ODUyNQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401988525", "bodyText": "followed up offline - you don't need to move return statement into finally block.", "author": "tvalentyn", "createdAt": "2020-04-02T00:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MDI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0NDg1NA==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401244854", "bodyText": "COPY is preferred over ADD. Can we remove usages of ADD to reduce cognitive load on people who might think why are we using sometimes COPY and sometimes ADD?\nSee: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy", "author": "tvalentyn", "createdAt": "2020-03-31T22:09:09Z", "path": "sdks/python/container/Dockerfile", "diffHunk": "@@ -51,16 +51,20 @@ RUN ln -s /usr/bin/ccache /usr/local/bin/gcc\n RUN ccache --set-config=sloppiness=file_macro && ccache --set-config=hash_dir=false\n \n COPY target/apache-beam.tar.gz /opt/apache/beam/tars/\n+ADD target/license_scripts /tmp/license_scripts/", "originalCommit": "69e865ba11a0253f07359800435ee8d301dd6d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0OTAxOQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401249019", "bodyText": "FYI length is an optional argument (buffer size). I hope licenses are much smaller than 1 MB.", "author": "tvalentyn", "createdAt": "2020-03-31T22:19:30Z", "path": "sdks/python/container/license_scripts/pull_licenses_py.py", "diffHunk": "@@ -0,0 +1,143 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+A script to pull licenses for Python.\n+The script is executed within Docker.\n+\"\"\"\n+import json\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+import traceback\n+import yaml\n+\n+from future.moves.urllib.request import urlopen\n+from tenacity import retry\n+from tenacity import stop_after_attempt\n+from tenacity import wait_exponential\n+\n+LICENSE_DIR = '/opt/apache/beam/third_party_licenses'\n+\n+\n+def run_bash_command(command):\n+  return subprocess.check_output(command.split()).decode('utf-8')\n+\n+\n+def run_pip_licenses():\n+  command = 'pip-licenses --with-license-file --format=json'\n+  dependencies = run_bash_command(command)\n+  return json.loads(dependencies)\n+\n+\n+@retry(stop=stop_after_attempt(3))\n+def copy_license_files(dep):\n+  source_license_file = dep['LicenseFile']\n+  if source_license_file.lower() == 'unknown':\n+    return False\n+  name = dep['Name'].lower()\n+  dest_dir = '/'.join([LICENSE_DIR, name])\n+  try:\n+    os.mkdir(dest_dir)\n+    shutil.copy(source_license_file, dest_dir + '/LICENSE')\n+    print(\n+        'Successfully pulled license for {dep} with pip-licenses.'.format(\n+            dep=name))\n+    return True\n+  except Exception as e:\n+    print(\n+        'Failed to copy from {source} to {dest}'.format(\n+            source=source_license_file, dest=dest_dir + '/LICENSE'))\n+    traceback.print_exc()\n+\n+\n+@retry(wait=wait_exponential(multiplier=1, min=30, max=180))\n+def pull_from_url(dep, configs):\n+  '''\n+  :param dep: name of a dependency\n+  :param configs: a dict from dep_urls_py.yaml\n+  :return: boolean\n+\n+  It downloads files form urls to a temp directory first in order to avoid\n+  to deal with any temp files. It helps keep clean final directory.\n+  '''\n+  if dep in configs:\n+    config = configs[dep]\n+    dest_dir = '/'.join([LICENSE_DIR, dep])\n+    cur_temp_dir = tempfile.mkdtemp()\n+\n+    try:\n+      if config['license'] == 'skip':\n+        print('Skip pulling license for ', dep)\n+      else:\n+        url_read = urlopen(config['license'])\n+        with open(cur_temp_dir + '/LICENSE', 'wb') as temp_write:\n+          shutil.copyfileobj(url_read, temp_write, length=1 << 20)", "originalCommit": "69e865ba11a0253f07359800435ee8d301dd6d17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTUxNw==", "url": "https://github.com/apache/beam/pull/11067#discussion_r401991517", "bodyText": "FWIW, I think we can remove 'nose' from our containers. I don't see a reason why we include it in \n  \n    \n      beam/sdks/python/container/base_image_requirements.txt\n    \n    \n         Line 47\n      in\n      296e94b\n    \n    \n    \n    \n\n        \n          \n           # Setup packages \n        \n    \n  \n\n. It's a test-only dependency.", "author": "tvalentyn", "createdAt": "2020-04-02T00:47:22Z", "path": "sdks/python/container/license_scripts/dep_urls_py.yaml", "diffHunk": "@@ -0,0 +1,118 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+pip_dependencies:\n+  # This is a list of packages whose license files cannot be pulled with pip-licenses tool.\n+  # pip-licenses scans site-packages/ directory to get a list of packages installed and their licenses.\n+  # For packages that do not include licenses in their distribution, we need to manually\n+  # provide license files in ./manual_licences/, or provide a url where they can be downloaded from.\n+  # We need to manually configure licenses for a dependency if pip-licenses fails to retrieve\n+  # the license file under any Python version we support.\n+\n+  # template:\n+  # dependency_name:\n+  #   license: url_to_license or \"skip\"\n+  #     # skip: don't add license for the dependency\n+  #     # url_to_license: a url to source code (https://...) or a local file (file://...)\n+  #   notice: it's optional, url_to_notice\n+  apache-beam:\n+    license: \"skip\" # don't include self dependency.\n+  # TODO(BEAM-8371): License for this dependency cannot be automatically retrieved on Python 2.\n+  appdirs:\n+    license: \"https://raw.githubusercontent.com/ActiveState/appdirs/master/LICENSE.txt\"\n+  avro:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  avro-python3:\n+    license: \"https://raw.githubusercontent.com/apache/avro/master/LICENSE.txt\"\n+    notice: \"https://raw.githubusercontent.com/apache/avro/master/NOTICE.txt\"\n+  backports.weakref:\n+    license: \"https://raw.githubusercontent.com/PiDelport/backports.weakref/master/LICENSE\"\n+  chardet:\n+    license: \"https://raw.githubusercontent.com/chardet/chardet/master/LICENSE\"\n+  certifi:\n+    license: \"https://raw.githubusercontent.com/certifi/python-certifi/master/LICENSE\"\n+  cython:\n+    license: \"https://raw.githubusercontent.com/cython/cython/master/LICENSE.txt\"\n+  enum34:\n+    license: \"https://bitbucket.org/stoneleaf/enum34/raw/c208549a93b71b948ff7bbdfd29dce8f85527916/enum/LICENSE\"\n+  fastavro:\n+    license: \"https://raw.githubusercontent.com/fastavro/fastavro/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/fastavro/fastavro/master/NOTICE.txt\"\n+  funcsigs:\n+    license: \"https://raw.githubusercontent.com/aliles/funcsigs/master/LICENSE\"\n+  futures:\n+    license: \"https://raw.githubusercontent.com/agronholm/pythonfutures/master/LICENSE\"\n+  google-apitools:\n+    license: \"https://raw.githubusercontent.com/google/apitools/master/LICENSE\"\n+  googledatastore:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/google-cloud-datastore/master/LICENSE\"\n+  grpcio:\n+    license: \"https://raw.githubusercontent.com/grpc/grpc/master/LICENSE\"\n+    notice: \"https://raw.githubusercontent.com/grpc/grpc/master/NOTICE.txt\"\n+  grpcio-gcp:\n+    license: \"https://raw.githubusercontent.com/GoogleCloudPlatform/grpc-gcp-python/master/LICENSE\"\n+  guppy:\n+    license: \"https://raw.githubusercontent.com/joshwcomeau/guppy/master/LICENSE.md\"\n+  guppy3:\n+    license: \"https://raw.githubusercontent.com/zhuyifei1999/guppy3/master/LICENSE\"\n+  h5py:\n+    license: \"https://raw.githubusercontent.com/h5py/h5py/master/LICENSE\"\n+  hdfs:\n+    license: \"https://raw.githubusercontent.com/mtth/hdfs/master/LICENSE\"\n+  httplib2:\n+    license: \"https://raw.githubusercontent.com/httplib2/httplib2/master/LICENSE\"\n+  mock:\n+    license: \"https://raw.githubusercontent.com/testing-cabal/mock/master/LICENSE.txt\"\n+  monotonic:\n+    license: \"https://raw.githubusercontent.com/atdt/monotonic/master/LICENSE\"\n+  nose:\n+    license: \"https://raw.githubusercontent.com/nose-devs/nose/master/lgpl.txt\"", "originalCommit": "01fd975078ab6eca26249690ebe289db6a29cabb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2NTk2NQ==", "url": "https://github.com/apache/beam/pull/11067#discussion_r402565965", "bodyText": "I agree with it. I will create a new PR to test behaviors when we remove dependencies after merging current PR.", "author": "Hannah-Jiang", "createdAt": "2020-04-02T19:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTUxNw=="}], "type": "inlineReview"}, {"oid": "4302ac74d0b6b3ef84f03aa2858d25d256611136", "url": "https://github.com/apache/beam/commit/4302ac74d0b6b3ef84f03aa2858d25d256611136", "message": "add license for singledispatch for py2", "committedDate": "2020-04-02T23:53:53Z", "type": "forcePushed"}, {"oid": "eeab9d1cac1e237a035daa992634b77d2ff81e63", "url": "https://github.com/apache/beam/commit/eeab9d1cac1e237a035daa992634b77d2ff81e63", "message": "add license for singledispatch for py2", "committedDate": "2020-04-03T00:43:05Z", "type": "forcePushed"}, {"oid": "cdae135ca2c4ef2ce592c9ae7ea1e8c24b50de78", "url": "https://github.com/apache/beam/commit/cdae135ca2c4ef2ce592c9ae7ea1e8c24b50de78", "message": "PreCommit_Python_DockerBuild", "committedDate": "2020-04-03T02:24:43Z", "type": "commit"}, {"oid": "c7452c70d50d964f2548095030e8050a35439957", "url": "https://github.com/apache/beam/commit/c7452c70d50d964f2548095030e8050a35439957", "message": "fix comments", "committedDate": "2020-04-03T02:24:48Z", "type": "commit"}, {"oid": "721de90275985e2c8fd09f32ff805e3569448b2a", "url": "https://github.com/apache/beam/commit/721de90275985e2c8fd09f32ff805e3569448b2a", "message": "fix comments 2", "committedDate": "2020-04-03T02:24:48Z", "type": "commit"}, {"oid": "f0df805e2d3d6e08109073600d629a6e16d0b94f", "url": "https://github.com/apache/beam/commit/f0df805e2d3d6e08109073600d629a6e16d0b94f", "message": "fix comments 3", "committedDate": "2020-04-03T02:24:49Z", "type": "commit"}, {"oid": "e6249af31eafb3afb7d08b88c385d15119c9afff", "url": "https://github.com/apache/beam/commit/e6249af31eafb3afb7d08b88c385d15119c9afff", "message": "add license for singledispatch for py2", "committedDate": "2020-04-03T02:24:49Z", "type": "commit"}, {"oid": "e6249af31eafb3afb7d08b88c385d15119c9afff", "url": "https://github.com/apache/beam/commit/e6249af31eafb3afb7d08b88c385d15119c9afff", "message": "add license for singledispatch for py2", "committedDate": "2020-04-03T02:24:49Z", "type": "forcePushed"}]}