{"pr_number": 11144, "pr_title": "[BEAM-3301] Perform SDF validation (missing RestrictionTrackers).", "pr_createdAt": "2020-03-17T01:29:07Z", "pr_url": "https://github.com/apache/beam/pull/11144", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxODY5Mg==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394618692", "bodyText": "A semantic note: the error shouldn't be ignored. Semantically if a function returns an error, the non error return values are not guaranteed to be valid.\nSo conventionally, the way to handle IsSplittable here is to check for the error, and return false if not nil, and otherwise return what the boolean is.", "author": "lostluck", "createdAt": "2020-03-18T20:26:11Z", "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -196,13 +217,31 @@ func (f *DoFn) Name() string {\n \n // IsSplittable returns whether the DoFn is a valid Splittable DoFn.\n func (f *DoFn) IsSplittable() bool {\n-\treturn false // TODO(BEAM-3301): Implement this when we add SDFs.\n+\tisSdf, _ := validateSdfMethodsPresent((*Fn)(f))", "originalCommit": "f4295ee7badff2ec8f0c5b07f325234e604d228f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MzQxNw==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394783417", "bodyText": "Good point, I'll keep it in mind for the future. For this one, though, I realized it's better just to check for the presence of a single SDF method anyway, rather than calling that validation method.", "author": "youngoli", "createdAt": "2020-03-19T04:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxODY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMjQ4Nw==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394722487", "bodyText": "Prefer declaring empty slices using the var syntax.\nvar missing []string", "author": "lostluck", "createdAt": "2020-03-19T00:33:45Z", "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -569,6 +622,188 @@ func validateSideInputsNumUnknown(processFnInputs []funcx.FnParam, method *funcx\n \treturn nil\n }\n \n+// validateSdfMethods validates that all SDF methods are either present or\n+// missing in a Fn, and then returns true if they're present and false\n+// otherwise. If some are present and some are missing, it returns an error.\n+func validateSdfMethodsPresent(fn *Fn) (bool, error) {\n+\t// Check if first sdf method is present or not, and compare all subsequent\n+\t// methods to that result. If there's a mismatch, then we only fail after\n+\t// finishing the loop so we can output all the missing methods.\n+\tmissing := make([]string, 0)", "originalCommit": "f4295ee7badff2ec8f0c5b07f325234e604d228f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MzQzMA==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394783430", "bodyText": "Done. I forgot that append works on nil slices.", "author": "youngoli", "createdAt": "2020-03-19T04:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMjQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyNTI1NA==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394725254", "bodyText": "I see that this function is trying to distinguish between partial coverage or complete coverage, but I think it could be simpler.\nConsider that the booleans could be removed by comparing whether len(missing) == len(sdfNames) to check if it's simply not an SDF at all (and thus, no error should be returned).\nswitch len(missing) {\ncase 0: \n  return true, nil\ncase len(sdfNames): \n  return false, nil\ndefault:\n  err := errors.Errorf(\"not all SplittableDoFn methods are present. Missing methods: %v\", missing)\n  return false, err\n}", "author": "lostluck", "createdAt": "2020-03-19T00:44:27Z", "path": "sdks/go/pkg/beam/core/graph/fn.go", "diffHunk": "@@ -569,6 +622,188 @@ func validateSideInputsNumUnknown(processFnInputs []funcx.FnParam, method *funcx\n \treturn nil\n }\n \n+// validateSdfMethods validates that all SDF methods are either present or\n+// missing in a Fn, and then returns true if they're present and false\n+// otherwise. If some are present and some are missing, it returns an error.\n+func validateSdfMethodsPresent(fn *Fn) (bool, error) {\n+\t// Check if first sdf method is present or not, and compare all subsequent\n+\t// methods to that result. If there's a mismatch, then we only fail after\n+\t// finishing the loop so we can output all the missing methods.\n+\tmissing := make([]string, 0)\n+\tvar first, fail bool\n+\n+\tfor i, name := range sdfNames {\n+\t\t_, ok := fn.methods[name]\n+\t\tif !ok {\n+\t\t\tmissing = append(missing, name)\n+\t\t}\n+\n+\t\tif i == 0 {\n+\t\t\tfirst = ok\n+\t\t} else if ok != first {\n+\t\t\tfail = true\n+\t\t}\n+\t}\n+\n+\tif fail {\n+\t\terr := errors.Errorf(\"not all SplittableDoFn methods are present. Missing methods: %v\", missing)\n+\t\treturn false, err\n+\t}\n+\n+\treturn first, nil", "originalCommit": "f4295ee7badff2ec8f0c5b07f325234e604d228f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MzQ1MA==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394783450", "bodyText": "That looks much more readable and easy to follow than the current one. Done.", "author": "youngoli", "createdAt": "2020-03-19T04:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyNTI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyODM3Nw==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394728377", "bodyText": "Shouldn't the ProcessElement method be adjusted here for the Restriction tracker parameter for a \"GoodSdf\" ?\nI guess technically if we don't care about dynamic splitting at all, it should be allowed. It's not unreasonable to prevent it until we have the right idea how to do that, but if so, lets put a TODO in here somewhere to make the intent explicit.", "author": "lostluck", "createdAt": "2020-03-19T00:57:02Z", "path": "sdks/go/pkg/beam/core/graph/fn_test.go", "diffHunk": "@@ -470,6 +542,169 @@ func (fn *BadDoFnAmbiguousSideInput) StartBundle(bool) {\n func (fn *BadDoFnAmbiguousSideInput) FinishBundle(bool) {\n }\n \n+// Examples of correct SplittableDoFn signatures\n+\n+type RestT struct{}\n+\n+type GoodSdf struct {", "originalCommit": "f4295ee7badff2ec8f0c5b07f325234e604d228f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MzQ3Nw==", "url": "https://github.com/apache/beam/pull/11144#discussion_r394783477", "bodyText": "I was just skipping it because this commit hasn't added restriction trackers yet, but adding a TODO to remind me to change it later is a good idea. Done.", "author": "youngoli", "createdAt": "2020-03-19T04:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyODM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzOTE5NQ==", "url": "https://github.com/apache/beam/pull/11144#discussion_r395339195", "bodyText": "Makes sense! Thanks!", "author": "lostluck", "createdAt": "2020-03-19T21:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyODM3Nw=="}], "type": "inlineReview"}, {"oid": "26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "url": "https://github.com/apache/beam/commit/26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "message": "[BEAM-3301] Perform SDF validation (missing RestrictionTrackers).\n\nAdded SDF detection and method validation when creating DoFns. This\nadds all the validation except for anything to do with restriction\ntrackers, which will be added in a later change.", "committedDate": "2020-03-19T23:38:36Z", "type": "commit"}, {"oid": "26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "url": "https://github.com/apache/beam/commit/26ed90b33b4485ceaf7f6460364ef2ee1c9a21be", "message": "[BEAM-3301] Perform SDF validation (missing RestrictionTrackers).\n\nAdded SDF detection and method validation when creating DoFns. This\nadds all the validation except for anything to do with restriction\ntrackers, which will be added in a later change.", "committedDate": "2020-03-19T23:38:36Z", "type": "forcePushed"}]}