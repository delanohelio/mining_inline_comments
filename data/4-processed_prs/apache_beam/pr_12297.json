{"pr_number": 12297, "pr_title": "[BEAM-10137] Add KinesisIO for cross-language usage with python wrapper", "pr_createdAt": "2020-07-17T12:09:54Z", "pr_url": "https://github.com/apache/beam/pull/12297", "timeline": [{"oid": "ee06c842341c3ce3e6ae5524306bca1d5571d6fb", "url": "https://github.com/apache/beam/commit/ee06c842341c3ce3e6ae5524306bca1d5571d6fb", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-17T14:02:00Z", "type": "forcePushed"}, {"oid": "ae771a63db318b930739de5c09a0a70c2b7f29cd", "url": "https://github.com/apache/beam/commit/ae771a63db318b930739de5c09a0a70c2b7f29cd", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-17T14:04:03Z", "type": "forcePushed"}, {"oid": "ab6da5ae32aa63907229f6c7ae778410f4462da3", "url": "https://github.com/apache/beam/commit/ab6da5ae32aa63907229f6c7ae778410f4462da3", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-17T14:06:35Z", "type": "forcePushed"}, {"oid": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "url": "https://github.com/apache/beam/commit/b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "message": "[BEAM-10137] Add KinesisIO Read Cross-language transform", "committedDate": "2020-07-22T12:02:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzODA5NA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459138094", "bodyText": "I think it would be cleaner just to have a single registrar with inner classes for all the builders and the configuration classes. WDYT?", "author": "TheNeuralBit", "createdAt": "2020-07-22T23:23:03Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisReadTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kinesis;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import org.apache.beam.sdk.annotations.Experimental;\n+import org.apache.beam.sdk.annotations.Experimental.Kind;\n+import org.apache.beam.sdk.expansion.ExternalTransformRegistrar;\n+import org.apache.beam.sdk.transforms.ExternalTransformBuilder;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+\n+/** Exposes {@link KinesisIO.Read} as an external transform for cross-language usage. */\n+@Experimental(Kind.PORTABILITY)\n+@AutoService(ExternalTransformRegistrar.class)\n+public class KinesisReadTransformRegistrar implements ExternalTransformRegistrar {", "originalCommit": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NTIwNQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459245205", "bodyText": "I much prefer extracting as much code as possible but since everything is in one package in Kinesis then it makes sense. I'll do this change in Write PR. To be honest I'm not sure whether splitting this to 4PRs is a good idea, but I'll give it a try", "author": "piotr-szuberski", "createdAt": "2020-07-23T06:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzODA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMzODczNQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r460338735", "bodyText": "Yeah I think I would actually prefer reviewing it as one big PR if that's ok with you", "author": "TheNeuralBit", "createdAt": "2020-07-25T00:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzODA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDcxOA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459140718", "bodyText": "Are you able to run the nullability checker, or does it complain about underlying issues in :sdks:java:io:kinesis? We should prefer enabling the nullability checker in new packages if possible since there's an effort to enable the checker throughout Beam (BEAM-10402).", "author": "TheNeuralBit", "createdAt": "2020-07-22T23:31:24Z", "path": "sdks/java/io/kinesis/expansion-service/build.gradle", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+apply plugin: 'org.apache.beam.module'\n+apply plugin: 'application'\n+mainClassName = \"org.apache.beam.sdk.expansion.service.ExpansionService\"\n+\n+applyJavaNature(enableChecker:false,", "originalCommit": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NjQ1NQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459246455", "bodyText": "I enabled it and it doesn't seem to have any negative effect. I'm doing this change in Write PR (I'll rebase this one onto these changes so this time there will be no force-pushing like it was in jdbc change)", "author": "piotr-szuberski", "createdAt": "2020-07-23T06:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0MDcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459149111", "bodyText": "We should file a jira for making KinesisIO.Read (with metadata) available. I think this would be possible if we register a schema for KinesisRecord, but it won't work cross-language until we have portable support for datetimes (i.e. BEAM-7554 will be a blocker). Also maybe this one should use a URN like \"read_without_metadata\" or \"read_data_only\" so we can use \"read\" in the future.", "author": "TheNeuralBit", "createdAt": "2020-07-23T00:00:27Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -561,6 +569,41 @@ public Read withMaxCapacityPerShard(Integer maxCapacity) {\n     }\n   }\n \n+  /**\n+   * A {@link PTransform} to read from Kinesis stream. Similar to {@link KinesisIO.Read}, but\n+   * removes Kinesis metatdata and returns a {@link PCollection} of {@link byte[]}. See {@link\n+   * KinesisIO} for more information on usage and configuration of reader.\n+   */\n+  public static class TypedWithoutMetadata extends PTransform<PBegin, PCollection<byte[]>> {", "originalCommit": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTk1Mw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459149953", "bodyText": "Also bikesheddy comment: I'm not sure about the name TypedWithoutMetadata, should it be ReadWithoutMetadata?", "author": "TheNeuralBit", "createdAt": "2020-07-23T00:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1OTk5OQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459259999", "bodyText": "My first attempt was to register a KnownCoder with coder registrar for KinesisRecord, but later I noticed that datetime is missing so I tried to send longs. But even so I still was getting beam:coders:javasdk:0.1 when I tried to use it in python.", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MDM0Mw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459260343", "bodyText": "I followed the code in KafkaIO where TypedWithoutMetadata is used. ReadWithoutMetadata tells indeed much more.", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI3Njc5NQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459276795", "bodyText": "I changed the URN to read_data, I think it's self-explanatory for a kinesis user.", "author": "piotr-szuberski", "createdAt": "2020-07-23T08:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE0OTExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjYyNg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459152626", "bodyText": "I think it will be confusing to have this function here, since every other with... method returns a Read class. A user might expect to be able to do:\nKinesisIO.read()\n   .withoutMetadata()\n   .withMaxCapacityPerShard(x)\n\nInstead we should add a KinesisIO.readWithoutMetadata() that returns something like TypedWithoutMetadata with all the same configuration parameters as Read. You might take a look at how this is handled in PubsubIO for inspiration, I think it has a similar problem where it supports multiple different output types, but we want them all to share some configuration parameters. It looks like the way it's handled there is with a Read type, and you pass in a function for converting PubsubMessage to T.\nAlternatively, you could move the logic to extract the payload into the external transform builder, rather than adding the interface here (I think there's value in adding it here though if you want to take it on).", "author": "TheNeuralBit", "createdAt": "2020-07-23T00:13:31Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -536,6 +537,13 @@ public Read withMaxCapacityPerShard(Integer maxCapacity) {\n       return toBuilder().setMaxCapacityPerShard(maxCapacity).build();\n     }\n \n+    /**\n+     * Returns a {@link PTransform} for PCollection of {@link byte[]}, dropping Kinesis metatdata.\n+     */\n+    public PTransform<PBegin, PCollection<byte[]>> withoutMetadata() {\n+      return new TypedWithoutMetadata(this);\n+    }", "originalCommit": "b0afbe630e74bcfbb97751bd9bcf1eea1406c2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MTM0OQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459261349", "bodyText": "Thanks for pointing it, I followed the KafkaIO convention and didn't think whether it's a good design or not. The change is trivial, just use KinesisIO.readWithoutMetadata() and pass Read there instead of creating it in withoutMetadata(this).", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI2MTQ4Mg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r459261482", "bodyText": "I'll leave it in KinesisIO.", "author": "piotr-szuberski", "createdAt": "2020-07-23T07:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1MjYyNg=="}], "type": "inlineReview"}, {"oid": "ba979364e5ea608859e071fef79c94ea218f3bef", "url": "https://github.com/apache/beam/commit/ba979364e5ea608859e071fef79c94ea218f3bef", "message": "Move parsing watermark policy to the configuration class", "committedDate": "2020-07-23T07:47:57Z", "type": "forcePushed"}, {"oid": "fa793a84d029f03ba8e17aa3ce35ba8ea981e13f", "url": "https://github.com/apache/beam/commit/fa793a84d029f03ba8e17aa3ce35ba8ea981e13f", "message": "Rename ReadBuilder to ReadWithoutMetadataBuilder", "committedDate": "2020-07-23T07:57:07Z", "type": "forcePushed"}, {"oid": "613cf8aaa545633fc27452e470d8d52da322b1d5", "url": "https://github.com/apache/beam/commit/613cf8aaa545633fc27452e470d8d52da322b1d5", "message": "Move parsing logic in Read to setters so configuration class has proper types", "committedDate": "2020-07-23T11:01:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTA2OA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r460341068", "bodyText": "I think this is an atypical API for an IO. If we add something like readData to KinesisIO (instead of just hiding it in the ExternalTransformBuilder) it would be preferable to make Read generic and have two methods like this:\npublic static Read<KinesisRecord> read() {\n  return new Read<KinesisRecord>();\n}\n\npublic static Read<byte[]> readData() {\n  return new Read<byte[]>((record) -> record.getDataAsBytes());\n}\nThat way they can both be configured in the same way:\nPCollection<KinesisRecord> records = p.apply(KinesisIO.read().withStreamName(\"streamName\").with...)\nPCollection<byte[]> data = p.apply(KinesisIO.readData().withStreamName(\"streamName\").with...)\n\nThis is what PubsubIO does:\n\n  \n    \n      beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java\n    \n    \n        Lines 439 to 444\n      in\n      ecedd3e\n    \n    \n    \n    \n\n        \n          \n           public static Read<PubsubMessage> readMessagesWithAttributes() { \n        \n\n        \n          \n             return Read.newBuilder() \n        \n\n        \n          \n                 .setCoder(PubsubMessageWithAttributesCoder.of()) \n        \n\n        \n          \n                 .setNeedsAttributes(true) \n        \n\n        \n          \n                 .build(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\n  \n    \n      beam/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubIO.java\n    \n    \n        Lines 464 to 469\n      in\n      ecedd3e\n    \n    \n    \n    \n\n        \n          \n           public static Read<String> readStrings() { \n        \n\n        \n          \n             return Read.newBuilder( \n        \n\n        \n          \n                     (PubsubMessage message) -> new String(message.getPayload(), StandardCharsets.UTF_8)) \n        \n\n        \n          \n                 .setCoder(StringUtf8Coder.of()) \n        \n\n        \n          \n                 .build(); \n        \n\n        \n          \n           }", "author": "TheNeuralBit", "createdAt": "2020-07-25T00:38:32Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -305,6 +306,10 @@ public static Read read() {\n         .build();\n   }\n \n+  public static ReadData readData(Read read) {\n+    return new ReadData(read);\n+  }\n+", "originalCommit": "e217764402053bfab895c282b1f60ee8596b9449", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAyNzY2NA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r461027664", "bodyText": "Thanks for pointing it out. Done.", "author": "piotr-szuberski", "createdAt": "2020-07-27T16:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTA2OA=="}], "type": "inlineReview"}, {"oid": "ff61b2e930c9bf8ad6aaa03a2266a89e3cedd9aa", "url": "https://github.com/apache/beam/commit/ff61b2e930c9bf8ad6aaa03a2266a89e3cedd9aa", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-07-27T16:20:34Z", "type": "forcePushed"}, {"oid": "81dc8b9a8b86f7fd9b750dfed2831f96aee220de", "url": "https://github.com/apache/beam/commit/81dc8b9a8b86f7fd9b750dfed2831f96aee220de", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-07-27T16:24:23Z", "type": "forcePushed"}, {"oid": "24e2a7f262837158b9c67a84ac9830b6b826ac68", "url": "https://github.com/apache/beam/commit/24e2a7f262837158b9c67a84ac9830b6b826ac68", "message": "[BEAM-10137][BEAM-10138] Introduce testcontainers with localstack (fails probably because of not disabled CBOR in java sdk execution)", "committedDate": "2020-07-27T17:32:12Z", "type": "forcePushed"}, {"oid": "26c9f9604058b03f43fed9d5603c5beb491d1176", "url": "https://github.com/apache/beam/commit/26c9f9604058b03f43fed9d5603c5beb491d1176", "message": "[BEAM-10137][BEAM-10138] Introduce testcontainers with localstack (fails probably because of not disabled CBOR in java sdk execution)", "committedDate": "2020-07-27T18:14:46Z", "type": "forcePushed"}, {"oid": "bc57f6d63f5e3af79f86b8d06d8d330a949a9e2b", "url": "https://github.com/apache/beam/commit/bc57f6d63f5e3af79f86b8d06d8d330a949a9e2b", "message": "Add kinesis test to portable postcommit suite", "committedDate": "2020-07-28T13:20:35Z", "type": "forcePushed"}, {"oid": "ee2e78b54dda1183ce472ba484e849b354955b0d", "url": "https://github.com/apache/beam/commit/ee2e78b54dda1183ce472ba484e849b354955b0d", "message": "Add kinesis test to portable postcommit suite", "committedDate": "2020-07-28T13:22:34Z", "type": "forcePushed"}, {"oid": "18b5475197d86dd429354ae426502ab15ddcb65e", "url": "https://github.com/apache/beam/commit/18b5475197d86dd429354ae426502ab15ddcb65e", "message": "Add pylint comments", "committedDate": "2020-07-29T15:35:55Z", "type": "forcePushed"}, {"oid": "9145e293ec871310a586e59da6a95f79f51349d4", "url": "https://github.com/apache/beam/commit/9145e293ec871310a586e59da6a95f79f51349d4", "message": "Enable kinesis cross-language test in python postcommit suite", "committedDate": "2020-07-30T11:20:42Z", "type": "forcePushed"}, {"oid": "7742517746ee02b40e37b36b96d04906366e02b3", "url": "https://github.com/apache/beam/commit/7742517746ee02b40e37b36b96d04906366e02b3", "message": "Fix python linter", "committedDate": "2020-07-30T13:52:25Z", "type": "forcePushed"}, {"oid": "9ac3b4c0c6b44e59ddd2c90ec709f3bb410b3c0e", "url": "https://github.com/apache/beam/commit/9ac3b4c0c6b44e59ddd2c90ec709f3bb410b3c0e", "message": "Uncomment skipif", "committedDate": "2020-07-30T13:59:14Z", "type": "forcePushed"}, {"oid": "ccbb5d6acc1d8fdcc40c9e5718ffab647d67cbb9", "url": "https://github.com/apache/beam/commit/ccbb5d6acc1d8fdcc40c9e5718ffab647d67cbb9", "message": "Add skip to read test with comment and uncomment skipif", "committedDate": "2020-07-30T15:27:15Z", "type": "forcePushed"}, {"oid": "2f561e3c147210b531f546089409fbd4af2046ae", "url": "https://github.com/apache/beam/commit/2f561e3c147210b531f546089409fbd4af2046ae", "message": "Refactor integration tests", "committedDate": "2020-08-07T16:08:30Z", "type": "forcePushed"}, {"oid": "aa1c72a11ea6de62830ef0412a584e75b77d1ad5", "url": "https://github.com/apache/beam/commit/aa1c72a11ea6de62830ef0412a584e75b77d1ad5", "message": "Refactor integration tests", "committedDate": "2020-08-10T10:01:55Z", "type": "forcePushed"}, {"oid": "389b2a0f8e939ced70701a62aa886da0ead1aa76", "url": "https://github.com/apache/beam/commit/389b2a0f8e939ced70701a62aa886da0ead1aa76", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-10T10:07:56Z", "type": "forcePushed"}, {"oid": "8044363596a96b5c79185cbbb8d17b60804dfc19", "url": "https://github.com/apache/beam/commit/8044363596a96b5c79185cbbb8d17b60804dfc19", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-10T10:09:06Z", "type": "forcePushed"}, {"oid": "e7f7370eecb235e036e46878c7395e3e24f3190d", "url": "https://github.com/apache/beam/commit/e7f7370eecb235e036e46878c7395e3e24f3190d", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-10T10:21:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MjMwMA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468262300", "bodyText": "I think it would be better if this had three tests:\n\ntest_kinesis_io_roundtrip (what you have now in the self.use_localstack = False case)\ntest_kinesis_write (what you have now in the self.use_localstack = True case)\ntest_kinesis_read (a new test that runs run_kinesis_read_data and injects the test data)\n\ntest_kinesis_io_roundtrip and test_kinesis_read would be skipped when self.use_localstack = True\nIf you'd rather not write up test_kinesis_read right now that could be left as a TODO for BEAM-10664. But I think we should at least separate out the two versions of test_kinesis_io into two distinct tests, so it's clear what is being tested.", "author": "TheNeuralBit", "createdAt": "2020-08-11T00:42:56Z", "path": "sdks/python/apache_beam/io/external/xlang_kinesisio_it_test.py", "diffHunk": "@@ -0,0 +1,304 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+Integration test for Python cross-language pipelines for Java KinesisIO.\n+\n+If you want to run the tests on localstack then run it just with pipeline\n+options.\n+\n+To test it on a real AWS account you need to pass some additional params, e.g.:\n+python setup.py nosetests \\\n+--tests=apache_beam.io.external.xlang_kinesisio_it_test \\\n+--test-pipeline-options=\"\n+  --use_real_aws\n+  --aws_kinesis_stream=<STREAM_NAME>\n+  --aws_access_key=<AWS_ACCESS_KEY>\n+  --aws_secret_key=<AWS_SECRET_KEY>\n+  --aws_region=<AWS_REGION>\n+  --runner=FlinkRunner\"\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import argparse\n+import logging\n+import time\n+import unittest\n+import uuid\n+\n+import apache_beam as beam\n+from apache_beam.io.kinesis import InitialPositionInStream\n+from apache_beam.io.kinesis import ReadDataFromKinesis\n+from apache_beam.io.kinesis import WriteToKinesis\n+from apache_beam.options.pipeline_options import PipelineOptions\n+from apache_beam.options.pipeline_options import StandardOptions\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+\n+# pylint: disable=wrong-import-order, wrong-import-position, ungrouped-imports\n+try:\n+  import boto3\n+except ImportError:\n+  boto3 = None\n+\n+try:\n+  from testcontainers.core.container import DockerContainer\n+except ImportError:\n+  DockerContainer = None\n+# pylint: enable=wrong-import-order, wrong-import-position, ungrouped-imports\n+\n+LOCALSTACK_VERSION = '0.11.3'\n+NUM_RECORDS = 10\n+NOW = time.time()\n+RECORD = b'record' + str(uuid.uuid4()).encode()\n+\n+\n+@unittest.skipIf(DockerContainer is None, 'testcontainers is not installed.')\n+@unittest.skipIf(boto3 is None, 'boto3 is not installed.')\n+@unittest.skipIf(\n+    TestPipeline().get_pipeline_options().view_as(StandardOptions).runner is\n+    None,\n+    'Do not run this test on precommit suites.',\n+)\n+class CrossLanguageKinesisIOTest(unittest.TestCase):\n+  def test_kinesis_io(self):\n+    self.run_kinesis_write()\n+    # TODO: remove once BEAM-10664 is resolved\n+    if not self.use_localstack:\n+      self.run_kinesis_read_data()\n+\n+  def run_kinesis_write(self):\n+    with TestPipeline(options=PipelineOptions(self.pipeline_args)) as p:\n+      p.not_use_test_runner_api = True\n+      _ = (\n+          p\n+          | 'Impulse' >> beam.Impulse()\n+          | 'Generate' >> beam.FlatMap(lambda x: range(NUM_RECORDS))  # pylint: disable=range-builtin-not-iterating\n+          | 'Map to bytes' >>\n+          beam.Map(lambda x: RECORD + str(x).encode()).with_output_types(bytes)\n+          | 'WriteToKinesis' >> WriteToKinesis(\n+              stream_name=self.aws_kinesis_stream,\n+              aws_access_key=self.aws_access_key,\n+              aws_secret_key=self.aws_secret_key,\n+              region=self.aws_region,\n+              service_endpoint=self.aws_service_endpoint,\n+              verify_certificate=(not self.use_localstack),\n+              partition_key='1',\n+          ))\n+\n+    # TODO: Remove once BEAM-10664 is resolved\n+    if self.use_localstack:\n+      records = self.kinesis_helper.read_from_stream(self.aws_kinesis_stream)\n+      self.assertEqual(\n+          sorted(records),\n+          sorted([RECORD + str(i).encode() for i in range(NUM_RECORDS)]))", "originalCommit": "e7f7370eecb235e036e46878c7395e3e24f3190d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5NDA3NA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468394074", "bodyText": "I'll not write a separate read test for now because this can't be tested anyway and could be confusing later if there is some bug. I think that it'd be better to just leave test_kinesis_io_roundtrip and remove test_write once the problem is solved - it would reduce the amount of boto3 used in the test.", "author": "piotr-szuberski", "createdAt": "2020-08-11T07:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MjMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2Mjk4MA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468262980", "bodyText": "FYI if #12481 is merged first this can (and will have to) change to Mapping[unicode, unicode]", "author": "TheNeuralBit", "createdAt": "2020-08-11T00:45:30Z", "path": "sdks/python/apache_beam/io/kinesis.py", "diffHunk": "@@ -0,0 +1,317 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Kinesis streaming in Python pipelines.\n+\n+  These transforms are currently supported by Beam Flink and Spark portable\n+  runners.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Kinesis transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Kinesis\n+  transforms. This option is only available for Beam 2.24.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Kinesis transforms use the\n+  'beam-sdks-java-io-kinesis-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Kinesis transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import time\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Tuple\n+\n+from past.builtins import unicode\n+\n+from apache_beam import BeamJarExpansionService\n+from apache_beam import ExternalTransform\n+from apache_beam import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToKinesis',\n+    'ReadDataFromKinesis',\n+    'InitialPositionInStream',\n+    'WatermarkPolicy',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService(\n+      'sdks:java:io:kinesis:expansion-service:shadowJar')\n+\n+\n+WriteToKinesisSchema = NamedTuple(\n+    'WriteToKinesisSchema',\n+    [\n+        ('stream_name', unicode),\n+        ('aws_access_key', unicode),\n+        ('aws_secret_key', unicode),\n+        ('region', unicode),\n+        ('partition_key', unicode),\n+        ('service_endpoint', Optional[unicode]),\n+        ('verify_certificate', Optional[bool]),\n+        ('producer_properties', Optional[List[Tuple[unicode, unicode]]]),", "originalCommit": "e7f7370eecb235e036e46878c7395e3e24f3190d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTgyOA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468391828", "bodyText": "Great, Mapping will at least be there! I'll follow this PR.", "author": "piotr-szuberski", "createdAt": "2020-08-11T07:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2Mjk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwNzUyNA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468907524", "bodyText": "#12481 is merged now so this should change to mapping (as well as producer_properties, and the corresponding parameters in Java)", "author": "TheNeuralBit", "createdAt": "2020-08-11T22:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2Mjk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3Mjk4NA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r469072984", "bodyText": "Done. I also added some config params in the test to verify that Mapping works.", "author": "piotr-szuberski", "createdAt": "2020-08-12T07:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2Mjk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468264221", "bodyText": "@lukecwik I suggested that Piotr make Read generic so that we can add Read<byte[]> readData() naturally, but now I'm wondering if this is a bad idea since it changes our Public API. Does this have a risk of breaking users?\nIt looks like at least the way the method is used in our tests (p.apply(KinesisIO.read())) is unaffected.", "author": "TheNeuralBit", "createdAt": "2020-08-11T00:50:13Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisIO.java", "diffHunk": "@@ -295,14 +300,16 @@\n   private static final int DEFAULT_NUM_RETRIES = 6;\n \n   /** Returns a new {@link Read} transform for reading from Kinesis. */\n-  public static Read read() {\n-    return new AutoValue_KinesisIO_Read.Builder()\n-        .setMaxNumRecords(Long.MAX_VALUE)\n-        .setUpToDateThreshold(Duration.ZERO)\n-        .setWatermarkPolicyFactory(WatermarkPolicyFactory.withArrivalTimePolicy())\n-        .setRateLimitPolicyFactory(RateLimitPolicyFactory.withoutLimiter())\n-        .setMaxCapacityPerShard(ShardReadersPool.DEFAULT_CAPACITY_PER_SHARD)\n-        .build();\n+  public static Read<KinesisRecord> read() {", "originalCommit": "e7f7370eecb235e036e46878c7395e3e24f3190d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNzA1NQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r474107055", "bodyText": "Prob. this is OK as long as the change is backwards compatible for user pipelines.", "author": "chamikaramj", "createdAt": "2020-08-20T16:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQxNjMwNg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r474416306", "bodyText": "The worst thing I can imagine is that a user will get a raw type warning if he used it like KinesisIO.Read read = KinesisIO.read();. Some users could have some checkers that would turn it into an error though. I don't know how much common such tools are in the Java development in projects using Beam.\nPCollection<KinesisRecord> = pipeline.apply(KinesisIO.read()...)); doesn't change so I think it's ok.", "author": "piotr-szuberski", "createdAt": "2020-08-21T05:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3NjU4Nw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r481276587", "bodyText": "I think it should be fine if it doesn't require a user code change.", "author": "aromanenko-dev", "createdAt": "2020-09-01T16:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NTc5MQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468265791", "bodyText": "This worries me a little bit since the system clock could be wrong. Maybe this should be a warning instead?", "author": "TheNeuralBit", "createdAt": "2020-08-11T00:56:13Z", "path": "sdks/python/apache_beam/io/kinesis.py", "diffHunk": "@@ -0,0 +1,317 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Kinesis streaming in Python pipelines.\n+\n+  These transforms are currently supported by Beam Flink and Spark portable\n+  runners.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Kinesis transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Kinesis\n+  transforms. This option is only available for Beam 2.24.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Kinesis transforms use the\n+  'beam-sdks-java-io-kinesis-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Kinesis transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import time\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Tuple\n+\n+from past.builtins import unicode\n+\n+from apache_beam import BeamJarExpansionService\n+from apache_beam import ExternalTransform\n+from apache_beam import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToKinesis',\n+    'ReadDataFromKinesis',\n+    'InitialPositionInStream',\n+    'WatermarkPolicy',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService(\n+      'sdks:java:io:kinesis:expansion-service:shadowJar')\n+\n+\n+WriteToKinesisSchema = NamedTuple(\n+    'WriteToKinesisSchema',\n+    [\n+        ('stream_name', unicode),\n+        ('aws_access_key', unicode),\n+        ('aws_secret_key', unicode),\n+        ('region', unicode),\n+        ('partition_key', unicode),\n+        ('service_endpoint', Optional[unicode]),\n+        ('verify_certificate', Optional[bool]),\n+        ('producer_properties', Optional[List[Tuple[unicode, unicode]]]),\n+    ],\n+)\n+\n+\n+class WriteToKinesis(ExternalTransform):\n+  \"\"\"\n+    An external PTransform which writes byte array stream to Amazon Kinesis.\n+\n+    Experimental; no backwards compatibility guarantees.\n+  \"\"\"\n+  URN = 'beam:external:java:kinesis:write:v1'\n+\n+  def __init__(\n+      self,\n+      stream_name,\n+      aws_access_key,\n+      aws_secret_key,\n+      region,\n+      partition_key,\n+      service_endpoint=None,\n+      verify_certificate=None,\n+      producer_properties=None,\n+      expansion_service=None,\n+  ):\n+    \"\"\"\n+    Initializes a write operation to Kinesis.\n+\n+    :param stream_name: Kinesis stream name.\n+    :param aws_access_key: Kinesis access key.\n+    :param aws_secret_key: Kinesis access key secret.\n+    :param region: AWS region. Example: 'us-east-1'.\n+    :param service_endpoint: Kinesis service endpoint\n+    :param verify_certificate: Enable or disable certificate verification.\n+        Never set to False on production. True by default.\n+    :param partition_key: Specify default partition key.\n+    :param producer_properties: Specify the configuration properties for Kinesis\n+        Producer Library (KPL) as List[KV[string, string]].\n+        Example: [('CollectionMaxCount', '1000'), ('ConnectTimeout', '10000')]\n+    :param expansion_service: The address (host:port) of the ExpansionService.\n+    \"\"\"\n+    super(WriteToKinesis, self).__init__(\n+        self.URN,\n+        NamedTupleBasedPayloadBuilder(\n+            WriteToKinesisSchema(\n+                stream_name=stream_name,\n+                aws_access_key=aws_access_key,\n+                aws_secret_key=aws_secret_key,\n+                region=region,\n+                partition_key=partition_key,\n+                service_endpoint=service_endpoint,\n+                verify_certificate=verify_certificate,\n+                producer_properties=producer_properties,\n+            )),\n+        expansion_service or default_io_expansion_service(),\n+    )\n+\n+\n+ReadFromKinesisSchema = NamedTuple(\n+    'ReadFromKinesisSchema',\n+    [\n+        ('stream_name', unicode),\n+        ('aws_access_key', unicode),\n+        ('aws_secret_key', unicode),\n+        ('region', unicode),\n+        ('service_endpoint', Optional[unicode]),\n+        ('verify_certificate', Optional[bool]),\n+        ('max_num_records', Optional[int]),\n+        ('max_read_time', Optional[int]),\n+        ('initial_position_in_stream', Optional[unicode]),\n+        ('initial_timestamp_in_stream', Optional[int]),\n+        ('request_records_limit', Optional[int]),\n+        ('up_to_date_threshold', Optional[int]),\n+        ('max_capacity_per_shard', Optional[int]),\n+        ('watermark_policy', Optional[unicode]),\n+        ('watermark_idle_duration_threshold', Optional[int]),\n+        ('rate_limit', Optional[int]),\n+    ],\n+)\n+\n+\n+class InitialPositionInStream:\n+  LATEST = 'LATEST'\n+  TRIM_HORIZON = 'TRIM_HORIZON'\n+  AT_TIMESTAMP = 'AT_TIMESTAMP'\n+\n+\n+class WatermarkPolicy:\n+  PROCESSING_TYPE = 'PROCESSING_TYPE'\n+  ARRIVAL_TIME = 'ARRIVAL_TIME'\n+\n+\n+class ReadDataFromKinesis(ExternalTransform):\n+  \"\"\"\n+    An external PTransform which reads byte array stream from Amazon Kinesis.\n+\n+    Experimental; no backwards compatibility guarantees.\n+  \"\"\"\n+  URN = 'beam:external:java:kinesis:read_data:v1'\n+\n+  def __init__(\n+      self,\n+      stream_name,\n+      aws_access_key,\n+      aws_secret_key,\n+      region,\n+      service_endpoint=None,\n+      verify_certificate=None,\n+      max_num_records=None,\n+      max_read_time=None,\n+      initial_position_in_stream=None,\n+      initial_timestamp_in_stream=None,\n+      request_records_limit=None,\n+      up_to_date_threshold=None,\n+      max_capacity_per_shard=None,\n+      watermark_policy=None,\n+      watermark_idle_duration_threshold=None,\n+      rate_limit=None,\n+      expansion_service=None,\n+  ):\n+    \"\"\"\n+    Initializes a read operation from Kinesis.\n+\n+    :param stream_name: Kinesis stream name.\n+    :param aws_access_key: Kinesis access key.\n+    :param aws_secret_key: Kinesis access key secret.\n+    :param region: AWS region. Example: 'us-east-1'.\n+    :param service_endpoint: Kinesis service endpoint\n+    :param verify_certificate: Enable or disable certificate verification.\n+        Never set to False on production. True by default.\n+    :param max_num_records: Specifies to read at most a given number of records.\n+        Must be greater than 0.\n+    :param max_read_time: Specifies to read records during x seconds.\n+    :param initial_timestamp_in_stream: Specify reading beginning at the given\n+        timestamp in seconds. Must be in the past.\n+    :param initial_position_in_stream: Specify reading from some initial\n+        position in stream. Possible values:\n+        LATEST - Start after the most recent data record (fetch new data).\n+        TRIM_HORIZON - Start from the oldest available data record.\n+        AT_TIMESTAMP - Start from the record at or after the specified\n+        server-side timestamp.\n+    :param request_records_limit: Specifies the maximum number of records in\n+        GetRecordsResult returned by GetRecords call which is limited by 10K\n+        records. If should be adjusted according to average size of data record\n+        to prevent shard overloading. More at:\n+        docs.aws.amazon.com/kinesis/latest/APIReference/API_GetRecords.html\n+    :param up_to_date_threshold: Specifies how late in seconds records consumed\n+        by this source can be to still be considered on time. Defaults to zero.\n+    :param max_capacity_per_shard: Specifies the maximum number of messages per\n+        one shard. Defaults to 10'000.\n+    :param watermark_policy: Specifies the watermark policy. Possible values:\n+        PROCESSING_TYPE, ARRIVAL_TIME. Defaults to ARRIVAL_TIME.\n+    :param watermark_idle_duration_threshold: Use only when watermark policy is\n+        ARRIVAL_TIME. Denotes the duration for which the watermark can be idle.\n+        Passed in seconds.\n+    :param rate_limit: Sets fixed rate policy for given seconds value. By\n+        default there is no rate limit.\n+    :param expansion_service: The address (host:port) of the ExpansionService.\n+    \"\"\"\n+    if watermark_policy:\n+      assert watermark_policy == WatermarkPolicy.ARRIVAL_TIME or\\\n+             watermark_policy == WatermarkPolicy.PROCESSING_TYPE\n+\n+    if initial_position_in_stream:\n+      i = initial_position_in_stream\n+      assert i == InitialPositionInStream.AT_TIMESTAMP or \\\n+             i == InitialPositionInStream.LATEST or \\\n+             i == InitialPositionInStream.TRIM_HORIZON\n+\n+    if request_records_limit:\n+      assert 0 < request_records_limit <= 10000\n+\n+    if initial_timestamp_in_stream:\n+      assert initial_timestamp_in_stream < time.time()", "originalCommit": "e7f7370eecb235e036e46878c7395e3e24f3190d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTI3Ng==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468391276", "bodyText": "I think it's a good idea since kinesis java sdk will verify it later anyway. One thing to discuss is whether I should use milliseconds or just seconds to set the Instants in java. For now I've chosen seconds, but maybe millis are always considered as a better option? WDYT?", "author": "piotr-szuberski", "createdAt": "2020-08-11T07:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NTc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxMTQ0OA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468911448", "bodyText": "Yeah I think we should prefer millis, since that more closely maps to Instant. It looks like millis is the precision supported by Kinesis based on https://docs.aws.amazon.com/kinesis/latest/APIReference/API_StartingPosition.html", "author": "TheNeuralBit", "createdAt": "2020-08-11T23:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NTc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1MTk5NA==", "url": "https://github.com/apache/beam/pull/12297#discussion_r469051994", "bodyText": "Done", "author": "piotr-szuberski", "createdAt": "2020-08-12T07:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NTc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjE0MQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468266141", "bodyText": "Can you make this argument accept a mapping and convert it to List[Tuple[..]] as is done in KafkaIO?", "author": "TheNeuralBit", "createdAt": "2020-08-11T00:57:39Z", "path": "sdks/python/apache_beam/io/kinesis.py", "diffHunk": "@@ -0,0 +1,317 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"PTransforms for supporting Kinesis streaming in Python pipelines.\n+\n+  These transforms are currently supported by Beam Flink and Spark portable\n+  runners.\n+\n+  **Setup**\n+\n+  Transforms provided in this module are cross-language transforms\n+  implemented in the Beam Java SDK. During the pipeline construction, Python SDK\n+  will connect to a Java expansion service to expand these transforms.\n+  To facilitate this, a small amount of setup is needed before using these\n+  transforms in a Beam Python pipeline.\n+\n+  There are several ways to setup cross-language Kinesis transforms.\n+\n+  * Option 1: use the default expansion service\n+  * Option 2: specify a custom expansion service\n+\n+  See below for details regarding each of these options.\n+\n+  *Option 1: Use the default expansion service*\n+\n+  This is the recommended and easiest setup option for using Python Kinesis\n+  transforms. This option is only available for Beam 2.24.0 and later.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Install Java runtime in the computer from where the pipeline is constructed\n+    and make sure that 'java' command is available.\n+\n+  In this option, Python SDK will either download (for released Beam version) or\n+  build (when running from a Beam Git clone) a expansion service jar and use\n+  that to expand transforms. Currently Kinesis transforms use the\n+  'beam-sdks-java-io-kinesis-expansion-service' jar for this purpose.\n+\n+  *Option 2: specify a custom expansion service*\n+\n+  In this option, you startup your own expansion service and provide that as\n+  a parameter when using the transforms provided in this module.\n+\n+  This option requires following pre-requisites before running the Beam\n+  pipeline.\n+\n+  * Startup your own expansion service.\n+  * Update your pipeline to provide the expansion service address when\n+    initiating Kinesis transforms provided in this module.\n+\n+  Flink Users can use the built-in Expansion Service of the Flink Runner's\n+  Job Server. If you start Flink's Job Server, the expansion service will be\n+  started on port 8097. For a different address, please set the\n+  expansion_service parameter.\n+\n+  **More information**\n+\n+  For more information regarding cross-language transforms see:\n+  - https://beam.apache.org/roadmap/portability/\n+\n+  For more information specific to Flink runner see:\n+  - https://beam.apache.org/documentation/runners/flink/\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import time\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Tuple\n+\n+from past.builtins import unicode\n+\n+from apache_beam import BeamJarExpansionService\n+from apache_beam import ExternalTransform\n+from apache_beam import NamedTupleBasedPayloadBuilder\n+\n+__all__ = [\n+    'WriteToKinesis',\n+    'ReadDataFromKinesis',\n+    'InitialPositionInStream',\n+    'WatermarkPolicy',\n+]\n+\n+\n+def default_io_expansion_service():\n+  return BeamJarExpansionService(\n+      'sdks:java:io:kinesis:expansion-service:shadowJar')\n+\n+\n+WriteToKinesisSchema = NamedTuple(\n+    'WriteToKinesisSchema',\n+    [\n+        ('stream_name', unicode),\n+        ('aws_access_key', unicode),\n+        ('aws_secret_key', unicode),\n+        ('region', unicode),\n+        ('partition_key', unicode),\n+        ('service_endpoint', Optional[unicode]),\n+        ('verify_certificate', Optional[bool]),\n+        ('producer_properties', Optional[List[Tuple[unicode, unicode]]]),\n+    ],\n+)\n+\n+\n+class WriteToKinesis(ExternalTransform):\n+  \"\"\"\n+    An external PTransform which writes byte array stream to Amazon Kinesis.\n+\n+    Experimental; no backwards compatibility guarantees.\n+  \"\"\"\n+  URN = 'beam:external:java:kinesis:write:v1'\n+\n+  def __init__(\n+      self,\n+      stream_name,\n+      aws_access_key,\n+      aws_secret_key,\n+      region,\n+      partition_key,\n+      service_endpoint=None,\n+      verify_certificate=None,\n+      producer_properties=None,\n+      expansion_service=None,\n+  ):\n+    \"\"\"\n+    Initializes a write operation to Kinesis.\n+\n+    :param stream_name: Kinesis stream name.\n+    :param aws_access_key: Kinesis access key.\n+    :param aws_secret_key: Kinesis access key secret.\n+    :param region: AWS region. Example: 'us-east-1'.\n+    :param service_endpoint: Kinesis service endpoint\n+    :param verify_certificate: Enable or disable certificate verification.\n+        Never set to False on production. True by default.\n+    :param partition_key: Specify default partition key.\n+    :param producer_properties: Specify the configuration properties for Kinesis\n+        Producer Library (KPL) as List[KV[string, string]].\n+        Example: [('CollectionMaxCount', '1000'), ('ConnectTimeout', '10000')]", "originalCommit": "e7f7370eecb235e036e46878c7395e3e24f3190d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTUyNg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468391526", "bodyText": "Done", "author": "piotr-szuberski", "createdAt": "2020-08-11T07:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNTczNw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468925737", "bodyText": "We should prefer the checker framework Nullable annotation, org.checkerframework.checker.nullness.qual.Nullable", "author": "TheNeuralBit", "createdAt": "2020-08-11T23:46:20Z", "path": "sdks/java/io/kinesis/src/main/java/org/apache/beam/sdk/io/kinesis/KinesisTransformRegistrar.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.kinesis;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.kinesis.clientlibrary.lib.worker.InitialPositionInStream;\n+import com.google.auto.service.AutoService;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.annotation.Nullable;", "originalCommit": "968829c9e02f563ca925a1bb15fb0574bb83812d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDI5NQ==", "url": "https://github.com/apache/beam/pull/12297#discussion_r469040295", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-08-12T06:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNTczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyODM0Mw==", "url": "https://github.com/apache/beam/pull/12297#discussion_r468928343", "bodyText": "Is this necessary?", "author": "TheNeuralBit", "createdAt": "2020-08-11T23:55:37Z", "path": "sdks/python/apache_beam/io/external/xlang_kinesisio_it_test.py", "diffHunk": "@@ -0,0 +1,308 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+Integration test for Python cross-language pipelines for Java KinesisIO.\n+\n+If you want to run the tests on localstack then run it just with pipeline\n+options.\n+\n+To test it on a real AWS account you need to pass some additional params, e.g.:\n+python setup.py nosetests \\\n+--tests=apache_beam.io.external.xlang_kinesisio_it_test \\\n+--test-pipeline-options=\"\n+  --use_real_aws\n+  --aws_kinesis_stream=<STREAM_NAME>\n+  --aws_access_key=<AWS_ACCESS_KEY>\n+  --aws_secret_key=<AWS_SECRET_KEY>\n+  --aws_region=<AWS_REGION>\n+  --runner=FlinkRunner\"\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import argparse\n+import logging\n+import time\n+import unittest\n+import uuid\n+\n+import apache_beam as beam\n+from apache_beam.io.kinesis import InitialPositionInStream\n+from apache_beam.io.kinesis import ReadDataFromKinesis\n+from apache_beam.io.kinesis import WriteToKinesis\n+from apache_beam.options.pipeline_options import PipelineOptions\n+from apache_beam.options.pipeline_options import StandardOptions\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+\n+# pylint: disable=wrong-import-order, wrong-import-position, ungrouped-imports\n+try:\n+  import boto3\n+except ImportError:\n+  boto3 = None\n+\n+try:\n+  from testcontainers.core.container import DockerContainer\n+except ImportError:\n+  DockerContainer = None\n+# pylint: enable=wrong-import-order, wrong-import-position, ungrouped-imports\n+\n+LOCALSTACK_VERSION = '0.11.3'\n+NUM_RECORDS = 10\n+NOW = time.time()\n+RECORD = b'record' + str(uuid.uuid4()).encode()\n+\n+\n+@unittest.skipUnless(DockerContainer, 'testcontainers is not installed.')\n+@unittest.skipUnless(boto3, 'boto3 is not installed.')\n+@unittest.skipUnless(\n+    TestPipeline().get_pipeline_options().view_as(StandardOptions).runner,\n+    'Do not run this test on precommit suites.')\n+class CrossLanguageKinesisIOTest(unittest.TestCase):\n+  @unittest.skipUnless(\n+      TestPipeline().get_option('aws_kinesis_stream'),\n+      'Cannot test on real aws without pipeline options provided')\n+  def test_kinesis_io_roundtrip(self):\n+    # TODO: enable this test for localstack once BEAM-10664 is resolved\n+    self.run_kinesis_write()\n+    self.run_kinesis_read()\n+\n+  @unittest.skipIf(\n+      TestPipeline().get_option('aws_kinesis_stream'),\n+      'Do not test on localstack when pipeline options were provided')\n+  def test_kinesis_write(self):\n+    # TODO: remove this test once BEAM-10664 is resolved\n+    self.run_kinesis_write()\n+    records = self.kinesis_helper.read_from_stream(self.aws_kinesis_stream)\n+    self.assertEqual(\n+        sorted(records),\n+        sorted([RECORD + str(i).encode() for i in range(NUM_RECORDS)]))\n+\n+  def run_kinesis_write(self):\n+    with TestPipeline(options=PipelineOptions(self.pipeline_args)) as p:\n+      p.not_use_test_runner_api = True\n+      _ = (\n+          p\n+          | 'Impulse' >> beam.Impulse()\n+          | 'Generate' >> beam.FlatMap(lambda x: range(NUM_RECORDS))  # pylint: disable=range-builtin-not-iterating\n+          | 'Map to bytes' >>\n+          beam.Map(lambda x: RECORD + str(x).encode()).with_output_types(bytes)\n+          | 'WriteToKinesis' >> WriteToKinesis(\n+              stream_name=self.aws_kinesis_stream,\n+              aws_access_key=self.aws_access_key,\n+              aws_secret_key=self.aws_secret_key,\n+              region=self.aws_region,\n+              service_endpoint=self.aws_service_endpoint,\n+              verify_certificate=(not self.use_localstack),\n+              partition_key='1',\n+          ))\n+\n+  def run_kinesis_read(self):\n+    records = [RECORD + str(i).encode() for i in range(NUM_RECORDS)]\n+\n+    with TestPipeline(options=PipelineOptions(self.pipeline_args)) as p:\n+      result = (\n+          p\n+          | 'ReadFromKinesis' >> ReadDataFromKinesis(\n+              stream_name=self.aws_kinesis_stream,\n+              aws_access_key=self.aws_access_key,\n+              aws_secret_key=self.aws_secret_key,\n+              region=self.aws_region,\n+              service_endpoint=self.aws_service_endpoint,\n+              verify_certificate=not self.use_localstack,\n+              max_num_records=NUM_RECORDS,\n+              max_read_time=300,  # 5min\n+              initial_position_in_stream=InitialPositionInStream.AT_TIMESTAMP,\n+              initial_timestamp_in_stream=int(NOW),\n+          ).with_output_types(bytes))\n+      assert_that(result, equal_to(records))\n+\n+  def set_localstack(self):\n+    self.localstack = DockerContainer('localstack/localstack:{}'\n+                                      .format(LOCALSTACK_VERSION))\\\n+      .with_env('SERVICES', 'kinesis')\\\n+      .with_env('KINESIS_PORT', '4568')\\\n+      .with_env('USE_SSL', 'true')\\\n+      .with_exposed_ports(4568)\\\n+      .with_volume_mapping('/var/run/docker.sock', '/var/run/docker.sock', 'rw')\n+\n+    # Repeat if ReadTimeout is raised.\n+    for i in range(4):\n+      try:\n+        self.localstack.start()\n+        break\n+      except Exception as e:  # pylint: disable=bare-except\n+        if i == 3:\n+          logging.error('Could not initialize localstack container')\n+          raise e\n+\n+    self.aws_service_endpoint = 'https://{}:{}'.format(\n+        self.localstack.get_container_host_ip(),\n+        self.localstack.get_exposed_port('4568'),\n+    )\n+\n+  def setUp(self):\n+    parser = argparse.ArgumentParser()\n+\n+    parser.add_argument(\n+        '--aws_kinesis_stream',\n+        default='beam_kinesis_xlang',\n+        help='Kinesis stream name',\n+    )\n+    parser.add_argument(\n+        '--aws_access_key',\n+        default='accesskey',\n+        help=('Aws access key'),\n+    )\n+    parser.add_argument(\n+        '--aws_secret_key',\n+        default='secretkey',\n+        help='Aws secret key',\n+    )\n+    parser.add_argument(\n+        '--aws_region',\n+        default='us-east-1',\n+        help='Aws region',\n+    )\n+    parser.add_argument(\n+        '--aws_service_endpoint',\n+        default=None,\n+        help='Url to external aws endpoint',\n+    )\n+    parser.add_argument(\n+        '--use_real_aws',\n+        default=False,\n+        dest='use_real_aws',\n+        action='store_true',\n+        help='Flag whether to use real aws for the tests purpose',\n+    )\n+    parser.add_argument(\n+        '--expansion_service',\n+        help='Url to externally launched expansion service.',\n+    )\n+\n+    pipeline = TestPipeline()\n+    argv = pipeline.get_full_options_as_args()\n+\n+    known_args, self.pipeline_args = parser.parse_known_args(argv)\n+\n+    self.aws_kinesis_stream = known_args.aws_kinesis_stream\n+    self.aws_access_key = known_args.aws_access_key\n+    self.aws_secret_key = known_args.aws_secret_key\n+    self.aws_region = known_args.aws_region\n+    self.aws_service_endpoint = known_args.aws_service_endpoint\n+    self.use_localstack = not known_args.use_real_aws\n+    self.expansion_service = known_args.expansion_service\n+\n+    if self.use_localstack:\n+      self.set_localstack()\n+\n+    self.kinesis_helper = KinesisHelper(\n+        self.aws_access_key,\n+        self.aws_secret_key,\n+        self.aws_region,\n+        self.aws_service_endpoint.replace('https', 'http')", "originalCommit": "968829c9e02f563ca925a1bb15fb0574bb83812d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3MjEyNg==", "url": "https://github.com/apache/beam/pull/12297#discussion_r469072126", "bodyText": "Yes, otherwise test fails on certificate verification. Http/Https is the way the python sdk chooses whether to verify or not.", "author": "piotr-szuberski", "createdAt": "2020-08-12T07:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyODM0Mw=="}], "type": "inlineReview"}, {"oid": "f43d61dab5ad87c3aa3ecbd9ea1a570ebf5a82cb", "url": "https://github.com/apache/beam/commit/f43d61dab5ad87c3aa3ecbd9ea1a570ebf5a82cb", "message": "Add more params to the test pipeline", "committedDate": "2020-08-12T08:12:46Z", "type": "forcePushed"}, {"oid": "8b1ce67c173c6aa06122ee1df5146639fd5c3e22", "url": "https://github.com/apache/beam/commit/8b1ce67c173c6aa06122ee1df5146639fd5c3e22", "message": "[BEAM-10138][BEAM-10137] Create kinesis expansion-service", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "63a2bfc712ed10b3d336b95f140ac9f2b6c0e9aa", "url": "https://github.com/apache/beam/commit/63a2bfc712ed10b3d336b95f140ac9f2b6c0e9aa", "message": "[BEAM-10138] Add Cross-language KinesisWrite external transform", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "2e42af17518cb42ed75d5556b32311289f05c07b", "url": "https://github.com/apache/beam/commit/2e42af17518cb42ed75d5556b32311289f05c07b", "message": "[BEAM-10137] Generify KinesisIO.Read", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "7fc3dddb21ffd0d5bc9b0740be58cbbfacefa45a", "url": "https://github.com/apache/beam/commit/7fc3dddb21ffd0d5bc9b0740be58cbbfacefa45a", "message": "[BEAM-10137] Add Cross-language KinesisIO.Read external transform registrar", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "71bdd3099887602a7e4e6bc2e236b4967146b53b", "url": "https://github.com/apache/beam/commit/71bdd3099887602a7e4e6bc2e236b4967146b53b", "message": "[BEAM-10137][BEAM-10138] Add Python wrapper for Cross-language Java KinesisIO", "committedDate": "2020-08-31T06:23:56Z", "type": "commit"}, {"oid": "e31d47053dc94c6d3795e6a415bb14f895d94ec8", "url": "https://github.com/apache/beam/commit/e31d47053dc94c6d3795e6a415bb14f895d94ec8", "message": "[BEAM-10137][BEAM-10138] Add integration tests for Python wrapper for Cross-language KinesisIO", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "ab8735ae56f82a2dc4f11bd285d7b7c3b9b6ca0a", "url": "https://github.com/apache/beam/commit/ab8735ae56f82a2dc4f11bd285d7b7c3b9b6ca0a", "message": "Split the tests for localstack and real aws", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "602e2f94231301635926c10bc866287874d616d8", "url": "https://github.com/apache/beam/commit/602e2f94231301635926c10bc866287874d616d8", "message": "Use dict instead of list[kv]", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "ed5637acde271a45655e7bc55b0a85e0f0d202fe", "url": "https://github.com/apache/beam/commit/ed5637acde271a45655e7bc55b0a85e0f0d202fe", "message": "replace assert with warning when future timestamp provided", "committedDate": "2020-08-31T06:29:08Z", "type": "commit"}, {"oid": "c0ea87e5d1a5b3e359755becdce23c80870ac8a2", "url": "https://github.com/apache/beam/commit/c0ea87e5d1a5b3e359755becdce23c80870ac8a2", "message": "Change to checker Nullable", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "6ac3fc541006eb19786ff42230c8c152e80587a3", "url": "https://github.com/apache/beam/commit/6ac3fc541006eb19786ff42230c8c152e80587a3", "message": "Move enums to the end of file", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "f25f2371d9803c2ca860ef2ca00ab75390c02739", "url": "https://github.com/apache/beam/commit/f25f2371d9803c2ca860ef2ca00ab75390c02739", "message": "Add Mapping instead of kv list", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "5d87990d0dbfb132231edc93cfe2e021ae6e56bc", "url": "https://github.com/apache/beam/commit/5d87990d0dbfb132231edc93cfe2e021ae6e56bc", "message": "Change seconds to millis", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "3ea7b96aeaa1ef5f53bb932ccafa02287a93b1fc", "url": "https://github.com/apache/beam/commit/3ea7b96aeaa1ef5f53bb932ccafa02287a93b1fc", "message": "Improve params validation", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "4125094001bb5e70950b5137a31d089ee154d97e", "url": "https://github.com/apache/beam/commit/4125094001bb5e70950b5137a31d089ee154d97e", "message": "Add more params to the test pipeline", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "33cf24610a51c6db5e84f07776c5233de40f5fcf", "url": "https://github.com/apache/beam/commit/33cf24610a51c6db5e84f07776c5233de40f5fcf", "message": "Change deprecated knownBuilders to knownBuilderInstances", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "16747d195c558425de0a50bc1a78fe57a5811433", "url": "https://github.com/apache/beam/commit/16747d195c558425de0a50bc1a78fe57a5811433", "message": "Improve boolean expression", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "a9345ef947f0ac30e9201600fcaab6a79299fdcf", "url": "https://github.com/apache/beam/commit/a9345ef947f0ac30e9201600fcaab6a79299fdcf", "message": "run spotless", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "url": "https://github.com/apache/beam/commit/42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "message": "Fix linter", "committedDate": "2020-08-31T06:29:09Z", "type": "commit"}, {"oid": "42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "url": "https://github.com/apache/beam/commit/42c62b16a5e379716c0a4a66af8fc08cbea0e0fb", "message": "Fix linter", "committedDate": "2020-08-31T06:29:09Z", "type": "forcePushed"}]}