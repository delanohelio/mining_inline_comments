{"pr_number": 12531, "pr_title": "[BEAM-10676] Use the fire timestamp as the output timestamp for timers", "pr_createdAt": "2020-08-11T15:55:32Z", "pr_url": "https://github.com/apache/beam/pull/12531", "timeline": [{"oid": "b24a2dcef255232012b7bfb29dcee70d3667e89b", "url": "https://github.com/apache/beam/commit/b24a2dcef255232012b7bfb29dcee70d3667e89b", "message": "[BEAM-10676] Use the fire timestamp as the output timestamp for timers\n\nBy default, the Python SDK adds a timer output timestamp equal to the current\ntimestamp of an element. This is problematic because:\n\n1. We hold back the output watermark on the current element's timestamp for\n   every timer\n2. It doesn't match the behavior in the Java SDK which defaults to using the\n   fire timestamp as the timer output timestamp (and adds a hold on it)\n3. There is no way for the user to influence this behavior because there is no\n   user-facing API\n\nWe should use the fire timestamp as the default output timestamp.", "committedDate": "2020-08-11T15:47:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjIxMw==", "url": "https://github.com/apache/beam/pull/12531#discussion_r468822213", "bodyText": "Can we only use fire_timestamp as hold_timestamp when in event time domain?", "author": "boyuanzz", "createdAt": "2020-08-11T19:43:09Z", "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -647,7 +647,7 @@ def set(self, ts):\n         windows=(self._window, ),\n         clear_bit=False,\n         fire_timestamp=ts,\n-        hold_timestamp=self._input_timestamp,\n+        hold_timestamp=ts,", "originalCommit": "b24a2dcef255232012b7bfb29dcee70d3667e89b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2ODg2Ng==", "url": "https://github.com/apache/beam/pull/12531#discussion_r469068866", "bodyText": "Do you mean to keep the input timestamp if we have a processing time timer?\nAs far as I'm concerned, the hold/output timestamp is only relevant for event time timers. Processing timers do not operate in event time and thus do not respect this timestamp, no matter what it is set to. Unless there is a good reason for introducing this conditional behavior, I'd keep it as-is.", "author": "mxm", "createdAt": "2020-08-12T07:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3MzkwMQ==", "url": "https://github.com/apache/beam/pull/12531#discussion_r469073901", "bodyText": "Also noting that having the fire timestamp as the output timestamp is consistent with the Java reference implementation.", "author": "mxm", "createdAt": "2020-08-12T07:54:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwODc3Mg==", "url": "https://github.com/apache/beam/pull/12531#discussion_r469108772", "bodyText": "Just saw the thread on the mailing list. I didn't know that the behavior for processing timers is different. I'm unsure whether that makes sense but I'll adjust it to be consistent with Java.", "author": "mxm", "createdAt": "2020-08-12T08:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgyMjIxMw=="}], "type": "inlineReview"}, {"oid": "62bf4f3376766ccccea738c7e6a9f162796d14f8", "url": "https://github.com/apache/beam/commit/62bf4f3376766ccccea738c7e6a9f162796d14f8", "message": "Use input timestamp as the output timestamp for processing timers", "committedDate": "2020-08-12T09:13:29Z", "type": "commit"}, {"oid": "b589047a1dac8251b260d4c380333b88abb724b0", "url": "https://github.com/apache/beam/commit/b589047a1dac8251b260d4c380333b88abb724b0", "message": "Add test", "committedDate": "2020-08-12T09:13:56Z", "type": "commit"}, {"oid": "f2ce7cfacfc868dce98f05ee16943bf26ad2f0e1", "url": "https://github.com/apache/beam/commit/f2ce7cfacfc868dce98f05ee16943bf26ad2f0e1", "message": "lint", "committedDate": "2020-08-12T09:38:16Z", "type": "commit"}]}