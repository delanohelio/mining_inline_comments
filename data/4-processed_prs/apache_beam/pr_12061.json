{"pr_number": 12061, "pr_title": "[BEAM-4634] Add options to allow BigQuery StandardSQL queries.", "pr_createdAt": "2020-06-23T04:17:36Z", "pr_url": "https://github.com/apache/beam/pull/12061", "timeline": [{"oid": "7ae992cd5e1f90cb4c305715c8771f9a0554a14d", "url": "https://github.com/apache/beam/commit/7ae992cd5e1f90cb4c305715c8771f9a0554a14d", "message": "Add options to allow BigQuery StandardSQL queries.", "committedDate": "2020-06-23T04:09:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NTE5Nw==", "url": "https://github.com/apache/beam/pull/12061#discussion_r444345197", "bodyText": "I'm less familiar with Big Query and it's option set, but consider switching this to a variadic list of functional options ala https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis  In particular, this avoids a breaking compile change when the (admitedly few) users of this function update their beam.\nIt doesn't remove the need for a QueryOptions struct to serialize the options, but it does allow the callsite to not have empty options every time.\nI don't feel super strongly about this as it's likely this package will likely need updating when we fix module versioning, but it's a suggestion worth discussing.", "author": "lostluck", "createdAt": "2020-06-23T16:14:54Z", "path": "sdks/go/pkg/beam/io/bigqueryio/bigquery.go", "diffHunk": "@@ -90,21 +90,27 @@ func Read(s beam.Scope, project, table string, t reflect.Type) beam.PCollection\n \n \t// TODO(herohde) 7/13/2017: using * is probably too inefficient. We could infer\n \t// a focused query from the type.\n-\treturn query(s, project, fmt.Sprintf(\"SELECT * from [%v]\", table), t)\n+\treturn query(s, project, fmt.Sprintf(\"SELECT * from [%v]\", table), t, nil)\n+}\n+\n+// QueryOptions represents additional options for executing a query.\n+type QueryOptions struct {", "originalCommit": "7ae992cd5e1f90cb4c305715c8771f9a0554a14d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MTI0OA==", "url": "https://github.com/apache/beam/pull/12061#discussion_r444481248", "bodyText": "Done.\nI agree, this is a cleaner design. I couldn't think of the phrase \"variadic list of functional options\" to save my life.", "author": "bamnet", "createdAt": "2020-06-23T20:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0NTE5Nw=="}], "type": "inlineReview"}, {"oid": "93cc99b78933559260b18f002e6c7ca3a4e464f5", "url": "https://github.com/apache/beam/commit/93cc99b78933559260b18f002e6c7ca3a4e464f5", "message": "Switch to list of functional options.\n\nThis API design feels cleaner and introducing a breaking change.", "committedDate": "2020-06-23T20:12:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0ODYxNQ==", "url": "https://github.com/apache/beam/pull/12061#discussion_r444548615", "bodyText": "Part of the functional options is to have the user level functions return functions. This allows for closures over user configuration for more complicated options later on.  Probably doesn't matter in this case, but otherwise:\neg.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            func UseStandardSQL(qo *QueryOptions) error {\n          \n          \n            \n            \tqo.UseStandardSQL = true\n          \n          \n            \n            \treturn nil\n          \n          \n            \n            }\n          \n          \n            \n            func UseStandardSQL() func(qo *QueryOptions) error {\n          \n          \n            \n            \treturn func(qo *QueryOptions) error\n          \n          \n            \n            \t\tqo.UseStandardSQL = true\n          \n          \n            \n            \t\treturn nil\n          \n          \n            \n            \t}\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nI'd probably drop the \"use\" so it's just StandardSQL.  When there are more of these, the repeated Use prefix will get tiresome and reduce readability.", "author": "lostluck", "createdAt": "2020-06-23T22:44:36Z", "path": "sdks/go/pkg/beam/io/bigqueryio/bigquery.go", "diffHunk": "@@ -93,18 +93,37 @@ func Read(s beam.Scope, project, table string, t reflect.Type) beam.PCollection\n \treturn query(s, project, fmt.Sprintf(\"SELECT * from [%v]\", table), t)\n }\n \n+// QueryOptions represents additional options for executing a query.\n+type QueryOptions struct {\n+\t// UseStandardSQL enables BigQuery's Standard SQL dialect when executing a query.\n+\tUseStandardSQL bool\n+}\n+\n+// UseStandardSQL enables BigQuery's Standard SQL dialect when executing a query.\n+func UseStandardSQL(qo *QueryOptions) error {\n+\tqo.UseStandardSQL = true\n+\treturn nil\n+}", "originalCommit": "93cc99b78933559260b18f002e6c7ca3a4e464f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2NTkxNg==", "url": "https://github.com/apache/beam/pull/12061#discussion_r444565916", "bodyText": "Done.  Swapped to returning a function.\nI left the Use prefix to match the the Python and Java BigQuery IO packages and base BQ library. Other config options, like flatten results and validation, don't follow this pattern so I expect this to be a one-off (feels like legacy decision from the BigQuery API design). Happy to change tho, LMK!", "author": "bamnet", "createdAt": "2020-06-23T23:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0ODYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3OTUwNQ==", "url": "https://github.com/apache/beam/pull/12061#discussion_r444579505", "bodyText": "Works for me! Consistency with the deeper BigQuery options certainly trumps local verbosity.\nThanks!", "author": "lostluck", "createdAt": "2020-06-24T00:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU0ODYxNQ=="}], "type": "inlineReview"}, {"oid": "0a5602298627592b7c09d9620287268221f0c996", "url": "https://github.com/apache/beam/commit/0a5602298627592b7c09d9620287268221f0c996", "message": "Return a function.\n\nThis allows for more complicated configuration options later on.", "committedDate": "2020-06-23T23:31:00Z", "type": "commit"}]}