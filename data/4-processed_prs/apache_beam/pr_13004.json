{"pr_number": 13004, "pr_title": "[BEAM-7746] Get mypy passing on transforms", "pr_createdAt": "2020-10-02T21:17:18Z", "pr_url": "https://github.com/apache/beam/pull/13004", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NDczMg==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499054732", "bodyText": "upgrading to the latest mypy lets us drop these", "author": "chadrik", "createdAt": "2020-10-02T21:18:43Z", "path": "sdks/python/apache_beam/transforms/combiners.py", "diffHunk": "@@ -968,13 +968,13 @@ def expand(self, pcoll):\n         return (\n             pcoll\n             | core.ParDo(self.add_timestamp).with_output_types(\n-                Tuple[T, TimestampType])  # type: ignore[misc]", "originalCommit": "dba4827d1ceb7034a2f778f5586513a36dc1b7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4NzAyMA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499787020", "bodyText": "Nice? Does it cause any other issues?", "author": "robertwb", "createdAt": "2020-10-05T18:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NDczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMTQ2NA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499831464", "bodyText": "No, I was pretty surprised.", "author": "chadrik", "createdAt": "2020-10-05T19:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NDczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NTA4MA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499055080", "bodyText": "I split these into two tests to avoid overwriting the same variable with different types, and it seemed better to test smaller units, regardless", "author": "chadrik", "createdAt": "2020-10-02T21:19:45Z", "path": "sdks/python/apache_beam/transforms/combiners_test.py", "diffHunk": "@@ -416,7 +416,7 @@ def test_tuple_combine_fn_without_defaults(self):\n                   max).with_common_input()).without_defaults())\n       assert_that(result, equal_to([(1, 7.0 / 4, 3)]))\n \n-  def test_to_list_and_to_dict(self):", "originalCommit": "dba4827d1ceb7034a2f778f5586513a36dc1b7d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NjUyNQ==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499056525", "bodyText": "I added a base class so that I could have a return type for UserStateContext.get_timer().  Also see bundle_processor. OutputTimer (at the top of the PR).\nAn alternative to this would be to create a Protocol, but that seemed needlessly complex.", "author": "chadrik", "createdAt": "2020-10-02T21:23:54Z", "path": "sdks/python/apache_beam/transforms/userstate.py", "diffHunk": "@@ -305,23 +323,37 @@ def validate_stateful_dofn(dofn):\n                        (timer_spec, method_name, dofn))\n \n \n-class RuntimeTimer(object):\n+class BaseTimer(object):", "originalCommit": "dba4827d1ceb7034a2f778f5586513a36dc1b7d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5MjE4NQ==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499792185", "bodyText": "This is good.", "author": "robertwb", "createdAt": "2020-10-05T18:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA1NjUyNQ=="}], "type": "inlineReview"}, {"oid": "fc97fbe36b24faf30d559c12f4448d112a74d7a2", "url": "https://github.com/apache/beam/commit/fc97fbe36b24faf30d559c12f4448d112a74d7a2", "message": "Update mypy to 0.782\n\nThis resolves a bunch of spurious errors in the transforms package which would otherwise need to be ignored.", "committedDate": "2020-10-02T21:24:46Z", "type": "commit"}, {"oid": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "url": "https://github.com/apache/beam/commit/36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "message": "[BEAM-7746] Add type checking to transforms", "committedDate": "2020-10-02T21:25:14Z", "type": "commit"}, {"oid": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "url": "https://github.com/apache/beam/commit/36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "message": "[BEAM-7746] Add type checking to transforms", "committedDate": "2020-10-02T21:25:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4NzkzNg==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499787936", "bodyText": "Is there any advantage to (untyped) typing.Callable?", "author": "robertwb", "createdAt": "2020-10-05T18:23:03Z", "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -2394,8 +2399,8 @@ class GroupBy(PTransform):\n   \"\"\"\n   def __init__(\n       self,\n-      *fields,  # type: typing.Union[str, callable]\n-      **kwargs  # type: typing.Union[str, callable]\n+      *fields,  # type: typing.Union[str, typing.Callable]", "originalCommit": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMjA4MA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499832080", "bodyText": "mypy does not accept callable: Function \"builtins.callable\" is not valid as a type", "author": "chadrik", "createdAt": "2020-10-05T19:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODM4NQ==", "url": "https://github.com/apache/beam/pull/13004#discussion_r505698385", "bodyText": "Oh, yes, of course. callable is a function returning whether its argument is callable.", "author": "robertwb", "createdAt": "2020-10-15T16:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4NzkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4ODY0OQ==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499788649", "bodyText": "Is it possible to suppress the warning rather than take this branch at runtime-only (which feels odd)?", "author": "robertwb", "createdAt": "2020-10-05T18:24:29Z", "path": "sdks/python/apache_beam/transforms/core.py", "diffHunk": "@@ -2465,22 +2470,28 @@ def expand(self, pcoll):\n     return pcoll | Map(lambda x: (self._key_func()(x), x)) | GroupByKey()\n \n \n-_dynamic_named_tuple_cache = {}\n+_dynamic_named_tuple_cache = {\n+}  # type: typing.Dict[typing.Tuple[str, typing.Tuple[str, ...]], typing.Type[tuple]]\n \n \n def _dynamic_named_tuple(type_name, field_names):\n+  # type: (str, typing.Tuple[str, ...]) -> typing.Type[tuple]\n   cache_key = (type_name, field_names)\n   result = _dynamic_named_tuple_cache.get(cache_key)\n   if result is None:\n     import collections\n     result = _dynamic_named_tuple_cache[cache_key] = collections.namedtuple(\n         type_name, field_names)\n-    result.__reduce__ = lambda self: (\n-        _unpickle_dynamic_named_tuple, (type_name, field_names, tuple(self)))\n+    if not typing.TYPE_CHECKING:", "originalCommit": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMjU5Mg==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499832592", "bodyText": "Sure, I'll make that change.", "author": "chadrik", "createdAt": "2020-10-05T19:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4ODY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxNTMzNw==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499915337", "bodyText": "Done", "author": "chadrik", "createdAt": "2020-10-05T22:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4ODY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4OTYwMg==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499789602", "bodyText": "It'll be good to actually start enforcing these type checks so they don't go out of date...", "author": "robertwb", "createdAt": "2020-10-05T18:26:12Z", "path": "sdks/python/apache_beam/transforms/environments.py", "diffHunk": "@@ -52,7 +55,7 @@\n from apache_beam.utils import proto_utils\n \n if TYPE_CHECKING:\n-  from apache_beam.options.pipeline_options import PortablePipelineOptions\n+  from apache_beam.options.pipeline_options import PortableOptions", "originalCommit": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5MDkxNA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499790914", "bodyText": "T?", "author": "robertwb", "createdAt": "2020-10-05T18:28:45Z", "path": "sdks/python/apache_beam/transforms/stats.py", "diffHunk": "@@ -426,14 +432,15 @@ def __next__(self):\n     return QuantileBufferIterator(self.elements, self.weighted, self.weight)\n \n \n-class _QuantileState(object):\n+class _QuantileState(Generic[T]):\n   \"\"\"\n   Compact summarization of a collection on which quantiles can be estimated.\n   \"\"\"\n-  min_val = None  # Holds smallest item in the list\n-  max_val = None  # Holds largest item in the list\n+  min_val = None  # type: Any  # Holds smallest item in the list", "originalCommit": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNzIwOQ==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499907209", "bodyText": "Short answer: true.\nLong answer:  everywhere that I've typed this as T is actually Union[Tuple[T, float], T].  I just tried fully typing this module and it's a quagmire, because this module has several classes that vary their types based on an attribute (weighted).  Furthermore, we can't distinguish between the types using isinstance (because it's always a list, it's just the element type that varies).  So typing this properly either involves lots of typing.cast or breaking these classes into weighted and non-weighted subclasses.  I'd like to defer this until later.", "author": "chadrik", "createdAt": "2020-10-05T22:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5MDkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0NDE5NA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r501244194", "bodyText": "Ack, thanks for the explanation.", "author": "robertwb", "createdAt": "2020-10-07T19:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5MDkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5Mjg5Mw==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499792893", "bodyText": "This should be a Coder[BoundedWindow].  We could even make WindowFn parameterized by the window type, and restrict this further.", "author": "robertwb", "createdAt": "2020-10-05T18:32:30Z", "path": "sdks/python/apache_beam/transforms/window.py", "diffHunk": "@@ -164,14 +168,19 @@ def merge(self, merge_context):\n     raise NotImplementedError\n \n   def is_merging(self):\n+    # type: () -> bool\n+\n     \"\"\"Returns whether this WindowFn merges windows.\"\"\"\n     return True\n \n   @abc.abstractmethod\n   def get_window_coder(self):\n+    # type: () -> coders.Coder", "originalCommit": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0NjM4OA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499846388", "bodyText": "coder.Coder is not yet Generic, so we can't do that just yet, though we can do this in a future PR.  So this should not be one of the *WindowCoder types?", "author": "chadrik", "createdAt": "2020-10-05T20:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5Mjg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NDc0OA==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499794748", "bodyText": "PythonFormatter needs another pass here.", "author": "robertwb", "createdAt": "2020-10-05T18:36:07Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -709,10 +710,10 @@ def expand(self, pcoll):\n     return (\n         pcoll\n         | 'AddRandomKeys' >> Map(lambda t: (random.getrandbits(32), t)).\n-        with_input_types(T).with_output_types(KeyedT)  # type: ignore[misc]\n+        with_input_types(T).with_output_types(KeyedT)", "originalCommit": "36724f74b7dd6157d3fdee7093cb2ef7d1c5388d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwNDczNQ==", "url": "https://github.com/apache/beam/pull/13004#discussion_r499904735", "bodyText": "fixed", "author": "chadrik", "createdAt": "2020-10-05T22:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NDc0OA=="}], "type": "inlineReview"}, {"oid": "35c8efabc1b50a6a41883635a7a3796f088c05ab", "url": "https://github.com/apache/beam/commit/35c8efabc1b50a6a41883635a7a3796f088c05ab", "message": "fixes", "committedDate": "2020-10-05T20:15:55Z", "type": "commit"}, {"oid": "35c8efabc1b50a6a41883635a7a3796f088c05ab", "url": "https://github.com/apache/beam/commit/35c8efabc1b50a6a41883635a7a3796f088c05ab", "message": "fixes", "committedDate": "2020-10-05T20:15:55Z", "type": "forcePushed"}]}