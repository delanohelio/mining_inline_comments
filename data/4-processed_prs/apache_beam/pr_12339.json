{"pr_number": 12339, "pr_title": "Interactive: clean up when pipeline is out of scope", "pr_createdAt": "2020-07-22T19:58:05Z", "pr_url": "https://github.com/apache/beam/pull/12339", "timeline": [{"oid": "dcfbaf90f646b0c99e075feb708bb3ea2497a697", "url": "https://github.com/apache/beam/commit/dcfbaf90f646b0c99e075feb708bb3ea2497a697", "message": "Interactive: clean up when pipeline is out of scope\n\n1. Completed the cleanup routine for all internal states held by the\n   current interactive environment.\n2. Utilized the environment inspector to determine whether a pipeline is\n   out of scope: not assigned to variable and has no inspectable\n   PCollections.\n3. Invoked the cleanup every time the user defined pipelines in watched\n   scope are refreshed.\n\nChange-Id: Ia0791b865def88e81e7b1595b8430d3a9df9516e", "committedDate": "2020-07-24T00:20:38Z", "type": "forcePushed"}, {"oid": "f79a8552cf864b98af07d9505cf594996dade9d5", "url": "https://github.com/apache/beam/commit/f79a8552cf864b98af07d9505cf594996dade9d5", "message": "Interactive: clean up when pipeline is out of scope\n\n1. Completed the cleanup routine for all internal states held by the\n   current interactive environment.\n2. Utilized the environment inspector to determine whether a pipeline is\n   out of scope: not assigned to variable and has no inspectable\n   PCollections.\n3. Invoked the cleanup every time the user defined pipelines in watched\n   scope are refreshed.\n\nChange-Id: Ia0791b865def88e81e7b1595b8430d3a9df9516e", "committedDate": "2020-07-24T00:22:29Z", "type": "forcePushed"}, {"oid": "1ae5c234599a023a576071ff7f2cd4054881f8e1", "url": "https://github.com/apache/beam/commit/1ae5c234599a023a576071ff7f2cd4054881f8e1", "message": "Interactive: clean up when pipeline is out of scope\n\n1. Completed the cleanup routine for all internal states held by the\n   current interactive environment.\n2. Utilized the environment inspector to determine whether a pipeline is\n   out of scope: not assigned to variable and has no inspectable\n   PCollections.\n3. Invoked the cleanup every time the user defined pipelines in watched\n   scope are refreshed.\n\nChange-Id: Ia0791b865def88e81e7b1595b8430d3a9df9516e", "committedDate": "2020-07-24T19:14:42Z", "type": "commit"}, {"oid": "f8390afa46c8575ec88c0585215c0b81efa43937", "url": "https://github.com/apache/beam/commit/f8390afa46c8575ec88c0585215c0b81efa43937", "message": "Fixed a test that didn't start a test stream server. With the new cleaning up routine, all test stream servers held by current interactive environment will be stopped in the test. If the grpc server has never been started (happens in tests), the stop operation will hang for a long time.\n\nChange-Id: I2ae7ecf5e3ac11f32888887d82cd885fc64cc82f", "committedDate": "2020-07-24T22:15:14Z", "type": "commit"}, {"oid": "f8390afa46c8575ec88c0585215c0b81efa43937", "url": "https://github.com/apache/beam/commit/f8390afa46c8575ec88c0585215c0b81efa43937", "message": "Fixed a test that didn't start a test stream server. With the new cleaning up routine, all test stream servers held by current interactive environment will be stopped in the test. If the grpc server has never been started (happens in tests), the stop operation will hang for a long time.\n\nChange-Id: I2ae7ecf5e3ac11f32888887d82cd885fc64cc82f", "committedDate": "2020-07-24T22:15:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDExMQ==", "url": "https://github.com/apache/beam/pull/12339#discussion_r464650111", "bodyText": "should we check that it's running / stopped before evicting?", "author": "pabloem", "createdAt": "2020-08-03T20:40:05Z", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -364,26 +382,37 @@ def get_background_caching_job(self, pipeline):\n     \"\"\"Gets the background caching job started from the given pipeline.\"\"\"\n     return self._background_caching_jobs.get(str(id(pipeline)), None)\n \n+  def evict_background_caching_job(self, pipeline=None):\n+    \"\"\"Evicts the background caching job started from the given pipeline. Noop\n+    if the given pipeline is absent from the environment. If no pipeline is\n+    specified, evicts for all pipelines.\"\"\"\n+    if pipeline:\n+      return self._background_caching_jobs.pop(str(id(pipeline)), None)", "originalCommit": "f8390afa46c8575ec88c0585215c0b81efa43937", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1NzgyNA==", "url": "https://github.com/apache/beam/pull/12339#discussion_r464657824", "bodyText": "That should not be necessary.\nThe idea is to let cleanup clear all states and evict_* functions only do eviction for each field.\nBecause if we stop a test stream, probably, we'll also have to stop the background caching job and any other in-memory states that is related. There is rarely a case that one of the fields get evicted without clearing other fields except in some unit tests, for example:\n# In tests:\nevict_xxx()\n\n# Then in teardown, cleanup.\n\nThis also makes sure cleanup code doesn't redundantly show up in multiple places or cause infinite loop when evicting/cleanup are called by different modules.", "author": "KevinGG", "createdAt": "2020-08-03T20:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDE5Mw==", "url": "https://github.com/apache/beam/pull/12339#discussion_r464650193", "bodyText": "should we check that it's running / stopped before evicting?", "author": "pabloem", "createdAt": "2020-08-03T20:40:17Z", "path": "sdks/python/apache_beam/runners/interactive/interactive_environment.py", "diffHunk": "@@ -364,26 +382,37 @@ def get_background_caching_job(self, pipeline):\n     \"\"\"Gets the background caching job started from the given pipeline.\"\"\"\n     return self._background_caching_jobs.get(str(id(pipeline)), None)\n \n+  def evict_background_caching_job(self, pipeline=None):\n+    \"\"\"Evicts the background caching job started from the given pipeline. Noop\n+    if the given pipeline is absent from the environment. If no pipeline is\n+    specified, evicts for all pipelines.\"\"\"\n+    if pipeline:\n+      return self._background_caching_jobs.pop(str(id(pipeline)), None)\n+    self._background_caching_jobs.clear()\n+\n   def set_test_stream_service_controller(self, pipeline, controller):\n     \"\"\"Sets the test stream service controller that has started a gRPC server\n-    serving the test stream for any job started from the given user-defined\n+    serving the test stream for any job started from the given user defined\n     pipeline.\n     \"\"\"\n     self._test_stream_service_controllers[str(id(pipeline))] = controller\n \n   def get_test_stream_service_controller(self, pipeline):\n     \"\"\"Gets the test stream service controller that has started a gRPC server\n-    serving the test stream for any job started from the given user-defined\n+    serving the test stream for any job started from the given user defined\n     pipeline.\n     \"\"\"\n     return self._test_stream_service_controllers.get(str(id(pipeline)), None)\n \n   def evict_test_stream_service_controller(self, pipeline):\n     \"\"\"Evicts and pops the test stream service controller that has started a\n     gRPC server serving the test stream for any job started from the given\n-    user-defined pipeline.\n+    user defined pipeline. Noop if the given pipeline is absent from the\n+    environment. If no pipeline is specified, evicts for all pipelines.\n     \"\"\"\n-    return self._test_stream_service_controllers.pop(str(id(pipeline)), None)\n+    if pipeline:\n+      return self._test_stream_service_controllers.pop(str(id(pipeline)), None)", "originalCommit": "f8390afa46c8575ec88c0585215c0b81efa43937", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1ODQ3OQ==", "url": "https://github.com/apache/beam/pull/12339#discussion_r464658479", "bodyText": "Ditto. Evict_* only handles popping out from internal dictionaries. Other cleanup routine should be handled by cleanup.", "author": "KevinGG", "createdAt": "2020-08-03T20:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MDE5Mw=="}], "type": "inlineReview"}]}