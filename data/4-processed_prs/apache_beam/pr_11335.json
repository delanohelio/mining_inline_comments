{"pr_number": 11335, "pr_title": "[BEAM-9692]: Make CombineValues portable", "pr_createdAt": "2020-04-07T18:40:16Z", "pr_url": "https://github.com/apache/beam/pull/11335", "timeline": [{"oid": "b6a298a8351e79835538be5ec1ad821fb91bcb56", "url": "https://github.com/apache/beam/commit/b6a298a8351e79835538be5ec1ad821fb91bcb56", "message": "[BEAM-9692]: Make CombineValues portable\n\nChange-Id: If1835e4d14320149b3e18eea9c97a26d3d34ee48", "committedDate": "2020-04-07T18:41:25Z", "type": "forcePushed"}, {"oid": "40d4c47045bc67ea6a4034fc5e09bbbdd500a5e5", "url": "https://github.com/apache/beam/commit/40d4c47045bc67ea6a4034fc5e09bbbdd500a5e5", "message": "[BEAM-9692]: Move the CombineValues to a PTransformOverride\n\nChange-Id: If1835e4d14320149b3e18eea9c97a26d3d34ee48", "committedDate": "2020-04-10T21:15:04Z", "type": "forcePushed"}, {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069", "url": "https://github.com/apache/beam/commit/3d485f90f095eb4061300eadea5f2c77941cd069", "message": "[BEAM-9692]: Move the CombineValues to a PTransformOverride\n\nChange-Id: If1835e4d14320149b3e18eea9c97a26d3d34ee48", "committedDate": "2020-04-13T18:08:56Z", "type": "commit"}, {"oid": "3d485f90f095eb4061300eadea5f2c77941cd069", "url": "https://github.com/apache/beam/commit/3d485f90f095eb4061300eadea5f2c77941cd069", "message": "[BEAM-9692]: Move the CombineValues to a PTransformOverride\n\nChange-Id: If1835e4d14320149b3e18eea9c97a26d3d34ee48", "committedDate": "2020-04-13T18:08:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NzkxOA==", "url": "https://github.com/apache/beam/pull/11335#discussion_r407757918", "bodyText": "Seems this one should happen after too...", "author": "robertwb", "createdAt": "2020-04-13T22:31:17Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -110,22 +110,27 @@ class DataflowRunner(PipelineRunner):\n \n   # Imported here to avoid circular dependencies.\n   # TODO: Remove the apache_beam.pipeline dependency in CreatePTransformOverride\n+  from apache_beam.runners.dataflow.ptransform_overrides import CombineValuesPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import CreatePTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import ReadPTransformOverride\n   from apache_beam.runners.dataflow.ptransform_overrides import JrhReadPTransformOverride\n \n-  _PTRANSFORM_OVERRIDES = []  # type: List[PTransformOverride]\n+  # Thesse overrides should be applied before the proto representation of the\n+  # graph is created.\n+  _PTRANSFORM_OVERRIDES = [\n+      CombineValuesPTransformOverride()", "originalCommit": "3d485f90f095eb4061300eadea5f2c77941cd069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MzA2NA==", "url": "https://github.com/apache/beam/pull/11335#discussion_r407783064", "bodyText": "This override should place the pipeline object into the same state as if the runner had defined an apply_CombineValues, what am I missing? Looking at the code, is it because other overrides might also use a CombineValues transform so it might needed to be replaced again?", "author": "rohdesamuel", "createdAt": "2020-04-13T23:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTY3OQ==", "url": "https://github.com/apache/beam/pull/11335#discussion_r408461679", "bodyText": "I suppose this is fine; it's just preserving an inconsistency in Dataflow vs. everything else.", "author": "robertwb", "createdAt": "2020-04-14T22:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NzkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1ODUwOA==", "url": "https://github.com/apache/beam/pull/11335#discussion_r407758508", "bodyText": "Asserting that it's the first step seems brittle, maybe just assert that there is some step that has this kind?", "author": "robertwb", "createdAt": "2020-04-13T22:32:57Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "diffHunk": "@@ -566,6 +566,19 @@ def test_get_default_gcp_region_ignores_error(\n     result = runner.get_default_gcp_region()\n     self.assertIsNone(result)\n \n+  def test_combine_values_translation(self):\n+    runner = DataflowRunner()\n+\n+    with beam.Pipeline(runner=runner,\n+                       options=PipelineOptions(self.default_properties)) as p:\n+      (  # pylint: disable=expression-not-assigned\n+          p\n+          | beam.Create([('a', [1, 2]), ('b', [3, 4])])\n+          | beam.CombineValues(lambda v, _: sum(v)))\n+\n+    job_dict = json.loads(str(runner.job))\n+    self.assertEqual(job_dict[u'steps'][1][u'kind'], u'CombineValues')", "originalCommit": "3d485f90f095eb4061300eadea5f2c77941cd069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNTczNA==", "url": "https://github.com/apache/beam/pull/11335#discussion_r409125734", "bodyText": "Done, changed to assertIn", "author": "rohdesamuel", "createdAt": "2020-04-15T20:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1ODUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MDA1NQ==", "url": "https://github.com/apache/beam/pull/11335#discussion_r407760055", "bodyText": "It would be preferable to simply let try and find methods for composites as well, rather than using PTransformOverrides. This would likely help with the GBK one too.", "author": "robertwb", "createdAt": "2020-04-13T22:37:34Z", "path": "sdks/python/apache_beam/runners/dataflow/ptransform_overrides.py", "diffHunk": "@@ -111,3 +111,38 @@ def expand(self, pbegin):\n \n     return JrhRead().with_output_types(\n         ptransform.get_type_hints().simple_output_type('Read'))\n+\n+\n+class CombineValuesPTransformOverride(PTransformOverride):\n+  \"\"\"A ``PTransformOverride`` for ``CombineValues``.\n+\n+  The DataflowRunner expects that the CombineValues PTransform acts as a\n+  primitive. So this override replaces the CombineValues with a primitive.\n+  \"\"\"\n+  def matches(self, applied_ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import CombineValues\n+\n+    if isinstance(applied_ptransform.transform, CombineValues):\n+      self.transform = applied_ptransform.transform\n+      return True\n+    return False\n+\n+  def get_replacement_transform(self, ptransform):\n+    # Imported here to avoid circular dependencies.\n+    # pylint: disable=wrong-import-order, wrong-import-position\n+    from apache_beam import PTransform\n+    from apache_beam.pvalue import PCollection\n+\n+    # The DataflowRunner still needs access to the CombineValues members to", "originalCommit": "3d485f90f095eb4061300eadea5f2c77941cd069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4OTc3OQ==", "url": "https://github.com/apache/beam/pull/11335#discussion_r408289779", "bodyText": "Sorry, I don't understand what you mean. Can you elaborate? What does \"let try and find methods for composites as well\" mean? What would an alternative to PTransformOverrides be?", "author": "rohdesamuel", "createdAt": "2020-04-14T16:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MDA1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ2MTMzNw==", "url": "https://github.com/apache/beam/pull/11335#discussion_r408461337", "bodyText": "I was thinking that run_xxx could also be called for composites. That might, however, be a bigger change, so we can go with this approach.", "author": "robertwb", "createdAt": "2020-04-14T21:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MDA1NQ=="}], "type": "inlineReview"}, {"oid": "0f609e43dab58e5efe1ee996dbd2ddd517c24fc7", "url": "https://github.com/apache/beam/commit/0f609e43dab58e5efe1ee996dbd2ddd517c24fc7", "message": "Change combinvalues test to assertIn\n\nChange-Id: Iae82f36b6044e4ad0523b8b3995ce9a713ae0541", "committedDate": "2020-04-15T20:45:24Z", "type": "commit"}]}