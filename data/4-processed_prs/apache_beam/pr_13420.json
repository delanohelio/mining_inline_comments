{"pr_number": 13420, "pr_title": "Rewrite container docs for custom containers", "pr_createdAt": "2020-11-24T22:01:23Z", "pr_url": "https://github.com/apache/beam/pull/13420", "timeline": [{"oid": "7259ff9ab0e8329af193e23f8bf0172840547708", "url": "https://github.com/apache/beam/commit/7259ff9ab0e8329af193e23f8bf0172840547708", "message": "rewrite containers docs for custom containers", "committedDate": "2020-11-24T22:22:21Z", "type": "forcePushed"}, {"oid": "c9c75ab820974cd64b212821a50df3822e572df4", "url": "https://github.com/apache/beam/commit/c9c75ab820974cd64b212821a50df3822e572df4", "message": "rewrite containers docs for custom containers", "committedDate": "2020-11-24T22:26:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2NzY2OA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532767668", "bodyText": "Is this true for all of Beam, or just for Dataflow? If it's only for Dataflow it should be updated to reflect that.", "author": "tysonjh", "createdAt": "2020-11-30T17:23:14Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -32,9 +32,10 @@ Users may want to customize container images for many reasons, including:\n  This guide describes how to create and use customized containers for the Beam SDK.\n \n ### Prerequisites\n-You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n \n-In addition, you will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n+* You will need to have a version of the Beam SDK >= 2.21.0.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1ODU1NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532958554", "bodyText": "I don't think Beam has any hard requirements on customization, as long as containers exist within Beam, they could be customized and used with any runner that supports custom containers.  Consider saying: For optimal user experience, use the latest released version of Beam and move this to the bottom of the requirements.", "author": "tvalentyn", "createdAt": "2020-11-30T22:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2NzY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2ODgwMw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532768803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n          \n          \n            \n            Prebuilt SDK container images are released per supported language during Beam releases and are pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)", "author": "tysonjh", "createdAt": "2020-11-30T17:24:55Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1MTgwNw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532951807", "bodyText": "nit: period after [Docker Hub]\nThis means any execution engine can run the Beam SDK. let's remove this sentence.\nis containerized -> can be containerized. Portable runner + Flink/Spark support running SDK harness in process without involving Docker, so it's one of the options. Dataflow runner always uses SDKs in a container.", "author": "tvalentyn", "createdAt": "2020-11-30T22:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2ODgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3MjA2NQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532772065", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * pre-installing additional dependencies,\n          \n          \n            \n            * launching third-party software\n          \n          \n            \n            * further customizing the execution environment\n          \n          \n            \n            * Pre-installing additional dependencies.\n          \n          \n            \n            * Launching third-party software.\n          \n          \n            \n            * Further customizing the execution environment.", "author": "tysonjh", "createdAt": "2020-11-30T17:29:33Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NDc2Ng==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532774766", "bodyText": "Could we also include a couple other hosts in addition to Docker Hub? Google CR, Amazon ECR.", "author": "tysonjh", "createdAt": "2020-11-30T17:33:35Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3OTkyNQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532779925", "bodyText": "Jumping between 'Users' and 'You' can get confusing. I think picking 'you' is the right pronoun.", "author": "tysonjh", "createdAt": "2020-11-30T17:41:17Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MDI1Mw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532780253", "bodyText": "Maybe rephrase to,\nBeam SDK container images are built from Dockerfiles checked into the GitHub repository and published to Docker Hub every release.", "author": "tysonjh", "createdAt": "2020-11-30T17:41:47Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MDM2Nw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532780367", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n          \n          \n            \n            Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). You can build customized containers in one of two ways:", "author": "tysonjh", "createdAt": "2020-11-30T17:41:56Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MTkzOA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532781938", "bodyText": "This should match the heading mentioned above.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n          \n          \n            \n            #### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}", "author": "tysonjh", "createdAt": "2020-11-30T17:44:23Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjA0NQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532782045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n          \n          \n            \n            1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.", "author": "tysonjh", "createdAt": "2020-11-30T17:44:33Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1OTU5OQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532959599", "bodyText": "s/existing prebuilt/released ?", "author": "tvalentyn", "createdAt": "2020-11-30T23:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MjYwNA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532782604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n          \n          \n            \n            1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from).", "author": "tysonjh", "createdAt": "2020-11-30T17:45:20Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MzE3Mg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532783172", "bodyText": "The previous step covers this first phrase.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n          \n          \n            \n            2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:", "author": "tysonjh", "createdAt": "2020-11-30T17:46:09Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NDEzNg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532784136", "bodyText": "This seems like it would be better positioned under the bullet labelled 1.", "author": "tysonjh", "createdAt": "2020-11-30T17:47:34Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NDY1MA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532784650", "bodyText": "Why is this recommended? Should it be part of the steps in this section?", "author": "tysonjh", "createdAt": "2020-11-30T17:48:25Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+```\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional but recommended pull step to pull the base image into your local Docker daemon.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NDcwMA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532954700", "bodyText": "Added an explaination. I think it's fine to leave as part of the shell instructions - the reason you want to pull is to get a newer version of the base image (though there are couple of ways to force that with docker)", "author": "emilymye", "createdAt": "2020-11-30T22:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NDY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NTkxNA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532785914", "bodyText": "This should match the phrase from earlier.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #### Modifying the original Dockerfile {#modifying-dockerfiles} in Beam source\n          \n          \n            \n            #### Modifying an existing Dockerfile {#modifying-dockerfiles} in Beam source", "author": "tysonjh", "createdAt": "2020-11-30T17:50:21Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+```\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional but recommended pull step to pull the base image into your local Docker daemon.\n+docker pull \"${BASE_IMAGE}\"\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying the original Dockerfile {#modifying-dockerfiles} in Beam source", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NjkxNg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532786916", "bodyText": "Suggestion lifted from: https://developers.google.com/style/clause-order\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This method will require building image artifacts from Beam source - see the [Contribution guide](contribute/#development-setup) for additional instructions on setting up your development environment.\n          \n          \n            \n            This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).", "author": "tysonjh", "createdAt": "2020-11-30T17:51:54Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+```\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional but recommended pull step to pull the base image into your local Docker daemon.\n+docker pull \"${BASE_IMAGE}\"\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying the original Dockerfile {#modifying-dockerfiles} in Beam source\n+\n+This method will require building image artifacts from Beam source - see the [Contribution guide](contribute/#development-setup) for additional instructions on setting up your development environment.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NzM4Mw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532787383", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile).. If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n          \n          \n            \n            2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.", "author": "tysonjh", "createdAt": "2020-11-30T17:52:36Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+```\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional but recommended pull step to pull the base image into your local Docker daemon.\n+docker pull \"${BASE_IMAGE}\"\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying the original Dockerfile {#modifying-dockerfiles} in Beam source\n+\n+This method will require building image artifacts from Beam source - see the [Contribution guide](contribute/#development-setup) for additional instructions on setting up your development environment.\n+\n+1. Clone the `beam` repository.\n \n-1. Clone the `beam` repository:\n ```\n git clone https://github.com/apache/beam.git\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile).. If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4OTIxNw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532789217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            From 2.21.0, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n          \n          \n            \n            From Beam 2.21.0 and later, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:", "author": "tysonjh", "createdAt": "2020-11-30T17:55:19Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+```\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional but recommended pull step to pull the base image into your local Docker daemon.\n+docker pull \"${BASE_IMAGE}\"\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying the original Dockerfile {#modifying-dockerfiles} in Beam source\n+\n+This method will require building image artifacts from Beam source - see the [Contribution guide](contribute/#development-setup) for additional instructions on setting up your development environment.\n+\n+1. Clone the `beam` repository.\n \n-1. Clone the `beam` repository:\n ```\n git clone https://github.com/apache/beam.git\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile).. If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n+\n+4. Run Gradle with the `docker` target.\n+\n+\n+```\n+# The default repository of each SDK\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n+\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n+```\n+\n+To examine the containers that you built, run `docker images`:\n+\n+```\n+$> docker images\n+REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n+```\n+\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.\n+\n+```\n+export IMAGE_NAME=\"myrepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+docker tag apache/beam_python3.6_sdk \"${IMAGE_NAME}:${TAG}\"\n+docker push \"${IMAGE_NAME}:${TAG}\"\n+```\n+\n+**NOTE**: After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images`\n+\n+##### Additional Build Parameters\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties. With these settings, the\n+`docker` command-line tool will implicitly try to push the container to the Docker Hub Apache repository.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n+\n+```\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo -Pdocker-tag=2019-10-04\n+```\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2019-10-04`.\n+\n+From 2.21.0, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4OTU5Ng==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532789596", "bodyText": "Use sentence case for titles throughout. Lifted from: https://developers.google.com/style/capitalization#capitalization-in-titles-and-headings\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Using Container Images in Pipelines\n          \n          \n            \n            ## Using custom container images in pipelines", "author": "tysonjh", "createdAt": "2020-11-30T17:55:55Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+```\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional but recommended pull step to pull the base image into your local Docker daemon.\n+docker pull \"${BASE_IMAGE}\"\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying the original Dockerfile {#modifying-dockerfiles} in Beam source\n+\n+This method will require building image artifacts from Beam source - see the [Contribution guide](contribute/#development-setup) for additional instructions on setting up your development environment.\n+\n+1. Clone the `beam` repository.\n \n-1. Clone the `beam` repository:\n ```\n git clone https://github.com/apache/beam.git\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile).. If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n+\n+4. Run Gradle with the `docker` target.\n+\n+\n+```\n+# The default repository of each SDK\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n+\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n+```\n+\n+To examine the containers that you built, run `docker images`:\n+\n+```\n+$> docker images\n+REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n+```\n+\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.\n+\n+```\n+export IMAGE_NAME=\"myrepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+docker tag apache/beam_python3.6_sdk \"${IMAGE_NAME}:${TAG}\"\n+docker push \"${IMAGE_NAME}:${TAG}\"\n+```\n+\n+**NOTE**: After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images`\n+\n+##### Additional Build Parameters\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties. With these settings, the\n+`docker` command-line tool will implicitly try to push the container to the Docker Hub Apache repository.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n+\n+```\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo -Pdocker-tag=2019-10-04\n+```\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2019-10-04`.\n+\n+From 2.21.0, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n+\n+```\n+./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses\n+```\n+creates a Java 8 SDK image with appropriate licenses in `/opt/apache/beam/third_party_licenses/`.\n+\n+By default, no licenses/notices are added to the docker images.\n+\n+\n+## Using Container Images in Pipelines", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532791165", "bodyText": "This seems unfortunate. WDYT about Dataflow using this flag as well in the future?", "author": "tysonjh", "createdAt": "2020-11-30T17:58:25Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries.\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+### Building and pushing custom containers\n+\n+Beam builds prebuilt images from [Dockerfiles](https://docs.docker.com/engine/reference/builder/). Users can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on an existing prebuilt container**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) an existing Dockerfile in [Beam source](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from)\n+\n+2. Once you have a created a custom Dockerfile, [build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker:\n+\n+As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-docker pull apache/beam_python3.7_sdk\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+```\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional but recommended pull step to pull the base image into your local Docker daemon.\n+docker pull \"${BASE_IMAGE}\"\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying the original Dockerfile {#modifying-dockerfiles} in Beam source\n+\n+This method will require building image artifacts from Beam source - see the [Contribution guide](contribute/#development-setup) for additional instructions on setting up your development environment.\n+\n+1. Clone the `beam` repository.\n \n-1. Clone the `beam` repository:\n ```\n git clone https://github.com/apache/beam.git\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile).. If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n+\n+4. Run Gradle with the `docker` target.\n+\n+\n+```\n+# The default repository of each SDK\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n+\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n+```\n+\n+To examine the containers that you built, run `docker images`:\n+\n+```\n+$> docker images\n+REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n+```\n+\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.\n+\n+```\n+export IMAGE_NAME=\"myrepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+docker tag apache/beam_python3.6_sdk \"${IMAGE_NAME}:${TAG}\"\n+docker push \"${IMAGE_NAME}:${TAG}\"\n+```\n+\n+**NOTE**: After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images`\n+\n+##### Additional Build Parameters\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties. With these settings, the\n+`docker` command-line tool will implicitly try to push the container to the Docker Hub Apache repository.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n+\n+```\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo -Pdocker-tag=2019-10-04\n+```\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2019-10-04`.\n+\n+From 2.21.0, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n+\n+```\n+./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses\n+```\n+creates a Java 8 SDK image with appropriate licenses in `/opt/apache/beam/third_party_licenses/`.\n+\n+By default, no licenses/notices are added to the docker images.\n+\n+\n+## Using Container Images in Pipelines\n+\n+The common method for providing a container image requires using the PortableRunner and setting the `--environment_config` flag to a given image path.\n+Other runners, such as Dataflow, support specifying containers with different flags.", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2MzEyNA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532963124", "bodyText": "I think in the future there is a plan for Portable runner to support Dataflow endpoint, not sure how far on the roadmap that is.", "author": "tvalentyn", "createdAt": "2020-11-30T23:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MjE4Mg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r536392182", "bodyText": "@tvalentyn Can you send me more information on this plan if you have any?", "author": "ibzib", "createdAt": "2020-12-04T21:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyODU1NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r537928554", "bodyText": "+1 I'd like to know about this as well since we shouldn't go to GA with custom containers until the flags are settled.", "author": "tysonjh", "createdAt": "2020-12-08T00:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzNzcyMw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r537937723", "bodyText": "@ananvay @angoenka @robertwb may have input on this plan.", "author": "tvalentyn", "createdAt": "2020-12-08T00:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNjI1NQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538736255", "bodyText": "For Dataflow, I thought the idea was to use --sdk_harness_container_image or something like this? I'm not sure I have the whole context off the top of my head here, but I'd be happy to chat! :)", "author": "ananvay", "createdAt": "2020-12-08T19:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MDg4MQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r542980881", "bodyText": "Regardless of the plans for using the Portability API for submitting jobs, we should standardize on a single flag for specifying the image across runners. It could be argued that environment_config is not the best flag for this; maybe we should take it to the list?", "author": "robertwb", "createdAt": "2020-12-15T01:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4NjU5MA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r542986590", "bodyText": "Regardless of the plans for using the Portability API for submitting jobs, we should standardize on a single flag for specifying the image across runners. It could be argued that environment_config is not the best flag for this; maybe we should take it to the list?\n\n+1 I agree that standardizing the flag is a worthwhile improvement, but it's out of scope for this PR.", "author": "ibzib", "createdAt": "2020-12-15T01:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0OTkxMw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r544749913", "bodyText": "Standardizing the flag should be done before we document and adveritize this feature.", "author": "robertwb", "createdAt": "2020-12-17T01:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ0MTIxNw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r545441217", "bodyText": "Our plan was to keep these as is for preview and standardize for GA. This is also editing existing documentation which used --environment_config. I can send an email to dev re:flags.", "author": "emilymye", "createdAt": "2020-12-17T22:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ2NjAwOA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r545466008", "bodyText": "If we're supporting old SDKs, we have to support the old flag anyway, so we should go ahead and get this in and standardizing going forward.", "author": "robertwb", "createdAt": "2020-12-17T23:12:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MTE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MjE0MA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532792140", "bodyText": "Maybe add a comment about GCR here as well?", "author": "tysonjh", "createdAt": "2020-11-30T17:59:52Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -87,77 +202,28 @@ python -m apache_beam.examples.wordcount \\\n --output=path/to/write/counts \\\n --runner=PortableRunner \\\n --job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n+--environment_config=\"${IMAGE}:${TAG}\"\n {{< /highlight >}}\n \n-## Building container images\n-\n-To build Beam SDK container images:\n-\n-1. Navigate to the root directory of the local copy of your Apache Beam.\n-2. Run Gradle with the `docker` target. If you're [building a child image](#writing-new-dockerfiles), set the optional `--file` flag to the new Dockerfile. If you're [building an image from an original Dockerfile](#modifying-dockerfiles), ignore the `--file` flag:\n-\n-```\n-# The default repository of each SDK\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java8:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java11:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:go:container:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py2:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py35:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py36:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py37:docker\n-\n-# Shortcut for building all four Python SDKs\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container buildAll\n-```\n-\n-From 2.21.0, `docker-pull-licenses` tag was introduced. Licenses/notices of third party dependencies will be added to the docker images when `docker-pull-licenses` was set.\n-For example, `./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses`. The files are added to `/opt/apache/beam/third_party_licenses/`.\n-By default, no licenses/notices are added to the docker images.\n-\n-To examine the containers that you built, run `docker images` from anywhere in the command line. If you successfully built all of the container images, the command prints a table like the following:\n-```\n-REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n-apache/beam_java8_sdk              latest              ...                 2 weeks ago       ...\n-apache/beam_java11_sdk             latest              ...                 2 weeks ago       ...\n-apache/beam_python2.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.5_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.6_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_go_sdk                 latest              ...                 2 weeks ago       ...\n-```\n-\n-### Overriding default Docker targets\n-\n-The default [tag](https://docs.docker.com/engine/reference/commandline/tag/) is sdk_version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties) and the default repositories are in the Docker Hub `apache` namespace.\n-The `docker` command-line tool implicitly [pushes container images](#pushing-container-images) to this location.\n+{{< highlight class=\"runner-dataflow\" >}}\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n \n-To tag a local image, set the `docker-tag` option when building the container. The following command tags a Python SDK image with a date.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-tag=2019-10-04\n-```\n-\n-To change the repository, set the `docker-repository-root` option to a new location. The following command sets the `docker-repository-root`\n-to a repository named `example-repo` on Docker Hub.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo\n-```\n+export GCS_PATH=\"gs://my-gcs-bucket\"\n+export GCP_PROJECT=\"my-gcp-project\"\n+export REGION=\"us-central1\"", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MzU0NQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532793545", "bodyText": "Please put this into a code block or reformat.", "author": "tysonjh", "createdAt": "2020-11-30T18:02:01Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -87,77 +202,28 @@ python -m apache_beam.examples.wordcount \\\n --output=path/to/write/counts \\\n --runner=PortableRunner \\\n --job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n+--environment_config=\"${IMAGE}:${TAG}\"\n {{< /highlight >}}\n \n-## Building container images\n-\n-To build Beam SDK container images:\n-\n-1. Navigate to the root directory of the local copy of your Apache Beam.\n-2. Run Gradle with the `docker` target. If you're [building a child image](#writing-new-dockerfiles), set the optional `--file` flag to the new Dockerfile. If you're [building an image from an original Dockerfile](#modifying-dockerfiles), ignore the `--file` flag:\n-\n-```\n-# The default repository of each SDK\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java8:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java11:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:go:container:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py2:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py35:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py36:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py37:docker\n-\n-# Shortcut for building all four Python SDKs\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container buildAll\n-```\n-\n-From 2.21.0, `docker-pull-licenses` tag was introduced. Licenses/notices of third party dependencies will be added to the docker images when `docker-pull-licenses` was set.\n-For example, `./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses`. The files are added to `/opt/apache/beam/third_party_licenses/`.\n-By default, no licenses/notices are added to the docker images.\n-\n-To examine the containers that you built, run `docker images` from anywhere in the command line. If you successfully built all of the container images, the command prints a table like the following:\n-```\n-REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n-apache/beam_java8_sdk              latest              ...                 2 weeks ago       ...\n-apache/beam_java11_sdk             latest              ...                 2 weeks ago       ...\n-apache/beam_python2.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.5_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.6_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_go_sdk                 latest              ...                 2 weeks ago       ...\n-```\n-\n-### Overriding default Docker targets\n-\n-The default [tag](https://docs.docker.com/engine/reference/commandline/tag/) is sdk_version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties) and the default repositories are in the Docker Hub `apache` namespace.\n-The `docker` command-line tool implicitly [pushes container images](#pushing-container-images) to this location.\n+{{< highlight class=\"runner-dataflow\" >}}\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n \n-To tag a local image, set the `docker-tag` option when building the container. The following command tags a Python SDK image with a date.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-tag=2019-10-04\n-```\n-\n-To change the repository, set the `docker-repository-root` option to a new location. The following command sets the `docker-repository-root`\n-to a repository named `example-repo` on Docker Hub.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo\n-```\n+export GCS_PATH=\"gs://my-gcs-bucket\"\n+export GCP_PROJECT=\"my-gcp-project\"\n+export REGION=\"us-central1\"\n \n-## Pushing container images\n-\n-After [building a container image](#building-container-images), you can store it in a remote Docker repository.\n-\n-The following steps push a Python3.6 SDK image to the [`docker-root-repository` value](#overriding-default-docker-targets).\n-Please log in to the destination repository as needed.\n-\n-Upload it to the remote repository:\n-```\n-docker push example-repo/beam_python3.6_sdk\n-```\n-\n-To download the image again, run `docker pull`:\n-```\n-docker pull example-repo/beam_python3.6_sdk\n-```\n+# Run a pipeline on Dataflow.\n+# This is a Python batch pipeline, so to run on Dataflow Runner V2\n+# you must specify the experiment \"use_runner_v2\"", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2MTQ3Ng==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532961476", "bodyText": "The {{< highlight class=\"runner-X\" >}} formats it into code-blocks, tabbed by runner type - see existing page https://beam.apache.org/documentation/runtime/environments/#testing-customized-images", "author": "emilymye", "createdAt": "2020-11-30T23:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MzU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MjQyOA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r533542428", "bodyText": "Got it. I went to 'view file' in GitHub and it only showed the rendered markdown which made each of these H1 titles. Is there a way to preview?", "author": "tysonjh", "createdAt": "2020-12-01T16:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MzU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM4Nzg0NQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r536387845", "bodyText": "The best way is to serve the website from source: ./gradlew :website:serveWebsite", "author": "ibzib", "createdAt": "2020-12-04T21:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MzU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAyODIyNA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538028224", "bodyText": "You can also view the details of Website_Stage_GCS (\"Run Website_Stage_GCS PreCommit\") to find the staged version of the website. You can rerun the test if the link's gone stale.", "author": "rosetn", "createdAt": "2020-12-08T04:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5MzU0NQ=="}], "type": "inlineReview"}, {"oid": "96739ba5bbdf4255937bc7b18055247130c9a6f4", "url": "https://github.com/apache/beam/commit/96739ba5bbdf4255937bc7b18055247130c9a6f4", "message": "review edits", "committedDate": "2020-11-30T23:07:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NTM2NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532955364", "bodyText": "Consider: Launching third-party software in the worker environment., Launching third-party software in the background.", "author": "tvalentyn", "createdAt": "2020-11-30T22:51:38Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2MTI4MA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532961280", "bodyText": "This is also a soft requirement - users could use CloudBuild or other equivalents that can build a container on demand from a given Dockerfile.", "author": "tvalentyn", "createdAt": "2020-11-30T23:05:49Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -15,56 +15,168 @@ See the License for the specific language governing permissions and\n limitations under the License.\n -->\n \n-# Container environments\n+# Container Environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment is [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. This means any execution engine can run the Beam SDK. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language version during Beam releases and and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image)\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom Containers\n \n-## Customizing container images\n+Users may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* pre-installing additional dependencies,\n+* launching third-party software\n+* further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to have a version of the Beam SDK >= 2.21.0.\n+* You will need to have [Docker installed](https://docs.docker.com/get-docker/).", "originalCommit": "07a91f0bb7414cf053e64e51bc4b3c573498f784", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4MTk4Mg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r532981982", "bodyText": "I meant adding only one of these, no strong opinion which wording is better.", "author": "tvalentyn", "createdAt": "2020-11-30T23:57:51Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -25,19 +25,22 @@ Prebuilt SDK container images are released per supported language during Beam re\n \n You may want to customize container images for many reasons, including:\n \n-* Pre-installing additional dependencies,\n-* Launching third-party software\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Launching third-party software in the background", "originalCommit": "af6539c30f16bf915add6a35c3a276c5cfd3aaba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAwOTY2Mg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r533009662", "bodyText": "Re preexisting documentation: With these settings, the docker command-line tool will implicitly try to push the container to the Docker Hub Apache repository.\nDocker will not implicitly push images unless instructed to. Consider removing this phrase.", "author": "tvalentyn", "createdAt": "2020-12-01T01:18:43Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,54 +17,169 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n+\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n+\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).\n+\n+1. Clone the `beam` repository.\n \n-1. Clone the `beam` repository:\n ```\n git clone https://github.com/apache/beam.git\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n+\n+4. Run Gradle with the `docker` target.\n+\n+\n+```\n+# The default repository of each SDK\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n+\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n+```\n+\n+To examine the containers that you built, run `docker images`:\n+\n+```\n+$> docker images\n+REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n+```\n+\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.\n+\n+```\n+export IMAGE_NAME=\"myrepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+docker tag apache/beam_python3.6_sdk \"${IMAGE_NAME}:${TAG}\"\n+docker push \"${IMAGE_NAME}:${TAG}\"\n+```\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+**NOTE**: After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images`\n+\n+##### Additional build parameters\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties. With these settings, the\n+`docker` command-line tool will implicitly try to push the container to the Docker Hub Apache repository.", "originalCommit": "6a2a389ccc23efc52994aef1917331095b9ce253", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxMTQzNw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r533011437", "bodyText": "I would recommend users to start their customization from a stable, a released version of a Dockerfile (and later use the SDK of the same version when they launch their pipeline), so consider:\n\ninstead of modifying with code at master, switch to a release branch (e.g. git checkout origin/release-2.26.0).\ninstead of using latest as tag for custom image in the snippet below, use something like 2.26.0_custom.", "author": "tvalentyn", "createdAt": "2020-12-01T01:24:14Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,54 +17,169 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n+\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n+\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).\n+\n+1. Clone the `beam` repository.\n \n-1. Clone the `beam` repository:\n ```\n git clone https://github.com/apache/beam.git\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+2. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.", "originalCommit": "6a2a389ccc23efc52994aef1917331095b9ce253", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MzU1NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r536393554", "bodyText": "Starting with Beam 2.25.0, prefer using --environment_options=docker_container_image=foo instead of --environment_config, since --environment_config causes confusion when used with different (non-Docker) environments (BEAM-10671).", "author": "ibzib", "createdAt": "2020-12-04T21:36:23Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,54 +17,175 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom container images\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n+\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom container images\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n+\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).\n+\n+1. Clone the `beam` repository. It is recommended that you start from a stable\n+   release branch rather than from master for both customizing the Dockerfile\n+   and building image artifacts, and that you use the same version of the SDK\n+   to run your pipeline with a custom container image.\n \n-1. Clone the `beam` repository:\n ```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n+\n git clone https://github.com/apache/beam.git\n+git checkout origin/release-$BEAM_SDK_VERSION\n+```\n+\n+3. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n+\n+4. Run Gradle with the `docker` target.\n+\n+\n+```\n+# The default repository of each SDK\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n+\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n+```\n+\n+To examine the containers that you built, run `docker images`:\n+\n+```\n+$> docker images\n+REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n+```\n+\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.\n+\n+```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n+export IMAGE_NAME=\"myrepo/mybeamsdk\"\n+export TAG=\"${BEAM_SDK_VERSION}-custom\"\n+\n+docker tag apache/beam_python3.6_sdk \"${IMAGE_NAME}:${TAG}\"\n+docker push \"${IMAGE_NAME}:${TAG}\"\n+```\n+\n+**NOTE**: After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images`\n+\n+##### Additional build parameters\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n+\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=\"example-repo\" -Pdocker-tag=\"2.26.0-custom\"\n+```\n+\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2.26.0-custom`.\n+\n+From Beam 2.21.0 and later, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n+\n+```\n+./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses\n+```\n+creates a Java 8 SDK image with appropriate licenses in `/opt/apache/beam/third_party_licenses/`.\n+\n+By default, no licenses/notices are added to the docker images.\n \n-### Testing customized images\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+## Using container images in pipelines\n+\n+The common method for providing a container image requires using the PortableRunner and setting the `--environment_config` flag to a given image path.", "originalCommit": "c9c883fe59a0248d040bc38431110ad5f160d99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwODg4NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r536408884", "bodyText": "Do you think we need to note this, or should we just recommend --environment_options? If it was only supported post 2.25.0, we can maybe say \"Older versions of the SDK (<2.25.0) may not support --environment_options. For these versions, use --environment_config=$IMAGE_URL instead?\"", "author": "emilymye", "createdAt": "2020-12-04T22:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxMjgwMw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r537812803", "bodyText": "Since 2.25.0 is still pretty recent, maybe we should keep this as it is for now. Perhaps we can add a TODO to update this later?", "author": "ibzib", "createdAt": "2020-12-07T20:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MzA1MQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r537873051", "bodyText": "added a TODO; I think it makes sense to update this all together, maybe when we move to GA for custom containers or port options over to DataflowRunner.", "author": "emilymye", "createdAt": "2020-12-07T22:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MzU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5ODQ3NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r536398474", "bodyText": "It'd be nice to use FlinkRunner instead, which automatically starts a job server so the user doesn't have to. But it doesn't have to block this PR, I can do it in a later change.", "author": "ibzib", "createdAt": "2020-12-04T21:47:15Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,54 +17,175 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom container images\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n+\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom container images\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n+\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).\n+\n+1. Clone the `beam` repository. It is recommended that you start from a stable\n+   release branch rather than from master for both customizing the Dockerfile\n+   and building image artifacts, and that you use the same version of the SDK\n+   to run your pipeline with a custom container image.\n \n-1. Clone the `beam` repository:\n ```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n+\n git clone https://github.com/apache/beam.git\n+git checkout origin/release-$BEAM_SDK_VERSION\n+```\n+\n+3. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n+\n+4. Run Gradle with the `docker` target.\n+\n+\n+```\n+# The default repository of each SDK\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n+\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n+```\n+\n+To examine the containers that you built, run `docker images`:\n+\n+```\n+$> docker images\n+REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n+```\n+\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.\n+\n+```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n+export IMAGE_NAME=\"myrepo/mybeamsdk\"\n+export TAG=\"${BEAM_SDK_VERSION}-custom\"\n+\n+docker tag apache/beam_python3.6_sdk \"${IMAGE_NAME}:${TAG}\"\n+docker push \"${IMAGE_NAME}:${TAG}\"\n+```\n+\n+**NOTE**: After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images`\n+\n+##### Additional build parameters\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n+\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=\"example-repo\" -Pdocker-tag=\"2.26.0-custom\"\n+```\n+\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2.26.0-custom`.\n+\n+From Beam 2.21.0 and later, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n+\n+```\n+./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses\n+```\n+creates a Java 8 SDK image with appropriate licenses in `/opt/apache/beam/third_party_licenses/`.\n+\n+By default, no licenses/notices are added to the docker images.\n \n-### Testing customized images\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+## Using container images in pipelines\n+\n+The common method for providing a container image requires using the PortableRunner and setting the `--environment_config` flag to a given image path.\n+Other runners, such as Dataflow, support specifying containers with different flags.\n \n {{< highlight class=\"runner-direct\" >}}\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+\n python -m apache_beam.examples.wordcount \\\n --input=/path/to/inputfile \\\n --output /path/to/write/counts \\\n --runner=PortableRunner \\\n --job_endpoint=embed \\\n---environment_config=path/to/container/image\n+--environment_config=\"${IMAGE}:${TAG}\"\n {{< /highlight >}}\n \n {{< highlight class=\"runner-flink-local\" >}}\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+\n # Start a Flink job server on localhost:8099", "originalCommit": "c9c883fe59a0248d040bc38431110ad5f160d99e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwODA2OQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r536408069", "bodyText": "We are probably waiting until early next week to merge in - probably better to use the more accurate version of commands. Do you have an example of recommended arguments with FlinkRunner for Python/is that supported? I couldn't find one in the docs.\nAlso, should we be doing the same things for spark? Based on a quick look it doesn't look like we have the same functionality for Spark, but I'm not very familiar with either Flink or Spark.", "author": "emilymye", "createdAt": "2020-12-04T21:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5ODQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgxNTY4MA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r537815680", "bodyText": "It'd look something like this:\npython -m apache_beam.examples.wordcount \\\n--input=/path/to/inputfile \\\n--output=/path/to/write/counts \\\n--runner=FlinkRunner \\\n--environment_type=DOCKER \\\n--environment_config=\"${IMAGE}:${TAG}\"\nAnd then the same for Spark, but substitute --runner=SparkRunner.", "author": "ibzib", "createdAt": "2020-12-07T20:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5ODQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MzE1OA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r537873158", "bodyText": "edited - I took out the Flink/Spark runner server comments and code.", "author": "emilymye", "createdAt": "2020-12-07T22:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5ODQ3NA=="}], "type": "inlineReview"}, {"oid": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "url": "https://github.com/apache/beam/commit/e1702d85a114e1df975f7f9598f5b2397ccf2683", "message": "update Flink/Spark runners", "committedDate": "2020-12-07T22:11:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAzMTE0NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538031144", "bodyText": "Broken link", "author": "rosetn", "createdAt": "2020-12-08T04:44:54Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,232 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n \n-{{< highlight class=\"runner-direct\" >}}\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output /path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=embed \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).", "originalCommit": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNDMyOA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538734328", "bodyText": "hmm this was working on my local build of the website, will need to figure out the correct URL", "author": "emilymye", "createdAt": "2020-12-08T19:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAzMTE0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NDc0Nw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538754747", "bodyText": "Figured it out!", "author": "emilymye", "createdAt": "2020-12-08T19:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAzMTE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAzODQ0MQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538038441", "bodyText": "Delete this line \"Steps:\"", "author": "rosetn", "createdAt": "2020-12-08T05:06:36Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,232 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:", "originalCommit": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAzOTAyMg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538039022", "bodyText": "Can you combine \"As an example, this Dockerfile:\" to the sentence after the code sample? It's a little confusing to have the interrupted sentence.\nThere are a few more instances of sentences with a code snippets in the Modifying a source Dockerfile in Beam\nsection--can you combine those too? The typical pattern is instruction>code snippet>explanation.", "author": "rosetn", "createdAt": "2020-12-08T05:08:14Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,232 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:", "originalCommit": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0MzAwMA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538043000", "bodyText": "If it's important to check the image IDs and digest, let's make this note into its own step. Same with the other instances of this note. Readers will sometimes ignore notes.\n\"3. After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from docker build or docker images.\"", "author": "rosetn", "createdAt": "2020-12-08T05:20:09Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,232 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.", "originalCommit": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0Mzg4NQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538043885", "bodyText": "Does \"Navigate to the root directory where you've installed your local copy of the Beam SDK.\" work?", "author": "rosetn", "createdAt": "2020-12-08T05:22:29Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,232 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n \n-{{< highlight class=\"runner-direct\" >}}\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output /path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=embed \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).\n \n-{{< highlight class=\"runner-flink-local\" >}}\n-# Start a Flink job server on localhost:8099\n-./gradlew :runners:flink:1.8:job-server:runShadow\n+1. Clone the `beam` repository. It is recommended that you start from a stable\n+   release branch rather than from master for both customizing the Dockerfile\n+   and building image artifacts, and that you use the same version of the SDK\n+   to run your pipeline with a custom container.\n \n-# Run a pipeline on the Flink job server\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output=/path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n \n-{{< highlight class=\"runner-spark-local\" >}}\n-# Start a Spark job server on localhost:8099\n-./gradlew :runners:spark:job-server:runShadow\n+git clone https://github.com/apache/beam.git\n+git checkout origin/release-$BEAM_SDK_VERSION\n+```\n \n-# Run a pipeline on the Spark job server\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output=path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+3. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n \n-## Building container images\n+3. Navigate to the root directory of the local copy of your Apache Beam.", "originalCommit": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMzY0OA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538733648", "bodyText": "Tried to make it clearer (added some env var setting in instructions) - mostly worried installed might get confused for package installation (i.e. where pip installed Beam)", "author": "emilymye", "createdAt": "2020-12-08T19:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0Mzg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0NDc3NA==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538044774", "bodyText": "I think it's OK to keep this at H3 instead of H4\nAdditional build parameters", "author": "rosetn", "createdAt": "2020-12-08T05:25:07Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,232 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n \n-{{< highlight class=\"runner-direct\" >}}\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output /path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=embed \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).\n \n-{{< highlight class=\"runner-flink-local\" >}}\n-# Start a Flink job server on localhost:8099\n-./gradlew :runners:flink:1.8:job-server:runShadow\n+1. Clone the `beam` repository. It is recommended that you start from a stable\n+   release branch rather than from master for both customizing the Dockerfile\n+   and building image artifacts, and that you use the same version of the SDK\n+   to run your pipeline with a custom container.\n \n-# Run a pipeline on the Flink job server\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output=/path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n \n-{{< highlight class=\"runner-spark-local\" >}}\n-# Start a Spark job server on localhost:8099\n-./gradlew :runners:spark:job-server:runShadow\n+git clone https://github.com/apache/beam.git\n+git checkout origin/release-$BEAM_SDK_VERSION\n+```\n \n-# Run a pipeline on the Spark job server\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output=path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+3. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n \n-## Building container images\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n \n-To build Beam SDK container images:\n+4. Run Gradle with the `docker` target.\n \n-1. Navigate to the root directory of the local copy of your Apache Beam.\n-2. Run Gradle with the `docker` target. If you're [building a child image](#writing-new-dockerfiles), set the optional `--file` flag to the new Dockerfile. If you're [building an image from an original Dockerfile](#modifying-dockerfiles), ignore the `--file` flag:\n \n ```\n # The default repository of each SDK\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java8:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java11:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:go:container:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py2:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py35:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py36:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py37:docker\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n \n-# Shortcut for building all four Python SDKs\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container buildAll\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n ```\n \n-From 2.21.0, `docker-pull-licenses` tag was introduced. Licenses/notices of third party dependencies will be added to the docker images when `docker-pull-licenses` was set.\n-For example, `./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses`. The files are added to `/opt/apache/beam/third_party_licenses/`.\n-By default, no licenses/notices are added to the docker images.\n+To examine the containers that you built, run `docker images`:\n \n-To examine the containers that you built, run `docker images` from anywhere in the command line. If you successfully built all of the container images, the command prints a table like the following:\n ```\n+$> docker images\n REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n-apache/beam_java8_sdk              latest              ...                 2 weeks ago       ...\n-apache/beam_java11_sdk             latest              ...                 2 weeks ago       ...\n-apache/beam_python2.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.5_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.6_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_go_sdk                 latest              ...                 2 weeks ago       ...\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n ```\n \n-### Overriding default Docker targets\n-\n-The default [tag](https://docs.docker.com/engine/reference/commandline/tag/) is sdk_version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties) and the default repositories are in the Docker Hub `apache` namespace.\n-The `docker` command-line tool implicitly [pushes container images](#pushing-container-images) to this location.\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.\n \n-To tag a local image, set the `docker-tag` option when building the container. The following command tags a Python SDK image with a date.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-tag=2019-10-04\n ```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n+export IMAGE_NAME=\"myrepo/mybeamsdk\"\n+export TAG=\"${BEAM_SDK_VERSION}-custom\"\n \n-To change the repository, set the `docker-repository-root` option to a new location. The following command sets the `docker-repository-root`\n-to a repository named `example-repo` on Docker Hub.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo\n+docker tag apache/beam_python3.6_sdk \"${IMAGE_NAME}:${TAG}\"\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n \n-## Pushing container images\n+**NOTE**: After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images`\n \n-After [building a container image](#building-container-images), you can store it in a remote Docker repository.\n+##### Additional build parameters", "originalCommit": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0NTc3Mg==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538045772", "bodyText": "I'd remove \"(see below)\" and either explicitly link to that heading or use \"see the following section.\"", "author": "rosetn", "createdAt": "2020-12-08T05:28:08Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,232 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+Steps:\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from). As an example, this `Dockerfile`:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+export TAG=\"latest\"\n+\n+# Optional - pull the base image into your local Docker daemon to ensure\n+# you have the most up-to-date version of the base image locally.\n+docker pull \"${BASE_IMAGE}\"\n+\n+docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+docker push \"${IMAGE_NAME}:${TAG}\"\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n \n-### Testing customized images\n+**NOTE**: After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n \n-{{< highlight class=\"runner-direct\" >}}\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output /path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=embed \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](contribute/#development-setup).\n \n-{{< highlight class=\"runner-flink-local\" >}}\n-# Start a Flink job server on localhost:8099\n-./gradlew :runners:flink:1.8:job-server:runShadow\n+1. Clone the `beam` repository. It is recommended that you start from a stable\n+   release branch rather than from master for both customizing the Dockerfile\n+   and building image artifacts, and that you use the same version of the SDK\n+   to run your pipeline with a custom container.\n \n-# Run a pipeline on the Flink job server\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output=/path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+```\n+export BEAM_SDK_VERSION=\"2.26.0\"\n \n-{{< highlight class=\"runner-spark-local\" >}}\n-# Start a Spark job server on localhost:8099\n-./gradlew :runners:spark:job-server:runShadow\n+git clone https://github.com/apache/beam.git\n+git checkout origin/release-$BEAM_SDK_VERSION\n+```\n \n-# Run a pipeline on the Spark job server\n-python -m apache_beam.examples.wordcount \\\n---input=/path/to/inputfile \\\n---output=path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n-{{< /highlight >}}\n+3. Customize the `Dockerfile` for a given language. This file is typically in the `sdks/<language>/container` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n \n-## Building container images\n+3. Navigate to the root directory of the local copy of your Apache Beam.\n \n-To build Beam SDK container images:\n+4. Run Gradle with the `docker` target.\n \n-1. Navigate to the root directory of the local copy of your Apache Beam.\n-2. Run Gradle with the `docker` target. If you're [building a child image](#writing-new-dockerfiles), set the optional `--file` flag to the new Dockerfile. If you're [building an image from an original Dockerfile](#modifying-dockerfiles), ignore the `--file` flag:\n \n ```\n # The default repository of each SDK\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java8:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java11:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:go:container:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py2:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py35:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py36:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py37:docker\n+./gradlew :sdks:java:container:java8:docker\n+./gradlew :sdks:java:container:java11:docker\n+./gradlew :sdks:go:container:docker\n+./gradlew :sdks:python:container:py36:docker\n+./gradlew :sdks:python:container:py37:docker\n+./gradlew :sdks:python:container:py38:docker\n \n-# Shortcut for building all four Python SDKs\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container buildAll\n+# Shortcut for building all Python SDKs\n+./gradlew :sdks:python:container buildAll\n ```\n \n-From 2.21.0, `docker-pull-licenses` tag was introduced. Licenses/notices of third party dependencies will be added to the docker images when `docker-pull-licenses` was set.\n-For example, `./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses`. The files are added to `/opt/apache/beam/third_party_licenses/`.\n-By default, no licenses/notices are added to the docker images.\n+To examine the containers that you built, run `docker images`:\n \n-To examine the containers that you built, run `docker images` from anywhere in the command line. If you successfully built all of the container images, the command prints a table like the following:\n ```\n+$> docker images\n REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n-apache/beam_java8_sdk              latest              ...                 2 weeks ago       ...\n-apache/beam_java11_sdk             latest              ...                 2 weeks ago       ...\n-apache/beam_python2.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.5_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.6_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_go_sdk                 latest              ...                 2 weeks ago       ...\n+apache/beam_java8_sdk              latest              ...                 1 min ago         ...\n+apache/beam_java11_sdk             latest              ...                 1 min ago         ...\n+apache/beam_python3.6_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.7_sdk          latest              ...                 1 min ago         ...\n+apache/beam_python3.8_sdk          latest              ...                 1 min ago         ...\n+apache/beam_go_sdk                 latest              ...                 1 min ago         ...\n ```\n \n-### Overriding default Docker targets\n-\n-The default [tag](https://docs.docker.com/engine/reference/commandline/tag/) is sdk_version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties) and the default repositories are in the Docker Hub `apache` namespace.\n-The `docker` command-line tool implicitly [pushes container images](#pushing-container-images) to this location.\n+If you did not provide a custom repo/tag as additional parameters (see below), you can retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository.", "originalCommit": "e1702d85a114e1df975f7f9598f5b2397ccf2683", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjMyMQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538892321", "bodyText": "Can you add an anchor to this so I can link to it in cloud docs please?", "author": "tysonjh", "createdAt": "2020-12-08T23:39:25Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,255 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from).\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+This `Dockerfile`: uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n+  ```\n+  export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+  export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+  export TAG=\"latest\"\n+\n+  # Optional - pull the base image into your local Docker daemon to ensure\n+  # you have the most up-to-date version of the base image locally.\n+  docker pull \"${BASE_IMAGE}\"\n+\n+  docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+  ```\n+\n+3. If your runner is running remotely, you will need to retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository accessible by your runner.\n+\n+  ```\n+  docker push \"${IMAGE_NAME}:${TAG}\"\n+  ```\n+\n+4. After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n+\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](/contribute/#development-setup).\n+\n+>**NOTE**: It is recommended that you start from a stable release branch (`release-X.XX.X`) corresponding to the same version of the SDK to run your pipeline. Differences in SDK version may result in unexpected errors.\n+\n+1. Clone the `beam` repository.\n+\n+  ```\n+  export BEAM_SDK_VERSION=\"2.26.0\"\n+  git clone https://github.com/apache/beam.git\n+  cd beam\n+\n+  # Save current directory as working directory\n+  export BEAM_WORKDIR=$PWD\n+\n+  git checkout origin/release-$BEAM_SDK_VERSION\n+  ```\n+\n+2. Customize the `Dockerfile` for a given language, typically `sdks/<language>/container/Dockerfile` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Return to the root Beam directory and run the Gradle `docker` target for your image.\n+\n+  ```\n+  cd $BEAM_WORKDIR\n+\n+  # The default repository of each SDK\n+  ./gradlew :sdks:java:container:java8:docker\n+  ./gradlew :sdks:java:container:java11:docker\n+  ./gradlew :sdks:go:container:docker\n+  ./gradlew :sdks:python:container:py36:docker\n+  ./gradlew :sdks:python:container:py37:docker\n+  ./gradlew :sdks:python:container:py38:docker\n+\n+  # Shortcut for building all Python SDKs\n+  ./gradlew :sdks:python:container buildAll\n+  ```\n+\n+4. Verify the images you built were created by running `docker images`.\n+\n+  ```\n+  $> docker images --digests\n+  REPOSITORY                         TAG                  DIGEST                   IMAGE ID         CREATED           SIZE\n+  apache/beam_java8_sdk              latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_java11_sdk             latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.6_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.7_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.8_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_go_sdk                 latest               sha256:...               ...              1 min ago         ...\n+  ```\n+\n+5. If your runner is running remotely, you will need to retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository accessible by your runner.\n+   You can also provide a custom repo/tag as [additional parameters](#additional-build-parameters).\n+\n+  ```\n+  export BEAM_SDK_VERSION=\"2.26.0\"\n+  export IMAGE_NAME=\"gcr.io/my-gcp-project/beam_python3.7_sdk\"\n+  export TAG=\"${BEAM_SDK_VERSION}-custom\"\n+\n+  docker tag apache/beam_python3.7_sdk \"${IMAGE_NAME}:${TAG}\"\n+  docker push \"${IMAGE_NAME}:${TAG}\"\n+  ```\n+\n+6. After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images --digests`.\n+\n+#### Additional build parameters{#additional-build-parameters}\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=\"example-repo\" -Pdocker-tag=\"2.26.0-custom\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2.26.0-custom`.\n+\n+From Beam 2.21.0 and later, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n+creates a Java 8 SDK image with appropriate licenses in `/opt/apache/beam/third_party_licenses/`.\n \n-### Testing customized images\n+By default, no licenses/notices are added to the docker images.\n+\n+\n+## Running pipelines with custom container images", "originalCommit": "ba761b58fa959452151da7c777ad7f83c403a9e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMDE5MQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r538920191", "bodyText": "added #running-pipelines", "author": "emilymye", "createdAt": "2020-12-09T00:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MjMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3MDM4OQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r539670389", "bodyText": "Typo here--I also think you can just call this section \"Troubleshooting\" or \"Considerations\"", "author": "rosetn", "createdAt": "2020-12-09T21:43:38Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,255 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from).\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+This `Dockerfile`: uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n+  ```\n+  export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+  export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+  export TAG=\"latest\"\n+\n+  # Optional - pull the base image into your local Docker daemon to ensure\n+  # you have the most up-to-date version of the base image locally.\n+  docker pull \"${BASE_IMAGE}\"\n+\n+  docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+  ```\n+\n+3. If your runner is running remotely, you will need to retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository accessible by your runner.\n+\n+  ```\n+  docker push \"${IMAGE_NAME}:${TAG}\"\n+  ```\n+\n+4. After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n+\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](/contribute/#development-setup).\n+\n+>**NOTE**: It is recommended that you start from a stable release branch (`release-X.XX.X`) corresponding to the same version of the SDK to run your pipeline. Differences in SDK version may result in unexpected errors.\n+\n+1. Clone the `beam` repository.\n+\n+  ```\n+  export BEAM_SDK_VERSION=\"2.26.0\"\n+  git clone https://github.com/apache/beam.git\n+  cd beam\n+\n+  # Save current directory as working directory\n+  export BEAM_WORKDIR=$PWD\n+\n+  git checkout origin/release-$BEAM_SDK_VERSION\n+  ```\n+\n+2. Customize the `Dockerfile` for a given language, typically `sdks/<language>/container/Dockerfile` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Return to the root Beam directory and run the Gradle `docker` target for your image.\n+\n+  ```\n+  cd $BEAM_WORKDIR\n+\n+  # The default repository of each SDK\n+  ./gradlew :sdks:java:container:java8:docker\n+  ./gradlew :sdks:java:container:java11:docker\n+  ./gradlew :sdks:go:container:docker\n+  ./gradlew :sdks:python:container:py36:docker\n+  ./gradlew :sdks:python:container:py37:docker\n+  ./gradlew :sdks:python:container:py38:docker\n+\n+  # Shortcut for building all Python SDKs\n+  ./gradlew :sdks:python:container buildAll\n+  ```\n+\n+4. Verify the images you built were created by running `docker images`.\n+\n+  ```\n+  $> docker images --digests\n+  REPOSITORY                         TAG                  DIGEST                   IMAGE ID         CREATED           SIZE\n+  apache/beam_java8_sdk              latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_java11_sdk             latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.6_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.7_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.8_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_go_sdk                 latest               sha256:...               ...              1 min ago         ...\n+  ```\n+\n+5. If your runner is running remotely, you will need to retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository accessible by your runner.\n+   You can also provide a custom repo/tag as [additional parameters](#additional-build-parameters).\n+\n+  ```\n+  export BEAM_SDK_VERSION=\"2.26.0\"\n+  export IMAGE_NAME=\"gcr.io/my-gcp-project/beam_python3.7_sdk\"\n+  export TAG=\"${BEAM_SDK_VERSION}-custom\"\n+\n+  docker tag apache/beam_python3.7_sdk \"${IMAGE_NAME}:${TAG}\"\n+  docker push \"${IMAGE_NAME}:${TAG}\"\n+  ```\n+\n+6. After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images --digests`.\n+\n+#### Additional build parameters{#additional-build-parameters}\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=\"example-repo\" -Pdocker-tag=\"2.26.0-custom\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2.26.0-custom`.\n+\n+From Beam 2.21.0 and later, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n+creates a Java 8 SDK image with appropriate licenses in `/opt/apache/beam/third_party_licenses/`.\n \n-### Testing customized images\n+By default, no licenses/notices are added to the docker images.\n+\n+\n+## Running pipelines with custom container images {#running-pipelines}\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+The common method for providing a container image requires using the\n+PortableRunner flag `--environment_config` as supported by the Portable\n+Runner or by runners supported PortableRunner flags.\n+Other runners, such as Dataflow, support specifying containers with different flags.\n+\n+<!--\n+  TODO(emilymye): Should be updated to PortableRunner flag --environment_options\n+ (added in 2.25.0) once this flags has been validated and ported over to all\n+ runners\n+-->\n \n {{< highlight class=\"runner-direct\" >}}\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n+\n python -m apache_beam.examples.wordcount \\\n --input=/path/to/inputfile \\\n --output /path/to/write/counts \\\n --runner=PortableRunner \\\n --job_endpoint=embed \\\n---environment_config=path/to/container/image\n+--environment_type=\"DOCKER\" \\\n+--environment_config=\"${IMAGE_URL}\"\n {{< /highlight >}}\n \n {{< highlight class=\"runner-flink-local\" >}}\n-# Start a Flink job server on localhost:8099\n-./gradlew :runners:flink:1.8:job-server:runShadow\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n \n-# Run a pipeline on the Flink job server\n+# Run a pipeline using the FlinkRunner which starts a Flink job server.\n python -m apache_beam.examples.wordcount \\\n --input=/path/to/inputfile \\\n---output=/path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n+--output=path/to/write/counts \\\n+--runner=FlinkRunner \\\n+--environment_type=\"DOCKER\" \\\n+--environment_config=\"${IMAGE_URL}\"\n {{< /highlight >}}\n \n {{< highlight class=\"runner-spark-local\" >}}\n-# Start a Spark job server on localhost:8099\n-./gradlew :runners:spark:job-server:runShadow\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n \n-# Run a pipeline on the Spark job server\n+# Run a pipeline using the SparkRunner which starts the Spark job server\n python -m apache_beam.examples.wordcount \\\n --input=/path/to/inputfile \\\n --output=path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n+--runner=SparkRunner \\\n+--environment_type=\"DOCKER\" \\\n+--environment_config=\"${IMAGE_URL}\"\n {{< /highlight >}}\n \n-## Building container images\n+{{< highlight class=\"runner-dataflow\" >}}\n+export GCS_PATH=\"gs://my-gcs-bucket\"\n+export GCP_PROJECT=\"my-gcp-project\"\n+export REGION=\"us-central1\"\n \n-To build Beam SDK container images:\n+# By default, the Dataflow runner will have access to the GCR images\n+# under the same project.\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n \n-1. Navigate to the root directory of the local copy of your Apache Beam.\n-2. Run Gradle with the `docker` target. If you're [building a child image](#writing-new-dockerfiles), set the optional `--file` flag to the new Dockerfile. If you're [building an image from an original Dockerfile](#modifying-dockerfiles), ignore the `--file` flag:\n+# Run a pipeline on Dataflow.\n+# This is a Python batch pipeline, so to run on Dataflow Runner V2\n+# you must specify the experiment \"use_runner_v2\"\n \n-```\n-# The default repository of each SDK\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java8:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java11:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:go:container:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py2:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py35:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py36:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py37:docker\n-\n-# Shortcut for building all four Python SDKs\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container buildAll\n-```\n-\n-From 2.21.0, `docker-pull-licenses` tag was introduced. Licenses/notices of third party dependencies will be added to the docker images when `docker-pull-licenses` was set.\n-For example, `./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses`. The files are added to `/opt/apache/beam/third_party_licenses/`.\n-By default, no licenses/notices are added to the docker images.\n-\n-To examine the containers that you built, run `docker images` from anywhere in the command line. If you successfully built all of the container images, the command prints a table like the following:\n-```\n-REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n-apache/beam_java8_sdk              latest              ...                 2 weeks ago       ...\n-apache/beam_java11_sdk             latest              ...                 2 weeks ago       ...\n-apache/beam_python2.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.5_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.6_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_go_sdk                 latest              ...                 2 weeks ago       ...\n-```\n-\n-### Overriding default Docker targets\n-\n-The default [tag](https://docs.docker.com/engine/reference/commandline/tag/) is sdk_version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties) and the default repositories are in the Docker Hub `apache` namespace.\n-The `docker` command-line tool implicitly [pushes container images](#pushing-container-images) to this location.\n-\n-To tag a local image, set the `docker-tag` option when building the container. The following command tags a Python SDK image with a date.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-tag=2019-10-04\n-```\n-\n-To change the repository, set the `docker-repository-root` option to a new location. The following command sets the `docker-repository-root`\n-to a repository named `example-repo` on Docker Hub.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo\n-```\n+python -m apache_beam.examples.wordcount \\\n+  --input gs://dataflow-samples/shakespeare/kinglear.txt \\\n+  --output \"${GCS_PATH}/counts\" \\\n+  --runner DataflowRunner \\\n+  --project $GCP_PROJECT \\\n+  --region $REGION \\\n+  --temp_location \"${GCS_PATH}/tmp/\" \\\n+  --experiment=use_runner_v2 \\\n+  --worker_harness_container_image=$IMAGE_URL\n \n-## Pushing container images\n+{{< /highlight >}}\n \n-After [building a container image](#building-container-images), you can store it in a remote Docker repository.\n \n-The following steps push a Python3.6 SDK image to the [`docker-root-repository` value](#overriding-default-docker-targets).\n-Please log in to the destination repository as needed.\n+### Troubleshooting/TIps", "originalCommit": "4244d56000992e5bf1b01ee3e38dab7e784a3dde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3MzIxOQ==", "url": "https://github.com/apache/beam/pull/13420#discussion_r539673219", "bodyText": "Can you write an introductory sentence for this list?", "author": "rosetn", "createdAt": "2020-12-09T21:48:27Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,255 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from).\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+This `Dockerfile`: uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.\n+\n+\n+2. [Build](https://docs.docker.com/engine/reference/commandline/build/) and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker.\n+\n+  ```\n+  export BASE_IMAGE=\"apache/beam_python3.7_sdk:2.25.0\"\n+  export IMAGE_NAME=\"myremoterepo/mybeamsdk\"\n+  export TAG=\"latest\"\n+\n+  # Optional - pull the base image into your local Docker daemon to ensure\n+  # you have the most up-to-date version of the base image locally.\n+  docker pull \"${BASE_IMAGE}\"\n+\n+  docker build -f Dockerfile -t \"${IMAGE_NAME}:${TAG}\" .\n+  ```\n+\n+3. If your runner is running remotely, you will need to retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository accessible by your runner.\n+\n+  ```\n+  docker push \"${IMAGE_NAME}:${TAG}\"\n+  ```\n+\n+4. After pushing a container image, you should verify the remote image ID and digest should match the local image ID and digest, output from `docker build` or `docker images`.\n+\n+#### Modifying a source Dockerfile in Beam {#modifying-dockerfiles}\n+\n+This method will require building image artifacts from Beam source. For additional instructions on setting up your development environment, see the [Contribution guide](/contribute/#development-setup).\n+\n+>**NOTE**: It is recommended that you start from a stable release branch (`release-X.XX.X`) corresponding to the same version of the SDK to run your pipeline. Differences in SDK version may result in unexpected errors.\n+\n+1. Clone the `beam` repository.\n+\n+  ```\n+  export BEAM_SDK_VERSION=\"2.26.0\"\n+  git clone https://github.com/apache/beam.git\n+  cd beam\n+\n+  # Save current directory as working directory\n+  export BEAM_WORKDIR=$PWD\n+\n+  git checkout origin/release-$BEAM_SDK_VERSION\n+  ```\n+\n+2. Customize the `Dockerfile` for a given language, typically `sdks/<language>/container/Dockerfile` directory (e.g. the [Dockerfile for Python](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n+\n+3. Return to the root Beam directory and run the Gradle `docker` target for your image.\n+\n+  ```\n+  cd $BEAM_WORKDIR\n+\n+  # The default repository of each SDK\n+  ./gradlew :sdks:java:container:java8:docker\n+  ./gradlew :sdks:java:container:java11:docker\n+  ./gradlew :sdks:go:container:docker\n+  ./gradlew :sdks:python:container:py36:docker\n+  ./gradlew :sdks:python:container:py37:docker\n+  ./gradlew :sdks:python:container:py38:docker\n+\n+  # Shortcut for building all Python SDKs\n+  ./gradlew :sdks:python:container buildAll\n+  ```\n+\n+4. Verify the images you built were created by running `docker images`.\n+\n+  ```\n+  $> docker images --digests\n+  REPOSITORY                         TAG                  DIGEST                   IMAGE ID         CREATED           SIZE\n+  apache/beam_java8_sdk              latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_java11_sdk             latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.6_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.7_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_python3.8_sdk          latest               sha256:...               ...              1 min ago         ...\n+  apache/beam_go_sdk                 latest               sha256:...               ...              1 min ago         ...\n+  ```\n+\n+5. If your runner is running remotely, you will need to retag the image and [push](https://docs.docker.com/engine/reference/commandline/push/) the image using Docker to a remote repository accessible by your runner.\n+   You can also provide a custom repo/tag as [additional parameters](#additional-build-parameters).\n+\n+  ```\n+  export BEAM_SDK_VERSION=\"2.26.0\"\n+  export IMAGE_NAME=\"gcr.io/my-gcp-project/beam_python3.7_sdk\"\n+  export TAG=\"${BEAM_SDK_VERSION}-custom\"\n+\n+  docker tag apache/beam_python3.7_sdk \"${IMAGE_NAME}:${TAG}\"\n+  docker push \"${IMAGE_NAME}:${TAG}\"\n+  ```\n+\n+6. After pushing a container image, verify the remote image ID and digest matches the local image ID and digest output from `docker_images --digests`.\n+\n+#### Additional build parameters{#additional-build-parameters}\n+\n+The docker Gradle task defines a default image repository and [tag](https://docs.docker.com/engine/reference/commandline/tag/) is the SDK version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties). The default repository is the Docker Hub `apache` namespace, and the default tag is the [SDK version](https://github.com/apache/beam/blob/master/gradle.properties) defined at gradle.properties.\n+\n+You can specify a different repository or tag for built images by providing parameters to the build task. For example:\n \n-1. Pull a [prebuilt SDK container image](https://hub.docker.com/search?q=apache%2Fbeam&type=image) for your [target](https://docs.docker.com/docker-hub/repos/#searching-for-repositories) language and version. The following example pulls the latest Python SDK:\n ```\n-docker pull apache/beam_python3.7_sdk\n+./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=\"example-repo\" -Pdocker-tag=\"2.26.0-custom\"\n ```\n-2. [Write a new Dockerfile](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/) that [designates](https://docs.docker.com/engine/reference/builder/#from) the original as its [parent](https://docs.docker.com/glossary/?term=parent%20image).\n-3. [Build](#building-container-images) a child image.\n \n-### Modifying the original Dockerfile {#modifying-dockerfiles}\n+builds the Python 3.6 container and tags it as `example-repo/beam_python3.6_sdk:2.26.0-custom`.\n+\n+From Beam 2.21.0 and later, a `docker-pull-licenses` flag was introduced to add licenses/notices for third party dependencies to the docker images. For example:\n \n-1. Clone the `beam` repository:\n ```\n-git clone https://github.com/apache/beam.git\n+./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses\n ```\n-2. Customize the [Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile). If you're adding dependencies from [PyPI](https://pypi.org/), use [`base_image_requirements.txt`](https://github.com/apache/beam/blob/master/sdks/python/container/base_image_requirements.txt) instead.\n-3. [Reimage](#building-container-images) the container.\n+creates a Java 8 SDK image with appropriate licenses in `/opt/apache/beam/third_party_licenses/`.\n \n-### Testing customized images\n+By default, no licenses/notices are added to the docker images.\n+\n+\n+## Running pipelines with custom container images {#running-pipelines}\n \n-To test a customized image locally, run a pipeline with PortableRunner and set the `--environment_config` flag to the image path:\n+The common method for providing a container image requires using the\n+PortableRunner flag `--environment_config` as supported by the Portable\n+Runner or by runners supported PortableRunner flags.\n+Other runners, such as Dataflow, support specifying containers with different flags.\n+\n+<!--\n+  TODO(emilymye): Should be updated to PortableRunner flag --environment_options\n+ (added in 2.25.0) once this flags has been validated and ported over to all\n+ runners\n+-->\n \n {{< highlight class=\"runner-direct\" >}}\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n+\n python -m apache_beam.examples.wordcount \\\n --input=/path/to/inputfile \\\n --output /path/to/write/counts \\\n --runner=PortableRunner \\\n --job_endpoint=embed \\\n---environment_config=path/to/container/image\n+--environment_type=\"DOCKER\" \\\n+--environment_config=\"${IMAGE_URL}\"\n {{< /highlight >}}\n \n {{< highlight class=\"runner-flink-local\" >}}\n-# Start a Flink job server on localhost:8099\n-./gradlew :runners:flink:1.8:job-server:runShadow\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n \n-# Run a pipeline on the Flink job server\n+# Run a pipeline using the FlinkRunner which starts a Flink job server.\n python -m apache_beam.examples.wordcount \\\n --input=/path/to/inputfile \\\n---output=/path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n+--output=path/to/write/counts \\\n+--runner=FlinkRunner \\\n+--environment_type=\"DOCKER\" \\\n+--environment_config=\"${IMAGE_URL}\"\n {{< /highlight >}}\n \n {{< highlight class=\"runner-spark-local\" >}}\n-# Start a Spark job server on localhost:8099\n-./gradlew :runners:spark:job-server:runShadow\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n \n-# Run a pipeline on the Spark job server\n+# Run a pipeline using the SparkRunner which starts the Spark job server\n python -m apache_beam.examples.wordcount \\\n --input=/path/to/inputfile \\\n --output=path/to/write/counts \\\n---runner=PortableRunner \\\n---job_endpoint=localhost:8099 \\\n---environment_config=path/to/container/image\n+--runner=SparkRunner \\\n+--environment_type=\"DOCKER\" \\\n+--environment_config=\"${IMAGE_URL}\"\n {{< /highlight >}}\n \n-## Building container images\n+{{< highlight class=\"runner-dataflow\" >}}\n+export GCS_PATH=\"gs://my-gcs-bucket\"\n+export GCP_PROJECT=\"my-gcp-project\"\n+export REGION=\"us-central1\"\n \n-To build Beam SDK container images:\n+# By default, the Dataflow runner will have access to the GCR images\n+# under the same project.\n+export IMAGE=\"my-repo/beam_python_sdk_custom\"\n+export TAG=\"X.Y.Z\"\n+export IMAGE_URL = \"${IMAGE}:${TAG}\"\n \n-1. Navigate to the root directory of the local copy of your Apache Beam.\n-2. Run Gradle with the `docker` target. If you're [building a child image](#writing-new-dockerfiles), set the optional `--file` flag to the new Dockerfile. If you're [building an image from an original Dockerfile](#modifying-dockerfiles), ignore the `--file` flag:\n+# Run a pipeline on Dataflow.\n+# This is a Python batch pipeline, so to run on Dataflow Runner V2\n+# you must specify the experiment \"use_runner_v2\"\n \n-```\n-# The default repository of each SDK\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java8:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:java:container:java11:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:go:container:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py2:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py35:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py36:docker\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container:py37:docker\n-\n-# Shortcut for building all four Python SDKs\n-./gradlew [--file=path/to/new/Dockerfile] :sdks:python:container buildAll\n-```\n-\n-From 2.21.0, `docker-pull-licenses` tag was introduced. Licenses/notices of third party dependencies will be added to the docker images when `docker-pull-licenses` was set.\n-For example, `./gradlew :sdks:java:container:java8:docker -Pdocker-pull-licenses`. The files are added to `/opt/apache/beam/third_party_licenses/`.\n-By default, no licenses/notices are added to the docker images.\n-\n-To examine the containers that you built, run `docker images` from anywhere in the command line. If you successfully built all of the container images, the command prints a table like the following:\n-```\n-REPOSITORY                         TAG                 IMAGE ID            CREATED           SIZE\n-apache/beam_java8_sdk              latest              ...                 2 weeks ago       ...\n-apache/beam_java11_sdk             latest              ...                 2 weeks ago       ...\n-apache/beam_python2.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.5_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.6_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_python3.7_sdk          latest              ...                 2 weeks ago       ...\n-apache/beam_go_sdk                 latest              ...                 2 weeks ago       ...\n-```\n-\n-### Overriding default Docker targets\n-\n-The default [tag](https://docs.docker.com/engine/reference/commandline/tag/) is sdk_version defined at [gradle.properties](https://github.com/apache/beam/blob/master/gradle.properties) and the default repositories are in the Docker Hub `apache` namespace.\n-The `docker` command-line tool implicitly [pushes container images](#pushing-container-images) to this location.\n-\n-To tag a local image, set the `docker-tag` option when building the container. The following command tags a Python SDK image with a date.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-tag=2019-10-04\n-```\n-\n-To change the repository, set the `docker-repository-root` option to a new location. The following command sets the `docker-repository-root`\n-to a repository named `example-repo` on Docker Hub.\n-```\n-./gradlew :sdks:python:container:py36:docker -Pdocker-repository-root=example-repo\n-```\n+python -m apache_beam.examples.wordcount \\\n+  --input gs://dataflow-samples/shakespeare/kinglear.txt \\\n+  --output \"${GCS_PATH}/counts\" \\\n+  --runner DataflowRunner \\\n+  --project $GCP_PROJECT \\\n+  --region $REGION \\\n+  --temp_location \"${GCS_PATH}/tmp/\" \\\n+  --experiment=use_runner_v2 \\\n+  --worker_harness_container_image=$IMAGE_URL\n \n-## Pushing container images\n+{{< /highlight >}}\n \n-After [building a container image](#building-container-images), you can store it in a remote Docker repository.\n \n-The following steps push a Python3.6 SDK image to the [`docker-root-repository` value](#overriding-default-docker-targets).\n-Please log in to the destination repository as needed.\n+### Troubleshooting/TIps\n \n-Upload it to the remote repository:\n-```\n-docker push example-repo/beam_python3.6_sdk\n-```\n-\n-To download the image again, run `docker pull`:\n-```\n-docker pull example-repo/beam_python3.6_sdk\n-```\n+* Differences in language and SDK version between the container SDK and", "originalCommit": "4244d56000992e5bf1b01ee3e38dab7e784a3dde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e7da5e6717383df31d2687f6cbbb88a59a33d1f2", "url": "https://github.com/apache/beam/commit/e7da5e6717383df31d2687f6cbbb88a59a33d1f2", "message": "rewrite containers docs for custom containers", "committedDate": "2020-12-15T19:13:05Z", "type": "commit"}, {"oid": "9c1dc3c879ba820fdfe06a2d9baa64528c395261", "url": "https://github.com/apache/beam/commit/9c1dc3c879ba820fdfe06a2d9baa64528c395261", "message": "revisions", "committedDate": "2020-12-15T19:13:06Z", "type": "commit"}, {"oid": "290e2206aa08e51b71226fb203899a3f0a1cf077", "url": "https://github.com/apache/beam/commit/290e2206aa08e51b71226fb203899a3f0a1cf077", "message": "review edits", "committedDate": "2020-12-15T19:13:06Z", "type": "commit"}, {"oid": "3b17a8c496df80999c4106ee6868e39810e36b5c", "url": "https://github.com/apache/beam/commit/3b17a8c496df80999c4106ee6868e39810e36b5c", "message": "add gcr note", "committedDate": "2020-12-15T19:13:07Z", "type": "commit"}, {"oid": "7244ba7f497ad00d7faff70d7dc49c0629667436", "url": "https://github.com/apache/beam/commit/7244ba7f497ad00d7faff70d7dc49c0629667436", "message": "more review edits", "committedDate": "2020-12-15T19:13:07Z", "type": "commit"}, {"oid": "8c3f4678f45aaf5d92e8eb0034e87eabc1ee3545", "url": "https://github.com/apache/beam/commit/8c3f4678f45aaf5d92e8eb0034e87eabc1ee3545", "message": "more fixes", "committedDate": "2020-12-15T19:13:07Z", "type": "commit"}, {"oid": "2921f56a9ef879da03c569205d34b0941e05aa61", "url": "https://github.com/apache/beam/commit/2921f56a9ef879da03c569205d34b0941e05aa61", "message": "fix title", "committedDate": "2020-12-15T19:13:08Z", "type": "commit"}, {"oid": "ebb04f5000f9e7cd30cfb9fd6f273f05e3861410", "url": "https://github.com/apache/beam/commit/ebb04f5000f9e7cd30cfb9fd6f273f05e3861410", "message": "edits", "committedDate": "2020-12-15T19:13:08Z", "type": "commit"}, {"oid": "b991bd319e6e9437230326d79d17e14e34417192", "url": "https://github.com/apache/beam/commit/b991bd319e6e9437230326d79d17e14e34417192", "message": "temp", "committedDate": "2020-12-15T19:13:09Z", "type": "commit"}, {"oid": "a632089d69663b8be5dba45101e7151e1d1f51e9", "url": "https://github.com/apache/beam/commit/a632089d69663b8be5dba45101e7151e1d1f51e9", "message": "update Flink/Spark runners", "committedDate": "2020-12-15T19:13:09Z", "type": "commit"}, {"oid": "cbf75a0094450657af6f783659d9220fef57f098", "url": "https://github.com/apache/beam/commit/cbf75a0094450657af6f783659d9220fef57f098", "message": "clean up Docker instructions", "committedDate": "2020-12-15T19:13:10Z", "type": "commit"}, {"oid": "1e1a84ed9986cad4cbf9f78fcf29adb0695086f9", "url": "https://github.com/apache/beam/commit/1e1a84ed9986cad4cbf9f78fcf29adb0695086f9", "message": "add back a slash", "committedDate": "2020-12-15T19:13:11Z", "type": "commit"}, {"oid": "9c223a68849403a13c013bfce419224d2219f8a3", "url": "https://github.com/apache/beam/commit/9c223a68849403a13c013bfce419224d2219f8a3", "message": "add notes", "committedDate": "2020-12-15T19:13:11Z", "type": "commit"}, {"oid": "062023a1d5abed8cc74ddc58ae5b4398956ce978", "url": "https://github.com/apache/beam/commit/062023a1d5abed8cc74ddc58ae5b4398956ce978", "message": "add troubleshooting section", "committedDate": "2020-12-15T19:13:12Z", "type": "commit"}, {"oid": "7c3086e27571daf39eebb83b5841811bee7adaac", "url": "https://github.com/apache/beam/commit/7c3086e27571daf39eebb83b5841811bee7adaac", "message": "add anchor", "committedDate": "2020-12-15T19:13:12Z", "type": "commit"}, {"oid": "b7a4fb67fcc787905336ee7cda05a838687a36ac", "url": "https://github.com/apache/beam/commit/b7a4fb67fcc787905336ee7cda05a838687a36ac", "message": "doc fixes", "committedDate": "2020-12-15T19:23:05Z", "type": "commit"}, {"oid": "b7a4fb67fcc787905336ee7cda05a838687a36ac", "url": "https://github.com/apache/beam/commit/b7a4fb67fcc787905336ee7cda05a838687a36ac", "message": "doc fixes", "committedDate": "2020-12-15T19:23:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwOTQ2Mw==", "url": "https://github.com/apache/beam/pull/13420#discussion_r545409463", "bodyText": "Extra colon after Dockerfile", "author": "rosetn", "createdAt": "2020-12-17T21:17:22Z", "path": "website/www/site/content/en/documentation/runtime/environments.md", "diffHunk": "@@ -17,147 +17,259 @@ limitations under the License.\n \n # Container environments\n \n-The Beam SDK runtime environment is isolated from other runtime systems because the SDK runtime environment is [containerized](https://s.apache.org/beam-fn-api-container-contract) with [Docker](https://www.docker.com/). This means that any execution engine can run the Beam SDK.\n+The Beam SDK runtime environment can be [containerized](https://www.docker.com/resources/what-container) with [Docker](https://www.docker.com/) to isolate it from other runtime systems. To learn more about the container environment, read the Beam [SDK Harness container contract](https://s.apache.org/beam-fn-api-container-contract).\n \n-This page describes how to customize, build, and push Beam SDK container images.\n+Prebuilt SDK container images are released per supported language during Beam releases and pushed to [Docker Hub](https://hub.docker.com/search?q=apache%2Fbeam&type=image).\n \n-Before you begin, install [Docker](https://www.docker.com/) on your workstation.\n+## Custom containers\n \n-## Customizing container images\n+You may want to customize container images for many reasons, including:\n \n-You can add extra dependencies to container images so that you don't have to supply the dependencies to execution engines.\n+* Pre-installing additional dependencies\n+* Launching third-party software in the worker environment\n+* Further customizing the execution environment\n \n-To customize a container image, either:\n-* [Write a new](#writing-new-dockerfiles) [Dockerfile](https://docs.docker.com/engine/reference/builder/) on top of the original.\n-* [Modify](#modifying-dockerfiles) the [original Dockerfile](https://github.com/apache/beam/blob/master/sdks/python/container/Dockerfile) and reimage the container.\n+ This guide describes how to create and use customized containers for the Beam SDK.\n \n-It's often easier to write a new Dockerfile. However, by modifying the original Dockerfile, you can customize anything (including the base OS).\n+### Prerequisites\n \n-### Writing new Dockerfiles on top of the original {#writing-new-dockerfiles}\n+* You will need to use Docker, either by [installing Docker tools locally](https://docs.docker.com/get-docker/) or using build services that can run Docker, such as [Google Cloud Build](https://cloud.google.com/cloud-build/docs/building/build-containers).\n+* You will need to have a container registry accessible by your execution engine or runner to host a custom container image. Options include [Docker Hub](https://hub.docker.com/) or a \"self-hosted\" repository, including cloud-specific container registries like [Google Container Registry](https://cloud.google.com/container-registry) (GCR) or [Amazon Elastic Container Registry](https://aws.amazon.com/ecr/) (ECR).\n+\n+>  **NOTE**: On Nov 20, 2020, Docker Hub put [rate limits](https://www.docker.com/increase-rate-limits) into effect for anonymous and free authenticated use, which may impact larger pipelines that pull containers several times.\n+\n+For optimal user experience, we also recommend you use the latest released version of Beam.\n+\n+### Building and pushing custom containers\n+\n+Beam [SDK container images](https://hub.docker.com/search?q=apache%2Fbeam&type=image) are built from Dockerfiles checked into the [Github](https://github.com/apache/beam) repository and published to Docker Hub for every release. You can build customized containers in one of two ways:\n+\n+1. **[Writing a new](#writing-new-dockerfiles) Dockerfile based on a released container image**. This is sufficient for simple additions to the image, such as adding artifacts or environment variables.\n+2. **[Modifying](#modifying-dockerfiles) a source Dockerfile in [Beam](https://github.com/apache/beam)**. This method requires building from Beam source but allows for greater customization of the container (including replacement of artifacts or base OS/language versions).\n+\n+#### Writing a new Dockerfile based on an existing published container image {#writing-new-dockerfiles}\n+\n+1. Create a new Dockerfile that designates a base image using the [FROM instruction](https://docs.docker.com/engine/reference/builder/#from).\n+\n+```\n+FROM apache/beam_python3.7_sdk:2.25.0\n+\n+ENV FOO=bar\n+COPY /src/path/to/file /dest/path/to/file/\n+```\n+\n+This `Dockerfile`: uses the prebuilt Python 3.7 SDK container image [`beam_python3.7_sdk`](https://hub.docker.com/r/apache/beam_python3.7_sdk) tagged at (SDK version) `2.25.0`, and adds an additional environment variable and file to the image.", "originalCommit": "b7a4fb67fcc787905336ee7cda05a838687a36ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c35b8a89825387fee7626fed082e17648b282bd", "url": "https://github.com/apache/beam/commit/4c35b8a89825387fee7626fed082e17648b282bd", "message": "no should/will", "committedDate": "2020-12-17T21:35:20Z", "type": "commit"}]}