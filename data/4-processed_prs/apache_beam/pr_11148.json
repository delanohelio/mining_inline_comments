{"pr_number": 11148, "pr_title": "[BEAM-8335] Adds a streaming wordcount integration test", "pr_createdAt": "2020-03-17T21:21:59Z", "pr_url": "https://github.com/apache/beam/pull/11148", "timeline": [{"oid": "22724c37eae286fd6aec2b5180f3f09537085faf", "url": "https://github.com/apache/beam/commit/22724c37eae286fd6aec2b5180f3f09537085faf", "message": "First test, still broken. Is it reading from cache?\n\nChange-Id: I9fe25f2875eaa32e0cc19e9b4862b86477f7b8e7", "committedDate": "2020-03-17T21:22:36Z", "type": "forcePushed"}, {"oid": "01e967d9d5a1e97d92c328d3a29055c7745a1415", "url": "https://github.com/apache/beam/commit/01e967d9d5a1e97d92c328d3a29055c7745a1415", "message": "cleanup and simplify\n\nChange-Id: Ic94d2968039776679c65816e6245624291b1ecef", "committedDate": "2020-03-20T23:55:25Z", "type": "forcePushed"}, {"oid": "282f1cf06a948a93307204835b25ffc691dfe5c2", "url": "https://github.com/apache/beam/commit/282f1cf06a948a93307204835b25ffc691dfe5c2", "message": "Adds a streaming wordcount integration test\n\nChange-Id: Id5bb36fc62ecede3306902807c069b8e705d39fb", "committedDate": "2020-03-23T19:19:08Z", "type": "forcePushed"}, {"oid": "7dec47932107897d1cfc25442e7a7e80e225bfce", "url": "https://github.com/apache/beam/commit/7dec47932107897d1cfc25442e7a7e80e225bfce", "message": "Adds a streaming wordcount integration test\n\nChange-Id: Id5bb36fc62ecede3306902807c069b8e705d39fb", "committedDate": "2020-03-23T19:40:10Z", "type": "forcePushed"}, {"oid": "06c365026fc255b6ccc1fbc800b76d3ab6445ba2", "url": "https://github.com/apache/beam/commit/06c365026fc255b6ccc1fbc800b76d3ab6445ba2", "message": "Adds a streaming wordcount integration test\n\nChange-Id: Id5bb36fc62ecede3306902807c069b8e705d39fb", "committedDate": "2020-03-23T19:58:50Z", "type": "commit"}, {"oid": "06c365026fc255b6ccc1fbc800b76d3ab6445ba2", "url": "https://github.com/apache/beam/commit/06c365026fc255b6ccc1fbc800b76d3ab6445ba2", "message": "Adds a streaming wordcount integration test\n\nChange-Id: Id5bb36fc62ecede3306902807c069b8e705d39fb", "committedDate": "2020-03-23T19:58:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MTc5Ng==", "url": "https://github.com/apache/beam/pull/11148#discussion_r396751796", "bodyText": "Does this not trigger the capture duration?", "author": "robertwb", "createdAt": "2020-03-23T20:57:32Z", "path": "sdks/python/apache_beam/runners/interactive/interactive_runner_test.py", "diffHunk": "@@ -147,6 +150,97 @@ def process(self, element):\n     ]\n     self.assertEqual(actual_reified, expected_reified)\n \n+  def test_streaming_wordcount(self):\n+    class WordExtractingDoFn(beam.DoFn):\n+      def process(self, element):\n+        text_line = element.strip()\n+        words = text_line.split()\n+        return words\n+\n+    # Add the TestStream so that it can be cached.\n+    ib.options.capturable_sources.add(TestStream)\n+    ib.options.capture_duration = timedelta(seconds=1)\n+\n+    p = beam.Pipeline(\n+        runner=interactive_runner.InteractiveRunner(),\n+        options=StandardOptions(streaming=True))\n+\n+    data = (\n+        p\n+        | TestStream()\n+            .advance_watermark_to(0)\n+            .advance_processing_time(1)\n+            .add_elements(['to', 'be', 'or', 'not', 'to', 'be'])\n+            .advance_watermark_to(20)\n+            .advance_processing_time(1)\n+            .add_elements(['to', 'be', 'or', 'not', 'to', 'be'])\n+            .advance_watermark_to(40)\n+            .advance_processing_time(1)", "originalCommit": "06c365026fc255b6ccc1fbc800b76d3ab6445ba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0ODcyOA==", "url": "https://github.com/apache/beam/pull/11148#discussion_r397348728", "bodyText": "No, because the fake clock is instantiated by the runner, the background caching job only has a handle on the real clock.", "author": "rohdesamuel", "createdAt": "2020-03-24T17:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MTc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjA4MQ==", "url": "https://github.com/apache/beam/pull/11148#discussion_r396752081", "bodyText": "Why is this need?", "author": "robertwb", "createdAt": "2020-03-23T20:58:00Z", "path": "sdks/python/apache_beam/runners/interactive/interactive_runner_test.py", "diffHunk": "@@ -147,6 +150,97 @@ def process(self, element):\n     ]\n     self.assertEqual(actual_reified, expected_reified)\n \n+  def test_streaming_wordcount(self):\n+    class WordExtractingDoFn(beam.DoFn):\n+      def process(self, element):\n+        text_line = element.strip()\n+        words = text_line.split()\n+        return words\n+\n+    # Add the TestStream so that it can be cached.\n+    ib.options.capturable_sources.add(TestStream)\n+    ib.options.capture_duration = timedelta(seconds=1)", "originalCommit": "06c365026fc255b6ccc1fbc800b76d3ab6445ba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0OTczNw==", "url": "https://github.com/apache/beam/pull/11148#discussion_r397349737", "bodyText": "Because the background_caching_job is using the real-time clock instead of the fake clock from the runner, we limit the capture duration to 1s to limit the length of the test.", "author": "rohdesamuel", "createdAt": "2020-03-24T17:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjUwNg==", "url": "https://github.com/apache/beam/pull/11148#discussion_r396752506", "bodyText": "It'd be easier to understand the test if there were less data.", "author": "robertwb", "createdAt": "2020-03-23T20:58:43Z", "path": "sdks/python/apache_beam/runners/interactive/interactive_runner_test.py", "diffHunk": "@@ -147,6 +150,97 @@ def process(self, element):\n     ]\n     self.assertEqual(actual_reified, expected_reified)\n \n+  def test_streaming_wordcount(self):\n+    class WordExtractingDoFn(beam.DoFn):\n+      def process(self, element):\n+        text_line = element.strip()\n+        words = text_line.split()\n+        return words\n+\n+    # Add the TestStream so that it can be cached.\n+    ib.options.capturable_sources.add(TestStream)\n+    ib.options.capture_duration = timedelta(seconds=1)\n+\n+    p = beam.Pipeline(\n+        runner=interactive_runner.InteractiveRunner(),\n+        options=StandardOptions(streaming=True))\n+\n+    data = (\n+        p\n+        | TestStream()\n+            .advance_watermark_to(0)\n+            .advance_processing_time(1)\n+            .add_elements(['to', 'be', 'or', 'not', 'to', 'be'])\n+            .advance_watermark_to(20)\n+            .advance_processing_time(1)\n+            .add_elements(['to', 'be', 'or', 'not', 'to', 'be'])\n+            .advance_watermark_to(40)\n+            .advance_processing_time(1)\n+            .add_elements(['to', 'be', 'or', 'not', 'to', 'be'])\n+        | beam.WindowInto(beam.window.FixedWindows(10))) # yapf: disable\n+\n+    counts = (\n+        data\n+        | 'split' >> beam.ParDo(WordExtractingDoFn())\n+        | 'pair_with_one' >> beam.Map(lambda x: (x, 1))\n+        | 'group' >> beam.GroupByKey()\n+        | 'count' >> beam.Map(lambda wordones: (wordones[0], sum(wordones[1]))))\n+\n+    # Watch the local scope for Interactive Beam so that referenced PCollections\n+    # will be cached.\n+    ib.watch(locals())\n+\n+    # This is normally done in the interactive_utils when a transform is\n+    # applied but needs an IPython environment. So we manually run this here.\n+    ie.current_env().track_user_pipelines()\n+\n+    # This tests that the data was correctly cached.\n+    pane_info = PaneInfo(True, True, PaneInfoTiming.UNKNOWN, 0, 0)\n+    expected_data_df = pd.DataFrame(\n+        [('to', 0, [beam.window.IntervalWindow(0, 10)], pane_info),", "originalCommit": "06c365026fc255b6ccc1fbc800b76d3ab6445ba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTcwMQ==", "url": "https://github.com/apache/beam/pull/11148#discussion_r397351701", "bodyText": "Initially I had the test to generate the data in code, but I felt that this was more explicit and easier to show what we are expecting. In some ways, the test is about the data and to make that obvious and explicit makes it easier to understand.", "author": "rohdesamuel", "createdAt": "2020-03-24T17:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4OTM2Nw==", "url": "https://github.com/apache/beam/pull/11148#discussion_r397489367", "bodyText": "I agree that making things explicit can make it easier to understand. What I was asking was whether adding six items three times each increased the coverage of adding (say) three items (one duplicate), advancing the watermark, then adding one or two more.", "author": "robertwb", "createdAt": "2020-03-24T22:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNDUyMw==", "url": "https://github.com/apache/beam/pull/11148#discussion_r397534523", "bodyText": "Ohhh I see, I misread your comment. I changed it to a smaller set of data that doesn't have duplicates to test the windowing.", "author": "rohdesamuel", "createdAt": "2020-03-25T00:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNjM2Nw==", "url": "https://github.com/apache/beam/pull/11148#discussion_r397536367", "bodyText": "Thanks, that's much better--now I can read it and know the answer is right. (Duplicates would have been OK, and the data set could be smaller still and still provide the right coverage, but this is fine.)\nLGMT", "author": "robertwb", "createdAt": "2020-03-25T00:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MjUwNg=="}], "type": "inlineReview"}, {"oid": "a573e619e08d1527b732cbef3ad5a5911f7af3e7", "url": "https://github.com/apache/beam/commit/a573e619e08d1527b732cbef3ad5a5911f7af3e7", "message": "changed data to be less repetitive\n\nChange-Id: I48d41a7165be3239ba300cc300bf0808ecde95c9", "committedDate": "2020-03-24T23:52:30Z", "type": "commit"}]}