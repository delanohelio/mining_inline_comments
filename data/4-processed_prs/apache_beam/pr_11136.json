{"pr_number": 11136, "pr_title": "[BEAM-7505] Add side input load test to Python SDK ", "pr_createdAt": "2020-03-16T11:38:36Z", "pr_url": "https://github.com/apache/beam/pull/11136", "timeline": [{"oid": "0b32001319c23176fc4a639f31ce4fcdd0bb725f", "url": "https://github.com/apache/beam/commit/0b32001319c23176fc4a639f31ce4fcdd0bb725f", "message": "[BEAM-7505] Remove old side input test", "committedDate": "2020-03-16T11:19:53Z", "type": "commit"}, {"oid": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c", "url": "https://github.com/apache/beam/commit/5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c", "message": "[BEAM-7505] Add side input load test to Python SDK", "committedDate": "2020-03-16T11:29:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMDAwNQ==", "url": "https://github.com/apache/beam/pull/11136#discussion_r395220005", "bodyText": "It'd be helpful to list the types here, too.", "author": "ibzib", "createdAt": "2020-03-19T18:02:24Z", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -47,65 +49,154 @@\n or:\n \n ./gradlew -PloadTest.args=\"\n-    --publish_to_big_query=true\n-    --project=...\n-    --metrics_dataset=python_load_tests\n-    --metrics_table=side_input\n+    --side_input_type=iter\n     --input_options='{\n-      \\\"num_records\\\": 1,\n-      \\\"key_size\\\": 1,\n-      \\\"value_size\\\": 1}'\n-    --runner=DirectRunner\" \\\n+      \\\"num_records\\\": 300,\n+      \\\"key_size\\\": 5,\n+      \\\"value_size\\\": 15}'\" \\\n -PloadTest.mainClass=apache_beam.testing.load_tests.sideinput_test \\\n -Prunner=DirectRunner :sdks:python:apache_beam:testing:load_tests:run\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n+from __future__ import division\n \n import logging\n \n import apache_beam as beam\n-from apache_beam.pvalue import AsIter\n from apache_beam.testing.load_tests.load_test import LoadTest\n from apache_beam.testing.load_tests.load_test_metrics_utils import MeasureTime\n from apache_beam.testing.synthetic_pipeline import SyntheticSource\n \n \n class SideInputTest(LoadTest):\n+  SIDE_INPUT_TYPES = {\n+      'iter': beam.pvalue.AsIter,\n+      'list': beam.pvalue.AsList,\n+      'dict': beam.pvalue.AsDict,\n+  }\n+\n   def __init__(self):\n     super(SideInputTest, self).__init__()\n-    self.iterations = self.get_option_or_default(\n-        'number_of_counter_operations', 1)\n+    self.windows = self.get_option_or_default('window_count', default=0)\n+    self.access_percentage = self.get_option_or_default(\n+        'access_percentage', default=100)\n+    if self.access_percentage < 0 or self.access_percentage > 100:\n+      raise ValueError(\n+          'access_percentage: Invalid value. Should be in range '\n+          'from 0 to 100, got {} instead'.format(self.access_percentage))\n+\n+    self.side_input_size = self.get_option_or_default(\n+        'side_input_size', default=0)\n+    if self.side_input_size == 0:\n+      self.side_input_size = self.input_options.get('num_records')\n+\n+    self.side_input_type = self.pipeline.get_option('side_input_type')\n+    if self.side_input_type is None:\n+      raise ValueError('side_input_type is required')", "originalCommit": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTYzNg==", "url": "https://github.com/apache/beam/pull/11136#discussion_r395225636", "bodyText": "For first_n < len(side_input), wouldn't we access a total of first_n + 1 elements?", "author": "ibzib", "createdAt": "2020-03-19T18:12:13Z", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -47,65 +49,154 @@\n or:\n \n ./gradlew -PloadTest.args=\"\n-    --publish_to_big_query=true\n-    --project=...\n-    --metrics_dataset=python_load_tests\n-    --metrics_table=side_input\n+    --side_input_type=iter\n     --input_options='{\n-      \\\"num_records\\\": 1,\n-      \\\"key_size\\\": 1,\n-      \\\"value_size\\\": 1}'\n-    --runner=DirectRunner\" \\\n+      \\\"num_records\\\": 300,\n+      \\\"key_size\\\": 5,\n+      \\\"value_size\\\": 15}'\" \\\n -PloadTest.mainClass=apache_beam.testing.load_tests.sideinput_test \\\n -Prunner=DirectRunner :sdks:python:apache_beam:testing:load_tests:run\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n+from __future__ import division\n \n import logging\n \n import apache_beam as beam\n-from apache_beam.pvalue import AsIter\n from apache_beam.testing.load_tests.load_test import LoadTest\n from apache_beam.testing.load_tests.load_test_metrics_utils import MeasureTime\n from apache_beam.testing.synthetic_pipeline import SyntheticSource\n \n \n class SideInputTest(LoadTest):\n+  SIDE_INPUT_TYPES = {\n+      'iter': beam.pvalue.AsIter,\n+      'list': beam.pvalue.AsList,\n+      'dict': beam.pvalue.AsDict,\n+  }\n+\n   def __init__(self):\n     super(SideInputTest, self).__init__()\n-    self.iterations = self.get_option_or_default(\n-        'number_of_counter_operations', 1)\n+    self.windows = self.get_option_or_default('window_count', default=0)\n+    self.access_percentage = self.get_option_or_default(\n+        'access_percentage', default=100)\n+    if self.access_percentage < 0 or self.access_percentage > 100:\n+      raise ValueError(\n+          'access_percentage: Invalid value. Should be in range '\n+          'from 0 to 100, got {} instead'.format(self.access_percentage))\n+\n+    self.side_input_size = self.get_option_or_default(\n+        'side_input_size', default=0)\n+    if self.side_input_size == 0:\n+      self.side_input_size = self.input_options.get('num_records')\n+\n+    self.side_input_type = self.pipeline.get_option('side_input_type')\n+    if self.side_input_type is None:\n+      raise ValueError('side_input_type is required')\n+\n+  def materialize_as(self):\n+    try:\n+      return self.SIDE_INPUT_TYPES[self.side_input_type]\n+    except KeyError:\n+      raise ValueError(\n+          'Unknown side input type. You have to provide one of '\n+          'these: {}'.format(list(self.SIDE_INPUT_TYPES.keys())))\n \n   def test(self):\n-    def join_fn(element, side_input, iterations):\n-      result = []\n-      for i in range(iterations):\n-        for key, value in side_input:\n-          if i == iterations - 1:\n-            result.append({key: element[1] + value})\n-      yield result\n-\n-    main_input = (\n+    class SequenceSideInputTestDoFn(beam.DoFn):\n+      \"\"\"Iterate over first n side_input elements. Iterate over all\n+      elements if `first_n` is :data:`None`.\"\"\"\n+      def __init__(self, first_n=None):\n+        self._first_n = first_n\n+\n+      def process(self, unused_element, side_input):\n+        for i, _ in enumerate(side_input):\n+          if self._first_n and i >= self._first_n:\n+            return\n+          # No-op. We only make sure that the element is accessed.", "originalCommit": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3ODU5MA==", "url": "https://github.com/apache/beam/pull/11136#discussion_r395678590", "bodyText": "Ohh that's right. Thanks.\nI'll use a while loop and iter(), so that we'd be able to treat list and iterable in the same way.", "author": "kamilwu", "createdAt": "2020-03-20T14:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTUyNQ==", "url": "https://github.com/apache/beam/pull/11136#discussion_r395229525", "bodyText": "Is there any particular reason we need to use the real time? If not, it would be easier to read timestamps if we start at 0.", "author": "ibzib", "createdAt": "2020-03-19T18:18:56Z", "path": "sdks/python/apache_beam/testing/load_tests/sideinput_test.py", "diffHunk": "@@ -47,65 +49,154 @@\n or:\n \n ./gradlew -PloadTest.args=\"\n-    --publish_to_big_query=true\n-    --project=...\n-    --metrics_dataset=python_load_tests\n-    --metrics_table=side_input\n+    --side_input_type=iter\n     --input_options='{\n-      \\\"num_records\\\": 1,\n-      \\\"key_size\\\": 1,\n-      \\\"value_size\\\": 1}'\n-    --runner=DirectRunner\" \\\n+      \\\"num_records\\\": 300,\n+      \\\"key_size\\\": 5,\n+      \\\"value_size\\\": 15}'\" \\\n -PloadTest.mainClass=apache_beam.testing.load_tests.sideinput_test \\\n -Prunner=DirectRunner :sdks:python:apache_beam:testing:load_tests:run\n \"\"\"\n \n # pytype: skip-file\n \n from __future__ import absolute_import\n+from __future__ import division\n \n import logging\n \n import apache_beam as beam\n-from apache_beam.pvalue import AsIter\n from apache_beam.testing.load_tests.load_test import LoadTest\n from apache_beam.testing.load_tests.load_test_metrics_utils import MeasureTime\n from apache_beam.testing.synthetic_pipeline import SyntheticSource\n \n \n class SideInputTest(LoadTest):\n+  SIDE_INPUT_TYPES = {\n+      'iter': beam.pvalue.AsIter,\n+      'list': beam.pvalue.AsList,\n+      'dict': beam.pvalue.AsDict,\n+  }\n+\n   def __init__(self):\n     super(SideInputTest, self).__init__()\n-    self.iterations = self.get_option_or_default(\n-        'number_of_counter_operations', 1)\n+    self.windows = self.get_option_or_default('window_count', default=0)\n+    self.access_percentage = self.get_option_or_default(\n+        'access_percentage', default=100)\n+    if self.access_percentage < 0 or self.access_percentage > 100:\n+      raise ValueError(\n+          'access_percentage: Invalid value. Should be in range '\n+          'from 0 to 100, got {} instead'.format(self.access_percentage))\n+\n+    self.side_input_size = self.get_option_or_default(\n+        'side_input_size', default=0)\n+    if self.side_input_size == 0:\n+      self.side_input_size = self.input_options.get('num_records')\n+\n+    self.side_input_type = self.pipeline.get_option('side_input_type')\n+    if self.side_input_type is None:\n+      raise ValueError('side_input_type is required')\n+\n+  def materialize_as(self):\n+    try:\n+      return self.SIDE_INPUT_TYPES[self.side_input_type]\n+    except KeyError:\n+      raise ValueError(\n+          'Unknown side input type. You have to provide one of '\n+          'these: {}'.format(list(self.SIDE_INPUT_TYPES.keys())))\n \n   def test(self):\n-    def join_fn(element, side_input, iterations):\n-      result = []\n-      for i in range(iterations):\n-        for key, value in side_input:\n-          if i == iterations - 1:\n-            result.append({key: element[1] + value})\n-      yield result\n-\n-    main_input = (\n+    class SequenceSideInputTestDoFn(beam.DoFn):\n+      \"\"\"Iterate over first n side_input elements. Iterate over all\n+      elements if `first_n` is :data:`None`.\"\"\"\n+      def __init__(self, first_n=None):\n+        self._first_n = first_n\n+\n+      def process(self, unused_element, side_input):\n+        for i, _ in enumerate(side_input):\n+          if self._first_n and i >= self._first_n:\n+            return\n+          # No-op. We only make sure that the element is accessed.\n+\n+    class MappingSideInputTestDoFn(beam.DoFn):\n+      \"\"\"Take a sequence of keys as an additional side input and for each\n+      key in the sequence checks the value for key in the dictionary.\"\"\"\n+      def process(self, unused_element, dict_side_input, keys_to_check):\n+        for key in keys_to_check:\n+          # No-op. We only make sure that the element is accessed.\n+          dict_side_input[key]\n+\n+    class GetRandomKeys(beam.DoFn):\n+      def __init__(self, n):\n+        self._n = n\n+\n+      def process(self, unused_element, dict_side_input):\n+        import random\n+        n = min(self._n, len(dict_side_input))\n+        return random.sample(dict_side_input.keys(), n)\n+\n+    class AddEventTimestamps(beam.DoFn):\n+      \"\"\"Assign timestamp to each element of PCollection, starting from the\n+      current Unix seconds-since-epoch timestamp.\"\"\"\n+      def setup(self):\n+        import time\n+        self.current_time = int(time.time())", "originalCommit": "5f19191e09b1ae251e4a4b003a2aa94b80fa4b7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDYwOQ==", "url": "https://github.com/apache/beam/pull/11136#discussion_r395594609", "bodyText": "No particular reason. I'll change it to start at 0.", "author": "kamilwu", "createdAt": "2020-03-20T12:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyOTUyNQ=="}], "type": "inlineReview"}, {"oid": "933022ac5f18a185f2fd62c157bb3578738000fe", "url": "https://github.com/apache/beam/commit/933022ac5f18a185f2fd62c157bb3578738000fe", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* assign timestamps starting from 0", "committedDate": "2020-03-20T14:32:47Z", "type": "forcePushed"}, {"oid": "2ce6d540dc57760e1c092739b743947cf954b912", "url": "https://github.com/apache/beam/commit/2ce6d540dc57760e1c092739b743947cf954b912", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* use while loop for iterating over a sequence\n* assign timestamps starting from 0", "committedDate": "2020-03-20T14:37:24Z", "type": "commit"}, {"oid": "2ce6d540dc57760e1c092739b743947cf954b912", "url": "https://github.com/apache/beam/commit/2ce6d540dc57760e1c092739b743947cf954b912", "message": "fix: changes after review\n\n* list available types if `side_input_type` is None\n* don't check if `self._first_n` is not None (will always be not None)\n* use while loop for iterating over a sequence\n* assign timestamps starting from 0", "committedDate": "2020-03-20T14:37:24Z", "type": "forcePushed"}]}