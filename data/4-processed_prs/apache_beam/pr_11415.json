{"pr_number": 11415, "pr_title": "[BEAM-9650] Cleanup documentation on side inputs patterns", "pr_createdAt": "2020-04-14T18:10:53Z", "pr_url": "https://github.com/apache/beam/pull/11415", "timeline": [{"oid": "e935e7774e7824eeb659a5a9fb67aacd2480e592", "url": "https://github.com/apache/beam/commit/e935e7774e7824eeb659a5a9fb67aacd2480e592", "message": "Cleanup documentation", "committedDate": "2020-04-14T18:46:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1ODU4Ng==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408358586", "bodyText": "In Beam, we have IO.Read transforms that do read source data. Later data read can be assigned to specific window.", "author": "Ardagan", "createdAt": "2020-04-14T18:47:46Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,24 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n+You can read side input data periodically into distinct PCollection windows.", "originalCommit": "e935e7774e7824eeb659a5a9fb67aacd2480e592", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "232357e5a5f38947e05c7ed87e186505db5d738b", "url": "https://github.com/apache/beam/commit/232357e5a5f38947e05c7ed87e186505db5d738b", "message": "Cleanup documentation", "committedDate": "2020-04-14T18:50:07Z", "type": "commit"}, {"oid": "232357e5a5f38947e05c7ed87e186505db5d738b", "url": "https://github.com/apache/beam/commit/232357e5a5f38947e05c7ed87e186505db5d738b", "message": "Cleanup documentation", "committedDate": "2020-04-14T18:50:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMDc4MQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408430781", "bodyText": "Missing \"the\" -> \"on the main input\"\nPresent tense -> \"is matched to a single...\"", "author": "soyrice", "createdAt": "2020-04-14T20:57:51Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMDgzNA==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408430834", "bodyText": "What does the term \"main input side\" mean?", "author": "soyrice", "createdAt": "2020-04-14T20:57:56Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMTMyNQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408431325", "bodyText": "It's probably best to replace \"To do this\" with \"To do ABC\" - it'll help the reader figure out what \"this\" refers to. Otherwise, if the reader is just skimming the page and starts at this paragraph, they have to read the previous paragraph to figure out what the pronoun refers to.", "author": "soyrice", "createdAt": "2020-04-14T20:58:53Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single\n+version of side input data.\n+\n+To do this, you can utilize a combination of PeriodicSequence/PeriodicImpulse", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMjg1Mw==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408432853", "bodyText": "For formatting, it might be clearer to say \"a combination of PeriodicSequence and PeriodicImpulse PTransforms\" instead of \"PeriodicSequence/PeriodicImpulse PTransforms\" - just to make sure there's no ambiguity in regards to these being two separate transforms.", "author": "soyrice", "createdAt": "2020-04-14T21:01:35Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single\n+version of side input data.\n+\n+To do this, you can utilize a combination of PeriodicSequence/PeriodicImpulse", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMzE0Mw==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408433143", "bodyText": "Present tense -> \"PTransforms that generate\"\nMissing article -> \"generate an infinite sequence...\"", "author": "soyrice", "createdAt": "2020-04-14T21:02:10Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single\n+version of side input data.\n+\n+To do this, you can utilize a combination of PeriodicSequence/PeriodicImpulse\n+PTransforms that will generate infinite sequence of elements with some real-time", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMzkzMA==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408433930", "bodyText": "I think we should split this sentence into two - it's hard to follow. A good place to start a new sentence is at \"SDF Read operation\"", "author": "soyrice", "createdAt": "2020-04-14T21:03:40Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single\n+version of side input data.\n+\n+To do this, you can utilize a combination of PeriodicSequence/PeriodicImpulse\n+PTransforms that will generate infinite sequence of elements with some real-time\n+period and SDF Read operation or similar to read data into side input", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNDczMw==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408434733", "bodyText": "On a second look, I think it's redundant to say \"Read data using a Read operation\" - maybe we can say something like \"Read data when a PCollection element arrives\"", "author": "soyrice", "createdAt": "2020-04-14T21:05:14Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single\n+version of side input data.\n+\n+To do this, you can utilize a combination of PeriodicSequence/PeriodicImpulse\n+PTransforms that will generate infinite sequence of elements with some real-time\n+period and SDF Read operation or similar to read data into side input\n+periodically:\n \n 1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n \n-    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n-\n 1. Read data using Read operation triggered by arrival of PCollection element.", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0ODQ1MQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408448451", "bodyText": "Seems that adding this snippet makes java snippet at L45 disappear from served site despite me not changing anything in code above. Do you know if there's some trick to make both snippets appear?", "author": "Ardagan", "createdAt": "2020-04-14T21:31:48Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -50,25 +50,25 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees side input consistency on the duration of the single window,\n+meaning that each window on main input side will be matched to a single\n+version of side input data.\n+\n+To do this, you can utilize a combination of PeriodicSequence/PeriodicImpulse\n+PTransforms that will generate infinite sequence of elements with some real-time\n+period and SDF Read operation or similar to read data into side input\n+periodically:\n \n 1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n \n-    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n-\n 1. Read data using Read operation triggered by arrival of PCollection element.\n \n 1. Apply side input.\n \n-```python\n+```py", "originalCommit": "232357e5a5f38947e05c7ed87e186505db5d738b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1Mzc4OQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408453789", "bodyText": "Website sets config for the page to show only python or java snippets. It seem to pick the last language provided as default.", "author": "Ardagan", "createdAt": "2020-04-14T21:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0ODQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTc4Nw==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408995787", "bodyText": "Yeah, the issue is that the page can only show one language at a time.", "author": "soyrice", "createdAt": "2020-04-15T17:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0ODQ1MQ=="}], "type": "inlineReview"}, {"oid": "96814cbb01d55b94866a2ebbf9b81ceebee3ae95", "url": "https://github.com/apache/beam/commit/96814cbb01d55b94866a2ebbf9b81ceebee3ae95", "message": "Address comments", "committedDate": "2020-04-14T21:51:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MjAwOQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408942009", "bodyText": "Oh! Can we format this with bullet points:\n\nUse the PeriodicImpulse... to:\n\n\nGenerate an infinite sequence of elements...\nAssign the elements to separate windows...\n\n\nRead data...", "author": "soyrice", "createdAt": "2020-04-15T15:40:34Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -46,29 +54,36 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n ```\n+```py\n+No sample present.\n+```\n \n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees consistency on the duration of the single window,\n+meaning that each window on the main input will be matched to a single\n+version of side input data.\n \n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+Described approach can be implemented using combination of\n+PeriodicSequence or PeriodicImpulse PTransforms and SDF Read or ReadAll\n+PTransforms:\n \n-1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n-\n-    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n+1. Use the PeriodicImpulse or PeriodicSequence PTransform to generate an", "originalCommit": "96814cbb01d55b94866a2ebbf9b81ceebee3ae95", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0Mzc2Ng==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408943766", "bodyText": "How about something like this: \"To read side input data periodically... use a combination of PeriodicSequence...\"", "author": "soyrice", "createdAt": "2020-04-15T15:43:05Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -46,29 +54,36 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n ```\n+```py\n+No sample present.\n+```\n \n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees consistency on the duration of the single window,\n+meaning that each window on the main input will be matched to a single\n+version of side input data.\n \n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+Described approach can be implemented using combination of", "originalCommit": "96814cbb01d55b94866a2ebbf9b81ceebee3ae95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDE1MQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408990151", "bodyText": "I'm a bit confused here since adding text you suggest is pretty much re-writing same thing that is a header and previous abstract. In next iteration I tried to remove this abstract overall since list of steps provides same information.", "author": "Ardagan", "createdAt": "2020-04-15T16:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0Mzc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NDQ4OQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408994489", "bodyText": "Gotcha - the intent is to summarize the previous abstract, so that it's easier for readers to skim the doc.", "author": "soyrice", "createdAt": "2020-04-15T16:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0Mzc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NTQ0Mg==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408945442", "bodyText": "SDF Read and ReadAll are transforms too, right? The following will help clarify what the combination consists of: \"...PeriodicSequence or PeriodicImpulse PTransforms and SDF Read or ReadAll PTransforms\"", "author": "soyrice", "createdAt": "2020-04-15T15:45:26Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -46,29 +54,36 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n ```\n+```py\n+No sample present.\n+```\n \n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees consistency on the duration of the single window,\n+meaning that each window on the main input will be matched to a single\n+version of side input data.\n \n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+Described approach can be implemented using combination of\n+PeriodicSequence or PeriodicImpulse PTransforms and SDF Read or ReadAll", "originalCommit": "96814cbb01d55b94866a2ebbf9b81ceebee3ae95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MDE3OQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408980179", "bodyText": "I might be missing something, but that's exactly the phrasing. \"PTransforms\" word is on next line.", "author": "Ardagan", "createdAt": "2020-04-15T16:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNDk5Nw==", "url": "https://github.com/apache/beam/pull/11415#discussion_r409124997", "bodyText": "I probably just missed the word. Looks good in staging.", "author": "soyrice", "createdAt": "2020-04-15T20:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NTQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MTA0Mw==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408951043", "bodyText": "I see you marked the previous comment here as resolved but I don't see any changes to this line. Was that intended?", "author": "soyrice", "createdAt": "2020-04-15T15:53:10Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -46,29 +54,36 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n ```\n+```py\n+No sample present.\n+```\n \n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees consistency on the duration of the single window,\n+meaning that each window on the main input will be matched to a single\n+version of side input data.\n \n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n+Described approach can be implemented using combination of\n+PeriodicSequence or PeriodicImpulse PTransforms and SDF Read or ReadAll\n+PTransforms:\n \n-1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n-\n-    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n+1. Use the PeriodicImpulse or PeriodicSequence PTransform to generate an\n+infinite sequence of elements at required processing time intervals and assign\n+them to separate windows.\n \n 1. Read data using Read operation triggered by arrival of PCollection element.", "originalCommit": "96814cbb01d55b94866a2ebbf9b81ceebee3ae95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDM2Nw==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408990367", "bodyText": "Was not intended. FIxed.", "author": "Ardagan", "createdAt": "2020-04-15T16:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MTA0Mw=="}], "type": "inlineReview"}, {"oid": "c931ba96db418832b2ddd63590203b6a0c960f97", "url": "https://github.com/apache/beam/commit/c931ba96db418832b2ddd63590203b6a0c960f97", "message": "Rephrase", "committedDate": "2020-04-15T16:49:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5ODQ0NQ==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408998445", "bodyText": "We should rephrase as \"To read side input data periodically:\"\nThe goal is to summarize the previous paragraph, so that it's clear what these steps refer to without needing to read through the previous paragraph. The previous paragraph offers additional context, but if a reader skims the page, they should be able to quickly figure out what these steps are about.", "author": "soyrice", "createdAt": "2020-04-15T17:06:06Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -46,29 +54,34 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n ```\n+```py\n+No sample present.\n+```\n \n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n-\n-1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n-\n-    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n-\n-1. Read data using Read operation triggered by arrival of PCollection element.\n-\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees consistency on the duration of the single window,\n+meaning that each window on the main input will be matched to a single\n+version of side input data.\n+\n+Implementation of described approach can be narrowed down to:", "originalCommit": "c931ba96db418832b2ddd63590203b6a0c960f97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTE1OA==", "url": "https://github.com/apache/beam/pull/11415#discussion_r408999158", "bodyText": "Missing \"the\" -> \"Apply the side input\"", "author": "soyrice", "createdAt": "2020-04-15T17:07:19Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -46,29 +54,34 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n ```\n+```py\n+No sample present.\n+```\n \n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n-\n-1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n-\n-    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n-\n-1. Read data using Read operation triggered by arrival of PCollection element.\n-\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input\n+window is automatically matched to a single side input window.\n+This guarantees consistency on the duration of the single window,\n+meaning that each window on the main input will be matched to a single\n+version of side input data.\n+\n+Implementation of described approach can be narrowed down to:\n+\n+1. Use the PeriodicImpulse or PeriodicSequence PTransform to: \n+    * Generate an infinite sequence of elements at required processing time\n+    intervals\n+    * Assign them to separate windows.\n+1. Fetch data using SDF Read or ReadAll PTransform triggered by arrival of\n+PCollection element.\n 1. Apply side input.", "originalCommit": "c931ba96db418832b2ddd63590203b6a0c960f97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a914d7c4d26d55a899260b5af97915ccead3cedf", "url": "https://github.com/apache/beam/commit/a914d7c4d26d55a899260b5af97915ccead3cedf", "message": "one more rephrasing", "committedDate": "2020-04-15T17:29:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyNzMzNg==", "url": "https://github.com/apache/beam/pull/11415#discussion_r409127336", "bodyText": "I think we should remove \"Later\" because this is a part of the overall workflow described in the previous sentence, rather than a secondary step.\nSo this should be: \"When you apply the side input to your main input...\"", "author": "soyrice", "createdAt": "2020-04-15T20:53:28Z", "path": "website/src/documentation/patterns/side-inputs.md", "diffHunk": "@@ -46,29 +54,34 @@ For instance, the following code sample uses a `Map` to create a `DoFn`. The `Ma\n {% github_sample /apache/beam/blob/master/examples/java/src/main/java/org/apache/beam/examples/snippets/Snippets.java tag:SideInputPatternSlowUpdateGlobalWindowSnip1\n %}\n ```\n+```py\n+No sample present.\n+```\n \n \n ## Slowly updating side input using windowing\n \n-You can read side input pcollection periodically into distinct windows.\n-Later, when you apply side input to your main input, windows will be matched automatically 1:1.\n-This way, you can guarantee side input consistency on the duration of the single window.\n-\n-To do this, you can utilize PeriodicSequence PTransform that will generate infinite sequence\n-of elements with some real-time period:\n-\n-1. Use the PeriodicImpulse transform to generate windowed periodic sequence.\n-\n-    a. MAX_TIMESTAMP can be replaced with some closer boundary if you want to stop generating elements at some point.\n+You can read side input data periodically into distinct PCollection windows.\n+Later, when you apply the side input to your main input, each main input", "originalCommit": "a914d7c4d26d55a899260b5af97915ccead3cedf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "297d6304cfe805b26e017dcf3f16255b048b658b", "url": "https://github.com/apache/beam/commit/297d6304cfe805b26e017dcf3f16255b048b658b", "message": "One more comment", "committedDate": "2020-04-17T18:03:18Z", "type": "commit"}]}