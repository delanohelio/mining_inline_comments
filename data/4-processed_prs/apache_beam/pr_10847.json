{"pr_number": 10847, "pr_title": "[BEAM-9228] Support further partition for FnApi ListBuffer", "pr_createdAt": "2020-02-12T23:09:21Z", "pr_url": "https://github.com/apache/beam/pull/10847", "timeline": [{"oid": "5d10ae7044c5df896eb0916cdb724d8f28053a37", "url": "https://github.com/apache/beam/commit/5d10ae7044c5df896eb0916cdb724d8f28053a37", "message": "[BEAM-9228] support futher partition for _ListBuffer", "committedDate": "2020-02-13T05:20:46Z", "type": "forcePushed"}, {"oid": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "url": "https://github.com/apache/beam/commit/f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "message": "[BEAM-9228] support futher partition for _ListBuffer", "committedDate": "2020-02-13T05:36:39Z", "type": "commit"}, {"oid": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "url": "https://github.com/apache/beam/commit/f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "message": "[BEAM-9228] support futher partition for _ListBuffer", "committedDate": "2020-02-13T05:36:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzODAyMg==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379038022", "bodyText": "You can replace this for loop with self._grouped_output = [output_stream.get() for output_stream in output_stream_list] and omit the assignment above. Similarly, above, you can write output_stream_list = [create_OutputStream() for _ in range(n)].", "author": "robertwb", "createdAt": "2020-02-13T18:24:03Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -285,11 +285,50 @@ def partition(self, n):\n     pass\n \n \n-class _ListBuffer(List[bytes]):\n+class _ListBuffer():\n   \"\"\"Used to support parititioning of a list.\"\"\"\n+  def __init__(self, input_coder):\n+    self._input_coder = input_coder\n+    self._inputs = []\n+    self._grouped_output = None\n+    self.cleared = False\n+\n+  def append(self, element):\n+    if self._grouped_output:\n+      raise RuntimeError('ListBuffer append after read.')\n+    self._inputs.append(element)\n+\n   def partition(self, n):\n     # type: (int) -> List[List[bytes]]\n-    return [self[k::n] for k in range(n)]\n+    if len(self._inputs) >= n or len(self._inputs) == 0:\n+      return [self._inputs[k::n] for k in range(n)]\n+    else:\n+      if not self._grouped_output:\n+        self._grouped_output = [[] for _ in range(n)]\n+        coder_impl = self._input_coder.get_impl()\n+        decoded_input = []\n+        output_stream_list = []\n+        for _ in range(n):\n+          output_stream_list.append(create_OutputStream())\n+        for input in self._inputs:\n+          input_stream = create_InputStream(input)\n+          while input_stream.size() > 0:\n+            decoded_value = coder_impl.decode_from_stream(input_stream, True)\n+            decoded_input.append(decoded_value)\n+        for idx, v in enumerate(decoded_input):\n+          coder_impl.encode_to_stream(v, output_stream_list[idx % n], True)\n+        for ix, output_stream in enumerate(output_stream_list):", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzOTA2MA==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379039060", "bodyText": "Rather than creating an in-memory list of all decoded inputs, just append decoded_value to one of the output streams here (incrementing a counter to round-robin).", "author": "robertwb", "createdAt": "2020-02-13T18:26:02Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -285,11 +285,50 @@ def partition(self, n):\n     pass\n \n \n-class _ListBuffer(List[bytes]):\n+class _ListBuffer():\n   \"\"\"Used to support parititioning of a list.\"\"\"\n+  def __init__(self, input_coder):\n+    self._input_coder = input_coder\n+    self._inputs = []\n+    self._grouped_output = None\n+    self.cleared = False\n+\n+  def append(self, element):\n+    if self._grouped_output:\n+      raise RuntimeError('ListBuffer append after read.')\n+    self._inputs.append(element)\n+\n   def partition(self, n):\n     # type: (int) -> List[List[bytes]]\n-    return [self[k::n] for k in range(n)]\n+    if len(self._inputs) >= n or len(self._inputs) == 0:\n+      return [self._inputs[k::n] for k in range(n)]\n+    else:\n+      if not self._grouped_output:\n+        self._grouped_output = [[] for _ in range(n)]\n+        coder_impl = self._input_coder.get_impl()\n+        decoded_input = []\n+        output_stream_list = []\n+        for _ in range(n):\n+          output_stream_list.append(create_OutputStream())\n+        for input in self._inputs:\n+          input_stream = create_InputStream(input)\n+          while input_stream.size() > 0:\n+            decoded_value = coder_impl.decode_from_stream(input_stream, True)\n+            decoded_input.append(decoded_value)", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzOTQ4Mg==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379039482", "bodyText": "Can you simply return iter(self._inputs)?", "author": "robertwb", "createdAt": "2020-02-13T18:26:50Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -285,11 +285,50 @@ def partition(self, n):\n     pass\n \n \n-class _ListBuffer(List[bytes]):\n+class _ListBuffer():\n   \"\"\"Used to support parititioning of a list.\"\"\"\n+  def __init__(self, input_coder):\n+    self._input_coder = input_coder\n+    self._inputs = []\n+    self._grouped_output = None\n+    self.cleared = False\n+\n+  def append(self, element):\n+    if self._grouped_output:\n+      raise RuntimeError('ListBuffer append after read.')\n+    self._inputs.append(element)\n+\n   def partition(self, n):\n     # type: (int) -> List[List[bytes]]\n-    return [self[k::n] for k in range(n)]\n+    if len(self._inputs) >= n or len(self._inputs) == 0:\n+      return [self._inputs[k::n] for k in range(n)]\n+    else:\n+      if not self._grouped_output:\n+        self._grouped_output = [[] for _ in range(n)]\n+        coder_impl = self._input_coder.get_impl()\n+        decoded_input = []\n+        output_stream_list = []\n+        for _ in range(n):\n+          output_stream_list.append(create_OutputStream())\n+        for input in self._inputs:\n+          input_stream = create_InputStream(input)\n+          while input_stream.size() > 0:\n+            decoded_value = coder_impl.decode_from_stream(input_stream, True)\n+            decoded_input.append(decoded_value)\n+        for idx, v in enumerate(decoded_input):\n+          coder_impl.encode_to_stream(v, output_stream_list[idx % n], True)\n+        for ix, output_stream in enumerate(output_stream_list):\n+          self._grouped_output[ix] = [output_stream.get()]\n+        decoded_input = None\n+      return self._grouped_output\n+\n+  def __iter__(self):\n+    return itertools.chain(*self.partition(1))", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0MDgzMA==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379040830", "bodyText": "How is a None input coder safe?", "author": "robertwb", "createdAt": "2020-02-13T18:29:10Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -683,7 +723,7 @@ def _run_bundle_multiple_times_for_testing(\n         worker_handler.state.checkpoint()\n         testing_bundle_manager = ParallelBundleManager(\n             worker_handler_list,\n-            lambda pcoll_id: _ListBuffer(),\n+            lambda pcoll_id, transform_id: _ListBuffer(input_coder=None),", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0MjU5Ng==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379042596", "bodyText": "This is redundant with get_input_coder_impl_callable--either only take the coder-giving one (and call get_impl yourself) or let _ListBuffer take a coder_impl in its construction (which may simplify things elsewhere).", "author": "robertwb", "createdAt": "2020-02-13T18:32:33Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -728,28 +769,33 @@ def _collect_written_timers_and_add_to_deferred_inputs(\n         for windowed_key_timer in timers_by_key_and_window.values():\n           windowed_timer_coder_impl.encode_to_stream(\n               windowed_key_timer, out, True)\n-        deferred_inputs[transform_id] = _ListBuffer([out.get()])\n-        written_timers[:] = []\n+        deferred_inputs[transform_id] = _ListBuffer(input_coder=coder)\n+        deferred_inputs[transform_id].append(out.get())\n+        written_timers.clear()\n \n   def _add_residuals_and_channel_splits_to_deferred_inputs(\n       self,\n       splits,  # type: List[beam_fn_api_pb2.ProcessBundleSplitResponse]\n-      get_input_coder_callable,\n+      get_input_coder_impl_callable,\n       input_for_callable,\n       last_sent,\n-      deferred_inputs  # type: DefaultDict[str, PartitionableBuffer]\n+      deferred_inputs,  # type: DefaultDict[str, PartitionableBuffer]\n+      get_input_coder_callable", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0MzY0Nw==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379043647", "bodyText": "Do we have to worry about using safe coders here?", "author": "robertwb", "createdAt": "2020-02-13T18:34:32Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -907,6 +961,12 @@ def get_buffer(buffer_id):\n       if kind in ('materialize', 'timers'):\n         # If `buffer_id` is not a key in `pcoll_buffers`, it will be added by\n         # the `defaultdict`.\n+        if buffer_id not in pcoll_buffers:\n+          coder_id = beam_fn_api_pb2.RemoteGrpcPort.FromString(\n+              process_bundle_descriptor.transforms[transform_id].spec.payload\n+          ).coder_id\n+          coder = context.coders[coder_id]", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5MTU0MA==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379191540", "bodyText": "I have checked code for safe_coders, but still don't have clear ideas about it. What is the purpose of it? How do we handle for some coder_ids not part of safe_coders? Previously, I tried using safe_coders if the coder_id is in safe_coder, else return coders[coder_id]. This also pass tests, is it an option here?", "author": "Hannah-Jiang", "createdAt": "2020-02-14T00:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0MzY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NDAwNQ==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379044005", "bodyText": "safe_coders?", "author": "robertwb", "createdAt": "2020-02-13T18:35:14Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -937,6 +997,12 @@ def get_input_coder_impl(transform_id):\n               process_bundle_descriptor.transforms[transform_id].spec.payload).\n                       coder_id]].get_impl()\n \n+    def get_input_coder(transform_id):\n+      coder_id = beam_fn_api_pb2.RemoteGrpcPort.FromString(\n+          process_bundle_descriptor.transforms[transform_id].spec.payload\n+      ).coder_id\n+      return context.coders[coder_id]", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0ODczNw==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379048737", "bodyText": "This might fix your SDF issue as well. But if you use get_input_coder_impl everywhere, that might also fix things too.", "author": "robertwb", "createdAt": "2020-02-13T18:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NDAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NDYzMw==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379044633", "bodyText": "This pattern is repeated a lot, factor out into a method?", "author": "robertwb", "createdAt": "2020-02-13T18:36:24Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -973,28 +1039,38 @@ def input_for(transform_id, input_id):\n     last_sent = data_input\n \n     while True:\n-      deferred_inputs = collections.defaultdict(\n-          _ListBuffer)  # type: DefaultDict[str, PartitionableBuffer]\n+      deferred_inputs = {}\n \n       self._collect_written_timers_and_add_to_deferred_inputs(\n           context, pipeline_components, stage, get_buffer, deferred_inputs)\n \n       # Queue any process-initiated delayed bundle applications.\n       for delayed_application in last_result.process_bundle.residual_roots:\n-        deferred_inputs[input_for(\n+        name = input_for(\n             delayed_application.application.transform_id,\n-            delayed_application.application.input_id)].append(\n-                delayed_application.application.element)\n-\n+            delayed_application.application.input_id)\n+        if name not in deferred_inputs:\n+          input_pcoll = process_bundle_descriptor.transforms[\n+            delayed_application.application.transform_id].inputs[delayed_application.application.input_id]\n+          coder = context.coders[safe_coders[\n+            pipeline_components.pcollections[input_pcoll].coder_id]]\n+          deferred_inputs[name] = _ListBuffer(input_coder=coder)\n+        deferred_inputs[name].append(delayed_application.application.element)\n       # Queue any runner-initiated delayed bundle applications.\n       self._add_residuals_and_channel_splits_to_deferred_inputs(\n-          splits, get_input_coder_impl, input_for, last_sent, deferred_inputs)\n+          splits, get_input_coder_impl, input_for, last_sent, deferred_inputs,\n+          get_input_coder)\n \n       if deferred_inputs:\n         # The worker will be waiting on these inputs as well.\n         for other_input in data_input:\n           if other_input not in deferred_inputs:\n-            deferred_inputs[other_input] = _ListBuffer([])\n+            outputs = process_bundle_descriptor.transforms[", "originalCommit": "f8a12543649cfa982ff95317a8cf3a6a1c8c5b44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "url": "https://github.com/apache/beam/commit/4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "message": "address comments", "committedDate": "2020-02-15T00:54:00Z", "type": "commit"}, {"oid": "4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "url": "https://github.com/apache/beam/commit/4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "message": "address comments", "committedDate": "2020-02-15T00:54:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNDAzNw==", "url": "https://github.com/apache/beam/pull/10847#discussion_r379704037", "bodyText": "coder_id can be retrieved from transform payload most cases, except one following case. It returns '' coder_id.\nThis cause test_checkpoint_sdf test fails. How do we need to handle this case? Other SDF tests should be fixed now.\nspec {\n  urn: \"beam:transform:sdf_process_sized_element_and_restrictions:v1\"\n  payload: \"\\n\\215\\014\\n beam:dofn:pickled_python_info:v1\\032\\350\\013eNp9ldt31FQUxnNmBihpKSCorRdE8TLVOlBaLkXFy0AFI0NNEaJSYiY50wQyyXzJCVKcEVAzxfv9vf0XXcu1fPDBfc5MVy9QXmbNuezz/fa39zm5Wyy7XhCGFVv+6rabcEdwWyy2uA5t41oYO15/hVklTdPkfxRyFE2UrCGaOBtlTZ7QAXNeA9tcp+W4Prfr3GlWROJEaSNOmmnFjROun4lnIh3bc+zoYKBs6RRt283Yy0Ju29hpDfQmnCCioW7toGEriV2ephh8GHEji1wRxHTmUNlnKrwae/ySRNyVY9jE7rJRNDRjm1EyJqszC1qn2C4sayvaddYp3Rqn/4V2aYUlp9rF5WKbtUuNwgpj2n1tubSiMa1d8tgJrVPCnitau3iZZjxtTsOemsG62Fu29pGgmyUJj4Sd8FQkgcLBY9Y2WkmFkwjss3ZK15JF2w2doIn91nYaO60Wjzw8rhaDiPJp0iF4QuDJsrI55WEDI8oCHvYWR5XeOh2b/HVv8ARPqX0itnkzEHjaKva48IzAs0ou9RqV1iIO+IMXNFYd1kolprMhNswG2FABz1m712RsN84iQYcezPH8mMALJg65tl3PglDIuuirBdL9wUcW2zbXSGXhZ53Eaep4ceweXurg5bK1f1M2VOqbgUfKr/ha2S9Ze9c31+zqYvmRous0VyN0jOV4tYPXyv5OX1ceBlEgAifcULNxn3qI2qVA7VKgdpmrDgltmXmszVYKVPTXa4bWReUB6n4NUhy2BmnpYqORcmE60QLHkS4m/BF/tIuj/gF/3Pi7WtAYJsfI1SkTx7ZwdbxW6+B4TeCEiZPWsCxl/372qz29gbRIpLokJU5GnKdqOd7wD1sjazBrtJf6R7zZxVv+iAJe78HpLt4m0mnjH0X6jiR918R7W5BOS9IqkZ4xcbbX8q2QGnCmDyhvXtFgBLi9XViQcO8T3Lkx6Yl/egnnSWvG+Je0CvhAahkmPtxCa0ZqXSCtmomL1p5NRUiD2xyzG2QLJDvQu+wk/BEJm72LJbfO5bi0SvExUcwa/6mML0uKKyasLShmJcUnRPGpic/UpbNtL6bNuFqzdqlhGsYicpo8pcn5eVzLBGwTn1PXO+qBaslrYAce6tYhGq5vWLlSfqDjx+Bm9Rzewx5Al9MAvJ84o8QZJV6tDgitrY3KxBuU+II1KtFagXsj5J696aKn8HMEyhvJjes5bqx/NMJedBb14jeHo3nhGlPmRdK82ERrC/Oa0jyQeYmJ1DpIh04frfOTE8ecqfqkNzVVn6jzqSMnjx6ZPO5OT7j82AREjszEzRxfmLiVY7GD2xT/pYm2f7Xmk70d1cPqA2X7QSRSfPUwn2RinshaIX3G7qiQ8xflV+KcCrmrZoKolQl1Uop76ssWZ2Jt6mvlSZwEC0GEb5bwrcpgw1tE+xRDxeP0GDkiJm/zJXRNLNVq87i/hO9MfE8N8YOJH6khfurg5wf4f/HV5l+X8JuJ39P6PP7o4M8apf1X5X8g4Xjr0\\001:\\037ref_Coder_FastPrimitivesCoder_4\"\n}\ninputs {\n  key: \"0\"\n  value: \"ref_PCollection_PCollection_3_split\"\n}\noutputs {\n  key: \"None\"\n  value: \"ref_PCollection_PCollection_4\"\n}\nunique_name: \"SDF/Process\"\nenvironment_id: \"ref_Environment_default_environment_1\"", "author": "Hannah-Jiang", "createdAt": "2020-02-15T00:59:14Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -932,10 +998,14 @@ def get_buffer(buffer_id):\n       return pcoll_buffers[buffer_id]\n \n     def get_input_coder_impl(transform_id):\n-      return context.coders[\n-          safe_coders[beam_fn_api_pb2.RemoteGrpcPort.FromString(\n-              process_bundle_descriptor.transforms[transform_id].spec.payload).\n-                      coder_id]].get_impl()\n+      coder_id = beam_fn_api_pb2.RemoteGrpcPort.FromString(\n+          process_bundle_descriptor.transforms[transform_id].spec.payload).\\\n+        coder_id\n+      assert coder_id is not None and coder_id != ''", "originalCommit": "4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxOTAwNg==", "url": "https://github.com/apache/beam/pull/10847#discussion_r381019006", "bodyText": "OK, in the SDF case we can get the coder of the preceding transform (the one that produces its input ref_PCollection_PCollection_3_split) which should always be a RemoteGrpcPort.", "author": "robertwb", "createdAt": "2020-02-19T00:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcwNDAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNjc4MA==", "url": "https://github.com/apache/beam/pull/10847#discussion_r381016780", "bodyText": "I meant you could put this instead of the loop at line 324.", "author": "robertwb", "createdAt": "2020-02-19T00:37:46Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -287,43 +287,48 @@ def partition(self, n):\n \n class _ListBuffer():\n   \"\"\"Used to support parititioning of a list.\"\"\"\n-  def __init__(self, input_coder):\n-    self._input_coder = input_coder\n+  def __init__(self, coder_impl):\n+    self._coder_impl = coder_impl\n     self._inputs = []\n     self._grouped_output = None\n     self.cleared = False\n \n   def append(self, element):\n+    if self.cleared:\n+      raise RuntimeError('Trying to append to a cleared ListBuffer.')\n     if self._grouped_output:\n       raise RuntimeError('ListBuffer append after read.')\n     self._inputs.append(element)\n \n   def partition(self, n):\n     # type: (int) -> List[List[bytes]]\n+    if self.cleared:\n+      raise RuntimeError('Trying to partition a cleared ListBuffer.')\n     if len(self._inputs) >= n or len(self._inputs) == 0:\n       return [self._inputs[k::n] for k in range(n)]\n     else:\n       if not self._grouped_output:\n-        self._grouped_output = [[] for _ in range(n)]\n-        coder_impl = self._input_coder.get_impl()\n-        decoded_input = []\n-        output_stream_list = []\n-        for _ in range(n):\n-          output_stream_list.append(create_OutputStream())\n+        output_stream_list = [create_OutputStream() for _ in range(n)]\n+        self._grouped_output = [output_stream.get() for output_stream", "originalCommit": "4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNzg5NQ==", "url": "https://github.com/apache/beam/pull/10847#discussion_r381017895", "bodyText": "You can now revert the changes up at the top of the loop.", "author": "robertwb", "createdAt": "2020-02-19T00:41:50Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -769,7 +774,7 @@ def _collect_written_timers_and_add_to_deferred_inputs(\n         for windowed_key_timer in timers_by_key_and_window.values():\n           windowed_timer_coder_impl.encode_to_stream(\n               windowed_key_timer, out, True)\n-        deferred_inputs[transform_id] = _ListBuffer(input_coder=coder)\n+        deferred_inputs[transform_id] = _ListBuffer(coder_impl=coder.get_impl())", "originalCommit": "4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxODQ3MQ==", "url": "https://github.com/apache/beam/pull/10847#discussion_r381018471", "bodyText": "Lint: don't use backslashes for continuation. (These days you can just run yapf to format your code, see https://cwiki.apache.org/confluence/display/BEAM/Python+Tips.)", "author": "robertwb", "createdAt": "2020-02-19T00:44:00Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -932,10 +998,14 @@ def get_buffer(buffer_id):\n       return pcoll_buffers[buffer_id]\n \n     def get_input_coder_impl(transform_id):\n-      return context.coders[\n-          safe_coders[beam_fn_api_pb2.RemoteGrpcPort.FromString(\n-              process_bundle_descriptor.transforms[transform_id].spec.payload).\n-                      coder_id]].get_impl()\n+      coder_id = beam_fn_api_pb2.RemoteGrpcPort.FromString(\n+          process_bundle_descriptor.transforms[transform_id].spec.payload).\\", "originalCommit": "4060cbb00e5564b2ac9fe8f8018085f498d2dbe7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2bebee2c4109da99c92af331518684f840091ae2", "url": "https://github.com/apache/beam/commit/2bebee2c4109da99c92af331518684f840091ae2", "message": "fixup", "committedDate": "2020-02-20T19:05:28Z", "type": "forcePushed"}, {"oid": "8b0ee79d492aeeac5c786391e9c7fd81dd6c9806", "url": "https://github.com/apache/beam/commit/8b0ee79d492aeeac5c786391e9c7fd81dd6c9806", "message": "fixup", "committedDate": "2020-02-20T20:51:20Z", "type": "commit"}, {"oid": "8b0ee79d492aeeac5c786391e9c7fd81dd6c9806", "url": "https://github.com/apache/beam/commit/8b0ee79d492aeeac5c786391e9c7fd81dd6c9806", "message": "fixup", "committedDate": "2020-02-20T20:51:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NzE3Mg==", "url": "https://github.com/apache/beam/pull/10847#discussion_r383587172", "bodyText": "An alternative would be safe_coders.get(coder_id, coder_id) which means look up the key (first argument) and if it doesn't exist return the second argument. This would eliminate some of the repetition of logic between the lines as well.", "author": "robertwb", "createdAt": "2020-02-25T00:05:28Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -932,10 +994,14 @@ def get_buffer(buffer_id):\n       return pcoll_buffers[buffer_id]\n \n     def get_input_coder_impl(transform_id):\n-      return context.coders[\n-          safe_coders[beam_fn_api_pb2.RemoteGrpcPort.FromString(\n-              process_bundle_descriptor.transforms[transform_id].spec.payload).\n-                      coder_id]].get_impl()\n+      coder_id = beam_fn_api_pb2.RemoteGrpcPort.FromString(\n+          process_bundle_descriptor.transforms[transform_id].spec.payload\n+      ).coder_id\n+      assert coder_id\n+      if coder_id in safe_coders:", "originalCommit": "8b0ee79d492aeeac5c786391e9c7fd81dd6c9806", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4Nzc0NA==", "url": "https://github.com/apache/beam/pull/10847#discussion_r383587744", "bodyText": "Is there any loss of coverage in removing these tests? I can see how perhaps they're too strict.", "author": "robertwb", "createdAt": "2020-02-25T00:07:19Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner_test.py", "diffHunk": "@@ -1603,23 +1603,6 @@ def restriction_size(self, element, restriction):\n     return restriction.size()\n \n \n-class FnApiRunnerSplitTestWithMultiWorkers(FnApiRunnerSplitTest):", "originalCommit": "8b0ee79d492aeeac5c786391e9c7fd81dd6c9806", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}