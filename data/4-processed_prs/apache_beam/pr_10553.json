{"pr_number": 10553, "pr_title": "[BEAM-8625] Implement servlet for exposing sdk harness statuses in Da\u2026", "pr_createdAt": "2020-01-10T19:46:44Z", "pr_url": "https://github.com/apache/beam/pull/10553", "timeline": [{"oid": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "url": "https://github.com/apache/beam/commit/fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "message": "[BEAM-8625] Implement servlet for exposing sdk harness statuses in Dataflow runner", "committedDate": "2020-01-10T19:44:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0NTE0NQ==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365445145", "bodyText": "Lets make a copy of this list as it can potentially be modified by the consumer or change the return type to collection.", "author": "angoenka", "createdAt": "2020-01-10T21:52:48Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/status/WorkerStatusPages.java", "diffHunk": "@@ -108,7 +113,11 @@ public void addStatusDataProvider(\n \n   /** Returns the set of pages than should be captured by DebugCapture. */\n   public List<Capturable> getDebugCapturePages() {\n-    return Arrays.asList(threadzServlet, statuszServlet);\n+    return this.capturePages;", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjkyMw==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365472923", "bodyText": "This is only used by DebugCapture Manager which takes a List as constructor parameter.", "author": "y1chi", "createdAt": "2020-01-10T23:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0NTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NTQ5Ng==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365475496", "bodyText": "done", "author": "y1chi", "createdAt": "2020-01-10T23:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0NTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0NzM2MA==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365447360", "bodyText": "This check seems to be redundant here.\nIf we expect statusApiService to be null, then we should check it before beamWorkerStatusGrpcService creation.\nAlso, I expect BeamWorkerStatusGrpcService.create to throw exception if the creation fails so it will never be null.", "author": "angoenka", "createdAt": "2020-01-10T21:59:58Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowRunnerHarness.java", "diffHunk": "@@ -120,24 +127,35 @@ public static void main(String[] unusedArgs) throws Exception {\n       loggingServer =\n           serverFactory.create(ImmutableList.of(beamFnLoggingService), loggingApiService);\n \n+      // Grpc server for obtaining SDK harness runtime status information.\n+      if (statusApiService != null && beamWorkerStatusGrpcService != null) {", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MDI4NA==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365450284", "bodyText": "Lets shutdown the logging server at the last.", "author": "angoenka", "createdAt": "2020-01-10T22:09:51Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowRunnerHarness.java", "diffHunk": "@@ -120,24 +127,35 @@ public static void main(String[] unusedArgs) throws Exception {\n       loggingServer =\n           serverFactory.create(ImmutableList.of(beamFnLoggingService), loggingApiService);\n \n+      // Grpc server for obtaining SDK harness runtime status information.\n+      if (statusApiService != null && beamWorkerStatusGrpcService != null) {\n+        statusServer =\n+            serverFactory.create(ImmutableList.of(beamWorkerStatusGrpcService), statusApiService);\n+      }\n+\n       start(\n           pipeline,\n           pipelineOptions,\n           beamFnControlService,\n           beamFnDataService,\n           controlApiService,\n-          beamFnStateService);\n-      servicesServer.shutdown();\n-      loggingServer.shutdown();\n+          beamFnStateService,\n+          beamWorkerStatusGrpcService);\n+      servicesServer.shutdown().awaitTermination(30, TimeUnit.SECONDS);\n+      loggingServer.shutdown().awaitTermination(30, TimeUnit.SECONDS);", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MTAxMw==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365451013", "bodyText": "Can we shut them down in parallel?", "author": "angoenka", "createdAt": "2020-01-10T22:12:23Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/DataflowRunnerHarness.java", "diffHunk": "@@ -120,24 +127,35 @@ public static void main(String[] unusedArgs) throws Exception {\n       loggingServer =\n           serverFactory.create(ImmutableList.of(beamFnLoggingService), loggingApiService);\n \n+      // Grpc server for obtaining SDK harness runtime status information.\n+      if (statusApiService != null && beamWorkerStatusGrpcService != null) {\n+        statusServer =\n+            serverFactory.create(ImmutableList.of(beamWorkerStatusGrpcService), statusApiService);\n+      }\n+\n       start(\n           pipeline,\n           pipelineOptions,\n           beamFnControlService,\n           beamFnDataService,\n           controlApiService,\n-          beamFnStateService);\n-      servicesServer.shutdown();\n-      loggingServer.shutdown();\n+          beamFnStateService,\n+          beamWorkerStatusGrpcService);\n+      servicesServer.shutdown().awaitTermination(30, TimeUnit.SECONDS);", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MjU5OQ==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365452599", "bodyText": "Let's expose addStatusPage in the worker. Which will add the page as both servlet and capturePage.\nAlternatively, we can pass beamWorkerStatusGrpcService to StreamingDataflowWorker where it can create the sdkWorkerStatusServlet and use it.", "author": "angoenka", "createdAt": "2020-01-10T22:17:30Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -871,6 +871,10 @@ public void startStatusPages() {\n     statusPages.start();\n   }\n \n+  public WorkerStatusPages getStatusPages() {", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NDk1MQ==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365474951", "bodyText": "done", "author": "y1chi", "createdAt": "2020-01-10T23:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MjU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NDU5Ng==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365454596", "bodyText": "We can skip reimplmenting this method.", "author": "angoenka", "createdAt": "2020-01-10T22:24:34Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/status/SdkWorkerStatusServlet.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.dataflow.worker.status;\n+\n+import com.google.common.base.Strings;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.beam.runners.dataflow.worker.status.DebugCapture.Capturable;\n+import org.apache.beam.runners.fnexecution.status.BeamWorkerStatusGrpcService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet dedicated to provide live status info retrieved from SDK Harness. Note this is different\n+ * from {@link WorkerStatusPages} which incorporates all info for Dataflow runner including this\n+ * SDKWorkerStatus page.\n+ */\n+public class SdkWorkerStatusServlet extends BaseStatusServlet implements Capturable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SdkWorkerStatusServlet.class);\n+  private final transient BeamWorkerStatusGrpcService statusGrpcService;\n+\n+  public SdkWorkerStatusServlet(BeamWorkerStatusGrpcService statusGrpcService) {\n+    super(\"sdk_status\");\n+    this.statusGrpcService = statusGrpcService;\n+  }\n+\n+  @Override\n+  protected String getPath(String parameters) {", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2ODIzMw==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365468233", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-01-10T23:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1NDU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1OTI1Mg==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365459252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String status = this.statusGrpcService.getSingleWorkerStatus(id, 10, TimeUnit.SECONDS);\n          \n          \n            \n                String status = statusGrpcService.getSingleWorkerStatus(id, 10, TimeUnit.SECONDS);", "author": "angoenka", "createdAt": "2020-01-10T22:41:30Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/status/SdkWorkerStatusServlet.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.dataflow.worker.status;\n+\n+import com.google.common.base.Strings;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.beam.runners.dataflow.worker.status.DebugCapture.Capturable;\n+import org.apache.beam.runners.fnexecution.status.BeamWorkerStatusGrpcService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet dedicated to provide live status info retrieved from SDK Harness. Note this is different\n+ * from {@link WorkerStatusPages} which incorporates all info for Dataflow runner including this\n+ * SDKWorkerStatus page.\n+ */\n+public class SdkWorkerStatusServlet extends BaseStatusServlet implements Capturable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SdkWorkerStatusServlet.class);\n+  private final transient BeamWorkerStatusGrpcService statusGrpcService;\n+\n+  public SdkWorkerStatusServlet(BeamWorkerStatusGrpcService statusGrpcService) {\n+    super(\"sdk_status\");\n+    this.statusGrpcService = statusGrpcService;\n+  }\n+\n+  @Override\n+  protected String getPath(String parameters) {\n+    return super.getPath(parameters);\n+  }\n+\n+  @Override\n+  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n+      throws IOException, ServletException {\n+    String id = request.getParameter(\"id\");\n+    if (Strings.isNullOrEmpty(id)) {\n+      // return all connected sdk statuses if no id provided.\n+      response.setStatus(HttpServletResponse.SC_OK);\n+      response.setContentType(\"text/html;charset=utf-8\");\n+      ServletOutputStream writer = response.getOutputStream();\n+      try (PrintWriter out =\n+          new PrintWriter(new OutputStreamWriter(writer, StandardCharsets.UTF_8))) {\n+        captureData(out);\n+        response.flushBuffer();\n+        return;\n+      }\n+    }\n+\n+    response.setContentType(\"text/plain;charset=utf-8\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+    String status = this.statusGrpcService.getSingleWorkerStatus(id, 10, TimeUnit.SECONDS);", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2OTEwMw==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365469103", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-01-10T23:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1OTI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1OTMwMg==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365459302", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.statusGrpcService.getAllWorkerStatuses(10, TimeUnit.SECONDS);\n          \n          \n            \n                    statusGrpcService.getAllWorkerStatuses(10, TimeUnit.SECONDS);", "author": "angoenka", "createdAt": "2020-01-10T22:41:42Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/status/SdkWorkerStatusServlet.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.dataflow.worker.status;\n+\n+import com.google.common.base.Strings;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.beam.runners.dataflow.worker.status.DebugCapture.Capturable;\n+import org.apache.beam.runners.fnexecution.status.BeamWorkerStatusGrpcService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet dedicated to provide live status info retrieved from SDK Harness. Note this is different\n+ * from {@link WorkerStatusPages} which incorporates all info for Dataflow runner including this\n+ * SDKWorkerStatus page.\n+ */\n+public class SdkWorkerStatusServlet extends BaseStatusServlet implements Capturable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SdkWorkerStatusServlet.class);\n+  private final transient BeamWorkerStatusGrpcService statusGrpcService;\n+\n+  public SdkWorkerStatusServlet(BeamWorkerStatusGrpcService statusGrpcService) {\n+    super(\"sdk_status\");\n+    this.statusGrpcService = statusGrpcService;\n+  }\n+\n+  @Override\n+  protected String getPath(String parameters) {\n+    return super.getPath(parameters);\n+  }\n+\n+  @Override\n+  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n+      throws IOException, ServletException {\n+    String id = request.getParameter(\"id\");\n+    if (Strings.isNullOrEmpty(id)) {\n+      // return all connected sdk statuses if no id provided.\n+      response.setStatus(HttpServletResponse.SC_OK);\n+      response.setContentType(\"text/html;charset=utf-8\");\n+      ServletOutputStream writer = response.getOutputStream();\n+      try (PrintWriter out =\n+          new PrintWriter(new OutputStreamWriter(writer, StandardCharsets.UTF_8))) {\n+        captureData(out);\n+        response.flushBuffer();\n+        return;\n+      }\n+    }\n+\n+    response.setContentType(\"text/plain;charset=utf-8\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+    String status = this.statusGrpcService.getSingleWorkerStatus(id, 10, TimeUnit.SECONDS);\n+    ServletOutputStream writer = response.getOutputStream();\n+    writer.println(status);\n+    response.flushBuffer();\n+  }\n+\n+  @Override\n+  public String pageName() {\n+    return \"/sdk_status\";\n+  }\n+\n+  @Override\n+  public void captureData(PrintWriter writer) {\n+    Map<String, String> allStatuses =\n+        this.statusGrpcService.getAllWorkerStatuses(10, TimeUnit.SECONDS);", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2OTEyNQ==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365469125", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-01-10T23:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1OTMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1OTQ4Nw==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365459487", "bodyText": "We can do this before the if block so that it is not duplicated.\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws IOException, ServletException {\n    String id = request.getParameter(\"id\");\n    if (Strings.isNullOrEmpty(id)) {\n      // return all connected sdk statuses if no id provided.\n      response.setContentType(\"text/html;charset=utf-8\");\n      ServletOutputStream writer = response.getOutputStream();\n      try (PrintWriter out =\n          new PrintWriter(new OutputStreamWriter(writer, StandardCharsets.UTF_8))) {\n        captureData(out);\n      }\n    } else {\n      response.setContentType(\"text/plain;charset=utf-8\");\n      ServletOutputStream writer = response.getOutputStream();\n      writer.println(statusGrpcService.getSingleWorkerStatus(id, 10, TimeUnit.SECONDS););\n    }\n    response.setStatus(HttpServletResponse.SC_OK);\n    response.flushBuffer();\n  }", "author": "angoenka", "createdAt": "2020-01-10T22:42:23Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/status/SdkWorkerStatusServlet.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.dataflow.worker.status;\n+\n+import com.google.common.base.Strings;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.beam.runners.dataflow.worker.status.DebugCapture.Capturable;\n+import org.apache.beam.runners.fnexecution.status.BeamWorkerStatusGrpcService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet dedicated to provide live status info retrieved from SDK Harness. Note this is different\n+ * from {@link WorkerStatusPages} which incorporates all info for Dataflow runner including this\n+ * SDKWorkerStatus page.\n+ */\n+public class SdkWorkerStatusServlet extends BaseStatusServlet implements Capturable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SdkWorkerStatusServlet.class);\n+  private final transient BeamWorkerStatusGrpcService statusGrpcService;\n+\n+  public SdkWorkerStatusServlet(BeamWorkerStatusGrpcService statusGrpcService) {\n+    super(\"sdk_status\");\n+    this.statusGrpcService = statusGrpcService;\n+  }\n+\n+  @Override\n+  protected String getPath(String parameters) {\n+    return super.getPath(parameters);\n+  }\n+\n+  @Override\n+  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n+      throws IOException, ServletException {\n+    String id = request.getParameter(\"id\");\n+    if (Strings.isNullOrEmpty(id)) {\n+      // return all connected sdk statuses if no id provided.\n+      response.setStatus(HttpServletResponse.SC_OK);\n+      response.setContentType(\"text/html;charset=utf-8\");\n+      ServletOutputStream writer = response.getOutputStream();\n+      try (PrintWriter out =\n+          new PrintWriter(new OutputStreamWriter(writer, StandardCharsets.UTF_8))) {\n+        captureData(out);\n+        response.flushBuffer();\n+        return;\n+      }\n+    }\n+\n+    response.setContentType(\"text/plain;charset=utf-8\");\n+    response.setStatus(HttpServletResponse.SC_OK);", "originalCommit": "fa0da5ea1b3d2c7cb3d37e2aa56ca058ee6f3971", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ2OTA1MA==", "url": "https://github.com/apache/beam/pull/10553#discussion_r365469050", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-01-10T23:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1OTQ4Nw=="}], "type": "inlineReview"}, {"oid": "ef44e1ed6e4f1f0c2ed0502130ec5495cafd8573", "url": "https://github.com/apache/beam/commit/ef44e1ed6e4f1f0c2ed0502130ec5495cafd8573", "message": "address comments", "committedDate": "2020-01-10T23:55:33Z", "type": "commit"}, {"oid": "3954998e8ef982be1a004f288cd18ea50c885dfc", "url": "https://github.com/apache/beam/commit/3954998e8ef982be1a004f288cd18ea50c885dfc", "message": "fixup", "committedDate": "2020-01-13T21:16:20Z", "type": "commit"}]}