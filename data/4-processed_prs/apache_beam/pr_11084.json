{"pr_number": 11084, "pr_title": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment", "pr_createdAt": "2020-03-09T20:19:02Z", "pr_url": "https://github.com/apache/beam/pull/11084", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDg1Mw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389980853", "bodyText": "Since exception is null, this should just be exception = e", "author": "tweise", "createdAt": "2020-03-09T21:48:28Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ProcessEnvironment.java", "diffHunk": "@@ -64,13 +63,32 @@ public InstructionRequestHandler getInstructionRequestHandler() {\n   }\n \n   @Override\n-  public void close() throws Exception {\n-    synchronized (lock) {\n-      if (!isClosed) {\n-        instructionHandler.close();\n-        processManager.stopProcess(workerId);\n-        isClosed = true;\n+  public synchronized void close() throws Exception {\n+    if (isClosed) {\n+      return;\n+    }\n+    Exception exception = null;\n+    try {\n+      processManager.stopProcess(workerId);\n+    } catch (Exception e) {\n+      if (exception != null) {", "originalCommit": "c418d0681da40c33986879f91663d4c7311b14e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5ODQ1Ng==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389998456", "bodyText": "I intentionally didn't do that. If you move around the the try block to change the order, this will break. I'd prefer to be defensive.", "author": "mxm", "createdAt": "2020-03-09T22:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4Mjk3OA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389982978", "bodyText": "The outer try/catch isn't necessary since you already have it nested.", "author": "tweise", "createdAt": "2020-03-09T21:53:34Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -252,14 +263,47 @@ public StageBundleFactory forStage(ExecutableStage executableStage) {\n   }\n \n   @Override\n-  public void close() throws Exception {\n-    // Clear the cache. This closes all active environments.\n-    // note this may cause open calls to be cancelled by the peer\n-    for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache : environmentCaches) {\n-      environmentCache.invalidateAll();\n-      environmentCache.cleanUp();\n+  public synchronized void close() throws Exception {\n+    if (closed) {\n+      return;\n+    }\n+    Exception exception = null;\n+    try {\n+      for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache :\n+          environmentCaches) {\n+        try {\n+          // Clear the cache. This closes all active environments.\n+          // note this may cause open calls to be cancelled by the peer\n+          environmentCache.invalidateAll();\n+          environmentCache.cleanUp();\n+        } catch (Exception e) {\n+          if (exception != null) {\n+            exception.addSuppressed(e);\n+          } else {\n+            exception = e;\n+          }\n+        }\n+      }\n+      try {\n+        executor.shutdown();\n+      } catch (Exception e) {\n+        if (exception != null) {\n+          exception.addSuppressed(e);\n+        } else {\n+          exception = e;\n+        }\n+      }\n+    } catch (Exception e) {", "originalCommit": "c418d0681da40c33986879f91663d4c7311b14e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5ODUwMA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389998500", "bodyText": "Not strictly, but the iterator could throw. I'm trying to be extra defensive here.", "author": "mxm", "createdAt": "2020-03-09T22:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4Mjk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NDcwOA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389984708", "bodyText": "Why is this needed (with the log statement above)?", "author": "tweise", "createdAt": "2020-03-09T21:57:39Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -166,11 +168,20 @@ public static DefaultJobBundleFactory create(\n         CacheBuilder.newBuilder()\n             .removalListener(\n                 (RemovalNotification<Environment, WrappedSdkHarnessClient> notification) -> {\n-                  int refCount = notification.getValue().unref();\n-                  LOG.debug(\n-                      \"Removed environment {} with {} remaining bundle references.\",\n-                      notification.getKey(),\n-                      refCount);\n+                  WrappedSdkHarnessClient client = notification.getValue();\n+                  int refCount = client.unref();\n+                  // Double-check to trigger closing of all environments in case the \"refing\" does\n+                  // not clean them up during operator shutdown. This is necessary in some\n+                  // situations, e.g when the bundle cannot be closed and thus the ref cannot be\n+                  // released. All environment types ensure they can only be closed once.\n+                  if (refCount > 0) {\n+                    LOG.warn(\n+                        \"Clearing remaining {} bundle references from environment {} to ensure it shuts down.\",\n+                        refCount,\n+                        notification.getKey());\n+                    //noinspection StatementWithEmptyBody", "originalCommit": "c418d0681da40c33986879f91663d4c7311b14e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5ODU5MA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389998590", "bodyText": "Just to inform when there were still references. The comment is to suppress a warning on the while loop which counts down the refs.", "author": "mxm", "createdAt": "2020-03-09T22:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NDcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODcxNg==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389988716", "bodyText": "Having this as part of the removal listener would prematurely close an environment that is still referenced. The purpose of the refcount is to be able to remove the environment from the cache when it expires but close it only after all references are gone.", "author": "tweise", "createdAt": "2020-03-09T22:07:37Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -166,11 +168,20 @@ public static DefaultJobBundleFactory create(\n         CacheBuilder.newBuilder()\n             .removalListener(\n                 (RemovalNotification<Environment, WrappedSdkHarnessClient> notification) -> {\n-                  int refCount = notification.getValue().unref();\n-                  LOG.debug(\n-                      \"Removed environment {} with {} remaining bundle references.\",\n-                      notification.getKey(),\n-                      refCount);\n+                  WrappedSdkHarnessClient client = notification.getValue();", "originalCommit": "c418d0681da40c33986879f91663d4c7311b14e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMzcyOQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390003729", "bodyText": "It doesn't work though if we do not ensure dereferencing under all circumstances. We need a safeguard here, also considering other runners may not dereference correctly. Generally, it is hard to guarantee dereferencing due to the nesting of DoFnRunners which may not even allow closing the bundle in error cases. I considered not doing this but I think it is the safer route.\nIf you take a step back, when would the reference counting really be useful? Every restarted job will anyways run in a new classloader, so the environment will never be recycled. When we call close we should tear down everything.\nTaking back another step, the reference counting should really be removed entirely. It was error prone from the beginning leading to subtle problems with dereferencing. If you don't mind, I'd remove it. What do you think?", "author": "mxm", "createdAt": "2020-03-09T22:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMTI3NA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390011274", "bodyText": "I've removed the reference counting, PTAL.", "author": "mxm", "createdAt": "2020-03-09T23:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MzIxNg==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390093216", "bodyText": "As stated above, reference counting is required for environment expiration. The environment can only be closed when all bundles that reference it have finished. I would prefer we limit this PR scope strictly to the original purpose and discuss other changes separately.", "author": "tweise", "createdAt": "2020-03-10T04:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5Mzc5OA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390093798", "bodyText": "The correct solution might be to enforce this from close, not from the cache removal listener.", "author": "tweise", "createdAt": "2020-03-10T04:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNTU0OQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390235549", "bodyText": "You are right that we can't close the environment during removal due to pending references hold by still-processing bundles. Please take a look at the follow-up. I'm now quarantining clients which still hold references, to remove them during shutdown if they have not been dereferenced before.", "author": "mxm", "createdAt": "2020-03-10T10:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4ODcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389990103", "bodyText": "Why the timeout change?", "author": "tweise", "createdAt": "2020-03-09T22:11:08Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ProcessManager.java", "diffHunk": "@@ -186,31 +186,28 @@ private void stopProcess(String id, Process process) {\n       LOG.debug(\"Attempting to stop process with id {}\", id);\n       // first try to kill gracefully\n       process.destroy();\n-      long maxTimeToWait = 2000;\n-      if (waitForProcessToDie(process, maxTimeToWait)) {\n-        LOG.debug(\"Process for worker {} shut down gracefully.\", id);\n-      } else {\n-        LOG.info(\"Process for worker {} still running. Killing.\", id);\n-        process.destroyForcibly();\n+      long maxTimeToWait = 500;", "originalCommit": "c418d0681da40c33986879f91663d4c7311b14e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5ODk2MQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389998961", "bodyText": "The old timeout was too long.", "author": "mxm", "createdAt": "2020-03-09T22:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MDE2Ng==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390480166", "bodyText": "How did that manifest? 500ms timeout for process termination seems too aggressive. I would prefer a longer timeout to allow for connections to be closed gracefully.", "author": "tweise", "createdAt": "2020-03-10T17:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MTU5MA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390961590", "bodyText": "The shutdown code is synchronous, so I'd prefer a shorter timeout here. It would be a good improvement to make it async.\nI've tested this on a cluster with many runs and I've not seen a single instance lingering. Also I did not notice any difference in the logs. The environment will be torn down last, after all connections have been closed. So failures would not be visible anymore.", "author": "mxm", "createdAt": "2020-03-11T13:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2NjI2MQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390966261", "bodyText": "If you want I can restore the old timeout but I would then also change the code to make the stopping async or at least stop all the processes at once and then wait (instead of tearing down the process one-by-one and wait for each process to quit).", "author": "mxm", "createdAt": "2020-03-11T13:24:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxMDkwNg==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391210906", "bodyText": "If you have verified that the graceful shutdown works (in the happy path), then we are good. Maybe add a comment to the code, since all of this isn't very obvious.", "author": "tweise", "createdAt": "2020-03-11T19:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NzQ1OQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391247459", "bodyText": "It's not always shutting down gracefully but that's what the change is about: removing processes and ensuring a quick recovery time. It's a trade-off. Ideally we would want to allow more time but if we wait 2 seconds with an SDK parallelism of 16, that's already more than half a minute waiting time. We really want to do the process removal in parallel. I'll look into this.\nI'm not sure the ProcessManager is a good place to document the shutdown behavior. If you have any suggestions though, I'll add them here.", "author": "mxm", "createdAt": "2020-03-11T20:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMDU4NQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391330585", "bodyText": "Won't delay the PR for it!", "author": "tweise", "createdAt": "2020-03-11T23:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MTEzOQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389991139", "bodyText": "Add comment on why the exception is ignored.", "author": "tweise", "createdAt": "2020-03-09T22:13:37Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/ProcessManager.java", "diffHunk": "@@ -234,9 +231,7 @@ public void run() {\n               // Graceful shutdown period\n               Thread.sleep(200);\n               break;\n-            } catch (InterruptedException e) {\n-              Thread.currentThread().interrupt();\n-              throw new RuntimeException(e);\n+            } catch (InterruptedException ignored) {", "originalCommit": "c418d0681da40c33986879f91663d4c7311b14e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTEwNw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389999107", "bodyText": "Will do. Ignoring it because there is not point to throw it here, we want to shutdown the processes after the grace period expired here.", "author": "mxm", "createdAt": "2020-03-09T22:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MjYyMA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389992620", "bodyText": "It may be good to add an explanation here for the following elaborate cleanup logic as otherwise there is the danger it will be \"simplified\" in the future.", "author": "tweise", "createdAt": "2020-03-09T22:18:07Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -252,14 +263,47 @@ public StageBundleFactory forStage(ExecutableStage executableStage) {\n   }\n \n   @Override\n-  public void close() throws Exception {\n-    // Clear the cache. This closes all active environments.\n-    // note this may cause open calls to be cancelled by the peer\n-    for (LoadingCache<Environment, WrappedSdkHarnessClient> environmentCache : environmentCaches) {\n-      environmentCache.invalidateAll();\n-      environmentCache.cleanUp();\n+  public synchronized void close() throws Exception {\n+    if (closed) {\n+      return;\n+    }\n+    Exception exception = null;", "originalCommit": "c418d0681da40c33986879f91663d4c7311b14e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTEzMw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r389999133", "bodyText": "Good point.", "author": "mxm", "createdAt": "2020-03-09T22:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MjYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390475089", "bodyText": "client.ref needs to remain here, the lines below rely on that and it is also more readable.", "author": "tweise", "createdAt": "2020-03-10T17:11:10Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -352,20 +407,18 @@ public RemoteBundle getBundle(\n         // The blocking queue of caches for serving multiple bundles concurrently.\n         currentCache = availableCaches.take();\n         client = currentCache.getUnchecked(executableStage.getEnvironment());\n-        client.ref();", "originalCommit": "79848761b5f9898fd7094f94dc8bd59db0d98336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MjE5MA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390482190", "bodyText": "Please explain which lines rely on it.\nReadability is highly highly subjective, I find it more readable to not duplicate the same code for two branches, as it is currently the case (which is potentially error-prone).", "author": "mxm", "createdAt": "2020-03-10T17:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2Mzk5Mg==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390963992", "bodyText": "I checked again and couldn't see how this change alters the behavior. In any case, I don't mind to move it back to unblock this PR.", "author": "mxm", "createdAt": "2020-03-11T13:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzY2NQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391207665", "bodyText": "Below, preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() <= 0); removes everything that isn't referenced. These two statements are logically one unit and hence I prefer to not scatter them:\nclient = currentCache.getUnchecked(executableStage.getEnvironment());\n        client.ref();\nclient.ref();", "author": "tweise", "createdAt": "2020-03-11T19:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNTc3Ng==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391225776", "bodyText": "It's not true that a later ref() introduces a bug for preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() <= 0); because the refcount will be >0, otherwise we wouldn't be able to retrieve the client from the cache.\nIn any case, I will revert this change.", "author": "mxm", "createdAt": "2020-03-11T19:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzNTg3Nw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391235877", "bodyText": "It's not true that a later ref() introduces a bug for preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() <= 0); because the refcount will be >0, otherwise we wouldn't be able to retrieve the client from the cache.\n\nCache and environment are shared between executable stages. So the refcount can become 0 with concurrent eviction and release. That actually raises the question if these 2 statements should be atomic.", "author": "tweise", "createdAt": "2020-03-11T20:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1Njk5MA==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391256990", "bodyText": "Yes, that makes sense. I've already reverted the change.\nI suppose there is a race condition where we retrieve an environment X and before we can call ref() on it, we evict the environment X, close all its references, and shut it down. This will result in a job restart.", "author": "mxm", "createdAt": "2020-03-11T20:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NzM2Mw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390477363", "bodyText": "I'm not sure I like this in the path for every bundle. We could probably move it below line 416 (preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() <= 0);)", "author": "tweise", "createdAt": "2020-03-10T17:14:32Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -375,6 +428,11 @@ public RemoteBundle getBundle(\n         }\n       }\n \n+      // Ensure client is referenced for this bundle, unref in close()\n+      client.ref();\n+      // Cleanup list of clients which were active during eviction but now do not hold references\n+      evictedActiveClients.removeIf(c -> c.bundleRefCount.get() <= 0);", "originalCommit": "79848761b5f9898fd7094f94dc8bd59db0d98336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MzkxNw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390483917", "bodyText": "This is a cheap operation. I don't think we can move it because we need to run this cleanup for all branches.", "author": "mxm", "createdAt": "2020-03-10T17:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NzM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NzY3NQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391247675", "bodyText": "I've improved this to only remove when environment expiration is used.", "author": "mxm", "createdAt": "2020-03-11T20:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NzM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Nzg3NQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390477875", "bodyText": "Why the change from == to <=?", "author": "tweise", "createdAt": "2020-03-10T17:15:18Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -352,20 +407,18 @@ public RemoteBundle getBundle(\n         // The blocking queue of caches for serving multiple bundles concurrently.\n         currentCache = availableCaches.take();\n         client = currentCache.getUnchecked(executableStage.getEnvironment());\n-        client.ref();\n \n         currentClient = preparedClients.get(client);\n         if (currentClient == null) {\n           // we are using this client for the first time\n           preparedClients.put(client, currentClient = prepare(client, executableStage));\n           // cleanup any expired clients\n-          preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() == 0);\n+          preparedClients.keySet().removeIf(c -> c.bundleRefCount.get() <= 0);", "originalCommit": "79848761b5f9898fd7094f94dc8bd59db0d98336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MzA0MQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r390483041", "bodyText": "I prefer including the entire range whenever I write such checks. Just a way to guard against future changes where we might countdown after the value has reached zero.", "author": "mxm", "createdAt": "2020-03-10T17:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwOTc3Mg==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391209772", "bodyText": "On the flip side, this could hide a bug in the reference counting. That could be covered with tests though. Not important for this PR.", "author": "tweise", "createdAt": "2020-03-11T19:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyNjkwMw==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391226903", "bodyText": "I'll also revert this change to not distract from the main objective of this PR.", "author": "mxm", "createdAt": "2020-03-11T19:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0MjE0Mg==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391242142", "bodyText": "Not important, can stay as is. What would be good to check is that the environment expiration still works.", "author": "tweise", "createdAt": "2020-03-11T20:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Nzg3NQ=="}], "type": "inlineReview"}, {"oid": "3e305c75cade7a74477b3f938cc756a10590a1ec", "url": "https://github.com/apache/beam/commit/3e305c75cade7a74477b3f938cc756a10590a1ec", "message": "Ensure clients with pending references can be garbage collected during shutdown", "committedDate": "2020-03-11T20:26:38Z", "type": "forcePushed"}, {"oid": "5c04950af92fcbfcac2f62e7a3807f7ae91a304b", "url": "https://github.com/apache/beam/commit/5c04950af92fcbfcac2f62e7a3807f7ae91a304b", "message": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment\n\nThe cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\n\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle.", "committedDate": "2020-03-11T20:27:08Z", "type": "forcePushed"}, {"oid": "cf219ba408a5ed184beb983f20fc5630d200ea70", "url": "https://github.com/apache/beam/commit/cf219ba408a5ed184beb983f20fc5630d200ea70", "message": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment\n\nThe cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\n\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle.", "committedDate": "2020-03-11T20:44:34Z", "type": "commit"}, {"oid": "cf219ba408a5ed184beb983f20fc5630d200ea70", "url": "https://github.com/apache/beam/commit/cf219ba408a5ed184beb983f20fc5630d200ea70", "message": "[BEAM-9474] Improve robustness of BundleFactory and ProcessEnvironment\n\nThe cleanup code in DefaultJobBundleFactory and its RemoteEnvironments may leak\nresources. This is especially a concern when the execution engines reuses the\nsame JVM or underlying machines for multiple runs of a pipeline.\n\nExceptions encountered during cleanup should not lead to aborting the cleanup\nprocedure. Not all code handles this correctly. We should also ensure that the\ncleanup succeeds even if the runner does not properly close the bundle,\ne.g. when a exception occurs during closing the bundle.", "committedDate": "2020-03-11T20:44:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1Nzc0MQ==", "url": "https://github.com/apache/beam/pull/11084#discussion_r391257741", "bodyText": "FYI, I've added this check instead to check for correct bounds.", "author": "mxm", "createdAt": "2020-03-11T20:45:29Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/DefaultJobBundleFactory.java", "diffHunk": "@@ -487,13 +553,14 @@ private int ref() {\n     }\n \n     private int unref() {\n-      int count = bundleRefCount.decrementAndGet();\n-      if (count == 0) {\n+      int refCount = bundleRefCount.decrementAndGet();\n+      Preconditions.checkState(refCount >= 0, \"Reference count must not be negative.\");", "originalCommit": "cf219ba408a5ed184beb983f20fc5630d200ea70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}