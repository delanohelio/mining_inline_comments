{"pr_number": 12727, "pr_title": "[BEAM-10844] Add experiment option prebuild_sdk_container to prebuild python sdk container with dependencies.", "pr_createdAt": "2020-08-29T03:15:32Z", "pr_url": "https://github.com/apache/beam/pull/12727", "timeline": [{"oid": "030594c862e375050920ab0e766ed3c2c5ff8f8b", "url": "https://github.com/apache/beam/commit/030594c862e375050920ab0e766ed3c2c5ff8f8b", "message": "Add option to prebuild python sdk container", "committedDate": "2020-08-29T04:37:45Z", "type": "forcePushed"}, {"oid": "c13d10892425a3435994c922478b11316fbd9d0c", "url": "https://github.com/apache/beam/commit/c13d10892425a3435994c922478b11316fbd9d0c", "message": "Add option to prebuild python sdk container", "committedDate": "2020-08-29T05:22:36Z", "type": "forcePushed"}, {"oid": "e747445848f0e27e122722f6c8c515286ef2da07", "url": "https://github.com/apache/beam/commit/e747445848f0e27e122722f6c8c515286ef2da07", "message": "Add option to prebuild python sdk container", "committedDate": "2020-08-29T05:37:24Z", "type": "forcePushed"}, {"oid": "eb39d12093ea5696ebb1a7b4db300bb99a1c854c", "url": "https://github.com/apache/beam/commit/eb39d12093ea5696ebb1a7b4db300bb99a1c854c", "message": "Add option to prebuild python sdk container", "committedDate": "2020-08-29T07:13:28Z", "type": "forcePushed"}, {"oid": "2c4505c5733f9f7ed7afb957c7595d9da5ff23df", "url": "https://github.com/apache/beam/commit/2c4505c5733f9f7ed7afb957c7595d9da5ff23df", "message": "Add option to prebuild python sdk container", "committedDate": "2020-08-29T07:42:56Z", "type": "forcePushed"}, {"oid": "103b2ca031ef074087e5c0b655b98c65a1c7e657", "url": "https://github.com/apache/beam/commit/103b2ca031ef074087e5c0b655b98c65a1c7e657", "message": "Add option to prebuild python sdk container", "committedDate": "2020-08-29T18:02:05Z", "type": "forcePushed"}, {"oid": "20c8398e25c28e4401bc021f36721f8dfc86aaa4", "url": "https://github.com/apache/beam/commit/20c8398e25c28e4401bc021f36721f8dfc86aaa4", "message": "Add option to prebuild python sdk container", "committedDate": "2020-08-29T18:23:15Z", "type": "forcePushed"}, {"oid": "a3d80a873e46de8cf836fe791c42daea3bd0013c", "url": "https://github.com/apache/beam/commit/a3d80a873e46de8cf836fe791c42daea3bd0013c", "message": "[BEAM-10844] Add experiment option prebuild_sdk_container to prebuild python sdk container with dependencies.", "committedDate": "2020-09-01T00:35:20Z", "type": "forcePushed"}, {"oid": "be5e21e07dc94177f8c81cccaba2a2fa64e88e4c", "url": "https://github.com/apache/beam/commit/be5e21e07dc94177f8c81cccaba2a2fa64e88e4c", "message": "[BEAM-10844] Add experiment option prebuild_sdk_container to prebuild python sdk container with dependencies.", "committedDate": "2020-09-01T00:46:57Z", "type": "forcePushed"}, {"oid": "e68ad069aceb351adc1ce0c62c4ebe37549decbd", "url": "https://github.com/apache/beam/commit/e68ad069aceb351adc1ce0c62c4ebe37549decbd", "message": "[BEAM-10844] Add experiment option prebuild_sdk_container to prebuild python sdk container with dependencies.", "committedDate": "2020-09-01T00:51:50Z", "type": "forcePushed"}, {"oid": "ca32229c6cda28c6f5231b922a20d7cce8ab4267", "url": "https://github.com/apache/beam/commit/ca32229c6cda28c6f5231b922a20d7cce8ab4267", "message": "[BEAM-10844] Add experiment option prebuild_sdk_container to prebuild python sdk container with dependencies.", "committedDate": "2020-09-01T00:57:45Z", "type": "forcePushed"}, {"oid": "850b0b9e48a02ebe0f58c9c1eee1f83f9d9efe81", "url": "https://github.com/apache/beam/commit/850b0b9e48a02ebe0f58c9c1eee1f83f9d9efe81", "message": "Add general setup_only mode to python sdk boot.go, add local docker build option", "committedDate": "2020-09-17T02:27:35Z", "type": "forcePushed"}, {"oid": "e7c0b1693fadfb67bee6d0cb7547a710ae8fbc31", "url": "https://github.com/apache/beam/commit/e7c0b1693fadfb67bee6d0cb7547a710ae8fbc31", "message": "[BEAM-10844] Add sdk_container_builder classes to prebuild sdk container\nclasses with dependencies.", "committedDate": "2020-09-17T02:28:54Z", "type": "forcePushed"}, {"oid": "3e6cb8ebe925bae17a5456619ce73c742e2b5b9b", "url": "https://github.com/apache/beam/commit/3e6cb8ebe925bae17a5456619ce73c742e2b5b9b", "message": "[BEAM-10844] Add sdk_container_builder classes to prebuild sdk container\nclasses with dependencies.", "committedDate": "2020-09-17T16:51:56Z", "type": "forcePushed"}, {"oid": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "url": "https://github.com/apache/beam/commit/02419f3a0702273ce5dc04c392c35335b7dc11dd", "message": "[BEAM-10844] Add sdk_container_builder classes to prebuild sdk container\nclasses with dependencies.", "committedDate": "2020-09-17T17:40:39Z", "type": "commit"}, {"oid": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "url": "https://github.com/apache/beam/commit/02419f3a0702273ce5dc04c392c35335b7dc11dd", "message": "[BEAM-10844] Add sdk_container_builder classes to prebuild sdk container\nclasses with dependencies.", "committedDate": "2020-09-17T17:40:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjU2Nw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490632567", "bodyText": "We should simply omit such dependencies, not have an extra flag to skip them. (Or is that not possible?)", "author": "robertwb", "createdAt": "2020-09-18T00:25:12Z", "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -994,6 +994,23 @@ def _add_argparse_args(cls, parser):\n             'staged in the staging area (--staging_location option) and the '\n             'workers will install them in same order they were specified on '\n             'the command line.'))\n+    parser.add_argument(\n+        '--docker_registry_url',\n+        default=None,\n+        help=(\n+            'The default docker registry to for pushing additional docker '\n+            'images for the setup.'))\n+    parser.add_argument(", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODMzNQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078335", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjgyOQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490632829", "bodyText": "Maybe docker_registry_push_url to make it more clear.", "author": "robertwb", "createdAt": "2020-09-18T00:26:17Z", "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -994,6 +994,23 @@ def _add_argparse_args(cls, parser):\n             'staged in the staging area (--staging_location option) and the '\n             'workers will install them in same order they were specified on '\n             'the command line.'))\n+    parser.add_argument(\n+        '--docker_registry_url',", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODMxOA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078318", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjk0OA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490632948", "bodyText": "For pushing pre-prepared worker images?", "author": "robertwb", "createdAt": "2020-09-18T00:26:41Z", "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -994,6 +994,23 @@ def _add_argparse_args(cls, parser):\n             'staged in the staging area (--staging_location option) and the '\n             'workers will install them in same order they were specified on '\n             'the command line.'))\n+    parser.add_argument(\n+        '--docker_registry_url',\n+        default=None,\n+        help=(\n+            'The default docker registry to for pushing additional docker '", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODI4MQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078281", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMjk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMzA4Nw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490633087", "bodyText": "Just let imports flow long. (Also, if you need to wrap, do so with ()'s.)", "author": "robertwb", "createdAt": "2020-09-18T00:27:11Z", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -51,13 +51,18 @@\n from apache_beam.io.gcp.internal.clients import storage\n from apache_beam.options.pipeline_options import DebugOptions\n from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.options.pipeline_options import SetupOptions\n from apache_beam.options.pipeline_options import StandardOptions\n from apache_beam.options.pipeline_options import WorkerOptions\n from apache_beam.portability import common_urns\n from apache_beam.portability.api import beam_runner_api_pb2\n from apache_beam.runners.dataflow.internal import names\n from apache_beam.runners.dataflow.internal.clients import dataflow\n from apache_beam.runners.dataflow.internal.names import PropertyNames\n+from apache_beam.runners.dataflow.internal.sdk_container_cloud_builder import \\", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODI1OQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078259", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMzA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMzU1MA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490633550", "bodyText": "Omit the check on beam_fn_api, as we hope to remove that soon.", "author": "robertwb", "createdAt": "2020-09-18T00:29:09Z", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -1070,7 +1075,28 @@ def get_container_image_from_options(pipeline_options):\n     Returns:\n       str: Container image for remote execution.\n   \"\"\"\n+  debug_options = pipeline_options.view_as(DebugOptions)\n   worker_options = pipeline_options.view_as(WorkerOptions)\n+  container_build_engine = debug_options.lookup_experiment(\n+      'prebuild_sdk_container')\n+  if (debug_options.lookup_experiment('beam_fn_api') and", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODI0Ng==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078246", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzMzU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNDAyOQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490634029", "bodyText": "Why is this in apiclient? Does not makes sense to limit this to dataflow; perhaps this should instead be put where we get the default environment?", "author": "robertwb", "createdAt": "2020-09-18T00:30:56Z", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -1070,7 +1075,28 @@ def get_container_image_from_options(pipeline_options):\n     Returns:\n       str: Container image for remote execution.\n   \"\"\"\n+  debug_options = pipeline_options.view_as(DebugOptions)\n   worker_options = pipeline_options.view_as(WorkerOptions)\n+  container_build_engine = debug_options.lookup_experiment(", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNDMyMw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490634323", "bodyText": "This would mean we could more easily test it as well.", "author": "robertwb", "createdAt": "2020-09-18T00:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODE1MQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078151", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNDAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTEwOQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490635109", "bodyText": "Maybe make a local and cloud builder with a common parent, rather than the cloud extending from the local?", "author": "robertwb", "createdAt": "2020-09-18T00:35:15Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,138 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM apache/beam_python{major}.{minor}_sdk:latest\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN /opt/apache/beam/boot --setup_only --artifacts {workdir}/{manifest_file}\n+\"\"\")\n+\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class SdkContainerBuilder(object):", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODEyOA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078128", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNTEwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjQxNQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490636415", "bodyText": "I don't think we should have to do these checks here. We should get the requirements file (and other artifacts) and populate them in the environment (which is docker + ArtifactInfo). We should then reduce this to a new (docker + ArtifactInfo) invoking the docker build routines, followed by staging the artifacts in ArtifactInfo (if any).", "author": "robertwb", "createdAt": "2020-09-18T00:40:18Z", "path": "sdks/python/apache_beam/runners/portability/stager.py", "diffHunk": "@@ -151,7 +151,8 @@ def create_job_resources(options,  # type: PipelineOptions\n     setup_options = options.view_as(SetupOptions)\n \n     # Stage a requirements file if present.\n-    if setup_options.requirements_file is not None:\n+    if (setup_options.requirements_file is not None and", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODExMA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078110", "bodyText": "the artifact infos are generated from the result of stager create_resources, so it is easiest to reduce it in the stager, also this means we don't re-create or re-download unnecessary resources.", "author": "y1chi", "createdAt": "2020-09-18T17:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMTczOQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492201739", "bodyText": "It may require some refactoring, but I think the over-all result would be cleaner. (Maybe this is also messy due to a partial transition in how Dataflow handles artifacts compared to every other runner...)\nHowever, if you prefer to keep it like this that's OK.", "author": "robertwb", "createdAt": "2020-09-21T16:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzNjQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODgzNg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490638836", "bodyText": "We should install anything offered here, and ensure this list is empty if we don't have anything to install, rather than relying on the details of the install script to leave certain files around.", "author": "robertwb", "createdAt": "2020-09-18T00:49:19Z", "path": "sdks/python/container/boot.go", "diffHunk": "@@ -203,13 +225,14 @@ func setupAcceptableWheelSpecs() error {\n }\n \n // installSetupPackages installs Beam SDK and user dependencies.\n-func installSetupPackages(mds []*jobpb.ArtifactMetadata, workDir string) error {\n+func installSetupPackages(files []string, workDir string) error {\n \tlog.Printf(\"Installing setup packages ...\")\n \n-\tfiles := make([]string, len(mds))\n-\tfor i, v := range mds {\n-\t\tlog.Printf(\"Found artifact: %s\", v.Name)\n-\t\tfiles[i] = v.Name\n+\t// Check if setupResultFile exists, if so we can skip the dependency installation since", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODA5MQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078091", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODkxMw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490638913", "bodyText": "We probably don't need to hard cod this anywhere.", "author": "robertwb", "createdAt": "2020-09-18T00:49:38Z", "path": "sdks/python/container/boot.go", "diffHunk": "@@ -61,11 +66,22 @@ const (\n \tsdkSrcFile        = \"dataflow_python_sdk.tar\"\n \textraPackagesFile = \"extra_packages.txt\"\n \tworkerPoolIdEnv   = \"BEAM_PYTHON_WORKER_POOL_ID\"\n+\n+\t// Setup result for the setup only mode.\n+\tsetupResultFile             = \"/opt/apache/beam/setup_result.json\"", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODA3OA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078078", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODk1Mg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490638952", "bodyText": "Isn't this a constant elsewhere?", "author": "robertwb", "createdAt": "2020-09-18T00:49:47Z", "path": "sdks/python/container/boot.go", "diffHunk": "@@ -61,11 +66,22 @@ const (\n \tsdkSrcFile        = \"dataflow_python_sdk.tar\"\n \textraPackagesFile = \"extra_packages.txt\"\n \tworkerPoolIdEnv   = \"BEAM_PYTHON_WORKER_POOL_ID\"\n+\n+\t// Setup result for the setup only mode.\n+\tsetupResultFile             = \"/opt/apache/beam/setup_result.json\"\n+\tstandardArtifactFileTypeUrn = \"beam:artifact:type:file:v1\"", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3NzUwMQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491077501", "bodyText": "I didn't find an already existing constant for this.", "author": "y1chi", "createdAt": "2020-09-18T16:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYzODk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MDcwMA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490640700", "bodyText": "Why is this a problem?", "author": "robertwb", "createdAt": "2020-09-18T00:56:58Z", "path": "sdks/python/container/boot.go", "diffHunk": "@@ -283,3 +306,51 @@ func multiProcessExactlyOnce(actionFunc func(), completeFileName string) {\n \tos.OpenFile(installCompleteFile, os.O_RDONLY|os.O_CREATE, 0666)\n \n }\n+\n+func processArtifactsInSetupOnlyMode() error {\n+\tif *artifacts == \"\" {\n+\t\tlog.Fatal(\"No --artifacts provided along with --setup_only flag.\")\n+\t}\n+\tworkDir := filepath.Dir(*artifacts)\n+\tmetadata, err := ioutil.ReadFile(*artifacts)\n+\tif err != nil {\n+\t\tlog.Fatalf(\"Unable to open artifacts metadata file %v with error %v\", *artifacts, err)\n+\t}\n+\tvar infoJsons []string\n+\tif err := json.Unmarshal(metadata, &infoJsons); err != nil {\n+\t\tlog.Fatalf(\"Unable to parse metadata, error: %v\", err)\n+\t}\n+\n+\tfiles := make([]string, len(infoJsons))\n+\tfor i, info := range infoJsons {\n+\t\tvar artifactInformation pipepb.ArtifactInformation\n+\t\tif err := jsonpb.UnmarshalString(info, &artifactInformation); err != nil {\n+\t\t\tlog.Fatalf(\"Unable to unmarshal artifact information from json string %v\", info)\n+\t\t}\n+\n+\t\t// For now we only expect artifacts in file type. The condition should be revisited if the assumption is not valid any more.\n+\t\tif artifactInformation.GetTypeUrn() != standardArtifactFileTypeUrn {\n+\t\t\tlog.Fatalf(\"Expect file artifact type in setup only mode, found %v.\", artifactInformation.GetTypeUrn())\n+\t\t}\n+\t\tfilePayload := &pipepb.ArtifactFilePayload{}\n+\t\tif err := proto.Unmarshal(artifactInformation.GetTypePayload(), filePayload); err != nil {\n+\t\t\tlog.Fatal(\"Unable to unmarshal artifact information type payload.\")\n+\t\t}\n+\t\tif dir := filepath.Dir(filePayload.GetPath()); dir != workDir {\n+\t\t\tlog.Fatalf(\"Artifact %v not stored in the same work directory %v of metadata file\", filePayload.GetPath(), workDir)", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3Nzk3Mg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491077972", "bodyText": "removed it. the installation script has an implicit requirements that all the artifacts are in same workdir. we can guarantee it while copying the artifacts.", "author": "y1chi", "createdAt": "2020-09-18T17:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MDcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MTYyOA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r490641628", "bodyText": "Make /opt/apache/beam/boot a constant as well.", "author": "robertwb", "createdAt": "2020-09-18T01:00:48Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,138 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM apache/beam_python{major}.{minor}_sdk:latest\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN /opt/apache/beam/boot --setup_only --artifacts {workdir}/{manifest_file}", "originalCommit": "02419f3a0702273ce5dc04c392c35335b7dc11dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3ODAyMQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491078021", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-18T17:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MTYyOA=="}], "type": "inlineReview"}, {"oid": "d4cecb77c25ba7f1539a1e3593bcf80e023480ba", "url": "https://github.com/apache/beam/commit/d4cecb77c25ba7f1539a1e3593bcf80e023480ba", "message": "Address comments", "committedDate": "2020-09-18T17:17:25Z", "type": "commit"}, {"oid": "2998c30b65f7d06c6c6c0a4460796df01df18d45", "url": "https://github.com/apache/beam/commit/2998c30b65f7d06c6c6c0a4460796df01df18d45", "message": "minor fix", "committedDate": "2020-09-18T17:22:51Z", "type": "commit"}, {"oid": "81f9a9e4eb53020e7a816c3e0544b8b1054858da", "url": "https://github.com/apache/beam/commit/81f9a9e4eb53020e7a816c3e0544b8b1054858da", "message": "locally import apitools", "committedDate": "2020-09-18T17:36:09Z", "type": "commit"}, {"oid": "984c4e7757ce7f19c5190c993cf6e96b81c5250a", "url": "https://github.com/apache/beam/commit/984c4e7757ce7f19c5190c993cf6e96b81c5250a", "message": "fix mypy", "committedDate": "2020-09-18T18:39:15Z", "type": "commit"}, {"oid": "984c4e7757ce7f19c5190c993cf6e96b81c5250a", "url": "https://github.com/apache/beam/commit/984c4e7757ce7f19c5190c993cf6e96b81c5250a", "message": "fix mypy", "committedDate": "2020-09-18T18:39:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2ODI4Mw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491168283", "bodyText": "Should this be a top level option similar to docker_registry_push_url or vice versa? It probably make sense to make either both options an experiment, or both as top level options.", "author": "aaltay", "createdAt": "2020-09-18T20:13:07Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -473,10 +474,19 @@ def run_pipeline(self, pipeline, options):\n \n     use_fnapi = apiclient._use_fnapi(options)\n     from apache_beam.transforms import environments\n-    self._default_environment = (\n-        environments.DockerEnvironment.from_container_image(\n-            apiclient.get_container_image_from_options(options),\n-            artifacts=environments.python_sdk_dependencies(options)))\n+    if options.view_as(DebugOptions).lookup_experiment(\n+        'prebuild_sdk_container'):", "originalCommit": "984c4e7757ce7f19c5190c993cf6e96b81c5250a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3ODU3Mg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r491178572", "bodyText": "make sense, moved to experiment.", "author": "y1chi", "createdAt": "2020-09-18T20:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2ODI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5MTgwMw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492191803", "bodyText": "+1 to being consistent. I would lean towards both being top-level options.", "author": "robertwb", "createdAt": "2020-09-21T16:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2ODI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMTg5Mg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492221892", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-21T17:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2ODI4Mw=="}], "type": "inlineReview"}, {"oid": "e26ecaf5e4960b171d2de4f6448190f23cfeaeee", "url": "https://github.com/apache/beam/commit/e26ecaf5e4960b171d2de4f6448190f23cfeaeee", "message": "Change docker_registry_push_url to experimental option", "committedDate": "2020-09-18T21:24:17Z", "type": "commit"}, {"oid": "e26ecaf5e4960b171d2de4f6448190f23cfeaeee", "url": "https://github.com/apache/beam/commit/e26ecaf5e4960b171d2de4f6448190f23cfeaeee", "message": "Change docker_registry_push_url to experimental option", "committedDate": "2020-09-18T21:24:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTk3Mg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492195972", "bodyText": "Why are \"boot\" dependencies handled any differently than non-\"boot\" dependencies?", "author": "robertwb", "createdAt": "2020-09-21T16:33:32Z", "path": "sdks/python/apache_beam/runners/portability/stager.py", "diffHunk": "@@ -119,6 +119,7 @@ def create_job_resources(options,  # type: PipelineOptions\n                            temp_dir,  # type: str\n                            build_setup_args=None,  # type: Optional[List[str]]\n                            populate_requirements_cache=None,  # type: Optional[str]\n+                           skip_boot_dependencies=False, # type: Optional[bool]", "originalCommit": "e26ecaf5e4960b171d2de4f6448190f23cfeaeee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMTYxOQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492221619", "bodyText": "There are other dependencies that doesn't seem to be handled explicitly by the boot sequence, for example pickled main session and java jars for x-lang.", "author": "y1chi", "createdAt": "2020-09-21T17:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4MzcyNw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492283727", "bodyText": "It seems the pickled main session should get staged like everything else. The java jars belong to the java environment, and should get staged in the java container image, not here. (But again, maybe this is a Dataflow issue, and will be taken care of when that is cleaned up.)", "author": "robertwb", "createdAt": "2020-09-21T19:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5MDY0NQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492290645", "bodyText": "Sounds good to me. The pickled main session is expected to be stored in semi persistent directory and I believe that is re-mounted at container launch time right now. Should we add another flag to boot.go to specify a separate path for prestaged picked main session directory?", "author": "y1chi", "createdAt": "2020-09-21T19:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyMjQ0MQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492422441", "bodyText": "Hmm... what we need to do is fix Dataflow to not be so weird. But probably not in this PR.", "author": "robertwb", "createdAt": "2020-09-22T00:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4MTU3Ng==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493081576", "bodyText": "You could consider having one\nif not skip_boot_dependencies:\n  ...\n\nand add a comment/TODO to explain why other dependencies currently cannot be included in this if.", "author": "tvalentyn", "createdAt": "2020-09-22T23:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5OTgyNg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492199826", "bodyText": "spelling", "author": "robertwb", "createdAt": "2020-09-21T16:39:55Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,275 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tarfile\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.duration_pb2 import Duration\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.internal.gcp.auth import get_service_credentials\n+from apache_beam.internal.http_client import get_new_http\n+from apache_beam.io.gcp.internal.clients import storage\n+from apache_beam.options.pipeline_options import DebugOptions\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.options.pipeline_options import PipelineOptions  # pylint: disable=unused-import\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+SDK_CONTAINER_ENTRYPOINT = '/opt/apache/beam/boot'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM apache/beam_python{major}.{minor}_sdk:latest\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN {entrypoint} --setup_only --artifacts {workdir}/{manifest_file}\n+\"\"\")\n+\n+SOURCE_FOLDER = 'source'\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class SdkContainerBuilder(object):\n+  def __init__(self, options):\n+    self._options = options\n+    self._temp_src_dir = tempfile.mkdtemp()\n+    self._docker_registry_push_url = self._options.view_as(\n+        DebugOptions).lookup_experiment('docker_registry_push_url')\n+\n+  def build(self):\n+    container_id = str(uuid.uuid4())\n+    container_tag = os.path.join(\n+        self._docker_registry_push_url or '',\n+        'beam_python_prebuilt_sdk:%s' % container_id)\n+    self.prepare_dependencies()\n+    self.invoke_docker_build_and_push(container_id, container_tag)\n+\n+    return container_tag\n+\n+  def prepare_dependencies(self):\n+    tmp = tempfile.mkdtemp()\n+    resources = Stager.create_job_resources(self._options, tmp)\n+    # make a copy of the staged artifacts into the temp source folder.\n+    for path, name in resources:\n+      shutil.copyfile(path, os.path.join(self._temp_src_dir, name))\n+    with open(os.path.join(self._temp_src_dir, 'Dockerfile'), 'w') as file:\n+      file.write(\n+          DOCKERFILE_TEMPLATE.format(\n+              major=sys.version_info[0],\n+              minor=sys.version_info[1],\n+              workdir=ARTIFACTS_CONTAINER_DIR,\n+              manifest_file=ARTIFACTS_MANIFEST_FILE,\n+              entrypoint=SDK_CONTAINER_ENTRYPOINT))\n+    self.generate_artifacts_manifests_json_file(resources, self._temp_src_dir)\n+\n+  def invoke_docker_build_and_push(self, container_id, container_tag):\n+    raise NotImplementedError\n+\n+  @staticmethod\n+  def generate_artifacts_manifests_json_file(resources, temp_dir):\n+    infos = []\n+    for _, name in resources:\n+      info = beam_runner_api_pb2.ArtifactInformation(\n+          type_urn=common_urns.StandardArtifacts.Types.FILE.urn,\n+          type_payload=beam_runner_api_pb2.ArtifactFilePayload(\n+              path=name).SerializeToString(),\n+      )\n+      infos.append(json.dumps(MessageToJson(info)))\n+    with open(os.path.join(temp_dir, ARTIFACTS_MANIFEST_FILE), 'w') as file:\n+      file.write('[\\n' + ',\\n'.join(infos) + '\\n]')\n+\n+  @classmethod\n+  def build_container_imge(cls, pipeline_options):", "originalCommit": "e26ecaf5e4960b171d2de4f6448190f23cfeaeee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMDg4OQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492220889", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-21T17:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5OTgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMDIwNQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492200205", "bodyText": "I see this being called both here and in dataflow_runner.py. Are we invoking it twice on Dataflow?", "author": "robertwb", "createdAt": "2020-09-21T16:40:34Z", "path": "sdks/python/apache_beam/transforms/environments.py", "diffHunk": "@@ -252,6 +254,14 @@ def from_runner_api_parameter(payload, capabilities, artifacts, context):\n   @classmethod\n   def from_options(cls, options):\n     # type: (PipelineOptions) -> DockerEnvironment\n+    if options.view_as(DebugOptions).lookup_experiment(\n+        'prebuild_sdk_container'):\n+      prebuilt_container_image = SdkContainerBuilder.build_container_imge(", "originalCommit": "e26ecaf5e4960b171d2de4f6448190f23cfeaeee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMDgwMQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492220801", "bodyText": "Changed to invoking from_options in dataflow runner.", "author": "y1chi", "createdAt": "2020-09-21T17:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMDIwNQ=="}], "type": "inlineReview"}, {"oid": "b5073c3571316d473e11a814a58103d52df7f247", "url": "https://github.com/apache/beam/commit/b5073c3571316d473e11a814a58103d52df7f247", "message": "Clean up", "committedDate": "2020-09-21T17:39:23Z", "type": "commit"}, {"oid": "b5073c3571316d473e11a814a58103d52df7f247", "url": "https://github.com/apache/beam/commit/b5073c3571316d473e11a814a58103d52df7f247", "message": "Clean up", "committedDate": "2020-09-21T17:39:23Z", "type": "forcePushed"}, {"oid": "4f6325224e18ac0522a67ff47faea0dca2f0e708", "url": "https://github.com/apache/beam/commit/4f6325224e18ac0522a67ff47faea0dca2f0e708", "message": "minor fix", "committedDate": "2020-09-21T23:21:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ0ODc1MA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492448750", "bodyText": "nit: \"required by prebuild sdk container functionality\". That is what you are calling it in options.", "author": "aaltay", "createdAt": "2020-09-22T02:53:46Z", "path": "sdks/python/setup.py", "diffHunk": "@@ -215,6 +215,8 @@ def get_version():\n     'google-cloud-language>=1.3.0,<2',\n     'google-cloud-videointelligence>=1.8.0,<2',\n     'google-cloud-vision>=0.38.0,<2',\n+    # GCP packages required by fast container startup functionality.", "originalCommit": "4f6325224e18ac0522a67ff47faea0dca2f0e708", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8a1ceaa2fed56f52ccc65e7b70ae72a5aaf26ecd", "url": "https://github.com/apache/beam/commit/8a1ceaa2fed56f52ccc65e7b70ae72a5aaf26ecd", "message": "Change comment on GCP requirements", "committedDate": "2020-09-22T06:11:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDQ2Nw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492504467", "bodyText": "Make sure to remove this directory when you're done with it.", "author": "robertwb", "createdAt": "2020-09-22T06:42:28Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,274 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tarfile\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.duration_pb2 import Duration\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.internal.gcp.auth import get_service_credentials\n+from apache_beam.internal.http_client import get_new_http\n+from apache_beam.io.gcp.internal.clients import storage\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.options.pipeline_options import PipelineOptions  # pylint: disable=unused-import\n+from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+SDK_CONTAINER_ENTRYPOINT = '/opt/apache/beam/boot'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM apache/beam_python{major}.{minor}_sdk:latest\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN {entrypoint} --setup_only --artifacts {workdir}/{manifest_file}\n+\"\"\")\n+\n+SOURCE_FOLDER = 'source'\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class SdkContainerBuilder(object):\n+  def __init__(self, options):\n+    self._options = options\n+    self._temp_src_dir = tempfile.mkdtemp()", "originalCommit": "4f6325224e18ac0522a67ff47faea0dca2f0e708", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4ODQ2MQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492888461", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-22T16:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDU1NA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492504554", "bodyText": "Similarly, remove when you're done with it.", "author": "robertwb", "createdAt": "2020-09-22T06:42:44Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,274 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tarfile\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.duration_pb2 import Duration\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.internal.gcp.auth import get_service_credentials\n+from apache_beam.internal.http_client import get_new_http\n+from apache_beam.io.gcp.internal.clients import storage\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.options.pipeline_options import PipelineOptions  # pylint: disable=unused-import\n+from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+SDK_CONTAINER_ENTRYPOINT = '/opt/apache/beam/boot'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM apache/beam_python{major}.{minor}_sdk:latest\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN {entrypoint} --setup_only --artifacts {workdir}/{manifest_file}\n+\"\"\")\n+\n+SOURCE_FOLDER = 'source'\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class SdkContainerBuilder(object):\n+  def __init__(self, options):\n+    self._options = options\n+    self._temp_src_dir = tempfile.mkdtemp()\n+    self._docker_registry_push_url = self._options.view_as(\n+        SetupOptions).docker_registry_push_url\n+\n+  def build(self):\n+    container_id = str(uuid.uuid4())\n+    container_tag = os.path.join(\n+        self._docker_registry_push_url or '',\n+        'beam_python_prebuilt_sdk:%s' % container_id)\n+    self.prepare_dependencies()\n+    self.invoke_docker_build_and_push(container_id, container_tag)\n+\n+    return container_tag\n+\n+  def prepare_dependencies(self):\n+    tmp = tempfile.mkdtemp()", "originalCommit": "4f6325224e18ac0522a67ff47faea0dca2f0e708", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg4ODQ4OQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492888489", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-22T16:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDU1NA=="}], "type": "inlineReview"}, {"oid": "f8790bf2c6615dce33031534aaef0d682bb01836", "url": "https://github.com/apache/beam/commit/f8790bf2c6615dce33031534aaef0d682bb01836", "message": "Clean up tmp directories", "committedDate": "2020-09-22T16:51:00Z", "type": "commit"}, {"oid": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "url": "https://github.com/apache/beam/commit/1fe2d8d1597240d70774a4dc062dbabfd5722237", "message": "add a prebuild_sdk_container_base_image option and an e2e validation test for prebuild sdk container functionality", "committedDate": "2020-09-22T19:04:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODY3OQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492428679", "bodyText": "Wording suggestion: Prebuild sdk worker container image before job submission. If enabled, SDK invokes the  boot sequence in SDK worker containers to install all pipeline dependencies in the container, and uses the prebuilt image in the pipeline environment. This may speed up pipeline execution. To enable, select  the Docker build engine: local_docker using locally-installed Docker or cloud_build for using  Google Cloud Build.", "author": "tvalentyn", "createdAt": "2020-09-22T01:15:20Z", "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -994,6 +994,21 @@ def _add_argparse_args(cls, parser):\n             'staged in the staging area (--staging_location option) and the '\n             'workers will install them in same order they were specified on '\n             'the command line.'))\n+    parser.add_argument(\n+        '--prebuild_sdk_container_engine',\n+        choices=['local_docker', 'cloud_build'],\n+        help=(\n+            'Pre-builds the sdk worker container image with boot dependencies '", "originalCommit": "4f6325224e18ac0522a67ff47faea0dca2f0e708", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1OTE4Mg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493059182", "bodyText": "or: ...for using  Google Cloud Build (requires a GCP project with Cloud Build API enabled).", "author": "tvalentyn", "createdAt": "2020-09-22T22:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDI4MA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104280", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-23T00:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyODY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMDEzOQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492430139", "bodyText": "I don't fully follow why we need this branch - could you add a comment?", "author": "tvalentyn", "createdAt": "2020-09-22T01:21:43Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -473,10 +473,16 @@ def run_pipeline(self, pipeline, options):\n \n     use_fnapi = apiclient._use_fnapi(options)\n     from apache_beam.transforms import environments\n-    self._default_environment = (\n-        environments.DockerEnvironment.from_container_image(\n-            apiclient.get_container_image_from_options(options),\n-            artifacts=environments.python_sdk_dependencies(options)))\n+    if options.view_as(SetupOptions).prebuild_sdk_container_engine:", "originalCommit": "4f6325224e18ac0522a67ff47faea0dca2f0e708", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDI3Ng==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104276", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-23T00:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMDEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMjg2NQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r492432865", "bodyText": "The terminology is a bit confusing here.\n\nContainer ID is typically an ID of a running container (see output of docker ps -a).\nWe tend to confuse container images and containers (running/stopped instances of an image).\nImage Tag is the last part of the image name after colon (/repo/name:tag), see https://docs.docker.com/engine/reference/commandline/tag/.\n\nPlease use the variable names  consistently with Docker terminology.", "author": "tvalentyn", "createdAt": "2020-09-22T01:34:29Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,274 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tarfile\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.duration_pb2 import Duration\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.internal.gcp.auth import get_service_credentials\n+from apache_beam.internal.http_client import get_new_http\n+from apache_beam.io.gcp.internal.clients import storage\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.options.pipeline_options import PipelineOptions  # pylint: disable=unused-import\n+from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+SDK_CONTAINER_ENTRYPOINT = '/opt/apache/beam/boot'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM apache/beam_python{major}.{minor}_sdk:latest\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN {entrypoint} --setup_only --artifacts {workdir}/{manifest_file}\n+\"\"\")\n+\n+SOURCE_FOLDER = 'source'\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class SdkContainerBuilder(object):\n+  def __init__(self, options):\n+    self._options = options\n+    self._temp_src_dir = tempfile.mkdtemp()\n+    self._docker_registry_push_url = self._options.view_as(\n+        SetupOptions).docker_registry_push_url\n+\n+  def build(self):", "originalCommit": "4f6325224e18ac0522a67ff47faea0dca2f0e708", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDI1Nw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104257", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-23T00:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMjg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxODgxMw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493018813", "bodyText": "We no longer run Py2 tests.", "author": "tvalentyn", "createdAt": "2020-09-22T20:38:24Z", "path": "sdks/python/apache_beam/examples/wordcount_it_test.py", "diffHunk": "@@ -56,6 +57,17 @@ def test_wordcount_it(self):\n   def test_wordcount_fnapi_it(self):\n     self._run_wordcount_it(wordcount.run, experiment='beam_fn_api')\n \n+  @attr('ValidatesContainer')\n+  def test_wordcount_it_with_prebuilt_sdk_container(self):\n+    if sys.version_info[0] < 3:", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDI0Ng==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104246", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-23T00:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxODgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0OTExNQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493049115", "bodyText": "nit: You can use typehints too now that we use Py3 only.", "author": "tvalentyn", "createdAt": "2020-09-22T21:39:24Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,279 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tarfile\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.duration_pb2 import Duration\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.internal.gcp.auth import get_service_credentials\n+from apache_beam.internal.http_client import get_new_http\n+from apache_beam.io.gcp.internal.clients import storage\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.options.pipeline_options import PipelineOptions  # pylint: disable=unused-import\n+from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+SDK_CONTAINER_ENTRYPOINT = '/opt/apache/beam/boot'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM {base_image}\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN {entrypoint} --setup_only --artifacts {workdir}/{manifest_file}\n+\"\"\")\n+\n+SOURCE_FOLDER = 'source'\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class SdkContainerBuilder(object):\n+  def __init__(self, options):\n+    self._options = options\n+    self._docker_registry_push_url = self._options.view_as(\n+        SetupOptions).docker_registry_push_url\n+    self._base_image = (\n+        self._options.view_as(SetupOptions).prebuild_sdk_container_base_image or\n+        'apache/beam_python%s.%s_sdk:latest' %\n+        (sys.version_info[0], sys.version_info[1]))\n+    self._temp_src_dir = None\n+\n+  def build(self):\n+    container_id = str(uuid.uuid4())\n+    container_tag = os.path.join(\n+        self._docker_registry_push_url or '',\n+        'beam_python_prebuilt_sdk:%s' % container_id)\n+    with tempfile.TemporaryDirectory() as temp_folder:\n+      self._temp_src_dir = temp_folder\n+      self.prepare_dependencies()\n+      self.invoke_docker_build_and_push(container_id, container_tag)\n+\n+    return container_tag\n+\n+  def prepare_dependencies(self):\n+    with tempfile.TemporaryDirectory() as tmp:\n+      resources = Stager.create_job_resources(self._options, tmp)\n+      # make a copy of the staged artifacts into the temp source folder.\n+      for path, name in resources:\n+        shutil.copyfile(path, os.path.join(self._temp_src_dir, name))\n+      with open(os.path.join(self._temp_src_dir, 'Dockerfile'), 'w') as file:\n+        file.write(\n+            DOCKERFILE_TEMPLATE.format(\n+                base_image=self._base_image,\n+                workdir=ARTIFACTS_CONTAINER_DIR,\n+                manifest_file=ARTIFACTS_MANIFEST_FILE,\n+                entrypoint=SDK_CONTAINER_ENTRYPOINT))\n+      self.generate_artifacts_manifests_json_file(resources, self._temp_src_dir)\n+\n+  def invoke_docker_build_and_push(self, container_id, container_tag):\n+    raise NotImplementedError\n+\n+  @staticmethod\n+  def generate_artifacts_manifests_json_file(resources, temp_dir):\n+    infos = []\n+    for _, name in resources:\n+      info = beam_runner_api_pb2.ArtifactInformation(\n+          type_urn=common_urns.StandardArtifacts.Types.FILE.urn,\n+          type_payload=beam_runner_api_pb2.ArtifactFilePayload(\n+              path=name).SerializeToString(),\n+      )\n+      infos.append(json.dumps(MessageToJson(info)))\n+    with open(os.path.join(temp_dir, ARTIFACTS_MANIFEST_FILE), 'w') as file:\n+      file.write('[\\n' + ',\\n'.join(infos) + '\\n]')\n+\n+  @classmethod\n+  def build_container_image(cls, pipeline_options):\n+    # type: (PipelineOptions) -> str", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDIzOQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104239", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-23T00:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0OTExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTMyMQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493051321", "bodyText": "Can we consider retrying some small number of times? Can be done earlier in the call stack for both engines.", "author": "tvalentyn", "createdAt": "2020-09-22T21:44:23Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -0,0 +1,279 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"SdkContainerBuilder builds the portable SDK container with dependencies.\n+\n+It copies the right boot dependencies, namely: apache beam sdk, python packages\n+from requirements.txt, python packages from extra_packages.txt, workflow\n+tarball, into the latest public python sdk container image, and run the\n+dependencies installation in advance with the boot program in setup only mode\n+to build the new image.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+import json\n+import logging\n+import os\n+import shutil\n+import subprocess\n+import sys\n+import tarfile\n+import tempfile\n+import time\n+import uuid\n+\n+from google.protobuf.duration_pb2 import Duration\n+from google.protobuf.json_format import MessageToJson\n+\n+from apache_beam.internal.gcp.auth import get_service_credentials\n+from apache_beam.internal.http_client import get_new_http\n+from apache_beam.io.gcp.internal.clients import storage\n+from apache_beam.options.pipeline_options import GoogleCloudOptions\n+from apache_beam.options.pipeline_options import PipelineOptions  # pylint: disable=unused-import\n+from apache_beam.options.pipeline_options import SetupOptions\n+from apache_beam.portability import common_urns\n+from apache_beam.portability.api import beam_runner_api_pb2\n+from apache_beam.runners.portability.stager import Stager\n+\n+ARTIFACTS_CONTAINER_DIR = '/opt/apache/beam/artifacts'\n+ARTIFACTS_MANIFEST_FILE = 'artifacts_info.json'\n+SDK_CONTAINER_ENTRYPOINT = '/opt/apache/beam/boot'\n+DOCKERFILE_TEMPLATE = (\n+    \"\"\"FROM {base_image}\n+RUN mkdir -p {workdir}\n+COPY ./* {workdir}/\n+RUN {entrypoint} --setup_only --artifacts {workdir}/{manifest_file}\n+\"\"\")\n+\n+SOURCE_FOLDER = 'source'\n+_LOGGER = logging.getLogger(__name__)\n+\n+\n+class SdkContainerBuilder(object):\n+  def __init__(self, options):\n+    self._options = options\n+    self._docker_registry_push_url = self._options.view_as(\n+        SetupOptions).docker_registry_push_url\n+    self._base_image = (\n+        self._options.view_as(SetupOptions).prebuild_sdk_container_base_image or\n+        'apache/beam_python%s.%s_sdk:latest' %\n+        (sys.version_info[0], sys.version_info[1]))\n+    self._temp_src_dir = None\n+\n+  def build(self):\n+    container_id = str(uuid.uuid4())\n+    container_tag = os.path.join(\n+        self._docker_registry_push_url or '',\n+        'beam_python_prebuilt_sdk:%s' % container_id)\n+    with tempfile.TemporaryDirectory() as temp_folder:\n+      self._temp_src_dir = temp_folder\n+      self.prepare_dependencies()\n+      self.invoke_docker_build_and_push(container_id, container_tag)\n+\n+    return container_tag\n+\n+  def prepare_dependencies(self):\n+    with tempfile.TemporaryDirectory() as tmp:\n+      resources = Stager.create_job_resources(self._options, tmp)\n+      # make a copy of the staged artifacts into the temp source folder.\n+      for path, name in resources:\n+        shutil.copyfile(path, os.path.join(self._temp_src_dir, name))\n+      with open(os.path.join(self._temp_src_dir, 'Dockerfile'), 'w') as file:\n+        file.write(\n+            DOCKERFILE_TEMPLATE.format(\n+                base_image=self._base_image,\n+                workdir=ARTIFACTS_CONTAINER_DIR,\n+                manifest_file=ARTIFACTS_MANIFEST_FILE,\n+                entrypoint=SDK_CONTAINER_ENTRYPOINT))\n+      self.generate_artifacts_manifests_json_file(resources, self._temp_src_dir)\n+\n+  def invoke_docker_build_and_push(self, container_id, container_tag):\n+    raise NotImplementedError\n+\n+  @staticmethod\n+  def generate_artifacts_manifests_json_file(resources, temp_dir):\n+    infos = []\n+    for _, name in resources:\n+      info = beam_runner_api_pb2.ArtifactInformation(\n+          type_urn=common_urns.StandardArtifacts.Types.FILE.urn,\n+          type_payload=beam_runner_api_pb2.ArtifactFilePayload(\n+              path=name).SerializeToString(),\n+      )\n+      infos.append(json.dumps(MessageToJson(info)))\n+    with open(os.path.join(temp_dir, ARTIFACTS_MANIFEST_FILE), 'w') as file:\n+      file.write('[\\n' + ',\\n'.join(infos) + '\\n]')\n+\n+  @classmethod\n+  def build_container_image(cls, pipeline_options):\n+    # type: (PipelineOptions) -> str\n+    setup_options = pipeline_options.view_as(SetupOptions)\n+    container_build_engine = setup_options.prebuild_sdk_container_engine\n+    if container_build_engine:\n+      if container_build_engine == 'local_docker':\n+        builder = _SdkContainerLocalBuilder(\n+            pipeline_options)  # type: SdkContainerBuilder\n+      elif container_build_engine == 'cloud_build':\n+        builder = _SdkContainerCloudBuilder(pipeline_options)\n+      else:\n+        raise ValueError(\n+            'Only (--prebuild_sdk_container_engine local_docker) and '\n+            '(--prebuild_sdk_container_engine cloud_build) are supported')\n+    else:\n+      raise ValueError('No --prebuild_sdk_container_engine option specified.')\n+    return builder.build()\n+\n+\n+class _SdkContainerLocalBuilder(SdkContainerBuilder):\n+  \"\"\"SdkContainerLocalBuilder builds the sdk container image with local\n+  docker.\"\"\"\n+  def invoke_docker_build_and_push(self, container_id, container_tag):\n+    try:\n+      _LOGGER.info(\"Building sdk container, this may take a few minutes...\")\n+      now = time.time()\n+      subprocess.run(['docker', 'build', '.', '-t', container_tag],\n+                     capture_output=True,\n+                     check=True,\n+                     cwd=self._temp_src_dir)\n+    except subprocess.CalledProcessError as err:\n+      raise RuntimeError(\n+          'Failed to build sdk container with local docker, '\n+          'stderr:\\n %s.' % err.stderr)\n+    else:\n+      _LOGGER.info(\n+          \"Successfully built %s in %.2f seconds\" %\n+          (container_tag, time.time() - now))\n+\n+    if self._docker_registry_push_url:\n+      _LOGGER.info(\"Pushing prebuilt sdk container...\")\n+      try:\n+        subprocess.run(['docker', 'push', container_tag],\n+                       capture_output=True,\n+                       check=True)\n+      except subprocess.CalledProcessError as err:\n+        raise RuntimeError(\n+            'Failed to push prebuilt sdk container %s, stderr: \\n%s' %\n+            (container_tag, err.stderr))\n+      _LOGGER.info(\n+          \"Successfully pushed %s in %.2f seconds\" %\n+          (container_tag, time.time() - now))\n+    else:\n+      _LOGGER.info(\n+          \"no --docker_registry_push_url option is specified in pipeline \"\n+          \"options, specify it if the new image is intended to be \"\n+          \"pushed to a registry.\")\n+\n+\n+class _SdkContainerCloudBuilder(SdkContainerBuilder):\n+  \"\"\"SdkContainerLocalBuilder builds the sdk container image with google cloud\n+  build.\"\"\"\n+  def __init__(self, options):\n+    super().__init__(options)\n+    self._google_cloud_options = options.view_as(GoogleCloudOptions)\n+    if self._google_cloud_options.no_auth:\n+      credentials = None\n+    else:\n+      credentials = get_service_credentials()\n+    self._storage_client = storage.StorageV1(\n+        url='https://www.googleapis.com/storage/v1',\n+        credentials=credentials,\n+        get_credentials=(not self._google_cloud_options.no_auth),\n+        http=get_new_http(),\n+        response_encoding='utf8')\n+    if not self._docker_registry_push_url:\n+      self._docker_registry_push_url = (\n+          'gcr.io/%s' % self._google_cloud_options.project)\n+\n+  def invoke_docker_build_and_push(self, container_id, container_tag):\n+    project_id = self._google_cloud_options.project\n+    temp_location = self._google_cloud_options.temp_location\n+    # google cloud build service expects all the build source file to be\n+    # compressed into a tarball.\n+    tarball_path = os.path.join(self._temp_src_dir, '%s.tgz' % SOURCE_FOLDER)\n+    self._make_tarfile(tarball_path, self._temp_src_dir)\n+    _LOGGER.info(\n+        \"Compressed source files for building sdk container at %s\" %\n+        tarball_path)\n+\n+    gcs_location = os.path.join(\n+        temp_location, '%s-%s.tgz' % (SOURCE_FOLDER, container_id))\n+    self._upload_to_gcs(tarball_path, gcs_location)\n+\n+    from google.cloud.devtools import cloudbuild_v1\n+    client = cloudbuild_v1.CloudBuildClient()\n+    build = cloudbuild_v1.Build()\n+    build.steps = []\n+    step = cloudbuild_v1.BuildStep()\n+    step.name = 'gcr.io/cloud-builders/docker'\n+    step.args = ['build', '-t', container_tag, '.']\n+    step.dir = SOURCE_FOLDER\n+\n+    build.steps.append(step)\n+    build.images = [container_tag]\n+\n+    source = cloudbuild_v1.Source()\n+    source.storage_source = cloudbuild_v1.StorageSource()\n+    gcs_bucket, gcs_object = self._get_gcs_bucket_and_name(gcs_location)\n+    source.storage_source.bucket = os.path.join(gcs_bucket)\n+    source.storage_source.object = gcs_object\n+    build.source = source\n+    # TODO(zyichi): make timeout configurable\n+    build.timeout = Duration().FromSeconds(seconds=1800)\n+\n+    now = time.time()\n+    _LOGGER.info('Building sdk container, this may take a few minutes...')\n+    operation = client.create_build(project_id=project_id, build=build)\n+    # if build fails exception will be raised and stops the job submission.", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNTU2MQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493105561", "bodyText": "I think use may need to check the failure log first, it could be caused by things such as mistakenly provided wrong base image or wrong docker push url.", "author": "y1chi", "createdAt": "2020-09-23T00:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzNTkwMA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493135900", "bodyText": "Ok, but it can also be a flake during build. We can also add a retry later.", "author": "tvalentyn", "createdAt": "2020-09-23T01:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDYyNw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493760627", "bodyText": "sounds good.", "author": "y1chi", "createdAt": "2020-09-23T17:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDAzMA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493054030", "bodyText": "I think for released SDKs, we should use the version that corresponds to the SDK version (apache_beam.version.__version__)", "author": "tvalentyn", "createdAt": "2020-09-22T21:50:41Z", "path": "sdks/python/apache_beam/options/pipeline_options.py", "diffHunk": "@@ -1003,6 +1003,13 @@ def _add_argparse_args(cls, parser):\n             'environment. Choose the docker build engine of local docker '\n             'environment or google cloud build by passing the option '\n             'local_docker or cloud_build.'))\n+    parser.add_argument(\n+        '--prebuild_sdk_container_base_image',\n+        default=None,\n+        help=(\n+            'The base image to use when pre-building the sdk container image '\n+            'with dependencies, if not specified, the latest public '", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNjA1Mw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493106053", "bodyText": "For a dev sdk version, can we use the last released version?", "author": "y1chi", "createdAt": "2020-09-23T00:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzNDcwMw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493134703", "bodyText": "It may be incompatible when breaking changes happen. We could require that for dev sdks users must provide an image (could be 'nightly' if/when we build those, or built from Dockerfile).", "author": "tvalentyn", "createdAt": "2020-09-23T01:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NDYzNw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493764637", "bodyText": "I agree that we should use a nightly build and we can change to that if we build those. Some context is that we may need to use this feature in some runner v2 rolling upgrade test and building from dockerfile for the test seems not applicable.", "author": "y1chi", "createdAt": "2020-09-23T17:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDM1Mg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493054352", "bodyText": "I think for released SDKs, we should use the version that corresponds to the SDK version (apache_beam.version.__version__)", "author": "tvalentyn", "createdAt": "2020-09-22T21:51:24Z", "path": "sdks/python/apache_beam/runners/portability/sdk_container_builder.py", "diffHunk": "@@ -69,6 +69,10 @@ def __init__(self, options):\n     self._options = options\n     self._docker_registry_push_url = self._options.view_as(\n         SetupOptions).docker_registry_push_url\n+    self._base_image = (\n+        self._options.view_as(SetupOptions).prebuild_sdk_container_base_image or", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2OTQ2Ng==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493069466", "bodyText": "Please add explanation of setup_only mode here for people who will be reading boot.go and are not familiar with this change.", "author": "tvalentyn", "createdAt": "2020-09-22T22:29:53Z", "path": "sdks/python/container/boot.go", "diffHunk": "@@ -30,18 +32,21 @@ import (\n \t\"time\"\n \n \t\"github.com/apache/beam/sdks/go/pkg/beam/artifact\"\n-\tjobpb \"github.com/apache/beam/sdks/go/pkg/beam/model/jobmanagement_v1\"\n \tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/provision\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/util/execx\"\n \t\"github.com/apache/beam/sdks/go/pkg/beam/util/grpcx\"\n+\t\"github.com/golang/protobuf/jsonpb\"\n \t\"github.com/golang/protobuf/proto\"\n \t\"github.com/nightlyone/lockfile\"\n )\n \n var (\n \tacceptableWhlSpecs []string\n \n+\tsetupOnly = flag.Bool(\"setup_only\", false, \"Execute boot program in setup only mode (optional).\")", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDE3OQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104179", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-23T00:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2OTQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3MjkxMg==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493072912", "bodyText": "Let's move evaluation of correct wheel files (a call to setupAcceptableWheelSpecs) inside this method now that we call installSetupPackages in two places.", "author": "tvalentyn", "createdAt": "2020-09-22T22:39:27Z", "path": "sdks/python/container/boot.go", "diffHunk": "@@ -203,15 +223,9 @@ func setupAcceptableWheelSpecs() error {\n }\n \n // installSetupPackages installs Beam SDK and user dependencies.\n-func installSetupPackages(mds []*jobpb.ArtifactMetadata, workDir string) error {\n+func installSetupPackages(files []string, workDir string) error {", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDE3Mw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104173", "bodyText": "done.", "author": "y1chi", "createdAt": "2020-09-23T00:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3MjkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjY1MQ==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493076651", "bodyText": "Does python_sdk_dependencies() need skip_boot_dependencies argument given that it accepts options ?", "author": "tvalentyn", "createdAt": "2020-09-22T22:50:30Z", "path": "sdks/python/apache_beam/transforms/environments.py", "diffHunk": "@@ -252,6 +254,13 @@ def from_runner_api_parameter(payload, capabilities, artifacts, context):\n   @classmethod\n   def from_options(cls, options):\n     # type: (PipelineOptions) -> DockerEnvironment\n+    if options.view_as(SetupOptions).prebuild_sdk_container_engine:\n+      prebuilt_container_image = SdkContainerBuilder.build_container_image(\n+          options)\n+      return cls.from_container_image(\n+          container_image=prebuilt_container_image,\n+          artifacts=python_sdk_dependencies(\n+              options, skip_boot_dependencies=True))", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDE2Mw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104163", "bodyText": "I think we still need it for python_sdk_dependencies to produce two sets(complete set or the reduced set) of artifacts", "author": "y1chi", "createdAt": "2020-09-23T00:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEzNjg2Nw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493136867", "bodyText": "I meant that python_sdk_dependencies could could evaluate whether options has prebuild_sdk_container_engine to evaluate what deps to return. Feel free to keep as is.", "author": "tvalentyn", "createdAt": "2020-09-23T01:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NDk2Nw==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493764967", "bodyText": "sounds good, applied the change.", "author": "y1chi", "createdAt": "2020-09-23T17:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA3NjY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4MDc5Ng==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493080796", "bodyText": "This seems confusing since stager and boot program in SDK containers are different entities.\nHow about skip_prestaged_dependencies: Skip staging dependencies that can be added into SDK containers during prebuilding.", "author": "tvalentyn", "createdAt": "2020-09-22T23:03:03Z", "path": "sdks/python/apache_beam/runners/portability/stager.py", "diffHunk": "@@ -136,6 +137,8 @@ def create_job_resources(options,  # type: PipelineOptions\n             only for testing.\n           populate_requirements_cache: Callable for populating the requirements\n             cache. Used only for testing.\n+          skip_boot_dependencies: Skip apache beam sdk, requirements, extra\n+            packages, workflow tarball installs by sdk boot program.", "originalCommit": "1fe2d8d1597240d70774a4dc062dbabfd5722237", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNDE1OA==", "url": "https://github.com/apache/beam/pull/12727#discussion_r493104158", "bodyText": "sounds much better, thanks.", "author": "y1chi", "createdAt": "2020-09-23T00:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4MDc5Ng=="}], "type": "inlineReview"}, {"oid": "ff434c03da9871e903ab19bdcc3a3dfc231c6d05", "url": "https://github.com/apache/beam/commit/ff434c03da9871e903ab19bdcc3a3dfc231c6d05", "message": "Address comments.", "committedDate": "2020-09-23T01:05:43Z", "type": "commit"}, {"oid": "b59a1babacb4ba1643cc7ef0c9dafeceafefcab1", "url": "https://github.com/apache/beam/commit/b59a1babacb4ba1643cc7ef0c9dafeceafefcab1", "message": "Remove skip_prestaged_dependencies from python_sdk_dependencies function signature", "committedDate": "2020-09-23T17:19:06Z", "type": "commit"}]}