{"pr_number": 13224, "pr_title": "[BEAM-9547] Auto-populate any unimplemented methods/properties with not_implemented_method", "pr_createdAt": "2020-10-29T19:58:40Z", "pr_url": "https://github.com/apache/beam/pull/13224", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MDgxMw==", "url": "https://github.com/apache/beam/pull/13224#discussion_r516170813", "bodyText": "This was intentionally 'plot' for better summarization (e.g. to see that x% of methods that we won't implement are due to them being plotting). A traceback would point to the actual method used. But if we want to be more specific, that's OK too.", "author": "robertwb", "createdAt": "2020-11-02T18:22:09Z", "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1391,30 +1397,22 @@ def _is_associative(func):\n       and func.__module__ in ('numpy', 'builtins'))\n \n \n+\n+@populate_not_implemented(pd.core.groupby.generic.DataFrameGroupBy)\n class _DeferredGroupByCols(frame_base.DeferredFrame):\n   # It's not clear that all of these make sense in Pandas either...\n   agg = aggregate = frame_base._elementwise_method('agg')\n   any = frame_base._elementwise_method('any')\n   all = frame_base._elementwise_method('all')\n-  apply = frame_base.not_implemented_method('apply')\n-  backfill = bfill = frame_base.not_implemented_method('backfill')\n   boxplot = frame_base.wont_implement_method('plot')\n-  corr = frame_base.not_implemented_method('corr')\n-  corrwith = frame_base.not_implemented_method('corrwith')\n-  cov = frame_base.not_implemented_method('cov')\n-  cumcount = cummax = cummin = cumprod = cumsum = (\n-      frame_base.not_implemented_method('cum*'))\n   describe = frame_base.wont_implement_method('describe')\n   diff = frame_base._elementwise_method('diff')\n-  dtypes = frame_base.not_implemented_method('dtypes')\n-  expanding = frame_base.not_implemented_method('expanding')\n-  ffill = frame_base.not_implemented_method('ffill')\n   fillna = frame_base._elementwise_method('fillna')\n   filter = frame_base._elementwise_method('filter')\n   first = frame_base.wont_implement_method('order sensitive')\n   get_group = frame_base._elementwise_method('group')\n   head = frame_base.wont_implement_method('order sensitive')\n-  hist = frame_base.wont_implement_method('plot')\n+  hist = frame_base.wont_implement_method('hist')", "originalCommit": "bae399f863e68183bd145ddec902ceb186b63242", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3NTU2NA==", "url": "https://github.com/apache/beam/pull/13224#discussion_r516175564", "bodyText": "Nice cleanup, this is much better.", "author": "robertwb", "createdAt": "2020-11-02T18:30:44Z", "path": "sdks/python/apache_beam/dataframe/doctests.py", "diffHunk": "@@ -253,27 +251,37 @@ def sort_and_normalize(text):\n \n   @property\n   def _seen_error(self):\n-    return self._seen_wont_implement or self._seen_not_implemented\n+    return self._last_error is not None\n \n   def check_output(self, want, got, optionflags):\n     # When an error occurs check_output is called with want=example.exc_msg,\n     # and got=exc_msg\n-    if got.startswith(WONT_IMPLEMENT) and (want.startswith(WONT_IMPLEMENT) or\n-                                           want.startswith(NOT_IMPLEMENTED)):\n-      self._seen_wont_implement = True\n-      return True\n-    elif got.startswith(NOT_IMPLEMENTED) and want.startswith(NOT_IMPLEMENTED):\n-      self._seen_not_implemented = True\n-      return True\n-    elif got.startswith('NameError') and self._seen_error:\n-      # After raising WontImplementError or NotImplementError,\n-      # ignore a NameError.\n-      # This allows us to gracefully skip tests like\n-      #    >>> res = df.unsupported_operation()\n-      #    >>> check(res)\n-      return True\n-    else:\n-      self.reset()\n+", "originalCommit": "a4a5d0a65f0a0a98db7777278aa4343c549df016", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a9d57762a336d8c23f1641ee869cb009ebaf78d4", "url": "https://github.com/apache/beam/commit/a9d57762a336d8c23f1641ee869cb009ebaf78d4", "message": "order-sensitive -> wont implement", "committedDate": "2020-11-02T20:21:21Z", "type": "commit"}, {"oid": "1539a7ae2219debc9c64a95b2576576968c1db85", "url": "https://github.com/apache/beam/commit/1539a7ae2219debc9c64a95b2576576968c1db85", "message": "plot is a property", "committedDate": "2020-11-02T20:21:21Z", "type": "commit"}, {"oid": "d2466634d0e71bd40110632102c5c3452e09a496", "url": "https://github.com/apache/beam/commit/d2466634d0e71bd40110632102c5c3452e09a496", "message": "match, fullmatch are elementwise", "committedDate": "2020-11-02T20:21:21Z", "type": "commit"}, {"oid": "265a83e7ca044b200c5024d1f2f6e7ef34e336fa", "url": "https://github.com/apache/beam/commit/265a83e7ca044b200c5024d1f2f6e7ef34e336fa", "message": "Raise NotImplementedError for all unimplemented methods/properties", "committedDate": "2020-11-02T20:22:58Z", "type": "commit"}, {"oid": "da0fe801f5256d10cfba38425242101293c4af10", "url": "https://github.com/apache/beam/commit/da0fe801f5256d10cfba38425242101293c4af10", "message": "Correctly distinguish between NotImplemented and WontImplement when both are allowed", "committedDate": "2020-11-02T20:23:01Z", "type": "commit"}, {"oid": "c5524735cb806e051c8a45476475d8be933d268a", "url": "https://github.com/apache/beam/commit/c5524735cb806e051c8a45476475d8be933d268a", "message": "hist -> plot", "committedDate": "2020-11-02T20:23:01Z", "type": "commit"}, {"oid": "c5524735cb806e051c8a45476475d8be933d268a", "url": "https://github.com/apache/beam/commit/c5524735cb806e051c8a45476475d8be933d268a", "message": "hist -> plot", "committedDate": "2020-11-02T20:23:01Z", "type": "forcePushed"}, {"oid": "bc2a16b47c6048d39d8d3e26d85703eeab59909d", "url": "https://github.com/apache/beam/commit/bc2a16b47c6048d39d8d3e26d85703eeab59909d", "message": "lint", "committedDate": "2020-11-02T20:39:06Z", "type": "commit"}, {"oid": "80b529b72b18fe04dbfc1b3a1d04aad98ccff37d", "url": "https://github.com/apache/beam/commit/80b529b72b18fe04dbfc1b3a1d04aad98ccff37d", "message": "lint", "committedDate": "2020-11-02T21:32:46Z", "type": "commit"}]}