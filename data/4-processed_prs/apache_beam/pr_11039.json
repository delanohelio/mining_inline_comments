{"pr_number": 11039, "pr_title": "[BEAM-9383] Staging Dataflow artifacts from environment", "pr_createdAt": "2020-03-04T02:30:48Z", "pr_url": "https://github.com/apache/beam/pull/11039", "timeline": [{"oid": "4ad6a3840921557745ff89c88fd69e5d091cd257", "url": "https://github.com/apache/beam/commit/4ad6a3840921557745ff89c88fd69e5d091cd257", "message": "[BEAM-9383] Staging Dataflow artifacts from environment", "committedDate": "2020-03-12T17:18:12Z", "type": "forcePushed"}, {"oid": "d975d8b08e62bc9e585ac865fbac3912e4429f38", "url": "https://github.com/apache/beam/commit/d975d8b08e62bc9e585ac865fbac3912e4429f38", "message": "[BEAM-9383] Staging Dataflow artifacts from environment", "committedDate": "2020-03-12T21:06:16Z", "type": "forcePushed"}, {"oid": "02fe6acf5ffa580f1e6ca06bfc04ba44a8c5dd0e", "url": "https://github.com/apache/beam/commit/02fe6acf5ffa580f1e6ca06bfc04ba44a8c5dd0e", "message": "[BEAM-9383] Staging Dataflow artifacts from environment", "committedDate": "2020-03-12T22:07:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDQ1NQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r392530455", "bodyText": "Check the ROLE as well ?", "author": "chamikaramj", "createdAt": "2020-03-13T23:47:30Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "diffHunk": "@@ -752,6 +759,27 @@ private Debuggee registerDebuggee(CloudDebugger debuggerClient, String uniquifie\n     }\n   }\n \n+  private List<DataflowPackage> stageArtifacts(RunnerApi.Pipeline pipeline) {\n+    ImmutableList.Builder<String> filesToStageBuilder = ImmutableList.builder();\n+    for (Map.Entry<String, RunnerApi.Environment> entry :\n+        pipeline.getComponents().getEnvironmentsMap().entrySet()) {\n+      for (RunnerApi.ArtifactInformation info : entry.getValue().getDependenciesList()) {\n+        if (!BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {", "originalCommit": "02fe6acf5ffa580f1e6ca06bfc04ba44a8c5dd0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMjgzMg==", "url": "https://github.com/apache/beam/pull/11039#discussion_r394722832", "bodyText": "Currently, DataflowRunner auto-generates staging names based on source file names. So ROLE (STAGING_TO) is ignored anyway. We could change this behavior later in BEAM-9455.", "author": "ihji", "createdAt": "2020-03-19T00:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDQ3Mg==", "url": "https://github.com/apache/beam/pull/11039#discussion_r392530472", "bodyText": "Please add a unit test.", "author": "chamikaramj", "createdAt": "2020-03-13T23:47:36Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "diffHunk": "@@ -752,6 +759,27 @@ private Debuggee registerDebuggee(CloudDebugger debuggerClient, String uniquifie\n     }\n   }\n \n+  private List<DataflowPackage> stageArtifacts(RunnerApi.Pipeline pipeline) {", "originalCommit": "02fe6acf5ffa580f1e6ca06bfc04ba44a8c5dd0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMTg2OA==", "url": "https://github.com/apache/beam/pull/11039#discussion_r394721868", "bodyText": "It's private method so we can't directly test it. Existing test (such as https://github.com/apache/beam/blob/master/runners/google-cloud-dataflow-java/src/test/java/org/apache/beam/runners/dataflow/DataflowRunnerTest.java#L758) should cover this method too.", "author": "ihji", "createdAt": "2020-03-19T00:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDU4MQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r392530581", "bodyText": "Please add a unit test", "author": "chamikaramj", "createdAt": "2020-03-13T23:48:12Z", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -563,19 +562,31 @@ def _gcs_file_copy(self, from_path, to_path):\n     with open(from_path, 'rb') as f:\n       self.stage_file(to_folder, to_name, f, total_size=total_size)\n \n-  def _stage_resources(self, options):\n+  def _stage_resources(self, pipeline, options):", "originalCommit": "02fe6acf5ffa580f1e6ca06bfc04ba44a8c5dd0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3OTk3MA==", "url": "https://github.com/apache/beam/pull/11039#discussion_r393879970", "bodyText": "done", "author": "ihji", "createdAt": "2020-03-17T18:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDcxMQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r392530711", "bodyText": "Nit: Pls use ( instead of \\ for formatting.", "author": "chamikaramj", "createdAt": "2020-03-13T23:48:54Z", "path": "sdks/python/apache_beam/runners/dataflow/internal/apiclient.py", "diffHunk": "@@ -563,19 +562,31 @@ def _gcs_file_copy(self, from_path, to_path):\n     with open(from_path, 'rb') as f:\n       self.stage_file(to_folder, to_name, f, total_size=total_size)\n \n-  def _stage_resources(self, options):\n+  def _stage_resources(self, pipeline, options):\n     google_cloud_options = options.view_as(GoogleCloudOptions)\n     if google_cloud_options.staging_location is None:\n       raise RuntimeError('The --staging_location option must be specified.')\n     if google_cloud_options.temp_location is None:\n       raise RuntimeError('The --temp_location option must be specified.')\n \n+    resources = []\n+    for _, env in pipeline.components.environments.items():\n+      for dep in env.dependencies:\n+        if dep.type_urn != common_urns.artifact_types.FILE.urn:\n+          raise RuntimeError('unsupported artifact type %s' % dep.type_urn)\n+        if dep.role_urn != common_urns.artifact_roles.STAGING_TO.urn:\n+          raise RuntimeError('unsupported role type %s' % dep.role_urn)\n+        type_payload = beam_runner_api_pb2.ArtifactFilePayload.FromString(\n+            dep.type_payload)\n+        role_payload = \\", "originalCommit": "02fe6acf5ffa580f1e6ca06bfc04ba44a8c5dd0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3OTkxNQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r393879915", "bodyText": "done", "author": "ihji", "createdAt": "2020-03-17T18:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDcxMQ=="}], "type": "inlineReview"}, {"oid": "0a955c4f5396bf445c59755f9a1b01d7f8b5df69", "url": "https://github.com/apache/beam/commit/0a955c4f5396bf445c59755f9a1b01d7f8b5df69", "message": "[BEAM-9383] Staging Dataflow artifacts from environment", "committedDate": "2020-04-24T02:58:35Z", "type": "forcePushed"}, {"oid": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "url": "https://github.com/apache/beam/commit/331f30d6bfe8acf069476f539c4b1bdd91e03675", "message": "[BEAM-9383] Staging Dataflow artifacts from environment", "committedDate": "2020-04-24T07:19:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1MTI4MA==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418651280", "bodyText": "Why does this have to be distinct from staged_name? (Also, eventually we hope that designated roles can remove the need for magic names.)", "author": "robertwb", "createdAt": "2020-05-01T17:39:12Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1271,6 +1271,11 @@ message DeferredArtifactPayload {\n message ArtifactStagingToRolePayload {\n   // A generated staged name (relative path under staging directory).\n   string staged_name = 1;\n+\n+  // (Optional) An artifact name when a runner supports it.\n+  // For example, DataflowRunner requires predefined names for some artifacts\n+  // such as \"dataflow-worker.jar\", \"windmill_main\".\n+  string alias_name = 2;", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzODM2Mw==", "url": "https://github.com/apache/beam/pull/11039#discussion_r419838363", "bodyText": "This is Dataflow specific requirement. DataflowPackage model has two separate fields for location and name. staged_name and alias_name correspond to location and name respectively.", "author": "ihji", "createdAt": "2020-05-05T02:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1MTI4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODkzNw==", "url": "https://github.com/apache/beam/pull/11039#discussion_r424098937", "bodyText": "We shouldn't be modifying the staging payload for this. \"dataflow-worker.jar\" or \"windmill_main\" should be the staged_name (that's literally what it's for). I think we can get rid of the whole StagingFileNameGenerator callback, just respect the = if there is any in the staging name path, and don't bother invoking PackageUtil.getUniqueContentName util you're staging to dataflow.", "author": "robertwb", "createdAt": "2020-05-12T23:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1MTI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1MjE1Mg==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418652152", "bodyText": "Isn't order important to preserve? (Also, why do we need to make a copy?)", "author": "robertwb", "createdAt": "2020-05-01T17:41:03Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -210,56 +209,55 @@ public static Environment createProcessEnvironment(\n     }\n   }\n \n-  private static List<ArtifactInformation> getArtifacts(List<String> stagingFiles) {\n-    Set<String> pathsToStage = Sets.newHashSet(stagingFiles);\n+  public static List<ArtifactInformation> getArtifacts(\n+      List<String> stagingFiles, StagingFileNameGenerator generator) {\n     ImmutableList.Builder<ArtifactInformation> artifactsBuilder = ImmutableList.builder();\n-    for (String path : pathsToStage) {\n+    for (String path : ImmutableSet.copyOf(stagingFiles)) {", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyOTY1OQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r419829659", "bodyText": "ImmutableSet preserves the order but I think we don't need to make a copy here. Will use LinkedHashSet instead.", "author": "ihji", "createdAt": "2020-05-05T02:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1MjE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NTgwMg==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418655802", "bodyText": "This is a really big log message, even for debug. (Even computing it could be expensive, for pipelines with 1000s of stages.)", "author": "robertwb", "createdAt": "2020-05-01T17:49:01Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "diffHunk": "@@ -784,7 +877,25 @@ public DataflowPipelineJob run(Pipeline pipeline) {\n         \"Executing pipeline on the Dataflow Service, which will have billing implications \"\n             + \"related to Google Compute Engine usage and other Google Cloud Services.\");\n \n-    List<DataflowPackage> packages = options.getStager().stageDefaultFiles();\n+    // Capture the sdkComponents for look up during step translations\n+    SdkComponents sdkComponents = SdkComponents.create();\n+\n+    DataflowPipelineOptions dataflowOptions = options.as(DataflowPipelineOptions.class);\n+    String workerHarnessContainerImageURL = DataflowRunner.getContainerImageForJob(dataflowOptions);\n+    RunnerApi.Environment defaultEnvironmentForDataflow =\n+        Environments.createDockerEnvironment(workerHarnessContainerImageURL);\n+\n+    sdkComponents.registerEnvironment(\n+        defaultEnvironmentForDataflow\n+            .toBuilder()\n+            .addAllDependencies(getDefaultArtifacts())\n+            .build());\n+\n+    RunnerApi.Pipeline pipelineProto = PipelineTranslation.toProto(pipeline, sdkComponents, true);\n+\n+    LOG.debug(\"Portable pipeline proto:\\n{}\", TextFormat.printToString(pipelineProto));", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyOTk3MQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r419829971", "bodyText": "This debug log is not new. It's just relocated. Do you think it would be better to remove this?", "author": "ihji", "createdAt": "2020-05-05T02:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NTgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NzU0OQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r426887549", "bodyText": "OK, we don't have to change this.", "author": "robertwb", "createdAt": "2020-05-18T20:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NzA3OQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418657079", "bodyText": "How does this get invoked for cross-language pipelines?", "author": "robertwb", "createdAt": "2020-05-01T17:51:39Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "diffHunk": "@@ -784,7 +877,25 @@ public DataflowPipelineJob run(Pipeline pipeline) {\n         \"Executing pipeline on the Dataflow Service, which will have billing implications \"\n             + \"related to Google Compute Engine usage and other Google Cloud Services.\");\n \n-    List<DataflowPackage> packages = options.getStager().stageDefaultFiles();\n+    // Capture the sdkComponents for look up during step translations\n+    SdkComponents sdkComponents = SdkComponents.create();\n+\n+    DataflowPipelineOptions dataflowOptions = options.as(DataflowPipelineOptions.class);\n+    String workerHarnessContainerImageURL = DataflowRunner.getContainerImageForJob(dataflowOptions);\n+    RunnerApi.Environment defaultEnvironmentForDataflow =\n+        Environments.createDockerEnvironment(workerHarnessContainerImageURL);\n+\n+    sdkComponents.registerEnvironment(\n+        defaultEnvironmentForDataflow\n+            .toBuilder()\n+            .addAllDependencies(getDefaultArtifacts())", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTc1Nw==", "url": "https://github.com/apache/beam/pull/11039#discussion_r423291757", "bodyText": "It does nothing with the cross-language pipelines. Cross-language dependency should also be a part of the native dependency list here. #11557 improved this so the expansion service could  return its own dependencies.", "author": "ihji", "createdAt": "2020-05-11T20:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NzA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3Mzk0NQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r426973945", "bodyText": "We also need to make sure we have the capabilities set, I have this PR: #11748 since it was missing before.", "author": "lukecwik", "createdAt": "2020-05-19T01:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1NzA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NDYyNQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418664625", "bodyText": "Is this = support a dataflow-only thing? Seems we don't support that in Environments.getArtifacts() (but if we did nearly all of this code could go away).", "author": "robertwb", "createdAt": "2020-05-01T18:07:50Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowRunner.java", "diffHunk": "@@ -772,6 +783,88 @@ private Debuggee registerDebuggee(CloudDebugger debuggerClient, String uniquifie\n     }\n   }\n \n+  private List<DataflowPackage> stageArtifacts(RunnerApi.Pipeline pipeline) {\n+    ImmutableList.Builder<StagedFile> filesToStageBuilder = ImmutableList.builder();\n+    for (Map.Entry<String, RunnerApi.Environment> entry :\n+        pipeline.getComponents().getEnvironmentsMap().entrySet()) {\n+      for (RunnerApi.ArtifactInformation info : entry.getValue().getDependenciesList()) {\n+        if (!BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getTypeUrn())) {\n+          throw new RuntimeException(\n+              String.format(\"unsupported artifact type %s\", info.getTypeUrn()));\n+        }\n+        RunnerApi.ArtifactFilePayload filePayload;\n+        try {\n+          filePayload = RunnerApi.ArtifactFilePayload.parseFrom(info.getTypePayload());\n+        } catch (InvalidProtocolBufferException e) {\n+          throw new RuntimeException(\"Error parsing artifact file payload.\", e);\n+        }\n+        if (!BeamUrns.getUrn(RunnerApi.StandardArtifacts.Roles.STAGING_TO)\n+            .equals(info.getRoleUrn())) {\n+          throw new RuntimeException(\n+              String.format(\"unsupported artifact role %s\", info.getRoleUrn()));\n+        }\n+        RunnerApi.ArtifactStagingToRolePayload stagingPayload;\n+        try {\n+          stagingPayload = RunnerApi.ArtifactStagingToRolePayload.parseFrom(info.getRolePayload());\n+        } catch (InvalidProtocolBufferException e) {\n+          throw new RuntimeException(\"Error parsing artifact staging_to role payload.\", e);\n+        }\n+        DataflowPackage target = new DataflowPackage();\n+        target.setLocation(stagingPayload.getStagedName());\n+        if (!Strings.isNullOrEmpty(stagingPayload.getAliasName())) {\n+          target.setName(stagingPayload.getAliasName());\n+        }\n+        filesToStageBuilder.add(StagedFile.of(filePayload.getPath(), target));\n+      }\n+    }\n+    return options.getStager().stageFiles(filesToStageBuilder.build());\n+  }\n+\n+  private List<RunnerApi.ArtifactInformation> getDefaultArtifacts() {\n+    ImmutableList.Builder<String> pathsToStageBuilder = ImmutableList.builder();\n+    ImmutableMap.Builder<String, String> aliasMapBuilder = ImmutableMap.builder();\n+    String windmillBinary =\n+        options.as(DataflowPipelineDebugOptions.class).getOverrideWindmillBinary();\n+    String dataflowWorkerJar = options.getDataflowWorkerJar();\n+    if (dataflowWorkerJar != null && !dataflowWorkerJar.isEmpty()) {\n+      // Put the user specified worker jar at the start of the classpath, to be consistent with the\n+      // built in worker order.\n+      pathsToStageBuilder.add(dataflowWorkerJar);\n+      aliasMapBuilder.put(dataflowWorkerJar, \"dataflow-worker.jar\");\n+    }\n+    for (String path : options.getFilesToStage()) {\n+      if (path.contains(\"=\")) {", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzMjMzOQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r419832339", "bodyText": "Yes. This syntax is only supported in Dataflow runner. DataflowPackage has a separate field name in addition to location and \"=\" separator allows to prefix name to the location of the source e.g. \"dataflow.jar=/tmp/foo.jar\". I could remove this special syntax but I decided to keep it since it's already exposed to users via --filesToStage option so removing it may cause backward compatibility issue.", "author": "ihji", "createdAt": "2020-05-05T02:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NDYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NTUyNQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418665525", "bodyText": "Why do we have to handle this here and above?", "author": "robertwb", "createdAt": "2020-05-01T18:09:43Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/util/PackageUtil.java", "diffHunk": "@@ -336,25 +323,26 @@ public DataflowPackage stageToFile(\n     final AtomicInteger numCached = new AtomicInteger(0);\n     List<CompletionStage<DataflowPackage>> destinationPackages = new ArrayList<>();\n \n-    for (String classpathElement : classpathElements) {\n-      DataflowPackage sourcePackage = new DataflowPackage();\n-      if (classpathElement.contains(\"=\")) {\n-        String[] components = classpathElement.split(\"=\", 2);\n-        sourcePackage.setName(components[0]);\n-        sourcePackage.setLocation(components[1]);\n-      } else {\n-        sourcePackage.setName(null);\n-        sourcePackage.setLocation(classpathElement);\n+    for (StagedFile classpathElement : classpathElements) {\n+      DataflowPackage targetPackage = classpathElement.getStagedPackage();\n+      String source = classpathElement.getSource();\n+      if (source.contains(\"=\")) {", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzODQ1Ng==", "url": "https://github.com/apache/beam/pull/11039#discussion_r419838456", "bodyText": "removed.", "author": "ihji", "createdAt": "2020-05-05T02:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NTUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NjcxNw==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418666717", "bodyText": "This seems highly redundant with what we're already doing in Environments.getArtifacts. Can't we ensure we have a set of (existing, non-directory) files in the environment, and then have these utilities simply do the uploading?", "author": "robertwb", "createdAt": "2020-05-01T18:12:43Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/util/PackageUtil.java", "diffHunk": "@@ -442,45 +448,56 @@ public static StagingResult uploaded(PackageAttributes attributes) {\n   /** Holds the metadata necessary to stage a file or confirm that a staged file has not changed. */\n   @AutoValue\n   abstract static class PackageAttributes {\n-\n-    public static PackageAttributes forFileToStage(File source, String stagingPath)\n+    public static PackageAttributes forFileToStage(File file, String stagingPath)\n         throws IOException {\n+      return forFileToStage(file.getPath(), null, stagingPath);\n+    }\n \n+    public static PackageAttributes forFileToStage(", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MTE1Nw==", "url": "https://github.com/apache/beam/pull/11039#discussion_r421271157", "bodyText": "I think we can remove those hashing and zipping. It's redundant except test cases. Will update the code.", "author": "ihji", "createdAt": "2020-05-07T06:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NjcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NzYyNg==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418667626", "bodyText": "Should we push populating artifacts into from_container_image?", "author": "robertwb", "createdAt": "2020-05-01T18:14:50Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner.py", "diffHunk": "@@ -462,7 +462,8 @@ def run_pipeline(self, pipeline, options):\n     use_fnapi = apiclient._use_fnapi(options)\n     from apache_beam.transforms import environments\n     default_environment = environments.DockerEnvironment.from_container_image(\n-        apiclient.get_container_image_from_options(options))\n+        apiclient.get_container_image_from_options(options),\n+        artifacts=environments.python_sdk_dependencies(options))", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg0MTM0NA==", "url": "https://github.com/apache/beam/pull/11039#discussion_r419841344", "bodyText": "We need pipeline option to populate artifacts. I think we could either use from_options instead and override container image or just leave as is.", "author": "ihji", "createdAt": "2020-05-05T03:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NzYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5NDQ3OQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r424094479", "bodyText": "Let's use from_options.", "author": "robertwb", "createdAt": "2020-05-12T23:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NzYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NzgxNQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r418667815", "bodyText": "Why this change?", "author": "robertwb", "createdAt": "2020-05-01T18:15:16Z", "path": "sdks/python/apache_beam/runners/dataflow/dataflow_runner_test.py", "diffHunk": "@@ -102,7 +102,8 @@ def setUp(self):\n         '--staging_location=ignored',\n         '--temp_location=/dev/null',\n         '--no_auth',\n-        '--dry_run=True'\n+        '--dry_run=True',\n+        '--sdk_location=container'", "originalCommit": "331f30d6bfe8acf069476f539c4b1bdd91e03675", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzOTkyNw==", "url": "https://github.com/apache/beam/pull/11039#discussion_r419839927", "bodyText": "The test tries to download a dev version of apache-beam dependency (which indeed does not exist in pypi) when it constructs the environment.", "author": "ihji", "createdAt": "2020-05-05T03:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2NzgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NjgzMw==", "url": "https://github.com/apache/beam/pull/11039#discussion_r426876833", "bodyText": "You could just match \".*.txt\" here, rather than hard-coding the uuid format. (Same blow.)", "author": "robertwb", "createdAt": "2020-05-18T20:30:58Z", "path": "runners/google-cloud-dataflow-java/src/test/java/org/apache/beam/runners/dataflow/util/PackageUtilTest.java", "diffHunk": "@@ -195,7 +187,7 @@ public void testFileWithExtensionPackageNamingAndSize() throws Exception {\n     PackageAttributes attr = makePackageAttributes(tmpFile, null);\n     DataflowPackage target = attr.getDestination();\n \n-    assertThat(target.getName(), RegexMatcher.matches(\"file-\" + HASH_PATTERN + \".txt\"));\n+    assertThat(target.getName(), RegexMatcher.matches(UUID_PATTERN + \".txt\"));", "originalCommit": "3e368f7f2fc9993960d5d070a2865ae6ef161c92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNDg1OQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r426924859", "bodyText": "but it only checks whether the staged file name has the same extension (vs. checks whether the staged file name is in the form of UUID with the same extension)", "author": "ihji", "createdAt": "2020-05-18T22:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NjgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyNjcyMA==", "url": "https://github.com/apache/beam/pull/11039#discussion_r426926720", "bodyText": "Is it important, for the purposes of this test (or Dataflow in general) that the staged file name is in the form of a UUID? If not (and I don't think it is) it's better not to test for it. (A test that might be good to add is to see if two same-named files in different directories actually get staged to different places, which is the underlying, important intent.)", "author": "robertwb", "createdAt": "2020-05-18T22:29:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NjgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3MTk5OQ==", "url": "https://github.com/apache/beam/pull/11039#discussion_r426971999", "bodyText": "Hmm. You're right. UUID is implementation detail behind the uniqueness guarantee. I changed the tests to only check whether it keeps the same extension.", "author": "ihji", "createdAt": "2020-05-19T01:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NjgzMw=="}], "type": "inlineReview"}, {"oid": "5298d69ee753aead758cc92ecf44558af8c5f97e", "url": "https://github.com/apache/beam/commit/5298d69ee753aead758cc92ecf44558af8c5f97e", "message": "make pipeline files unique", "committedDate": "2020-05-18T22:12:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NDU0OA==", "url": "https://github.com/apache/beam/pull/11039#discussion_r426974548", "bodyText": "Shouldn't we have a test to show the artifacts were properly set?", "author": "lukecwik", "createdAt": "2020-05-19T01:12:42Z", "path": "runners/google-cloud-dataflow-java/src/test/java/org/apache/beam/runners/dataflow/DataflowPipelineTranslatorTest.java", "diffHunk": "@@ -53,9 +53,12 @@\n import org.apache.beam.model.pipeline.v1.RunnerApi.DockerPayload;", "originalCommit": "26045210fc0e16732e55a4dd25e813c4e98f228c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA3OTY5OA==", "url": "https://github.com/apache/beam/pull/11039#discussion_r427079698", "bodyText": "done.", "author": "ihji", "createdAt": "2020-05-19T07:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NDU0OA=="}], "type": "inlineReview"}, {"oid": "7b623517487bd8e32631e8246af49b0ac2b0c0c0", "url": "https://github.com/apache/beam/commit/7b623517487bd8e32631e8246af49b0ac2b0c0c0", "message": "[BEAM-9383] Staging Dataflow artifacts from environment", "committedDate": "2020-05-19T04:00:05Z", "type": "commit"}, {"oid": "ee53ccc953595bba47254122d6e64c760ae3938f", "url": "https://github.com/apache/beam/commit/ee53ccc953595bba47254122d6e64c760ae3938f", "message": "rebase, adding test", "committedDate": "2020-05-19T07:12:55Z", "type": "commit"}, {"oid": "ee53ccc953595bba47254122d6e64c760ae3938f", "url": "https://github.com/apache/beam/commit/ee53ccc953595bba47254122d6e64c760ae3938f", "message": "rebase, adding test", "committedDate": "2020-05-19T07:12:55Z", "type": "forcePushed"}]}