{"pr_number": 12403, "pr_title": "[BEAM-10597] Propagate BigQuery streaming insert throttled time to Dataflow worker", "pr_createdAt": "2020-07-29T05:31:34Z", "pr_url": "https://github.com/apache/beam/pull/12403", "timeline": [{"oid": "09077d0e6bbfbbb79e8d417801ea7b5dd0b9148e", "url": "https://github.com/apache/beam/commit/09077d0e6bbfbbb79e8d417801ea7b5dd0b9148e", "message": "Propagate BigQuery streaming insert throttled time to Dataflow worker in Python SDK", "committedDate": "2020-07-30T19:58:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTkwOQ==", "url": "https://github.com/apache/beam/pull/12403#discussion_r464549909", "bodyText": "Can we use the same name as above (\"cumulativeThrottlingSeconds\") and move it to a constant (and also do ms to sec conversion when setting) ?", "author": "chamikaramj", "createdAt": "2020-08-03T17:17:22Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/BatchModeExecutionContext.java", "diffHunk": "@@ -543,6 +547,16 @@ public Long extractThrottleTime() {\n         totalThrottleTime += httpClientApiThrottlingTime.getCumulative();\n       }\n \n+      CounterCell bigqueryStreamingInsertThrottleTime =\n+          container.tryGetCounter(\n+              MetricName.named(\n+                  BIGQUERY_STREAMING_INSERT_THROTTLE_TIME_NAMESPACE,\n+                  BIGQUERY_STREAMING_INSERT_THROTTLE_TIME_NAME));", "originalCommit": "09077d0e6bbfbbb79e8d417801ea7b5dd0b9148e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5NDIwMg==", "url": "https://github.com/apache/beam/pull/12403#discussion_r464894202", "bodyText": "+1\nIt would be great if we could use the same constant for all three use cases.", "author": "ihji", "createdAt": "2020-08-04T08:41:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzMDA1Mg==", "url": "https://github.com/apache/beam/pull/12403#discussion_r470230052", "bodyText": "Here we can use seconds, but on the streaming side msec is needed. That's the reason why I kept msec.\nFor consistency, we can change all counters to use msec originally, and do msec to sec conversion here. WDYT?", "author": "robinyqiu", "createdAt": "2020-08-13T20:31:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTkwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMDIyMA==", "url": "https://github.com/apache/beam/pull/12403#discussion_r471830220", "bodyText": "Hi @chamikaramj @ihji ! I have made the change such that BQ, GCS, and Datastore all report throttled time in milliseconds at the beginning, and they now share the common counter name for consistency. The millisecond to second conversion is done only when later a throttled time in seconds is expected by worker side code. PTAL", "author": "robinyqiu", "createdAt": "2020-08-17T23:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MDcwOQ==", "url": "https://github.com/apache/beam/pull/12403#discussion_r464550709", "bodyText": "Is there a reason why we needed to use a  unique name for BQ but not for GCS or Datastore ?", "author": "chamikaramj", "createdAt": "2020-08-03T17:18:49Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/StreamingDataflowWorker.java", "diffHunk": "@@ -520,8 +526,11 @@ public int getSize() {\n     private void translateKnownStepCounters(CounterUpdate stepCounterUpdate) {\n       CounterStructuredName structuredName =\n           stepCounterUpdate.getStructuredNameAndMetadata().getName();\n-      if (THROTTLING_MSECS_METRIC_NAME.getNamespace().equals(structuredName.getOriginNamespace())\n-          && THROTTLING_MSECS_METRIC_NAME.getName().equals(structuredName.getName())) {\n+      if ((THROTTLING_MSECS_METRIC_NAME.getNamespace().equals(structuredName.getOriginNamespace())\n+              && THROTTLING_MSECS_METRIC_NAME.getName().equals(structuredName.getName()))\n+          || (BIGQUERY_STREAMING_INSERT_THROTTLE_TIME_NAMESPACE.equals(", "originalCommit": "09077d0e6bbfbbb79e8d417801ea7b5dd0b9148e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyODYxNA==", "url": "https://github.com/apache/beam/pull/12403#discussion_r470228614", "bodyText": "Yes. GCS and Datastore counters are only consumed by batch worker (the THROTTLING_MSECS_METRIC_NAME counter here is a separate counter; I am not sure what this is. Maybe all throttling metrics should go to this counter? @ihji I saw you have a JIRA about it, not sure if this what you want to do).\nHere in the streaming case, precision is on millisecond (whereas GCS and DataStore only store seconds)", "author": "robinyqiu", "createdAt": "2020-08-13T20:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MDcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg==", "url": "https://github.com/apache/beam/pull/12403#discussion_r464552116", "bodyText": "This is for failures. Probably you need to increment the counter for backoff1 for rate limit errors above.\ncc: @ihji", "author": "chamikaramj", "createdAt": "2020-08-03T17:21:38Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -867,6 +872,7 @@ public void deleteDataset(String projectId, String datasetId)\n         }\n         try {\n           sleeper.sleep(nextBackoffMillis);\n+          throttlingMilliSeconds.inc(nextBackoffMillis);", "originalCommit": "09077d0e6bbfbbb79e8d417801ea7b5dd0b9148e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNTgzMw==", "url": "https://github.com/apache/beam/pull/12403#discussion_r470225833", "bodyText": "The retried failures here are transient failures, which I believe include throttling. I have thought about incrementing backoff1 but that is executed in a future (a parallel thread). If we accumulate counters over all threads then I think we will over calculate the number. So I add the counter here in the main thread.", "author": "robinyqiu", "createdAt": "2020-08-13T20:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2NDQ0Ng==", "url": "https://github.com/apache/beam/pull/12403#discussion_r471864446", "bodyText": "Throttling results in rate limit errors, right ? If so that would be captured by backoff1 I think. Prob. Heejong can confirm.", "author": "chamikaramj", "createdAt": "2020-08-18T01:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMTg2NA==", "url": "https://github.com/apache/beam/pull/12403#discussion_r472501864", "bodyText": "My major concern on accumulating backoff1 is that we may over calculate, because we will be adding time being throttled on all threads.", "author": "robinyqiu", "createdAt": "2020-08-18T21:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwNzczNw==", "url": "https://github.com/apache/beam/pull/12403#discussion_r472507737", "bodyText": "Yes, we should use backoff1. Rate limit errors only reach to this point after 2 minutes of backoffs by backoff1 silently inside of the future. Why do you think it's over-calculated? Each thread is doing its own insert job and it doesn't look strange to me to calculate the total throttling time by adding all backoff times from parallel threads.", "author": "ihji", "createdAt": "2020-08-18T21:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNDIzOA==", "url": "https://github.com/apache/beam/pull/12403#discussion_r472514238", "bodyText": "Yes, we should use backoff1. Rate limit errors only reach to this point after 2 minutes of backoffs by backoff1 silently inside of the future.\n\nI see. That make sense to me.\n\nWhy do you think it's over-calculated?\n\nBecause I am not sure how this metrics is used downstream. I vaguely remember Dataflow autoscaling will use this number divided by the total time spent on work item to yield a fraction which signals throttling. If the total time is not accumulating time spent on all threads then we may over-calculate.", "author": "robinyqiu", "createdAt": "2020-08-18T21:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMTc0MQ==", "url": "https://github.com/apache/beam/pull/12403#discussion_r472521741", "bodyText": "Yeah, I think that's a valid concern. We probably need to figure out the time requests are throttled without including backoff due to other errors. Is there a way to get throttled time from all parallel threads and just use the maximum ?", "author": "chamikaramj", "createdAt": "2020-08-18T22:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NjMxNw==", "url": "https://github.com/apache/beam/pull/12403#discussion_r472556317", "bodyText": "Is there a way to get throttled time from all parallel threads and just use the maximum?\n\nYes I think this is the right thing to do. Made the change already. PTAL. WDYT, @ihji?", "author": "robinyqiu", "createdAt": "2020-08-18T23:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MjExNg=="}], "type": "inlineReview"}, {"oid": "9dc9157fe6126c20af3db7dd68ba68433ec661ad", "url": "https://github.com/apache/beam/commit/9dc9157fe6126c20af3db7dd68ba68433ec661ad", "message": "GCS and Datastore report throttling-msecs as well", "committedDate": "2020-08-17T23:20:44Z", "type": "forcePushed"}, {"oid": "819615081793eb535025bb7bf6d278c50725c686", "url": "https://github.com/apache/beam/commit/819615081793eb535025bb7bf6d278c50725c686", "message": "GCS and Datastore report throttling-msecs as well", "committedDate": "2020-08-17T23:54:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NjU5Mw==", "url": "https://github.com/apache/beam/pull/12403#discussion_r474146593", "bodyText": "Please consider adding this to Python as well (in  a separate PR).\ncc: @pabloem", "author": "chamikaramj", "createdAt": "2020-08-20T17:13:30Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -424,6 +427,9 @@ public Job getJob(JobReference jobRef, Sleeper sleeper, BackOff backoff)\n     private final PipelineOptions options;\n     private final long maxRowsPerBatch;\n     private final long maxRowBatchSize;\n+    // aggregate the total time spent in exponential backoff", "originalCommit": "621a4c375dd4f2bdc2eaee0bb5b3601ce1802513", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1MDg0NQ==", "url": "https://github.com/apache/beam/pull/12403#discussion_r474350845", "bodyText": "Will do in a new PR.", "author": "robinyqiu", "createdAt": "2020-08-21T01:00:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NjU5Mw=="}], "type": "inlineReview"}, {"oid": "bffcd2376b4ef6ba7ce14faf0443129dea28c824", "url": "https://github.com/apache/beam/commit/bffcd2376b4ef6ba7ce14faf0443129dea28c824", "message": "Propagate BigQuery streaming insert throttled time to Dataflow worker in Java SDK", "committedDate": "2020-08-21T00:59:47Z", "type": "commit"}, {"oid": "bffcd2376b4ef6ba7ce14faf0443129dea28c824", "url": "https://github.com/apache/beam/commit/bffcd2376b4ef6ba7ce14faf0443129dea28c824", "message": "Propagate BigQuery streaming insert throttled time to Dataflow worker in Java SDK", "committedDate": "2020-08-21T00:59:47Z", "type": "forcePushed"}]}