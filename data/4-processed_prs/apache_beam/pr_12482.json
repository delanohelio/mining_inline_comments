{"pr_number": 12482, "pr_title": "[BEAM-7390] Add top code snippets", "pr_createdAt": "2020-08-06T16:50:42Z", "pr_url": "https://github.com/apache/beam/pull/12482", "timeline": [{"oid": "9f0da127cd10b9cfb44c3dcf5f52e0fb40b441e5", "url": "https://github.com/apache/beam/commit/9f0da127cd10b9cfb44c3dcf5f52e0fb40b441e5", "message": "[BEAM-7390] Add top code snippets", "committedDate": "2020-08-06T16:49:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTY2MQ==", "url": "https://github.com/apache/beam/pull/12482#discussion_r466579661", "bodyText": "Probably outside of your diff--but can you capitalize the \"T\" in take? Thank you!", "author": "rosetn", "createdAt": "2020-08-06T17:41:04Z", "path": "website/www/site/content/en/documentation/transforms/python/aggregation/top.md", "diffHunk": "@@ -14,24 +14,144 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n -->\n+\n # Top\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/2.12.0/apache_beam.transforms.combiners.html?#apache_beam.transforms.combiners.Top\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Top\" >}}\n \n Transforms for finding the largest (or smallest) set of elements in\n a collection, or the largest (or smallest) set of values associated\n with each key in a collection of key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [Sample](/documentation/transforms/python/aggregation/sample) to combine elements. takes samples of the elements in a collection.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the largest or smallest elements in different ways.\n+\n+### Example 1: Largest elements from a PCollection\n+\n+We use `Top.Largest()` to get the largest elements from the *entire* `PCollection`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_largest >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" largest_elements >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 2: Largest elements for each key\n+\n+We use `Top.LargestPerKey()` to get the largest elements for each unique key in a `PCollection` of key-values.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_largest_per_key >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" largest_elements_per_key >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 3: Smallest elements from a PCollection\n+\n+We use `Top.Smallest()` to get the smallest elements from the *entire* `PCollection`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_smallest >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" smallest_elements >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 4: Smallest elements for each key\n+\n+We use `Top.SmallestPerKey()` to get the smallest elements for each unique key in a `PCollection` of key-values.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_smallest_per_key >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" smallest_elements_per_key >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 5: Custom elements from a PCollection\n+\n+We use `Top.Of()` to get elements with customized rules from the *entire* `PCollection`.\n+\n+You can change how the elements are compared with `key`.\n+By default you get the largest elements, but you can get the smallest by setting `reverse=True`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_of >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" shortest_elements >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+### Example 6: Custom elements for each key\n+\n+We use `Top.PerKey()` to get elements with customized rules for each unique key in a `PCollection` of key-values.\n+\n+You can change how the elements are compared with `key`.\n+By default you get the largest elements, but you can get the smallest by setting `reverse=True`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" top_per_key >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top_test.py\" shortest_elements_per_key >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/top.py\" >}}\n+\n+## Related transforms\n+\n+* [Sample](/documentation/transforms/python/aggregation/sample) to combine elements. takes samples of the elements in a collection.", "originalCommit": "9f0da127cd10b9cfb44c3dcf5f52e0fb40b441e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5ODIyOA==", "url": "https://github.com/apache/beam/pull/12482#discussion_r466598228", "bodyText": "Thanks, done.", "author": "davidcavazos", "createdAt": "2020-08-06T18:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTY2MQ=="}], "type": "inlineReview"}, {"oid": "5854a242f747176d9e7b0a1dad3fcdcf9fa94574", "url": "https://github.com/apache/beam/commit/5854a242f747176d9e7b0a1dad3fcdcf9fa94574", "message": "Capitalized T", "committedDate": "2020-08-06T18:14:03Z", "type": "commit"}, {"oid": "ffc571d5768b24f7bd0d49a560365037456827e1", "url": "https://github.com/apache/beam/commit/ffc571d5768b24f7bd0d49a560365037456827e1", "message": "Merge branch 'master' of https://github.com/apache/beam into top-docs", "committedDate": "2020-08-07T16:34:30Z", "type": "commit"}]}