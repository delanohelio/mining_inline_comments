{"pr_number": 10733, "pr_title": "[BEAM-9229] Adding dependency information to Environment proto", "pr_createdAt": "2020-01-30T23:59:15Z", "pr_url": "https://github.com/apache/beam/pull/10733", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MjM4Ng==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375572386", "bodyText": "Nit: separate these with a newline, so the definitions cling more tightly to the constants.", "author": "robertwb", "createdAt": "2020-02-05T23:48:19Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwMjM3Nw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377302377", "bodyText": "Thanks!", "author": "ihji", "createdAt": "2020-02-10T20:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MjM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MjgyMA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375572820", "bodyText": "Or should this be URL (or maybe REMOTE) to allow for ftp, etc? It could be argued we want to restrict to HTTP(S), though I don't know what would be gained by that.", "author": "robertwb", "createdAt": "2020-02-05T23:49:34Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwMjcxMg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377302712", "bodyText": "Make sense. Renamed to 'remote'.", "author": "ihji", "createdAt": "2020-02-10T20:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MjgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MzEwNg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375573106", "bodyText": "It seems that payload and artifact_id are redundant. Merge them? Should version-range be part of the payload as well? (Or, if it's a top-level attribute, should it be in a standard format (not sure if there is one, but if there is it'd be nice to be able to do generic intersections and merging...)).", "author": "robertwb", "createdAt": "2020-02-05T23:50:39Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message ArtifactInformation {\n+  string urn = 1;\n+  bytes payload = 2;\n+  string artifact_id = 3;", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxOTQ4MA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377319480", "bodyText": "We also need artifact_id and version_range in local types (local files and embedded files) for possible deduplication. If the field is common for all types of artifacts I thought it should be the top-level attribute. And yes it'd be nice to use a standard format for the top-level version_range arrtibute but I don't have a good idea at this moment.", "author": "ihji", "createdAt": "2020-02-10T21:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MzEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2Mjg4Mg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377862882", "bodyText": "If we can't come up with a standard format, I think it should be part of the payload. Similarly for artifact_id--they should mean the same thing. (We can always safely dedup on urn+payloads.)", "author": "robertwb", "createdAt": "2020-02-11T19:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MzEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NDc1NA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379074754", "bodyText": "Makes sense. Moved artifact_id and version_range to each payload.", "author": "ihji", "createdAt": "2020-02-13T19:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MzEwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NDUzMg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375574532", "bodyText": "Is this specific to files?", "author": "robertwb", "createdAt": "2020-02-05T23:55:41Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+  // A generated staged name (no path).\n+  string staged_name = 2;", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwMzIxMA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377303210", "bodyText": "stage_name is specific to files ready to be staged (local files and embedded files).", "author": "ihji", "createdAt": "2020-02-10T20:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MjE1NQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377862155", "bodyText": "But eventually we'll have to give it a name, right? (One could argue that dependencies should be a map(name -> artifact). OTOH, for some perhaps we could leave it blank and one could be inferred (e.g. for urls).", "author": "robertwb", "createdAt": "2020-02-11T19:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NDUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTAzNw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375575037", "bodyText": "It seems this only makes sense on a shared filesystem. (And could result in confusion otherwise.) Perhaps we should also store a hash (e.g. sha256) so a check of \"sameness\" can be performed?", "author": "robertwb", "createdAt": "2020-02-05T23:57:26Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxMDc0Nw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377310747", "bodyText": "It's assumed to be used when SDK is saving remote artifacts and preparing to submit them to the staging service from locally downloaded files. local_path here is not ubiquitous information. After submitting the artifacts, retrieval_token (and staged_name if necessary) should be used instead of local_path. Is there any specific use-cases you're considering?", "author": "ihji", "createdAt": "2020-02-10T20:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MDc3OQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377860779", "bodyText": "One issue here is that the callee may not know if it is on a shared filesystem with the caller (e.g. when calling the expansion service). And when calling two distinct expansion services, one would like to be able to compare between them.\nAlso, perhaps we should not limit ourselves to local paths here, but any path that can be opened with beam filesystems.", "author": "robertwb", "createdAt": "2020-02-11T19:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNjgzOQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379136839", "bodyText": "How about just path and we drop staged_name?\nOR rename ArtifactFilePayload to ArtifactUrlPayload and then users can reference local and remote artifacts?\nUsing a url field which would always have the scheme specified (e.g. local file paths would always have file:// prefix instead of the assumed conversion from /foo/bar to file:///foo/bar", "author": "lukecwik", "createdAt": "2020-02-13T21:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTkyMw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375575923", "bodyText": "s/urn/type?", "author": "robertwb", "createdAt": "2020-02-06T00:00:45Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message ArtifactInformation {\n+  string urn = 1;", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDc2Mg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377314762", "bodyText": "Looks like urn and payload combination is mostly common in beam_runner_api.proto since I couldn't find any other usage of string type =. I think it would be better to follow the same convention here. WDYT?", "author": "ihji", "createdAt": "2020-02-10T21:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjUyOQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375576529", "bodyText": "Seems we also need a staging name and/or role field--for embedded, there's not even a file extension to go off of, and even if we have an extension it may not be unambiguous, e.g. for a .tar.gz file, is it something that should be pip installed, or something that should simply be placed in an accessible location as data.", "author": "robertwb", "createdAt": "2020-02-06T00:02:52Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message ArtifactInformation {\n+  string urn = 1;\n+  bytes payload = 2;\n+  string artifact_id = 3;\n+  string version_range = 4;\n+}", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNTM2Mg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377315362", "bodyText": "Thanks for a good catch. Added staged_name for embedded payload.", "author": "ihji", "createdAt": "2020-02-10T21:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MzUzNg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r377863536", "bodyText": "But we'll need it for more than just embedded payload. And the name itself may not be enough to determine the role (do we try to install all .tar.gz files in Python? Or are some just data?)", "author": "robertwb", "createdAt": "2020-02-11T19:54:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4NzExMw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379087113", "bodyText": "I see your point however I wonder what other options we have. It looks hard to describe all possible roles of a given file as a proto field. Maybe we could just delegate how to interpret a given file name to environments? (for instance, predefined file name for installable .tar.gz package for Python)", "author": "ihji", "createdAt": "2020-02-13T19:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5ODIzNg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379198236", "bodyText": "Role would be an opaque string. (Well, likely a URN, but the runner wouldn't do anything about it.) It would be provided by, and consumed by, the SDK.", "author": "robertwb", "createdAt": "2020-02-14T00:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3NTk2OQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379575969", "bodyText": "Do we really believe we will have a mix and match for \"source\" descriptions and \"destination\" descriptions?", "author": "lukecwik", "createdAt": "2020-02-14T18:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyODAzMA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379628030", "bodyText": "Yes. The .tar.gz is one such example. Another example is that we treat the a manually-specified dev version of apache_beam in a special way (currently it must be named python_dataflow_sdk.tar); it would be better to not have such magic names.\nSDKs can choose to leave it blank, but I'd rather this be explicit than implicit in the name.", "author": "robertwb", "createdAt": "2020-02-14T20:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3ODYyMw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r375578623", "bodyText": "I think we'll need the ability to serve up bytes that don't fit into a proto (e.g. huge jar files). Perhaps this could be yet another type, and a streaming protocol added to the extension service that allows one to retrieve the bytes given a token + environment?", "author": "robertwb", "createdAt": "2020-02-06T00:10:15Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];", "originalCommit": "a2ed105342113d5be8208637d2b2d4b9a4f3c120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA4OTI1NQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379089255", "bodyText": "We could transfer big files via streaming service protocol. Embedded type here is only for files small-enough in a proto size limit.", "author": "ihji", "createdAt": "2020-02-13T20:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3ODYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ3NQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379187475", "bodyText": "Yes, I'm saying that we should have a new type here for that.", "author": "robertwb", "createdAt": "2020-02-14T00:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3ODYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyOTQ5OA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379629498", "bodyText": "We don't have to do that in this PR.", "author": "robertwb", "createdAt": "2020-02-14T20:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3ODYyMw=="}], "type": "inlineReview"}, {"oid": "dee2d8735dfc9ae0ee7af5a7a968f3588b2877ca", "url": "https://github.com/apache/beam/commit/dee2d8735dfc9ae0ee7af5a7a968f3588b2877ca", "message": "[BEAM-9229] Adding dependency information to Environment proto", "committedDate": "2020-02-10T20:36:38Z", "type": "forcePushed"}, {"oid": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "url": "https://github.com/apache/beam/commit/e8c70b6f9e2b385d514fc269120792c12de8fb38", "message": "[BEAM-9229] Adding dependency information to Environment proto", "committedDate": "2020-02-13T19:30:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMjI2MQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379122261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // A URN for Java artifacts hosted on Maven central.\n          \n          \n            \n                // A URN for Java artifacts hosted on a Maven repository.", "author": "lukecwik", "createdAt": "2020-02-13T21:15:07Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on Maven central.", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMTgwMA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379221800", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-02-14T02:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMjI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjM4MA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379126380", "bodyText": "Grab the documentation for valid version strings/ranges from:\nhttps://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm#MAVEN402", "author": "lukecwik", "createdAt": "2020-02-13T21:23:57Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on Maven central.\n+    // payload: MavenPayload\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message PypiPayload {\n+  // Pypi compatible artifact id e.g. \"apache-beam\"\n+  string pypi_artifact_id = 1;\n+\n+  // Pypi compatible version string.\n+  string pypi_version_range = 2;\n+}\n+\n+message MavenPayload {\n+  // Maven compatible group id e.g. \"org.apache.beam\"\n+  string maven_group_id = 1;\n+\n+  // Maven compatible artifact id e.g. \"beam-sdks-java-core\"\n+  string maven_artifact_id = 2;\n+\n+  // Maven compatible version string.", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjgzOQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379126839", "bodyText": "Please add a URL field since a person may want to specify a repository other then maven central and state that if the field is unspecified then maven central is assumed.", "author": "lukecwik", "createdAt": "2020-02-13T21:24:54Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on Maven central.\n+    // payload: MavenPayload\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message PypiPayload {\n+  // Pypi compatible artifact id e.g. \"apache-beam\"\n+  string pypi_artifact_id = 1;\n+\n+  // Pypi compatible version string.\n+  string pypi_version_range = 2;\n+}\n+\n+message MavenPayload {\n+  // Maven compatible group id e.g. \"org.apache.beam\"", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMTc0Nw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379221747", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-02-14T02:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMjQ0OQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379132449", "bodyText": "Note that group/artifact/version isn't enough to fully specify all types of maven artifacts.\nEither use a single string to specify the artifact\ngroupId:artifactId:version[:packaging[:classifier]]\nwhere packaging and classifier are optional and packaging by default is \"jar\" and classifier is omitted if unspecified.\nOr add classifier and type and rename maven_group_id to group_id, maven_artifact_id to artifact_id and maven_version_range to version.", "author": "lukecwik", "createdAt": "2020-02-13T21:37:24Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on Maven central.\n+    // payload: MavenPayload\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message PypiPayload {\n+  // Pypi compatible artifact id e.g. \"apache-beam\"\n+  string pypi_artifact_id = 1;\n+\n+  // Pypi compatible version string.\n+  string pypi_version_range = 2;\n+}\n+\n+message MavenPayload {\n+  // Maven compatible group id e.g. \"org.apache.beam\"\n+  string maven_group_id = 1;", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4Njk5NQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379186995", "bodyText": "If there's a standard string format, let's just use that rather than breaking this up.", "author": "robertwb", "createdAt": "2020-02-14T00:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMjQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjExMg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379222112", "bodyText": "Merged into a single field artifact_specifier which expects the format of groupId:artifactId:version[:packaging[:classifier]]", "author": "ihji", "createdAt": "2020-02-14T02:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMjQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzYyNA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379133624", "bodyText": "nit: Pypi -> PyPI?", "author": "lukecwik", "createdAt": "2020-02-13T21:40:00Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on Maven central.\n+    // payload: MavenPayload\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message PypiPayload {", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMTYwMw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379221603", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-02-14T02:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzc3NA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379133774", "bodyText": "staged_name -> name", "author": "lukecwik", "createdAt": "2020-02-13T21:40:19Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on Maven central.\n+    // payload: MavenPayload\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMTU3Mw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379221573", "bodyText": "Ack.", "author": "ihji", "createdAt": "2020-02-14T02:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDI1MA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379134250", "bodyText": "Should this be an actual path where the user says where in the container this file should live?", "author": "lukecwik", "createdAt": "2020-02-13T21:41:17Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on Maven central.\n+    // payload: MavenPayload\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A generated staged name (no path).", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NjIyMA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379186220", "bodyText": "+1 to allowing (relative) paths to some stagingDir root.", "author": "robertwb", "createdAt": "2020-02-13T23:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjE4MA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379222180", "bodyText": "Ack.", "author": "ihji", "createdAt": "2020-02-14T02:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNzIwOA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379137208", "bodyText": "Not needed it we adopt ArtifactUrlPayload", "author": "lukecwik", "createdAt": "2020-02-13T21:47:40Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,72 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for artifacts described by remote URLs.\n+    // payload: a string for an artifact URL e.g. \"https://.../foo.jar\"\n+    REMOTE     = 2 [(beam_urn) = \"beam:artifact:remote:v1\"];", "originalCommit": "e8c70b6f9e2b385d514fc269120792c12de8fb38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NTk1OQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379185959", "bodyText": "Regarding the file payload, I think we may want to stage this under a different name than its \"real\" name. However, I think the stage name needs to be lifted to a higher level and apply to all artifact types.\nOne reason to keep file separate than URL is that we may want to set the space of files be those understood by (and fetched via) the beam filesystems packages (including remote, non-(public?)-url ones like gcs or aws).", "author": "robertwb", "createdAt": "2020-02-13T23:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzU0MQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379187541", "bodyText": "I would call this one URL rather than REMOTE as most of these are remote.", "author": "robertwb", "createdAt": "2020-02-14T00:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyMjY0NA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379222644", "bodyText": "FILE and REMOTE are merged and renamed to URL.", "author": "ihji", "createdAt": "2020-02-14T02:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNzIwOA=="}], "type": "inlineReview"}, {"oid": "9c5e4b11f2d0fb6a900d36b11ace4db2f2e730b9", "url": "https://github.com/apache/beam/commit/9c5e4b11f2d0fb6a900d36b11ace4db2f2e730b9", "message": "[BEAM-9229] Adding dependency information to Environment proto", "committedDate": "2020-02-14T02:19:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3Mzk0Ng==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379573946", "bodyText": "nit: artifact_specifier -> artifact", "author": "lukecwik", "createdAt": "2020-02-14T18:14:50Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,66 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts described by URLs.\n+    // payload: ArtifactUrlPayload\n+    URL      = 0 [(beam_urn) = \"beam:artifact:url:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 2 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on a Maven repository.\n+    // payload: MavenPayload\n+    MAVEN    = 3 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactUrlPayload {\n+  // a string for an artifact URL e.g. \"https://.../foo.jar\" or \"file:///tmp/foo.jar\"\n+  string path = 1;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A name of the embedded file.\n+  string name = 2;\n+}\n+\n+message PyPIPayload {\n+  // Pypi compatible artifact id e.g. \"apache-beam\"\n+  string artifact_id = 1;\n+\n+  // Pypi compatible version string.\n+  string version = 2;\n+}\n+\n+message MavenPayload {\n+  // A string specifying Maven artifact.\n+  // The standard format is \"groupId:artifactId:version[:packaging[:classifier]]\"\n+  string artifact_specifier = 1;", "originalCommit": "9c5e4b11f2d0fb6a900d36b11ace4db2f2e730b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyNjExMA==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379626110", "bodyText": "Is this powerful enough to designate version ranges?", "author": "robertwb", "createdAt": "2020-02-14T20:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3Mzk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1MjczOQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379652739", "bodyText": "Yes.\nSee: https://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm#MAVEN402", "author": "lukecwik", "createdAt": "2020-02-14T21:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3Mzk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyOTIzNw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379629237", "bodyText": "This is not redundant with the top-level staged_name.", "author": "robertwb", "createdAt": "2020-02-14T20:25:52Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1093,6 +1093,66 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts described by URLs.\n+    // payload: ArtifactUrlPayload\n+    URL      = 0 [(beam_urn) = \"beam:artifact:url:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 2 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on a Maven repository.\n+    // payload: MavenPayload\n+    MAVEN    = 3 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactUrlPayload {\n+  // a string for an artifact URL e.g. \"https://.../foo.jar\" or \"file:///tmp/foo.jar\"\n+  string path = 1;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;\n+\n+  // A name of the embedded file.\n+  string name = 2;", "originalCommit": "9c5e4b11f2d0fb6a900d36b11ace4db2f2e730b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY5NTMwNg==", "url": "https://github.com/apache/beam/pull/10733#discussion_r379695306", "bodyText": "you mean \"now redundant \" ?", "author": "chamikaramj", "createdAt": "2020-02-14T23:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyOTIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwMzAwNw==", "url": "https://github.com/apache/beam/pull/10733#discussion_r381603007", "bodyText": "Yes. We can still delete it now due to the role.", "author": "robertwb", "createdAt": "2020-02-19T23:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyOTIzNw=="}], "type": "inlineReview"}, {"oid": "31e4381a439944ad153a6e9f66406c9d97091e3f", "url": "https://github.com/apache/beam/commit/31e4381a439944ad153a6e9f66406c9d97091e3f", "message": "[BEAM-9229] Adding dependency information to Environment proto", "committedDate": "2020-02-19T22:53:54Z", "type": "forcePushed"}, {"oid": "f3cf3354b7cacfe739677a020c26751e912392db", "url": "https://github.com/apache/beam/commit/f3cf3354b7cacfe739677a020c26751e912392db", "message": "[BEAM-9229] Adding dependency information to Environment proto", "committedDate": "2020-02-19T22:55:08Z", "type": "commit"}, {"oid": "f3cf3354b7cacfe739677a020c26751e912392db", "url": "https://github.com/apache/beam/commit/f3cf3354b7cacfe739677a020c26751e912392db", "message": "[BEAM-9229] Adding dependency information to Environment proto", "committedDate": "2020-02-19T22:55:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxNDQzNQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r381614435", "bodyText": "We could consider just letting the payload be the raw bytes (and similarly for other one-field payloads).", "author": "robertwb", "createdAt": "2020-02-19T23:51:54Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1158,6 +1158,90 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for locally-accessible artifact files.\n+    // payload: ArtifactFilePayload\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:type:file:v1\"];\n+\n+    // A URN for artifacts described by URLs.\n+    // payload: ArtifactUrlPayload\n+    URL      = 1 [(beam_urn) = \"beam:artifact:type:url:v1\"];\n+\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: EmbeddedFilePayload.\n+    EMBEDDED = 2 [(beam_urn) = \"beam:artifact:type:embedded:v1\"];\n+\n+    // A URN for Python artifacts hosted on PYPI.\n+    // payload: PypiPayload\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:type:pypi:v1\"];\n+\n+    // A URN for Java artifacts hosted on a Maven repository.\n+    // payload: MavenPayload\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:type:maven:v1\"];\n+  }\n+  enum Roles {\n+    // A URN for staging-to role.\n+    // payload: ArtifactStagingToRolePayload\n+    STAGING_TO  = 0 [(beam_urn) = \"beam:artifact:role:staging_to:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // a string for an artifact path e.g. \"/tmp/foo.jar\"\n+  string path = 1;\n+\n+  // The hex-encoded sha256 checksum of the artifact.\n+  string sha256 = 2;\n+}\n+\n+message ArtifactUrlPayload {\n+  // a string for an artifact URL e.g. \"https://.../foo.jar\" or \"gs://tmp/foo.jar\"\n+  string path = 1;\n+}\n+\n+message EmbeddedFilePayload {\n+  // raw data bytes for an embedded artifact\n+  bytes data = 1;", "originalCommit": "f3cf3354b7cacfe739677a020c26751e912392db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxNzUwNQ==", "url": "https://github.com/apache/beam/pull/10733#discussion_r381617505", "bodyText": "Done.", "author": "ihji", "createdAt": "2020-02-20T00:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxNDQzNQ=="}], "type": "inlineReview"}, {"oid": "d119cf13e3042b65977d706c1cf1a95fdb239ed2", "url": "https://github.com/apache/beam/commit/d119cf13e3042b65977d706c1cf1a95fdb239ed2", "message": "remove name from EmbeddedFilePayload", "committedDate": "2020-02-20T00:00:44Z", "type": "commit"}]}