{"pr_number": 12509, "pr_title": "[BEAM-9898][BEAM-9899] SnowflakeIO.Write for cross-language with python wrapper and integration test", "pr_createdAt": "2020-08-10T07:15:40Z", "pr_url": "https://github.com/apache/beam/pull/12509", "timeline": [{"oid": "37fca5ae784ea4eb0c027b99211332678fdd15a7", "url": "https://github.com/apache/beam/commit/37fca5ae784ea4eb0c027b99211332678fdd15a7", "message": "[BEAM-9898] Modify Snowflake read cross-language code before adding write, add role and warehouse param to the configuration", "committedDate": "2020-08-07T11:57:49Z", "type": "commit"}, {"oid": "d6f96969c15b000ea7173ac68414a8000c285a01", "url": "https://github.com/apache/beam/commit/d6f96969c15b000ea7173ac68414a8000c285a01", "message": "[BEAM-9898] Add SnowflakeIO.Write external transform registrar", "committedDate": "2020-08-07T12:03:43Z", "type": "commit"}, {"oid": "4159ebefd50858fd48bb3186bdd649f164291607", "url": "https://github.com/apache/beam/commit/4159ebefd50858fd48bb3186bdd649f164291607", "message": "[BEAM-9898] Add python wrapper to Java's SnowflakeIO.Write", "committedDate": "2020-08-07T12:04:36Z", "type": "commit"}, {"oid": "1939e7146249c2b993f36a8cfb5467fd32dc2905", "url": "https://github.com/apache/beam/commit/1939e7146249c2b993f36a8cfb5467fd32dc2905", "message": "[BEAM-9898] Move snowflake.py to apache_beam/io", "committedDate": "2020-08-07T12:04:41Z", "type": "commit"}, {"oid": "9b124cb8a4abb68e0aee860686ef7ea8a50ec79a", "url": "https://github.com/apache/beam/commit/9b124cb8a4abb68e0aee860686ef7ea8a50ec79a", "message": "[BEAM-9899] Add python cross-language integration test for SnowflakeIO transforms", "committedDate": "2020-08-10T07:22:45Z", "type": "forcePushed"}, {"oid": "962d9a6a04a9941bb4fd3e5a60a035ac070220cc", "url": "https://github.com/apache/beam/commit/962d9a6a04a9941bb4fd3e5a60a035ac070220cc", "message": "[BEAM-9899] Add python cross-language integration test for SnowflakeIO transforms", "committedDate": "2020-08-10T10:57:09Z", "type": "forcePushed"}, {"oid": "4e2591a5e26cafd63af7c99f6a24aaa07285d6f3", "url": "https://github.com/apache/beam/commit/4e2591a5e26cafd63af7c99f6a24aaa07285d6f3", "message": "[BEAM-9899] Add python cross-language integration test for SnowflakeIO transforms", "committedDate": "2020-08-10T11:08:33Z", "type": "commit"}, {"oid": "4e2591a5e26cafd63af7c99f6a24aaa07285d6f3", "url": "https://github.com/apache/beam/commit/4e2591a5e26cafd63af7c99f6a24aaa07285d6f3", "message": "[BEAM-9899] Add python cross-language integration test for SnowflakeIO transforms", "committedDate": "2020-08-10T11:08:33Z", "type": "forcePushed"}, {"oid": "661f06263e1b8822770c3b8f734dfebf172282c4", "url": "https://github.com/apache/beam/commit/661f06263e1b8822770c3b8f734dfebf172282c4", "message": "Fix sphinx docs lint", "committedDate": "2020-08-10T15:09:14Z", "type": "commit"}, {"oid": "661f06263e1b8822770c3b8f734dfebf172282c4", "url": "https://github.com/apache/beam/commit/661f06263e1b8822770c3b8f734dfebf172282c4", "message": "Fix sphinx docs lint", "committedDate": "2020-08-10T15:09:14Z", "type": "forcePushed"}, {"oid": "2cd2dd8217425e1ee9e11bc69702fc4960d69a97", "url": "https://github.com/apache/beam/commit/2cd2dd8217425e1ee9e11bc69702fc4960d69a97", "message": "Change VerifyIfContains to VerifyParam", "committedDate": "2020-08-10T15:10:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MTIzNQ==", "url": "https://github.com/apache/beam/pull/12509#discussion_r471881235", "bodyText": "Should we verify the output written here ?", "author": "chamikaramj", "createdAt": "2020-08-18T02:45:11Z", "path": "sdks/python/apache_beam/io/external/xlang_snowflakeio_it_test.py", "diffHunk": "@@ -0,0 +1,269 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"\n+Integration test for cross-language snowflake io operations.\n+\n+Example run:\n+\n+python setup.py nosetests --tests=apache_beam.io.external.snowflake_test \\\n+--test-pipeline-options=\"\n+  --server_name=<SNOWFLAKE_SERVER_NAME>\n+  --username=<SNOWFLAKE_USERNAME>\n+  --password=<SNOWFLAKE_PASSWORD>\n+  --private_key_path=<PATH_TO_PRIVATE_KEY>\n+  --private_key_passphrase=<PASSWORD_TO_PRIVATE_KEY>\n+  --o_auth_token=<TOKEN>\n+  --staging_bucket_name=<GCP_BUCKET_PATH>\n+  --storage_integration_name=<SNOWFLAKE_STORAGE_INTEGRATION_NAME>\n+  --database=<DATABASE>\n+  --schema=<SCHEMA>\n+  --role=<ROLE>\n+  --warehouse=<WAREHOUSE>\n+  --table=<TABLE_NAME>\n+  --runner=FlinkRunner\"\n+\"\"\"\n+\n+# pytype: skip-file\n+\n+from __future__ import absolute_import\n+\n+import argparse\n+import binascii\n+import logging\n+import unittest\n+from typing import ByteString\n+from typing import NamedTuple\n+\n+import apache_beam as beam\n+from apache_beam import coders\n+from apache_beam.io.snowflake import CreateDisposition\n+from apache_beam.io.snowflake import ReadFromSnowflake\n+from apache_beam.io.snowflake import WriteDisposition\n+from apache_beam.io.snowflake import WriteToSnowflake\n+from apache_beam.options.pipeline_options import PipelineOptions\n+from apache_beam.testing.test_pipeline import TestPipeline\n+from apache_beam.testing.util import assert_that\n+from apache_beam.testing.util import equal_to\n+\n+# pylint: disable=wrong-import-order, wrong-import-position, ungrouped-imports\n+try:\n+  from apache_beam.io.gcp.gcsfilesystem import GCSFileSystem\n+except ImportError:\n+  GCSFileSystem = None\n+# pylint: enable=wrong-import-order, wrong-import-position, ungrouped-imports\n+\n+SCHEMA_STRING = \"\"\"\n+{\"schema\":[\n+    {\"dataType\":{\"type\":\"integer\",\"precision\":38,\"scale\":0},\"name\":\"number_column\",\"nullable\":false},\n+    {\"dataType\":{\"type\":\"boolean\"},\"name\":\"boolean_column\",\"nullable\":false},\n+    {\"dataType\":{\"type\":\"binary\",\"size\":100},\"name\":\"bytes_column\",\"nullable\":true}\n+]}\n+\"\"\"\n+\n+TestRow = NamedTuple(\n+    'TestRow',\n+    [\n+        ('number_column', int),\n+        ('boolean_column', bool),\n+        ('bytes_column', ByteString),\n+    ])\n+\n+coders.registry.register_coder(TestRow, coders.RowCoder)\n+\n+NUM_RECORDS = 100\n+\n+\n+@unittest.skipIf(GCSFileSystem is None, 'GCP dependencies are not installed')\n+@unittest.skipIf(\n+    TestPipeline().get_option('server_name') is None,\n+    'Snowflake IT test requires external configuration to be run.')\n+class SnowflakeTest(unittest.TestCase):\n+  def test_snowflake_write_read(self):\n+    self.run_write()\n+    self.run_read()\n+\n+  def run_write(self):\n+    def user_data_mapper(test_row):\n+      return [\n+          str(test_row.number_column).encode('utf-8'),\n+          str(test_row.boolean_column).encode('utf-8'),\n+          binascii.hexlify(test_row.bytes_column),\n+      ]\n+\n+    with TestPipeline(options=PipelineOptions(self.pipeline_args)) as p:\n+      p.not_use_test_runner_api = True\n+      _ = (\n+          p\n+          | 'Impulse' >> beam.Impulse()\n+          | 'Generate' >> beam.FlatMap(lambda x: range(NUM_RECORDS))  # pylint: disable=range-builtin-not-iterating\n+          | 'Map to TestRow' >> beam.Map(\n+              lambda num: TestRow(\n+                  num, num % 2 == 0, b\"test\" + str(num).encode()))\n+          | WriteToSnowflake(", "originalCommit": "2cd2dd8217425e1ee9e11bc69702fc4960d69a97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkzMjA3MQ==", "url": "https://github.com/apache/beam/pull/12509#discussion_r471932071", "bodyText": "I'm not sure what kind of verification could be added here. run_read function verfies the values written here. write_disposition=TRUNCATE means that the table has been recreated before writing to it. But I can be missing something.", "author": "piotr-szuberski", "createdAt": "2020-08-18T05:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MTg2MA==", "url": "https://github.com/apache/beam/pull/12509#discussion_r477081860", "bodyText": "@chamikaramj What are your thoughts?  Would you mind responding to @piotr-szuberski comment? Thanks!", "author": "slawomir-andrian", "createdAt": "2020-08-26T07:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4MTIzNQ=="}], "type": "inlineReview"}]}