{"pr_number": 11925, "pr_title": "[BEAM-9615] Add string coder utility functions.", "pr_createdAt": "2020-06-04T21:13:08Z", "pr_url": "https://github.com/apache/beam/pull/11925", "timeline": [{"oid": "342bc0d9ff41b0eb15d0a56655fefbe66e52465b", "url": "https://github.com/apache/beam/commit/342bc0d9ff41b0eb15d0a56655fefbe66e52465b", "message": "[BEAM-9615] Add string coder utility functions.", "committedDate": "2020-06-04T21:11:06Z", "type": "commit"}, {"oid": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3", "url": "https://github.com/apache/beam/commit/c453fbb34b6fa3db0e6618c91c29a71ad25196d3", "message": "!fixup add license", "committedDate": "2020-06-04T22:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjgxOA==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436016818", "bodyText": "Is the length prefix more than an implementation detail or should this just be named EncodeStringUTF8?", "author": "tysonjh", "createdAt": "2020-06-05T16:01:15Z", "path": "sdks/go/pkg/beam/core/graph/coder/stringutf8.go", "diffHunk": "@@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"io\"\n+\t\"strings\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/ioutilx\"\n+)\n+\n+const bufCap = 64\n+\n+// EncodeStringUTF8LP encodes a UTF string with a length prefix.", "originalCommit": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NjkxMw==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436076913", "bodyText": "It's part of the StringUTF8 so I could remove the explicit call out. However, in Java an python tests for the string encodings, they use those common encodings (which is why we have a separate encoding/decoding tests with the golden values), but those encodings do not include the length prefix.\nI'd rather have the positive inclusion of a length prefix in the name, instead of having the helper method be \"withoutLP\" instead.\nSome of that is from the archaic concept of \"nested\" and \"unnested\" coders which is largely phased out. In practice, if you have a variable amount of data, a length prefix is required.", "author": "lostluck", "createdAt": "2020-06-05T17:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MDcyMg==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436090722", "bodyText": "I removed it. It's part of the beam spec for an encoded UTF8 string, so the call out is not necessary.", "author": "lostluck", "createdAt": "2020-06-05T18:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MDg3NA==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436090874", "bodyText": "Sounds good.", "author": "tysonjh", "createdAt": "2020-06-05T18:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNjgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTE1MQ==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436031151", "bodyText": "Maybe a test that verifies the LP is present in the encoded result and one that verifies a failure on decode when the LP is not present?", "author": "tysonjh", "createdAt": "2020-06-05T16:27:47Z", "path": "sdks/go/pkg/beam/core/graph/coder/stringutf8_test.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package coder\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/base64\"\n+\t\"io\"\n+\t\"strings\"\n+\t\"testing\"\n+\t\"unicode/utf8\"\n+)\n+\n+var testValues = []string{\n+\t\"\",\n+\t\"a\",\n+\t\"13\",\n+\t\"hello\",\n+\t\"a longer string with spaces and all that\",\n+\t\"a string with a \\n newline\",\n+\t\"\u30b9\u30bf\u30ea\u30f3\u30b0\",\n+\t\"I am the very model of a modern major general.\\nI've information animal, vegetable, and mineral\",\n+}\n+\n+// Base64 encoded versions of the above strings, without the length prefix.\n+var testEncodings = []string{\n+\t\"\",\n+\t\"YQ\",\n+\t\"MTM\",\n+\t\"aGVsbG8\",\n+\t\"YSBsb25nZXIgc3RyaW5nIHdpdGggc3BhY2VzIGFuZCBhbGwgdGhhdA\",\n+\t\"YSBzdHJpbmcgd2l0aCBhIAogbmV3bGluZQ\",\n+\t\"44K544K_44Oq44Oz44Kw\",\n+\t\"SSBhbSB0aGUgdmVyeSBtb2RlbCBvZiBhIG1vZGVybiBtYWpvciBnZW5lcmFsLgpJJ3ZlIGluZm9ybWF0aW9uIGFuaW1hbCwgdmVnZXRhYmxlLCBhbmQgbWluZXJhbA\",\n+}\n+\n+// TestLen serves as a verification that string lengths\n+// match their equivalent byte lengths, and not their rune\n+// representation.\n+func TestLen(t *testing.T) {\n+\truneCount := []int{0, 1, 2, 5, 40, 25, 5, 94}\n+\tfor i, s := range testValues {\n+\t\tif got, want := len(s), len([]byte(s)); got != want {\n+\t\t\tt.Errorf(\"string and []byte len do not match. got %v, want %v\", got, want)\n+\t\t}\n+\t\tif got, want := utf8.RuneCountInString(s), runeCount[i]; got != want {\n+\t\t\tt.Errorf(\"Rune count of %q change len do not match. got %v, want %v\", s, got, want)\n+\t\t}\n+\t}\n+}\n+\n+func TestEncodeStringUTF8(t *testing.T) {\n+\tfor i, s := range testValues {\n+\t\ts := s\n+\t\twant := testEncodings[i]\n+\t\tt.Run(s, func(t *testing.T) {\n+\t\t\tvar b strings.Builder\n+\t\t\tbase64enc := base64.NewEncoder(base64.RawURLEncoding, &b)\n+\n+\t\t\tif err := encodeStringUTF8(s, base64enc); err != nil {\n+\t\t\t\tt.Fatal(err)\n+\t\t\t}\n+\t\t\tbase64enc.Close()\n+\t\t\tgot := b.String()\n+\t\t\tif got != want {\n+\t\t\t\tt.Errorf(\"encodeStringUTF8(%q) = %q, want %q\", s, got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestDecodeStringUTF8(t *testing.T) {\n+\tfor i, s := range testEncodings {\n+\t\ts := s\n+\t\twant := testValues[i]\n+\t\tt.Run(want, func(t *testing.T) {\n+\t\t\tb := bytes.NewBufferString(s)\n+\t\t\tbase64dec := base64.NewDecoder(base64.RawURLEncoding, b)\n+\n+\t\t\tgot, err := decodeStringUTF8(int64(len(want)), base64dec)\n+\t\t\tif err != nil && err != io.EOF {\n+\t\t\t\tt.Fatal(err)\n+\t\t\t}\n+\t\t\tif got != want {\n+\t\t\t\tt.Errorf(\"decodeStringUTF8(%q) = %q, want %q\", s, got, want)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n+\n+func TestEncodeDecodeStringUTF8LP(t *testing.T) {\n+\tfor _, s := range testValues {\n+\t\twant := s\n+\t\tt.Run(want, func(t *testing.T) {\n+\t\t\tvar build strings.Builder\n+\t\t\tif err := EncodeStringUTF8LP(want, &build); err != nil {", "originalCommit": "c453fbb34b6fa3db0e6618c91c29a71ad25196d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzIwMg==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436077202", "bodyText": "Technically, this test has the LP verification. If the LP weren't present, it wouldn't be possible to get the result back again on decode since the decoder won't know how much data to read.", "author": "lostluck", "createdAt": "2020-06-05T17:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MTU0Ng==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436091546", "bodyText": "By removing the callout for the LP, it's part of the implementation details. Eg if you expect the next value is a StringUTF8, then it must be length prefixed. This code would only work in that situation.", "author": "lostluck", "createdAt": "2020-06-05T18:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MjMzNw==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436092337", "bodyText": "If the LP part got removed, or unused somehow, in both encode/decode (a stretch to be sure), then this test would pass despite there being no LP. My thought was that since the exposed methods suggest LP as part of the abstraction, it should be explicitly verified to avoid any surprises.\nI'll leave it up to your discretion.", "author": "tysonjh", "createdAt": "2020-06-05T18:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NTA2NQ==", "url": "https://github.com/apache/beam/pull/11925#discussion_r436095065", "bodyText": "That did occur to me as well, but it would fail the moment we run a wordcount since nothing could get decoded properly, and the runner would end up with very strange data under/over reads when it tries to use the initial character encodings as varints. In practice, this is not going to change, and certainly not to remove both length prefixes at the same time.", "author": "lostluck", "createdAt": "2020-06-05T18:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMTE1MQ=="}], "type": "inlineReview"}]}