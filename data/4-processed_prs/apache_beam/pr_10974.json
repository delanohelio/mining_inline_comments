{"pr_number": 10974, "pr_title": "[BEAM-9384] Add SchemaRegistry.getSchemaCoder to get SchemaCoders for registered types", "pr_createdAt": "2020-02-26T07:59:37Z", "pr_url": "https://github.com/apache/beam/pull/10974", "timeline": [{"oid": "afe344ba9c29c0fe9a849001824b3512703bb2dd", "url": "https://github.com/apache/beam/commit/afe344ba9c29c0fe9a849001824b3512703bb2dd", "message": "[BEAM-9384] Add SchemaRegistry.getSchemaCoder to get SchemaCoders for registered types", "committedDate": "2020-02-26T08:03:35Z", "type": "forcePushed"}, {"oid": "e6e4a1103c348c0d9b477f0cee864aba688f9fe3", "url": "https://github.com/apache/beam/commit/e6e4a1103c348c0d9b477f0cee864aba688f9fe3", "message": "[BEAM-9384] Add SchemaRegistry.getSchemaCoder to get SchemaCoders for registered types", "committedDate": "2020-02-26T17:21:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTYwNw==", "url": "https://github.com/apache/beam/pull/10974#discussion_r384645607", "bodyText": "This looks fine, but can you explain the use case? The goal was for users to never have to deal with SchemaCoder (the fact that schemas are implemented via a special coder should be a Beam implementation details), but I'd understand if we have cases where the coder is still needed.", "author": "reuvenlax", "createdAt": "2020-02-26T17:24:20Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/SchemaRegistry.java", "diffHunk": "@@ -288,6 +281,38 @@ public void registerSchemaProvider(SchemaProvider schemaProvider) {\n     return getProviderResult((SchemaProvider p) -> p.fromRowFunction(typeDescriptor));\n   }\n \n+  /**\n+   * Retrieve a {@link SchemaCoder} for a given {@link Class} type. If no schema exists, throws\n+   * {@link * NoSuchSchemaException}.\n+   */\n+  public <T> SchemaCoder<T> getSchemaCoder(Class<T> clazz) throws NoSuchSchemaException {\n+    return getSchemaCoder(TypeDescriptor.of(clazz));\n+  }\n+\n+  /**\n+   * Retrieve a {@link SchemaCoder} for a given {@link TypeDescriptor} type. If no schema exists,\n+   * throws {@link * NoSuchSchemaException}.\n+   */\n+  public <T> SchemaCoder<T> getSchemaCoder(TypeDescriptor<T> typeDescriptor)\n+      throws NoSuchSchemaException {\n+    return SchemaCoder.of(\n+        getSchema(typeDescriptor),\n+        typeDescriptor,\n+        getToRowFunction(typeDescriptor),\n+        getFromRowFunction(typeDescriptor));", "originalCommit": "e6e4a1103c348c0d9b477f0cee864aba688f9fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0ODY0Mg==", "url": "https://github.com/apache/beam/pull/10974#discussion_r384648642", "bodyText": "See #10978 for a concrete case. PTransform authors may benefit of being able to infer a SchemaCoder for a given type from the SchemaRegistry.\nWe can even add that too to PubsubIO to read JavaBeans and be able to query them with Beam's SQL.", "author": "iemejia", "createdAt": "2020-02-26T17:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDI5OQ==", "url": "https://github.com/apache/beam/pull/10974#discussion_r384960299", "bodyText": "I agree with you in the fact that SchemaCoder is an internal detail that regular users (authors of Pipelines) should not care about. I felt tempted to mark this method as @Internal however PTransform authors (e.g. IO authors) will find this useful (as I did for the PR I mention above for KafkaIO schema support), so probably worth to let it available, also I cannot think of a better place to put this method than here.", "author": "iemejia", "createdAt": "2020-02-27T07:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzODg3Mg==", "url": "https://github.com/apache/beam/pull/10974#discussion_r386038872", "bodyText": "It's useful when integrating schema code with code that does not yet understand schemas.\nIn the KafkaIO example I think that the ideal solution would be to allow a Schema on KafkaRecord (this probably requires us to add Java generic type awareness to schema inference though), in which case they keyCoder and valueCoder isn't needed. I agree that allowing easy inference of SchemaCoder allows for lower-effort integration of schemas in code like this, though hopefully this is just a short-term solution.", "author": "reuvenlax", "createdAt": "2020-02-29T16:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4MDQ3Ng==", "url": "https://github.com/apache/beam/pull/10974#discussion_r386080476", "bodyText": "Interesting. I have not thought about making KafkaRecord 'schema' like good point. There are some consequences on that that are still not clear to me (like how will we deal with the runtime resolution part of Schemas for KV that we do now with the Confluent Schema Registry support. I am going to give it a try and ping you once I have something in the other PR #10978. Let's continue that discussion there.", "author": "iemejia", "createdAt": "2020-03-01T06:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0NTYwNw=="}], "type": "inlineReview"}, {"oid": "17d8c1005066721dcfc2bd8ac95b60702b8f50a6", "url": "https://github.com/apache/beam/commit/17d8c1005066721dcfc2bd8ac95b60702b8f50a6", "message": "[BEAM-9384] Add SchemaRegistry.getSchemaCoder to get SchemaCoders for registered types", "committedDate": "2020-02-27T09:37:52Z", "type": "forcePushed"}, {"oid": "612d3d1f213155c2df89ff5172343a23a0268cf9", "url": "https://github.com/apache/beam/commit/612d3d1f213155c2df89ff5172343a23a0268cf9", "message": "[BEAM-9384] Add SchemaRegistry.getSchemaCoder to get SchemaCoders for registered types", "committedDate": "2020-02-27T14:57:27Z", "type": "commit"}, {"oid": "612d3d1f213155c2df89ff5172343a23a0268cf9", "url": "https://github.com/apache/beam/commit/612d3d1f213155c2df89ff5172343a23a0268cf9", "message": "[BEAM-9384] Add SchemaRegistry.getSchemaCoder to get SchemaCoders for registered types", "committedDate": "2020-02-27T14:57:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2OTI5NQ==", "url": "https://github.com/apache/beam/pull/10974#discussion_r385169295", "bodyText": "This change is required because we should not be exposing Guava (even our own vendored version) in the public API and it was surfaced by a GcpCoreApiSurfaceTest break", "author": "iemejia", "createdAt": "2020-02-27T14:59:31Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/SchemaCoder.java", "diffHunk": "@@ -59,7 +60,7 @@\n @Experimental(Kind.SCHEMAS)\n public class SchemaCoder<T> extends CustomCoder<T> {\n   // This contains a map of primitive types to their coders.\n-  public static final ImmutableMap<TypeName, Coder> CODER_MAP =\n+  public static final Map<TypeName, Coder> CODER_MAP =", "originalCommit": "612d3d1f213155c2df89ff5172343a23a0268cf9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}