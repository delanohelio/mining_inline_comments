{"pr_number": 12674, "pr_title": "[BEAM-8258] basic metric feature for nexmark", "pr_createdAt": "2020-08-24T19:27:07Z", "pr_url": "https://github.com/apache/beam/pull/12674", "timeline": [{"oid": "bb9f2aa04a6bc1f0f0ed09f08ffb311873832806", "url": "https://github.com/apache/beam/commit/bb9f2aa04a6bc1f0f0ed09f08ffb311873832806", "message": "add metric feature to output the performance of pipeline", "committedDate": "2020-08-24T19:21:36Z", "type": "commit"}, {"oid": "8c7eeb5362bb6e4c8acb5f3acbfa98450e5c37b1", "url": "https://github.com/apache/beam/commit/8c7eeb5362bb6e4c8acb5f3acbfa98450e5c37b1", "message": "changes for formatting and 2.7 compatability", "committedDate": "2020-08-24T19:35:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3MTAyMg==", "url": "https://github.com/apache/beam/pull/12674#discussion_r475871022", "bodyText": "Add a documentation on the parameters and the monitored metrics.", "author": "y1chi", "createdAt": "2020-08-24T20:21:35Z", "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/monitor.py", "diffHunk": "@@ -0,0 +1,48 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+from time import time\n+\n+import apache_beam as beam\n+from apache_beam.metrics import Metrics\n+from apache_beam.testing.benchmarks.nexmark.nexmark_util import MonitorSuffix\n+\n+\n+class Monitor(object):", "originalCommit": "8c7eeb5362bb6e4c8acb5f3acbfa98450e5c37b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3MTQ0Nw==", "url": "https://github.com/apache/beam/pull/12674#discussion_r475871447", "bodyText": "can we put this into Monitor class", "author": "y1chi", "createdAt": "2020-08-24T20:22:20Z", "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/nexmark_util.py", "diffHunk": "@@ -192,6 +194,11 @@ def expand(self, pcoll):\n         | \"Log\" >> beam.Map(log_count_info))\n \n \n+class MonitorSuffix:", "originalCommit": "8c7eeb5362bb6e4c8acb5f3acbfa98450e5c37b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3MzY0OA==", "url": "https://github.com/apache/beam/pull/12674#discussion_r475873648", "bodyText": "ValueError is normally used to say the function argument being passed is invalid, I think we can use RuntimeError instead.", "author": "y1chi", "createdAt": "2020-08-24T20:26:32Z", "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/nexmark_util.py", "diffHunk": "@@ -221,5 +228,34 @@ def unnest_to_json(cand):\n \n \n def millis_to_timestamp(millis):\n+  # type: (int) -> Timestamp\n   micro_second = millis * 1000\n   return Timestamp(micros=micro_second)\n+\n+\n+def get_counter_metric(result, namespace, name):\n+  # type: (PipelineResult, str, str) -> int\n+  metrics = result.metrics().query(\n+      MetricsFilter().with_namespace(namespace).with_name(name))\n+  counters = metrics['counters']\n+  if len(counters) > 1:\n+    raise ValueError(", "originalCommit": "8c7eeb5362bb6e4c8acb5f3acbfa98450e5c37b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0MDg3NQ==", "url": "https://github.com/apache/beam/pull/12674#discussion_r475940875", "bodyText": "thanks!!", "author": "leiyiz", "createdAt": "2020-08-24T23:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg3MzY0OA=="}], "type": "inlineReview"}, {"oid": "0668d464a223a27c0c3a84384cca9866da9187ca", "url": "https://github.com/apache/beam/commit/0668d464a223a27c0c3a84384cca9866da9187ca", "message": "code review issue resolve", "committedDate": "2020-08-24T23:01:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0NzkwMg==", "url": "https://github.com/apache/beam/pull/12674#discussion_r476747902", "bodyText": "The reason we collect the event_time metric is to know the start and end time of certain processing, right? If so, we only care about the beginning, and the end, right?\nUpdating metrics are a bit of a slow operation to perform (not incredibly slow, but since this DoFn does nothing else), I think it may be a good idea to perform these updates in finish_bundle and start_bundle (for event_time, update only when the bundle started and ended, and for event_count, you can keep a member variable that counts the number of elements per bundle\ne.g.:\nstart_bundle(self):\n  self.element_counter = 0\n  self.event_time.update(now)\nprocess(self, elm):\n  self.element_counter += 1\n  yield elm\nfinish_bundle(self):\n  self.event_time.update(now)\n  self.element_count.inc(self.element_counter)\n\nwdyt?", "author": "pabloem", "createdAt": "2020-08-25T21:23:45Z", "path": "sdks/python/apache_beam/testing/benchmarks/nexmark/monitor.py", "diffHunk": "@@ -0,0 +1,59 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+from time import time\n+\n+import apache_beam as beam\n+from apache_beam.metrics import Metrics\n+\n+\n+class Monitor(object):\n+  \"\"\"\n+  A monitor of elements with support for later retrieving their metrics\n+\n+  monitor objects contains a doFn to record metrics\n+\n+  Args:\n+    namespace: the namespace all metrics within this Monitor uses\n+    name_prefix: a prefix for this Monitor's metrics' names, intended to\n+      be unique in per-monitor basis in pipeline\n+  \"\"\"\n+  def __init__(self, namespace, name_prefix):\n+    # type: (str, str) -> None\n+    self.namespace = namespace\n+    self.name_prefix = name_prefix\n+    self.doFn = MonitorDoFn(namespace, name_prefix)\n+\n+\n+class MonitorDoFn(beam.DoFn):\n+  def __init__(self, namespace, prefix):\n+    self.element_count = Metrics.counter(\n+        namespace, prefix + MonitorSuffix.ELEMENT_COUNTER)\n+    self.event_time = Metrics.distribution(\n+        namespace, prefix + MonitorSuffix.EVENT_TIME)\n+\n+  def process(self, element):\n+    self.element_count.inc()\n+    self.event_time.update(int(time() * 1000))\n+    yield element", "originalCommit": "0668d464a223a27c0c3a84384cca9866da9187ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4OTY0OA==", "url": "https://github.com/apache/beam/pull/12674#discussion_r477489648", "bodyText": "Yeah I think this makes sense, but I think I would need to keep updating some metric in the process method because I made a new metric for logging the timestamp of the events other than the now() metric", "author": "leiyiz", "createdAt": "2020-08-26T18:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0NzkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0Mzk4Mw==", "url": "https://github.com/apache/beam/pull/12674#discussion_r477643983", "bodyText": "I see. In that case, I think then there's not a big gain from using start_bundle and finish_bundle. I'll just approve it for now.", "author": "pabloem", "createdAt": "2020-08-26T23:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0NzkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NjY1Nw==", "url": "https://github.com/apache/beam/pull/12674#discussion_r477646657", "bodyText": "It is a bit confusing between self.event_time and self.event_timestamp,  I thought the timestamp was for debugging purpose that should be removed once it's not needed?", "author": "y1chi", "createdAt": "2020-08-26T23:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0NzkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMjcxNw==", "url": "https://github.com/apache/beam/pull/12674#discussion_r478732717", "bodyText": "@leiyiz thoughts?", "author": "pabloem", "createdAt": "2020-08-27T22:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0NzkwMg=="}], "type": "inlineReview"}, {"oid": "f7a7ca79bdf196ef9970ab2b7ba6bc5e1fedfb19", "url": "https://github.com/apache/beam/commit/f7a7ca79bdf196ef9970ab2b7ba6bc5e1fedfb19", "message": "put wall-clock recording into start and finish of bundle", "committedDate": "2020-08-26T22:13:32Z", "type": "commit"}]}