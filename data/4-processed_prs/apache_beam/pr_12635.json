{"pr_number": 12635, "pr_title": "[BEAM-9919] Isolating xlang transforms by namespace", "pr_createdAt": "2020-08-19T21:29:13Z", "pr_url": "https://github.com/apache/beam/pull/12635", "timeline": [{"oid": "9620d6250c5d7f9e20599af9a1bff4da7dc142ee", "url": "https://github.com/apache/beam/commit/9620d6250c5d7f9e20599af9a1bff4da7dc142ee", "message": "[BEAM-9919] xlang transforms wrapped with namespaces", "committedDate": "2020-08-19T22:56:50Z", "type": "commit"}, {"oid": "9620d6250c5d7f9e20599af9a1bff4da7dc142ee", "url": "https://github.com/apache/beam/commit/9620d6250c5d7f9e20599af9a1bff4da7dc142ee", "message": "[BEAM-9919] xlang transforms wrapped with namespaces", "committedDate": "2020-08-19T22:56:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxMzExMA==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473413110", "bodyText": "Slices are always passed by reference, so this is overwriting the coder lists in the extracted coder. You would need to create a n new slice, and append values to that and  then overwrite the existing one in coder.\nupdatedComponentCoderIDs := append(nil, coder.ComponentCoderIds...)\nThat should create a new slice with the same elements.", "author": "lostluck", "createdAt": "2020-08-19T23:02:32Z", "path": "sdks/go/pkg/beam/core/runtime/xlangx/namespace.go", "diffHunk": "@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for Additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package xlangx\n+\n+import (\n+\t\"fmt\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+)\n+\n+func AddCoderID(c *pipepb.Components, idMap map[string]string, cid string, newID func(string) string) string {\n+\tif _, exists := idMap[cid]; exists {\n+\t\treturn idMap[cid]\n+\t}\n+\n+\tcoder, exists := c.Coders[cid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing coder id: %v not in %v\", cid, c.Coders))\n+\t}\n+\n+\t// Updating ComponentCoderIDs of Coder\n+\tif coder.GetComponentCoderIds() != nil {\n+\t\tupdatedComponentCoderIDs := coder.ComponentCoderIds // Pass by value", "originalCommit": "f7d3945a25c93893ccf8bf5f4dab40eda3e395a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNjQ0OA==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473436448", "bodyText": "Ack. Updated!", "author": "pskevin", "createdAt": "2020-08-19T23:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxMzExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxNjU5Mg==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473416592", "bodyText": "Should this assignment be outside the loop?\nThis is saying after each element in coder.ComponentCoderIds, reset the ComponentCoderIds to this new updated version.", "author": "lostluck", "createdAt": "2020-08-19T23:07:19Z", "path": "sdks/go/pkg/beam/core/runtime/xlangx/namespace.go", "diffHunk": "@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for Additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package xlangx\n+\n+import (\n+\t\"fmt\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+)\n+\n+func AddCoderID(c *pipepb.Components, idMap map[string]string, cid string, newID func(string) string) string {\n+\tif _, exists := idMap[cid]; exists {\n+\t\treturn idMap[cid]\n+\t}\n+\n+\tcoder, exists := c.Coders[cid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing coder id: %v not in %v\", cid, c.Coders))\n+\t}\n+\n+\t// Updating ComponentCoderIDs of Coder\n+\tif coder.GetComponentCoderIds() != nil {\n+\t\tupdatedComponentCoderIDs := coder.ComponentCoderIds // Pass by value\n+\t\tfor i, ccid := range coder.ComponentCoderIds {\n+\t\t\tupdatedComponentCoderIDs[i] = AddCoderID(c, idMap, ccid, newID)\n+\t\t\tcoder.ComponentCoderIds = updatedComponentCoderIDs", "originalCommit": "9620d6250c5d7f9e20599af9a1bff4da7dc142ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNjU2MQ==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473436561", "bodyText": "Ack. Updated!", "author": "pskevin", "createdAt": "2020-08-19T23:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxNjU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxODU4OA==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473418588", "bodyText": "leftover Debug printout", "author": "lostluck", "createdAt": "2020-08-19T23:10:07Z", "path": "sdks/go/pkg/beam/core/runtime/xlangx/namespace.go", "diffHunk": "@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for Additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package xlangx\n+\n+import (\n+\t\"fmt\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+)\n+\n+func AddCoderID(c *pipepb.Components, idMap map[string]string, cid string, newID func(string) string) string {\n+\tif _, exists := idMap[cid]; exists {\n+\t\treturn idMap[cid]\n+\t}\n+\n+\tcoder, exists := c.Coders[cid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing coder id: %v not in %v\", cid, c.Coders))\n+\t}\n+\n+\t// Updating ComponentCoderIDs of Coder\n+\tif coder.GetComponentCoderIds() != nil {\n+\t\tupdatedComponentCoderIDs := coder.ComponentCoderIds // Pass by value\n+\t\tfor i, ccid := range coder.ComponentCoderIds {\n+\t\t\tupdatedComponentCoderIDs[i] = AddCoderID(c, idMap, ccid, newID)\n+\t\t\tcoder.ComponentCoderIds = updatedComponentCoderIDs\n+\t\t}\n+\t}\n+\n+\tidMap[cid] = newID(cid)\n+\n+\t// Updating Coders map\n+\tc.Coders[idMap[cid]] = coder\n+\tdelete(c.Coders, cid)\n+\n+\treturn idMap[cid]\n+}\n+\n+func AddWindowingStrategyID(c *pipepb.Components, idMap map[string]string, wid string, newID func(string) string) string {\n+\tif _, exists := idMap[wid]; exists {\n+\t\treturn idMap[wid]\n+\t}\n+\n+\twindowingStrategy, exists := c.WindowingStrategies[wid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing windowing strategy id: %v not in %v\", wid, c.WindowingStrategies))\n+\t}\n+\n+\t// Updating WindowCoderID of WindowingStrategy\n+\tif windowingStrategy.WindowCoderId != \"\" {\n+\t\twindowingStrategy.WindowCoderId = AddCoderID(c, idMap, windowingStrategy.WindowCoderId, newID)\n+\t}\n+\n+\t// Updating EnvironmentId of WindowingStrategy\n+\tif windowingStrategy.EnvironmentId != \"\" {\n+\t\twindowingStrategy.EnvironmentId = AddEnvironmentID(c, idMap, windowingStrategy.EnvironmentId, newID)\n+\t}\n+\n+\tidMap[wid] = newID(wid)\n+\n+\t// Updating WindowingStrategies map\n+\tc.WindowingStrategies[idMap[wid]] = windowingStrategy\n+\tdelete(c.WindowingStrategies, wid)\n+\n+\treturn idMap[wid]\n+}\n+\n+func AddEnvironmentID(c *pipepb.Components, idMap map[string]string, eid string, newID func(string) string) string {\n+\tif _, exists := idMap[eid]; exists {\n+\t\treturn idMap[eid]\n+\t}\n+\n+\tenvironment, exists := c.Environments[eid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing windowing strategy id: %v not in %v\", eid, c.Environments))\n+\t}\n+\n+\tidMap[eid] = newID(eid)\n+\n+\t// Updating Environments map\n+\tc.Environments[idMap[eid]] = environment\n+\tdelete(c.Environments, eid)\n+\n+\treturn idMap[eid]\n+}\n+\n+func AddNamespace(t *pipepb.PTransform, c *pipepb.Components, namespace string) {\n+\tnewID := func(id string) string {\n+\t\treturn fmt.Sprintf(\"%v@%v\", id, namespace)\n+\t}\n+\n+\tidMap := make(map[string]string)\n+\n+\tupdateCoderID := func(cid string) string {\n+\t\treturn AddCoderID(c, idMap, cid, newID)\n+\t}\n+\n+\tupdateWindowingStrategyID := func(wid string) string {\n+\t\treturn AddWindowingStrategyID(c, idMap, wid, newID)\n+\t}\n+\n+\tupdateEnvironmentID := func(eid string) string {\n+\t\treturn AddEnvironmentID(c, idMap, eid, newID)\n+\t}\n+\n+\t// Update Environment ID of PTransform\n+\tif t.EnvironmentId != \"\" {\n+\t\tt.EnvironmentId = updateEnvironmentID(t.EnvironmentId)\n+\t}\n+\tfmt.Println(t)", "originalCommit": "9620d6250c5d7f9e20599af9a1bff4da7dc142ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNjcwNw==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473436707", "bodyText": "Sorry about that. Removed it.", "author": "pskevin", "createdAt": "2020-08-19T23:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxODU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyMDI2OQ==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473420269", "bodyText": "Remove these helpers, and call the functions directly in the loop below please. They're only used once each, and you do not modify any of their parameters, making the closures less useful, and harder to read.", "author": "lostluck", "createdAt": "2020-08-19T23:12:36Z", "path": "sdks/go/pkg/beam/core/runtime/xlangx/namespace.go", "diffHunk": "@@ -0,0 +1,136 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for Additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package xlangx\n+\n+import (\n+\t\"fmt\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/internal/errors\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+)\n+\n+func AddCoderID(c *pipepb.Components, idMap map[string]string, cid string, newID func(string) string) string {\n+\tif _, exists := idMap[cid]; exists {\n+\t\treturn idMap[cid]\n+\t}\n+\n+\tcoder, exists := c.Coders[cid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing coder id: %v not in %v\", cid, c.Coders))\n+\t}\n+\n+\t// Updating ComponentCoderIDs of Coder\n+\tif coder.GetComponentCoderIds() != nil {\n+\t\tupdatedComponentCoderIDs := coder.ComponentCoderIds // Pass by value\n+\t\tfor i, ccid := range coder.ComponentCoderIds {\n+\t\t\tupdatedComponentCoderIDs[i] = AddCoderID(c, idMap, ccid, newID)\n+\t\t\tcoder.ComponentCoderIds = updatedComponentCoderIDs\n+\t\t}\n+\t}\n+\n+\tidMap[cid] = newID(cid)\n+\n+\t// Updating Coders map\n+\tc.Coders[idMap[cid]] = coder\n+\tdelete(c.Coders, cid)\n+\n+\treturn idMap[cid]\n+}\n+\n+func AddWindowingStrategyID(c *pipepb.Components, idMap map[string]string, wid string, newID func(string) string) string {\n+\tif _, exists := idMap[wid]; exists {\n+\t\treturn idMap[wid]\n+\t}\n+\n+\twindowingStrategy, exists := c.WindowingStrategies[wid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing windowing strategy id: %v not in %v\", wid, c.WindowingStrategies))\n+\t}\n+\n+\t// Updating WindowCoderID of WindowingStrategy\n+\tif windowingStrategy.WindowCoderId != \"\" {\n+\t\twindowingStrategy.WindowCoderId = AddCoderID(c, idMap, windowingStrategy.WindowCoderId, newID)\n+\t}\n+\n+\t// Updating EnvironmentId of WindowingStrategy\n+\tif windowingStrategy.EnvironmentId != \"\" {\n+\t\twindowingStrategy.EnvironmentId = AddEnvironmentID(c, idMap, windowingStrategy.EnvironmentId, newID)\n+\t}\n+\n+\tidMap[wid] = newID(wid)\n+\n+\t// Updating WindowingStrategies map\n+\tc.WindowingStrategies[idMap[wid]] = windowingStrategy\n+\tdelete(c.WindowingStrategies, wid)\n+\n+\treturn idMap[wid]\n+}\n+\n+func AddEnvironmentID(c *pipepb.Components, idMap map[string]string, eid string, newID func(string) string) string {\n+\tif _, exists := idMap[eid]; exists {\n+\t\treturn idMap[eid]\n+\t}\n+\n+\tenvironment, exists := c.Environments[eid]\n+\tif !exists {\n+\t\tpanic(errors.Errorf(\"attempted to add namespace to missing windowing strategy id: %v not in %v\", eid, c.Environments))\n+\t}\n+\n+\tidMap[eid] = newID(eid)\n+\n+\t// Updating Environments map\n+\tc.Environments[idMap[eid]] = environment\n+\tdelete(c.Environments, eid)\n+\n+\treturn idMap[eid]\n+}\n+\n+func AddNamespace(t *pipepb.PTransform, c *pipepb.Components, namespace string) {\n+\tnewID := func(id string) string {\n+\t\treturn fmt.Sprintf(\"%v@%v\", id, namespace)\n+\t}\n+\n+\tidMap := make(map[string]string)\n+\n+\tupdateCoderID := func(cid string) string {\n+\t\treturn AddCoderID(c, idMap, cid, newID)\n+\t}\n+\n+\tupdateWindowingStrategyID := func(wid string) string {\n+\t\treturn AddWindowingStrategyID(c, idMap, wid, newID)\n+\t}\n+\n+\tupdateEnvironmentID := func(eid string) string {\n+\t\treturn AddEnvironmentID(c, idMap, eid, newID)\n+\t}", "originalCommit": "9620d6250c5d7f9e20599af9a1bff4da7dc142ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNjkzNQ==", "url": "https://github.com/apache/beam/pull/12635#discussion_r473436935", "bodyText": "Makes sense. Removed it!", "author": "pskevin", "createdAt": "2020-08-19T23:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQyMDI2OQ=="}], "type": "inlineReview"}, {"oid": "63f9808215161a3b9636556a72fec2ecaf2332a8", "url": "https://github.com/apache/beam/commit/63f9808215161a3b9636556a72fec2ecaf2332a8", "message": "[BEAM-9919] cleaning namespace.go", "committedDate": "2020-08-19T23:34:51Z", "type": "commit"}]}