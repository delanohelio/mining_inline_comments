{"pr_number": 12241, "pr_title": "[BEAM-10420] Fix minor race condition related to splitting that will cause None has no method 'yyy'", "pr_createdAt": "2020-07-13T18:18:54Z", "pr_url": "https://github.com/apache/beam/pull/12241", "timeline": [{"oid": "3af0252e5f41372ffaa3cf5e8c26d953ca9f2efc", "url": "https://github.com/apache/beam/commit/3af0252e5f41372ffaa3cf5e8c26d953ca9f2efc", "message": "[BEAM-10420] Fix minor race condition related to splitting that will cause None has no method 'yyy'\n\nThis will be important to have this lock when splitting/getting progress for window observing splittable DoFns.", "committedDate": "2020-07-13T18:09:12Z", "type": "commit"}, {"oid": "79b5bfb5e9afcfea6ee2663a7d690b44e3f0aa60", "url": "https://github.com/apache/beam/commit/79b5bfb5e9afcfea6ee2663a7d690b44e3f0aa60", "message": "fixup! Make sure that splitting_lock is defined for cython also fix possible self doesn't have splitting_lock in try_split", "committedDate": "2020-07-13T19:31:22Z", "type": "commit"}, {"oid": "79b5bfb5e9afcfea6ee2663a7d690b44e3f0aa60", "url": "https://github.com/apache/beam/commit/79b5bfb5e9afcfea6ee2663a7d690b44e3f0aa60", "message": "fixup! Make sure that splitting_lock is defined for cython also fix possible self doesn't have splitting_lock in try_split", "committedDate": "2020-07-13T19:31:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDkwNA==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454504904", "bodyText": "Are you trying to deep-copy current_windowed_value, threadsafe_restriction_tracker  and threadsafe_watermark_estimator ? If so, we need to do it explicitly copy.deepcopy.", "author": "boyuanzz", "createdAt": "2020-07-14T16:59:51Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -842,29 +847,37 @@ def _invoke_process_per_window(self,\n \n   def try_split(self, fraction):\n     # type: (...) -> Optional[Tuple[SplitResultPrimary, SplitResultResidual]]\n-    if self.threadsafe_restriction_tracker and self.current_windowed_value:\n+    if not self.is_splittable:\n+      return None\n+\n+    with self.splitting_lock:\n+      # Make a local reference to member variables that change references during\n+      # processing under lock before attempting to split so we have a consistent\n+      # view of all the references.\n+      current_windowed_value = self.current_windowed_value", "originalCommit": "79b5bfb5e9afcfea6ee2663a7d690b44e3f0aa60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMDMxMA==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454510310", "bodyText": "I think I misunderstood the logic here, deep-copy is incorrect. So within the lock, why do we need to keep a local reference?", "author": "boyuanzz", "createdAt": "2020-07-14T17:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODU3MQ==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454518571", "bodyText": "The purpose of the lock is to get a consistent point in time copy of the references to the current objects.\nWe don't need a deep copy. Splitting will fail if the restriction becomes finished and the main processing loop moves onto the next element.", "author": "lukecwik", "createdAt": "2020-07-14T17:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyNTYwOQ==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454525609", "bodyText": "Any reason that local references are need here, even within the lock?", "author": "boyuanzz", "createdAt": "2020-07-14T17:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMjEwMA==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454532100", "bodyText": "The lock ends before the if since the if indentation level is not at the same level as with lock statement.", "author": "lukecwik", "createdAt": "2020-07-14T17:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNDkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNTcwMg==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454505702", "bodyText": "Would it be better to both check threadsafe_restriction_tracker  and threadsafe_watermark_estimator for easy reading?", "author": "boyuanzz", "createdAt": "2020-07-14T17:01:06Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -842,29 +847,37 @@ def _invoke_process_per_window(self,\n \n   def try_split(self, fraction):\n     # type: (...) -> Optional[Tuple[SplitResultPrimary, SplitResultResidual]]\n-    if self.threadsafe_restriction_tracker and self.current_windowed_value:\n+    if not self.is_splittable:\n+      return None\n+\n+    with self.splitting_lock:\n+      # Make a local reference to member variables that change references during\n+      # processing under lock before attempting to split so we have a consistent\n+      # view of all the references.\n+      current_windowed_value = self.current_windowed_value\n+      threadsafe_restriction_tracker = self.threadsafe_restriction_tracker\n+      threadsafe_watermark_estimator = self.threadsafe_watermark_estimator\n+\n+    if threadsafe_restriction_tracker:", "originalCommit": "79b5bfb5e9afcfea6ee2663a7d690b44e3f0aa60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODU1Mw==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454518553", "bodyText": "There is an assumption that if one is set then the other is set. Similarly, if one is unset then the other is unset.", "author": "lukecwik", "createdAt": "2020-07-14T17:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUyODU5Ng==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454528596", "bodyText": "I would add a comment above to state the assumption. But it's minor though.", "author": "boyuanzz", "createdAt": "2020-07-14T17:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMjg3NQ==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454532875", "bodyText": "I have a much larger rewrite here to support per window invocation where this will become a non-issue so I'll pass on this since we will need to hold the lock for the entire split call.", "author": "lukecwik", "createdAt": "2020-07-14T17:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNzIwMA==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454507200", "bodyText": "If we are deep copying objects, it seems like we can use the lock to guard the copying logic only, instead of the entire split logic.", "author": "boyuanzz", "createdAt": "2020-07-14T17:03:44Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -842,29 +847,37 @@ def _invoke_process_per_window(self,\n \n   def try_split(self, fraction):\n     # type: (...) -> Optional[Tuple[SplitResultPrimary, SplitResultResidual]]\n-    if self.threadsafe_restriction_tracker and self.current_windowed_value:\n+    if not self.is_splittable:\n+      return None\n+\n+    with self.splitting_lock:", "originalCommit": "79b5bfb5e9afcfea6ee2663a7d690b44e3f0aa60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxODcxNw==", "url": "https://github.com/apache/beam/pull/12241#discussion_r454518717", "bodyText": "Not deep copying objects.", "author": "lukecwik", "createdAt": "2020-07-14T17:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNzIwMA=="}], "type": "inlineReview"}]}