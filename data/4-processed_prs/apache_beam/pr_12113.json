{"pr_number": 12113, "pr_title": "Add Branching to Go SDK katas", "pr_createdAt": "2020-06-28T02:31:52Z", "pr_url": "https://github.com/apache/beam/pull/12113", "timeline": [{"oid": "0aaa77ceed03198f6a759a5ad3096b7c1eaba62b", "url": "https://github.com/apache/beam/commit/0aaa77ceed03198f6a759a5ad3096b7c1eaba62b", "message": "Add Branching to Go SDK katas", "committedDate": "2020-06-28T02:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MDI5Ng==", "url": "https://github.com/apache/beam/pull/12113#discussion_r446880296", "bodyText": "As this is trivial, I think we can let the learner to come up with the logic.\nMaybe we can remove this?", "author": "henryken", "createdAt": "2020-06-29T09:44:40Z", "path": "learning/katas/go/Core Transforms/Branching/Branching/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"strings\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) (reversed, toUpper beam.PCollection) {\n+\treversed = reverseString(s, input)\n+\ttoUpper = toUpperString(s, input)\n+\treturn\n+}\n+\n+func reverseString(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.ParDo(s, func(element string) string {\n+\t\treturn reverseFn(element)\n+\t}, input)\n+}\n+\n+func toUpperString(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.ParDo(s, func(element string) string {\n+\t\treturn toUpperFn(element)\n+\t}, input)\n+}\n+\n+func reverseFn(s string) string {\n+\trunes := []rune(s)\n+\tn := len(s)\n+\ti := -1\n+\tfor {\n+\t\tn--\n+\t\ti++\n+\t\tif n <= i {\n+\t\t\tbreak\n+\t\t}\n+\t\trunes[i], runes[n] = runes[n], runes[i]\n+\t}\n+\treturn string(runes)\n+}\n+\n+func toUpperFn(s string) string {", "originalCommit": "0aaa77ceed03198f6a759a5ad3096b7c1eaba62b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MDg3MA==", "url": "https://github.com/apache/beam/pull/12113#discussion_r446880870", "bodyText": "Would the following be better understood?\nfunc reverse(s string) string { \n    runes := []rune(s)\n\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 { \n        runes[i], runes[j] = runes[j], runes[i] \n    } \n\n    return string(runes) \n}", "author": "henryken", "createdAt": "2020-06-29T09:46:36Z", "path": "learning/katas/go/Core Transforms/Branching/Branching/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"strings\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) (reversed, toUpper beam.PCollection) {\n+\treversed = reverseString(s, input)\n+\ttoUpper = toUpperString(s, input)\n+\treturn\n+}\n+\n+func reverseString(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.ParDo(s, func(element string) string {\n+\t\treturn reverseFn(element)\n+\t}, input)\n+}\n+\n+func toUpperString(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.ParDo(s, func(element string) string {\n+\t\treturn toUpperFn(element)\n+\t}, input)\n+}\n+\n+func reverseFn(s string) string {", "originalCommit": "0aaa77ceed03198f6a759a5ad3096b7c1eaba62b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMzNDkyNg==", "url": "https://github.com/apache/beam/pull/12113#discussion_r447334926", "bodyText": "This is much cleaner. Thank you @henryken", "author": "damondouglas", "createdAt": "2020-06-30T00:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MDg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MTM1Ng==", "url": "https://github.com/apache/beam/pull/12113#discussion_r446881356", "bodyText": "Should we also include the reversed = and toUpper = as part of the answer placeholder?\nWe have already declared them as part of the method signature.", "author": "henryken", "createdAt": "2020-06-29T09:47:48Z", "path": "learning/katas/go/Core Transforms/Branching/Branching/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"strings\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) (reversed, toUpper beam.PCollection) {\n+\treversed = reverseString(s, input)", "originalCommit": "0aaa77ceed03198f6a759a5ad3096b7c1eaba62b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMDU4Ng==", "url": "https://github.com/apache/beam/pull/12113#discussion_r447210586", "bodyText": "Just a note, no action needed: You're using named values and naked returns correctly: in a very short function, to document the ordering of otherwise identical return values, but in larger functions, if can hurt readability. https://tour.golang.org/basics/7", "author": "lostluck", "createdAt": "2020-06-29T19:44:15Z", "path": "learning/katas/go/Core Transforms/Branching/Branching/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"strings\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) (reversed, toUpper beam.PCollection) {\n+\treversed = reverseString(s, input)\n+\ttoUpper = toUpperString(s, input)\n+\treturn", "originalCommit": "0aaa77ceed03198f6a759a5ad3096b7c1eaba62b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMzc5OA==", "url": "https://github.com/apache/beam/pull/12113#discussion_r447213798", "bodyText": "Not technically true. If the elements are reference values, like maps and pointers and similar, they can be mutated, and the side effects would be seen in other fused DoFns in the bundle.\nThe recommendation is to never mutate any input to a DoFn, and never mutate/reuse a value after it has been passed to an emitter.", "author": "lostluck", "createdAt": "2020-06-29T19:50:22Z", "path": "learning/katas/go/Core Transforms/Branching/Branching/task.md", "diffHunk": "@@ -0,0 +1,31 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Branching\n+\n+You can use the same PCollection as input for multiple transforms without consuming the input or \n+altering it.", "originalCommit": "0aaa77ceed03198f6a759a5ad3096b7c1eaba62b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "02651c12be6fed3d70c98d0ff903e5b4699f47a8", "url": "https://github.com/apache/beam/commit/02651c12be6fed3d70c98d0ff903e5b4699f47a8", "message": "Simplify task code and update description", "committedDate": "2020-06-30T00:41:15Z", "type": "commit"}, {"oid": "9da637bf5145ebb785985671349727456029098b", "url": "https://github.com/apache/beam/commit/9da637bf5145ebb785985671349727456029098b", "message": "Simplify use of reverseFn in ParDo", "committedDate": "2020-06-30T00:43:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0ODI5Nw==", "url": "https://github.com/apache/beam/pull/12113#discussion_r448648297", "bodyText": "typo: lesson", "author": "lostluck", "createdAt": "2020-07-01T22:28:11Z", "path": "learning/katas/go/Core Transforms/Branching/Branching/task.md", "diffHunk": "@@ -0,0 +1,36 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Branching\n+\n+The Beam SDK allows you to apply multiple transforms, branching an input into multiple resulting outputs.\n+A visual representation of this is shown below.  Two transforms are applied to a single PCollection\n+of database table rows.\n+\n+![A branching pipeline](https://beam.apache.org/images/design-your-pipeline-multiple-pcollections.svg)\n+\n+In this lession, we will apply two different transforms to the same string input.", "originalCommit": "9da637bf5145ebb785985671349727456029098b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "741985365fa0d1fbf5e0eef5ed875aa00e1f8b44", "url": "https://github.com/apache/beam/commit/741985365fa0d1fbf5e0eef5ed875aa00e1f8b44", "message": "Fix typo", "committedDate": "2020-07-01T22:49:47Z", "type": "commit"}, {"oid": "e2a9ef37a02241cd2233f7d50143c8a5187efe97", "url": "https://github.com/apache/beam/commit/e2a9ef37a02241cd2233f7d50143c8a5187efe97", "message": "Update stepik course", "committedDate": "2020-07-01T22:51:12Z", "type": "commit"}]}