{"pr_number": 12079, "pr_title": "[BEAM-9890] Support BIT_AND aggregation function in Beam SQL", "pr_createdAt": "2020-06-24T19:38:32Z", "pr_url": "https://github.com/apache/beam/pull/12079", "timeline": [{"oid": "d41dd5018f90bcac90079f68624710c811f05e50", "url": "https://github.com/apache/beam/commit/d41dd5018f90bcac90079f68624710c811f05e50", "message": "[BEAM-9890] Support BIT_AND aggregation function in Beam SQL and added tests", "committedDate": "2020-06-24T06:30:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ==", "url": "https://github.com/apache/beam/pull/12079#discussion_r445151779", "bodyText": "-1L makes it a bit harder to read. Why not use 1L instead?", "author": "amaliujia", "createdAt": "2020-06-24T20:27:04Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;", "originalCommit": "d41dd5018f90bcac90079f68624710c811f05e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDM2NQ==", "url": "https://github.com/apache/beam/pull/12079#discussion_r445160365", "bodyText": "Because -1L is represented as 64 bits of 1 in binary while 1L only has one 1 at the least significant bit.\nIn order to do bit_and operation, I think the initial bit mask should consists of only 1s, so I use -1L.", "author": "Imfuyuwei", "createdAt": "2020-06-24T20:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MzE4OQ==", "url": "https://github.com/apache/beam/pull/12079#discussion_r445163189", "bodyText": "That's a good point \ud83d\udc4d  I should go back to re-visit CMU 15213 course slides.", "author": "amaliujia", "createdAt": "2020-06-24T20:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2NzM5MQ==", "url": "https://github.com/apache/beam/pull/12079#discussion_r445167391", "bodyText": "Thanks!\nBTW I want to mention that I also added 1 line at the end of the previous testBitOrFunction(). I noticed that without this line, the previous bit_or test would always pass no matter what expected result I set, which made it an invalid test.\nIt will be good if you can take a look.", "author": "Imfuyuwei", "createdAt": "2020-06-24T20:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2OTgyOA==", "url": "https://github.com/apache/beam/pull/12079#discussion_r445169828", "bodyText": "O for that pipeline run and then wait. Thanks that's a nice catch.", "author": "amaliujia", "createdAt": "2020-06-24T21:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MTc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNzc1OA==", "url": "https://github.com/apache/beam/pull/12079#discussion_r446437758", "bodyText": "In fact, I wasn't sure what's the result of NULL & long", "author": "amaliujia", "createdAt": "2020-06-26T22:30:50Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -383,4 +392,30 @@ public Long extractOutput(Long accum) {\n       return accum;\n     }\n   }\n+\n+  static class BitAnd<T extends Number> extends CombineFn<T, Long, Long> {\n+    @Override\n+    public Long createAccumulator() {\n+      return -1L;\n+    }\n+\n+    @Override\n+    public Long addInput(Long accum, T input) {\n+      return accum & input.longValue();", "originalCommit": "d41dd5018f90bcac90079f68624710c811f05e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNzkzMA==", "url": "https://github.com/apache/beam/pull/12079#discussion_r446437930", "bodyText": "If consider NULL is unknown, then unknown op something should be unknown.", "author": "amaliujia", "createdAt": "2020-06-26T22:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNzc1OA=="}], "type": "inlineReview"}]}