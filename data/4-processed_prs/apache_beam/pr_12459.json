{"pr_number": 12459, "pr_title": "[BEAM-9547] Simplify pandas implementation.", "pr_createdAt": "2020-08-03T20:53:18Z", "pr_url": "https://github.com/apache/beam/pull/12459", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NTg3OA==", "url": "https://github.com/apache/beam/pull/12459#discussion_r465255878", "bodyText": "This seems generic and useful enough that I'm surprised it isn't in a dataframes library.", "author": "apilloud", "createdAt": "2020-08-04T18:45:19Z", "path": "sdks/python/apache_beam/dataframe/frame_base.py", "diffHunk": "@@ -226,6 +232,68 @@ def wrapper(self, *args, **kwargs):\n   return wrapper\n \n \n+def maybe_inplace(func):\n+  @functools.wraps(func)\n+  def wrapper(self, inplace=False, **kwargs):\n+    result = func(self, **kwargs)\n+    if inplace:\n+      self._expr = result._expr\n+    else:\n+      return result\n+\n+  return wrapper\n+\n+\n+def args_to_kwargs(base_type):", "originalCommit": "fe97086cd4b45de1e2c5f40c590027bc5d643629", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NzE5OA==", "url": "https://github.com/apache/beam/pull/12459#discussion_r465257198", "bodyText": "nit: this appears more than once in this file, might it be worth adding a getargspec helper function?", "author": "apilloud", "createdAt": "2020-08-04T18:47:45Z", "path": "sdks/python/apache_beam/dataframe/frame_base.py", "diffHunk": "@@ -147,7 +149,11 @@ def wrapper(*args, **kwargs):\n       else:\n         try:\n           # pylint: disable=deprecated-method\n-          ix = inspect.getargspec(func).args.index(key)\n+          if sys.version_info < (3, ):", "originalCommit": "fe97086cd4b45de1e2c5f40c590027bc5d643629", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjQ4Mg==", "url": "https://github.com/apache/beam/pull/12459#discussion_r465402482", "bodyText": "Good point.", "author": "robertwb", "createdAt": "2020-08-05T00:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NzE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2ODY5OQ==", "url": "https://github.com/apache/beam/pull/12459#discussion_r465268699", "bodyText": "This comment is a little confusing, I believe it is describing the contents of populate_defaults?\nAfter spending some time reading through this, it might be clearer if you broke this into a function that returned arg_to_default, and a second that returned populate_defaults.", "author": "apilloud", "createdAt": "2020-08-04T19:09:38Z", "path": "sdks/python/apache_beam/dataframe/frame_base.py", "diffHunk": "@@ -226,6 +232,68 @@ def wrapper(self, *args, **kwargs):\n   return wrapper\n \n \n+def maybe_inplace(func):\n+  @functools.wraps(func)\n+  def wrapper(self, inplace=False, **kwargs):\n+    result = func(self, **kwargs)\n+    if inplace:\n+      self._expr = result._expr\n+    else:\n+      return result\n+\n+  return wrapper\n+\n+\n+def args_to_kwargs(base_type):\n+  def wrap(func):\n+    if sys.version_info < (3, ):\n+      getargspec = inspect.getargspec\n+    else:\n+      getargspec = inspect.getfullargspec\n+\n+    # This is used to map all positional arguments to keyword arguments.\n+    base = getattr(base_type, func.__name__)\n+    while hasattr(base, '__wrapped__'):\n+      base = base.__wrapped__\n+    base_argspec = getargspec(base)\n+    arg_names = base_argspec.args\n+\n+    # These are used to populate any defaults in base for arguments in func.\n+    if base_argspec.defaults:\n+      arg_to_default = dict(\n+          zip(\n+              base_argspec.args[-len(base_argspec.defaults):],\n+              base_argspec.defaults))\n+    else:\n+      arg_to_default = {}\n+\n+    unwrapped_func = func\n+    while hasattr(unwrapped_func, '__wrapped__'):\n+      unwrapped_func = unwrapped_func.__wrapped__\n+    # args that do not have defaults in func, but do have defaults in base", "originalCommit": "fe97086cd4b45de1e2c5f40c590027bc5d643629", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjc2Nw==", "url": "https://github.com/apache/beam/pull/12459#discussion_r465402767", "bodyText": "I think I never want one without the other, but I'll see what it looks like to break them up.", "author": "robertwb", "createdAt": "2020-08-05T00:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2ODY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTM1NQ==", "url": "https://github.com/apache/beam/pull/12459#discussion_r465269355", "bodyText": "arg_to_default might be clearer as arg_to_base_default or base_defaults?", "author": "apilloud", "createdAt": "2020-08-04T19:10:51Z", "path": "sdks/python/apache_beam/dataframe/frame_base.py", "diffHunk": "@@ -226,6 +232,68 @@ def wrapper(self, *args, **kwargs):\n   return wrapper\n \n \n+def maybe_inplace(func):\n+  @functools.wraps(func)\n+  def wrapper(self, inplace=False, **kwargs):\n+    result = func(self, **kwargs)\n+    if inplace:\n+      self._expr = result._expr\n+    else:\n+      return result\n+\n+  return wrapper\n+\n+\n+def args_to_kwargs(base_type):\n+  def wrap(func):\n+    if sys.version_info < (3, ):\n+      getargspec = inspect.getargspec\n+    else:\n+      getargspec = inspect.getfullargspec\n+\n+    # This is used to map all positional arguments to keyword arguments.\n+    base = getattr(base_type, func.__name__)\n+    while hasattr(base, '__wrapped__'):\n+      base = base.__wrapped__\n+    base_argspec = getargspec(base)\n+    arg_names = base_argspec.args\n+\n+    # These are used to populate any defaults in base for arguments in func.\n+    if base_argspec.defaults:\n+      arg_to_default = dict(", "originalCommit": "fe97086cd4b45de1e2c5f40c590027bc5d643629", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f67f263d9b9e2dd3a2cd53680c2d548c858dbf70", "url": "https://github.com/apache/beam/commit/f67f263d9b9e2dd3a2cd53680c2d548c858dbf70", "message": "Use new infrastructure to simplify pandas implementation.", "committedDate": "2020-08-05T01:14:46Z", "type": "forcePushed"}, {"oid": "8c240fce51f4da7401d722e71a804a3219efea79", "url": "https://github.com/apache/beam/commit/8c240fce51f4da7401d722e71a804a3219efea79", "message": "Use new infrastructure to simplify pandas implementation.", "committedDate": "2020-08-05T07:47:04Z", "type": "forcePushed"}, {"oid": "01c7ad165847ee08e6b9cb352ca06a3bf9a64942", "url": "https://github.com/apache/beam/commit/01c7ad165847ee08e6b9cb352ca06a3bf9a64942", "message": "Simplify common patterns for pandas methods.", "committedDate": "2020-08-05T16:06:40Z", "type": "commit"}, {"oid": "7bd16168125588e6e972af1d4ceb9745f9dc0658", "url": "https://github.com/apache/beam/commit/7bd16168125588e6e972af1d4ceb9745f9dc0658", "message": "Use new infrastructure to simplify pandas implementation.", "committedDate": "2020-08-05T16:06:41Z", "type": "commit"}, {"oid": "7bd16168125588e6e972af1d4ceb9745f9dc0658", "url": "https://github.com/apache/beam/commit/7bd16168125588e6e972af1d4ceb9745f9dc0658", "message": "Use new infrastructure to simplify pandas implementation.", "committedDate": "2020-08-05T16:06:41Z", "type": "forcePushed"}]}