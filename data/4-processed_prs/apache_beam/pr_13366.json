{"pr_number": 13366, "pr_title": "[BEAM-9615] Switch options for logical types.", "pr_createdAt": "2020-11-17T18:54:06Z", "pr_url": "https://github.com/apache/beam/pull/13366", "timeline": [{"oid": "7a4a9c401cd3c297865f2df8325233e74ece4413", "url": "https://github.com/apache/beam/commit/7a4a9c401cd3c297865f2df8325233e74ece4413", "message": "[BEAM-9615] Switch options  for logical types.", "committedDate": "2020-11-17T18:46:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTczODMyMg==", "url": "https://github.com/apache/beam/pull/13366#discussion_r525738322", "bodyText": "Is this godoc-related or just something accidentally left in?", "author": "youngoli", "createdAt": "2020-11-18T03:34:21Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}\n+)\n+\n+// LogicalType is an interface between custom Go types, and schema storage types.\n+//\n+// A LogicalType is a way to define a new type that can be stored in a schema field\n+// using a known underlying type for storage. The storage type must be comprised of\n+// known schema field types, or pre-registered LogicalTypes. LogicalTypes may not be\n+// mutually recursive at any level of indirection.\n+//End", "originalCommit": "7a4a9c401cd3c297865f2df8325233e74ece4413", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTQ4Mg==", "url": "https://github.com/apache/beam/pull/13366#discussion_r525745482", "bodyText": "I don't understand the reason to have the ID layer between logicalIdentifiers and logicalTypes. Is there a reason not to just have this?:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tlogicalTypes       = map[string]LogicalType{}\n          \n          \n            \n            \tlogicalIdentifiers = map[reflect.Type]string{}\n          \n          \n            \n            \tlogicalTypes       = map[reflect.Type]LogicalType{}", "author": "youngoli", "createdAt": "2020-11-18T03:41:55Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/logicaltypes.go", "diffHunk": "@@ -0,0 +1,122 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package schema\n+\n+import (\n+\t\"fmt\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/util/reflectx\"\n+)\n+\n+var (\n+\t// Maps logical type identifiers to their reflect.Type and the schema representation.\n+\t// the type identifier is the reflect.Type name, and included in the proto as well.\n+\t// We don't treat all types as \"logical\" types.\n+\t// ... why don't we treat all types as Logical types?\n+\tlogicalTypes       = map[string]LogicalType{}\n+\tlogicalIdentifiers = map[reflect.Type]string{}", "originalCommit": "7a4a9c401cd3c297865f2df8325233e74ece4413", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NzI4NA==", "url": "https://github.com/apache/beam/pull/13366#discussion_r526267284", "bodyText": "Good question: the string lookup is because that's all we have from the Schema proto direction. We need a mapping to the Logical part regardless, and then we need a mapping from the reflect.Type to that identifier. There's no guarantee or reason that a logical type's identifier will actually be related to the reflect.Type information unfortunately.", "author": "lostluck", "createdAt": "2020-11-18T17:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0ODg4Ng==", "url": "https://github.com/apache/beam/pull/13366#discussion_r526448886", "bodyText": "Ack, that makes sense. I hadn't considered what to do when coming from the proto direction.", "author": "youngoli", "createdAt": "2020-11-18T21:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1NzM1MA==", "url": "https://github.com/apache/beam/pull/13366#discussion_r525757350", "bodyText": "Nit: This line can just be part of the previous line.", "author": "youngoli", "createdAt": "2020-11-18T03:54:28Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/schema/schema.go", "diffHunk": "@@ -412,12 +382,18 @@ func fieldTypeToReflectType(sft *pipepb.FieldType, opts []*pipepb.Option) (refle\n \t// case *pipepb.FieldType_IterableType:\n \t// TODO(BEAM-9615): handle IterableTypes.\n \n-\t//case *pipepb.FieldType_LogicalType:\n-\t// TODO(BEAM-9615): handle LogicalTypes types.\n-\t//sft.GetLogicalType().\n+\tcase *pipepb.FieldType_LogicalType:\n+\t\tlst := sft.GetLogicalType()\n+\t\tidentifier := lst.GetUrn()\n+\t\tlt, ok := logicalTypes[identifier]\n+\t\tif !ok {\n+\t\t\treturn nil, errors.Errorf(\"unknown logical type: %v\", identifier)\n+\t\t}\n+\t\tt = lt.GoType()\n \n \t// Logical Types are for things that have more specialized user representation already, or\n-\t// things like Time or protocol buffers.\n+\t// things like Time or protocol buffers, or int.\n+\t// Or specifically formatted integers.", "originalCommit": "7a4a9c401cd3c297865f2df8325233e74ece4413", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI4NDUzMA==", "url": "https://github.com/apache/beam/pull/13366#discussion_r526284530", "bodyText": "The whole block is not necessary now that there's an entire file for the types. removed.", "author": "lostluck", "createdAt": "2020-11-18T17:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1NzM1MA=="}], "type": "inlineReview"}, {"oid": "8fc2c68cdcd6258657dbf200348ced1896ec4277", "url": "https://github.com/apache/beam/commit/8fc2c68cdcd6258657dbf200348ced1896ec4277", "message": "!fixup", "committedDate": "2020-11-18T17:32:53Z", "type": "commit"}]}