{"pr_number": 12930, "pr_title": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "pr_createdAt": "2020-09-24T15:18:26Z", "pr_url": "https://github.com/apache/beam/pull/12930", "timeline": [{"oid": "72b889463b34db8fef47db3bbf42faeadaa59701", "url": "https://github.com/apache/beam/commit/72b889463b34db8fef47db3bbf42faeadaa59701", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-09-24T15:09:51Z", "type": "commit"}, {"oid": "296f3a42984179387227c5edefdab17c050d1747", "url": "https://github.com/apache/beam/commit/296f3a42984179387227c5edefdab17c050d1747", "message": "Merge branch 'master' into multi-pubsub-reader", "committedDate": "2020-09-28T15:02:33Z", "type": "commit"}, {"oid": "50aaf778bc1feacecbe4ac0e4e2519a7b4e84755", "url": "https://github.com/apache/beam/commit/50aaf778bc1feacecbe4ac0e4e2519a7b4e84755", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-10-08T17:48:43Z", "type": "commit"}, {"oid": "d0263c7b97a7fb93749137af95a91d4ad4ffd107", "url": "https://github.com/apache/beam/commit/d0263c7b97a7fb93749137af95a91d4ad4ffd107", "message": "Merge remote-tracking branch 'origin/multi-pubsub-reader' into multi-pubsub-reader", "committedDate": "2020-10-08T17:49:09Z", "type": "commit"}, {"oid": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20", "url": "https://github.com/apache/beam/commit/34b92bf4f0afa20f88ab4dda08298d7ca49fba20", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-10-08T20:58:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NjY5Nw==", "url": "https://github.com/apache/beam/pull/12930#discussion_r507986697", "bodyText": "It seems like constructing ReadFromPubSub doesn't ask for with_context. Why do we add a new one here?", "author": "boyuanzz", "createdAt": "2020-10-19T18:50:29Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool", "originalCommit": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NzIxNw==", "url": "https://github.com/apache/beam/pull/12930#discussion_r507987217", "bodyText": "It also seems like there is no certain consumer for these additional kwargs. Why do we want them here?", "author": "boyuanzz", "createdAt": "2020-10-19T18:51:19Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool\n+      id_label=None,  # type: Optional[Union[List[str], str]]\n+      with_attributes=False,  # type: bool\n+      timestamp_attribute=None,  # type: Optional[Union[List[str], str]]\n+      **kwargs", "originalCommit": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4ODUwNA==", "url": "https://github.com/apache/beam/pull/12930#discussion_r507988504", "bodyText": "PubSubSource has the similar checking logic as here. We should be able to move this check.", "author": "boyuanzz", "createdAt": "2020-10-19T18:53:27Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool\n+      id_label=None,  # type: Optional[Union[List[str], str]]\n+      with_attributes=False,  # type: bool\n+      timestamp_attribute=None,  # type: Optional[Union[List[str], str]]\n+      **kwargs\n+  ):\n+    \"\"\"Initializes ``PubSubMultipleReader``.\n+\n+    Args:\n+      source_list: List of Cloud Pub/Sub topics or subscriptions. Topics in\n+        form \"projects/<project>/topics/<topic>\" and subscriptions in form\n+        \"projects/<project>/subscriptions/<subscription>\".\n+      with_context:\n+        True - output elements will be key-value pairs with the source as the\n+        key and the message as the value.\n+        False - output elements will be the messages.\n+      with_attributes:\n+        True - input elements will be :class:`~PubsubMessage` objects.\n+        False - input elements will be of type ``bytes`` (message data only).\n+      id_label: If set, will set an attribute for each Cloud Pub/Sub message\n+        with the given name and a unique value. This attribute can then be\n+        used in a ReadFromPubSub PTransform to deduplicate messages. If type\n+        is string, all sources will share the same value; if type is\n+        ``List``, each source will use the value of its index.\n+      timestamp_attribute: If set, will set an attribute for each Cloud\n+        Pub/Sub message with the given name and the message's publish time as\n+        the value. If type is ``string``, all sources will share the same\n+        value; if type List, each source will use the value of its index.\n+    \"\"\"\n+    self.source_list = source_list\n+    self.with_context = with_context\n+    self.with_attributes = with_attributes\n+    self._kwargs = kwargs\n+\n+    self._total_sources = len(source_list)\n+\n+    if isinstance(id_label, str) or id_label is None:\n+      self.id_label = [id_label] * self._total_sources\n+    else:\n+      if len(id_label) != self._total_sources:\n+        raise ValueError(\n+            'Length of \"id_label\" (%d) is not the same as length of '\n+            '\"sources\" (%d)' % (len(id_label), self._total_sources))\n+      self.id_label = id_label\n+\n+    if isinstance(timestamp_attribute, str) or timestamp_attribute is None:\n+      self.timestamp_attribute = [timestamp_attribute] * self._total_sources\n+    else:\n+      if len(timestamp_attribute) != self._total_sources:\n+        raise ValueError(\n+            'Length of \"timestamp_attribute\" (%d) is not the same as length of '\n+            '\"sources\" (%d)' % (len(timestamp_attribute), self._total_sources))\n+      self.timestamp_attribute = timestamp_attribute\n+\n+    for source in self.source_list:\n+      match_topic = re.match(TOPIC_REGEXP, source)\n+      match_subscription = re.match(SUBSCRIPTION_REGEXP, source)\n+\n+      if not (match_topic or match_subscription):\n+        raise ValueError(\n+            'PubSub source must be in the form \"projects/<project>/topics'\n+            '/<topic>\" or \"projects/<project>/subscription'\n+            '/<subscription>\" (got %r).' % source)\n+\n+    if 'topic' in self._kwargs:\n+      raise ValueError(\n+          'Topics and subscriptions should be in \"source_list\". '\n+          'Found topic %s' % self._kwargs['topic'])\n+\n+    if 'subscription' in self._kwargs:\n+      raise ValueError(\n+          'Subscriptions and topics should be in \"source_list\". '\n+          'Found subscription %s' % self._kwargs['subscription'])\n+\n+  def expand(self, pcol):\n+    sources_pcol = []\n+    for i, source in enumerate(self.source_list):\n+      id_label = self.id_label[i]\n+      timestamp_attribute = self.timestamp_attribute[i]\n+\n+      source_split = source.split('/')\n+      source_project = source_split[1]\n+      source_type = source_split[2]\n+      source_name = source_split[-1]\n+\n+      step_name_base = 'PubSub %s/project:%s' % (source_type, source_project)\n+      read_step_name = '%s/Read %s' % (step_name_base, source_name)\n+\n+      if source_type == 'topics':", "originalCommit": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk5MDgzOA==", "url": "https://github.com/apache/beam/pull/12930#discussion_r507990838", "bodyText": "Lots of logic here is checking input arguments, which we can get rid of by using a NamedTuple to represent a reading PubSub configuration instead of using a list for each configurable attributes.", "author": "boyuanzz", "createdAt": "2020-10-19T18:57:01Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +448,123 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[str]\n+      with_context=False,  # type: bool\n+      id_label=None,  # type: Optional[Union[List[str], str]]\n+      with_attributes=False,  # type: bool\n+      timestamp_attribute=None,  # type: Optional[Union[List[str], str]]\n+      **kwargs\n+  ):\n+    \"\"\"Initializes ``PubSubMultipleReader``.\n+\n+    Args:\n+      source_list: List of Cloud Pub/Sub topics or subscriptions. Topics in\n+        form \"projects/<project>/topics/<topic>\" and subscriptions in form\n+        \"projects/<project>/subscriptions/<subscription>\".\n+      with_context:\n+        True - output elements will be key-value pairs with the source as the\n+        key and the message as the value.\n+        False - output elements will be the messages.\n+      with_attributes:\n+        True - input elements will be :class:`~PubsubMessage` objects.\n+        False - input elements will be of type ``bytes`` (message data only).\n+      id_label: If set, will set an attribute for each Cloud Pub/Sub message\n+        with the given name and a unique value. This attribute can then be\n+        used in a ReadFromPubSub PTransform to deduplicate messages. If type\n+        is string, all sources will share the same value; if type is\n+        ``List``, each source will use the value of its index.\n+      timestamp_attribute: If set, will set an attribute for each Cloud\n+        Pub/Sub message with the given name and the message's publish time as\n+        the value. If type is ``string``, all sources will share the same\n+        value; if type List, each source will use the value of its index.\n+    \"\"\"\n+    self.source_list = source_list\n+    self.with_context = with_context\n+    self.with_attributes = with_attributes\n+    self._kwargs = kwargs\n+\n+    self._total_sources = len(source_list)\n+\n+    if isinstance(id_label, str) or id_label is None:", "originalCommit": "34b92bf4f0afa20f88ab4dda08298d7ca49fba20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e046a63a563049118a3d62d356f43d911378e407", "url": "https://github.com/apache/beam/commit/e046a63a563049118a3d62d356f43d911378e407", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-03T16:45:07Z", "type": "commit"}, {"oid": "660cdf58791da53c08fd723042351ebee469ec74", "url": "https://github.com/apache/beam/commit/660cdf58791da53c08fd723042351ebee469ec74", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-03T17:08:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxODY3OQ==", "url": "https://github.com/apache/beam/pull/12930#discussion_r522518679", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  source_list,  # type: List[PubSubSourceDescriptor]\n          \n          \n            \n                 pubsub_source_descriptors,  # type: List[PubSubSourceDescriptor]", "author": "boyuanzz", "createdAt": "2020-11-13T00:04:27Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[PubSubSourceDescriptor]", "originalCommit": "660cdf58791da53c08fd723042351ebee469ec74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2NTAzNA==", "url": "https://github.com/apache/beam/pull/12930#discussion_r526165034", "bodyText": "Done", "author": "InigoSJ", "createdAt": "2020-11-18T15:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxODY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTE0Ng==", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519146", "bodyText": "It seems like the source here will be the full path to the topic/subscriptions. Please add more pydoc to describe what the source str should be.", "author": "boyuanzz", "createdAt": "2020-11-13T00:05:59Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str", "originalCommit": "660cdf58791da53c08fd723042351ebee469ec74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTI4OA==", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              subscriptions and/or topics.\"\"\"\n          \n          \n            \n              ``PubSubSourceDescriptor``.\"\"\"", "author": "boyuanzz", "createdAt": "2020-11-13T00:06:31Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"", "originalCommit": "660cdf58791da53c08fd723042351ebee469ec74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTUwOA==", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519508", "bodyText": "Please add a code snippet about how to use this transform and highlight the benefit of using this transform compared to the ReadFromPubSub.", "author": "boyuanzz", "createdAt": "2020-11-13T00:07:09Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):", "originalCommit": "660cdf58791da53c08fd723042351ebee469ec74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTg5OQ==", "url": "https://github.com/apache/beam/pull/12930#discussion_r522519899", "bodyText": "Instead of using split, can we use re.match(TOPIC_REGEXP, source.source) and re.match(SUBSCRIPTION_REGEXP, source.source) as well?", "author": "boyuanzz", "createdAt": "2020-11-13T00:08:45Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -444,3 +449,69 @@ def display_data(self):\n \n   def writer(self):\n     raise NotImplementedError\n+\n+\n+class PubSubSourceDescriptor(NamedTuple):\n+  \"\"\"A PubSub source descriptor for ``MultipleReadFromPubSub```\"\"\"\n+  source: str\n+  id_label: str = None\n+  timestamp_attribute: str = None\n+\n+\n+class MultipleReadFromPubSub(PTransform):\n+  \"\"\"A ``PTransform`` that expands ``ReadFromPubSub`` to read from multiple\n+  subscriptions and/or topics.\"\"\"\n+  def __init__(\n+      self,\n+      source_list,  # type: List[PubSubSourceDescriptor]\n+      with_attributes=False,  # type: bool\n+  ):\n+    \"\"\"Initializes ``PubSubMultipleReader``.\n+\n+    Args:\n+      source_list: List of Cloud Pub/Sub topics or subscriptions of type\n+      `~PubSubSourceDescriptor`.\n+      with_attributes:\n+        True - input elements will be :class:`~PubsubMessage` objects.\n+        False - input elements will be of type ``bytes`` (message data only).\n+    \"\"\"\n+    self.source_list = source_list\n+    self.with_attributes = with_attributes\n+\n+    for source in self.source_list:\n+      match_topic = re.match(TOPIC_REGEXP, source.source)\n+      match_subscription = re.match(SUBSCRIPTION_REGEXP, source.source)\n+\n+      if not (match_topic or match_subscription):\n+        raise ValueError(\n+            'PubSub source must be in the form \"projects/<project>/topics'\n+            '/<topic>\" or \"projects/<project>/subscription'\n+            '/<subscription>\" (got %r).' % source.source)\n+\n+  def expand(self, pcol):\n+    sources_pcol = []\n+    for source in self.source_list:\n+      source_split = source.source.split('/')", "originalCommit": "660cdf58791da53c08fd723042351ebee469ec74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2NjE4NA==", "url": "https://github.com/apache/beam/pull/12930#discussion_r526166184", "bodyText": "I used a new regex (PUBSUB_DESCRIPTOR_REGEXP) that is valid for both, so I could use match.group to check if topic or subscription, let me know what you think.", "author": "InigoSJ", "createdAt": "2020-11-18T15:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTg5OQ=="}], "type": "inlineReview"}, {"oid": "dfc57eec71c078a4dfb15bd85bd39db88d8d74ff", "url": "https://github.com/apache/beam/commit/dfc57eec71c078a4dfb15bd85bd39db88d8d74ff", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-18T09:29:43Z", "type": "commit"}, {"oid": "0a0dc6b042c197fd29e2029afd7e49634102bbaa", "url": "https://github.com/apache/beam/commit/0a0dc6b042c197fd29e2029afd7e49634102bbaa", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-18T09:46:24Z", "type": "commit"}, {"oid": "c33e97f16dd378fc93dfe745b439a22066b4d51a", "url": "https://github.com/apache/beam/commit/c33e97f16dd378fc93dfe745b439a22066b4d51a", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-18T16:47:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwOTUzNQ==", "url": "https://github.com/apache/beam/pull/12930#discussion_r526509535", "bodyText": "Please move this into the MultipleReadFromPubSub  class py doc.", "author": "boyuanzz", "createdAt": "2020-11-19T00:20:16Z", "path": "sdks/python/apache_beam/io/gcp/pubsub.py", "diffHunk": "@@ -20,6 +20,27 @@\n Cloud Pub/Sub sources and sinks are currently supported only in streaming\n pipelines, during remote execution.\n \n+Multiple Read from Pub/Sub", "originalCommit": "c33e97f16dd378fc93dfe745b439a22066b4d51a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2508a4f4c4d7c8f26eb782cb5c1e655dae456cd1", "url": "https://github.com/apache/beam/commit/2508a4f4c4d7c8f26eb782cb5c1e655dae456cd1", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-19T11:05:17Z", "type": "commit"}, {"oid": "2e7bc4ad8075fc86f0c26a15bf3d8000dde9b135", "url": "https://github.com/apache/beam/commit/2e7bc4ad8075fc86f0c26a15bf3d8000dde9b135", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-19T11:16:20Z", "type": "commit"}, {"oid": "a279c7dcb32961fc7eb1e1ea49cff995bdbdf8c6", "url": "https://github.com/apache/beam/commit/a279c7dcb32961fc7eb1e1ea49cff995bdbdf8c6", "message": "[BEAM-10962] Add Multiple PubSub reader to Python SDK", "committedDate": "2020-11-19T11:28:45Z", "type": "commit"}, {"oid": "17af76cb907da17f257c8f73a175c3ace9a6cd68", "url": "https://github.com/apache/beam/commit/17af76cb907da17f257c8f73a175c3ace9a6cd68", "message": "Merge branch 'master' into multi-pubsub-reader", "committedDate": "2020-11-19T11:50:47Z", "type": "commit"}]}