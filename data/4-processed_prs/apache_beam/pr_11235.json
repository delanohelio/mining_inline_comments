{"pr_number": 11235, "pr_title": "[BEAM-9618] Pull bundle descriptors.", "pr_createdAt": "2020-03-26T07:26:08Z", "pr_url": "https://github.com/apache/beam/pull/11235", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTQyMQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r398689421", "bodyText": "I would have expected this to be a separate stream containing SDK requests similar to how Control works or made Control bidirectional for requests and responses by making a singular Instruction field that is streamed both ways that contains both Request and Response fields.\nThe advantage of using a stream is that it may be important to provide ordering over SDK requests/responses. Putting it into the Control stream allows for a total ordering between all Runner and SDK requests/responses (to solve the instruction id collision issue, we can assign servers the \"s\" prefix and clients the \"c\" prefix).", "author": "lukecwik", "createdAt": "2020-03-26T15:59:56Z", "path": "model/fn-execution/src/main/proto/beam_fn_api.proto", "diffHunk": "@@ -81,6 +81,13 @@ service BeamFnControl {\n       returns (\n           // A stream of instructions requested of the SDK to be performed.\n           stream InstructionRequest) {}\n+\n+  rpc GetProcessBundleDescriptor(GetProcessBundleDescriptorRequest) returns (", "originalCommit": "b3073a346ebbd53e9dcf18680b089570402c800a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTg1OQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r398805859", "bodyText": "The current Control must be a stream because (1) it is server-initiated requests on a client-initiated connection and (2) in streaming pipelines, it we want it to be high-volume, low-latency, possibly pipelined. However, using streams in this way vs. \"standard\" RPC methods comes at a cost (in both code and conceptual complexity).\nAs far as ordering, it is preferable to have a protocol that is not sensitive to this kind of thing. (In fact, this eliminates the one need for ordering in our Control stream, where bundles needed to be registered before they were used (and this didn't fit well with pattern of dispatching instructions to threadpool-backed handlers in the SDKs which required extra locking/waiting anyway). Progress and splitting requests were already asynchronous.)", "author": "robertwb", "createdAt": "2020-03-26T18:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxODMwMw==", "url": "https://github.com/apache/beam/pull/11235#discussion_r398918303", "bodyText": "sg", "author": "lukecwik", "createdAt": "2020-03-26T21:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTQyMQ=="}], "type": "inlineReview"}, {"oid": "cebab89aa6221ea4e981baec6eebf610b172dbb6", "url": "https://github.com/apache/beam/commit/cebab89aa6221ea4e981baec6eebf610b172dbb6", "message": "DO NOT MERGE test ignoring registration", "committedDate": "2020-03-26T23:28:04Z", "type": "forcePushed"}, {"oid": "590a6698303040c99781c37dfaf2f38993ae8f3f", "url": "https://github.com/apache/beam/commit/590a6698303040c99781c37dfaf2f38993ae8f3f", "message": "DO NOT MERGE test ignoring registration", "committedDate": "2020-04-01T08:15:35Z", "type": "forcePushed"}, {"oid": "6620c70ed996b50a63fa7268b7d5e98906d09608", "url": "https://github.com/apache/beam/commit/6620c70ed996b50a63fa7268b7d5e98906d09608", "message": "DO NOT MERGE test ignoring registration", "committedDate": "2020-04-01T09:27:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0MzI0OQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401943249", "bodyText": "Since this is a new method, we should force all users to supply it.", "author": "lukecwik", "createdAt": "2020-04-01T22:18:58Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientPoolService.java", "diffHunk": "@@ -105,12 +105,38 @@ public static FnApiControlClientPoolService offeringClientsToPool(\n     return newClient.asResponseObserver();\n   }\n \n+  @Override\n+  public void getProcessBundleDescriptor(\n+      BeamFnApi.GetProcessBundleDescriptorRequest request,\n+      StreamObserver<BeamFnApi.ProcessBundleDescriptor> responseObserver) {\n+    final String workerId = headerAccessor.getSdkWorkerId();\n+    if (Strings.isNullOrEmpty(workerId)) {\n+      // TODO(BEAM-4149): Enforce proper worker id.\n+      LOG.warn(\"No worker_id header provided in getProcessBundleDescriptor request\");", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NTU1Mw==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401945553", "bodyText": "Please return the NOT_FOUND status error if the process bundle descriptor is null.", "author": "lukecwik", "createdAt": "2020-04-01T22:24:31Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientPoolService.java", "diffHunk": "@@ -105,12 +105,38 @@ public static FnApiControlClientPoolService offeringClientsToPool(\n     return newClient.asResponseObserver();\n   }\n \n+  @Override\n+  public void getProcessBundleDescriptor(\n+      BeamFnApi.GetProcessBundleDescriptorRequest request,\n+      StreamObserver<BeamFnApi.ProcessBundleDescriptor> responseObserver) {\n+    final String workerId = headerAccessor.getSdkWorkerId();\n+    if (Strings.isNullOrEmpty(workerId)) {\n+      // TODO(BEAM-4149): Enforce proper worker id.\n+      LOG.warn(\"No worker_id header provided in getProcessBundleDescriptor request\");\n+    }\n+\n+    LOG.info(\"getProcessBundleDescriptor request with id {}\", workerId);\n+\n+    FnApiControlClient client;\n+    synchronized (lock) {\n+      client = vendedClients.get(workerId);\n+    }\n+    LOG.warn(\"getProcessBundleDescriptor client {}\", client);\n+    LOG.warn(\"getProcessBundleDescriptor id {}\", request.getProcessBundleDescriptorId());\n+    LOG.warn(\n+        \"getProcessBundleDescriptor result {}\",\n+        client.getProcessBundleDescriptor(request.getProcessBundleDescriptorId()));\n+    responseObserver.onNext(\n+        client.getProcessBundleDescriptor(request.getProcessBundleDescriptorId()));", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NjIxMA==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401946210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG.info(\"getProcessBundleDescriptor request with id {}\", workerId);\n          \n          \n            \n                LOG.info(\"getProcessBundleDescriptor: descriptor {} worker id {}\", request.getProcessBundleDescriptorId(), workerId);", "author": "lukecwik", "createdAt": "2020-04-01T22:26:02Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientPoolService.java", "diffHunk": "@@ -105,12 +105,38 @@ public static FnApiControlClientPoolService offeringClientsToPool(\n     return newClient.asResponseObserver();\n   }\n \n+  @Override\n+  public void getProcessBundleDescriptor(\n+      BeamFnApi.GetProcessBundleDescriptorRequest request,\n+      StreamObserver<BeamFnApi.ProcessBundleDescriptor> responseObserver) {\n+    final String workerId = headerAccessor.getSdkWorkerId();\n+    if (Strings.isNullOrEmpty(workerId)) {\n+      // TODO(BEAM-4149): Enforce proper worker id.\n+      LOG.warn(\"No worker_id header provided in getProcessBundleDescriptor request\");\n+    }\n+\n+    LOG.info(\"getProcessBundleDescriptor request with id {}\", workerId);", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NjI2MQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401946261", "bodyText": "Did you intend to keep all these logs?", "author": "lukecwik", "createdAt": "2020-04-01T22:26:11Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientPoolService.java", "diffHunk": "@@ -105,12 +105,38 @@ public static FnApiControlClientPoolService offeringClientsToPool(\n     return newClient.asResponseObserver();\n   }\n \n+  @Override\n+  public void getProcessBundleDescriptor(\n+      BeamFnApi.GetProcessBundleDescriptorRequest request,\n+      StreamObserver<BeamFnApi.ProcessBundleDescriptor> responseObserver) {\n+    final String workerId = headerAccessor.getSdkWorkerId();\n+    if (Strings.isNullOrEmpty(workerId)) {\n+      // TODO(BEAM-4149): Enforce proper worker id.\n+      LOG.warn(\"No worker_id header provided in getProcessBundleDescriptor request\");\n+    }\n+\n+    LOG.info(\"getProcessBundleDescriptor request with id {}\", workerId);\n+\n+    FnApiControlClient client;\n+    synchronized (lock) {\n+      client = vendedClients.get(workerId);\n+    }\n+    LOG.warn(\"getProcessBundleDescriptor client {}\", client);\n+    LOG.warn(\"getProcessBundleDescriptor id {}\", request.getProcessBundleDescriptorId());\n+    LOG.warn(\n+        \"getProcessBundleDescriptor result {}\",\n+        client.getProcessBundleDescriptor(request.getProcessBundleDescriptorId()));", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NjY0Ng==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401946646", "bodyText": "We should check that we are not closed.", "author": "lukecwik", "createdAt": "2020-04-01T22:27:09Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientPoolService.java", "diffHunk": "@@ -105,12 +105,38 @@ public static FnApiControlClientPoolService offeringClientsToPool(\n     return newClient.asResponseObserver();\n   }\n \n+  @Override\n+  public void getProcessBundleDescriptor(\n+      BeamFnApi.GetProcessBundleDescriptorRequest request,\n+      StreamObserver<BeamFnApi.ProcessBundleDescriptor> responseObserver) {\n+    final String workerId = headerAccessor.getSdkWorkerId();\n+    if (Strings.isNullOrEmpty(workerId)) {", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0ODA0MQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401948041", "bodyText": "if we can, we should test the registration lookup failure case.\nThe success case will be easily be covered by other tests.", "author": "lukecwik", "createdAt": "2020-04-01T22:30:31Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker_test.py", "diffHunk": "@@ -115,8 +115,9 @@ def _check_fn_registration_multi_request(self, *args):\n           {item.id: item\n            for item in process_bundle_descriptors})\n \n-  def test_fn_registration(self):\n-    self._check_fn_registration_multi_request((1, 4), (4, 4))\n+\n+#   def test_fn_registration(self):\n+#     self._check_fn_registration_multi_request((1, 4), (4, 4))", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0ODY2NQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401948665", "bodyText": "You might as well and implement the UnaryStreamClientInterceptor and StreamUnaryClientInterceptor now.", "author": "lukecwik", "createdAt": "2020-04-01T22:32:09Z", "path": "sdks/python/apache_beam/runners/worker/worker_id_interceptor.py", "diffHunk": "@@ -48,17 +49,23 @@ def __init__(self, worker_id=None):\n     if worker_id:\n       self._worker_id = worker_id\n \n+  def intercept_unary_unary(self, continuation, client_call_details, request):", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MjE5MQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401952191", "bodyText": "Hmm, each RPC will need to pass the worker_id which is a minor argument for bidi stream but not worth the complexity of it compared to the unary RPC. We also don't expect this to happen a lot.", "author": "lukecwik", "createdAt": "2020-04-01T22:41:47Z", "path": "sdks/python/apache_beam/runners/worker/worker_id_interceptor.py", "diffHunk": "@@ -48,17 +49,23 @@ def __init__(self, worker_id=None):\n     if worker_id:\n       self._worker_id = worker_id\n \n+  def intercept_unary_unary(self, continuation, client_call_details, request):\n+    return self._intercept(continuation, client_call_details, request)", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MjYwOQ==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401952609", "bodyText": "Please add failure tests to FnApiControlClientPoolService for NOT_FOUND and missing worker id.", "author": "lukecwik", "createdAt": "2020-04-01T22:42:52Z", "path": "runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientPoolService.java", "diffHunk": "@@ -105,12 +105,38 @@ public static FnApiControlClientPoolService offeringClientsToPool(\n     return newClient.asResponseObserver();\n   }\n \n+  @Override\n+  public void getProcessBundleDescriptor(", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDYyMw==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401954623", "bodyText": "What appears in the default dict if GetProcessBundleDescriptor raises an error because the call fails?\nDoes it get propagated to the caller and it fails processing the bundle (is anything left in the map)?", "author": "lukecwik", "createdAt": "2020-04-01T22:48:33Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -112,7 +113,11 @@ def __init__(self,\n     self._state_handler_factory = GrpcStateHandlerFactory(\n         self._state_cache, credentials)\n     self._profiler_factory = profiler_factory\n-    self._fns = {}  # type: Dict[str, beam_fn_api_pb2.ProcessBundleDescriptor]\n+    self._fns = KeyedDefaultDict(\n+        lambda id: self._control_stub.GetProcessBundleDescriptor(\n+            beam_fn_api_pb2.GetProcessBundleDescriptorRequest(", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NjY4NA==", "url": "https://github.com/apache/beam/pull/11235#discussion_r402086684", "bodyText": "The error gets raised and nothing gets into the map.", "author": "robertwb", "createdAt": "2020-04-02T06:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDYyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTUwMw==", "url": "https://github.com/apache/beam/pull/11235#discussion_r401955503", "bodyText": "test?", "author": "lukecwik", "createdAt": "2020-04-01T22:50:49Z", "path": "sdks/python/apache_beam/runners/worker/worker_id_interceptor.py", "diffHunk": "@@ -35,7 +35,8 @@ class _ClientCallDetails(collections.namedtuple(\n   pass\n \n \n-class WorkerIdInterceptor(grpc.StreamStreamClientInterceptor):\n+class WorkerIdInterceptor(grpc.UnaryUnaryClientInterceptor,", "originalCommit": "3b986380e56cc58a29264bb2e37cef7d415b6528", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0MTc0Nw==", "url": "https://github.com/apache/beam/pull/11235#discussion_r404241747", "bodyText": "Validate the \"not found\" shows up in the status message and/or status code to ensure that we got the right StatusException", "author": "lukecwik", "createdAt": "2020-04-06T16:52:25Z", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientPoolServiceTest.java", "diffHunk": "@@ -120,4 +121,16 @@ public void onCompleted() {\n     latch.await();\n     assertThat(sawComplete.get(), is(true));\n   }\n+\n+  @Test\n+  public void testUnknownBundle() throws Exception {\n+    BeamFnApi.GetProcessBundleDescriptorRequest request =\n+        BeamFnApi.GetProcessBundleDescriptorRequest.newBuilder()\n+            .setProcessBundleDescriptorId(\"missing\")\n+            .build();\n+    StreamObserver<BeamFnApi.ProcessBundleDescriptor> responseObserver = mock(StreamObserver.class);\n+    controlService.getProcessBundleDescriptor(request, responseObserver);\n+\n+    verify(responseObserver).onError(any(StatusException.class));", "originalCommit": "71dbda7bc3b2c82c35bef75789b80ff64702723f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0MjA0Nw==", "url": "https://github.com/apache/beam/pull/11235#discussion_r404242047", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testRegisterNundle() {\n          \n          \n            \n              public void testRegisterBundle() {", "author": "lukecwik", "createdAt": "2020-04-06T16:52:52Z", "path": "runners/java-fn-execution/src/test/java/org/apache/beam/runners/fnexecution/control/FnApiControlClientTest.java", "diffHunk": "@@ -175,4 +179,23 @@ public void testOnCloseMultipleListener() throws Exception {\n     verify(mockConsumer1).accept(client);\n     verify(mockConsumer2).accept(client);\n   }\n+\n+  @Test\n+  public void testRegisterNundle() {", "originalCommit": "71dbda7bc3b2c82c35bef75789b80ff64702723f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1cb79b83712b8244a18935fe714cb04fbb2a4d34", "url": "https://github.com/apache/beam/commit/1cb79b83712b8244a18935fe714cb04fbb2a4d34", "message": "[BEAM-9618] Add protocol for requesting process bundle descriptors.", "committedDate": "2020-04-06T17:45:42Z", "type": "commit"}, {"oid": "fe5f6698155bdab45d5eab40dc1a439882717b28", "url": "https://github.com/apache/beam/commit/fe5f6698155bdab45d5eab40dc1a439882717b28", "message": "[BEAM-9618] Update Python to support process bundle descriptor fetching.", "committedDate": "2020-04-06T17:46:07Z", "type": "commit"}, {"oid": "1c7f83deabdf655185f9bfaed7a75938ff8552d2", "url": "https://github.com/apache/beam/commit/1c7f83deabdf655185f9bfaed7a75938ff8552d2", "message": "[BEAM-9618] Java FnApiClient support for process bundle descriptor pulling.", "committedDate": "2020-04-06T17:46:26Z", "type": "commit"}, {"oid": "1c7f83deabdf655185f9bfaed7a75938ff8552d2", "url": "https://github.com/apache/beam/commit/1c7f83deabdf655185f9bfaed7a75938ff8552d2", "message": "[BEAM-9618] Java FnApiClient support for process bundle descriptor pulling.", "committedDate": "2020-04-06T17:46:26Z", "type": "forcePushed"}, {"oid": "48fb2e67da03951069aa2c5960185ce740acb644", "url": "https://github.com/apache/beam/commit/48fb2e67da03951069aa2c5960185ce740acb644", "message": "Typo fix.", "committedDate": "2020-04-06T18:53:59Z", "type": "commit"}]}