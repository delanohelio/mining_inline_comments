{"pr_number": 13277, "pr_title": "[BEAM-10921] Add the UserPipelineTracker to track user pipelines for derived pipelines", "pr_createdAt": "2020-11-06T20:19:34Z", "pr_url": "https://github.com/apache/beam/pull/13277", "timeline": [{"oid": "1289c0ca904247c7c8e4c57c05019328229ecb04", "url": "https://github.com/apache/beam/commit/1289c0ca904247c7c8e4c57c05019328229ecb04", "message": "[BEAM-10921] Add the DerivationTree to track derived pipelines from user pipelines.", "committedDate": "2020-11-06T21:14:57Z", "type": "commit"}, {"oid": "1289c0ca904247c7c8e4c57c05019328229ecb04", "url": "https://github.com/apache/beam/commit/1289c0ca904247c7c8e4c57c05019328229ecb04", "message": "[BEAM-10921] Add the DerivationTree to track derived pipelines from user pipelines.", "committedDate": "2020-11-06T21:14:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMDY4OA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r519030688", "bodyText": "Nit: should it be memorize?", "author": "KevinGG", "createdAt": "2020-11-06T22:10:49Z", "path": "sdks/python/apache_beam/runners/interactive/derivation_tree.py", "diffHunk": "@@ -0,0 +1,136 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Class that tracks derived/pipeline fragments from user pipelines.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+In the InteractiveRunner the design is to keep the user pipeline unchanged,\n+create a copy of the user pipeline, and modify the copy. When the derived\n+pipeline runs, there should only be per-user pipeline state. This makes sure\n+that derived pipelines can link back to the parent user pipeline.\n+\"\"\"\n+# pytype: skip-file\n+\n+\n+class DerivationTree:\n+  \"\"\"Tracks which pipelines are derived from user pipelines.\n+\n+  This data structure is similar to a disjoint set data structure. A derived\n+  pipeline can only have one parent user pipeline. A user pipeline can have many\n+  derived pipelines.\n+  \"\"\"\n+  class Node:\n+    \"\"\"Object to track the relationship between user to derived pipelines.\"\"\"\n+    def __init__(self):\n+      self.user_pipeline = None\n+      self.derived_pipelines = set()\n+\n+  def __init__(self):\n+    self._tree = {}\n+    self._pid_to_pipelines = {}\n+\n+  def __iter__(self):\n+    \"\"\"Iterates through all the user pipelines.\"\"\"\n+    for n in self._tree.values():\n+      yield n.user_pipeline\n+\n+  def _key(self, pipeline):\n+    return str(id(pipeline))\n+\n+  def clear(self):\n+    \"\"\"Clears the tree of all user and derived pipelines.\"\"\"\n+    self._tree.clear()\n+\n+  def get_pipeline(self, pid):\n+    \"\"\"Returns the pipeline corresponding to the given pipeline id.\"\"\"\n+    if pid in self._pid_to_pipelines:\n+      return self._pid_to_pipelines[pid]\n+    return None\n+\n+  def add_user_pipeline(self, p):\n+    \"\"\"Adds a user pipeline with an empty set of derived pipelines.\"\"\"\n+    self._memoize_pipieline(p)", "originalCommit": "1289c0ca904247c7c8e4c57c05019328229ecb04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MDYwOQ==", "url": "https://github.com/apache/beam/pull/13277#discussion_r519050609", "bodyText": "No, memoize means to cache results.", "author": "rohdesamuel", "createdAt": "2020-11-06T23:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMDY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTY5Nw==", "url": "https://github.com/apache/beam/pull/13277#discussion_r519069697", "bodyText": "What is the use case of this? I was wondering whether we could just implement this using a two-way map (i.e. map from user pipeline to multiple derived pipelines and from derived pipeline to user pipeline).", "author": "davidyan74", "createdAt": "2020-11-07T00:40:59Z", "path": "sdks/python/apache_beam/runners/interactive/derivation_tree_test.py", "diffHunk": "@@ -0,0 +1,181 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import apache_beam as beam\n+from apache_beam.runners.interactive.derivation_tree import DerivationTree\n+\n+\n+class DerivationTreeTest(unittest.TestCase):\n+  def test_getting_unknown_pid_returns_none(self):\n+    dt = DerivationTree()\n+\n+    p = beam.Pipeline()\n+\n+    self.assertIsNone(dt.get_pipeline(str(id(p))))\n+\n+  def test_getting_unknown_pipeline_returns_none(self):\n+    dt = DerivationTree()\n+\n+    p = beam.Pipeline()\n+\n+    self.assertIsNone(dt.get_user_pipeline(p))\n+\n+  def test_no_parent_returns_none(self):\n+    dt = DerivationTree()\n+\n+    user = beam.Pipeline()\n+    derived = beam.Pipeline()\n+    orphan = beam.Pipeline()\n+\n+    dt.add_derived_pipeline(user, derived)\n+\n+    self.assertIsNone(dt.get_user_pipeline(orphan))\n+\n+  def test_get_user_pipeline_is_same(self):\n+    dt = DerivationTree()\n+\n+    p = beam.Pipeline()\n+    dt.add_user_pipeline(p)\n+\n+    self.assertIs(dt.get_user_pipeline(p), p)\n+\n+  def test_can_add_derived(self):\n+    dt = DerivationTree()\n+\n+    user = beam.Pipeline()\n+    derived = beam.Pipeline()\n+\n+    dt.add_derived_pipeline(user, derived)\n+\n+    self.assertIs(dt.get_user_pipeline(derived), user)\n+\n+  def test_can_add_multiple_derived(self):\n+    \"\"\"Tests that there can be many user pipelines with many derived\n+    pipelines.\n+    \"\"\"\n+    dt = DerivationTree()\n+\n+    # Add the first set of user and derived pipelines.\n+    user1 = beam.Pipeline()\n+    derived11 = beam.Pipeline()\n+    derived12 = beam.Pipeline()\n+\n+    dt.add_derived_pipeline(user1, derived11)\n+    dt.add_derived_pipeline(user1, derived12)\n+\n+    # Add the second set of user and derived pipelines.\n+    user2 = beam.Pipeline()\n+    derived21 = beam.Pipeline()\n+    derived22 = beam.Pipeline()\n+\n+    dt.add_derived_pipeline(user2, derived21)\n+    dt.add_derived_pipeline(user2, derived22)\n+\n+    # Assert that the user pipelines are correct.\n+    self.assertIs(dt.get_user_pipeline(derived11), user1)\n+    self.assertIs(dt.get_user_pipeline(derived12), user1)\n+    self.assertIs(dt.get_user_pipeline(derived21), user2)\n+    self.assertIs(dt.get_user_pipeline(derived22), user2)\n+\n+  def test_cannot_have_multiple_parents(self):\n+    dt = DerivationTree()\n+\n+    user1 = beam.Pipeline()\n+    user2 = beam.Pipeline()\n+    derived = beam.Pipeline()\n+\n+    dt.add_derived_pipeline(user1, derived)\n+    dt.add_derived_pipeline(user2, derived)\n+\n+    self.assertIs(dt.get_user_pipeline(derived), user1)\n+\n+  def test_adding_derived_with_derived_gets_user_pipeline(self):\n+    \"\"\"Tests that one can correctly add a derived pipeline from a derived\n+    pipeline and still get the correct user pipeline.\n+    \"\"\"\n+    dt = DerivationTree()\n+\n+    user = beam.Pipeline()\n+    derived1 = beam.Pipeline()\n+    derived2 = beam.Pipeline()\n+\n+    # Add the first derived pipeline to the user pipelne.\n+    dt.add_derived_pipeline(user, derived1)\n+\n+    # Add the second derived pipeline to the first derived pipeline. This should\n+    # get the user pipeline of the first and add the second to it.\n+    dt.add_derived_pipeline(derived1, derived2)", "originalCommit": "1289c0ca904247c7c8e4c57c05019328229ecb04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1MTU2NA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r520151564", "bodyText": "Good idea, I simplified the implementation to do away with the Node. So the use case for this is mainly safety. This allows a safety guarantee that you do not have to know the exact user pipeline at all times.", "author": "rohdesamuel", "createdAt": "2020-11-09T22:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1ODMwOQ==", "url": "https://github.com/apache/beam/pull/13277#discussion_r520758309", "bodyText": "Thanks for the simplification! Should we still call this a tree?", "author": "davidyan74", "createdAt": "2020-11-10T17:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMjgyOA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r520812828", "bodyText": "Renamed DerivationTree -> UserPipelineTracker", "author": "rohdesamuel", "createdAt": "2020-11-10T19:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2OTY5Nw=="}], "type": "inlineReview"}, {"oid": "1299cf9f8f492797bc135abb2bc3de0ffc3b6af6", "url": "https://github.com/apache/beam/commit/1299cf9f8f492797bc135abb2bc3de0ffc3b6af6", "message": "Simplify DerivationTree implementation", "committedDate": "2020-11-09T22:01:31Z", "type": "commit"}, {"oid": "e549e3dcdad07e482125369530d60a991a0fe320", "url": "https://github.com/apache/beam/commit/e549e3dcdad07e482125369530d60a991a0fe320", "message": "Rename DerivationTree to UserPipelineTracker", "committedDate": "2020-11-10T19:13:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTQwMA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521555400", "bodyText": "Nit: you can write this as self._pid_to_pipelines.get(pid, None)\n(nit, meaning not a must)", "author": "pabloem", "createdAt": "2020-11-11T18:26:16Z", "path": "sdks/python/apache_beam/runners/interactive/user_pipeline_tracker.py", "diffHunk": "@@ -0,0 +1,132 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Class that tracks derived/pipeline fragments from user pipelines.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+In the InteractiveRunner the design is to keep the user pipeline unchanged,\n+create a copy of the user pipeline, and modify the copy. When the derived\n+pipeline runs, there should only be per-user pipeline state. This makes sure\n+that derived pipelines can link back to the parent user pipeline.\n+\"\"\"\n+# pytype: skip-file\n+\n+\n+class UserPipelineTracker:\n+  \"\"\"Tracks user pipelines from derived pipelines.\n+\n+  This data structure is similar to a disjoint set data structure. A derived\n+  pipeline can only have one parent user pipeline. A user pipeline can have many\n+  derived pipelines.\n+  \"\"\"\n+  def __init__(self):\n+    self._user_pipelines = set()\n+    self._derived_pipelines = {}\n+    self._pid_to_pipelines = {}\n+\n+  def __iter__(self):\n+    \"\"\"Iterates through all the user pipelines.\"\"\"\n+    for p in self._user_pipelines:\n+      yield p\n+\n+  def _key(self, pipeline):\n+    return str(id(pipeline))\n+\n+  def clear(self):\n+    \"\"\"Clears the tracker of all user and derived pipelines.\"\"\"\n+    self._user_pipelines.clear()\n+    self._derived_pipelines.clear()\n+    self._pid_to_pipelines.clear()\n+\n+  def get_pipeline(self, pid):\n+    \"\"\"Returns the pipeline corresponding to the given pipeline id.\"\"\"\n+    if pid in self._pid_to_pipelines:\n+      return self._pid_to_pipelines[pid]\n+    return None", "originalCommit": "e549e3dcdad07e482125369530d60a991a0fe320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1ODc5MA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521758790", "bodyText": "Done", "author": "rohdesamuel", "createdAt": "2020-11-12T01:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1OTM0OQ==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521559349", "bodyText": "could you add type annotations to these? that would help figure out when we're using the str(id()) and when the object itself, etc.\nWe're full on Python 3, so you can add them like here; https://docs.python.org/3/library/typing.html", "author": "pabloem", "createdAt": "2020-11-11T18:33:41Z", "path": "sdks/python/apache_beam/runners/interactive/user_pipeline_tracker.py", "diffHunk": "@@ -0,0 +1,132 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+\"\"\"Class that tracks derived/pipeline fragments from user pipelines.\n+\n+For internal use only; no backwards-compatibility guarantees.\n+In the InteractiveRunner the design is to keep the user pipeline unchanged,\n+create a copy of the user pipeline, and modify the copy. When the derived\n+pipeline runs, there should only be per-user pipeline state. This makes sure\n+that derived pipelines can link back to the parent user pipeline.\n+\"\"\"\n+# pytype: skip-file\n+\n+\n+class UserPipelineTracker:\n+  \"\"\"Tracks user pipelines from derived pipelines.\n+\n+  This data structure is similar to a disjoint set data structure. A derived\n+  pipeline can only have one parent user pipeline. A user pipeline can have many\n+  derived pipelines.\n+  \"\"\"\n+  def __init__(self):\n+    self._user_pipelines = set()\n+    self._derived_pipelines = {}\n+    self._pid_to_pipelines = {}", "originalCommit": "e549e3dcdad07e482125369530d60a991a0fe320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNDE0Mw==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521704143", "bodyText": "fwiw - I recommend you try to add typehints everywhere going forward. these will be super useful.", "author": "pabloem", "createdAt": "2020-11-11T23:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1OTM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1ODc0Ng==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521758746", "bodyText": "Yay! Added type annotations", "author": "rohdesamuel", "createdAt": "2020-11-12T01:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1OTM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNTc3NQ==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521705775", "bodyText": "I wonder if this should throw an exception instead of silently failing?", "author": "pabloem", "createdAt": "2020-11-11T23:38:32Z", "path": "sdks/python/apache_beam/runners/interactive/user_pipeline_tracker_test.py", "diffHunk": "@@ -0,0 +1,181 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+from __future__ import absolute_import\n+\n+import unittest\n+\n+import apache_beam as beam\n+from apache_beam.runners.interactive.user_pipeline_tracker import UserPipelineTracker\n+\n+\n+class UserPipelineTrackerTest(unittest.TestCase):\n+  def test_getting_unknown_pid_returns_none(self):\n+    ut = UserPipelineTracker()\n+\n+    p = beam.Pipeline()\n+\n+    self.assertIsNone(ut.get_pipeline(str(id(p))))\n+\n+  def test_getting_unknown_pipeline_returns_none(self):\n+    ut = UserPipelineTracker()\n+\n+    p = beam.Pipeline()\n+\n+    self.assertIsNone(ut.get_user_pipeline(p))\n+\n+  def test_no_parent_returns_none(self):\n+    ut = UserPipelineTracker()\n+\n+    user = beam.Pipeline()\n+    derived = beam.Pipeline()\n+    orphan = beam.Pipeline()\n+\n+    ut.add_derived_pipeline(user, derived)\n+\n+    self.assertIsNone(ut.get_user_pipeline(orphan))\n+\n+  def test_get_user_pipeline_is_same(self):\n+    ut = UserPipelineTracker()\n+\n+    p = beam.Pipeline()\n+    ut.add_user_pipeline(p)\n+\n+    self.assertIs(ut.get_user_pipeline(p), p)\n+\n+  def test_can_add_derived(self):\n+    ut = UserPipelineTracker()\n+\n+    user = beam.Pipeline()\n+    derived = beam.Pipeline()\n+\n+    ut.add_derived_pipeline(user, derived)\n+\n+    self.assertIs(ut.get_user_pipeline(derived), user)\n+\n+  def test_can_add_multiple_derived(self):\n+    \"\"\"Tests that there can be many user pipelines with many derived\n+    pipelines.\n+    \"\"\"\n+    ut = UserPipelineTracker()\n+\n+    # Add the first set of user and derived pipelines.\n+    user1 = beam.Pipeline()\n+    derived11 = beam.Pipeline()\n+    derived12 = beam.Pipeline()\n+\n+    ut.add_derived_pipeline(user1, derived11)\n+    ut.add_derived_pipeline(user1, derived12)\n+\n+    # Add the second set of user and derived pipelines.\n+    user2 = beam.Pipeline()\n+    derived21 = beam.Pipeline()\n+    derived22 = beam.Pipeline()\n+\n+    ut.add_derived_pipeline(user2, derived21)\n+    ut.add_derived_pipeline(user2, derived22)\n+\n+    # Assert that the user pipelines are correct.\n+    self.assertIs(ut.get_user_pipeline(derived11), user1)\n+    self.assertIs(ut.get_user_pipeline(derived12), user1)\n+    self.assertIs(ut.get_user_pipeline(derived21), user2)\n+    self.assertIs(ut.get_user_pipeline(derived22), user2)\n+\n+  def test_cannot_have_multiple_parents(self):\n+    ut = UserPipelineTracker()\n+\n+    user1 = beam.Pipeline()\n+    user2 = beam.Pipeline()\n+    derived = beam.Pipeline()\n+\n+    ut.add_derived_pipeline(user1, derived)\n+    ut.add_derived_pipeline(user2, derived)", "originalCommit": "e549e3dcdad07e482125369530d60a991a0fe320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNjUxNA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521706514", "bodyText": "or perhaps the return value should communicate this somehow", "author": "pabloem", "createdAt": "2020-11-11T23:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNTc3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc1ODY2Nw==", "url": "https://github.com/apache/beam/pull/13277#discussion_r521758667", "bodyText": "Added an exception", "author": "rohdesamuel", "createdAt": "2020-11-12T01:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNTc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMTg3Ng==", "url": "https://github.com/apache/beam/pull/13277#discussion_r522421876", "bodyText": "these would be Dict[str, beam.Pipeline], right?", "author": "pabloem", "createdAt": "2020-11-12T20:58:05Z", "path": "sdks/python/apache_beam/runners/interactive/user_pipeline_tracker.py", "diffHunk": "@@ -34,31 +38,29 @@ class UserPipelineTracker:\n   derived pipelines.\n   \"\"\"\n   def __init__(self):\n-    self._user_pipelines = set()\n-    self._derived_pipelines = {}\n-    self._pid_to_pipelines = {}\n+    self._user_pipelines: set[beam.Pipeline] = set()\n+    self._derived_pipelines: map[beam.Pipeline] = {}\n+    self._pid_to_pipelines: map[beam.Pipeline] = {}", "originalCommit": "51c3e244a5ff05fda3422b99dbd9709322da89a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMjE5OA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r522422198", "bodyText": "the maps\nPrecommit has been fixed on master so your next commit should not have the botocore precommit issues", "author": "pabloem", "createdAt": "2020-11-12T20:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MDc5NA==", "url": "https://github.com/apache/beam/pull/13277#discussion_r522480794", "bodyText": "done", "author": "rohdesamuel", "createdAt": "2020-11-12T22:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQyMTg3Ng=="}], "type": "inlineReview"}, {"oid": "69eb580230ef372fc1c2334cd0f0fe431262c1a5", "url": "https://github.com/apache/beam/commit/69eb580230ef372fc1c2334cd0f0fe431262c1a5", "message": "Add type annotations", "committedDate": "2020-11-12T22:46:54Z", "type": "commit"}, {"oid": "69eb580230ef372fc1c2334cd0f0fe431262c1a5", "url": "https://github.com/apache/beam/commit/69eb580230ef372fc1c2334cd0f0fe431262c1a5", "message": "Add type annotations", "committedDate": "2020-11-12T22:46:54Z", "type": "forcePushed"}]}