{"pr_number": 12883, "pr_title": "[BEAM-7746] Add more typing to metrics", "pr_createdAt": "2020-09-20T08:36:57Z", "pr_url": "https://github.com/apache/beam/pull/12883", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDYzOA==", "url": "https://github.com/apache/beam/pull/12883#discussion_r491714638", "bodyText": "can't override a method", "author": "chadrik", "createdAt": "2020-09-20T17:40:59Z", "path": "sdks/python/apache_beam/metrics/metric.py", "diffHunk": "@@ -101,23 +121,26 @@ def gauge(namespace, name):\n   class DelegatingCounter(Counter):\n     \"\"\"Metrics Counter that Delegates functionality to MetricsEnvironment.\"\"\"\n     def __init__(self, metric_name):\n+      # type: (MetricName) -> None\n       super(Metrics.DelegatingCounter, self).__init__()\n       self.metric_name = metric_name\n-      self.inc = MetricUpdater(cells.CounterCell, metric_name, default=1)\n+      self.inc = MetricUpdater(cells.CounterCell, metric_name, default=1)  # type: ignore[assignment]", "originalCommit": "a7ca8527b4a19e05ac5fde7cdd2a2d1a74c85f17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwOTQ4NA==", "url": "https://github.com/apache/beam/pull/12883#discussion_r495109484", "bodyText": "Is it not possible to override the behaviour by assigning self.inc to something else in the subclass?\nNot saying I am a fan of this pattern or anything. But I think its still possible to override it that way\n(Though I don't think it should be addressed in this PR)", "author": "ajamato", "createdAt": "2020-09-25T16:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxNzE0MQ==", "url": "https://github.com/apache/beam/pull/12883#discussion_r495317141", "bodyText": "Here's the workaround:\n  class DelegatingCounter(Counter):\n    \"\"\"Metrics Counter that Delegates functionality to MetricsEnvironment.\"\"\"\n    def __init__(self, metric_name):\n      # type: (MetricName) -> None\n      super(Metrics.DelegatingCounter, self).__init__(metric_name)\n      self._inc = MetricUpdater(cells.CounterCell, metric_name, default=1)\n\n    def inc(value=None):\n      self._inc(value)\nI don't know the reasoning behind this limitation.  Even the simplest scenario fails on the latest version of mypy:\nclass Foo(object):\n  x = None  # type: Callable[[], None]\n\ndef blah():\n  # type: () -> None\n  pass\n\nclass Bar(Foo):\n  def __init__(self):\n    # type: () -> None\n    self.x = blah\nNote that it does work without complaint if the callable is defined on the class:\nclass Bar(Foo):\n   x = blah\nbut we can't do that because MetricUpdater needs the metric_name.\nSo, since what's being done in this metrics code is valid python, I thought ignoring the error was the most expedient path.  If mypy fixes this in a future version, these lines will generate an \"unused type ignore\" error and we can get rid of them.", "author": "chadrik", "createdAt": "2020-09-25T23:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU2OTkyOA==", "url": "https://github.com/apache/beam/pull/12883#discussion_r498569928", "bodyText": "Yes, please go ahead and ignore this error. (Note also that this code is structured in this way for performance reasons; previously we had pipelines where the bulk of the CPU was spent in generic counter update code, whereas here MetricUpdater is as fast as possible for incrementing an int).", "author": "robertwb", "createdAt": "2020-10-02T00:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDc2NA==", "url": "https://github.com/apache/beam/pull/12883#discussion_r491714764", "bodyText": "there seems to be an assumption that this attribute exists.  should we give this class an __init__ that takes a metric_name argument?", "author": "chadrik", "createdAt": "2020-09-20T17:42:12Z", "path": "sdks/python/apache_beam/metrics/metricbase.py", "diffHunk": "@@ -78,7 +80,7 @@ def __hash__(self):\n \n class Metric(object):\n   \"\"\"Base interface of a metric object.\"\"\"\n-  pass\n+  metric_name = None  # type: MetricName", "originalCommit": "a7ca8527b4a19e05ac5fde7cdd2a2d1a74c85f17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NDM4OQ==", "url": "https://github.com/apache/beam/pull/12883#discussion_r494684389", "bodyText": "I think it exists due to some double inheritance. @ajamato what is the best solution here?", "author": "robertwb", "createdAt": "2020-09-25T00:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMDA3NQ==", "url": "https://github.com/apache/beam/pull/12883#discussion_r495120075", "bodyText": "Its not due to multiple inheritance, its just self.metric_name is simply not set in the base Metric class, but only in the DelegatingCounter, DelegatingDistribution and DelegatingGauge class. (Which have an init which takes a metric_name and assigns it to self). The rest of the code in the repo is assuming self.metric_name is set, as they only deal with the subclasses.\nI recommend adding init with a metric_name parameter to Metric and its subclasses (Counter, Distribution and Gauge). This already exists on DelegatingX classes, but could be done in the base Metric init instead.\nAlso,\nIf it were up to me we would remove Counter, Distribution and Gauge classes and just have the DelegatingCounter DelegatingDistribution and DelegatingGauge classes.\nThough, I am unsure if some external implementation to the beam repo uses those classes (Counter, Distribution and Gauge).", "author": "ajamato", "createdAt": "2020-09-25T17:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxODYzNg==", "url": "https://github.com/apache/beam/pull/12883#discussion_r495318636", "bodyText": "I recommend adding init with a metric_name parameter to Metric and its subclasses (Counter, Distribution and Gauge). This already exists on DelegatingX classes, but could be done in the base Metric init instead.\n\nAdding metric_name to Metric.__init__ definitely seems like the best solution to me, so I did that.\n\nIf it were up to me we would remove Counter, Distribution and Gauge classes and just have the DelegatingCounter DelegatingDistribution and DelegatingGauge classes.\n\nLeaving this for a future task.", "author": "chadrik", "createdAt": "2020-09-25T23:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzNjcyMQ==", "url": "https://github.com/apache/beam/pull/12883#discussion_r495336721", "bodyText": "Sounds good. I wouldn't want to scope\u00a0creep that into your PR. Definitely\u00a0for another day :).", "author": "ajamato", "createdAt": "2020-09-26T00:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNDc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExMDM0Nw==", "url": "https://github.com/apache/beam/pull/12883#discussion_r495110347", "bodyText": "I don't really undersand the reason for the conditional import. Whether or not TYPE_CHECKING is enabled, this file still depends on MetricName", "author": "ajamato", "createdAt": "2020-09-25T16:46:44Z", "path": "sdks/python/apache_beam/metrics/cells.py", "diffHunk": "@@ -29,8 +29,12 @@\n import threading\n import time\n from builtins import object\n+from typing import TYPE_CHECKING\n from typing import Optional\n \n+if TYPE_CHECKING:\n+  from apache_beam.metrics.metricbase import MetricName", "originalCommit": "a7ca8527b4a19e05ac5fde7cdd2a2d1a74c85f17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxNzI1Mg==", "url": "https://github.com/apache/beam/pull/12883#discussion_r495317252", "bodyText": "leftover cruft. fixed", "author": "chadrik", "createdAt": "2020-09-25T23:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExMDM0Nw=="}], "type": "inlineReview"}, {"oid": "aebad5c8b926eed450a7f6dc4a1bcb0d4cc68e22", "url": "https://github.com/apache/beam/commit/aebad5c8b926eed450a7f6dc4a1bcb0d4cc68e22", "message": "[BEAM-7746] Add more typing to metrics", "committedDate": "2020-10-02T03:10:30Z", "type": "commit"}, {"oid": "aebad5c8b926eed450a7f6dc4a1bcb0d4cc68e22", "url": "https://github.com/apache/beam/commit/aebad5c8b926eed450a7f6dc4a1bcb0d4cc68e22", "message": "[BEAM-7746] Add more typing to metrics", "committedDate": "2020-10-02T03:10:30Z", "type": "forcePushed"}]}