{"pr_number": 12488, "pr_title": "[BEAM-10656] Enable bundle finalization within the Java direct runner.", "pr_createdAt": "2020-08-06T22:29:48Z", "pr_url": "https://github.com/apache/beam/pull/12488", "timeline": [{"oid": "2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "url": "https://github.com/apache/beam/commit/2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "message": "[BEAM-10656] Enable bundle finalization within the Java direct runner.\n\nThis is towards making all UnboundedSources execute as splittable dofns within the direct runner using the SDF unbounded source wrapper since it relies on bundle finalization to handle checkpoints.", "committedDate": "2020-08-07T16:47:52Z", "type": "commit"}, {"oid": "2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "url": "https://github.com/apache/beam/commit/2eae08fa6d273c5ebf55696f4a9ec7d09728d702", "message": "[BEAM-10656] Enable bundle finalization within the Java direct runner.\n\nThis is towards making all UnboundedSources execute as splittable dofns within the direct runner using the SDF unbounded source wrapper since it relies on bundle finalization to handle checkpoints.", "committedDate": "2020-08-07T16:47:52Z", "type": "forcePushed"}, {"oid": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "url": "https://github.com/apache/beam/commit/9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "message": "fixup! checkstyle", "committedDate": "2020-08-07T20:33:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzA2MQ==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467307061", "bodyText": "Why do we need to trigger the callbacks here?", "author": "ibzib", "createdAt": "2020-08-07T22:07:51Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :\n+        bundleFinalizer.getAndClearFinalizations()) {\n+      finalization.getCallback().onBundleSuccess();", "originalCommit": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNjgwNA==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467326804", "bodyText": "We don't. I originally thought we did for some reason since I was changing this code together. I removed it and instead throw if it is ever accessed.", "author": "lukecwik", "createdAt": "2020-08-07T23:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzg3Mw==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467307873", "bodyText": "Can we make any assertions about the finalizations? ie Can we expect that they're not empty?", "author": "ibzib", "createdAt": "2020-08-07T22:10:51Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvokerTest.java", "diffHunk": "@@ -126,23 +128,30 @@ public void outputWindowedValue(\n             NullSideInputReader.empty(),\n             Executors.newSingleThreadScheduledExecutor(),\n             1000,\n-            Duration.standardSeconds(3));\n-\n-    return invoker.invokeProcessElement(\n-        DoFnInvokers.invokerFor(fn),\n-        WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n-        new OffsetRangeTracker(initialRestriction),\n-        new WatermarkEstimator<Void>() {\n-          @Override\n-          public Instant currentWatermark() {\n-            return GlobalWindow.TIMESTAMP_MIN_VALUE;\n-          }\n+            Duration.standardSeconds(3),\n+            () -> bundleFinalizer);\n+\n+    SplittableProcessElementInvoker.Result rval =\n+        invoker.invokeProcessElement(\n+            DoFnInvokers.invokerFor(fn),\n+            WindowedValue.of(null, Instant.now(), GlobalWindow.INSTANCE, PaneInfo.NO_FIRING),\n+            new OffsetRangeTracker(initialRestriction),\n+            new WatermarkEstimator<Void>() {\n+              @Override\n+              public Instant currentWatermark() {\n+                return GlobalWindow.TIMESTAMP_MIN_VALUE;\n+              }\n \n-          @Override\n-          public Void getState() {\n-            return null;\n-          }\n-        });\n+              @Override\n+              public Void getState() {\n+                return null;\n+              }\n+            });\n+    for (InMemoryBundleFinalizer.Finalization finalization :", "originalCommit": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNjg0MQ==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467326841", "bodyText": "Not relevant anymore.", "author": "lukecwik", "createdAt": "2020-08-07T23:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwNzg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODQxMw==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467308413", "bodyText": "Why lazy-initialize? Is this just to save memory?", "author": "ibzib", "createdAt": "2020-08-07T22:12:57Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectExecutionContext.java", "diffHunk": "@@ -81,6 +89,22 @@ public DirectTimerInternals timerInternals() {\n       return timerInternals;\n     }\n \n+    @Override\n+    public BundleFinalizer bundleFinalizer() {\n+      if (bundleFinalizer == null) {\n+        bundleFinalizer = new InMemoryBundleFinalizer();", "originalCommit": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNDIwMg==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467324202", "bodyText": "yup since most transforms won't use the bundle finalizer", "author": "lukecwik", "createdAt": "2020-08-07T23:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDU5OQ==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467330599", "bodyText": "Line#37 says the implementation is not thread-safe. So I assume there is no need to consider concurrent access to this initialization, right?", "author": "amaliujia", "createdAt": "2020-08-07T23:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwODQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwOTUzOQ==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467309539", "bodyText": "I don't think logging only the finalization tells us enough. Can we log more information about the bundle itself?", "author": "ibzib", "createdAt": "2020-08-07T22:17:01Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {\n+        LOG.warn(\"Failed to finalize requested bundle {}\", finalization, e);", "originalCommit": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyODQxMQ==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467328411", "bodyText": "Added the completed bundle to the output.", "author": "lukecwik", "createdAt": "2020-08-07T23:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMwOTUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjExNA==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467312114", "bodyText": "Multiple callbacks are allowed, right? (If so, please reword this as \"at least one callback.\")", "author": "ibzib", "createdAt": "2020-08-07T22:27:09Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);\n+      }\n+    }\n+\n+    private static class BasicBundleFinalizingDoFn extends BundleFinalizingDoFn {\n+      @ProcessElement\n+      public void processElement(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        testFinalization(bundleFinalizer, output);\n+      }\n+    }\n+\n+    private static class BundleFinalizerOutputChecker\n+        implements SerializableFunction<Iterable<String>, Void> {\n+      @Override\n+      public Void apply(Iterable<String> input) {\n+        assertTrue(\n+            \"Expected to have received one callback enabling output to be produced but received none.\",", "originalCommit": "9a07e259e3dfbf8fd30fd3bfcc7075f96b93b10e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMzI5Mg==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467313292", "bodyText": "In other words, I'd like to clarify the assertion we're making about input and what it means.", "author": "ibzib", "createdAt": "2020-08-07T22:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyNDI1OA==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467324258", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-08-07T23:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjExNA=="}], "type": "inlineReview"}, {"oid": "08cd3ae42508ecbf5dc1556d25993ae508396a38", "url": "https://github.com/apache/beam/commit/08cd3ae42508ecbf5dc1556d25993ae508396a38", "message": "fixup! Address @ibzib PR comments.", "committedDate": "2020-08-07T23:31:24Z", "type": "commit"}, {"oid": "c88402d762d1c63b20b0f3ba68d074eb16c1ecc4", "url": "https://github.com/apache/beam/commit/c88402d762d1c63b20b0f3ba68d074eb16c1ecc4", "message": "fixup! Address PR comment", "committedDate": "2020-08-07T23:33:04Z", "type": "commit"}, {"oid": "5f1278ed2735f28fb7066156cb8fdceee412c786", "url": "https://github.com/apache/beam/commit/5f1278ed2735f28fb7066156cb8fdceee412c786", "message": "fixup! Address PR comments", "committedDate": "2020-08-07T23:38:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDc4Nw==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467330787", "bodyText": "Is is possible to make this Exception more specific? Or that does not add more values?", "author": "amaliujia", "createdAt": "2020-08-07T23:50:56Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/EvaluationContext.java", "diffHunk": "@@ -183,6 +188,15 @@ public void initialize(\n         committedResult.getUnprocessedInputs().orElse(null),\n         committedResult.getOutputs(),\n         result.getWatermarkHold());\n+\n+    // Callback and requested bundle finalizations\n+    for (InMemoryBundleFinalizer.Finalization finalization : result.getBundleFinalizations()) {\n+      try {\n+        finalization.getCallback().onBundleSuccess();\n+      } catch (Exception e) {", "originalCommit": "5f1278ed2735f28fb7066156cb8fdceee412c786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODQwNQ==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467358405", "bodyText": "This exception is to catch user thrown exceptions since the bundle finalizing callback is user written code this is why its so wide and it can't be narrowed.", "author": "lukecwik", "createdAt": "2020-08-08T04:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTU1MQ==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467331551", "bodyText": "nit: I am not sure if there are other ways, but such sleep might be a source of flakiness. E.g. prior callbacks not finish after 100L.", "author": "amaliujia", "createdAt": "2020-08-07T23:55:02Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/ParDoTest.java", "diffHunk": "@@ -1499,6 +1504,146 @@ public void populateDisplayData(Builder builder) {\n     }\n   }\n \n+  @RunWith(JUnit4.class)\n+  public static class BundleFinalizationTests extends SharedTestBase implements Serializable {\n+    private abstract static class BundleFinalizingDoFn extends DoFn<KV<String, Long>, String> {\n+      private static final long MAX_ATTEMPTS = 3000;\n+      // We use the UUID to uniquely identify this DoFn in case this test is run with\n+      // other tests in the same JVM.\n+      private static final Map<UUID, AtomicBoolean> WAS_FINALIZED = new HashMap();\n+      private final UUID uuid = UUID.randomUUID();\n+\n+      public void testFinalization(BundleFinalizer bundleFinalizer, OutputReceiver<String> output)\n+          throws Exception {\n+        if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+          output.output(\"bundle was finalized\");\n+          return;\n+        }\n+        bundleFinalizer.afterBundleCommit(\n+            Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n+        // We sleep here to give time for the runner to perform any prior callbacks.\n+        sleep(100L);", "originalCommit": "5f1278ed2735f28fb7066156cb8fdceee412c786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODUxNg==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467358516", "bodyText": "MAX_ATTEMPTS * timeout >= 300 seconds. I don't believe it should flake but if it does I'll have to figure out a different way to design this test.", "author": "lukecwik", "createdAt": "2020-08-08T04:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTY3OA==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467331678", "bodyText": "nit: same here.", "author": "amaliujia", "createdAt": "2020-08-07T23:55:43Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/SplittableDoFnTest.java", "diffHunk": "@@ -839,19 +845,20 @@ public ProcessContinuation process(\n         RestrictionTracker<OffsetRange, Long> tracker,\n         BundleFinalizer bundleFinalizer)\n         throws InterruptedException {\n-      if (wasFinalized.get()) {\n+      if (WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).get()) {\n+        tracker.tryClaim(tracker.currentRestriction().getFrom() + 1);\n+        receiver.output(element);\n         // Claim beyond the end now that we know we have been finalized.\n         tracker.tryClaim(Long.MAX_VALUE);\n-        receiver.output(element);\n         return stop();\n       }\n       if (tracker.tryClaim(tracker.currentRestriction().getFrom() + 1)) {\n         bundleFinalizer.afterBundleCommit(\n             Instant.now().plus(Duration.standardSeconds(MAX_ATTEMPTS)),\n-            () -> wasFinalized.set(true));\n+            () -> WAS_FINALIZED.computeIfAbsent(uuid, (unused) -> new AtomicBoolean()).set(true));\n         // We sleep here instead of setting a resume time since the resume time doesn't need to\n         // be honored.\n-        sleep(1000L); // 1 second\n+        sleep(100L);", "originalCommit": "5f1278ed2735f28fb7066156cb8fdceee412c786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODU0MA==", "url": "https://github.com/apache/beam/pull/12488#discussion_r467358540", "bodyText": "We also have an effectively 300 second timeout here so I don't believe it should flake but if it does I'll have to figure out a different way to design this test.", "author": "lukecwik", "createdAt": "2020-08-08T04:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMTY3OA=="}], "type": "inlineReview"}]}