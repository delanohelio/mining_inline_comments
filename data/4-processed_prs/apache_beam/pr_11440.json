{"pr_number": 11440, "pr_title": "[BEAM-9767] Add a timeout to the TestStream GRPC and fix the Streaming cache timeout", "pr_createdAt": "2020-04-16T19:04:44Z", "pr_url": "https://github.com/apache/beam/pull/11440", "timeline": [{"oid": "fc37a04f471438ae85eae05e9249f4f8ac06c650", "url": "https://github.com/apache/beam/commit/fc37a04f471438ae85eae05e9249f4f8ac06c650", "message": "Add a timeout to the TestStream GRPC and fix the Streaming cache timeout\n\nChange-Id: I33908eab8313a90829a2115029f87b7f2f454f1b", "committedDate": "2020-04-16T19:00:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxODAxNw==", "url": "https://github.com/apache/beam/pull/11440#discussion_r410518017", "bodyText": "Have you tested this? I see that we're raising RuntimeError in streaming_cache.py, but here we're catching grpc.RpcError - is that as intended?", "author": "pabloem", "createdAt": "2020-04-17T23:50:48Z", "path": "sdks/python/apache_beam/runners/direct/test_stream_impl.py", "diffHunk": "@@ -270,9 +273,20 @@ def events_from_rpc(endpoint, output_tags, coder):\n     event_request = beam_runner_api_pb2.EventsRequest(\n         output_ids=[str(tag) for tag in output_tags])\n \n-    event_stream = stub.Events(event_request)\n-    for e in event_stream:\n-      yield _TestStream.test_stream_payload_to_events(e, coder)\n+    event_stream = stub.Events(event_request, timeout=30)\n+    try:\n+      while True:\n+        yield _TestStream.test_stream_payload_to_events(\n+            next(event_stream), coder)\n+    except StopIteration:\n+      return\n+    except grpc.RpcError as e:\n+      if e.code() == grpc.StatusCode.DEADLINE_EXCEEDED:", "originalCommit": "fc37a04f471438ae85eae05e9249f4f8ac06c650", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzNjc1Nw==", "url": "https://github.com/apache/beam/pull/11440#discussion_r412436757", "bodyText": "Yes, this exception is specifically for GRPC timing out. Any runtime error on the server side gets caught by its exception handler (see test_stream_service.py)", "author": "rohdesamuel", "createdAt": "2020-04-21T19:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxODAxNw=="}], "type": "inlineReview"}]}