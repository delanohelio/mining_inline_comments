{"pr_number": 11569, "pr_title": "[BEAM-9840] Support for Parameterized Types when converting from HCat\u2026", "pr_createdAt": "2020-04-29T13:24:33Z", "pr_url": "https://github.com/apache/beam/pull/11569", "timeline": [{"oid": "6c91901401692092e4efad186639e93de8cd3ec3", "url": "https://github.com/apache/beam/commit/6c91901401692092e4efad186639e93de8cd3ec3", "message": "[BEAM-9840] Support for Parameterized Types when converting from HCatRecords to Rows in HCatalogIO", "committedDate": "2020-04-29T13:03:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzQyMQ==", "url": "https://github.com/apache/beam/pull/11569#discussion_r419653421", "bodyText": "I think these should map to logical types instead of to primitives so we don't lose the information from the parameter. Unfortunately we don't (yet) have good logical types in schemas.logicaltypes to map them to, but maybe we will after your other PR, #11581 (or you could just add the relevant ones here).\nchar(10) looks like it could map to a FixedLengthString logical type, varchar(100) probably deserves its own type, maybe just called Varchar? and I've been meaning to add a logical type for DECIMAL parameterized by precision and scale as part of BEAM-7554 (and deprecate the primitive one).", "author": "TheNeuralBit", "createdAt": "2020-05-04T18:52:02Z", "path": "sdks/java/io/hcatalog/src/test/java/org/apache/beam/sdk/io/hcatalog/SchemaUtilsTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.hcatalog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.hadoop.hive.metastore.api.FieldSchema;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class SchemaUtilsTest {\n+  @Test\n+  public void testParameterizedTypesToBeamTypes() {\n+    List<FieldSchema> listOfFieldSchema = new ArrayList<>();\n+    listOfFieldSchema.add(new FieldSchema(\"parameterizedChar\", \"char(10)\", null));\n+    listOfFieldSchema.add(new FieldSchema(\"parameterizedVarchar\", \"varchar(100)\", null));\n+    listOfFieldSchema.add(new FieldSchema(\"parameterizedDecimal\", \"decimal(30,16)\", null));\n+\n+    Schema expectedSchema =\n+        Schema.builder()\n+            .addNullableField(\"parameterizedChar\", Schema.FieldType.STRING)\n+            .addNullableField(\"parameterizedVarchar\", Schema.FieldType.STRING)\n+            .addNullableField(\"parameterizedDecimal\", Schema.FieldType.DECIMAL)", "originalCommit": "6c91901401692092e4efad186639e93de8cd3ec3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNzc5MA==", "url": "https://github.com/apache/beam/pull/11569#discussion_r419827790", "bodyText": "Thanks @TheNeuralBit for the review.\nI am adding logical types in schemas.logicaltypes called VariableLengthBytes, FixedLengthString, VariableLengthString, LogicalDecimal as part of #11581 .\nI will take up the task of mapping these to logical types once my other PR gets merged. I also hope that #11272 get merged by then, so that I can use SqlTypes.DATE logical type. Can you please create a JIRA ticket and assign it to me.", "author": "rahul8383", "createdAt": "2020-05-05T02:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MzQyMQ=="}], "type": "inlineReview"}]}