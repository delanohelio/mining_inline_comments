{"pr_number": 12097, "pr_title": "[BEAM-10327] Create a pattern that shows use of Schema using Joins", "pr_createdAt": "2020-06-26T07:56:26Z", "pr_url": "https://github.com/apache/beam/pull/12097", "timeline": [{"oid": "c511cd68dad5bba9a468dea8769e473b355af89f", "url": "https://github.com/apache/beam/commit/c511cd68dad5bba9a468dea8769e473b355af89f", "message": "[BEAM-10327] Create a pattern that shows use of Schema using Joins", "committedDate": "2020-06-26T07:47:40Z", "type": "commit"}, {"oid": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "url": "https://github.com/apache/beam/commit/e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "message": "Run Spotless PreCommit", "committedDate": "2020-06-26T15:01:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzM2Mg==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446327362", "bodyText": "How about \"The samples on this page describe common patterns using Schemas.\"", "author": "tvalentyn", "createdAt": "2020-06-26T17:51:43Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. ", "originalCommit": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzODM3OQ==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446338379", "bodyText": "actually, let me add @rosetn @davidwrede who can guide better on the style of Website narrative.", "author": "tvalentyn", "createdAt": "2020-06-26T18:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODI3MA==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446328270", "bodyText": "Might be easier to read if we break up this sentence.", "author": "tvalentyn", "createdAt": "2020-06-26T17:53:34Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. ", "originalCommit": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTQxNw==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446329417", "bodyText": "A Schema is a way to represent records with a fixed structure. Schemas are useful because Beam sources commonly produce JSON, Avro or database row objects all of which have a well-defined structure.", "author": "tvalentyn", "createdAt": "2020-06-26T17:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTc2Ng==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446329766", "bodyText": "s/Join/Join\n(Adding link + ticks)", "author": "tvalentyn", "createdAt": "2020-06-26T17:56:46Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.", "originalCommit": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMDE4NA==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446330184", "bodyText": "Should we use consistent terminology here: 'collection' or 'dataset' instead of several terms: file, collection, dataset, data set?", "author": "tvalentyn", "createdAt": "2020-06-26T17:57:43Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.", "originalCommit": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzgyNA==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446333824", "bodyText": "s/examples/example", "author": "tvalentyn", "createdAt": "2020-06-26T18:05:33Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.\n+You can join the two data sets using the name as a common key and the other data as the associated values.\n+After the join, you have one dataset that contains all the information (email address and phone numbers) associated with each name.\n+\n+The following conceptual examples uses two input collections to show the mechanism of Join.", "originalCommit": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDIwNw==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446334207", "bodyText": "How about: 'We define PCollections, their  schemas  and then perform...\"", "author": "tvalentyn", "createdAt": "2020-06-26T18:06:28Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.\n+You can join the two data sets using the name as a common key and the other data as the associated values.\n+After the join, you have one dataset that contains all the information (email address and phone numbers) associated with each name.\n+\n+The following conceptual examples uses two input collections to show the mechanism of Join.\n+\n+You can define the Schema and the schema `PCollection` and then perform join on the two `PCollections` using a [Join](https://beam.apache.org/releases/javadoc/2.21.0/org/apache/beam/sdk/schemas/transforms/Join.html). ", "originalCommit": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDg5NQ==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446334895", "bodyText": "Nit: let's add ticks around Join since it refers to a code statement Join.", "author": "tvalentyn", "createdAt": "2020-06-26T18:07:50Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page show you common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure, they are useful as common beam sources produce JSON, Avro or database row objects all of which have a well defined structure. \n+For more information, see the [programming guide section on Schemas](/documentation/programming-guide/#what-is-a-schema).\n+\n+{{< language-switcher java >}}\n+\n+## Using Joins\n+\n+Beam supports equijoins on schema `PCollections` of Schemas where the join condition depends on the equality of a subset of fields. \n+\n+Consider using Join if you have multiple data sets that provide information about related things and their structure is known.\n+\n+For example let's say we have two different files with user data: one file has names and email addresses; the other file has names and phone numbers.\n+You can join the two data sets using the name as a common key and the other data as the associated values.\n+After the join, you have one dataset that contains all the information (email address and phone numbers) associated with each name.\n+\n+The following conceptual examples uses two input collections to show the mechanism of Join.\n+\n+You can define the Schema and the schema `PCollection` and then perform join on the two `PCollections` using a [Join](https://beam.apache.org/releases/javadoc/2.21.0/org/apache/beam/sdk/schemas/transforms/Join.html). ", "originalCommit": "e36b1b0997b6edbe0c0fbaeb105c91495d354bf3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9443d5c0ddc3d8ca444d2cabdbeab79ddb3bbda", "url": "https://github.com/apache/beam/commit/f9443d5c0ddc3d8ca444d2cabdbeab79ddb3bbda", "message": "Add tests for the SchemaJoinPattern and Fix Documentation", "committedDate": "2020-06-26T23:02:32Z", "type": "commit"}, {"oid": "f3db8eaa7ba60d18998308d49e0ea1a1aff81370", "url": "https://github.com/apache/beam/commit/f3db8eaa7ba60d18998308d49e0ea1a1aff81370", "message": "QuickFix", "committedDate": "2020-06-26T23:51:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2Mzc5OA==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446763798", "bodyText": "Maybe just borrow the text from:\nhttps://beam.apache.org/documentation/programming-guide/#what-is-a-schema\nSchemas provide us a type-system for Beam records that is independent of any specific programming-language type. There might be multiple Java classes that all have the same schema (for example a Protocol-Buffer class or a POJO class), and Beam will allow us to seamlessly convert between these types. Schemas also provide a simple way to reason about types across different programming-language APIs.", "author": "rezarokni", "createdAt": "2020-06-29T04:20:53Z", "path": "website/www/site/content/en/documentation/patterns/schema.md", "diffHunk": "@@ -0,0 +1,56 @@\n+---\n+title: \"Schema Patterns\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Schema Patterns\n+\n+The samples on this page describe common patterns using Schemas. \n+A Schema is a way to represent records with a fixed structure. Schemas are useful because Beam sources commonly produce JSON, Avro or database row objects all of which have a well-defined structure. ", "originalCommit": "f3db8eaa7ba60d18998308d49e0ea1a1aff81370", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MzI4NA==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446963284", "bodyText": "Done !", "author": "abhiy13", "createdAt": "2020-06-29T13:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2Mzc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2NDI5NQ==", "url": "https://github.com/apache/beam/pull/12097#discussion_r446764295", "bodyText": "As this is example snippet code, consider if it would be easier for the reader to have the code be inlined here rather than be abstracted in a class.", "author": "rezarokni", "createdAt": "2020-06-29T04:23:13Z", "path": "examples/java/src/test/java/org/apache/beam/examples/snippets/SnippetsTest.java", "diffHunk": "@@ -154,6 +156,73 @@ public void testCoGroupByKeyTuple() throws IOException {\n     p.run();\n   }\n \n+  /* Tests SchemaJoinPattern */\n+  @Test\n+  public void testSchemaJoinPattern() {\n+    // [START SchemaJoinPatternCreate]\n+    // Define Schemas\n+    Schema emailSchema =\n+        Schema.of(\n+            Schema.Field.of(\"name\", Schema.FieldType.STRING),\n+            Schema.Field.of(\"email\", Schema.FieldType.STRING));\n+\n+    Schema phoneSchema =\n+        Schema.of(\n+            Schema.Field.of(\"name\", Schema.FieldType.STRING),\n+            Schema.Field.of(\"phone\", Schema.FieldType.STRING));\n+\n+    // Create User Data Collections\n+    final List<Row> emailUsers =\n+        Arrays.asList(\n+            Row.withSchema(emailSchema).addValue(\"person1\").addValue(\"person1@example.com\").build(),\n+            Row.withSchema(emailSchema).addValue(\"person2\").addValue(\"person2@example.com\").build(),\n+            Row.withSchema(emailSchema).addValue(\"person3\").addValue(\"person3@example.com\").build(),\n+            Row.withSchema(emailSchema)\n+                .addValue(\"person4\")\n+                .addValue(\"person4@example.com\")\n+                .build());\n+\n+    final List<Row> phoneUsers =\n+        Arrays.asList(\n+            Row.withSchema(phoneSchema).addValue(\"person1\").addValue(\"111-222-3333\").build(),\n+            Row.withSchema(phoneSchema).addValue(\"person2\").addValue(\"222-333-4444\").build(),\n+            Row.withSchema(phoneSchema).addValue(\"person3\").addValue(\"444-333-4444\").build(),\n+            Row.withSchema(phoneSchema).addValue(\"person4\").addValue(\"555-333-4444\").build());\n+\n+    // [END SchemaJoinPatternCreate]\n+\n+    PCollection<String> actualFormattedResult =\n+        Snippets.SchemaJoinPattern.main(p, emailUsers, phoneUsers, emailSchema, phoneSchema);", "originalCommit": "f3db8eaa7ba60d18998308d49e0ea1a1aff81370", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4af470d00cf7eb5687ef572faf80ffa0f949b293", "url": "https://github.com/apache/beam/commit/4af470d00cf7eb5687ef572faf80ffa0f949b293", "message": "Add non-match to example and documentation improvements", "committedDate": "2020-06-29T10:04:20Z", "type": "commit"}, {"oid": "5e81c24fd56bf9d2790f63103a240f2a697124d4", "url": "https://github.com/apache/beam/commit/5e81c24fd56bf9d2790f63103a240f2a697124d4", "message": "quickfix", "committedDate": "2020-06-29T13:16:24Z", "type": "commit"}]}