{"pr_number": 11883, "pr_title": "[BEAM-9679] Add CombineFn to Core Transforms", "pr_createdAt": "2020-06-01T21:04:03Z", "pr_url": "https://github.com/apache/beam/pull/11883", "timeline": [{"oid": "23795853277a8f3d52d673077336622a67c8246c", "url": "https://github.com/apache/beam/commit/23795853277a8f3d52d673077336622a67c8246c", "message": "Add CombineFn to Core Transforms", "committedDate": "2020-06-01T20:54:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NTM3Ng==", "url": "https://github.com/apache/beam/pull/11883#discussion_r434995376", "bodyText": "Why should the input be casted to float?\nI think since the inputs are all int, the Sum can be int?", "author": "henryken", "createdAt": "2020-06-04T05:09:19Z", "path": "learning/katas/go/Core Transforms/Combine/CombineFn/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.Combine(s, &averageFn{}, input)\n+}\n+\n+type averageAccum struct {\n+\tCount int64\n+\tSum float64\n+}\n+\n+type averageFn struct{}\n+\n+func (c *averageFn) CreateAccumulator() averageAccum {\n+\treturn averageAccum{}\n+}\n+\n+func (c *averageFn) AddInput(accum averageAccum, input int) averageAccum {\n+\taccum.Count++\n+\taccum.Sum += float64(input)", "originalCommit": "23795853277a8f3d52d673077336622a67c8246c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzQ2OA==", "url": "https://github.com/apache/beam/pull/11883#discussion_r434997468", "bodyText": "Is there any good documentation that outlines what function names that need to be implemented?", "author": "henryken", "createdAt": "2020-06-04T05:17:35Z", "path": "learning/katas/go/Core Transforms/Combine/CombineFn/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.Combine(s, &averageFn{}, input)\n+}\n+\n+type averageAccum struct {\n+\tCount int64\n+\tSum float64\n+}\n+\n+type averageFn struct{}\n+\n+func (c *averageFn) CreateAccumulator() averageAccum {", "originalCommit": "23795853277a8f3d52d673077336622a67c8246c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMwMzc4NA==", "url": "https://github.com/apache/beam/pull/11883#discussion_r435303784", "bodyText": "Apologies, I couldn't find any.  I looked into the code for stats.Mean for how this is implemented and tailored this for the katas.", "author": "damondouglas", "createdAt": "2020-06-04T14:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDc1Nw==", "url": "https://github.com/apache/beam/pull/11883#discussion_r435314757", "bodyText": "Ok noted. Thanks for your info.", "author": "henryken", "createdAt": "2020-06-04T14:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDAwOA==", "url": "https://github.com/apache/beam/pull/11883#discussion_r435344008", "bodyText": "Yup. Documentation hasn't been updated meaningfully in a long while. This is on the list of things to do before no longer being experimental.", "author": "lostluck", "createdAt": "2020-06-04T15:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5Nzg2Ng==", "url": "https://github.com/apache/beam/pull/11883#discussion_r434997866", "bodyText": "I would suggest this to be part of answer placeholder as well.", "author": "henryken", "createdAt": "2020-06-04T05:18:58Z", "path": "learning/katas/go/Core Transforms/Combine/CombineFn/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,55 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.Combine(s, &averageFn{}, input)", "originalCommit": "23795853277a8f3d52d673077336622a67c8246c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c35366781ccf46006e16ba54e74e498e3d8ef982", "url": "https://github.com/apache/beam/commit/c35366781ccf46006e16ba54e74e498e3d8ef982", "message": "Change accumulator Sum to int", "committedDate": "2020-06-04T14:34:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNzg4MQ==", "url": "https://github.com/apache/beam/pull/11883#discussion_r435317881", "bodyText": "Actually the ExtractOutput type was correct to use float since average can be non-int.", "author": "henryken", "createdAt": "2020-06-04T14:48:43Z", "path": "learning/katas/go/Core Transforms/Combine/CombineFn/pkg/task/task.go", "diffHunk": "@@ -47,9 +47,9 @@ func (c *averageFn) MergeAccumulators(accumA, accumB averageAccum) averageAccum\n \t}\n }\n \n-func (c *averageFn) ExtractOutput(accum averageAccum) float64 {\n+func (c *averageFn) ExtractOutput(accum averageAccum) int {", "originalCommit": "c35366781ccf46006e16ba54e74e498e3d8ef982", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0OTg2Ng==", "url": "https://github.com/apache/beam/pull/11883#discussion_r435349866", "bodyText": "Thank you, Henry.  Are we ok with this then?\nfunc (c *averageFn) ExtractOutput(accum averageAccum) float64 {\n\tif accum.Count == 0 {\n\t\treturn 0\n\t}\n\treturn float64(accum.Sum / accum.Count)\n}", "author": "damondouglas", "createdAt": "2020-06-04T15:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNzg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5Mzg4OA==", "url": "https://github.com/apache/beam/pull/11883#discussion_r435393888", "bodyText": "I think you should do this in Go?\nreturn float64(accum.Sum) / float64(accum.Count)", "author": "henryken", "createdAt": "2020-06-04T16:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNzg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzMxMw==", "url": "https://github.com/apache/beam/pull/11883#discussion_r435397313", "bodyText": "Henry's right.\nfloat64(accum.Sum / accum.Count) will have integer division fraction truncation errors, while float64(accum.Sum) / float64(accum.Count) will not.\nGo is very specific about requiring explicit conversions between numeric types to avoid this kind of error accidentally.", "author": "lostluck", "createdAt": "2020-06-04T16:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNzg4MQ=="}], "type": "inlineReview"}, {"oid": "7f25adf22e5b1d9cada8d67670355db72e5168b0", "url": "https://github.com/apache/beam/commit/7f25adf22e5b1d9cada8d67670355db72e5168b0", "message": "ExtractOutput as float64", "committedDate": "2020-06-04T17:16:38Z", "type": "commit"}, {"oid": "8fbfc484f6d7336b74e721286ee4546da0e602f2", "url": "https://github.com/apache/beam/commit/8fbfc484f6d7336b74e721286ee4546da0e602f2", "message": "Update stepik course", "committedDate": "2020-06-05T04:42:24Z", "type": "commit"}]}