{"pr_number": 11184, "pr_title": "[BEAM-4374] Update protos related to MonitoringInfo.", "pr_createdAt": "2020-03-20T20:30:15Z", "pr_url": "https://github.com/apache/beam/pull/11184", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4Nzc4OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395887788", "bodyText": "Add a :v1 here", "author": "ajamato", "createdAt": "2020-03-20T21:00:56Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -139,7 +137,7 @@ message MonitoringInfoSpecs {\n \n     USER_DISTRIBUTION_COUNTER = 6 [(monitoring_info_spec) = {\n       urn: \"beam:metric:user_distribution\",\n-      type_urn: \"beam:metrics:distribution_int_64\",\n+      type_urn: \"beam:metrics:distribution_int64\",", "originalCommit": "914270807a75358feaac9aa679e1035c50caa0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1NjE1OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r396556158", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-23T15:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4Nzc4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODE1Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395888153", "bodyText": "Hopefully you can \"flatten\" out the proto a bit. A common complaint was that it was complicated to go through the nested hierarchy here.", "author": "ajamato", "createdAt": "2020-03-20T21:01:57Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -229,101 +215,127 @@ message MonitoringInfo {\n     NAMESPACE = 5 [(label_props) = { name: \"NAMESPACE\" }];\n     NAME = 6 [(label_props) = { name: \"NAME\" }];\n   }\n+\n   // A set of key+value labels which define the scope of the metric.\n   // Either a well defined entity id for matching the enum names in\n   // the MonitoringInfoLabels enum or any arbitrary label\n   // set by a custom metric or user metric.\n+  //\n   // A monitoring system is expected to be able to aggregate the metrics\n   // together for all updates having the same URN and labels. Some systems such\n   // as Stackdriver will be able to aggregate the metrics using a subset of the\n   // provided labels\n-  map<string, string> labels = 5;\n-\n-  // The walltime of the most recent update.\n-  // Useful for aggregation for latest types such as LatestInt64.\n-  google.protobuf.Timestamp timestamp = 6;\n+  map<string, string> labels = 4;\n }\n \n message MonitoringInfoTypeUrns {\n   enum Enum {\n+    // Represents an integer counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   - value: beam:coder:varint:v1\n     SUM_INT64_TYPE = 0 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                            \"beam:metrics:sum_int_64\"];\n-\n-    DISTRIBUTION_INT64_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                                     \"beam:metrics:distribution_int_64\"];\n-\n-    LATEST_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                               \"beam:metrics:latest_int_64\"];\n+                            \"beam:metrics:sum_int64:v1\"];\n+\n+    // Represents a double counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   value: beam:coder:double:v1\n+    SUM_DOUBLE_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                        \"beam:metrics:sum_int64:v1\"];\n+\n+    // Represents a distribution of an integer value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:varint:v1\n+    //   - min:   beam:coder:varint:v1\n+    //   - max:   beam:coder:varint:v1\n+    DISTRIBUTION_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                     \"beam:metrics:distribution_int64:v1\"];\n+\n+    // Represents a distribution of a double value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:double:v1\n+    //   - min:   beam:coder:double:v1\n+    //   - max:   beam:coder:double:v1\n+    DISTRIBUTION_DOUBLE_TYPE = 3 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                 \"beam:metrics:distribution_int64:v1\"];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    //\n+    // Encoding: <timestamp><value>\n+    //   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)\n+    //   - value:     beam:coder:varint:v1\n+    LATEST_INT64_TYPE = 4 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                               \"beam:metrics:latest_int64:v1\"];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    //\n+    // Encoding: <timestamp><value>\n+    //   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)\n+    //   - value:     beam:coder:double:v1\n+    LATEST_DOUBLE_TYPE = 5 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                           \"beam:metrics:latest_int64:v1\"];\n+\n+    // Represents the largest set of integer values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:varint:v1\n+    TOP_N_INT64_TYPE = 6 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                           \"beam:metrics:top_n_int64:v1\"];\n+\n+    // Represents the largest set of double values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:double:v1\n+    TOP_N_DOUBLE_TYPE = 7 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                            \"beam:metrics:top_n_int64:v1\"];\n+\n+    // Represents the smallest set of integer values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:varint:v1\n+    BOTTOM_N_INT64_TYPE = 8 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                          \"beam:metrics:bottom_n_int64:v1\"];\n+\n+    // Represents the smallest set of double values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:double:v1\n+    BOTTOM_N_DOUBLE_TYPE = 9 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                           \"beam:metrics:bottom_n_int64:v1\"];\n+\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:double:v1\n+    PROGRESS_TYPE = 10 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                       \"beam:metrics:progress:v1\"];\n+\n+    // General MonitoredState information which contains\n+    // structured information which does not fit into a typical\n+    // metric format. See MonitoringTableData for more details.\n+    //\n+    // Encoding: MonitoringTableData proto encoded as bytes\n+    MONITORING_TABLE_TYPE = 11 [(org.apache.beam.model.pipeline.v1.beam_urn) =", "originalCommit": "914270807a75358feaac9aa679e1035c50caa0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMDUwNQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395900505", "bodyText": "I'll see what I can do when I'm mucking around with this in the code.", "author": "lukecwik", "createdAt": "2020-03-20T21:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODU5NQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395888595", "bodyText": "I think there are only a few of these types being used now. SUM_INT64_TYPE and DISTRIBUTION_INT64_TYPE. I hope we can make it very simple to add new ones of these with minimal changes (Adding MonitoringInfoSpec and reusing existing framework/libraries in the SDK, runners can mostly pass them through to a service to aggregate across multiple workers)", "author": "ajamato", "createdAt": "2020-03-20T21:03:08Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -229,101 +215,127 @@ message MonitoringInfo {\n     NAMESPACE = 5 [(label_props) = { name: \"NAMESPACE\" }];\n     NAME = 6 [(label_props) = { name: \"NAME\" }];\n   }\n+\n   // A set of key+value labels which define the scope of the metric.\n   // Either a well defined entity id for matching the enum names in\n   // the MonitoringInfoLabels enum or any arbitrary label\n   // set by a custom metric or user metric.\n+  //\n   // A monitoring system is expected to be able to aggregate the metrics\n   // together for all updates having the same URN and labels. Some systems such\n   // as Stackdriver will be able to aggregate the metrics using a subset of the\n   // provided labels\n-  map<string, string> labels = 5;\n-\n-  // The walltime of the most recent update.\n-  // Useful for aggregation for latest types such as LatestInt64.\n-  google.protobuf.Timestamp timestamp = 6;\n+  map<string, string> labels = 4;\n }\n \n message MonitoringInfoTypeUrns {\n   enum Enum {\n+    // Represents an integer counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   - value: beam:coder:varint:v1\n     SUM_INT64_TYPE = 0 [(org.apache.beam.model.pipeline.v1.beam_urn) =", "originalCommit": "914270807a75358feaac9aa679e1035c50caa0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNTAwMQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395935001", "bodyText": "Rather than manually write out the cross product, how about we define {sum,min,max,top_n,bottom_n,distribtuion,latest}_{int64,double,string} types as having known semantics and encoding?", "author": "robertwb", "createdAt": "2020-03-20T23:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1NjA2Mg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r396556062", "bodyText": "The problematic type is string:\nIs sum the same as concat? (if so, this will grow to be huge very quickly also making distribution pointless)\nIs min/max/top_n/bottom_n based upon lexicographical ordering? (if so, case sensitive/insensitive/...)\nstring only makes sense with latest and if we wanted to define any of the other ones I think it would be better to use terms like case_insensitive_max.", "author": "lukecwik", "createdAt": "2020-03-23T15:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODU5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzk3Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r397507973", "bodyText": "Agree that string summation (and those metrics requiring it) could be omitted, but min, max, top_n, bottom_n are meaningful. (And distribution could still be meaningful giving a count and range.)", "author": "robertwb", "createdAt": "2020-03-24T22:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODc4Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395888786", "bodyText": "Probably you are already planning on doing this. But having helper functions to easily encode/decode these would be great.", "author": "ajamato", "createdAt": "2020-03-20T21:03:43Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -194,33 +188,25 @@ extend google.protobuf.EnumValueOptions {\n }\n \n message MonitoringInfo {\n-  // The name defining the metric or monitored state.\n+  // The name defining the semantic meaning of the metric or monitored state.\n+  //\n+  // See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored\n+  // state.\n   string urn = 1;\n \n-  // This is specified as a URN that implies:\n-  // A message class: (Distribution, Counter, Extrema, MonitoringDataTable).\n-  // Sub types like field formats - int64, double, string.\n-  // Aggregation methods - SUM, LATEST, TOP-N, BOTTOM-N, DISTRIBUTION\n-  // valid values are:\n-  // beam:metrics:[sum_int_64|latest_int_64|top_n_int_64|bottom_n_int_64|\n-  //     sum_double|latest_double|top_n_double|bottom_n_double|\n-  //     distribution_int_64|distribution_double|monitoring_data_table|\n-  //     latest_doubles\n+  // This is specified as a URN that implies the encoding and aggregation\n+  // method. See MonitoringInfoTypeUrns.Enum for the set of well known types.\n   string type = 2;\n \n-  // The Metric or monitored state.\n-  oneof data {\n-    MonitoringTableData monitoring_table_data = 3;\n-    Metric metric = 4;\n-    bytes payload = 7;\n-  }\n+  // The monitored state encoded as per the specification defined by the type.\n+  bytes payload = 3;", "originalCommit": "914270807a75358feaac9aa679e1035c50caa0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMDYxNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395900617", "bodyText": "Yup", "author": "lukecwik", "createdAt": "2020-03-20T21:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4OTEwNA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395889104", "bodyText": "My biggest concern is losing the ability to print debug strings, which are helpful when people are trying to learn how these are populated. But maybe we can just add a few obvious places to dump debug logs, debug files, etc with the MonitoringInfors parses properly.", "author": "ajamato", "createdAt": "2020-03-20T21:04:35Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -194,33 +188,25 @@ extend google.protobuf.EnumValueOptions {\n }\n \n message MonitoringInfo {\n-  // The name defining the metric or monitored state.\n+  // The name defining the semantic meaning of the metric or monitored state.\n+  //\n+  // See MonitoringInfoSpecs.Enum for the set of well known metrics/monitored\n+  // state.\n   string urn = 1;\n \n-  // This is specified as a URN that implies:\n-  // A message class: (Distribution, Counter, Extrema, MonitoringDataTable).\n-  // Sub types like field formats - int64, double, string.\n-  // Aggregation methods - SUM, LATEST, TOP-N, BOTTOM-N, DISTRIBUTION\n-  // valid values are:\n-  // beam:metrics:[sum_int_64|latest_int_64|top_n_int_64|bottom_n_int_64|\n-  //     sum_double|latest_double|top_n_double|bottom_n_double|\n-  //     distribution_int_64|distribution_double|monitoring_data_table|\n-  //     latest_doubles\n+  // This is specified as a URN that implies the encoding and aggregation\n+  // method. See MonitoringInfoTypeUrns.Enum for the set of well known types.\n   string type = 2;\n \n-  // The Metric or monitored state.\n-  oneof data {\n-    MonitoringTableData monitoring_table_data = 3;\n-    Metric metric = 4;\n-    bytes payload = 7;\n-  }\n+  // The monitored state encoded as per the specification defined by the type.\n+  bytes payload = 3;", "originalCommit": "914270807a75358feaac9aa679e1035c50caa0fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MjQ2Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395892463", "bodyText": "Let's add some comments to make it clear the type is referring to what is collected in each MonitoringInfo update, and how they should be aggregated together", "author": "ajamato", "createdAt": "2020-03-20T21:13:44Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -229,101 +215,127 @@ message MonitoringInfo {\n     NAMESPACE = 5 [(label_props) = { name: \"NAMESPACE\" }];\n     NAME = 6 [(label_props) = { name: \"NAME\" }];\n   }\n+\n   // A set of key+value labels which define the scope of the metric.\n   // Either a well defined entity id for matching the enum names in\n   // the MonitoringInfoLabels enum or any arbitrary label\n   // set by a custom metric or user metric.\n+  //\n   // A monitoring system is expected to be able to aggregate the metrics\n   // together for all updates having the same URN and labels. Some systems such\n   // as Stackdriver will be able to aggregate the metrics using a subset of the\n   // provided labels\n-  map<string, string> labels = 5;\n-\n-  // The walltime of the most recent update.\n-  // Useful for aggregation for latest types such as LatestInt64.\n-  google.protobuf.Timestamp timestamp = 6;\n+  map<string, string> labels = 4;\n }\n \n message MonitoringInfoTypeUrns {", "originalCommit": "914270807a75358feaac9aa679e1035c50caa0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNTE5Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395905193", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-20T21:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MjQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MzQ5Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395893496", "bodyText": "I think progress should be a MonitoringInfoSpec URN and it should use either SUM_DOUBLE_TYPE or X_DOUBLE_TYPE.\nIt should be something which defscribes what each update is supposed to be, and how they should be aggregated together. I think that's required for each type, in order to all the use case of \"worker just forwards these to a service to aggregate\" As it may need to go pre aggregation of its own?\nGAUGE_DOUBLE_TYPE? I am not sure what's appropriate here. But it probably doesn't make sense for progress to be its own type.", "author": "ajamato", "createdAt": "2020-03-20T21:16:22Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -229,101 +215,127 @@ message MonitoringInfo {\n     NAMESPACE = 5 [(label_props) = { name: \"NAMESPACE\" }];\n     NAME = 6 [(label_props) = { name: \"NAME\" }];\n   }\n+\n   // A set of key+value labels which define the scope of the metric.\n   // Either a well defined entity id for matching the enum names in\n   // the MonitoringInfoLabels enum or any arbitrary label\n   // set by a custom metric or user metric.\n+  //\n   // A monitoring system is expected to be able to aggregate the metrics\n   // together for all updates having the same URN and labels. Some systems such\n   // as Stackdriver will be able to aggregate the metrics using a subset of the\n   // provided labels\n-  map<string, string> labels = 5;\n-\n-  // The walltime of the most recent update.\n-  // Useful for aggregation for latest types such as LatestInt64.\n-  google.protobuf.Timestamp timestamp = 6;\n+  map<string, string> labels = 4;\n }\n \n message MonitoringInfoTypeUrns {\n   enum Enum {\n+    // Represents an integer counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   - value: beam:coder:varint:v1\n     SUM_INT64_TYPE = 0 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                            \"beam:metrics:sum_int_64\"];\n-\n-    DISTRIBUTION_INT64_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                                     \"beam:metrics:distribution_int_64\"];\n-\n-    LATEST_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                               \"beam:metrics:latest_int_64\"];\n+                            \"beam:metrics:sum_int64:v1\"];\n+\n+    // Represents a double counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   value: beam:coder:double:v1\n+    SUM_DOUBLE_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                        \"beam:metrics:sum_int64:v1\"];\n+\n+    // Represents a distribution of an integer value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:varint:v1\n+    //   - min:   beam:coder:varint:v1\n+    //   - max:   beam:coder:varint:v1\n+    DISTRIBUTION_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                     \"beam:metrics:distribution_int64:v1\"];\n+\n+    // Represents a distribution of a double value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:double:v1\n+    //   - min:   beam:coder:double:v1\n+    //   - max:   beam:coder:double:v1\n+    DISTRIBUTION_DOUBLE_TYPE = 3 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                 \"beam:metrics:distribution_int64:v1\"];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    //\n+    // Encoding: <timestamp><value>\n+    //   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)\n+    //   - value:     beam:coder:varint:v1\n+    LATEST_INT64_TYPE = 4 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                               \"beam:metrics:latest_int64:v1\"];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    //\n+    // Encoding: <timestamp><value>\n+    //   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)\n+    //   - value:     beam:coder:double:v1\n+    LATEST_DOUBLE_TYPE = 5 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                           \"beam:metrics:latest_int64:v1\"];\n+\n+    // Represents the largest set of integer values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:varint:v1\n+    TOP_N_INT64_TYPE = 6 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                           \"beam:metrics:top_n_int64:v1\"];\n+\n+    // Represents the largest set of double values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:double:v1\n+    TOP_N_DOUBLE_TYPE = 7 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                            \"beam:metrics:top_n_int64:v1\"];\n+\n+    // Represents the smallest set of integer values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:varint:v1\n+    BOTTOM_N_INT64_TYPE = 8 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                          \"beam:metrics:bottom_n_int64:v1\"];\n+\n+    // Represents the smallest set of double values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:double:v1\n+    BOTTOM_N_DOUBLE_TYPE = 9 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                           \"beam:metrics:bottom_n_int64:v1\"];\n+\n+    // Encoding: <value1><value2>...<valueN>\n+    //   - valueX: beam:coder:double:v1\n+    PROGRESS_TYPE = 10 [(org.apache.beam.model.pipeline.v1.beam_urn) =", "originalCommit": "914270807a75358feaac9aa679e1035c50caa0fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwODkwMQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395908901", "bodyText": "This is the individual progress for each element and restriction pair for a splittable DoFn. that is being processed actively. The issue is that we don't report the metric for elements that aren't actively being processed (either in the past or in the future). If we did report for all the past values then the aggregation is interesting since if you sum across all latest values then that tells you the amount of completed work globally and the amount of known but not yet finished work globally. Note that this won't cover the amount of unknown work (e.g. elements and restrictions that have yet to be processed) unless we report the metric for all future values which is impossible in many scenarios.\nI'm not sure if we want to report \"progress\" for each element we have processed to be able to have an accurate aggregation here.\n@robertwb / @ajamato If we did decide to report progress for all past values then it would make sense to define this as LATEST_DOUBLE_TYPE and add an ELEMENT label that represents the encoded element+restriction pair (effectively what was fed into the Splittable DoFn).", "author": "lukecwik", "createdAt": "2020-03-20T22:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MzQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzI3MQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395933271", "bodyText": "We don't want to report progress for each processed element, as this would become an unreasonably large value. We could report aggregated progress of all finished ones, plus partial progress of the in-flight ones, in which case the sum becomes a refinement of done-element-count. There's still no useful way to define cross-bundle aggregation (without resulting in an absolutely huge value), so I would lean towards this being its own type.", "author": "robertwb", "createdAt": "2020-03-20T23:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MzQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzU0NA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395933544", "bodyText": "This looks like outer ListCoder. Should we use nested ListCoder instead?", "author": "robertwb", "createdAt": "2020-03-20T23:41:23Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -229,121 +330,148 @@ message MonitoringInfo {\n     NAMESPACE = 5 [(label_props) = { name: \"NAMESPACE\" }];\n     NAME = 6 [(label_props) = { name: \"NAME\" }];\n   }\n-  // A set of key+value labels which define the scope of the metric.\n+\n+  // A set of key and value labels which define the scope of the metric. For\n+  // well known URNs, the set of required labels is provided by the associated\n+  // MonitoringInfoSpec.\n+  //\n   // Either a well defined entity id for matching the enum names in\n   // the MonitoringInfoLabels enum or any arbitrary label\n   // set by a custom metric or user metric.\n+  //\n   // A monitoring system is expected to be able to aggregate the metrics\n   // together for all updates having the same URN and labels. Some systems such\n   // as Stackdriver will be able to aggregate the metrics using a subset of the\n   // provided labels\n-  map<string, string> labels = 5;\n-\n-  // The walltime of the most recent update.\n-  // Useful for aggregation for latest types such as LatestInt64.\n-  google.protobuf.Timestamp timestamp = 6;\n+  map<string, string> labels = 4;\n }\n \n+// A set of well known URNs that specify the encoding and aggregation method.\n message MonitoringInfoTypeUrns {\n   enum Enum {\n+    // Represents an integer counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   - value: beam:coder:varint:v1\n     SUM_INT64_TYPE = 0 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                            \"beam:metrics:sum_int_64\"];\n-\n-    DISTRIBUTION_INT64_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                                     \"beam:metrics:distribution_int_64\"];\n-\n-    LATEST_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                               \"beam:metrics:latest_int_64\"];\n-\n-    // iterable<double> is encoded with a beam:coder:double:v1 coder for each\n-    // element.\n-    LATEST_DOUBLES_TYPE = 3 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                                 \"beam:metrics:latest_doubles\"];\n-  }\n-}\n-\n-message Metric {\n-  // (Required) The data for this metric.\n-  oneof data {\n-    CounterData counter_data = 1;\n-    DistributionData distribution_data = 2;\n-    ExtremaData extrema_data = 3;\n-  }\n-}\n-\n-// Data associated with a Counter or Gauge metric.\n-// This is designed to be compatible with metric collection\n-// systems such as DropWizard.\n-message CounterData {\n-  oneof value {\n-    int64 int64_value = 1;\n-    double double_value = 2;\n-    string string_value = 3;\n-  }\n-}\n-\n-// Extrema messages are used for calculating\n-// Top-N/Bottom-N metrics.\n-message ExtremaData {\n-  oneof extrema {\n-    IntExtremaData int_extrema_data = 1;\n-    DoubleExtremaData double_extrema_data = 2;\n-  }\n-}\n-\n-message IntExtremaData {\n-  repeated int64 int_values = 1;\n-}\n+                            \"beam:metrics:sum_int64:v1\"];\n+\n+    // Represents a double counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   value: beam:coder:double:v1\n+    SUM_DOUBLE_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                        \"beam:metrics:sum_double:v1\"];\n+\n+    // Represents a distribution of an integer value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:varint:v1\n+    //   - min:   beam:coder:varint:v1\n+    //   - max:   beam:coder:varint:v1\n+    DISTRIBUTION_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                     \"beam:metrics:distribution_int64:v1\"];\n+\n+    // Represents a distribution of a double value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:double:v1\n+    //   - min:   beam:coder:double:v1\n+    //   - max:   beam:coder:double:v1\n+    DISTRIBUTION_DOUBLE_TYPE = 3 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                 \"beam:metrics:distribution_double:v1\"];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    //\n+    // Encoding: <timestamp><value>\n+    //   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)\n+    //   - value:     beam:coder:varint:v1\n+    LATEST_INT64_TYPE = 4 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                               \"beam:metrics:latest_int64:v1\"];\n+\n+    // Represents the latest seen double value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    //\n+    // Encoding: <timestamp><value>\n+    //   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)\n+    //   - value:     beam:coder:double:v1\n+    LATEST_DOUBLE_TYPE = 5 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                           \"beam:metrics:latest_double:v1\"];\n+\n+    // Represents the largest set of integer values seen across bundles.\n+    //\n+    // Encoding: <value1><value2>...<valueN>", "originalCommit": "c1fe988427c4c0458632ef91873908397136157c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3Mzg5Mg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r396573892", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-23T16:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzMzU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r395936249", "bodyText": "Should it be legal to have two counters with the same URN but different types. (This seems to fly agains the idea of a URN being a Unique identifier.)\nSeeing this explosion of types, however, makes it feel like we should not be manually be enumerating them (or at least I'm struggling to see the value in that over just saying that user counters may have any type).", "author": "robertwb", "createdAt": "2020-03-20T23:55:42Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -52,38 +55,157 @@ message Annotation {\n   string value = 2;\n }\n \n-// Populated MonitoringInfoSpecs for specific URNs.\n-// Indicating the required fields to be set.\n-// SDKs and RunnerHarnesses can load these instances into memory and write a\n-// validator or code generator to assist with populating and validating\n-// MonitoringInfo protos.\n+// A set of well known MonitoringInfo specifications.\n message MonitoringInfoSpecs {\n   enum Enum {\n-    // TODO(BEAM-6926): Add the PTRANSFORM name as a required label after\n-    // upgrading the python SDK.\n-    USER_COUNTER = 0 [(monitoring_info_spec) = {\n-      urn: \"beam:metric:user\",\n-      type_urn: \"beam:metrics:sum_int_64\",\n+    // Represents an integer counter where values are summed across bundles.\n+    USER_SUM_INT64 = 0 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:sum_int64:v1\",\n       required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n       annotations: [{\n         key: \"description\",\n-        value: \"URN utilized to report user numeric counters.\"\n+        value: \"URN utilized to report user metric.\"\n       }]\n     }];\n \n-    ELEMENT_COUNT = 1 [(monitoring_info_spec) = {\n+    // Represents a double counter where values are summed across bundles.\n+    USER_SUM_DOUBLE = 1 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",", "originalCommit": "c1fe988427c4c0458632ef91873908397136157c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NTk1NA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r396575954", "bodyText": "The URN represents the unique identifier in the \"semantic meaning\" space of the counter. So saying that this is a user counter and that there are many types makes sense to me.", "author": "lukecwik", "createdAt": "2020-03-23T16:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMDg1Mg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r397510852", "bodyText": "I suppose I still haven't bought into the idea that the whole set of \"user counters\" belongs to a single semantic identifier on par with each individual system counter like msecs or element counts--all we really need is a way to not have names between the two collide--but if we're going to go this route I don't think there's value in enumerating them here (vs. simply saying \"user counter\" can use any type).", "author": "robertwb", "createdAt": "2020-03-24T22:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MzA2OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398253068", "bodyText": "For the Go short id generation, I'm relying on the label set to be unique, and map to the semantic URN and Type. That is, I'm assuming for a counter with a given namespace, name, and ptransform, will always be the same URN and Type, and should use the same short id.", "author": "lostluck", "createdAt": "2020-03-26T00:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3Mzc5OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398273798", "bodyText": "I enumerate them so that its easier to write validation logic in the future that uses the monitoring specs.\nAlso I don't believe user counters can have any type as the progress type doesn't make much sense.", "author": "lukecwik", "createdAt": "2020-03-26T01:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1Mzg1Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398753853", "bodyText": "The reason we would want a type, is that the type defined how its aggregated. So a runner harness can plumb them through without fully needing to unpack it, as long as it can unpack the type portion.", "author": "ajamato", "createdAt": "2020-03-26T17:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1ODYyNg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398758626", "bodyText": "I would also prefer an API where you would really only need to look at the MonitoringIfno URN and then you would instantly know everything else you could expect to find in there. So I would prefer not having MonitoringInfoSpecs which allow multiple different types. I think that would just be confusing for implementers on the runner side.\nDefining the types upfront is nice so that the implementers can see at a glance all the types they want to support. And the type_urn and type bytes packaging does allow it to be more general so that custom runners and sdks could extend it with custom types.", "author": "ajamato", "createdAt": "2020-03-26T17:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MjkwOQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398942909", "bodyText": "Made all the URNs unique and added a test to make sure that they remain unique.", "author": "lukecwik", "createdAt": "2020-03-26T23:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNjI0OQ=="}], "type": "inlineReview"}, {"oid": "c07fc9c204611939521e63ba37376e47778111ca", "url": "https://github.com/apache/beam/commit/c07fc9c204611939521e63ba37376e47778111ca", "message": "[BEAM-4374] Update protos related to MonitoringInfo.", "committedDate": "2020-03-25T17:00:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODk0Mg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398238942", "bodyText": "Error case reversal.\nConsider\nif err != nil {\n  panic(err)\n}\n// ...actual contents of the block.", "author": "lostluck", "createdAt": "2020-03-25T23:50:02Z", "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -126,15 +134,18 @@ func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n \t\t\t},\n \t\t}\n \t\t// Monitoring info version.\n-\t\tmonitoringInfo = append(monitoringInfo,\n-\t\t\t&ppb.MonitoringInfo{\n-\t\t\t\tUrn:  \"beam:metric:element_count:v1\",\n-\t\t\t\tType: \"beam:metrics:sum_int_64\",\n-\t\t\t\tLabels: map[string]string{\n-\t\t\t\t\t\"PCOLLECTION\": snapshot.PID,\n-\t\t\t\t},\n-\t\t\t\tData: int64Counter(snapshot.Count),\n-\t\t\t})\n+\t\tpayload, err := int64Counter(snapshot.Count)\n+\t\tif err != nil {", "originalCommit": "41180c8eaf34de768d2d013630329ff4449c2725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NTIzNQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398275235", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-26T02:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTAzMw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398239033", "bodyText": "Error case reversal.\nConsider\nif err != nil {\n  panic(err)\n}\n// ...actual contents of the block.", "author": "lostluck", "createdAt": "2020-03-25T23:50:22Z", "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -80,36 +84,40 @@ func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n \tvar monitoringInfo []*ppb.MonitoringInfo\n \tmetrics.Extractor{\n \t\tSumInt64: func(l metrics.Labels, v int64) {\n-\t\t\tmonitoringInfo = append(monitoringInfo,\n-\t\t\t\t&ppb.MonitoringInfo{\n-\t\t\t\t\tUrn:    \"beam:metric:user\",\n-\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n-\t\t\t\t\tLabels: userLabels(l),\n-\t\t\t\t\tData:   int64Counter(v),\n-\t\t\t\t})\n+\t\t\tpayload, err := int64Counter(v)\n+\t\t\tif err != nil {\n+\t\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\t\tUrn:     \"beam:metric:user:v1\",\n+\t\t\t\t\t\tType:    \"beam:metrics:sum_int64:v1\",\n+\t\t\t\t\t\tLabels:  userLabels(l),\n+\t\t\t\t\t\tPayload: payload,\n+\t\t\t\t\t})\n+\t\t\t}\n \t\t},\n \t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n-\t\t\tmonitoringInfo = append(monitoringInfo,\n-\t\t\t\t&ppb.MonitoringInfo{\n-\t\t\t\t\tUrn:    \"beam:metric:user_distribution\",\n-\t\t\t\t\tType:   \"beam:metrics:distribution_int_64\",\n-\t\t\t\t\tLabels: userLabels(l),\n-\t\t\t\t\tData:   int64Distribution(count, sum, min, max),\n-\t\t\t\t})\n+\t\t\tpayload, err := int64Distribution(count, sum, min, max)\n+\t\t\tif err != nil {\n+\t\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\t\tUrn:     \"beam:metric:user:v1\",\n+\t\t\t\t\t\tType:    \"beam:metrics:distribution_int64:v1\",\n+\t\t\t\t\t\tLabels:  userLabels(l),\n+\t\t\t\t\t\tPayload: payload,\n+\t\t\t\t\t})\n+\t\t\t}\n \t\t},\n \t\tGaugeInt64: func(l metrics.Labels, v int64, t time.Time) {\n-\t\t\tts, err := ptypes.TimestampProto(t)\n+\t\t\tpayload, err := int64Latest(t, v)\n \t\t\tif err != nil {", "originalCommit": "41180c8eaf34de768d2d013630329ff4449c2725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NTIxOQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398275219", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-26T02:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTA3OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398239079", "bodyText": "Error case reversal.\nConsider\nif err != nil {\n  panic(err)\n}\n// ...actual contents of the block.", "author": "lostluck", "createdAt": "2020-03-25T23:50:28Z", "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -80,36 +84,40 @@ func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n \tvar monitoringInfo []*ppb.MonitoringInfo\n \tmetrics.Extractor{\n \t\tSumInt64: func(l metrics.Labels, v int64) {\n-\t\t\tmonitoringInfo = append(monitoringInfo,\n-\t\t\t\t&ppb.MonitoringInfo{\n-\t\t\t\t\tUrn:    \"beam:metric:user\",\n-\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n-\t\t\t\t\tLabels: userLabels(l),\n-\t\t\t\t\tData:   int64Counter(v),\n-\t\t\t\t})\n+\t\t\tpayload, err := int64Counter(v)\n+\t\t\tif err != nil {\n+\t\t\t\tmonitoringInfo = append(monitoringInfo,\n+\t\t\t\t\t&ppb.MonitoringInfo{\n+\t\t\t\t\t\tUrn:     \"beam:metric:user:v1\",\n+\t\t\t\t\t\tType:    \"beam:metrics:sum_int64:v1\",\n+\t\t\t\t\t\tLabels:  userLabels(l),\n+\t\t\t\t\t\tPayload: payload,\n+\t\t\t\t\t})\n+\t\t\t}\n \t\t},\n \t\tDistributionInt64: func(l metrics.Labels, count, sum, min, max int64) {\n-\t\t\tmonitoringInfo = append(monitoringInfo,\n-\t\t\t\t&ppb.MonitoringInfo{\n-\t\t\t\t\tUrn:    \"beam:metric:user_distribution\",\n-\t\t\t\t\tType:   \"beam:metrics:distribution_int_64\",\n-\t\t\t\t\tLabels: userLabels(l),\n-\t\t\t\t\tData:   int64Distribution(count, sum, min, max),\n-\t\t\t\t})\n+\t\t\tpayload, err := int64Distribution(count, sum, min, max)\n+\t\t\tif err != nil {", "originalCommit": "41180c8eaf34de768d2d013630329ff4449c2725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NTIwOQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398275209", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-26T02:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTEyNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398239127", "bodyText": "Error case reversal.\nConsider\nif err != nil {\n  panic(err)\n}\n// ...actual contents of the block.", "author": "lostluck", "createdAt": "2020-03-25T23:50:36Z", "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -80,36 +84,40 @@ func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n \tvar monitoringInfo []*ppb.MonitoringInfo\n \tmetrics.Extractor{\n \t\tSumInt64: func(l metrics.Labels, v int64) {\n-\t\t\tmonitoringInfo = append(monitoringInfo,\n-\t\t\t\t&ppb.MonitoringInfo{\n-\t\t\t\t\tUrn:    \"beam:metric:user\",\n-\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n-\t\t\t\t\tLabels: userLabels(l),\n-\t\t\t\t\tData:   int64Counter(v),\n-\t\t\t\t})\n+\t\t\tpayload, err := int64Counter(v)\n+\t\t\tif err != nil {", "originalCommit": "41180c8eaf34de768d2d013630329ff4449c2725", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NTIwMQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398275201", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-26T02:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTEyNw=="}], "type": "inlineReview"}, {"oid": "6664d865fff40e760e2817a4683134488fcccb84", "url": "https://github.com/apache/beam/commit/6664d865fff40e760e2817a4683134488fcccb84", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T02:28:38Z", "type": "forcePushed"}, {"oid": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "url": "https://github.com/apache/beam/commit/d1cc9a69ce451bd602bf985518c6f8edf70565cf", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T02:51:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MTM4Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398751386", "bodyText": "Should we consider explicitly having the ms as part of the URN, to keep 'us' and 'ns' granularity definitions open for the future?", "author": "lostluck", "createdAt": "2020-03-26T17:21:04Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -229,121 +330,152 @@ message MonitoringInfo {\n     NAMESPACE = 5 [(label_props) = { name: \"NAMESPACE\" }];\n     NAME = 6 [(label_props) = { name: \"NAME\" }];\n   }\n-  // A set of key+value labels which define the scope of the metric.\n+\n+  // A set of key and value labels which define the scope of the metric. For\n+  // well known URNs, the set of required labels is provided by the associated\n+  // MonitoringInfoSpec.\n+  //\n   // Either a well defined entity id for matching the enum names in\n   // the MonitoringInfoLabels enum or any arbitrary label\n   // set by a custom metric or user metric.\n+  //\n   // A monitoring system is expected to be able to aggregate the metrics\n   // together for all updates having the same URN and labels. Some systems such\n   // as Stackdriver will be able to aggregate the metrics using a subset of the\n   // provided labels\n-  map<string, string> labels = 5;\n-\n-  // The walltime of the most recent update.\n-  // Useful for aggregation for latest types such as LatestInt64.\n-  google.protobuf.Timestamp timestamp = 6;\n+  map<string, string> labels = 4;\n }\n \n+// A set of well known URNs that specify the encoding and aggregation method.\n message MonitoringInfoTypeUrns {\n   enum Enum {\n+    // Represents an integer counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   - value: beam:coder:varint:v1\n     SUM_INT64_TYPE = 0 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                            \"beam:metrics:sum_int_64\"];\n-\n-    DISTRIBUTION_INT64_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                                     \"beam:metrics:distribution_int_64\"];\n-\n-    LATEST_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                               \"beam:metrics:latest_int_64\"];\n-\n-    // iterable<double> is encoded with a beam:coder:double:v1 coder for each\n-    // element.\n-    LATEST_DOUBLES_TYPE = 3 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n-                                 \"beam:metrics:latest_doubles\"];\n-  }\n-}\n-\n-message Metric {\n-  // (Required) The data for this metric.\n-  oneof data {\n-    CounterData counter_data = 1;\n-    DistributionData distribution_data = 2;\n-    ExtremaData extrema_data = 3;\n-  }\n-}\n-\n-// Data associated with a Counter or Gauge metric.\n-// This is designed to be compatible with metric collection\n-// systems such as DropWizard.\n-message CounterData {\n-  oneof value {\n-    int64 int64_value = 1;\n-    double double_value = 2;\n-    string string_value = 3;\n-  }\n-}\n-\n-// Extrema messages are used for calculating\n-// Top-N/Bottom-N metrics.\n-message ExtremaData {\n-  oneof extrema {\n-    IntExtremaData int_extrema_data = 1;\n-    DoubleExtremaData double_extrema_data = 2;\n-  }\n-}\n-\n-message IntExtremaData {\n-  repeated int64 int_values = 1;\n-}\n-\n-message DoubleExtremaData {\n-  repeated double double_values = 2;\n-}\n-\n-// Data associated with a distribution metric.\n-// This is based off of the current DistributionData metric.\n-// This is not a stackdriver or dropwizard compatible\n-// style of distribution metric.\n-message DistributionData {\n-  oneof distribution {\n-    IntDistributionData int_distribution_data = 1;\n-    DoubleDistributionData double_distribution_data = 2;\n+                            \"beam:metrics:sum_int64:v1\"];\n+\n+    // Represents a double counter where values are summed across bundles.\n+    //\n+    // Encoding: <value>\n+    //   value: beam:coder:double:v1\n+    SUM_DOUBLE_TYPE = 1 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                        \"beam:metrics:sum_double:v1\"];\n+\n+    // Represents a distribution of an integer value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:varint:v1\n+    //   - min:   beam:coder:varint:v1\n+    //   - max:   beam:coder:varint:v1\n+    DISTRIBUTION_INT64_TYPE = 2 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                     \"beam:metrics:distribution_int64:v1\"];\n+\n+    // Represents a distribution of a double value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    //\n+    // Encoding: <count><sum><min><max>\n+    //   - count: beam:coder:varint:v1\n+    //   - sum:   beam:coder:double:v1\n+    //   - min:   beam:coder:double:v1\n+    //   - max:   beam:coder:double:v1\n+    DISTRIBUTION_DOUBLE_TYPE = 3 [(org.apache.beam.model.pipeline.v1.beam_urn) =\n+                                 \"beam:metrics:distribution_double:v1\"];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    //\n+    // Encoding: <timestamp><value>\n+    //   - timestamp: beam:coder:varint:v1     (milliseconds since epoch)\n+    //   - value:     beam:coder:varint:v1\n+    LATEST_INT64_TYPE = 4 [(org.apache.beam.model.pipeline.v1.beam_urn) =", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NzE4OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398767189", "bodyText": "Would need to do this in other places such as the timer coder, windowed value coder if we wanted to keep the URN naming to be consistent so I'll leave as is and added this to the protocol changes tracking sheet.", "author": "lukecwik", "createdAt": "2020-03-26T17:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MTM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NTAzOA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398755038", "bodyText": "Need to run go fmt again.", "author": "lostluck", "createdAt": "2020-03-26T17:25:58Z", "path": "sdks/go/pkg/beam/core/runtime/harness/monitoring.go", "diffHunk": "@@ -80,36 +84,43 @@ func monitoring(p *exec.Plan) (*fnpb.Metrics, []*ppb.MonitoringInfo) {\n \tvar monitoringInfo []*ppb.MonitoringInfo\n \tmetrics.Extractor{\n \t\tSumInt64: func(l metrics.Labels, v int64) {\n-\t\t\tmonitoringInfo = append(monitoringInfo,\n-\t\t\t\t&ppb.MonitoringInfo{\n-\t\t\t\t\tUrn:    \"beam:metric:user\",\n-\t\t\t\t\tType:   \"beam:metrics:sum_int_64\",\n-\t\t\t\t\tLabels: userLabels(l),\n-\t\t\t\t\tData:   int64Counter(v),\n-\t\t\t\t})\n+\t\t\tpayload, err := int64Counter(v)\n+\t\t\tif err != nil {\n+\t\t\t  panic(err)\n+\t\t\t}\n+      monitoringInfo = append(monitoringInfo,", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NDY0Mg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398764642", "bodyText": "done", "author": "lukecwik", "createdAt": "2020-03-26T17:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NTAzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NTc3Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398765776", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-26T17:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NTAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MDMxNg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398750316", "bodyText": "Is this still a URN? Could you mention in the comment what the valid values for this are, where you could find a list of some of them, etc.?", "author": "ajamato", "createdAt": "2020-03-26T17:19:36Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -33,14 +33,17 @@ import \"beam_runner_api.proto\";\n import \"google/protobuf/descriptor.proto\";\n import \"google/protobuf/timestamp.proto\";\n \n-// A specification containing required set of fields and labels required\n-// to be set on a MonitoringInfo for the specific URN for SDK->RunnerHarness\n-// ProcessBundleResponse reporting.\n+// A specification for describing a well known MonitoringInfo.\n message MonitoringInfoSpec {\n+  // Defines the semantic meaning of the metric or monitored state.\n   string urn = 1;\n-  string type_urn = 2;\n-  // The list of required\n+\n+  // Defines the encoding and aggregation method for the payload.\n+  string type = 2;", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0MzA2Mg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398843062", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-26T19:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MDMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MDM3Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398750376", "bodyText": "Could you mention in the comment what the valid values for this are, where you could find a list of some of them, etc.?", "author": "ajamato", "createdAt": "2020-03-26T17:19:40Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -33,14 +33,17 @@ import \"beam_runner_api.proto\";\n import \"google/protobuf/descriptor.proto\";\n import \"google/protobuf/timestamp.proto\";\n \n-// A specification containing required set of fields and labels required\n-// to be set on a MonitoringInfo for the specific URN for SDK->RunnerHarness\n-// ProcessBundleResponse reporting.\n+// A specification for describing a well known MonitoringInfo.\n message MonitoringInfoSpec {\n+  // Defines the semantic meaning of the metric or monitored state.", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0MzIwMA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398843200", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-03-26T19:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MDM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1OTU4MQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398759581", "bodyText": "Is there a reason you want to populate these today? When there is no usage of these yet in the runners and sdks we have here today?", "author": "ajamato", "createdAt": "2020-03-26T17:31:45Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -52,38 +55,157 @@ message Annotation {\n   string value = 2;\n }\n \n-// Populated MonitoringInfoSpecs for specific URNs.\n-// Indicating the required fields to be set.\n-// SDKs and RunnerHarnesses can load these instances into memory and write a\n-// validator or code generator to assist with populating and validating\n-// MonitoringInfo protos.\n+// A set of well known MonitoringInfo specifications.\n message MonitoringInfoSpecs {\n   enum Enum {\n-    // TODO(BEAM-6926): Add the PTRANSFORM name as a required label after\n-    // upgrading the python SDK.\n-    USER_COUNTER = 0 [(monitoring_info_spec) = {\n-      urn: \"beam:metric:user\",\n-      type_urn: \"beam:metrics:sum_int_64\",\n+    // Represents an integer counter where values are summed across bundles.\n+    USER_SUM_INT64 = 0 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:sum_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents a double counter where values are summed across bundles.\n+    USER_SUM_DOUBLE = 1 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:sum_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents a distribution of an integer value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    USER_DISTRIBUTION_INT64 = 2 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:distribution_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents a distribution of a double value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    USER_DISTRIBUTION_DOUBLE = 3 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:distribution_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    USER_LATEST_INT64 = 4 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:latest_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the latest seen double value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    USER_LATEST_DOUBLE = 5 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:latest_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the largest set of integer values seen across bundles.\n+    USER_TOP_N_INT64 = 6 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:top_n_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the largest set of double values seen across bundles.\n+    USER_TOP_N_DOUBLE = 7 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:top_n_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the smallest set of integer values seen across bundles.\n+    USER_BOTTOM_N_INT64 = 8 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:bottom_n_int64:v1\",\n       required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n       annotations: [{\n         key: \"description\",\n-        value: \"URN utilized to report user numeric counters.\"\n+        value: \"URN utilized to report user metric.\"\n       }]\n     }];\n \n-    ELEMENT_COUNT = 1 [(monitoring_info_spec) = {\n+    // Represents the smallest set of double values seen across bundles.\n+    USER_BOTTOM_N_DOUBLE = 9 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:bottom_n_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // General monitored state information which contains structured information\n+    // which does not fit into a typical metric format. See MonitoringTableData\n+    // for more details.\n+    USER_MONITORING_TABLE = 10 [(monitoring_info_spec) = {", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MDYyMg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398850622", "bodyText": "Commented it out with a TODO and filed BEAM-9617", "author": "lukecwik", "createdAt": "2020-03-26T19:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1OTU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NDI2OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398794269", "bodyText": "Looks like SimpleMonitoringInfoBuilder helped a lot with this refactor :)", "author": "ajamato", "createdAt": "2020-03-26T18:21:39Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/SimpleMonitoringInfoBuilder.java", "diffHunk": "@@ -86,46 +89,97 @@ public SimpleMonitoringInfoBuilder setUrn(String urn) {\n     return this;\n   }\n \n-  /** Sets the timestamp of the MonitoringInfo to the current time. */\n-  public SimpleMonitoringInfoBuilder setTimestampToNow() {\n-    Instant time = Instant.now();\n-    this.builder.getTimestampBuilder().setSeconds(time.getEpochSecond()).setNanos(time.getNano());\n+  /**\n+   * Sets the type of the MonitoringInfo.\n+   *\n+   * @param type The type of the MonitoringInfo\n+   */\n+  public SimpleMonitoringInfoBuilder setType(String type) {\n+    this.builder.setType(type);\n+    return this;\n+  }\n+\n+  /**\n+   * Encodes the value and sets the type to {@link MonitoringInfoConstants.TypeUrns#SUM_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setInt64SumValue(long value) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(value, output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the int64Value of the CounterData in the MonitoringInfo, and the appropriate type URN. */\n-  public SimpleMonitoringInfoBuilder setInt64Value(long value) {\n-    this.builder.getMetricBuilder().getCounterDataBuilder().setInt64Value(value);\n-    this.setInt64TypeUrn();\n+  public SimpleMonitoringInfoBuilder setDoubleSumValue(double value) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      DOUBLE_CODER.encode(value, output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_DOUBLE_TYPE);\n     return this;\n   }\n \n   /**\n-   * Sets the IntDistributionData of the DistributionData in the MonitoringInfo, and the appropriate\n-   * type URN.\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#LATEST_INT64_TYPE}.\n    */\n-  public SimpleMonitoringInfoBuilder setInt64DistributionValue(DistributionData data) {\n-    this.builder\n-        .getMetricBuilder()\n-        .getDistributionDataBuilder()\n-        .getIntDistributionDataBuilder()\n-        .setCount(data.count())\n-        .setSum(data.sum())\n-        .setMin(data.min())\n-        .setMax(data.max());\n-    this.setInt64DistributionTypeUrn();\n+  public SimpleMonitoringInfoBuilder setInt64LatestValue(GaugeData data) {\n+    checkArgument(GaugeData.empty() != data, \"Cannot encode empty gauge data\");\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(data.timestamp().getMillis(), output);\n+      VARINT_CODER.encode(data.value(), output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.LATEST_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the the appropriate type URN for int64 distribution tuples. */\n-  public SimpleMonitoringInfoBuilder setInt64DistributionTypeUrn() {\n-    this.builder.setType(MonitoringInfoConstants.TypeUrns.DISTRIBUTION_INT64);\n+  /**\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#DISTRIBUTION_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setInt64DistributionValue(DistributionData data) {\n+    ByteString.Output output = ByteString.newOutput();\n+    try {\n+      VARINT_CODER.encode(data.count(), output);\n+      VARINT_CODER.encode(data.sum(), output);\n+      VARINT_CODER.encode(data.min(), output);\n+      VARINT_CODER.encode(data.max(), output);\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    this.builder.setPayload(output.toByteString());\n+    this.builder.setType(MonitoringInfoConstants.TypeUrns.DISTRIBUTION_INT64_TYPE);\n     return this;\n   }\n \n-  /** Sets the the appropriate type URN for sum int64 counters. */\n-  public SimpleMonitoringInfoBuilder setInt64TypeUrn() {\n-    this.builder.setType(MonitoringInfoConstants.TypeUrns.SUM_INT64);\n+  /**\n+   * Encodes the value and sets the type to {@link\n+   * MonitoringInfoConstants.TypeUrns#DISTRIBUTION_INT64_TYPE}.\n+   */\n+  public SimpleMonitoringInfoBuilder setDoubleDistributionValue(", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MjQ1MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398852450", "bodyText": "Yup", "author": "lukecwik", "createdAt": "2020-03-26T19:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NDI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTg2Mw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398795863", "bodyText": "Why did you add the isEmpty() checks, this looks like the old matcher didn't have this logic, and it would match if you initialized the matcher with an empty monitoring info", "author": "ajamato", "createdAt": "2020-03-26T18:23:39Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java", "diffHunk": "@@ -28,30 +31,17 @@\n    * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n    *\n    * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and int64Values.\n+   * Currently this will only check for URNs, labels, type URNs and payloads.\n    */\n   public static TypeSafeMatcher<MonitoringInfo> matchSetFields(final MonitoringInfo mi) {\n     return new TypeSafeMatcher<MonitoringInfo>() {\n \n       @Override\n       protected boolean matchesSafely(MonitoringInfo item) {\n-        if (!item.getUrn().equals(mi.getUrn())) {\n-          return false;\n-        }\n-        if (!item.getLabels().equals(mi.getLabels())) {\n-          return false;\n-        }\n-        if (!item.getType().equals(mi.getType())) {\n-          return false;\n-        }\n-\n-        if (mi.getMetric().hasCounterData()) {\n-          long valueToMatch = mi.getMetric().getCounterData().getInt64Value();\n-          if (valueToMatch != item.getMetric().getCounterData().getInt64Value()) {\n-            return false;\n-          }\n-        }\n-        return true;\n+        return (mi.getUrn().isEmpty() || mi.getUrn().equals(item.getUrn()))", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NTMxMw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398855313", "bodyText": "The contract of the matcher states that it only compares set fields and it seemed it was incorrectly implemented. I can change it back to the existing implementation where urn, labels, and type must always be specified and fix the comment.", "author": "lukecwik", "createdAt": "2020-03-26T20:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5NTg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODU4MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398798580", "bodyText": "would this only work with certain types? Should this be renamed?", "author": "ajamato", "createdAt": "2020-03-26T18:27:44Z", "path": "runners/core-java/src/test/java/org/apache/beam/runners/core/metrics/MonitoringInfoMatchers.java", "diffHunk": "@@ -76,17 +63,20 @@ public void describeTo(Description description) {\n    * Matches a {@link MonitoringInfo} with that has the set fields in the provide MonitoringInfo.\n    *\n    * <p>This is useful for tests which do not want to match the specific value (execution times).\n-   * Currently this will only check for URNs, labels, type URNs and int64Values.\n+   * Currently this will only check for URNs, labels, type URNs and {@code beam:coder:varint:v1}\n+   * encoded values.\n    */\n-  public static TypeSafeMatcher<MonitoringInfo> valueGreaterThan(final long value) {\n+  public static TypeSafeMatcher<MonitoringInfo> valueGreaterThanOrEqualTo(final long value) {", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1NjY2OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398856669", "bodyText": "Renamed to counterValueGreaterThanOrEqualTo\nAlso fixed comment.", "author": "lukecwik", "createdAt": "2020-03-26T20:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5ODU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTM3Ng==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398801376", "bodyText": "Can we encapsulte this so that its still one line to get the value out? I think that this would be a nicer interface. For consumers. Ideally something as easy to use on the receiving side as SimpleMonitoringInfoBuilder.\ni.e.\nlong value = MonitoringInfos.getSumInt64Value(monitoringInfo)", "author": "ajamato", "createdAt": "2020-03-26T18:31:55Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/ElementCountMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -95,7 +99,12 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5OTcwNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398899707", "bodyText": "Done here and elsewhere. I introduced a MonitoringInfoEncodings class with the convenience methods for the currently used encodings.", "author": "lukecwik", "createdAt": "2020-03-26T21:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjkxMQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398802911", "bodyText": "Can you key this by a tuple instead of a 2 layer dictionary? That might reduce some of the boilerplate below. I believe the Pair class can work here", "author": "ajamato", "createdAt": "2020-03-26T18:34:21Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/FnApiMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -35,50 +35,82 @@\n public class FnApiMonitoringInfoToCounterUpdateTransformer\n     implements MonitoringInfoToCounterUpdateTransformer {\n \n-  final Map<String, MonitoringInfoToCounterUpdateTransformer> counterTransformers = new HashMap<>();\n+  final Map<String, Map<String, MonitoringInfoToCounterUpdateTransformer>>", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1ODQyOA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398858428", "bodyText": "Done.", "author": "lukecwik", "createdAt": "2020-03-26T20:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDk0NQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398804945", "bodyText": "Ditto here, please use a one liner helper method to extract the value, here and in all the transformer classes.", "author": "ajamato", "createdAt": "2020-03-26T18:37:39Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -120,14 +110,19 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTIyNw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398805227", "bodyText": "ditto", "author": "ajamato", "createdAt": "2020-03-26T18:38:06Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/MeanByteCountMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -100,8 +101,18 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    IntDistributionData value =\n-        monitoringInfo.getMetric().getDistributionData().getIntDistributionData();\n+    long count;\n+    long sum;\n+    try {\n+      InputStream payload = monitoringInfo.getPayload().newInput();", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNTU3OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398805578", "bodyText": "ditto, this is also too low level, please use a helper here. Let's try to encapsulate the bytes payload format of MonitoringInfos.", "author": "ajamato", "createdAt": "2020-03-26T18:38:38Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/RegisterAndProcessBundleOperation.java", "diffHunk": "@@ -446,7 +447,11 @@ long getInputElementsConsumed(final Iterable<MonitoringInfo> monitoringInfos) {\n         String pcollection =\n             mi.getLabelsOrDefault(MonitoringInfoConstants.Labels.PCOLLECTION, null);\n         if (pcollection != null && pcollection.equals(grpcReadTransformOutputPCollectionName)) {\n-          return mi.getMetric().getCounterData().getInt64Value();\n+          try {\n+            return VARINT_CODER.decode(mi.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNjk5Nw==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398806997", "bodyText": "ditto please use one liner here", "author": "ajamato", "createdAt": "2020-03-26T18:40:55Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/fn/control/UserMonitoringInfoToCounterUpdateTransformer.java", "diffHunk": "@@ -95,7 +100,12 @@ public CounterUpdate transform(MonitoringInfo monitoringInfo) {\n       return null;\n     }\n \n-    long value = monitoringInfo.getMetric().getCounterData().getInt64Value();\n+    long value;\n+    try {\n+      value = VARINT_CODER.decode(monitoringInfo.getPayload().newInput());", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk5OQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398810999", "bodyText": "Can you add a TODO to rename this to ExecutionTimeMonitoringInfoToCounterUpdateTransformer", "author": "ajamato", "createdAt": "2020-03-26T18:47:23Z", "path": "runners/google-cloud-dataflow-java/worker/src/test/java/org/apache/beam/runners/dataflow/worker/fn/control/MSecMonitoringInfoToCounterUpdateTransformerTest.java", "diffHunk": "@@ -54,39 +58,33 @@ public void setUp() throws Exception {\n \n   @Test\n   public void testTransformReturnsNullIfSpecValidationFails() {\n-    Map<String, String> counterNameMapping = new HashMap<>();\n-    counterNameMapping.put(\"beam:counter:supported\", \"supportedCounter\");\n-\n     Map<String, DataflowStepContext> stepContextMapping = new HashMap<>();\n \n     MSecMonitoringInfoToCounterUpdateTransformer testObject =", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MTQ2NA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398851464", "bodyText": "Did the rename.", "author": "lukecwik", "createdAt": "2020-03-26T19:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjY5MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398812690", "bodyText": "ditto, please use a helper here to make this a one liner to extract the value", "author": "ajamato", "createdAt": "2020-03-26T18:49:58Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java", "diffHunk": "@@ -115,17 +113,15 @@ private static PortableMetrics convertMonitoringInfosToMetricResults(\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    MetricsApi.IntExtremaData extremaData =\n-        monitoringInfo.getMetric().getExtremaData().getIntExtremaData();\n-    // Get only last value of the extrema table\n-    Instant timestamp = Instant.ofEpochSecond(monitoringInfo.getTimestamp().getSeconds());\n-    if (extremaData.getIntValuesCount() > 0) {\n-      GaugeResult result =\n-          GaugeResult.create(\n-              extremaData.getIntValues(extremaData.getIntValuesCount() - 1), timestamp);\n+    try {\n+      InputStream input = monitoringInfo.getPayload().newInput();\n+      long timestamp = VARINT_CODER.decode(input);", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjg2MQ==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398812861", "bodyText": "ditto, please use helper here", "author": "ajamato", "createdAt": "2020-03-26T18:50:12Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableMetrics.java", "diffHunk": "@@ -135,21 +131,23 @@ private static PortableMetrics convertMonitoringInfosToMetricResults(\n         MetricKey.create(\n             labelsMap.get(STEP_NAME_LABEL),\n             MetricName.named(labelsMap.get(NAMESPACE_LABEL), labelsMap.get(METRIC_NAME_LABEL)));\n-    MetricsApi.IntDistributionData intDistributionData =\n-        monitoringInfo.getMetric().getDistributionData().getIntDistributionData();\n-    DistributionResult result =\n-        DistributionResult.create(\n-            intDistributionData.getSum(),\n-            intDistributionData.getCount(),\n-            intDistributionData.getMin(),\n-            intDistributionData.getMax());\n-    return MetricResult.create(key, false, result);\n+    try {\n+      InputStream input = monitoringInfo.getPayload().newInput();\n+      long count = VARINT_CODER.decode(input);", "originalCommit": "d1cc9a69ce451bd602bf985518c6f8edf70565cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNjUwNg==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398916506", "bodyText": "Now it seems like there technically aren't any fields named \"count\", \"sum\", \"min\", \"max\". Just 4 encoded varints in that specific order. There is no longer a proto or anything which defines this format.\nIf we are going to keep type urns, I think that there should be somewhere in this file where you could a \"TypeSpec\", which describes how to encode each opaque bytes payload. i.e. the coders used for each value, the order they must be encoded. Or a proto that should be serialized into that bytes field, etc. A description that will work for all languages. Right now you can only know that from looking at your encoding code.\nI think it would be best if SDK implemented could look at a reference file like this and know how to populate the MonitoringInfo. That was the original intention behind MonitoringInfoSpec, and I believe that is a bit lost now with this change.", "author": "ajamato", "createdAt": "2020-03-26T21:55:31Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -52,38 +61,160 @@ message Annotation {\n   string value = 2;\n }\n \n-// Populated MonitoringInfoSpecs for specific URNs.\n-// Indicating the required fields to be set.\n-// SDKs and RunnerHarnesses can load these instances into memory and write a\n-// validator or code generator to assist with populating and validating\n-// MonitoringInfo protos.\n+// A set of well known MonitoringInfo specifications.\n message MonitoringInfoSpecs {\n   enum Enum {\n-    // TODO(BEAM-6926): Add the PTRANSFORM name as a required label after\n-    // upgrading the python SDK.\n-    USER_COUNTER = 0 [(monitoring_info_spec) = {\n-      urn: \"beam:metric:user\",\n-      type_urn: \"beam:metrics:sum_int_64\",\n+    // Represents an integer counter where values are summed across bundles.\n+    USER_SUM_INT64 = 0 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:sum_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents a double counter where values are summed across bundles.\n+    USER_SUM_DOUBLE = 1 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:v1\",\n+      type: \"beam:metrics:sum_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents a distribution of an integer value where:\n+    //   - count: represents the number of values seen across all bundles", "originalCommit": "da831fd0941a6ca7577352cc545aad7adc9bbb84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MjQ4OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398952488", "bodyText": "It is explicit in the type field which is a URN denoting exactly how the values are encoded? Did we need more?", "author": "robertwb", "createdAt": "2020-03-26T23:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNjUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Nzg4OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398957888", "bodyText": "I chatted with Alex about this and the TypeUrns describing the encoding was enough.", "author": "lukecwik", "createdAt": "2020-03-26T23:48:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNjUwNg=="}], "type": "inlineReview"}, {"oid": "23a41f374e899eeda3e9d709974ec277eeb50f78", "url": "https://github.com/apache/beam/commit/23a41f374e899eeda3e9d709974ec277eeb50f78", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-26T23:37:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MzA0MA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398953040", "bodyText": "Nit: Should we jump to 100 (or alternatively have the user types be 1xxx) just to have nice consecutive numbers are more types get added?", "author": "robertwb", "createdAt": "2020-03-26T23:33:06Z", "path": "model/pipeline/src/main/proto/metrics.proto", "diffHunk": "@@ -52,38 +62,160 @@ message Annotation {\n   string value = 2;\n }\n \n-// Populated MonitoringInfoSpecs for specific URNs.\n-// Indicating the required fields to be set.\n-// SDKs and RunnerHarnesses can load these instances into memory and write a\n-// validator or code generator to assist with populating and validating\n-// MonitoringInfo protos.\n+// A set of well known MonitoringInfo specifications.\n message MonitoringInfoSpecs {\n   enum Enum {\n-    // TODO(BEAM-6926): Add the PTRANSFORM name as a required label after\n-    // upgrading the python SDK.\n-    USER_COUNTER = 0 [(monitoring_info_spec) = {\n-      urn: \"beam:metric:user\",\n-      type_urn: \"beam:metrics:sum_int_64\",\n+    // Represents an integer counter where values are summed across bundles.\n+    USER_SUM_INT64 = 0 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:sum_int64:v1\",\n+      type: \"beam:metrics:sum_int64:v1\",\n       required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n       annotations: [{\n         key: \"description\",\n-        value: \"URN utilized to report user numeric counters.\"\n+        value: \"URN utilized to report user metric.\"\n       }]\n     }];\n \n-    ELEMENT_COUNT = 1 [(monitoring_info_spec) = {\n+    // Represents a double counter where values are summed across bundles.\n+    USER_SUM_DOUBLE = 1 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:sum_double:v1\",\n+      type: \"beam:metrics:sum_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents a distribution of an integer value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    USER_DISTRIBUTION_INT64 = 2 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:distribution_int64:v1\",\n+      type: \"beam:metrics:distribution_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents a distribution of a double value where:\n+    //   - count: represents the number of values seen across all bundles\n+    //   - sum: represents the total of the value across all bundles\n+    //   - min: represents the smallest value seen across all bundles\n+    //   - max: represents the largest value seen across all bundles\n+    USER_DISTRIBUTION_DOUBLE = 3 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:distribution_double:v1\",\n+      type: \"beam:metrics:distribution_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the latest seen integer value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    USER_LATEST_INT64 = 4 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:latest_int64:v1\",\n+      type: \"beam:metrics:latest_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the latest seen double value. The timestamp is used to\n+    // provide an \"ordering\" over multiple values to determine which is the\n+    // latest.\n+    USER_LATEST_DOUBLE = 5 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:latest_double:v1\",\n+      type: \"beam:metrics:latest_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the largest set of integer values seen across bundles.\n+    USER_TOP_N_INT64 = 6 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:top_n_int64:v1\",\n+      type: \"beam:metrics:top_n_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the largest set of double values seen across bundles.\n+    USER_TOP_N_DOUBLE = 7 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:top_n_double:v1\",\n+      type: \"beam:metrics:top_n_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the smallest set of integer values seen across bundles.\n+    USER_BOTTOM_N_INT64 = 8 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:bottom_n_int64:v1\",\n+      type: \"beam:metrics:bottom_n_int64:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // Represents the smallest set of double values seen across bundles.\n+    USER_BOTTOM_N_DOUBLE = 9 [(monitoring_info_spec) = {\n+      urn: \"beam:metric:user:bottom_n_double:v1\",\n+      type: \"beam:metrics:bottom_n_double:v1\",\n+      required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+      annotations: [{\n+        key: \"description\",\n+        value: \"URN utilized to report user metric.\"\n+      }]\n+    }];\n+\n+    // General monitored state information which contains structured information\n+    // which does not fit into a typical metric format. See MonitoringTableData\n+    // for more details.\n+    //\n+    // TODO(BEAM-9617): Support monitored state.\n+    //\n+    // USER_MONITORING_TABLE = XX [(monitoring_info_spec) = {\n+    //   urn: \"beam:metric:user:v1\",\n+    //   type: \"beam:metrics:monitoring_table:v1\",\n+    //   required_labels: [\"PTRANSFORM\", \"NAMESPACE\", \"NAME\"],\n+    //   annotations: [{\n+    //     key: \"description\",\n+    //     value: \"URN utilized to report user monitoring data.\"\n+    //   }]\n+    // }];\n+\n+    ELEMENT_COUNT = 10 [(monitoring_info_spec) = {", "originalCommit": "d3d6431341209ca90741051da7f61c2a9060dc7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NzQ1OA==", "url": "https://github.com/apache/beam/pull/11184#discussion_r398957458", "bodyText": "Having the actual monitoring specs that are related grouped together is all that matters, the numbers shouldn't matter.", "author": "lukecwik", "createdAt": "2020-03-26T23:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MzA0MA=="}], "type": "inlineReview"}, {"oid": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "url": "https://github.com/apache/beam/commit/40bc44a1a1e0fcb23771e08f41d06bcecda04494", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-27T18:30:44Z", "type": "commit"}, {"oid": "40bc44a1a1e0fcb23771e08f41d06bcecda04494", "url": "https://github.com/apache/beam/commit/40bc44a1a1e0fcb23771e08f41d06bcecda04494", "message": "[BEAM-4374] Update protos related to MonitoringInfo.\n\nProvide documentation and update all URNs and type URNs to v1.\nRemove all but the payload field for MonitoringInfo for transmitting data.\nUpdate all SDKs to encode the payload field.", "committedDate": "2020-03-27T18:30:44Z", "type": "forcePushed"}]}