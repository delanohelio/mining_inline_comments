{"pr_number": 12706, "pr_title": "[BEAM-6868, BEAM-10670] Add support for bundle finalization to DoFnOperator for non-portable streaming pipelines.", "pr_createdAt": "2020-08-27T21:40:35Z", "pr_url": "https://github.com/apache/beam/pull/12706", "timeline": [{"oid": "b64a9e8328893a47cf2a6bcd52218253d65fefbc", "url": "https://github.com/apache/beam/commit/b64a9e8328893a47cf2a6bcd52218253d65fefbc", "message": "[BEAM-10670] Add support for bundle finalization to DoFnOperator for non-portable streaming pipelines.\n\nI used the UnboundedSourceFunction as a guide to implementing the bundle finalization hook for the DoFnOperator.\nSince checkpointing support is only supported when using shutdownSourcesAfterIdleMs so I added a new validates runner task that runs a subset of the tests that rely on bundle finalization.\n\nI also added support for Impulse translation for non-portable streaming pipelines.", "committedDate": "2020-08-27T21:40:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNDI4Mg==", "url": "https://github.com/apache/beam/pull/12706#discussion_r478904282", "bodyText": "This constant appears to be unused.", "author": "mxm", "createdAt": "2020-08-28T07:52:30Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -191,6 +194,17 @@\n \n   private final boolean finishBundleBeforeCheckpointing;\n \n+  /** Stores new finalizations being gathered. */\n+  private transient InMemoryBundleFinalizer bundleFinalizer;\n+  /** Pending bundle finalizations which have not been acknowledged yet. */\n+  private transient LinkedHashMap<Long, List<InMemoryBundleFinalizer.Finalization>>\n+      pendingFinalizations;\n+  /**\n+   * Keep a maximum of 32 bundle finalizations for {@link\n+   * BundleFinalizer.Callback#onBundleSuccess()}.\n+   */\n+  private static final int MAX_NUMBER_PENDING_BUNDLE_FINALIZATIONS = 32;", "originalCommit": "b64a9e8328893a47cf2a6bcd52218253d65fefbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3NzE5Nw==", "url": "https://github.com/apache/beam/pull/12706#discussion_r479377197", "bodyText": "I forgot to add the clean-up logic bounding how many there could be.", "author": "lukecwik", "createdAt": "2020-08-28T15:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNDI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNTY4MQ==", "url": "https://github.com/apache/beam/pull/12706#discussion_r478905681", "bodyText": "The default is to have just one checkpoint at a given time, but users can configure concurrent checkpointing which can ack checkpoints out of order.", "author": "mxm", "createdAt": "2020-08-28T07:54:04Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -905,6 +928,19 @@ public final void notifyCheckpointComplete(long checkpointId) throws Exception {\n       bufferingDoFnRunner.checkpointCompleted(checkpointId);\n     }\n \n+    List<InMemoryBundleFinalizer.Finalization> finalizations =\n+        pendingFinalizations.get(checkpointId);\n+    if (finalizations != null) {\n+      // remove old finalizations except for the current one\n+      pendingFinalizations.clear();", "originalCommit": "b64a9e8328893a47cf2a6bcd52218253d65fefbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4MDQzMw==", "url": "https://github.com/apache/beam/pull/12706#discussion_r479380433", "bodyText": "I see, I was basing the logic on UnboundedSourceWrapper but I have removed it now.", "author": "lukecwik", "createdAt": "2020-08-28T15:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNjA4MA==", "url": "https://github.com/apache/beam/pull/12706#discussion_r478906080", "bodyText": "Acknowledging the latest bundle finalize will also acknowledge all earlier requests for bundle finalization?", "author": "mxm", "createdAt": "2020-08-28T07:54:33Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -905,6 +928,19 @@ public final void notifyCheckpointComplete(long checkpointId) throws Exception {\n       bufferingDoFnRunner.checkpointCompleted(checkpointId);\n     }\n \n+    List<InMemoryBundleFinalizer.Finalization> finalizations =\n+        pendingFinalizations.get(checkpointId);\n+    if (finalizations != null) {\n+      // remove old finalizations except for the current one\n+      pendingFinalizations.clear();\n+      pendingFinalizations.put(checkpointId, finalizations);\n+\n+      // confirm all finalizations\n+      for (InMemoryBundleFinalizer.Finalization finalization : finalizations) {\n+        finalization.getCallback().onBundleSuccess();", "originalCommit": "b64a9e8328893a47cf2a6bcd52218253d65fefbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4MDIxMQ==", "url": "https://github.com/apache/beam/pull/12706#discussion_r479380211", "bodyText": "Between two checkpoint boundaries, the DoFn may have requested multiple finalizations (e.g. one per element processed) each having a different side effect.", "author": "lukecwik", "createdAt": "2020-08-28T15:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNjA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNjUzMg==", "url": "https://github.com/apache/beam/pull/12706#discussion_r478906532", "bodyText": "Why is this one pending when we acknowledge it below?", "author": "mxm", "createdAt": "2020-08-28T07:55:06Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/DoFnOperator.java", "diffHunk": "@@ -905,6 +928,19 @@ public final void notifyCheckpointComplete(long checkpointId) throws Exception {\n       bufferingDoFnRunner.checkpointCompleted(checkpointId);\n     }\n \n+    List<InMemoryBundleFinalizer.Finalization> finalizations =\n+        pendingFinalizations.get(checkpointId);\n+    if (finalizations != null) {\n+      // remove old finalizations except for the current one\n+      pendingFinalizations.clear();\n+      pendingFinalizations.put(checkpointId, finalizations);", "originalCommit": "b64a9e8328893a47cf2a6bcd52218253d65fefbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM3OTM0OQ==", "url": "https://github.com/apache/beam/pull/12706#discussion_r479379349", "bodyText": "I was basing my logic off of UnboundedSourceWrapper which seemed flawed but didn't know enough as to why it was done that way there but now I understand what the UnboundedSourceWrapper was doing.", "author": "lukecwik", "createdAt": "2020-08-28T15:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkwNjUzMg=="}], "type": "inlineReview"}, {"oid": "126191d765a7b2c7752272ed89553407bca808a0", "url": "https://github.com/apache/beam/commit/126191d765a7b2c7752272ed89553407bca808a0", "message": "fixup! Address PR comments", "committedDate": "2020-08-28T15:47:56Z", "type": "commit"}]}