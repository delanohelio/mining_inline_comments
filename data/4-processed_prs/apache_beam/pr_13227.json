{"pr_number": 13227, "pr_title": "[BEAM-10480] Add splittable dofn as the recommended way of building connectors.", "pr_createdAt": "2020-10-29T23:11:56Z", "pr_url": "https://github.com/apache/beam/pull/13227", "timeline": [{"oid": "9c84be3980c0df918f24c8dfc8d2067137b06465", "url": "https://github.com/apache/beam/commit/9c84be3980c0df918f24c8dfc8d2067137b06465", "message": "Add splittable dofn as the recommended way of building connectors.", "committedDate": "2020-11-17T22:29:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxODU5Mg==", "url": "https://github.com/apache/beam/pull/13227#discussion_r527218592", "bodyText": "Capitalize Java and Python", "author": "rosetn", "createdAt": "2020-11-19T21:39:32Z", "path": "website/www/site/content/en/documentation/io/developing-io-overview.md", "diffHunk": "@@ -46,33 +46,32 @@ are the recommended steps to get started:\n For **bounded (batch) sources**, there are currently two options for creating a\n Beam source:\n \n+1. Use `Splittable DoFn`.\n+\n 1. Use `ParDo` and `GroupByKey`.\n \n-1. Use the `Source` interface and extend the `BoundedSource` abstract subclass.\n \n-`ParDo` is the recommended option, as implementing a `Source` can be tricky. See\n-[When to use the Source interface](#when-to-use-source) for a list of some use\n-cases where you might want to use a `Source` (such as\n-[dynamic work rebalancing](/blog/2016/05/18/splitAtFraction-method.html)).\n+`Splittable DoFn` is the recommended option, as it's the new source framework for both bounded and\n+unbounded sources. This is meant to replace the `Source` APIs(\n+[BoundedSource](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/BoundedSource.html) and\n+[UnboundedSource](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/UnboundedSource.html))\n+in the new system. Please read\n+[Splittable DoFn Programming Guide](/learn/programming-guide/#splittable-dofns) for how to write one\n+Splittable DoFn. For more information, see the\n+[roadmap for multi-SDK connector efforts](/roadmap/connectors-multi-sdk/).\n \n-(Java only) For **unbounded (streaming) sources**, you must use the `Source`\n-interface and extend the `UnboundedSource` abstract subclass. `UnboundedSource`\n-supports features that are useful for streaming pipelines, such as\n-checkpointing.\n+For java and python **unbounded (streaming) sources**, you must use the `Splittable DoFn`, which", "originalCommit": "f640d9f4b53b271bdc1b801d462de63789ad2c6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxOTU0Ng==", "url": "https://github.com/apache/beam/pull/13227#discussion_r527219546", "bodyText": "Is there a way to avoid the word \"new\" that works?\n\"Most recent\"? \"Provides the most support\"?", "author": "rosetn", "createdAt": "2020-11-19T21:40:32Z", "path": "website/www/site/content/en/documentation/io/developing-io-overview.md", "diffHunk": "@@ -46,33 +46,32 @@ are the recommended steps to get started:\n For **bounded (batch) sources**, there are currently two options for creating a\n Beam source:\n \n+1. Use `Splittable DoFn`.\n+\n 1. Use `ParDo` and `GroupByKey`.\n \n-1. Use the `Source` interface and extend the `BoundedSource` abstract subclass.\n \n-`ParDo` is the recommended option, as implementing a `Source` can be tricky. See\n-[When to use the Source interface](#when-to-use-source) for a list of some use\n-cases where you might want to use a `Source` (such as\n-[dynamic work rebalancing](/blog/2016/05/18/splitAtFraction-method.html)).\n+`Splittable DoFn` is the recommended option, as it's the new source framework for both bounded and", "originalCommit": "f640d9f4b53b271bdc1b801d462de63789ad2c6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NDI4MQ==", "url": "https://github.com/apache/beam/pull/13227#discussion_r528964281", "bodyText": "Most recent sounds good. I'm curious why new is not perferred?", "author": "boyuanzz", "createdAt": "2020-11-23T20:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxOTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyMDk0Ng==", "url": "https://github.com/apache/beam/pull/13227#discussion_r527220946", "bodyText": "Remove instances of \"please\" on this page\nReference: https://developers.google.com/style/tone#politeness", "author": "rosetn", "createdAt": "2020-11-19T21:42:03Z", "path": "website/www/site/content/en/documentation/io/developing-io-java.md", "diffHunk": "@@ -17,6 +17,9 @@ limitations under the License.\n -->\n # Developing I/O connectors for Java\n \n+**IMPORTANT:** Please use ``Splittable DoFn`` to develop your new I/O. For more details, please read", "originalCommit": "f640d9f4b53b271bdc1b801d462de63789ad2c6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIyMjI4MA==", "url": "https://github.com/apache/beam/pull/13227#discussion_r527222280", "bodyText": "I'd replace this with:\nI/O examples using SDFs", "author": "rosetn", "createdAt": "2020-11-19T21:44:41Z", "path": "website/www/site/content/en/documentation/io/developing-io-overview.md", "diffHunk": "@@ -90,22 +89,40 @@ performance:\n   jobs. Depending on your data source, dynamic work rebalancing might not be\n   possible.\n \n-* **Splitting into parts of particular size recommended by the runner:** `ParDo`\n-  does not receive `desired_bundle_size` as a hint from runners when performing\n-  initial splitting.\n+* **Splitting initially to increase parallelism:** `ParDo`\n+  does not have the ability to perform initial splitting.\n \n For example, if you'd like to read from a new file format that contains many\n records per file, or if you'd like to read from a key-value store that supports\n read operations in sorted key order.\n \n-### Source lifecycle {#source}\n-Here is a sequence diagram that shows the lifecycle of the Source during\n- the execution of the Read transform of an IO. The comments give useful\n- information to IO developers such as the constraints that\n- apply to the objects or particular cases such as streaming mode.\n-\n- <!-- The source for the sequence diagram can be found in the the SVG resource. -->\n-![This is a sequence diagram that shows the lifecycle of the Source](/images/source-sequence-diagram.svg)\n+### Real World IO Examples Using Splittable DoFn", "originalCommit": "f640d9f4b53b271bdc1b801d462de63789ad2c6e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3ODQzOA==", "url": "https://github.com/apache/beam/pull/13227#discussion_r530678438", "bodyText": "Remove instances of \"please\" on these pages: https://developers.google.com/style/tone#politeness", "author": "rosetn", "createdAt": "2020-11-25T22:40:43Z", "path": "website/www/site/content/en/documentation/io/developing-io-overview.md", "diffHunk": "@@ -46,33 +46,32 @@ are the recommended steps to get started:\n For **bounded (batch) sources**, there are currently two options for creating a\n Beam source:\n \n+1. Use `Splittable DoFn`.\n+\n 1. Use `ParDo` and `GroupByKey`.\n \n-1. Use the `Source` interface and extend the `BoundedSource` abstract subclass.\n \n-`ParDo` is the recommended option, as implementing a `Source` can be tricky. See\n-[When to use the Source interface](#when-to-use-source) for a list of some use\n-cases where you might want to use a `Source` (such as\n-[dynamic work rebalancing](/blog/2016/05/18/splitAtFraction-method.html)).\n+`Splittable DoFn` is the recommended option, as it's the most recent source framework for both\n+bounded and unbounded sources. This is meant to replace the `Source` APIs(\n+[BoundedSource](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/BoundedSource.html) and\n+[UnboundedSource](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/UnboundedSource.html))\n+in the new system. Please read", "originalCommit": "3ff946e4de11286743918eea65d4159676ce2798", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3ODY5Mw==", "url": "https://github.com/apache/beam/pull/13227#discussion_r530678693", "bodyText": "Missing \"and\"\n\"watermark, and tracking backlog.\"", "author": "rosetn", "createdAt": "2020-11-25T22:41:28Z", "path": "website/www/site/content/en/documentation/io/developing-io-overview.md", "diffHunk": "@@ -46,33 +46,32 @@ are the recommended steps to get started:\n For **bounded (batch) sources**, there are currently two options for creating a\n Beam source:\n \n+1. Use `Splittable DoFn`.\n+\n 1. Use `ParDo` and `GroupByKey`.\n \n-1. Use the `Source` interface and extend the `BoundedSource` abstract subclass.\n \n-`ParDo` is the recommended option, as implementing a `Source` can be tricky. See\n-[When to use the Source interface](#when-to-use-source) for a list of some use\n-cases where you might want to use a `Source` (such as\n-[dynamic work rebalancing](/blog/2016/05/18/splitAtFraction-method.html)).\n+`Splittable DoFn` is the recommended option, as it's the most recent source framework for both\n+bounded and unbounded sources. This is meant to replace the `Source` APIs(\n+[BoundedSource](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/BoundedSource.html) and\n+[UnboundedSource](https://beam.apache.org/releases/javadoc/current/org/apache/beam/sdk/io/UnboundedSource.html))\n+in the new system. Please read\n+[Splittable DoFn Programming Guide](/learn/programming-guide/#splittable-dofns) for how to write one\n+Splittable DoFn. For more information, see the\n+[roadmap for multi-SDK connector efforts](/roadmap/connectors-multi-sdk/).\n \n-(Java only) For **unbounded (streaming) sources**, you must use the `Source`\n-interface and extend the `UnboundedSource` abstract subclass. `UnboundedSource`\n-supports features that are useful for streaming pipelines, such as\n-checkpointing.\n+For Java and Python **unbounded (streaming) sources**, you must use the `Splittable DoFn`, which\n+supports features that are useful for streaming pipelines, including checkpointing, controlling\n+watermark, tracking backlog.", "originalCommit": "3ff946e4de11286743918eea65d4159676ce2798", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c51569d3b972e2271efcc520a48ccb1bd20c9be", "url": "https://github.com/apache/beam/commit/4c51569d3b972e2271efcc520a48ccb1bd20c9be", "message": "Add splittable dofn as the recommended way of building connectors.", "committedDate": "2020-12-01T18:06:27Z", "type": "commit"}, {"oid": "4c51569d3b972e2271efcc520a48ccb1bd20c9be", "url": "https://github.com/apache/beam/commit/4c51569d3b972e2271efcc520a48ccb1bd20c9be", "message": "Add splittable dofn as the recommended way of building connectors.", "committedDate": "2020-12-01T18:06:27Z", "type": "forcePushed"}]}