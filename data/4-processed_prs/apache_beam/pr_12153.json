{"pr_number": 12153, "pr_title": "[BEAM-9953] [ZetaSQL] Implement CREATE FUNCTION and scalar UDF.", "pr_createdAt": "2020-07-01T18:05:46Z", "pr_url": "https://github.com/apache/beam/pull/12153", "timeline": [{"oid": "5ef98800152be68217ddeae3260a6c88da68b133", "url": "https://github.com/apache/beam/commit/5ef98800152be68217ddeae3260a6c88da68b133", "message": "[BEAM-9953] [ZetaSQL] Implement CREATE FUNCTION and scalar UDF.", "committedDate": "2020-07-01T18:27:47Z", "type": "commit"}, {"oid": "5ef98800152be68217ddeae3260a6c88da68b133", "url": "https://github.com/apache/beam/commit/5ef98800152be68217ddeae3260a6c88da68b133", "message": "[BEAM-9953] [ZetaSQL] Implement CREATE FUNCTION and scalar UDF.", "committedDate": "2020-07-01T18:27:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzOTc2MA==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448539760", "bodyText": "I wasn't aware that this addFunction can throw an exception. Any example that could fail this line? E.g. adding a function with duplicated name?", "author": "amaliujia", "createdAt": "2020-07-01T18:21:12Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "diffHunk": "@@ -107,6 +128,43 @@ ResolvedStatement analyze(String sql) {\n     return Analyzer.analyzeStatement(sql, options, catalog);\n   }\n \n+  /**\n+   * Accepts the ParseResumeLocation for the current position in the SQL string. Advances the\n+   * ParseResumeLocation to the start of the next statement. Adds user-defined functions to the\n+   * catalog for use in following statements. Returns the resolved AST.\n+   */\n+  ResolvedStatement analyzeNextStatement(\n+      ParseResumeLocation parseResumeLocation, AnalyzerOptions options, SimpleCatalog catalog) {\n+    ResolvedStatement resolvedStatement =\n+        Analyzer.analyzeNextStatement(parseResumeLocation, options, catalog);\n+    if (resolvedStatement.nodeKind() == RESOLVED_CREATE_FUNCTION_STMT) {\n+      ResolvedCreateFunctionStmt createFunctionStmt =\n+          (ResolvedCreateFunctionStmt) resolvedStatement;\n+      Function userFunction =\n+          new Function(\n+              createFunctionStmt.getNamePath(),\n+              USER_DEFINED_FUNCTIONS,\n+              // TODO(BEAM-9954) handle aggregate functions\n+              // TODO(BEAM-9969) handle table functions\n+              Mode.SCALAR,\n+              com.google.common.collect.ImmutableList.of(createFunctionStmt.getSignature()));\n+      try {\n+        catalog.addFunction(userFunction);", "originalCommit": "52237a292ff1a3b001667976f8073744f0124cd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwODQwNQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448608405", "bodyText": "Yes. See https://github.com/apache/beam/pull/12153/files#diff-bf7c0f0293cfabc387959dbd4494a5cfR2855-R2862", "author": "ibzib", "createdAt": "2020-07-01T20:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzOTc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MDIyMw==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448540223", "bodyText": "Why add a ParseException? Seems to me that throw IllegalArgumentException e directly will give clear cause?", "author": "amaliujia", "createdAt": "2020-07-01T18:22:01Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "diffHunk": "@@ -107,6 +128,43 @@ ResolvedStatement analyze(String sql) {\n     return Analyzer.analyzeStatement(sql, options, catalog);\n   }\n \n+  /**\n+   * Accepts the ParseResumeLocation for the current position in the SQL string. Advances the\n+   * ParseResumeLocation to the start of the next statement. Adds user-defined functions to the\n+   * catalog for use in following statements. Returns the resolved AST.\n+   */\n+  ResolvedStatement analyzeNextStatement(\n+      ParseResumeLocation parseResumeLocation, AnalyzerOptions options, SimpleCatalog catalog) {\n+    ResolvedStatement resolvedStatement =\n+        Analyzer.analyzeNextStatement(parseResumeLocation, options, catalog);\n+    if (resolvedStatement.nodeKind() == RESOLVED_CREATE_FUNCTION_STMT) {\n+      ResolvedCreateFunctionStmt createFunctionStmt =\n+          (ResolvedCreateFunctionStmt) resolvedStatement;\n+      Function userFunction =\n+          new Function(\n+              createFunctionStmt.getNamePath(),\n+              USER_DEFINED_FUNCTIONS,\n+              // TODO(BEAM-9954) handle aggregate functions\n+              // TODO(BEAM-9969) handle table functions\n+              Mode.SCALAR,\n+              com.google.common.collect.ImmutableList.of(createFunctionStmt.getSignature()));\n+      try {\n+        catalog.addFunction(userFunction);\n+      } catch (IllegalArgumentException e) {\n+        throw new ParseException(", "originalCommit": "52237a292ff1a3b001667976f8073744f0124cd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1Mjk0Mw==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448552943", "bodyText": "Also there is no test to cover this case. (Is there?)", "author": "amaliujia", "createdAt": "2020-07-01T18:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MDIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMzcxMA==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448613710", "bodyText": "see comment above", "author": "ibzib", "createdAt": "2020-07-01T21:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MDIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MDcxNA==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448540714", "bodyText": "line 159 and line 161 are duplicates and they can be put at the end of this function.", "author": "amaliujia", "createdAt": "2020-07-01T18:23:01Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/SqlAnalyzer.java", "diffHunk": "@@ -107,6 +128,43 @@ ResolvedStatement analyze(String sql) {\n     return Analyzer.analyzeStatement(sql, options, catalog);\n   }\n \n+  /**\n+   * Accepts the ParseResumeLocation for the current position in the SQL string. Advances the\n+   * ParseResumeLocation to the start of the next statement. Adds user-defined functions to the\n+   * catalog for use in following statements. Returns the resolved AST.\n+   */\n+  ResolvedStatement analyzeNextStatement(\n+      ParseResumeLocation parseResumeLocation, AnalyzerOptions options, SimpleCatalog catalog) {\n+    ResolvedStatement resolvedStatement =\n+        Analyzer.analyzeNextStatement(parseResumeLocation, options, catalog);\n+    if (resolvedStatement.nodeKind() == RESOLVED_CREATE_FUNCTION_STMT) {\n+      ResolvedCreateFunctionStmt createFunctionStmt =\n+          (ResolvedCreateFunctionStmt) resolvedStatement;\n+      Function userFunction =\n+          new Function(\n+              createFunctionStmt.getNamePath(),\n+              USER_DEFINED_FUNCTIONS,\n+              // TODO(BEAM-9954) handle aggregate functions\n+              // TODO(BEAM-9969) handle table functions\n+              Mode.SCALAR,\n+              com.google.common.collect.ImmutableList.of(createFunctionStmt.getSignature()));\n+      try {\n+        catalog.addFunction(userFunction);\n+      } catch (IllegalArgumentException e) {\n+        throw new ParseException(\n+            String.format(\n+                \"Failed to define function %s\", String.join(\".\", createFunctionStmt.getNamePath())),\n+            e);\n+      }\n+      return resolvedStatement;", "originalCommit": "52237a292ff1a3b001667976f8073744f0124cd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMzY3NA==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448613674", "bodyText": "done", "author": "ibzib", "createdAt": "2020-07-01T21:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MDcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTQzMg==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448541432", "bodyText": "Any link to what this bug is (or log a JIRA to describe what has failed?)", "author": "amaliujia", "createdAt": "2020-07-01T18:24:25Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2841,6 +2842,129 @@ public void testSelectNullExceptAll() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testMultipleSelectStatementsThrowsException() {\n+    String sql = \"SELECT 1; SELECT 2;\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(UnsupportedOperationException.class);\n+    thrown.expectMessage(\n+        \"Statement list must end in a SELECT statement, and cannot contain more than one SELECT statement.\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n+  @Test\n+  public void testAlreadyDefinedUDFThrowsException() {\n+    String sql = \"CREATE FUNCTION foo() AS (0); CREATE FUNCTION foo() AS (1); SELECT foo();\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(ParseException.class);\n+    thrown.expectMessage(\"Failed to define function foo\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n+  @Test\n+  public void testCreateFunctionNoSelectThrowsException() {\n+    String sql = \"CREATE FUNCTION plusOne(x INT64) AS (x + 1);\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(UnsupportedOperationException.class);\n+    thrown.expectMessage(\"Statement list must end in a SELECT statement, not CreateFunctionStmt\");\n+    zetaSQLQueryPlanner.convertToBeamRel(sql);\n+  }\n+\n+  @Test\n+  public void testNullaryUdf() {\n+    String sql = \"CREATE FUNCTION zero() AS (0); SELECT zero();\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addInt64Field(\"x\").build()).addValue(0L).build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  public void testQualifiedNameUdfUnqualifiedCall() {\n+    String sql = \"CREATE FUNCTION foo.bar.baz() AS (\\\"uwu\\\"); SELECT baz();\";\n+\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    BeamRelNode beamRelNode = zetaSQLQueryPlanner.convertToBeamRel(sql);\n+    PCollection<Row> stream = BeamSqlRelUtils.toPCollection(pipeline, beamRelNode);\n+\n+    PAssert.that(stream)\n+        .containsInAnyOrder(\n+            Row.withSchema(Schema.builder().addStringField(\"x\").build()).addValue(\"uwu\").build());\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n+  }\n+\n+  @Test\n+  @Ignore(\"Qualified paths can't be resolved due to a bug in ZetaSQL.\")", "originalCommit": "52237a292ff1a3b001667976f8073744f0124cd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMzU5MQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448613591", "bodyText": "I filed a public bug for this: google/zetasql#42", "author": "ibzib", "createdAt": "2020-07-01T21:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MzI2NQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448543265", "bodyText": "Can you clarify what is \"full function name\"?", "author": "amaliujia", "createdAt": "2020-07-01T18:28:15Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -130,30 +135,57 @@ public RelRoot rel(SqlNode sqlNode) throws RelConversionException {\n   }\n \n   public RelRoot rel(String sql, QueryParameters params) {\n-    this.cluster = RelOptCluster.create(planner, new RexBuilder(typeFactory));\n-    this.expressionConverter = new ExpressionConverter(cluster, params);\n+    RelOptCluster cluster = RelOptCluster.create(planner, new RexBuilder(typeFactory));\n \n     QueryTrait trait = new QueryTrait();\n \n-    // Set up table providers that need to be pre-registered\n-    // TODO(https://issues.apache.org/jira/browse/BEAM-8817): share this logic between dialects\n-    List<List<String>> tables = Analyzer.extractTableNamesFromStatement(sql);\n-    TableResolution.registerTables(this.defaultSchemaPlus, tables);\n-\n-    ResolvedStatement statement =\n+    SqlAnalyzer analyzer =\n         SqlAnalyzer.getBuilder()\n             .withQueryParams(params)\n             .withQueryTrait(trait)\n             .withCalciteContext(config.getContext())\n             .withTopLevelSchema(defaultSchemaPlus)\n             .withTypeFactory((JavaTypeFactory) cluster.getTypeFactory())\n-            .analyze(sql);\n+            .build();\n+\n+    AnalyzerOptions options = SqlAnalyzer.initAnalyzerOptions(params);\n+\n+    // Set up table providers that need to be pre-registered\n+    List<List<String>> tables = analyzer.extractTableNames(sql, options);\n+    TableResolution.registerTables(this.defaultSchemaPlus, tables);\n+    SimpleCatalog catalog =\n+        analyzer.createPopulatedCatalog(defaultSchemaPlus.getName(), options, tables);\n+\n+    ImmutableMap.Builder<String, ResolvedCreateFunctionStmt> udfBuilder = ImmutableMap.builder();\n+\n+    ResolvedStatement statement;\n+    ParseResumeLocation parseResumeLocation = new ParseResumeLocation(sql);\n+    do {\n+      statement = analyzer.analyzeNextStatement(parseResumeLocation, options, catalog);\n+      if (statement.nodeKind() == RESOLVED_CREATE_FUNCTION_STMT) {\n+        ResolvedCreateFunctionStmt createFunctionStmt = (ResolvedCreateFunctionStmt) statement;\n+        // ResolvedCreateFunctionStmt does not include the full function name, so build it here.", "originalCommit": "52237a292ff1a3b001667976f8073744f0124cd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNzc2Nw==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448607767", "bodyText": "ResolvedCreateFunctionStmt contains the path as a list of strings, while we need the whole path as a single string.", "author": "ibzib", "createdAt": "2020-07-01T20:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MzI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzA0MA==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448547040", "bodyText": "I can tell line 185 and this line combined together to verify:\n\nonly one SELECT in a statement list.\nthat SELECT statement should be in the end of list.\n\nBut from readability perspective, neither one explicitly tests there are more than one SELECT in a list. I am afraid that for people who don't have context to read code here, they could not get the one single SELECT constraint (although it is implied implicitly).\nMy suggestion is you only validate cannot contain more than one SELECT statement here and leave Statement list must end in a SELECT statement to line 185.", "author": "amaliujia", "createdAt": "2020-07-01T18:35:39Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLPlannerImpl.java", "diffHunk": "@@ -130,30 +135,58 @@ public RelRoot rel(SqlNode sqlNode) throws RelConversionException {\n   }\n \n   public RelRoot rel(String sql, QueryParameters params) {\n-    this.cluster = RelOptCluster.create(planner, new RexBuilder(typeFactory));\n-    this.expressionConverter = new ExpressionConverter(cluster, params);\n+    RelOptCluster cluster = RelOptCluster.create(planner, new RexBuilder(typeFactory));\n \n     QueryTrait trait = new QueryTrait();\n \n-    // Set up table providers that need to be pre-registered\n-    // TODO(https://issues.apache.org/jira/browse/BEAM-8817): share this logic between dialects\n-    List<List<String>> tables = Analyzer.extractTableNamesFromStatement(sql);\n-    TableResolution.registerTables(this.defaultSchemaPlus, tables);\n-\n-    ResolvedStatement statement =\n+    SqlAnalyzer analyzer =\n         SqlAnalyzer.getBuilder()\n             .withQueryParams(params)\n             .withQueryTrait(trait)\n             .withCalciteContext(config.getContext())\n             .withTopLevelSchema(defaultSchemaPlus)\n             .withTypeFactory((JavaTypeFactory) cluster.getTypeFactory())\n-            .analyze(sql);\n+            .build();\n+\n+    AnalyzerOptions options = SqlAnalyzer.initAnalyzerOptions(params);\n+\n+    // Set up table providers that need to be pre-registered\n+    List<List<String>> tables = analyzer.extractTableNames(sql, options);\n+    TableResolution.registerTables(this.defaultSchemaPlus, tables);\n+    SimpleCatalog catalog =\n+        analyzer.createPopulatedCatalog(defaultSchemaPlus.getName(), options, tables);\n+\n+    ImmutableMap.Builder<String, ResolvedCreateFunctionStmt> udfBuilder = ImmutableMap.builder();\n+\n+    ResolvedStatement statement;\n+    ParseResumeLocation parseResumeLocation = new ParseResumeLocation(sql);\n+    do {\n+      statement = analyzer.analyzeNextStatement(parseResumeLocation, options, catalog);\n+      if (statement.nodeKind() == RESOLVED_CREATE_FUNCTION_STMT) {\n+        ResolvedCreateFunctionStmt createFunctionStmt = (ResolvedCreateFunctionStmt) statement;\n+        // ResolvedCreateFunctionStmt does not include the full function name, so build it here.\n+        String functionFullName =\n+            String.format(\n+                \"%s:%s\",\n+                SqlAnalyzer.USER_DEFINED_FUNCTIONS,\n+                String.join(\".\", createFunctionStmt.getNamePath()));\n+        udfBuilder.put(functionFullName, createFunctionStmt);\n+      } else if (statement.nodeKind() == RESOLVED_QUERY_STMT) {\n+        if (!SqlAnalyzer.isEndOfInput(parseResumeLocation)) {", "originalCommit": "5ef98800152be68217ddeae3260a6c88da68b133", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNDgyNQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448614825", "bodyText": "This is really checking \"No additional statements are allowed after a SELECT statement.\"", "author": "ibzib", "createdAt": "2020-07-01T21:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNTg1NQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448615855", "bodyText": "+1", "author": "amaliujia", "createdAt": "2020-07-01T21:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Nzk5MQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448547991", "bodyText": "Do you think for Java UDF, will this code path help?", "author": "amaliujia", "createdAt": "2020-07-01T18:37:38Z", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/translation/ExpressionConverter.java", "diffHunk": "@@ -920,8 +946,23 @@ private RexNode convertResolvedFunctionCall(\n       }\n \n       for (ResolvedExpr expr : functionCall.getArgumentList()) {\n-        operands.add(convertRexNodeFromResolvedExpr(expr, columnList, fieldList));\n+        operands.add(\n+            convertRexNodeFromResolvedExpr(expr, columnList, fieldList, outerFunctionArguments));\n+      }\n+    } else if (funGroup.equals(USER_DEFINED_FUNCTIONS)) {", "originalCommit": "5ef98800152be68217ddeae3260a6c88da68b133", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMzMxOQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448613319", "bodyText": "I am pretty sure we will need it, unless we can somehow avoid ExpressionConverter for Java UDF?", "author": "ibzib", "createdAt": "2020-07-01T20:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Nzk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxODUxNQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448618515", "bodyText": "I see. For Java UDF (without a nested call), it might not go through the process to convert every of its arguments. But for nested call cases, especially with builtin functions, it could go through this process.\nWe can keep current implementation in this PR now.", "author": "amaliujia", "createdAt": "2020-07-01T21:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Nzk5MQ=="}], "type": "inlineReview"}, {"oid": "4421bca06243488b18778ea33bfed3868e0f780f", "url": "https://github.com/apache/beam/commit/4421bca06243488b18778ea33bfed3868e0f780f", "message": "Address review comments.", "committedDate": "2020-07-01T21:04:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTUxOQ==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448619519", "bodyText": "You will need to update this error message.", "author": "amaliujia", "createdAt": "2020-07-01T21:14:17Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2841,6 +2842,131 @@ public void testSelectNullExceptAll() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testMultipleSelectStatementsThrowsException() {\n+    String sql = \"SELECT 1; SELECT 2;\";\n+    ZetaSQLQueryPlanner zetaSQLQueryPlanner = new ZetaSQLQueryPlanner(config);\n+    thrown.expect(UnsupportedOperationException.class);\n+    thrown.expectMessage(\n+        \"Statement list must end in a SELECT statement, and cannot contain more than one SELECT statement.\");", "originalCommit": "4421bca06243488b18778ea33bfed3868e0f780f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTgwMg==", "url": "https://github.com/apache/beam/pull/12153#discussion_r448621802", "bodyText": "Oops, fixed", "author": "ibzib", "createdAt": "2020-07-01T21:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTUxOQ=="}], "type": "inlineReview"}, {"oid": "fe4d712fb1d55eb521f907cd9228f04cde245649", "url": "https://github.com/apache/beam/commit/fe4d712fb1d55eb521f907cd9228f04cde245649", "message": "Fix test error message.", "committedDate": "2020-07-01T21:19:09Z", "type": "commit"}]}