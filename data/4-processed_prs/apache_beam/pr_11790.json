{"pr_number": 11790, "pr_title": "[BEAM-9926] Programming guide - Fix typos and add clearer Python text", "pr_createdAt": "2020-05-22T02:41:31Z", "pr_url": "https://github.com/apache/beam/pull/11790", "timeline": [{"oid": "8b40d478d39d4559d0b7db7880105b71b7e2f151", "url": "https://github.com/apache/beam/commit/8b40d478d39d4559d0b7db7880105b71b7e2f151", "message": "Programming guide - Fix typos and add Python examples", "committedDate": "2020-05-22T02:40:59Z", "type": "commit"}, {"oid": "34a8b0c33a23d29717179c03d8395da832f35cae", "url": "https://github.com/apache/beam/commit/34a8b0c33a23d29717179c03d8395da832f35cae", "message": "more fixes", "committedDate": "2020-05-22T17:41:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNzQzMA==", "url": "https://github.com/apache/beam/pull/11790#discussion_r430617430", "bodyText": "The reason that yield is used is that process should return an iterable. yield is the way to pass individual elements from an iterable (does that make sense?)\nReturn statements can be used, but they must return an iterable - for example a list. So, for example, these functions are equivalent:\ndef process(self, elm):\n  yield elm\n\nand\ndef process(self, elm):\n  return [elm]", "author": "pabloem", "createdAt": "2020-05-26T18:23:24Z", "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -683,18 +687,18 @@ that for you. Your `@ProcessElement` method should accept a parameter tagged wit\n `@Element`, which will be populated with the input element. In order to output\n elements, the method can also take a parameter of type `OutputReceiver` which\n provides a method for emitting elements. The parameter types must match the input\n-and output types of your `DoFn` or the framework will raise an error. Note: @Element and\n-OutputReceiver were introduced in Beam 2.5.0; if using an earlier release of Beam, a\n-ProcessContext parameter should be used instead.\n+and output types of your `DoFn` or the framework will raise an error. Note: `@Element` and\n+`OutputReceiver` were introduced in Beam 2.5.0; if using an earlier release of Beam, a\n+`ProcessContext` parameter should be used instead.\n {{< /paragraph >}}\n \n {{< paragraph class=\"language-py\" >}}\n Inside your `DoFn` subclass, you'll write a method `process` where you provide\n the actual processing logic. You don't need to manually extract the elements\n from the input collection; the Beam SDKs handle that for you. Your `process`\n-method should accept an object of type `element`. This is the input element and\n-output is emitted by using `yield` or `return` statement inside `process`\n-method.\n+method should accept an argument `element`, which is the input element, emit\n+output value(s) by using `yield` statements. You can also use a `return`\n+statement if you are sure the method will return only a single output value.", "originalCommit": "34a8b0c33a23d29717179c03d8395da832f35cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxOTQ5MA==", "url": "https://github.com/apache/beam/pull/11790#discussion_r430619490", "bodyText": "So, perhaps I would write something like...\nYour `process` method should accept an argument `element`, which is the input element, \nand return an iterable with its output values. You can accomplish this by emitting individual \nelements with `yield` statements. You can also use a `return` statement with an iterable,\nlike a list or a generator.\n\nI am not married to the phrasing - whichever phrasing you choose is fine. But I think it's important to mention the fact that an iterable is expected.\nThanks @epicfaace", "author": "pabloem", "createdAt": "2020-05-26T18:26:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNzQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MzAzOA==", "url": "https://github.com/apache/beam/pull/11790#discussion_r430653038", "bodyText": "That sounds good!", "author": "epicfaace", "createdAt": "2020-05-26T19:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNzQzMA=="}], "type": "inlineReview"}, {"oid": "f1de8d85b923895ec14be1205c5151c06ccf2f1a", "url": "https://github.com/apache/beam/commit/f1de8d85b923895ec14be1205c5151c06ccf2f1a", "message": "Update programming-guide.md", "committedDate": "2020-05-26T19:26:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2OTg0OQ==", "url": "https://github.com/apache/beam/pull/11790#discussion_r433569849", "bodyText": "Em dash with no spaces between words is the correct usage here: \u2014", "author": "rosetn", "createdAt": "2020-06-02T01:18:29Z", "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -527,7 +530,7 @@ The graph of this pipeline looks like the following:\n *Figure 1: A linear pipeline with three sequential transforms.*\n \n However, note that a transform *does not consume or otherwise alter* the input\n-collection--remember that a `PCollection` is immutable by definition. This means\n+collection - remember that a `PCollection` is immutable by definition. This means", "originalCommit": "f1de8d85b923895ec14be1205c5151c06ccf2f1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMDczMA==", "url": "https://github.com/apache/beam/pull/11790#discussion_r441130730", "bodyText": "done", "author": "pabloem", "createdAt": "2020-06-16T20:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2OTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3MDQ4NQ==", "url": "https://github.com/apache/beam/pull/11790#discussion_r433570485", "bodyText": "I'd either format this as a note (see other notes on this page) or remove \"Note that\"", "author": "rosetn", "createdAt": "2020-06-02T01:21:02Z", "path": "website/www/site/content/en/documentation/programming-guide.md", "diffHunk": "@@ -1842,6 +1847,9 @@ transform's intermediate data changes type multiple times.\n {{< github_sample \"/apache/beam/blob/master/sdks/python/apache_beam/examples/snippets/snippets.py\" pipeline_monitoring_composite >}}\n {{< /highlight >}}\n \n+Note that because `Count` is itself a composite transform,", "originalCommit": "f1de8d85b923895ec14be1205c5151c06ccf2f1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMDY5OA==", "url": "https://github.com/apache/beam/pull/11790#discussion_r441130698", "bodyText": "done", "author": "pabloem", "createdAt": "2020-06-16T20:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU3MDQ4NQ=="}], "type": "inlineReview"}, {"oid": "86d173fec9d44388bb88c6621fdaa00ee2a349d7", "url": "https://github.com/apache/beam/commit/86d173fec9d44388bb88c6621fdaa00ee2a349d7", "message": "Merge branch 'master' into patch-3", "committedDate": "2020-06-16T20:44:06Z", "type": "commit"}]}