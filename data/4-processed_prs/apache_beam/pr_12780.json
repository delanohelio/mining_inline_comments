{"pr_number": 12780, "pr_title": "[BEAM-5504] Add Avro support to Pubsub table provider", "pr_createdAt": "2020-09-07T17:10:17Z", "pr_url": "https://github.com/apache/beam/pull/12780", "timeline": [{"oid": "0374a98c670047cd0cdc4616f19971a30f3a40a1", "url": "https://github.com/apache/beam/commit/0374a98c670047cd0cdc4616f19971a30f3a40a1", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-07T17:12:28Z", "type": "forcePushed"}, {"oid": "d57840f32a2136972b3e7c2d30cd43c0023ee3f6", "url": "https://github.com/apache/beam/commit/d57840f32a2136972b3e7c2d30cd43c0023ee3f6", "message": "Refactor tests", "committedDate": "2020-09-09T06:51:36Z", "type": "forcePushed"}, {"oid": "6574ae2aa0e23776ff43bcef0deba715512d92e1", "url": "https://github.com/apache/beam/commit/6574ae2aa0e23776ff43bcef0deba715512d92e1", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T09:34:44Z", "type": "forcePushed"}, {"oid": "986a99b2b8b9a476740c465fca35fe90182504d9", "url": "https://github.com/apache/beam/commit/986a99b2b8b9a476740c465fca35fe90182504d9", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T09:38:17Z", "type": "forcePushed"}, {"oid": "92133876ff386d5d0f52f4d6da9f51cfc601f84d", "url": "https://github.com/apache/beam/commit/92133876ff386d5d0f52f4d6da9f51cfc601f84d", "message": "Change table type name in avro", "committedDate": "2020-09-10T10:24:38Z", "type": "forcePushed"}, {"oid": "7c0fe8d3d3d7b773ebd0c2ad8522b3d9c5fd7fde", "url": "https://github.com/apache/beam/commit/7c0fe8d3d3d7b773ebd0c2ad8522b3d9c5fd7fde", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T10:54:14Z", "type": "forcePushed"}, {"oid": "7b14d30321adfe2b412c0de1785a2669b9ea5068", "url": "https://github.com/apache/beam/commit/7b14d30321adfe2b412c0de1785a2669b9ea5068", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T11:05:55Z", "type": "forcePushed"}, {"oid": "16baa01e01185f01c35ba096a52eb8808570a06c", "url": "https://github.com/apache/beam/commit/16baa01e01185f01c35ba096a52eb8808570a06c", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T11:11:30Z", "type": "forcePushed"}, {"oid": "be2c8bbf7daa04192f485f049b20d0e5be1ef5cc", "url": "https://github.com/apache/beam/commit/be2c8bbf7daa04192f485f049b20d0e5be1ef5cc", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T12:27:33Z", "type": "forcePushed"}, {"oid": "fa617a45c18add9a917f26fd63abe704c41f1e78", "url": "https://github.com/apache/beam/commit/fa617a45c18add9a917f26fd63abe704c41f1e78", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T13:28:21Z", "type": "forcePushed"}, {"oid": "c40eeb2a2bb745fdbfe9efce99c0b5c52c5ad33f", "url": "https://github.com/apache/beam/commit/c40eeb2a2bb745fdbfe9efce99c0b5c52c5ad33f", "message": "[BEAM-10857] Add Pubsub Avro table provider", "committedDate": "2020-09-10T14:10:44Z", "type": "forcePushed"}, {"oid": "82e5cdec14ccac1fa0491b723be3689bbf29356e", "url": "https://github.com/apache/beam/commit/82e5cdec14ccac1fa0491b723be3689bbf29356e", "message": "Move the payloadFormat selection to TBLPROPERTIES", "committedDate": "2020-09-11T07:03:02Z", "type": "forcePushed"}, {"oid": "28762b2c805f6f8bcc5fb1dce96e827aa54a66ea", "url": "https://github.com/apache/beam/commit/28762b2c805f6f8bcc5fb1dce96e827aa54a66ea", "message": "Move the payloadFormat selection to TBLPROPERTIES", "committedDate": "2020-09-11T07:11:41Z", "type": "forcePushed"}, {"oid": "daa8f7a87ec287e868fa615120840cf1d7689c96", "url": "https://github.com/apache/beam/commit/daa8f7a87ec287e868fa615120840cf1d7689c96", "message": "Move the payloadFormat selection to TBLPROPERTIES", "committedDate": "2020-09-11T07:19:16Z", "type": "forcePushed"}, {"oid": "1f216dffcc94f5b6c0f0d6b7e5417833f811f76b", "url": "https://github.com/apache/beam/commit/1f216dffcc94f5b6c0f0d6b7e5417833f811f76b", "message": "Make use of AvroCoder", "committedDate": "2020-09-11T09:12:39Z", "type": "forcePushed"}, {"oid": "87141c56605da6fb46bab62dd3d70d498d28f335", "url": "https://github.com/apache/beam/commit/87141c56605da6fb46bab62dd3d70d498d28f335", "message": "Make use of AvroCoder", "committedDate": "2020-09-11T09:16:27Z", "type": "forcePushed"}, {"oid": "ae2fbbc05fe057b7f73be66ddc391e3b67b35fb1", "url": "https://github.com/apache/beam/commit/ae2fbbc05fe057b7f73be66ddc391e3b67b35fb1", "message": "Make use of AvroCoder", "committedDate": "2020-09-11T09:16:53Z", "type": "forcePushed"}, {"oid": "d2933bf7ee4423e2ab4fd691884b6534801c162c", "url": "https://github.com/apache/beam/commit/d2933bf7ee4423e2ab4fd691884b6534801c162c", "message": "Add parser test", "committedDate": "2020-09-11T10:49:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwODgyMQ==", "url": "https://github.com/apache/beam/pull/12780#discussion_r493808821", "bodyText": "Is this fixing a bug where field order isn't maintained? If so we should break it out into a separate PR", "author": "TheNeuralBit", "createdAt": "2020-09-23T18:40:52Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/schemas/transforms/DropFields.java", "diffHunk": "@@ -85,9 +85,8 @@ private Inner(FieldAccessDescriptor fieldsToDrop) {\n \n     FieldAccessDescriptor complement(Schema inputSchema, FieldAccessDescriptor input) {\n       // Create a FieldAccessDescriptor that select all fields _not_ selected in the input\n-      // descriptor. Maintain\n-      // the original order of the schema.\n-      Set<String> fieldNamesToSelect = Sets.newHashSet();\n+      // descriptor. Maintain the original order of the schema.\n+      List<String> fieldNamesToSelect = newArrayList();", "originalCommit": "d2933bf7ee4423e2ab4fd691884b6534801c162c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwODk4Ng==", "url": "https://github.com/apache/beam/pull/12780#discussion_r493808986", "bodyText": "And add a test", "author": "TheNeuralBit", "createdAt": "2020-09-23T18:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwODgyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5ODI1NQ==", "url": "https://github.com/apache/beam/pull/12780#discussion_r494198255", "bodyText": "You're definitely right, I've done it here:  #12928", "author": "piotr-szuberski", "createdAt": "2020-09-24T10:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgwODgyMQ=="}], "type": "inlineReview"}, {"oid": "57692a40c796cbbfd9690803810ca580a4c0726b", "url": "https://github.com/apache/beam/commit/57692a40c796cbbfd9690803810ca580a4c0726b", "message": "Updates after rebase", "committedDate": "2020-10-19T09:36:01Z", "type": "forcePushed"}, {"oid": "63a457183bdff0f271c0fef43c0f5e1efa5c5a90", "url": "https://github.com/apache/beam/commit/63a457183bdff0f271c0fef43c0f5e1efa5c5a90", "message": "Updates after rebase", "committedDate": "2020-10-19T10:21:46Z", "type": "forcePushed"}, {"oid": "4283eca5765ebb7221a6eefe4f5493043e0dc902", "url": "https://github.com/apache/beam/commit/4283eca5765ebb7221a6eefe4f5493043e0dc902", "message": "payloadFormat -> format", "committedDate": "2020-10-19T13:38:24Z", "type": "forcePushed"}, {"oid": "b3a71ef1d40bd7eba21c1ad1ca7ad876b99353a4", "url": "https://github.com/apache/beam/commit/b3a71ef1d40bd7eba21c1ad1ca7ad876b99353a4", "message": "[BEAM-10857] Add Avro support to Pubsub table provider", "committedDate": "2020-10-19T15:25:06Z", "type": "forcePushed"}, {"oid": "66756ffc8ac9ff7b6496aff69c294dbc704ab346", "url": "https://github.com/apache/beam/commit/66756ffc8ac9ff7b6496aff69c294dbc704ab346", "message": "spotless", "committedDate": "2020-10-27T00:04:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxODE2MQ==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513018161", "bodyText": "These functions should directly verify the Avro data rather than converting to a Row if possible", "author": "TheNeuralBit", "createdAt": "2020-10-27T20:44:42Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubAvroIT.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.pubsub;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasProperty;\n+\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.utils.AvroUtils;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.hamcrest.Matcher;\n+import org.joda.time.Instant;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Integration tests for querying Pubsub AVRO messages with SQL. */\n+@RunWith(JUnit4.class)\n+public class PubsubAvroIT extends PubsubTableProviderIT {\n+  private static final Schema NAME_HEIGHT_KNOWS_JS_SCHEMA =\n+      Schema.builder()\n+          .addNullableField(\"name\", Schema.FieldType.STRING)\n+          .addNullableField(\"height\", Schema.FieldType.INT32)\n+          .addNullableField(\"knowsJavascript\", Schema.FieldType.BOOLEAN)\n+          .build();\n+\n+  private static final Schema NAME_HEIGHT_SCHEMA =\n+      Schema.builder()\n+          .addNullableField(\"name\", Schema.FieldType.STRING)\n+          .addNullableField(\"height\", Schema.FieldType.INT32)\n+          .build();\n+\n+  @Override\n+  protected String getPayloadFormat() {\n+    return \"avro\";\n+  }\n+\n+  @Override\n+  protected PCollection<String> applyRowsToStrings(PCollection<Row> rows) {\n+    return rows.apply(\n+        MapElements.into(TypeDescriptors.strings())\n+            .via(\n+                (Row row) ->\n+                    new String(\n+                        AvroUtils.getRowToAvroBytesFunction(row.getSchema()).apply(row), UTF_8)));\n+  }\n+\n+  @Override\n+  protected PubsubMessage messageIdName(Instant timestamp, int id, String name) {\n+    Row row = row(PAYLOAD_SCHEMA, id, name);\n+    return message(timestamp, AvroUtils.getRowToAvroBytesFunction(PAYLOAD_SCHEMA).apply(row));\n+  }\n+\n+  @Override\n+  protected Matcher<PubsubMessage> matcherNames(String name) {\n+    Schema schema = Schema.builder().addStringField(\"name\").build();\n+    Row row = row(schema, name);\n+    return hasProperty(\"payload\", equalTo(AvroUtils.getRowToAvroBytesFunction(schema).apply(row)));\n+  }\n+\n+  @Override\n+  protected Matcher<PubsubMessage> matcherNameHeight(String name, int height) {\n+    Row row = row(NAME_HEIGHT_SCHEMA, name, height);\n+    return hasProperty(\n+        \"payload\", equalTo(AvroUtils.getRowToAvroBytesFunction(NAME_HEIGHT_SCHEMA).apply(row)));\n+  }\n+\n+  @Override\n+  protected Matcher<PubsubMessage> matcherNameHeightKnowsJS(\n+      String name, int height, boolean knowsJS) {\n+    Row row = row(NAME_HEIGHT_KNOWS_JS_SCHEMA, name, height, knowsJS);\n+    return hasProperty(\n+        \"payload\",\n+        equalTo(AvroUtils.getRowToAvroBytesFunction(NAME_HEIGHT_KNOWS_JS_SCHEMA).apply(row)));", "originalCommit": "66756ffc8ac9ff7b6496aff69c294dbc704ab346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4MTQyMg==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513281422", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-10-28T09:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxODE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NDAxOQ==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513654019", "bodyText": "We should do this for the other matcher* methods as well.", "author": "TheNeuralBit", "createdAt": "2020-10-28T18:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxODE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyMTU0Mw==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513021543", "bodyText": "Can this be an inner class of PubsubSchemaIOProvider?", "author": "TheNeuralBit", "createdAt": "2020-10-27T20:51:05Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PayloadFormat.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.pubsub;\n+\n+public enum PayloadFormat {\n+  JSON,\n+  AVRO\n+}", "originalCommit": "66756ffc8ac9ff7b6496aff69c294dbc704ab346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzNTIzNg==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513235236", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-10-28T07:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyMTU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyNjYwNQ==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513026605", "bodyText": "I think it would be preferable to define our own ParseException that parsePayload throws. Then parsePayload can catch these exceptions specific to the format that is being used, and throw it with the format-specific exception as the cause. That way the calls to parsePayload just need to check for ParseException", "author": "TheNeuralBit", "createdAt": "2020-10-27T20:59:03Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRow.java", "diffHunk": "@@ -226,11 +260,11 @@ public void processElement(\n                             field, timestamp, element.getAttributeMap(), payload))\n                 .collect(toList());\n         o.get(MAIN_TAG).output(Row.withSchema(messageSchema).addValues(values).build());\n-      } catch (UnsupportedRowJsonException jsonException) {\n+      } catch (UnsupportedRowJsonException | AvroRuntimeException exception) {", "originalCommit": "66756ffc8ac9ff7b6496aff69c294dbc704ab346", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzNTIwOA==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513235208", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-10-28T07:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyNjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2NzIwNQ==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513667205", "bodyText": "I think it may be better to just get rid of this test. I added it as a stepping stone when I was adding support for writing JSON to PubSub (see #9880). But it's just adding unnecessary complexity to keep it around now, the write path is thoroughly tested end-to-end in the tests below this one.\nIf we get rid of this you won't need applyRowsToStrings", "author": "TheNeuralBit", "createdAt": "2020-10-28T18:21:24Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubTableProviderIT.java", "diffHunk": "@@ -0,0 +1,651 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.pubsub;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.hamcrest.Matchers.hasProperty;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.Serializable;\n+import java.nio.charset.StandardCharsets;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.extensions.gcp.options.GcpOptions;\n+import org.apache.beam.sdk.extensions.sql.SqlTransform;\n+import org.apache.beam.sdk.extensions.sql.impl.BeamSqlEnv;\n+import org.apache.beam.sdk.extensions.sql.impl.JdbcConnection;\n+import org.apache.beam.sdk.extensions.sql.impl.JdbcDriver;\n+import org.apache.beam.sdk.extensions.sql.impl.rel.BeamSqlRelUtils;\n+import org.apache.beam.sdk.extensions.sql.meta.provider.SchemaIOTableProviderWrapper;\n+import org.apache.beam.sdk.extensions.sql.meta.provider.TableProvider;\n+import org.apache.beam.sdk.extensions.sql.meta.store.InMemoryMetaStore;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubIO;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.io.gcp.pubsub.TestPubsub;\n+import org.apache.beam.sdk.io.gcp.pubsub.TestPubsubSignal;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.SchemaCoder;\n+import org.apache.beam.sdk.testing.TestPipeline;\n+import org.apache.beam.sdk.transforms.Create;\n+import org.apache.beam.sdk.util.common.ReflectHelpers;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.calcite.v1_20_0.com.google.common.collect.ImmutableList;\n+import org.apache.beam.vendor.calcite.v1_20_0.com.google.common.collect.ImmutableMap;\n+import org.apache.beam.vendor.calcite.v1_20_0.com.google.common.collect.ImmutableSet;\n+import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.jdbc.CalciteConnection;\n+import org.hamcrest.Matcher;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public abstract class PubsubTableProviderIT implements Serializable {\n+\n+  protected static final Schema PAYLOAD_SCHEMA =\n+      Schema.builder()\n+          .addNullableField(\"id\", Schema.FieldType.INT32)\n+          .addNullableField(\"name\", Schema.FieldType.STRING)\n+          .build();\n+\n+  @Rule public transient TestPubsub eventsTopic = TestPubsub.create();\n+  @Rule public transient TestPubsub filteredEventsTopic = TestPubsub.create();\n+  @Rule public transient TestPubsub dlqTopic = TestPubsub.create();\n+  @Rule public transient TestPubsubSignal resultSignal = TestPubsubSignal.create();\n+  @Rule public transient TestPipeline pipeline = TestPipeline.create();\n+  @Rule public transient TestPipeline filterPipeline = TestPipeline.create();\n+  private final SchemaIOTableProviderWrapper tableProvider = new PubsubTableProvider();\n+  private final String payloadFormatParam =\n+      getPayloadFormat() == null ? \"\" : String.format(\"\\\"format\\\" : \\\"%s\\\", \", getPayloadFormat());\n+\n+  /**\n+   * HACK: we need an objectmapper to turn pipelineoptions back into a map. We need to use\n+   * ReflectHelpers to get the extra PipelineOptions.\n+   */\n+  protected static final ObjectMapper MAPPER =\n+      new ObjectMapper()\n+          .registerModules(ObjectMapper.findModules(ReflectHelpers.findClassLoader()));\n+\n+  @Test\n+  public void testSQLSelectsPayloadContent() throws Exception {\n+    String createTableString =\n+        String.format(\n+            \"CREATE EXTERNAL TABLE message (\\n\"\n+                + \"event_timestamp TIMESTAMP, \\n\"\n+                + \"attributes MAP<VARCHAR, VARCHAR>, \\n\"\n+                + \"payload ROW< \\n\"\n+                + \"             id INTEGER, \\n\"\n+                + \"             name VARCHAR \\n\"\n+                + \"           > \\n\"\n+                + \") \\n\"\n+                + \"TYPE '%s' \\n\"\n+                + \"LOCATION '%s' \\n\"\n+                + \"TBLPROPERTIES '{ \"\n+                + \"%s\"\n+                + \"\\\"timestampAttributeKey\\\" : \\\"ts\\\" }'\",\n+            tableProvider.getTableType(), eventsTopic.topicPath(), payloadFormatParam);\n+\n+    String queryString = \"SELECT message.payload.id, message.payload.name from message\";\n+\n+    // Prepare messages to send later\n+    List<PubsubMessage> messages =\n+        ImmutableList.of(\n+            messageIdName(ts(1), 3, \"foo\"),\n+            messageIdName(ts(2), 5, \"bar\"),\n+            messageIdName(ts(3), 7, \"baz\"));\n+\n+    // Initialize SQL environment and create the pubsub table\n+    BeamSqlEnv sqlEnv = BeamSqlEnv.inMemory(new PubsubTableProvider());\n+    sqlEnv.executeDdl(createTableString);\n+\n+    // Apply the PTransform to query the pubsub topic\n+    PCollection<Row> queryOutput = query(sqlEnv, pipeline, queryString);\n+\n+    // Observe the query results and send success signal after seeing the expected messages\n+    queryOutput.apply(\n+        \"waitForSuccess\",\n+        resultSignal.signalSuccessWhen(\n+            SchemaCoder.of(PAYLOAD_SCHEMA),\n+            observedRows ->\n+                observedRows.equals(\n+                    ImmutableSet.of(\n+                        row(PAYLOAD_SCHEMA, 3, \"foo\"),\n+                        row(PAYLOAD_SCHEMA, 5, \"bar\"),\n+                        row(PAYLOAD_SCHEMA, 7, \"baz\")))));\n+\n+    // Start the pipeline\n+    pipeline.run();\n+\n+    // Block until a subscription for this topic exists\n+    eventsTopic.assertSubscriptionEventuallyCreated(\n+        pipeline.getOptions().as(GcpOptions.class).getProject(), Duration.standardMinutes(5));\n+\n+    // Start publishing the messages when main pipeline is started and signaling topic is ready\n+    eventsTopic.publish(messages);\n+\n+    // Poll the signaling topic for success message\n+    resultSignal.waitForSuccess(Duration.standardMinutes(5));\n+  }\n+\n+  @Test\n+  public void testUsesDlq() throws Exception {\n+    String createTableString =\n+        String.format(\n+            \"CREATE EXTERNAL TABLE message (\\n\"\n+                + \"event_timestamp TIMESTAMP, \\n\"\n+                + \"attributes MAP<VARCHAR, VARCHAR>, \\n\"\n+                + \"payload ROW< \\n\"\n+                + \"             id INTEGER, \\n\"\n+                + \"             name VARCHAR \\n\"\n+                + \"           > \\n\"\n+                + \") \\n\"\n+                + \"TYPE '%s' \\n\"\n+                + \"LOCATION '%s' \\n\"\n+                + \"TBLPROPERTIES \"\n+                + \"    '{ \"\n+                + \"       %s\"\n+                + \"       \\\"timestampAttributeKey\\\" : \\\"ts\\\", \"\n+                + \"       \\\"deadLetterQueue\\\" : \\\"%s\\\"\"\n+                + \"     }'\",\n+            tableProvider.getTableType(),\n+            eventsTopic.topicPath(),\n+            payloadFormatParam,\n+            dlqTopic.topicPath());\n+\n+    String queryString = \"SELECT message.payload.id, message.payload.name from message\";\n+\n+    // Prepare messages to send later\n+    List<PubsubMessage> messages =\n+        ImmutableList.of(\n+            messageIdName(ts(1), 3, \"foo\"),\n+            messageIdName(ts(2), 5, \"bar\"),\n+            messageIdName(ts(3), 7, \"baz\"),\n+            messagePayload(ts(4), \"{ - }\"), // invalid message, will go to DLQ\n+            messagePayload(ts(5), \"{ + }\")); // invalid message, will go to DLQ\n+\n+    // Initialize SQL environment and create the pubsub table\n+    BeamSqlEnv sqlEnv = BeamSqlEnv.inMemory(new PubsubTableProvider());\n+    sqlEnv.executeDdl(createTableString);\n+\n+    // Apply the PTransform to query the pubsub topic\n+    PCollection<Row> queryOutput = query(sqlEnv, pipeline, queryString);\n+\n+    // Observe the query results and send success signal after seeing the expected messages\n+    queryOutput.apply(\n+        \"waitForSuccess\",\n+        resultSignal.signalSuccessWhen(\n+            SchemaCoder.of(PAYLOAD_SCHEMA),\n+            observedRows ->\n+                observedRows.equals(\n+                    ImmutableSet.of(\n+                        row(PAYLOAD_SCHEMA, 3, \"foo\"),\n+                        row(PAYLOAD_SCHEMA, 5, \"bar\"),\n+                        row(PAYLOAD_SCHEMA, 7, \"baz\")))));\n+\n+    // Start the pipeline\n+    pipeline.run();\n+\n+    // Block until a subscription for this topic exists\n+    eventsTopic.assertSubscriptionEventuallyCreated(\n+        pipeline.getOptions().as(GcpOptions.class).getProject(), Duration.standardMinutes(5));\n+\n+    // Start publishing the messages when main pipeline is started and signaling topics are ready\n+    eventsTopic.publish(messages);\n+\n+    // Poll the signaling topic for success message\n+    resultSignal.waitForSuccess(Duration.standardMinutes(4));\n+    dlqTopic\n+        .assertThatTopicEventuallyReceives(\n+            matcherPayload(ts(4), \"{ - }\"), matcherPayload(ts(5), \"{ + }\"))\n+        .waitForUpTo(Duration.standardSeconds(20));\n+  }\n+\n+  @Test\n+  public void testSQLLimit() throws Exception {\n+    String createTableString =\n+        String.format(\n+            \"CREATE EXTERNAL TABLE message (\\n\"\n+                + \"event_timestamp TIMESTAMP, \\n\"\n+                + \"attributes MAP<VARCHAR, VARCHAR>, \\n\"\n+                + \"payload ROW< \\n\"\n+                + \"             id INTEGER, \\n\"\n+                + \"             name VARCHAR \\n\"\n+                + \"           > \\n\"\n+                + \") \\n\"\n+                + \"TYPE '%s' \\n\"\n+                + \"LOCATION '%s' \\n\"\n+                + \"TBLPROPERTIES \"\n+                + \"    '{ \"\n+                + \"       %s\"\n+                + \"       \\\"timestampAttributeKey\\\" : \\\"ts\\\", \"\n+                + \"       \\\"deadLetterQueue\\\" : \\\"%s\\\"\"\n+                + \"     }'\",\n+            tableProvider.getTableType(),\n+            eventsTopic.topicPath(),\n+            payloadFormatParam,\n+            dlqTopic.topicPath());\n+\n+    List<PubsubMessage> messages =\n+        ImmutableList.of(\n+            messageIdName(ts(1), 3, \"foo\"),\n+            messageIdName(ts(2), 5, \"bar\"),\n+            messageIdName(ts(3), 7, \"baz\"),\n+            messageIdName(ts(4), 9, \"ba2\"),\n+            messageIdName(ts(5), 10, \"ba3\"),\n+            messageIdName(ts(6), 13, \"ba4\"),\n+            messageIdName(ts(7), 15, \"ba5\"));\n+\n+    // We need the default options on the schema to include the project passed in for the\n+    // integration test\n+    CalciteConnection connection = connect(pipeline.getOptions(), new PubsubTableProvider());\n+\n+    Statement statement = connection.createStatement();\n+    statement.execute(createTableString);\n+\n+    // Because Pubsub only allow new subscription receives message after the subscription is\n+    // created, eventsTopic.publish(messages) can only be called after statement.executeQuery.\n+    // However, because statement.executeQuery is a blocking call, it has to be put into a\n+    // seperate thread to execute.\n+    ExecutorService pool = Executors.newFixedThreadPool(1);\n+    Future<List<String>> queryResult =\n+        pool.submit(\n+            (Callable)\n+                () -> {\n+                  ResultSet resultSet =\n+                      statement.executeQuery(\"SELECT message.payload.id FROM message LIMIT 3\");\n+                  ImmutableList.Builder<String> result = ImmutableList.builder();\n+                  while (resultSet.next()) {\n+                    result.add(resultSet.getString(1));\n+                  }\n+                  return result.build();\n+                });\n+\n+    eventsTopic.assertSubscriptionEventuallyCreated(\n+        pipeline.getOptions().as(GcpOptions.class).getProject(), Duration.standardMinutes(5));\n+    eventsTopic.publish(messages);\n+    assertThat(queryResult.get(2, TimeUnit.MINUTES).size(), equalTo(3));\n+    pool.shutdown();\n+  }\n+\n+  @Test\n+  public void testWritesRowsToPubsub() throws Exception {\n+    Schema personSchema =\n+        Schema.builder()\n+            .addStringField(\"name\")\n+            .addInt32Field(\"height\")\n+            .addBooleanField(\"knowsJavascript\")\n+            .build();\n+    PCollection<Row> rows =\n+        pipeline\n+            .apply(\n+                Create.of(\n+                    row(personSchema, \"person1\", 80, true),\n+                    row(personSchema, \"person2\", 70, false),\n+                    row(personSchema, \"person3\", 60, true),\n+                    row(personSchema, \"person4\", 50, false),\n+                    row(personSchema, \"person5\", 40, true)))\n+            .setRowSchema(personSchema)\n+            .apply(\n+                SqlTransform.query(\n+                    \"SELECT name FROM PCOLLECTION AS person WHERE person.knowsJavascript\"));\n+    // Convert rows to proper format and write to pubsub\n+    PCollection<String> rowsStrings = applyRowsToStrings(rows);\n+    rowsStrings.apply(PubsubIO.writeStrings().to(eventsTopic.topicPath().getPath()));\n+\n+    pipeline.run().waitUntilFinish(Duration.standardMinutes(5));\n+\n+    eventsTopic\n+        .assertThatTopicEventuallyReceives(\n+            matcherNames(\"person1\"), matcherNames(\"person3\"), matcherNames(\"person5\"))\n+        .waitForUpTo(Duration.standardSeconds(20));\n+  }", "originalCommit": "c98716fc51fd662bfa1dc044d44f7063593d0efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzUyNA==", "url": "https://github.com/apache/beam/pull/12780#discussion_r514117524", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-10-29T09:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2NzIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2ODc1Mg==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513668752", "bodyText": "messageIdName, matcherNames, and matcherNameHeight should avoid using AvroUtils.getRowToAvroBytesFunction as well.", "author": "TheNeuralBit", "createdAt": "2020-10-28T18:23:55Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/meta/provider/pubsub/PubsubAvroIT.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.sql.meta.provider.pubsub;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasProperty;\n+\n+import java.io.ByteArrayOutputStream;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.generic.GenericRecordBuilder;\n+import org.apache.beam.sdk.coders.AvroCoder;\n+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.utils.AvroUtils;\n+import org.apache.beam.sdk.transforms.MapElements;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.sdk.values.TypeDescriptors;\n+import org.hamcrest.Matcher;\n+import org.joda.time.Instant;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Integration tests for querying Pubsub AVRO messages with SQL. */\n+@RunWith(JUnit4.class)\n+public class PubsubAvroIT extends PubsubTableProviderIT {\n+  private static final Schema NAME_HEIGHT_KNOWS_JS_SCHEMA =\n+      Schema.builder()\n+          .addNullableField(\"name\", Schema.FieldType.STRING)\n+          .addNullableField(\"height\", Schema.FieldType.INT32)\n+          .addNullableField(\"knowsJavascript\", Schema.FieldType.BOOLEAN)\n+          .build();\n+\n+  private static final Schema NAME_HEIGHT_SCHEMA =\n+      Schema.builder()\n+          .addNullableField(\"name\", Schema.FieldType.STRING)\n+          .addNullableField(\"height\", Schema.FieldType.INT32)\n+          .build();\n+\n+  @Override\n+  protected String getPayloadFormat() {\n+    return \"avro\";\n+  }\n+\n+  @Override\n+  protected PCollection<String> applyRowsToStrings(PCollection<Row> rows) {\n+    return rows.apply(\n+        MapElements.into(TypeDescriptors.strings())\n+            .via(\n+                (Row row) ->\n+                    new String(\n+                        AvroUtils.getRowToAvroBytesFunction(row.getSchema()).apply(row), UTF_8)));\n+  }\n+\n+  @Override\n+  protected PubsubMessage messageIdName(Instant timestamp, int id, String name) {\n+    Row row = row(PAYLOAD_SCHEMA, id, name);\n+    return message(timestamp, AvroUtils.getRowToAvroBytesFunction(PAYLOAD_SCHEMA).apply(row));\n+  }\n+\n+  @Override\n+  protected Matcher<PubsubMessage> matcherNames(String name) {\n+    Schema schema = Schema.builder().addStringField(\"name\").build();\n+    Row row = row(schema, name);\n+    return hasProperty(\"payload\", equalTo(AvroUtils.getRowToAvroBytesFunction(schema).apply(row)));\n+  }\n+\n+  @Override\n+  protected Matcher<PubsubMessage> matcherNameHeight(String name, int height) {\n+    Row row = row(NAME_HEIGHT_SCHEMA, name, height);\n+    return hasProperty(\n+        \"payload\", equalTo(AvroUtils.getRowToAvroBytesFunction(NAME_HEIGHT_SCHEMA).apply(row)));", "originalCommit": "c98716fc51fd662bfa1dc044d44f7063593d0efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDIyMw==", "url": "https://github.com/apache/beam/pull/12780#discussion_r514094223", "bodyText": "Done.", "author": "piotr-szuberski", "createdAt": "2020-10-29T08:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY2ODc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mzg2MQ==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513683861", "bodyText": "Instead of eagerly generating the avroBytesToRowFn (even if we won't need it) and then branching on the payloadFormat for every element  in parsePayload, we should instead generate a parsePayload function when it's needed. This could work similarly to what the current version does withobjectMapper, except we would create and store a Function<PubsubMessage, Row>. In the JSON case we'd generate the ObjectMapper and wrap that in a function, and in the Avro case we'd call getAvroBytesToRowFunction and wrap it.", "author": "TheNeuralBit", "createdAt": "2020-10-28T18:49:08Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/PubsubMessageToRow.java", "diffHunk": "@@ -175,11 +213,21 @@ public void processElement(\n \n     private final boolean useDlq;\n \n+    private final PayloadFormat payloadFormat;\n+\n     private transient volatile @Nullable ObjectMapper objectMapper;\n \n-    protected NestedSchemaPubsubMessageToRow(Schema messageSchema, boolean useDlq) {\n+    private final SimpleFunction<byte[], Row> avroBytesToRowFn;\n+\n+    private final Schema payloadSchema;\n+\n+    protected NestedSchemaPubsubMessageToRow(\n+        Schema messageSchema, boolean useDlq, PayloadFormat payloadFormat) {\n       this.messageSchema = messageSchema;\n       this.useDlq = useDlq;\n+      this.payloadFormat = payloadFormat;\n+      this.payloadSchema = messageSchema.getField(PAYLOAD_FIELD).getType().getRowSchema();\n+      this.avroBytesToRowFn = AvroUtils.getAvroBytesToRowFunction(payloadSchema);", "originalCommit": "c98716fc51fd662bfa1dc044d44f7063593d0efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3MDcxNw==", "url": "https://github.com/apache/beam/pull/12780#discussion_r514070717", "bodyText": "Done. Indeed it's much clearer now!", "author": "piotr-szuberski", "createdAt": "2020-10-29T08:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mzg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5OTgzNw==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513699837", "bodyText": "I'm not sure why I opted to get ISO_8859_1 encoded bytes here... Could you change this to use UTF_8?", "author": "TheNeuralBit", "createdAt": "2020-10-28T19:16:51Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/pubsub/RowToPubsubMessage.java", "diffHunk": "@@ -57,14 +73,43 @@ public static RowToPubsubMessage withTimestampAttribute(boolean useTimestampAttr\n             ? input.apply(WithTimestamps.of((row) -> row.getDateTime(TIMESTAMP_FIELD).toInstant()))\n             : input;\n \n-    return withTimestamp\n-        .apply(DropFields.fields(TIMESTAMP_FIELD))\n-        .apply(ToJson.of())\n-        .apply(\n-            MapElements.into(TypeDescriptor.of(PubsubMessage.class))\n-                .via(\n-                    (String json) ->\n-                        new PubsubMessage(\n-                            json.getBytes(StandardCharsets.ISO_8859_1), ImmutableMap.of())));\n+    withTimestamp = withTimestamp.apply(DropFields.fields(TIMESTAMP_FIELD));\n+    switch (payloadFormat) {\n+      case JSON:\n+        return withTimestamp\n+            .apply(\"MapRowToJsonString\", ToJson.of())\n+            .apply(\"MapToJsonBytes\", MapElements.via(new StringToBytes()))\n+            .apply(\"MapToPubsubMessage\", MapElements.via(new ToPubsubMessage()));\n+      case AVRO:\n+        return withTimestamp\n+            .apply(\n+                \"MapRowToAvroBytes\",\n+                MapElements.via(AvroUtils.getRowToAvroBytesFunction(payloadSchema)))\n+            .apply(\"MapToPubsubMessage\", MapElements.via(new ToPubsubMessage()));\n+      default:\n+        throw new IllegalArgumentException(\"Unsupported payload format: \" + payloadFormat);\n+    }\n+  }\n+\n+  private static class StringToBytes extends SimpleFunction<String, byte[]> {\n+    @Override\n+    public byte[] apply(String s) {\n+      return s.getBytes(ISO_8859_1);", "originalCommit": "c98716fc51fd662bfa1dc044d44f7063593d0efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3MDU0Nw==", "url": "https://github.com/apache/beam/pull/12780#discussion_r514070547", "bodyText": "Sure! Done.", "author": "piotr-szuberski", "createdAt": "2020-10-29T08:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY5OTgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwMTQ0OA==", "url": "https://github.com/apache/beam/pull/12780#discussion_r513701448", "bodyText": "\ud83d\udc4d thanks", "author": "TheNeuralBit", "createdAt": "2020-10-28T19:19:44Z", "path": "website/www/site/content/en/documentation/dsls/sql/extensions/create-external-table.md", "diffHunk": "@@ -251,6 +253,8 @@ TBLPROPERTIES '{\"timestampAttributeKey\": \"key\", \"deadLetterQueue\": \"projects/[PR\n     *   `deadLetterQueue`: The topic into which messages are written if the\n         payload was not parsed. If not specified, an exception is thrown for\n         parsing failures.\n+    *   `format`: Optional. Allows you to specify the Pubsub payload format.\n+        Possible values are {`json`, `avro`}. Defaults to `json`.", "originalCommit": "c98716fc51fd662bfa1dc044d44f7063593d0efd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e3efcb4a8d63ee39a41f251b40230e2bfd832c19", "url": "https://github.com/apache/beam/commit/e3efcb4a8d63ee39a41f251b40230e2bfd832c19", "message": "Remove testWritesRowsToPubsub", "committedDate": "2020-10-29T09:38:10Z", "type": "forcePushed"}, {"oid": "7b175569a5026033576c79d2bc41e5111826e4b8", "url": "https://github.com/apache/beam/commit/7b175569a5026033576c79d2bc41e5111826e4b8", "message": "[BEAM-5504] Add Avro support to Pubsub table provider", "committedDate": "2020-10-29T09:42:42Z", "type": "commit"}, {"oid": "a8137d5d200a4e95c71aabb496c3a71fd10948a0", "url": "https://github.com/apache/beam/commit/a8137d5d200a4e95c71aabb496c3a71fd10948a0", "message": "spotless", "committedDate": "2020-10-29T09:43:14Z", "type": "commit"}, {"oid": "45c4ddf53fd8c493a99a8c01feedb7be5a7601c1", "url": "https://github.com/apache/beam/commit/45c4ddf53fd8c493a99a8c01feedb7be5a7601c1", "message": "Change website and CHANGES.md", "committedDate": "2020-10-29T09:43:16Z", "type": "commit"}, {"oid": "99770bea460d1826b07ec4b5ec85d141235db3ed", "url": "https://github.com/apache/beam/commit/99770bea460d1826b07ec4b5ec85d141235db3ed", "message": "create ParseException", "committedDate": "2020-10-29T09:43:19Z", "type": "commit"}, {"oid": "70d19cd8cee5ed174e8f46a6dbca618ea7c4dc8c", "url": "https://github.com/apache/beam/commit/70d19cd8cee5ed174e8f46a6dbca618ea7c4dc8c", "message": "Move PayloadFormat into PubsubSchemaIOProvider", "committedDate": "2020-10-29T09:43:22Z", "type": "commit"}, {"oid": "f49fca319d2d9eeb3e91e3a834499c0702a10f15", "url": "https://github.com/apache/beam/commit/f49fca319d2d9eeb3e91e3a834499c0702a10f15", "message": "make matcherNameHeightKnowsJS in avro return avro data", "committedDate": "2020-10-29T09:43:25Z", "type": "commit"}, {"oid": "d3dd67db9c70bd8ca671e161514e7a177ca78b38", "url": "https://github.com/apache/beam/commit/d3dd67db9c70bd8ca671e161514e7a177ca78b38", "message": "Remove trailing whitespace", "committedDate": "2020-10-29T09:43:27Z", "type": "commit"}, {"oid": "e9818726f9466d65a080c75206258f3863a88e1a", "url": "https://github.com/apache/beam/commit/e9818726f9466d65a080c75206258f3863a88e1a", "message": "Fix 3 spaces indents", "committedDate": "2020-10-29T09:43:30Z", "type": "commit"}, {"oid": "6e82b81be11bd1434ae0f1d1292d1fdfbc01585e", "url": "https://github.com/apache/beam/commit/6e82b81be11bd1434ae0f1d1292d1fdfbc01585e", "message": "Add getParsePayloadFn to PubsubMessageToRow", "committedDate": "2020-10-29T09:43:33Z", "type": "commit"}, {"oid": "9ce8bf7ac8d0b0648a4aceb25ce68620ac1ffe09", "url": "https://github.com/apache/beam/commit/9ce8bf7ac8d0b0648a4aceb25ce68620ac1ffe09", "message": "Change ISO_8859_1 to UTF_8", "committedDate": "2020-10-29T09:43:37Z", "type": "commit"}, {"oid": "9999eee84db6fd84366540fc28d2077581f0261b", "url": "https://github.com/apache/beam/commit/9999eee84db6fd84366540fc28d2077581f0261b", "message": "Use generic record to generate avro bytes", "committedDate": "2020-10-29T09:43:43Z", "type": "commit"}, {"oid": "28e502fafd756c200a48aa26db7554167d57699f", "url": "https://github.com/apache/beam/commit/28e502fafd756c200a48aa26db7554167d57699f", "message": "Use throws to the methods signatures instead of rethrowing an exception", "committedDate": "2020-10-29T09:43:46Z", "type": "commit"}, {"oid": "582ef45b5cbe06c28fe9d5c99167343f5fb61fd7", "url": "https://github.com/apache/beam/commit/582ef45b5cbe06c28fe9d5c99167343f5fb61fd7", "message": "Remove testWritesRowsToPubsub", "committedDate": "2020-10-29T09:43:50Z", "type": "commit"}, {"oid": "582ef45b5cbe06c28fe9d5c99167343f5fb61fd7", "url": "https://github.com/apache/beam/commit/582ef45b5cbe06c28fe9d5c99167343f5fb61fd7", "message": "Remove testWritesRowsToPubsub", "committedDate": "2020-10-29T09:43:50Z", "type": "forcePushed"}]}