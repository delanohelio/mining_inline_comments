{"pr_number": 10888, "pr_title": "[BEAM-7304] Twister2 Beam runner", "pr_createdAt": "2020-02-18T18:30:23Z", "pr_url": "https://github.com/apache/beam/pull/10888", "timeline": [{"oid": "0df31ef4664353188feb30e9a11217f352fa4547", "url": "https://github.com/apache/beam/commit/0df31ef4664353188feb30e9a11217f352fa4547", "message": "fixing class name typos", "committedDate": "2020-02-20T16:03:41Z", "type": "forcePushed"}, {"oid": "ee1690b0ad2ca21f3eaa7a3cdbcdbda1bf7f7041", "url": "https://github.com/apache/beam/commit/ee1690b0ad2ca21f3eaa7a3cdbcdbda1bf7f7041", "message": "adding twister2 to pull request template", "committedDate": "2020-02-27T15:35:55Z", "type": "forcePushed"}, {"oid": "7b4cb166a53ea1e9ec3676bf93f0440cd05fa9cf", "url": "https://github.com/apache/beam/commit/7b4cb166a53ea1e9ec3676bf93f0440cd05fa9cf", "message": "adding twister2 to pull request template", "committedDate": "2020-03-01T00:12:53Z", "type": "forcePushed"}, {"oid": "f742bef17bacc42f62a61f50b32be61e763df360", "url": "https://github.com/apache/beam/commit/f742bef17bacc42f62a61f50b32be61e763df360", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-03-03T14:41:42Z", "type": "forcePushed"}, {"oid": "37bbbc6e6e22e412cc8b68054643686ed964410b", "url": "https://github.com/apache/beam/commit/37bbbc6e6e22e412cc8b68054643686ed964410b", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-03-03T15:53:46Z", "type": "forcePushed"}, {"oid": "2fb7e03d070afc2b46f52f9f7e4609edd59aac11", "url": "https://github.com/apache/beam/commit/2fb7e03d070afc2b46f52f9f7e4609edd59aac11", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-05-06T17:52:51Z", "type": "forcePushed"}, {"oid": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "url": "https://github.com/apache/beam/commit/3397515cf01ffec87b2b331ad62029ee7d3871a9", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-05-11T20:11:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzczMg==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427867732", "bodyText": "It looks like this will fill my disk with uber jars as I'm using the runner!  Is it possible to clean them up?  (At least during the validateRunner tests... I had about 180 uuid.zip files of 165MB each, and about half of them were suspiciously 0 bytes:\n....\n-rw-rw-r--. 1 rskraba rskraba    0 May 20 11:41 /tmp/c16485fb-9cf0-41e8-bdeb-53ba6cf0fc15.zip\n-rw-rw-r--. 1 rskraba rskraba 165M May 20 11:26 /tmp/c4d8612b-0dc0-431a-9b70-0f1537b7cba4.zip\n-rw-rw-r--. 1 rskraba rskraba 165M May 20 11:26 /tmp/c53e3b3a-51bd-470f-bd56-2c195decc25f.zip\n-rw-rw-r--. 1 rskraba rskraba    0 May 20 11:41 /tmp/c543b15d-94c8-4629-802d-a20f5846eddb.zip\n....", "author": "RyanSkraba", "createdAt": "2020-05-20T09:25:04Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2LegacyRunner.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import static org.apache.beam.runners.core.construction.resources.PipelineResources.detectClassPathResourcesToStage;\n+\n+import edu.iu.dsc.tws.api.JobConfig;\n+import edu.iu.dsc.tws.api.Twister2Job;\n+import edu.iu.dsc.tws.api.config.Config;\n+import edu.iu.dsc.tws.api.driver.DriverJobState;\n+import edu.iu.dsc.tws.api.exceptions.Twister2RuntimeException;\n+import edu.iu.dsc.tws.api.scheduler.Twister2JobState;\n+import edu.iu.dsc.tws.api.tset.sets.TSet;\n+import edu.iu.dsc.tws.api.tset.sets.batch.BatchTSet;\n+import edu.iu.dsc.tws.local.LocalSubmitter;\n+import edu.iu.dsc.tws.rsched.core.ResourceAllocator;\n+import edu.iu.dsc.tws.rsched.job.Twister2Submitter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+import org.apache.beam.runners.core.construction.PTransformMatchers;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.runners.core.construction.SplittableParDo;\n+import org.apache.beam.runners.core.construction.SplittableParDoNaiveBounded;\n+import org.apache.beam.runners.core.construction.resources.PipelineResources;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsValidator;\n+import org.apache.beam.sdk.runners.PTransformOverride;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/**\n+ * A {@link PipelineRunner} that executes the operations in the pipeline by first translating them\n+ * to a Twister2 Plan and then executing them either locally or on a Twister2 cluster, depending on\n+ * the configuration.\n+ */\n+public class Twister2LegacyRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = Logger.getLogger(Twister2LegacyRunner.class.getName());\n+  private static final String SIDEINPUTS = \"sideInputs\";\n+  private static final String LEAVES = \"leaves\";\n+  private static final String GRAPH = \"graph\";\n+  /** Provided options. */\n+  private final Twister2PipelineOptions options;\n+\n+  public Twister2LegacyRunner(Twister2PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  public static Twister2LegacyRunner fromOptions(PipelineOptions options) {\n+    Twister2PipelineOptions pipelineOptions =\n+        PipelineOptionsValidator.validate(Twister2PipelineOptions.class, options);\n+    if (pipelineOptions.getFilesToStage() == null) {\n+      pipelineOptions.setFilesToStage(\n+          detectClassPathResourcesToStage(\n+              Twister2LegacyRunner.class.getClassLoader(), pipelineOptions));\n+      LOG.info(\n+          \"PipelineOptions.filesToStage was not specified. \"\n+              + \"Defaulting to files from the classpath: will stage {} files. \"\n+              + \"Enable logging at DEBUG level to see which files will be staged\"\n+              + pipelineOptions.getFilesToStage().size());\n+    }\n+    return new Twister2LegacyRunner(pipelineOptions);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    // create a worker and pass in the pipeline and then do the translation\n+    Twister2PipelineExecutionEnvironment env = new Twister2PipelineExecutionEnvironment(options);\n+    LOG.info(\"Translating pipeline to Twister2 program.\");\n+    pipeline.replaceAll(getDefaultOverrides());\n+    env.translate(pipeline);\n+    setupSystem(options);\n+\n+    Config config = ResourceAllocator.loadConfig(new HashMap<>());\n+\n+    JobConfig jobConfig = new JobConfig();\n+    jobConfig.put(SIDEINPUTS, extractNames(env.getSideInputs()));\n+    jobConfig.put(LEAVES, extractNames(env.getLeaves()));\n+    jobConfig.put(GRAPH, env.getTSetGraph());\n+\n+    int workers = options.getParallelism();\n+    Twister2Job twister2Job =\n+        Twister2Job.newBuilder()\n+            .setJobName(options.getJobName())\n+            .setWorkerClass(BeamBatchWorker.class)\n+            .addComputeResource(options.getWorkerCPUs(), options.getRamMegaBytes(), workers)\n+            .setConfig(jobConfig)\n+            .build();\n+    Twister2JobState jobState = Twister2Submitter.submitJob(twister2Job, config);\n+\n+    Twister2PipelineResult result = new Twister2PipelineResult();\n+    if (jobState.getJobstate() == DriverJobState.FAILED\n+        || jobState.getJobstate() == DriverJobState.RUNNING) {\n+      throw new RuntimeException(\"Pipeline execution failed\", jobState.getCause());\n+    } else {\n+      result.setState(PipelineResult.State.DONE);\n+    }\n+    return result;\n+  }\n+\n+  public PipelineResult runTest(Pipeline pipeline) {\n+    // create a worker and pass in the pipeline and then do the translation\n+    Twister2PipelineExecutionEnvironment env = new Twister2PipelineExecutionEnvironment(options);\n+    LOG.info(\"Translating pipeline to Twister2 program.\");\n+    pipeline.replaceAll(getDefaultOverrides());\n+    env.translate(pipeline);\n+    setupSystemTest(options);\n+    Map configMap = new HashMap();\n+    configMap.put(SIDEINPUTS, extractNames(env.getSideInputs()));\n+    configMap.put(LEAVES, extractNames(env.getLeaves()));\n+    configMap.put(GRAPH, env.getTSetGraph());\n+    configMap.put(\"twister2.network.buffer.size\", 32000);\n+    configMap.put(\"twister2.network.sendBuffer.count\", 1);\n+    Config config = ResourceAllocator.loadConfig(configMap);\n+\n+    JobConfig jobConfig = new JobConfig();\n+\n+    int workers = options.getParallelism();\n+    Twister2Job twister2Job =\n+        Twister2Job.newBuilder()\n+            .setJobName(options.getJobName())\n+            .setWorkerClass(BeamBatchWorker.class)\n+            .addComputeResource(options.getWorkerCPUs(), options.getRamMegaBytes(), workers)\n+            .setConfig(jobConfig)\n+            .build();\n+    Twister2JobState jobState = LocalSubmitter.submitJob(twister2Job, config);\n+\n+    Twister2PipelineResult result = new Twister2PipelineResult();\n+    if (jobState.getJobstate() == DriverJobState.FAILED\n+        || jobState.getJobstate() == DriverJobState.RUNNING) {\n+      throw new RuntimeException(\"Pipeline execution failed\", jobState.getCause());\n+    } else {\n+      result.setState(PipelineResult.State.DONE);\n+    }\n+    return result;\n+  }\n+\n+  private void setupSystem(Twister2PipelineOptions options) {\n+    prepareFilesToStage(options);\n+    zipFilesToStage(options);\n+    System.setProperty(\"cluster_type\", options.getClusterType());\n+    System.setProperty(\"twister2_home\", options.getTwister2Home());\n+    System.setProperty(\"job_file\", options.getJobFileZip());\n+    System.setProperty(\"job_type\", options.getJobType());\n+    // do a simple config dir validation\n+    System.setProperty(\"config_dir\", options.getTwister2Home() + \"/conf/\");\n+    File cDir = new File(System.getProperty(\"config_dir\"), options.getClusterType());\n+\n+    String[] filesList =\n+        new String[] {\n+          \"core.yaml\", \"network.yaml\", \"data.yaml\", \"resource.yaml\", \"task.yaml\",\n+        };\n+\n+    for (String file : filesList) {\n+      File toCheck = new File(cDir, file);\n+      if (!toCheck.exists()) {\n+        throw new Twister2RuntimeException(\n+            \"Couldn't find \" + file + \" in config directory specified.\");\n+      }\n+    }\n+\n+    // setup logging\n+    FileInputStream fis = null;\n+    try {\n+      fis = new FileInputStream(new File(cDir, \"logger.properties\"));\n+      LogManager.getLogManager().readConfiguration(fis);\n+      fis.close();\n+    } catch (IOException e) {\n+      LOG.warning(\"Couldn't load logging configuration\");\n+    } finally {\n+      if (fis != null) {\n+        try {\n+          fis.close();\n+        } catch (IOException e) {\n+          LOG.info(e.getMessage());\n+        }\n+      }\n+    }\n+  }\n+\n+  private void setupSystemTest(Twister2PipelineOptions options) {\n+    prepareFilesToStage(options);\n+    zipFilesToStage(options);\n+    System.setProperty(\"job_file\", options.getJobFileZip());\n+    System.setProperty(\"job_type\", options.getJobType());\n+  }\n+\n+  private Set<String> extractNames(Set<TSet> leaves) {\n+    Set<String> results = new HashSet<>();\n+    for (TSet leaf : leaves) {\n+      results.add(leaf.getId());\n+    }\n+    return results;\n+  }\n+\n+  private Map<String, String> extractNames(Map<String, BatchTSet<?>> sideInputs) {\n+    Map<String, String> results = new LinkedHashMap<>();\n+    for (Map.Entry<String, BatchTSet<?>> entry : sideInputs.entrySet()) {\n+      results.put(entry.getKey(), entry.getValue().getId());\n+    }\n+    return results;\n+  }\n+\n+  /**\n+   * Classpath contains non jar files (eg. directories with .class files or empty directories) will\n+   * cause exception in running log.\n+   */\n+  private void prepareFilesToStage(Twister2PipelineOptions options) {\n+    List<String> filesToStage =\n+        options.getFilesToStage().stream()\n+            .map(File::new)\n+            .filter(File::exists)\n+            .map(\n+                file -> {\n+                  return file.getAbsolutePath();\n+                })\n+            .collect(Collectors.toList());\n+    options.setFilesToStage(\n+        PipelineResources.prepareFilesForStaging(\n+            filesToStage,\n+            MoreObjects.firstNonNull(\n+                options.getTempLocation(), System.getProperty(\"java.io.tmpdir\"))));\n+  }\n+\n+  /**\n+   * creates a single zip file from all the jar files that are listed as files to stage in options.\n+   *\n+   * @param options\n+   */\n+  private void zipFilesToStage(Twister2PipelineOptions options) {", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NTQ0OQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428145449", "bodyText": "This is definitely important to fix/clean to not have issues in the CI who already has issues with uncleaned files. Nice catch @RyanSkraba I run this and I did not notice it.", "author": "iemejia", "createdAt": "2020-05-20T16:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyNjIzNA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428226234", "bodyText": "@RyanSkraba Thank you for reviewing the code, It is good to get another set of eyes to notice mistakes that one makes.\nA single zip file is being created for each test since Twister2 treats each test as a new job, the zip file contains the dependency files that are needed by the run. I will look into a way to delete the zip files created by tests that have completed so it does not fill up the disk space.", "author": "pulasthi", "createdAt": "2020-05-20T18:35:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNTY3OA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428335678", "bodyText": "I found a solution with forkEvery, I set the temp files created to delete on exit and since the JVM changes for every test class the old temp files will get deleted automatically.", "author": "pulasthi", "createdAt": "2020-05-20T22:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NzczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3MDY4MQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427870681", "bodyText": "Some of these options seem unused by the runner (unless I'm mistaken...) : applicationName, serializers\nAre they meant to be here?", "author": "RyanSkraba", "createdAt": "2020-05-20T09:29:44Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2PipelineOptions.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import edu.iu.dsc.tws.tset.env.TSetEnvironment;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.StreamingOptions;\n+\n+/** Twister2PipelineOptions. */\n+public interface Twister2PipelineOptions extends PipelineOptions, StreamingOptions {\n+  @Description(\"set unique application name for Twister2 runner\")\n+  void setApplicationName(String name);\n+\n+  String getApplicationName();", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3Njk1MA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428376950", "bodyText": "I initially added them for completeness, but ended up not using some of them. removed the unused options since they can be added if needed later.", "author": "pulasthi", "createdAt": "2020-05-21T00:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3MDY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3ODMyNw==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427878327", "bodyText": "OK, as far as I remember, all of the PipelineOption annotations are supposed to go on the getXxx or isXxx methods, not on the setXxx methods...\nI thought this was a rule and it's true for all runners but Gearpump and Apex... I would follow the example of Spark/Flink!\nAlso, for readability: for options, use getXxx before setXxx consistently (or vice versa!)", "author": "RyanSkraba", "createdAt": "2020-05-20T09:42:15Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2PipelineOptions.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import edu.iu.dsc.tws.tset.env.TSetEnvironment;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.beam.sdk.options.Default;\n+import org.apache.beam.sdk.options.Description;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.StreamingOptions;\n+\n+/** Twister2PipelineOptions. */\n+public interface Twister2PipelineOptions extends PipelineOptions, StreamingOptions {\n+  @Description(\"set unique application name for Twister2 runner\")", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3ODM0Nw==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428378347", "bodyText": "Was not aware of that convention, thanks for pointing that out. reformatted according this rule", "author": "pulasthi", "createdAt": "2020-05-21T00:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3ODMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3OTE4Ng==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427879186", "bodyText": "Haha, this seems like it would be a lie most of the time!\nFor methods that have fake results like this, I'd put a TODO (at the minimum).", "author": "RyanSkraba", "createdAt": "2020-05-20T09:43:39Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2PipelineResult.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import java.io.IOException;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.metrics.MetricResults;\n+import org.joda.time.Duration;\n+\n+/** Represents a Twister2 pipeline execution result. */\n+public class Twister2PipelineResult implements PipelineResult {\n+\n+  PipelineResult.State state = State.RUNNING;\n+\n+  @Override\n+  public State getState() {\n+    return state;\n+  }\n+\n+  @Override\n+  public State cancel() throws IOException {\n+    throw new UnsupportedOperationException(\"Operation not supported\");\n+  }\n+\n+  @Override\n+  public State waitUntilFinish(Duration duration) {\n+    return State.DONE;", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTExMg==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428399112", "bodyText": "Those operations are not supported currently, I missed to mark them as such. Fixed them", "author": "pulasthi", "createdAt": "2020-05-21T01:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3OTE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTcwMA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427945700", "bodyText": "Raw types!  It looks like you're a bit inconsistent with annotating the raw types TSet, TLink and their subclasses with <?>!  I'd strongly prefer to see these filled in consistently.", "author": "RyanSkraba", "createdAt": "2020-05-20T11:47:58Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/BeamBatchWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import edu.iu.dsc.tws.api.config.Config;\n+import edu.iu.dsc.tws.api.tset.TBase;\n+import edu.iu.dsc.tws.api.tset.sets.TSet;\n+import edu.iu.dsc.tws.api.tset.sets.batch.BatchTSet;\n+import edu.iu.dsc.tws.tset.TBaseGraph;\n+import edu.iu.dsc.tws.tset.env.BatchTSetEnvironment;\n+import edu.iu.dsc.tws.tset.links.BaseTLink;\n+import edu.iu.dsc.tws.tset.sets.BaseTSet;\n+import edu.iu.dsc.tws.tset.sets.BuildableTSet;\n+import edu.iu.dsc.tws.tset.sets.batch.CachedTSet;\n+import edu.iu.dsc.tws.tset.sets.batch.ComputeTSet;\n+import edu.iu.dsc.tws.tset.sets.batch.SinkTSet;\n+import edu.iu.dsc.tws.tset.worker.BatchTSetIWorker;\n+import java.io.Serializable;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.beam.runners.twister2.translators.functions.DoFnFunction;\n+import org.apache.beam.runners.twister2.translators.functions.Twister2SinkFunction;\n+\n+/**\n+ * The Twister2 worker that will execute the job logic once the job is submitted from the run\n+ * method.\n+ */\n+public class BeamBatchWorker implements Serializable, BatchTSetIWorker {\n+\n+  private static final String SIDEINPUTS = \"sideInputs\";\n+  private static final String LEAVES = \"leaves\";\n+  private static final String GRAPH = \"graph\";\n+  private HashMap<String, BatchTSet<?>> sideInputDataSets;\n+  private Set<TSet> leaves;", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5OTQ3Nw==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428399477", "bodyText": "I might have to take a little time on this and make sure i get the type information correct. Would it be OK to create improvement issue for this for now, so i can get back to it later after the code is merged?", "author": "pulasthi", "createdAt": "2020-05-21T01:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0OTIwNg==", "url": "https://github.com/apache/beam/pull/10888#discussion_r429149206", "bodyText": "Of course!  Objectively, this is only a preference, I'm OK for leaving it for a subsequent improvement/cleanup.", "author": "RyanSkraba", "createdAt": "2020-05-22T09:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NjY1MA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427946650", "bodyText": "Consider making this protected to ensure that getFilesToStage() is correctly set via fromOptions", "author": "RyanSkraba", "createdAt": "2020-05-20T11:49:55Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2LegacyRunner.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import static org.apache.beam.runners.core.construction.resources.PipelineResources.detectClassPathResourcesToStage;\n+\n+import edu.iu.dsc.tws.api.JobConfig;\n+import edu.iu.dsc.tws.api.Twister2Job;\n+import edu.iu.dsc.tws.api.config.Config;\n+import edu.iu.dsc.tws.api.driver.DriverJobState;\n+import edu.iu.dsc.tws.api.exceptions.Twister2RuntimeException;\n+import edu.iu.dsc.tws.api.scheduler.Twister2JobState;\n+import edu.iu.dsc.tws.api.tset.sets.TSet;\n+import edu.iu.dsc.tws.api.tset.sets.batch.BatchTSet;\n+import edu.iu.dsc.tws.local.LocalSubmitter;\n+import edu.iu.dsc.tws.rsched.core.ResourceAllocator;\n+import edu.iu.dsc.tws.rsched.job.Twister2Submitter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+import org.apache.beam.runners.core.construction.PTransformMatchers;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.runners.core.construction.SplittableParDo;\n+import org.apache.beam.runners.core.construction.SplittableParDoNaiveBounded;\n+import org.apache.beam.runners.core.construction.resources.PipelineResources;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsValidator;\n+import org.apache.beam.sdk.runners.PTransformOverride;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/**\n+ * A {@link PipelineRunner} that executes the operations in the pipeline by first translating them\n+ * to a Twister2 Plan and then executing them either locally or on a Twister2 cluster, depending on\n+ * the configuration.\n+ */\n+public class Twister2LegacyRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = Logger.getLogger(Twister2LegacyRunner.class.getName());\n+  private static final String SIDEINPUTS = \"sideInputs\";\n+  private static final String LEAVES = \"leaves\";\n+  private static final String GRAPH = \"graph\";\n+  /** Provided options. */\n+  private final Twister2PipelineOptions options;\n+\n+  public Twister2LegacyRunner(Twister2PipelineOptions options) {", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM5NzYyMA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428397620", "bodyText": "Changed to protected", "author": "pulasthi", "createdAt": "2020-05-21T01:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0NjY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0OTYwMA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427949600", "bodyText": "Sorry -- is this correct?  Reading this, it looks like if the Twister2 job is RUNNING, the pipeline fails!  Likewise with the test code below.", "author": "RyanSkraba", "createdAt": "2020-05-20T11:55:29Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2LegacyRunner.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import static org.apache.beam.runners.core.construction.resources.PipelineResources.detectClassPathResourcesToStage;\n+\n+import edu.iu.dsc.tws.api.JobConfig;\n+import edu.iu.dsc.tws.api.Twister2Job;\n+import edu.iu.dsc.tws.api.config.Config;\n+import edu.iu.dsc.tws.api.driver.DriverJobState;\n+import edu.iu.dsc.tws.api.exceptions.Twister2RuntimeException;\n+import edu.iu.dsc.tws.api.scheduler.Twister2JobState;\n+import edu.iu.dsc.tws.api.tset.sets.TSet;\n+import edu.iu.dsc.tws.api.tset.sets.batch.BatchTSet;\n+import edu.iu.dsc.tws.local.LocalSubmitter;\n+import edu.iu.dsc.tws.rsched.core.ResourceAllocator;\n+import edu.iu.dsc.tws.rsched.job.Twister2Submitter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+import org.apache.beam.runners.core.construction.PTransformMatchers;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.runners.core.construction.SplittableParDo;\n+import org.apache.beam.runners.core.construction.SplittableParDoNaiveBounded;\n+import org.apache.beam.runners.core.construction.resources.PipelineResources;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsValidator;\n+import org.apache.beam.sdk.runners.PTransformOverride;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/**\n+ * A {@link PipelineRunner} that executes the operations in the pipeline by first translating them\n+ * to a Twister2 Plan and then executing them either locally or on a Twister2 cluster, depending on\n+ * the configuration.\n+ */\n+public class Twister2LegacyRunner extends PipelineRunner<PipelineResult> {\n+\n+  private static final Logger LOG = Logger.getLogger(Twister2LegacyRunner.class.getName());\n+  private static final String SIDEINPUTS = \"sideInputs\";\n+  private static final String LEAVES = \"leaves\";\n+  private static final String GRAPH = \"graph\";\n+  /** Provided options. */\n+  private final Twister2PipelineOptions options;\n+\n+  public Twister2LegacyRunner(Twister2PipelineOptions options) {\n+    this.options = options;\n+  }\n+\n+  public static Twister2LegacyRunner fromOptions(PipelineOptions options) {\n+    Twister2PipelineOptions pipelineOptions =\n+        PipelineOptionsValidator.validate(Twister2PipelineOptions.class, options);\n+    if (pipelineOptions.getFilesToStage() == null) {\n+      pipelineOptions.setFilesToStage(\n+          detectClassPathResourcesToStage(\n+              Twister2LegacyRunner.class.getClassLoader(), pipelineOptions));\n+      LOG.info(\n+          \"PipelineOptions.filesToStage was not specified. \"\n+              + \"Defaulting to files from the classpath: will stage {} files. \"\n+              + \"Enable logging at DEBUG level to see which files will be staged\"\n+              + pipelineOptions.getFilesToStage().size());\n+    }\n+    return new Twister2LegacyRunner(pipelineOptions);\n+  }\n+\n+  @Override\n+  public PipelineResult run(Pipeline pipeline) {\n+    // create a worker and pass in the pipeline and then do the translation\n+    Twister2PipelineExecutionEnvironment env = new Twister2PipelineExecutionEnvironment(options);\n+    LOG.info(\"Translating pipeline to Twister2 program.\");\n+    pipeline.replaceAll(getDefaultOverrides());\n+    env.translate(pipeline);\n+    setupSystem(options);\n+\n+    Config config = ResourceAllocator.loadConfig(new HashMap<>());\n+\n+    JobConfig jobConfig = new JobConfig();\n+    jobConfig.put(SIDEINPUTS, extractNames(env.getSideInputs()));\n+    jobConfig.put(LEAVES, extractNames(env.getLeaves()));\n+    jobConfig.put(GRAPH, env.getTSetGraph());\n+\n+    int workers = options.getParallelism();\n+    Twister2Job twister2Job =\n+        Twister2Job.newBuilder()\n+            .setJobName(options.getJobName())\n+            .setWorkerClass(BeamBatchWorker.class)\n+            .addComputeResource(options.getWorkerCPUs(), options.getRamMegaBytes(), workers)\n+            .setConfig(jobConfig)\n+            .build();\n+    Twister2JobState jobState = Twister2Submitter.submitJob(twister2Job, config);\n+\n+    Twister2PipelineResult result = new Twister2PipelineResult();\n+    if (jobState.getJobstate() == DriverJobState.FAILED\n+        || jobState.getJobstate() == DriverJobState.RUNNING) {\n+      throw new RuntimeException(\"Pipeline execution failed\", jobState.getCause());", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4MDMxNw==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428380317", "bodyText": "This is something that needs to be fixed form the Twister2 side first, currently the submit method returns once the job is complete, and if it returns with the state as \"RUNNING\" it means that the job terminated and did not complete. This can be fixed once the issue is fixed on the Twister2 side. I hope keeping it as is for now is OK for now.", "author": "pulasthi", "createdAt": "2020-05-21T00:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0OTYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0OTIzMA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r429149230", "bodyText": "Thanks for the clarification!", "author": "RyanSkraba", "createdAt": "2020-05-22T09:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk0OTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NTQ3NA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427985474", "bodyText": "You can probably remove this section!", "author": "RyanSkraba", "createdAt": "2020-05-20T12:55:25Z", "path": "runners/twister2/build.gradle", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import groovy.json.JsonOutput\n+\n+plugins { id 'org.apache.beam.module' }\n+\n+applyJavaNature(automaticModuleName: 'org.apache.beam.runners.twister2')\n+evaluationDependsOn(\":sdks:java:core\")\n+configurations {\n+    validatesRunner\n+}\n+description = \"Apache Beam :: Runners :: Twister2\"\n+\n+repositories {", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4MTQ3Ng==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428381476", "bodyText": "Thanks for catching that, removed it", "author": "pulasthi", "createdAt": "2020-05-21T00:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NTQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MDI1Mw==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427990253", "bodyText": "Is this file a mistake?  There's already Twister2StreamingTranslationContext so it could lead to confusion with the similar name.", "author": "RyanSkraba", "createdAt": "2020-05-20T13:02:00Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2StreamTranslationContext.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+/** Twister2StreamTranslationContext. */\n+public class Twister2StreamTranslationContext {}", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDA3NQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428384075", "bodyText": "Yes it is \ud83d\ude04 , there was a duplicate class fixed it.", "author": "pulasthi", "createdAt": "2020-05-21T00:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MDI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTIyOQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427991229", "bodyText": "Looks like Twister2 to me!  \ud83d\ude04 (Fix comment in all package-info.java)", "author": "RyanSkraba", "createdAt": "2020-05-20T13:03:20Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** Internal implementation of the Beam runner for Apache Flink. */", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NDgyOQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428384829", "bodyText": "wonder how i missed that, i was sure i searched for spark and flink \ud83d\ude04 . Fixed all the instances", "author": "pulasthi", "createdAt": "2020-05-21T00:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTg1OQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r427991859", "bodyText": "Typo isInitialized (throughout the code).", "author": "RyanSkraba", "createdAt": "2020-05-20T13:04:17Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/translators/functions/AssignWindowsFunction.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2.translators.functions;\n+\n+import edu.iu.dsc.tws.api.tset.TSetContext;\n+import edu.iu.dsc.tws.api.tset.fn.ComputeCollectorFunc;\n+import edu.iu.dsc.tws.api.tset.fn.RecordCollector;\n+import java.io.ObjectStreamException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.logging.Logger;\n+import org.apache.beam.model.pipeline.v1.RunnerApi;\n+import org.apache.beam.runners.core.construction.Environments;\n+import org.apache.beam.runners.core.construction.SdkComponents;\n+import org.apache.beam.runners.core.construction.SerializablePipelineOptions;\n+import org.apache.beam.runners.core.construction.WindowingStrategyTranslation;\n+import org.apache.beam.runners.twister2.utils.Twister2AssignContext;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PortablePipelineOptions;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.transforms.windowing.WindowFn;\n+import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.vendor.grpc.v1p26p0.com.google.protobuf.InvalidProtocolBufferException;\n+\n+/** Assign Windows function. */\n+public class AssignWindowsFunction<T>\n+    implements ComputeCollectorFunc<WindowedValue<T>, Iterator<WindowedValue<T>>> {\n+  private static final Logger LOG = Logger.getLogger(AssignWindowsFunction.class.getName());\n+\n+  private transient boolean isInitilized = false;", "originalCommit": "3397515cf01ffec87b2b331ad62029ee7d3871a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4NTUyMQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r428385521", "bodyText": "Thank you for catching that, fixed all the occurrences", "author": "pulasthi", "createdAt": "2020-05-21T00:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTg1OQ=="}], "type": "inlineReview"}, {"oid": "5d66bb19352a08f1d80653ed5d004602e7354c5b", "url": "https://github.com/apache/beam/commit/5d66bb19352a08f1d80653ed5d004602e7354c5b", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-05-21T01:48:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTcxMg==", "url": "https://github.com/apache/beam/pull/10888#discussion_r429155712", "bodyText": "I am SO sorry, such a minor nitpick but probably the right time to fix it!  You probably want to remove or move Apache here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Internal implementation of the Beam runner for Apache Twister2. */\n          \n          \n            \n            /** Internal implementation of the Beam runner for Twister2. */", "author": "RyanSkraba", "createdAt": "2020-05-22T09:58:16Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/** Internal implementation of the Beam runner for Apache Twister2. */", "originalCommit": "5d66bb19352a08f1d80653ed5d004602e7354c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4Mzc3OA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r429283778", "bodyText": "Fixed it, it is good that you caught that, that would go unfixed for a long time otherwise", "author": "pulasthi", "createdAt": "2020-05-22T14:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTcxMg=="}], "type": "inlineReview"}, {"oid": "0293236286164c3158a481911abc2f12638c38f5", "url": "https://github.com/apache/beam/commit/0293236286164c3158a481911abc2f12638c38f5", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-05-22T14:32:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1OTI1MQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r385759251", "bodyText": "can you please extract the twister2 version to a shared variable (def twister2_version)", "author": "iemejia", "createdAt": "2020-02-28T15:29:27Z", "path": "runners/twister2/build.gradle", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * License); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an AS IS BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import groovy.json.JsonOutput\n+\n+plugins { id 'org.apache.beam.module' }\n+\n+applyJavaNature(automaticModuleName: 'org.apache.beam.runners.twister2')\n+evaluationDependsOn(\":sdks:java:core\")\n+configurations {\n+    validatesRunner\n+}\n+description = \"Apache Beam :: Runners :: Twister2\"\n+\n+repositories {\n+    mavenLocal()\n+}\n+\n+dependencies {\n+    compile library.java.vendored_guava_26_0_jre\n+\n+    compile (project(path: \":runners:core-java\")){\n+        exclude group: 'com.esotericsoftware.kryo', module: 'kryo'\n+    }\n+    compile project(\":runners:java-fn-execution\")\n+    compile \"org.twister2:api-java:0.6.0\"", "originalCommit": "ee1690b0ad2ca21f3eaa7a3cdbcdbda1bf7f7041", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1MjczNA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r444652734", "bodyText": "Done, thank you for pointing that out", "author": "pulasthi", "createdAt": "2020-06-24T05:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1OTI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTI5NQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r443161295", "bodyText": "Why is this Legacy? Because it is not portable?", "author": "iemejia", "createdAt": "2020-06-20T21:30:11Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/Twister2LegacyRunner.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2;\n+\n+import static org.apache.beam.runners.core.construction.resources.PipelineResources.detectClassPathResourcesToStage;\n+\n+import edu.iu.dsc.tws.api.JobConfig;\n+import edu.iu.dsc.tws.api.Twister2Job;\n+import edu.iu.dsc.tws.api.config.Config;\n+import edu.iu.dsc.tws.api.driver.DriverJobState;\n+import edu.iu.dsc.tws.api.exceptions.Twister2RuntimeException;\n+import edu.iu.dsc.tws.api.scheduler.Twister2JobState;\n+import edu.iu.dsc.tws.api.tset.sets.TSet;\n+import edu.iu.dsc.tws.api.tset.sets.batch.BatchTSet;\n+import edu.iu.dsc.tws.local.LocalSubmitter;\n+import edu.iu.dsc.tws.rsched.core.ResourceAllocator;\n+import edu.iu.dsc.tws.rsched.job.Twister2Submitter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+import org.apache.beam.runners.core.construction.PTransformMatchers;\n+import org.apache.beam.runners.core.construction.PTransformTranslation;\n+import org.apache.beam.runners.core.construction.SplittableParDo;\n+import org.apache.beam.runners.core.construction.SplittableParDoNaiveBounded;\n+import org.apache.beam.runners.core.construction.resources.PipelineResources;\n+import org.apache.beam.sdk.Pipeline;\n+import org.apache.beam.sdk.PipelineResult;\n+import org.apache.beam.sdk.PipelineRunner;\n+import org.apache.beam.sdk.options.PipelineOptions;\n+import org.apache.beam.sdk.options.PipelineOptionsValidator;\n+import org.apache.beam.sdk.runners.PTransformOverride;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.MoreObjects;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableList;\n+\n+/**\n+ * A {@link PipelineRunner} that executes the operations in the pipeline by first translating them\n+ * to a Twister2 Plan and then executing them either locally or on a Twister2 cluster, depending on\n+ * the configuration.\n+ */\n+public class Twister2LegacyRunner extends PipelineRunner<PipelineResult> {", "originalCommit": "0293236286164c3158a481911abc2f12638c38f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYyMzE3OA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r444623178", "bodyText": "Yes, that was the intention of using the legacy part, I can rename it if needed? what do you think would be the best approach?", "author": "pulasthi", "createdAt": "2020-06-24T03:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5MzIwMQ==", "url": "https://github.com/apache/beam/pull/10888#discussion_r444693201", "bodyText": "I think Legacy has subtle connotations e.g. being old and 'battle tested' but also difficult to upgrade which in this case do not apply, maybe we can call it classic just to be consistent with the terminology we use now to refer to the non-portable Spark/Flink runners e.g. Twister2ClassicRunner or just let rename it Twister2Runner and call a future portable based runner Twister2PortableRunner. So up to you to decide which of the two you prefer.", "author": "iemejia", "createdAt": "2020-06-24T07:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzODg0NA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r445938844", "bodyText": "Renamed it to Twister2Runner", "author": "pulasthi", "createdAt": "2020-06-26T02:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTkyMw==", "url": "https://github.com/apache/beam/pull/10888#discussion_r443161923", "bodyText": "You can move this down and just evaluate if(value == null) { value = WindowedValue.valueInGlobalWindow(null); }", "author": "iemejia", "createdAt": "2020-06-20T21:40:58Z", "path": "runners/twister2/src/main/java/org/apache/beam/runners/twister2/translators/functions/ByteToWindowFunctionPrimitive.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.twister2.translators.functions;\n+\n+import edu.iu.dsc.tws.api.comms.structs.Tuple;\n+import edu.iu.dsc.tws.api.tset.TSetContext;\n+import edu.iu.dsc.tws.api.tset.fn.MapFunc;\n+import java.io.ObjectStreamException;\n+import java.util.logging.Logger;\n+import org.apache.beam.runners.twister2.utils.TranslationUtils;\n+import org.apache.beam.sdk.coders.Coder;\n+import org.apache.beam.sdk.coders.CoderException;\n+import org.apache.beam.sdk.util.CoderUtils;\n+import org.apache.beam.sdk.util.SerializableUtils;\n+import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.sdk.util.WindowedValue.WindowedValueCoder;\n+import org.apache.beam.sdk.values.KV;\n+\n+/** ByteToWindow function. */\n+public class ByteToWindowFunctionPrimitive<K, V>\n+    implements MapFunc<WindowedValue<KV<K, V>>, Tuple<byte[], byte[]>> {\n+  private transient Coder<K> keyCoder;\n+  private transient WindowedValueCoder<V> wvCoder;\n+  private static final Logger LOG = Logger.getLogger(ByteToWindowFunctionPrimitive.class.getName());\n+\n+  private transient boolean isInitialized = false;\n+  private byte[] keyCoderBytes;\n+  private byte[] wvCoderBytes;\n+\n+  public ByteToWindowFunctionPrimitive() {\n+    // non arg constructor needed for kryo\n+    isInitialized = false;\n+  }\n+\n+  public ByteToWindowFunctionPrimitive(\n+      final Coder<K> inputKeyCoder, final WindowedValueCoder<V> wvCoder) {\n+    this.keyCoder = inputKeyCoder;\n+    this.wvCoder = wvCoder;\n+\n+    keyCoderBytes = SerializableUtils.serializeToByteArray(keyCoder);\n+    wvCoderBytes = SerializableUtils.serializeToByteArray(wvCoder);\n+  }\n+\n+  @Override\n+  public WindowedValue<KV<K, V>> map(Tuple<byte[], byte[]> input) {\n+    K key = null;\n+    WindowedValue<V> value = null;\n+    try {\n+      key = CoderUtils.decodeFromByteArray(keyCoder, input.getKey());\n+\n+      value = TranslationUtils.fromByteArray(input.getValue(), wvCoder);\n+    } catch (CoderException e) {\n+      LOG.info(e.getMessage());\n+    }\n+    WindowedValue<KV<K, V>> element;\n+    if (value != null) {\n+      element =", "originalCommit": "0293236286164c3158a481911abc2f12638c38f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1Mjc5Nw==", "url": "https://github.com/apache/beam/pull/10888#discussion_r444652797", "bodyText": "Corrected that", "author": "pulasthi", "createdAt": "2020-06-24T05:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTkyMw=="}], "type": "inlineReview"}, {"oid": "ce7284b03bb1da89f90eafc3d5cb80ad230b9bd8", "url": "https://github.com/apache/beam/commit/ce7284b03bb1da89f90eafc3d5cb80ad230b9bd8", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-06-24T05:27:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5OTMxNA==", "url": "https://github.com/apache/beam/pull/10888#discussion_r444699314", "bodyText": "nit: Use the list symbol:\n* New Twister2 Runner ....", "author": "iemejia", "createdAt": "2020-06-24T07:31:20Z", "path": "CHANGES.md", "diffHunk": "@@ -51,6 +51,7 @@\n \n ## Highlights\n \n+Twister2 Runner ([BEAM-7304](https://issues.apache.org/jira/browse/BEAM-7304))", "originalCommit": "ce7284b03bb1da89f90eafc3d5cb80ad230b9bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e0eef0a11b1078c80397e0d851001018b484c00", "url": "https://github.com/apache/beam/commit/1e0eef0a11b1078c80397e0d851001018b484c00", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-06-26T02:38:30Z", "type": "commit"}, {"oid": "1e0eef0a11b1078c80397e0d851001018b484c00", "url": "https://github.com/apache/beam/commit/1e0eef0a11b1078c80397e0d851001018b484c00", "message": "adding twister2 runner with support for batch piplines", "committedDate": "2020-06-26T02:38:30Z", "type": "forcePushed"}]}