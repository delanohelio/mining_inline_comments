{"pr_number": 10935, "pr_title": "[BEAM-9296] Clean up and add type-hints to SDF API", "pr_createdAt": "2020-02-22T00:29:21Z", "pr_url": "https://github.com/apache/beam/pull/10935", "timeline": [{"oid": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4", "url": "https://github.com/apache/beam/commit/c2dfa8d6743aea1c69b41e232f5b29097c0229d4", "message": "Clean up and add type-hints to SDF API", "committedDate": "2020-02-22T00:28:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTU1NA==", "url": "https://github.com/apache/beam/pull/10935#discussion_r382935554", "bodyText": "Our linters do not enforce alphanumeric order for modules inside the TYPE_CHECKING block, but we should still be diligent about it.  Can you move this up one, please.", "author": "chadrik", "createdAt": "2020-02-22T19:31:28Z", "path": "sdks/python/apache_beam/runners/sdf_utils.py", "diffHunk": "@@ -38,6 +38,8 @@\n \n if TYPE_CHECKING:\n   from apache_beam.io.iobase import RestrictionTracker\n+  from apache_beam.io.iobase import RestrictionProgress", "originalCommit": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NDk3MQ==", "url": "https://github.com/apache/beam/pull/10935#discussion_r383564971", "bodyText": "Done. Thanks for mentioning that!", "author": "boyuanzz", "createdAt": "2020-02-24T22:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTg0OQ==", "url": "https://github.com/apache/beam/pull/10935#discussion_r382935849", "bodyText": "A slight refactor here will avoid introducing a new mypy error:\n  def get_restriction_coder(self):\n    # type: () -> Optional[TupleCoder]\n    \"\"\"Get coder for a restriction when processing an SDF. \"\"\"\n    if self.is_splittable_dofn():\n      return TupleCoder([\n          (self.get_restriction_provider().restriction_coder()),\n          (self.get_watermark_estimator_provider().estimator_state_coder())\n      ])\n    else:\n      return None\nThis avoids having to declare  the restriction_coder variable as Optional[TupleCoder].", "author": "chadrik", "createdAt": "2020-02-22T19:35:53Z", "path": "sdks/python/apache_beam/runners/common.py", "diffHunk": "@@ -333,6 +336,7 @@ def is_splittable_dofn(self):\n     return self.get_restriction_provider() is not None\n \n   def get_restriction_coder(self):\n+    # type: () -> Optional[TupleCoder]", "originalCommit": "c2dfa8d6743aea1c69b41e232f5b29097c0229d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NDgyNA==", "url": "https://github.com/apache/beam/pull/10935#discussion_r383564824", "bodyText": "Done. I think the return type should still be Optional[TupleCoder] given that it also returns None.", "author": "boyuanzz", "createdAt": "2020-02-24T22:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3MjgwOQ==", "url": "https://github.com/apache/beam/pull/10935#discussion_r383572809", "bodyText": "correct.  my comment about avoiding the declaration of  Optional[TupleCoder] refers to the variable (which my edit does away with), not the the return type.", "author": "chadrik", "createdAt": "2020-02-24T23:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkzNTg0OQ=="}], "type": "inlineReview"}, {"oid": "43e0f645d6b9cd1401ef8cea42c7c2ef71a39085", "url": "https://github.com/apache/beam/commit/43e0f645d6b9cd1401ef8cea42c7c2ef71a39085", "message": "Address comments", "committedDate": "2020-02-24T22:54:49Z", "type": "commit"}, {"oid": "1117f4772047c5b8f36f74dc0bb5f60c892470f3", "url": "https://github.com/apache/beam/commit/1117f4772047c5b8f36f74dc0bb5f60c892470f3", "message": "Address comments again", "committedDate": "2020-02-24T22:56:17Z", "type": "commit"}]}