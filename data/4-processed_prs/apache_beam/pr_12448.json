{"pr_number": 12448, "pr_title": "[BEAM-9679] Add a windowed PCollection lesson to Go SDK Katas", "pr_createdAt": "2020-08-02T23:13:00Z", "pr_url": "https://github.com/apache/beam/pull/12448", "timeline": [{"oid": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "url": "https://github.com/apache/beam/commit/33b7b6148feb4d006c6094c8ce24605dab5709a1", "message": "Add Additional Parameters lesson to Go SDK Katas", "committedDate": "2020-08-02T04:59:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NzQ4Mw==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464577483", "bodyText": "Bounded vs Unbounded is orthogonal to windowing/event times. There's no need to understand it to understand the other. Windowing is useful and available to both kinds of PCollection. I'd recommend not mentioning it at all at this juncture.", "author": "lostluck", "createdAt": "2020-08-03T18:05:35Z", "path": "learning/katas/go/core_transforms/additional_parameters/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,84 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Additional Parameters - Window and Timestamp\n+\n+This lesson introduces the concept of windowing and timestamped PCollection elements.\n+Before discussing windowing, we need to distinguish bounded from unbounded data.", "originalCommit": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODY3MQ==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464578671", "bodyText": "Beam doesn't specify timestamps. It's transform or runner dependent. If the framework receives timestamps, it propagates them or updates them as the transforms require.\neg. \"The reading transform applies a timestamp....\" not \"beam applies the timestamp\"", "author": "lostluck", "createdAt": "2020-08-03T18:07:56Z", "path": "learning/katas/go/core_transforms/additional_parameters/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,84 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Additional Parameters - Window and Timestamp\n+\n+This lesson introduces the concept of windowing and timestamped PCollection elements.\n+Before discussing windowing, we need to distinguish bounded from unbounded data.\n+Bounded data is of a fixed size such as a file or database query.  Unbounded data comes\n+from a continuously updated source such as a subscription or stream.\n+\n+A window is a view into a fixed beginning and fixed end to a set of data.  In the beam model, windowing subdivides \n+a PCollection according to the timestamps of its individual elements.  This is useful\n+for unbounded data because it allows the model to work with fixed element sizes.  Note that windowing\n+is not unique to unbounded data.  The beam model windows all data whether it is bounded or unbounded.\n+Yet, when you read from a fixed size source such as a file, beam applies the same timestamp to all the elements.", "originalCommit": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NTUzMw==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464765533", "bodyText": "My gut was telling me \"beam applies the timestamp\" was not quite it but now the way you describe it makes sense.", "author": "damondouglas", "createdAt": "2020-08-04T02:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MzA5Mw==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464583093", "bodyText": "Additional Parameters is a weird name for this section. It's simply how this is implemented in the Go SDK.  There are also other additional parameters that aren't being covered which may get confusing as we add them to the SDK (Pane, Timers, State...)\nWindowing or windows and timestamps stands fairly well on it's own.", "author": "lostluck", "createdAt": "2020-08-03T18:16:41Z", "path": "learning/katas/go/core_transforms/additional_parameters/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,84 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Additional Parameters - Window and Timestamp", "originalCommit": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwMzkzMQ==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464603931", "bodyText": "WRT elements, size refers to how many bytes it takes up. You probably mean counts.\nWindowing doesn't set things to fixed sizes or element sizes, or even counts.\nWRT to bounded/unbounded, note that the text is saying \"It's true for A!\" \"it's also true for not A!\" It's true for both A and not A!\"\nSo my recommendation is to not mention A at all.", "author": "lostluck", "createdAt": "2020-08-03T18:59:27Z", "path": "learning/katas/go/core_transforms/additional_parameters/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,84 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Additional Parameters - Window and Timestamp\n+\n+This lesson introduces the concept of windowing and timestamped PCollection elements.\n+Before discussing windowing, we need to distinguish bounded from unbounded data.\n+Bounded data is of a fixed size such as a file or database query.  Unbounded data comes\n+from a continuously updated source such as a subscription or stream.\n+\n+A window is a view into a fixed beginning and fixed end to a set of data.  In the beam model, windowing subdivides \n+a PCollection according to the timestamps of its individual elements.  This is useful\n+for unbounded data because it allows the model to work with fixed element sizes.  Note that windowing", "originalCommit": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNDI2NQ==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464604265", "bodyText": "Beam can pass information about....", "author": "lostluck", "createdAt": "2020-08-03T19:00:08Z", "path": "learning/katas/go/core_transforms/additional_parameters/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,84 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Additional Parameters - Window and Timestamp\n+\n+This lesson introduces the concept of windowing and timestamped PCollection elements.\n+Before discussing windowing, we need to distinguish bounded from unbounded data.\n+Bounded data is of a fixed size such as a file or database query.  Unbounded data comes\n+from a continuously updated source such as a subscription or stream.\n+\n+A window is a view into a fixed beginning and fixed end to a set of data.  In the beam model, windowing subdivides \n+a PCollection according to the timestamps of its individual elements.  This is useful\n+for unbounded data because it allows the model to work with fixed element sizes.  Note that windowing\n+is not unique to unbounded data.  The beam model windows all data whether it is bounded or unbounded.\n+Yet, when you read from a fixed size source such as a file, beam applies the same timestamp to all the elements.\n+\n+Beam will include information about the window and timestamp to your elements in your DoFn.  All your previous", "originalCommit": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwNDU0OQ==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464604549", "bodyText": "I'd say \"available\" rather than \"provided\".", "author": "lostluck", "createdAt": "2020-08-03T19:00:47Z", "path": "learning/katas/go/core_transforms/additional_parameters/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,84 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Additional Parameters - Window and Timestamp\n+\n+This lesson introduces the concept of windowing and timestamped PCollection elements.\n+Before discussing windowing, we need to distinguish bounded from unbounded data.\n+Bounded data is of a fixed size such as a file or database query.  Unbounded data comes\n+from a continuously updated source such as a subscription or stream.\n+\n+A window is a view into a fixed beginning and fixed end to a set of data.  In the beam model, windowing subdivides \n+a PCollection according to the timestamps of its individual elements.  This is useful\n+for unbounded data because it allows the model to work with fixed element sizes.  Note that windowing\n+is not unique to unbounded data.  The beam model windows all data whether it is bounded or unbounded.\n+Yet, when you read from a fixed size source such as a file, beam applies the same timestamp to all the elements.\n+\n+Beam will include information about the window and timestamp to your elements in your DoFn.  All your previous\n+lessons' DoFn had this information provided, yet you never made use of it in your DoFn parameters.  In this ", "originalCommit": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYwODAzNg==", "url": "https://github.com/apache/beam/pull/12448#discussion_r464608036", "bodyText": "Probably repeating myself now, but bounded datasets can have timestamps as well.\nSpeaking outside of the context of this lesson:\nConsider you have a stream of data from pubsub or something. Each element has the publishing time associated with it. However, data can be late*, which means you might emit less than accurate results if you want to maintain your ~1 minute averages or similar. To have the daily graphs be correct after the fact, you could preserve the incoming datastream somewhere, timestamps and all in some files. Then after the fact you could run the same pipeline against those files, to get the correct running averages throughout the day instead, just by replacing the streaming source transform, with the batch source transform, along with the respective sinks. Fun eh?\n*which you can configure beam to handle, but that's not implemented in the Go SDK yet.", "author": "lostluck", "createdAt": "2020-08-03T19:08:15Z", "path": "learning/katas/go/core_transforms/additional_parameters/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,84 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Additional Parameters - Window and Timestamp\n+\n+This lesson introduces the concept of windowing and timestamped PCollection elements.\n+Before discussing windowing, we need to distinguish bounded from unbounded data.\n+Bounded data is of a fixed size such as a file or database query.  Unbounded data comes\n+from a continuously updated source such as a subscription or stream.\n+\n+A window is a view into a fixed beginning and fixed end to a set of data.  In the beam model, windowing subdivides \n+a PCollection according to the timestamps of its individual elements.  This is useful\n+for unbounded data because it allows the model to work with fixed element sizes.  Note that windowing\n+is not unique to unbounded data.  The beam model windows all data whether it is bounded or unbounded.\n+Yet, when you read from a fixed size source such as a file, beam applies the same timestamp to all the elements.\n+\n+Beam will include information about the window and timestamp to your elements in your DoFn.  All your previous\n+lessons' DoFn had this information provided, yet you never made use of it in your DoFn parameters.  In this \n+lesson you will.  The simple toy dataset has five git commit messages and their timestamps \n+from the [Apache Beam public repository](https://github.com/apache/beam).  Their timestamps have been\n+applied to the PCollection input to simulate an unbounded dataset.", "originalCommit": "33b7b6148feb4d006c6094c8ce24605dab5709a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "607795000f1392c6cf104040f5987ca667f637e7", "url": "https://github.com/apache/beam/commit/607795000f1392c6cf104040f5987ca667f637e7", "message": "Edit lesson name and task description", "committedDate": "2020-08-04T14:23:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2OTYwMg==", "url": "https://github.com/apache/beam/pull/12448#discussion_r466069602", "bodyText": "I'd remove either simple or toy, they're redundant together.", "author": "lostluck", "createdAt": "2020-08-06T00:03:05Z", "path": "learning/katas/go/core_transforms/windowing/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,77 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Windowing\n+\n+This lesson introduces the concept of windowed PCollection elements.  A window is a view into a fixed beginning and \n+fixed end to a set of data.  In the beam model, windowing subdivides a PCollection according to the\n+timestamps of its individual elements.\n+\n+Beam can pass information about the window and timestamp to your elements in your DoFn.  All your previous\n+lessons' DoFn had this information available, yet you never made use of it in your DoFn parameters.  In this \n+lesson you will.  The simple toy dataset has five git commit messages and their timestamps ", "originalCommit": "607795000f1392c6cf104040f5987ca667f637e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MzQyMA==", "url": "https://github.com/apache/beam/pull/12448#discussion_r466143420", "bodyText": "I like the idea of more windowing lessons after the rest of the originally planned katas are complete.", "author": "damondouglas", "createdAt": "2020-08-06T04:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2OTYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NDc4NQ==", "url": "https://github.com/apache/beam/pull/12448#discussion_r466074785", "bodyText": "Beam's not passing information to the elements, it's passing it to the dofn.\nConsider...\nA DoFn can request timestamp and windowing information about the element it's processing. All your previous lessons had this information available as well. In this lesson you will make use of these parameters.\nIt's probably a personal nit of mine, but the \"yet you\" sounds accusatory (not saying that was your intent).", "author": "lostluck", "createdAt": "2020-08-06T00:22:14Z", "path": "learning/katas/go/core_transforms/windowing/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,77 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Windowing\n+\n+This lesson introduces the concept of windowed PCollection elements.  A window is a view into a fixed beginning and \n+fixed end to a set of data.  In the beam model, windowing subdivides a PCollection according to the\n+timestamps of its individual elements.\n+\n+Beam can pass information about the window and timestamp to your elements in your DoFn.  All your previous\n+lessons' DoFn had this information available, yet you never made use of it in your DoFn parameters.  In this \n+lesson you will.  The simple toy dataset has five git commit messages and their timestamps ", "originalCommit": "607795000f1392c6cf104040f5987ca667f637e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTA0OQ==", "url": "https://github.com/apache/beam/pull/12448#discussion_r466075049", "bodyText": "I don't know how precise we need to be in the kata's, but consider adding.\n\"An element can be a part of one or more windows.\"", "author": "lostluck", "createdAt": "2020-08-06T00:23:10Z", "path": "learning/katas/go/core_transforms/windowing/additional_parameters/task.md", "diffHunk": "@@ -0,0 +1,77 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+# Windowing\n+\n+This lesson introduces the concept of windowed PCollection elements.  A window is a view into a fixed beginning and \n+fixed end to a set of data.  In the beam model, windowing subdivides a PCollection according to the\n+timestamps of its individual elements.", "originalCommit": "607795000f1392c6cf104040f5987ca667f637e7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "baf797836f1cd8d59829df5503506b5e21f9bfdc", "url": "https://github.com/apache/beam/commit/baf797836f1cd8d59829df5503506b5e21f9bfdc", "message": "Additional edits to task description", "committedDate": "2020-08-06T05:02:15Z", "type": "commit"}, {"oid": "cab5556b29dbb885bca84c5d4cb6ba91db574e6f", "url": "https://github.com/apache/beam/commit/cab5556b29dbb885bca84c5d4cb6ba91db574e6f", "message": "Update stepik course", "committedDate": "2020-08-06T17:53:58Z", "type": "commit"}]}