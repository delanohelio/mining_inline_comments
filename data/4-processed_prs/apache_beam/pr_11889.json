{"pr_number": 11889, "pr_title": "[BEAM-10164] Flink Batch Runner: Memory efficient combine implementat\u2026", "pr_createdAt": "2020-06-02T15:18:31Z", "pr_url": "https://github.com/apache/beam/pull/11889", "timeline": [{"oid": "85e1542ba86757c4fb87023494a6e7f4b954d32d", "url": "https://github.com/apache/beam/commit/85e1542ba86757c4fb87023494a6e7f4b954d32d", "message": "[BEAM-10164] Flink Batch Runner: Memory efficient combine implementation for non-merging windows.", "committedDate": "2020-06-02T15:17:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTQ5Nw==", "url": "https://github.com/apache/beam/pull/11889#discussion_r434515497", "bodyText": "Code style: It would be great if refs were immutable by default, but adding final to everything I find adds verbosity with little added benefit.", "author": "mxm", "createdAt": "2020-06-03T12:04:09Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkBatchTransformTranslators.java", "diffHunk": "@@ -476,16 +476,15 @@ public void translateNode(\n     public void translateNode(\n         PTransform<PCollection<KV<K, InputT>>, PCollection<KV<K, OutputT>>> transform,\n         FlinkBatchTranslationContext context) {\n-      DataSet<WindowedValue<KV<K, InputT>>> inputDataSet =\n+      final DataSet<WindowedValue<KV<K, InputT>>> inputDataSet =\n           context.getInputDataSet(context.getInput(transform));\n-\n-      CombineFnBase.GlobalCombineFn<InputT, AccumT, OutputT> combineFn =\n-          ((Combine.PerKey) transform).getFn();\n-\n-      KvCoder<K, InputT> inputCoder = (KvCoder<K, InputT>) context.getInput(transform).getCoder();\n-\n-      Coder<AccumT> accumulatorCoder;\n-\n+      final Combine.PerKey<K, InputT, OutputT> combineTransform =\n+          (Combine.PerKey<K, InputT, OutputT>) transform;\n+      final CombineFnBase.GlobalCombineFn<InputT, AccumT, OutputT> combineFn =\n+          (CombineFnBase.GlobalCombineFn<InputT, AccumT, OutputT>) combineTransform.getFn();\n+      final KvCoder<K, InputT> inputCoder =\n+          (KvCoder<K, InputT>) context.getInput(transform).getCoder();\n+      final Coder<AccumT> accumulatorCoder;", "originalCommit": "85e1542ba86757c4fb87023494a6e7f4b954d32d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyODk5MA==", "url": "https://github.com/apache/beam/pull/11889#discussion_r434528990", "bodyText": "I agree that the benefit is discutable.\nPersonally I find it helpful when it comes to long methods or trying to understand someone elses code, that you see that there would be no more assignents to the variable (if there is no final modifier, you know that there is something more going on).\nAnyway, it's more of a personal taste. Do you want me to revert these?", "author": "dmvk", "createdAt": "2020-06-03T12:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2ODk1OA==", "url": "https://github.com/apache/beam/pull/11889#discussion_r434568958", "bodyText": "Yes, it depends on the situation. I use final mostly when there is a clear assign-once relationship with commonly used types. Since type-parameterized types are used here, there is very little chance of accidentally overwriting a ref.\nJust a discussion point. No need to revert.", "author": "mxm", "createdAt": "2020-06-03T13:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTQ5Nw=="}], "type": "inlineReview"}]}