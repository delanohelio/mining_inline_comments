{"pr_number": 11874, "pr_title": "Flink Batch Runner: optimize GBK translation for non-merging windows.", "pr_createdAt": "2020-06-01T10:35:41Z", "pr_url": "https://github.com/apache/beam/pull/11874", "timeline": [{"oid": "e4758ded721f100851ae7441dba415f6c490b47c", "url": "https://github.com/apache/beam/commit/e4758ded721f100851ae7441dba415f6c490b47c", "message": "[BEAM-8848] Flink Batch Runner: optimize GBK translation for non-merging windows.", "committedDate": "2020-06-01T11:34:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDAzNQ==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433294035", "bodyText": "We might want to use Multimap.", "author": "mxm", "createdAt": "2020-06-01T15:12:28Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkBatchTransformTranslators.java", "diffHunk": "@@ -105,40 +111,53 @@\n   // --------------------------------------------------------------------------------------------\n \n   @SuppressWarnings(\"rawtypes\")\n-  private static final Map<String, FlinkBatchPipelineTranslator.BatchTransformTranslator>\n+  private static final Map<String, List<FlinkBatchPipelineTranslator.BatchTransformTranslator>>", "originalCommit": "e4758ded721f100851ae7441dba415f6c490b47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2Njk5MQ==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433866991", "bodyText": "\ud83d\udc4d", "author": "dmvk", "createdAt": "2020-06-02T13:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NDE5Mw==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433294193", "bodyText": "Again, multimap would handle this.", "author": "mxm", "createdAt": "2020-06-01T15:12:45Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkBatchTransformTranslators.java", "diffHunk": "@@ -105,40 +111,53 @@\n   // --------------------------------------------------------------------------------------------\n \n   @SuppressWarnings(\"rawtypes\")\n-  private static final Map<String, FlinkBatchPipelineTranslator.BatchTransformTranslator>\n+  private static final Map<String, List<FlinkBatchPipelineTranslator.BatchTransformTranslator>>\n       TRANSLATORS = new HashMap<>();\n \n-  static {\n-    TRANSLATORS.put(PTransformTranslation.IMPULSE_TRANSFORM_URN, new ImpulseTranslatorBatch());\n+  private static void registerTranslator(\n+      String urn, FlinkBatchPipelineTranslator.BatchTransformTranslator<?> translator) {\n+    if (!TRANSLATORS.containsKey(urn)) {\n+      TRANSLATORS.put(urn, new ArrayList<>());", "originalCommit": "e4758ded721f100851ae7441dba415f6c490b47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NTcwOQ==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433295709", "bodyText": "I think we can get rid of these helper calls and keep the existing code.", "author": "mxm", "createdAt": "2020-06-01T15:15:12Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkBatchTransformTranslators.java", "diffHunk": "@@ -105,40 +111,53 @@\n   // --------------------------------------------------------------------------------------------\n \n   @SuppressWarnings(\"rawtypes\")\n-  private static final Map<String, FlinkBatchPipelineTranslator.BatchTransformTranslator>\n+  private static final Map<String, List<FlinkBatchPipelineTranslator.BatchTransformTranslator>>\n       TRANSLATORS = new HashMap<>();\n \n-  static {\n-    TRANSLATORS.put(PTransformTranslation.IMPULSE_TRANSFORM_URN, new ImpulseTranslatorBatch());\n+  private static void registerTranslator(\n+      String urn, FlinkBatchPipelineTranslator.BatchTransformTranslator<?> translator) {\n+    if (!TRANSLATORS.containsKey(urn)) {\n+      TRANSLATORS.put(urn, new ArrayList<>());\n+    }\n+    TRANSLATORS.get(urn).add(translator);\n+  }\n \n-    TRANSLATORS.put(\n+  static {\n+    registerTranslator(PTransformTranslation.IMPULSE_TRANSFORM_URN, new ImpulseTranslatorBatch());\n+    registerTranslator(", "originalCommit": "e4758ded721f100851ae7441dba415f6c490b47c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMjA0Nw==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433302047", "bodyText": "Can you revert these? This makes integration hard for external Runners.", "author": "mxm", "createdAt": "2020-06-01T15:25:49Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkBatchTranslationContext.java", "diffHunk": "@@ -68,13 +71,18 @@ public FlinkBatchTranslationContext(ExecutionEnvironment env, PipelineOptions op\n     this.danglingDataSets = new HashMap<>();\n   }\n \n+  void init(Pipeline pipeline) {\n+    pipeline.traverseTopologically(countingPipelineVisitor);\n+    pipeline.traverseTopologically(lookupPipelineVisitor);\n+  }\n+\n   // ------------------------------------------------------------------------\n \n-  public Map<PValue, DataSet<?>> getDanglingDataSets() {\n+  Map<PValue, DataSet<?>> getDanglingDataSets() {", "originalCommit": "e4758ded721f100851ae7441dba415f6c490b47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MjYzMA==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433872630", "bodyText": "The whole class is marked as package private, so this change should not make any difference when it comes to 3rd code. Am I missing something?", "author": "dmvk", "createdAt": "2020-06-02T13:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMjA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDY0Mw==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433880643", "bodyText": "Didn't see that this was the case. It's still an unrelated change and it draws attention away from the actual issue.", "author": "mxm", "createdAt": "2020-06-02T13:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMjA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMzAzNw==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433303037", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"GBK result is not re-iterable. You can enable re-iterations by setting '--reIterableGroupByKeyResult=true'.\");\n          \n          \n            \n                      \"GBK result is not re-iterable. You can enable re-iterations by setting '--reIterableGroupByKeyResult'.\");", "author": "mxm", "createdAt": "2020-06-01T15:27:25Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/translation/functions/FlinkNonMergingReduceFunction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.flink.translation.functions;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.transforms.windowing.PaneInfo;\n+import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.sdk.values.WindowingStrategy;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterables;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Iterators;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.PeekingIterator;\n+import org.apache.flink.api.common.functions.GroupReduceFunction;\n+import org.apache.flink.util.Collector;\n+import org.joda.time.Instant;\n+\n+/**\n+ * Reduce function for non-merging GBK implementation. Implementation tries to return non-iterable\n+ * results when possible, so we do not have to materialize all values for a single key in memory.\n+ *\n+ * @param <K> Key type.\n+ * @param <InputT> Input type.\n+ */\n+public class FlinkNonMergingReduceFunction<K, InputT>\n+    implements GroupReduceFunction<\n+        WindowedValue<KV<K, InputT>>, WindowedValue<KV<K, Iterable<InputT>>>> {\n+\n+  private static class OnceIterable<T> implements Iterable<T> {\n+\n+    private final Iterator<T> iterator;\n+\n+    private final AtomicBoolean used = new AtomicBoolean(false);\n+\n+    OnceIterable(Iterator<T> iterator) {\n+      this.iterator = iterator;\n+    }\n+\n+    @Override\n+    public Iterator<T> iterator() {\n+      if (used.compareAndSet(false, true)) {\n+        return iterator;\n+      }\n+      throw new IllegalStateException(\n+          \"GBK result is not re-iterable. You can enable re-iterations by setting '--reIterableGroupByKeyResult=true'.\");", "originalCommit": "e4758ded721f100851ae7441dba415f6c490b47c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NzE4Nw==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433877187", "bodyText": "\ud83d\udc4d", "author": "dmvk", "createdAt": "2020-06-02T13:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMwMzAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3OTYxNQ==", "url": "https://github.com/apache/beam/pull/11874#discussion_r433879615", "bodyText": "Could we keep the original order of the translators here?", "author": "mxm", "createdAt": "2020-06-02T13:36:06Z", "path": "runners/flink/src/main/java/org/apache/beam/runners/flink/FlinkBatchTransformTranslators.java", "diffHunk": "@@ -105,40 +113,45 @@\n   // --------------------------------------------------------------------------------------------\n \n   @SuppressWarnings(\"rawtypes\")\n-  private static final Map<String, FlinkBatchPipelineTranslator.BatchTransformTranslator>\n-      TRANSLATORS = new HashMap<>();\n+  private static final Multimap<String, FlinkBatchPipelineTranslator.BatchTransformTranslator>\n+      TRANSLATORS = MultimapBuilder.hashKeys().arrayListValues().build();\n \n   static {\n     TRANSLATORS.put(PTransformTranslation.IMPULSE_TRANSFORM_URN, new ImpulseTranslatorBatch());\n-\n     TRANSLATORS.put(\n         PTransformTranslation.CREATE_VIEW_TRANSFORM_URN,\n-        new CreatePCollectionViewTranslatorBatch());\n-\n+        new CreatePCollectionViewTranslatorBatch<>());\n     TRANSLATORS.put(\n-        PTransformTranslation.COMBINE_PER_KEY_TRANSFORM_URN, new CombinePerKeyTranslatorBatch());\n+        PTransformTranslation.COMBINE_PER_KEY_TRANSFORM_URN, new CombinePerKeyTranslatorBatch<>());\n     TRANSLATORS.put(\n-        PTransformTranslation.GROUP_BY_KEY_TRANSFORM_URN, new GroupByKeyTranslatorBatch());\n-    TRANSLATORS.put(PTransformTranslation.RESHUFFLE_URN, new ReshuffleTranslatorBatch());\n-\n+        PTransformTranslation.GROUP_BY_KEY_TRANSFORM_URN,\n+        new NonMergingGroupByKeyTranslatorBatch<>());\n     TRANSLATORS.put(\n-        PTransformTranslation.FLATTEN_TRANSFORM_URN, new FlattenPCollectionTranslatorBatch());\n-\n+        PTransformTranslation.GROUP_BY_KEY_TRANSFORM_URN, new GroupByKeyTranslatorBatch<>());\n+    TRANSLATORS.put(PTransformTranslation.RESHUFFLE_URN, new ReshuffleTranslatorBatch<>());\n     TRANSLATORS.put(\n-        PTransformTranslation.ASSIGN_WINDOWS_TRANSFORM_URN, new WindowAssignTranslatorBatch());\n-\n-    TRANSLATORS.put(PTransformTranslation.PAR_DO_TRANSFORM_URN, new ParDoTranslatorBatch());\n-\n-    TRANSLATORS.put(PTransformTranslation.READ_TRANSFORM_URN, new ReadSourceTranslatorBatch());", "originalCommit": "b3b260280e67fbea73beadbe9e1bfde883cddbfe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c451363db15126025d2b558213945c0bc0071b3", "url": "https://github.com/apache/beam/commit/0c451363db15126025d2b558213945c0bc0071b3", "message": "[BEAM-8850,BEAM-8849] FlinkBatchTranslationContext respects input parameters during lookups. Add support for a multiple translation variants for a single urn.", "committedDate": "2020-06-02T13:56:01Z", "type": "commit"}, {"oid": "3c4536dc98f4574ab86f873d50796da3de41a804", "url": "https://github.com/apache/beam/commit/3c4536dc98f4574ab86f873d50796da3de41a804", "message": "[BEAM-8848] Flink Batch Runner: optimize GBK translation for non-merging windows.", "committedDate": "2020-06-02T13:56:02Z", "type": "commit"}, {"oid": "23a1fb711bce2af3a42b06f522139babcc72b285", "url": "https://github.com/apache/beam/commit/23a1fb711bce2af3a42b06f522139babcc72b285", "message": "[BEAM-8848] Code review.", "committedDate": "2020-06-02T13:56:02Z", "type": "commit"}, {"oid": "23a1fb711bce2af3a42b06f522139babcc72b285", "url": "https://github.com/apache/beam/commit/23a1fb711bce2af3a42b06f522139babcc72b285", "message": "[BEAM-8848] Code review.", "committedDate": "2020-06-02T13:56:02Z", "type": "forcePushed"}]}