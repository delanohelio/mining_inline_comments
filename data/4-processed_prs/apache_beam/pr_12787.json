{"pr_number": 12787, "pr_title": "[BEAM-10641] Add eliminate_common_key_with_none graph optimizer", "pr_createdAt": "2020-09-08T19:41:18Z", "pr_url": "https://github.com/apache/beam/pull/12787", "timeline": [{"oid": "9898f566f7d170fcf88ed84e5679bd47d8a8169a", "url": "https://github.com/apache/beam/commit/9898f566f7d170fcf88ed84e5679bd47d8a8169a", "message": "Add eliminate_common_key_with_none optimizer", "committedDate": "2020-09-08T19:28:56Z", "type": "commit"}, {"oid": "4605aedd5a7c230cbc170046b740e5f320b408ac", "url": "https://github.com/apache/beam/commit/4605aedd5a7c230cbc170046b740e5f320b408ac", "message": "Add eliminate_common_key_with_none to runners", "committedDate": "2020-09-08T19:30:14Z", "type": "commit"}, {"oid": "7b048551784a265c81a5a2fa191d858cc82d020d", "url": "https://github.com/apache/beam/commit/7b048551784a265c81a5a2fa191d858cc82d020d", "message": "Update comment", "committedDate": "2020-09-08T19:37:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzOTQwNw==", "url": "https://github.com/apache/beam/pull/12787#discussion_r485239407", "bodyText": "Nit: rather than mutating sibling_stages and using it below with itertools, it'd be easier to follow if you yield sibling_stages[0] here and only iterate over the ineligible_stages below.\nIf you'd prefer to use the loop below, at least make a new flat list of the stages.", "author": "robertwb", "createdAt": "2020-09-08T22:55:05Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -704,6 +705,64 @@ def fix_side_input_pcoll_coders(stages, pipeline_context):\n   return stages\n \n \n+def eliminate_common_key_with_none(stages, context):\n+  # type: (Iterable[Stage], TransformContext) -> Iterable[Stage]\n+\n+  \"\"\"Runs common subexpression elimination for sibling KeyWithNone stages.\n+\n+  If multiple KeyWithNone stages share a common input, then all but one stages\n+  will be eliminated along with their output PCollections. Transforms that\n+  read input from the output of the eliminated KeyWithNone stages will be\n+  remapped to read input from the output of the remaining KeyWithNone stage.\n+  \"\"\"\n+  # Partition stages by whether they are eligible for common KeyWithNone\n+  # elimination, and group eligible KeyWithNone stages by parent and\n+  # environment.\n+  grouped_eligible_stages = collections.defaultdict(list)\n+  ineligible_stages = []\n+  for stage in stages:\n+    is_eligible = False\n+    if len(stage.transforms) == 1:\n+      transform = only_transform(stage.transforms)\n+      if (transform.spec.urn == common_urns.primitives.PAR_DO.urn and\n+          len(transform.inputs) == 1 and len(transform.outputs) == 1):\n+        pardo_payload = proto_utils.parse_Bytes(\n+            transform.spec.payload, beam_runner_api_pb2.ParDoPayload)\n+        if pardo_payload.do_fn.urn == python_urns.KEY_WITH_NONE_DOFN:\n+          is_eligible = True\n+\n+    if is_eligible:\n+      input_pcoll_id = only_element(transform.inputs.values())\n+      stage_key = (input_pcoll_id, stage.environment)\n+      grouped_eligible_stages[stage_key].append(stage)\n+    else:\n+      ineligible_stages.append(stage)\n+\n+  # Eliminate stages and build the PCollection remapping dictionary.\n+  pcoll_id_remap = {}\n+  for sibling_stages in grouped_eligible_stages.values():\n+    output_pcoll_ids = [\n+        only_element(stage.transforms[0].outputs.values())\n+        for stage in sibling_stages\n+    ]\n+    for to_delete_pcoll_id in output_pcoll_ids[1:]:\n+      pcoll_id_remap[to_delete_pcoll_id] = output_pcoll_ids[0]\n+      del context.components.pcollections[to_delete_pcoll_id]\n+    del sibling_stages[1:]", "originalCommit": "7b048551784a265c81a5a2fa191d858cc82d020d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MzY0MQ==", "url": "https://github.com/apache/beam/pull/12787#discussion_r485943641", "bodyText": "We need to use the loop below to remap the PCollections so I made a new flat list.", "author": "yifanmai", "createdAt": "2020-09-09T21:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzOTQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTk5OQ==", "url": "https://github.com/apache/beam/pull/12787#discussion_r485259999", "bodyText": "Most of this is very general. What if you had a merge_key(stage) helper function which only returned something for this case (but was generally extensible) and then threw stuff into the dict according to this key (say, if it was not None), and then the rest of the logic could follow.", "author": "robertwb", "createdAt": "2020-09-09T00:02:24Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -704,6 +705,64 @@ def fix_side_input_pcoll_coders(stages, pipeline_context):\n   return stages\n \n \n+def eliminate_common_key_with_none(stages, context):\n+  # type: (Iterable[Stage], TransformContext) -> Iterable[Stage]\n+\n+  \"\"\"Runs common subexpression elimination for sibling KeyWithNone stages.\n+\n+  If multiple KeyWithNone stages share a common input, then all but one stages\n+  will be eliminated along with their output PCollections. Transforms that\n+  read input from the output of the eliminated KeyWithNone stages will be\n+  remapped to read input from the output of the remaining KeyWithNone stage.\n+  \"\"\"\n+  # Partition stages by whether they are eligible for common KeyWithNone\n+  # elimination, and group eligible KeyWithNone stages by parent and\n+  # environment.\n+  grouped_eligible_stages = collections.defaultdict(list)\n+  ineligible_stages = []\n+  for stage in stages:\n+    is_eligible = False", "originalCommit": "7b048551784a265c81a5a2fa191d858cc82d020d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MzQ4Mw==", "url": "https://github.com/apache/beam/pull/12787#discussion_r485943483", "bodyText": "Refactored the code to separate the key function from the grouping function, and used the grouping function in combiner packing as well; PTAL.", "author": "yifanmai", "createdAt": "2020-09-09T21:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1OTk5OQ=="}], "type": "inlineReview"}, {"oid": "fa6e93a1b93e0385f61fdd4d9db28b44d7c3b073", "url": "https://github.com/apache/beam/commit/fa6e93a1b93e0385f61fdd4d9db28b44d7c3b073", "message": "Dostring edit", "committedDate": "2020-09-09T16:54:14Z", "type": "commit"}, {"oid": "59dc3b788e2a3f651479c5241dfab547abc0cb87", "url": "https://github.com/apache/beam/commit/59dc3b788e2a3f651479c5241dfab547abc0cb87", "message": "Refactor out _group_stages_by_key", "committedDate": "2020-09-09T21:49:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NjUwMA==", "url": "https://github.com/apache/beam/pull/12787#discussion_r486686500", "bodyText": "Use transform.inputs.keys().", "author": "robertwb", "createdAt": "2020-09-10T23:23:21Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -704,6 +705,71 @@ def fix_side_input_pcoll_coders(stages, pipeline_context):\n   return stages\n \n \n+def _group_stages_by_key(stages, get_stage_key):\n+  grouped_stages = collections.defaultdict(list)\n+  stages_with_none_key = []\n+  for stage in stages:\n+    stage_key = get_stage_key(stage)\n+    if stage_key is None:\n+      stages_with_none_key.append(stage)\n+    else:\n+      grouped_stages[stage_key].append(stage)\n+  return (grouped_stages, stages_with_none_key)\n+\n+\n+def eliminate_common_key_with_none(stages, context):\n+  # type: (Iterable[Stage], TransformContext) -> Iterable[Stage]\n+\n+  \"\"\"Runs common subexpression elimination for sibling KeyWithNone stages.\n+\n+  If multiple KeyWithNone stages share a common input, then all but one stages\n+  will be eliminated along with their output PCollections. Transforms that\n+  originally read input from the output PCollection of the eliminated\n+  KeyWithNone stages will be remapped to read input from the output PCollection\n+  of the remaining KeyWithNone stage.\n+  \"\"\"\n+\n+  # Partition stages by whether they are eligible for common KeyWithNone\n+  # elimination, and group eligible KeyWithNone stages by parent and\n+  # environment.\n+  def get_stage_key(stage):\n+    if len(stage.transforms) == 1:\n+      transform = only_transform(stage.transforms)\n+      if (transform.spec.urn == common_urns.primitives.PAR_DO.urn and\n+          len(transform.inputs) == 1 and len(transform.outputs) == 1):\n+        pardo_payload = proto_utils.parse_Bytes(\n+            transform.spec.payload, beam_runner_api_pb2.ParDoPayload)\n+        if pardo_payload.do_fn.urn == python_urns.KEY_WITH_NONE_DOFN:\n+          return (only_element(transform.inputs.values()), stage.environment)\n+    return None\n+\n+  grouped_eligible_stages, ineligible_stages = _group_stages_by_key(\n+      stages, get_stage_key)\n+\n+  # Eliminate stages and build the PCollection remapping dictionary.\n+  pcoll_id_remap = {}\n+  remaining_stages = []\n+  for sibling_stages in grouped_eligible_stages.values():\n+    output_pcoll_ids = [\n+        only_element(stage.transforms[0].outputs.values())\n+        for stage in sibling_stages\n+    ]\n+    for to_delete_pcoll_id in output_pcoll_ids[1:]:\n+      pcoll_id_remap[to_delete_pcoll_id] = output_pcoll_ids[0]\n+      del context.components.pcollections[to_delete_pcoll_id]\n+    remaining_stages.append(sibling_stages[0])\n+\n+  # Yield stages while remapping input PCollections if needed.\n+  stages_to_yield = itertools.chain(ineligible_stages, remaining_stages)\n+  for stage in stages_to_yield:\n+    for transform in stage.transforms:\n+      for input_key in list(transform.inputs):", "originalCommit": "59dc3b788e2a3f651479c5241dfab547abc0cb87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNDE3NA==", "url": "https://github.com/apache/beam/pull/12787#discussion_r487204174", "bodyText": "Done.", "author": "yifanmai", "createdAt": "2020-09-11T18:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NjUyMQ==", "url": "https://github.com/apache/beam/pull/12787#discussion_r486686521", "bodyText": "Just a thought: most of this is generic too (parameterized by a merge_stages : stages -> stage(s), pcoll_remap).", "author": "robertwb", "createdAt": "2020-09-10T23:23:25Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner/translations.py", "diffHunk": "@@ -704,6 +705,71 @@ def fix_side_input_pcoll_coders(stages, pipeline_context):\n   return stages\n \n \n+def _group_stages_by_key(stages, get_stage_key):\n+  grouped_stages = collections.defaultdict(list)\n+  stages_with_none_key = []\n+  for stage in stages:\n+    stage_key = get_stage_key(stage)\n+    if stage_key is None:\n+      stages_with_none_key.append(stage)\n+    else:\n+      grouped_stages[stage_key].append(stage)\n+  return (grouped_stages, stages_with_none_key)\n+\n+\n+def eliminate_common_key_with_none(stages, context):\n+  # type: (Iterable[Stage], TransformContext) -> Iterable[Stage]\n+\n+  \"\"\"Runs common subexpression elimination for sibling KeyWithNone stages.\n+\n+  If multiple KeyWithNone stages share a common input, then all but one stages\n+  will be eliminated along with their output PCollections. Transforms that\n+  originally read input from the output PCollection of the eliminated\n+  KeyWithNone stages will be remapped to read input from the output PCollection\n+  of the remaining KeyWithNone stage.\n+  \"\"\"\n+\n+  # Partition stages by whether they are eligible for common KeyWithNone\n+  # elimination, and group eligible KeyWithNone stages by parent and\n+  # environment.\n+  def get_stage_key(stage):\n+    if len(stage.transforms) == 1:\n+      transform = only_transform(stage.transforms)\n+      if (transform.spec.urn == common_urns.primitives.PAR_DO.urn and\n+          len(transform.inputs) == 1 and len(transform.outputs) == 1):\n+        pardo_payload = proto_utils.parse_Bytes(\n+            transform.spec.payload, beam_runner_api_pb2.ParDoPayload)\n+        if pardo_payload.do_fn.urn == python_urns.KEY_WITH_NONE_DOFN:\n+          return (only_element(transform.inputs.values()), stage.environment)\n+    return None\n+\n+  grouped_eligible_stages, ineligible_stages = _group_stages_by_key(\n+      stages, get_stage_key)\n+\n+  # Eliminate stages and build the PCollection remapping dictionary.", "originalCommit": "59dc3b788e2a3f651479c5241dfab547abc0cb87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNDUyOQ==", "url": "https://github.com/apache/beam/pull/12787#discussion_r487204529", "bodyText": "Yeah this is basically a combine by key :) but I think I will leave it as is to keep it readable.", "author": "yifanmai", "createdAt": "2020-09-11T18:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NjUyMQ=="}], "type": "inlineReview"}, {"oid": "c3dca909e15a58de6fd91db36a3f51dcd8d2aa36", "url": "https://github.com/apache/beam/commit/c3dca909e15a58de6fd91db36a3f51dcd8d2aa36", "message": "Lint and review fix", "committedDate": "2020-09-11T18:01:19Z", "type": "commit"}]}