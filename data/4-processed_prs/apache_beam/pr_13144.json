{"pr_number": 13144, "pr_title": "[BEAM-10475] Add max buffering duration option for GroupIntoBatches transform in Python", "pr_createdAt": "2020-10-19T23:30:13Z", "pr_url": "https://github.com/apache/beam/pull/13144", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjY5OA==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509806698", "bodyText": "Pull this (and the exact same logic above and below) into common helper method.", "author": "robertwb", "createdAt": "2020-10-22T00:14:39Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -777,33 +795,56 @@ def process(\n         window=DoFn.WindowParam,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n         count_state=DoFn.StateParam(COUNT_STATE),\n-        expiry_timer=DoFn.TimerParam(EXPIRY_TIMER)):\n+        window_timer=DoFn.TimerParam(WINDOW_TIMER),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n       # Allowed lateness not supported in Python SDK\n       # https://beam.apache.org/documentation/programming-guide/#watermarks-and-late-data\n-      expiry_timer.set(window.end)\n+      window_timer.set(window.end)\n       element_state.add(element)\n       count_state.add(1)\n       count = count_state.read()\n+      if count == 1 and max_buffering_duration_secs is not None:\n+        # This is the first element in batch. Start counting buffering time if a\n+        # limit was set.\n+        buffering_timer.set(clock() + max_buffering_duration_secs)\n       if count >= batch_size:\n         batch = [element for element in element_state.read()]\n         key, _ = batch[0]\n         batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n+        yield key, batch_values\n         element_state.clear()\n         count_state.clear()\n+        buffering_timer.clear()\n \n-    @on_timer(EXPIRY_TIMER)\n-    def expiry(\n+    @on_timer(WINDOW_TIMER)\n+    def on_window_timer(\n         self,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n-        count_state=DoFn.StateParam(COUNT_STATE)):\n+        count_state=DoFn.StateParam(COUNT_STATE),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n+      batch = [element for element in element_state.read()]\n+      if batch:\n+        key, _ = batch[0]", "originalCommit": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MDI5OA==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509880298", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-10-22T04:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNjY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzM2MQ==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509807361", "bodyText": "Was this wrong?", "author": "robertwb", "createdAt": "2020-10-22T00:16:50Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -1009,7 +1050,7 @@ def _process(element):\n \n   @staticmethod\n   @typehints.with_input_types(str)\n-  @typehints.with_output_types(Union[List[str], List[Tuple[str, str]]])\n+  @typehints.with_output_types(Union[List[str], Tuple[str, str]])", "originalCommit": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MDMxOA==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509880318", "bodyText": "oops. It was correct. Reverted.", "author": "nehsyc", "createdAt": "2020-10-22T04:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzYzMg==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509807632", "bodyText": "Nit: I prefer the previous formatting (as the comment applies to the whole set of elements).", "author": "robertwb", "createdAt": "2020-10-22T00:17:55Z", "path": "sdks/python/apache_beam/transforms/util_test.py", "diffHunk": "@@ -110,10 +117,16 @@ def test_windowed_batches(self):\n           | util.BatchElements(\n               min_batch_size=5, max_batch_size=10, clock=FakeClock())\n           | beam.Map(len))\n-      assert_that(res, equal_to([\n-          5, 5, 10, 10,  # elements in [0, 30)\n-          10, 7,         # elements in [30, 47)\n-      ]))\n+      assert_that(\n+          res,\n+          equal_to([\n+              5,\n+              5,\n+              10,\n+              10,  # elements in [0, 30)", "originalCommit": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MDMzMw==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509880333", "bodyText": "Reverted.", "author": "nehsyc", "createdAt": "2020-10-22T04:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzgyMQ==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509807821", "bodyText": "_ExpandValuesIterable?\nThis could also be FlatMapTuple(lambda k, vs: vs)", "author": "robertwb", "createdAt": "2020-10-22T00:18:43Z", "path": "sdks/python/apache_beam/transforms/util_test.py", "diffHunk": "@@ -644,6 +657,12 @@ def _create_test_data():\n       data.append((\"key\", scientists[index]))\n     return data\n \n+  class _ExpandIterable(DoFn):", "originalCommit": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MDM1MA==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509880350", "bodyText": "Good to know! Replaced with FlatMapTuple :D", "author": "nehsyc", "createdAt": "2020-10-22T04:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNzgyMQ=="}], "type": "inlineReview"}, {"oid": "062bfb2a5351e2eecf98a3e51904b6d1fa9470b8", "url": "https://github.com/apache/beam/commit/062bfb2a5351e2eecf98a3e51904b6d1fa9470b8", "message": "extracted common logic to a helper; minor fixes", "committedDate": "2020-10-22T04:57:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY4NzgwOQ==", "url": "https://github.com/apache/beam/pull/13144#discussion_r509687809", "bodyText": "You can use parenthesis to avoid using \\ as line continuation.", "author": "boyuanzz", "createdAt": "2020-10-21T20:53:00Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -751,24 +751,42 @@ class GroupIntoBatches(PTransform):\n   GroupIntoBatches is experimental. Its use case will depend on the runner if\n   it has support of States and Timers.\n   \"\"\"\n-  def __init__(self, batch_size):\n+  def __init__(\n+      self, batch_size, max_buffering_duration_secs=None, clock=time.time):\n     \"\"\"Create a new GroupIntoBatches with batch size.\n \n     Arguments:\n       batch_size: (required) How many elements should be in a batch\n+      max_buffering_duration_secs: (optional) How long in seconds at most an\n+        incomplete batch of elements is allowed to be buffered in the states.\n+        The duration must be a positive second duration and should be given as\n+        an int or float.\n+      clock: (optional) an alternative to time.time (mostly for testing)\n     \"\"\"\n     self.batch_size = batch_size\n \n+    if max_buffering_duration_secs is not None:\n+      assert max_buffering_duration_secs > 0, \\", "originalCommit": "e86a50bc48c18573b7afe2f63edda1dfe7c1ffcf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NzY1Ng==", "url": "https://github.com/apache/beam/pull/13144#discussion_r510357656", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-10-22T18:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY4NzgwOQ=="}], "type": "inlineReview"}, {"oid": "858ce1df7a4ccd12a2234f3a3a4b252b0c3dd4a3", "url": "https://github.com/apache/beam/commit/858ce1df7a4ccd12a2234f3a3a4b252b0c3dd4a3", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-22T18:03:44Z", "type": "forcePushed"}, {"oid": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "url": "https://github.com/apache/beam/commit/2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-22T18:27:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNDY4OQ==", "url": "https://github.com/apache/beam/pull/13144#discussion_r510534689", "bodyText": "None is a valid key, so this is not quite safe. Instead, you could make flush_batch an iterable, and just do return self.flush_batch() everywhere.", "author": "robertwb", "createdAt": "2020-10-23T00:40:11Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -777,33 +795,56 @@ def process(\n         window=DoFn.WindowParam,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n         count_state=DoFn.StateParam(COUNT_STATE),\n-        expiry_timer=DoFn.TimerParam(EXPIRY_TIMER)):\n+        window_timer=DoFn.TimerParam(WINDOW_TIMER),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n       # Allowed lateness not supported in Python SDK\n       # https://beam.apache.org/documentation/programming-guide/#watermarks-and-late-data\n-      expiry_timer.set(window.end)\n+      window_timer.set(window.end)\n       element_state.add(element)\n       count_state.add(1)\n       count = count_state.read()\n+      if count == 1 and max_buffering_duration_secs is not None:\n+        # This is the first element in batch. Start counting buffering time if a\n+        # limit was set.\n+        buffering_timer.set(clock() + max_buffering_duration_secs)\n       if count >= batch_size:\n-        batch = [element for element in element_state.read()]\n-        key, _ = batch[0]\n-        batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n-        element_state.clear()\n-        count_state.clear()\n-\n-    @on_timer(EXPIRY_TIMER)\n-    def expiry(\n+        key, batch_values = self.flush_batch(\n+            element_state, count_state, buffering_timer)\n+        if key is not None:", "originalCommit": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4ODY4NA==", "url": "https://github.com/apache/beam/pull/13144#discussion_r510588684", "bodyText": "Done", "author": "nehsyc", "createdAt": "2020-10-23T04:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNDY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNTQ4Mw==", "url": "https://github.com/apache/beam/pull/13144#discussion_r510535483", "bodyText": "Specifically, here you would just return and below you would yield key, batch_values.", "author": "robertwb", "createdAt": "2020-10-23T00:43:32Z", "path": "sdks/python/apache_beam/transforms/util.py", "diffHunk": "@@ -777,33 +795,56 @@ def process(\n         window=DoFn.WindowParam,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n         count_state=DoFn.StateParam(COUNT_STATE),\n-        expiry_timer=DoFn.TimerParam(EXPIRY_TIMER)):\n+        window_timer=DoFn.TimerParam(WINDOW_TIMER),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n       # Allowed lateness not supported in Python SDK\n       # https://beam.apache.org/documentation/programming-guide/#watermarks-and-late-data\n-      expiry_timer.set(window.end)\n+      window_timer.set(window.end)\n       element_state.add(element)\n       count_state.add(1)\n       count = count_state.read()\n+      if count == 1 and max_buffering_duration_secs is not None:\n+        # This is the first element in batch. Start counting buffering time if a\n+        # limit was set.\n+        buffering_timer.set(clock() + max_buffering_duration_secs)\n       if count >= batch_size:\n-        batch = [element for element in element_state.read()]\n-        key, _ = batch[0]\n-        batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n-        element_state.clear()\n-        count_state.clear()\n-\n-    @on_timer(EXPIRY_TIMER)\n-    def expiry(\n+        key, batch_values = self.flush_batch(\n+            element_state, count_state, buffering_timer)\n+        if key is not None:\n+          yield key, batch_values\n+\n+    @on_timer(WINDOW_TIMER)\n+    def on_window_timer(\n         self,\n         element_state=DoFn.StateParam(ELEMENT_STATE),\n-        count_state=DoFn.StateParam(COUNT_STATE)):\n+        count_state=DoFn.StateParam(COUNT_STATE),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n+      key, batch_values = self.flush_batch(\n+          element_state, count_state, buffering_timer)\n+      if key is not None:\n+        yield key, batch_values\n+\n+    @on_timer(BUFFERING_TIMER)\n+    def on_buffering_timer(\n+        self,\n+        element_state=DoFn.StateParam(ELEMENT_STATE),\n+        count_state=DoFn.StateParam(COUNT_STATE),\n+        buffering_timer=DoFn.TimerParam(BUFFERING_TIMER)):\n+      key, batch_values = self.flush_batch(\n+          element_state, count_state, buffering_timer)\n+      if key is not None:\n+        yield key, batch_values\n+\n+    def flush_batch(self, element_state, count_state, buffering_timer):\n       batch = [element for element in element_state.read()]\n-      if batch:\n-        key, _ = batch[0]\n-        batch_values = [v for (k, v) in batch]\n-        yield (key, batch_values)\n-        element_state.clear()\n-        count_state.clear()\n+      if not batch:\n+        return None, None", "originalCommit": "2c4b66bd54735e75df0e9e1c7151aefd86b9ba91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4ODY5Ng==", "url": "https://github.com/apache/beam/pull/13144#discussion_r510588696", "bodyText": "Gotcha. I missed the return case previously so it didn't work correctly. Thanks for the suggestion!", "author": "nehsyc", "createdAt": "2020-10-23T04:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNTQ4Mw=="}], "type": "inlineReview"}, {"oid": "0160603d95f6f2d20564737ee735ce3ef3800dc1", "url": "https://github.com/apache/beam/commit/0160603d95f6f2d20564737ee735ce3ef3800dc1", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-23T04:35:32Z", "type": "forcePushed"}, {"oid": "c37f4d1dd553f29d1c15cc93650630d1d8e93b0f", "url": "https://github.com/apache/beam/commit/c37f4d1dd553f29d1c15cc93650630d1d8e93b0f", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-23T23:43:42Z", "type": "forcePushed"}, {"oid": "65cc9727916fcfd138879b2579efe4b2d97eaef6", "url": "https://github.com/apache/beam/commit/65cc9727916fcfd138879b2579efe4b2d97eaef6", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-27T16:38:09Z", "type": "forcePushed"}, {"oid": "03d5362ceb1028424d396462a3660306651e756e", "url": "https://github.com/apache/beam/commit/03d5362ceb1028424d396462a3660306651e756e", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-27T17:06:17Z", "type": "forcePushed"}, {"oid": "578d6f6816311d3a649608a5ec33d40d174d7e7b", "url": "https://github.com/apache/beam/commit/578d6f6816311d3a649608a5ec33d40d174d7e7b", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-28T00:44:44Z", "type": "commit"}, {"oid": "578d6f6816311d3a649608a5ec33d40d174d7e7b", "url": "https://github.com/apache/beam/commit/578d6f6816311d3a649608a5ec33d40d174d7e7b", "message": "Add max buffering duration for GroupIntoBatches in Python SDK", "committedDate": "2020-10-28T00:44:44Z", "type": "forcePushed"}]}