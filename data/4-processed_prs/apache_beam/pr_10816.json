{"pr_number": 10816, "pr_title": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners", "pr_createdAt": "2020-02-10T11:26:47Z", "pr_url": "https://github.com/apache/beam/pull/10816", "timeline": [{"oid": "097beb2998460dc2eb627b16c63751a818b4507e", "url": "https://github.com/apache/beam/commit/097beb2998460dc2eb627b16c63751a818b4507e", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners", "committedDate": "2020-02-10T11:31:22Z", "type": "forcePushed"}, {"oid": "b754e17f309af0c11abef41bae0d47a9c293a7cc", "url": "https://github.com/apache/beam/commit/b754e17f309af0c11abef41bae0d47a9c293a7cc", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners", "committedDate": "2020-02-10T12:34:36Z", "type": "forcePushed"}, {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "url": "https://github.com/apache/beam/commit/85eeb10ff1f788e52028aafce42f80b2731dc8b8", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners", "committedDate": "2020-02-10T15:52:57Z", "type": "commit"}, {"oid": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "url": "https://github.com/apache/beam/commit/85eeb10ff1f788e52028aafce42f80b2731dc8b8", "message": "[BEAM-9273] Explicitly disable @RequiresTimeSortedInput on unsupported runners", "committedDate": "2020-02-10T15:52:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk2Ng==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377420966", "bodyText": "The DoFnSignature is precisely the list of features already, no? It is OK to have helper methods anyhow.\nStyle point: for a given class, utility static methods usually go in a companion class like DoFnSignature (class) & DoFnSignatures (utility methods)", "author": "kennknowles", "createdAt": "2020-02-11T02:18:20Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/DoFnFeatures.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import org.apache.beam.sdk.state.BagState;\n+import org.apache.beam.sdk.state.MapState;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.State;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.state.WatermarkHoldState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.reflect.DoFnSignatures;\n+import org.apache.beam.sdk.values.TypeDescriptor;\n+\n+/**\n+ * Features a {@link DoFn} can posses. Each runner might implement a different (sub)set of this", "originalCommit": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NDEwNg==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377544106", "bodyText": "Agree. The reason I created this class is that I wanted to demonstrate the approach of declaring pipeline requirements and validating that runner supports all requirements.\nThat would go as follows:\n Set<Features> required = PipelineFeaturs.extract(pipeline);\n Runner.validateAllFeaturesSupported(required);\nThat way, adding a new feature to pipeline would not require any change to runner core, but the runner would reject the pipeline.\nI then realized that this change would be too big and really not related to the annotation, so I returned back to the original approach, where runners explicitly reject features they do not support (and adding unsupported feature needs modification in runners code). I will rename the class as you suggest.", "author": "je-ik", "createdAt": "2020-02-11T10:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NzEyOA==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377547128", "bodyText": "Hmmm ... DoFnSignatures already exists. It does something different (creates DoFnSignature from DoFn). Feels weird to mix these two helper functionalities.", "author": "je-ik", "createdAt": "2020-02-11T10:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NjgzOQ==", "url": "https://github.com/apache/beam/pull/10816#discussion_r378476839", "bodyText": "@kennknowles would you have any suggestions about naming the class? I think this code really should not go to DoFnSignatures, can we agree on some alternative name?", "author": "je-ik", "createdAt": "2020-02-12T19:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5ODQxNw==", "url": "https://github.com/apache/beam/pull/10816#discussion_r378498417", "bodyText": "I quite strongly believe it belongs in DoFnSignatures and that what you describe in the rest belongs in Pipelines. Static-method-only utility classes tend to be disorganized and undiscoverable. It is better to attach them to the thing that they are most related to.", "author": "kennknowles", "createdAt": "2020-02-12T20:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMjAxNA==", "url": "https://github.com/apache/beam/pull/10816#discussion_r378512014", "bodyText": "Moved the code there. The reason I didn't like it is that DoFnSignatures probably when created served the purpose to create signatures from DoFn, while the code I added makes no use of DoFnSignature itself. But there seems to be more code like that already, so I'm fine with that.", "author": "je-ik", "createdAt": "2020-02-12T21:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTA0MQ==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377421041", "bodyText": "Ditto DoFnSignaturesTest (utility methods tests)", "author": "kennknowles", "createdAt": "2020-02-11T02:18:43Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/DoFnFeaturesTest.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core.construction;\n+\n+import static org.apache.beam.sdk.testing.SerializableMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.List;\n+import org.apache.beam.sdk.io.range.OffsetRange;\n+import org.apache.beam.sdk.state.MapState;\n+import org.apache.beam.sdk.state.SetState;\n+import org.apache.beam.sdk.state.StateSpec;\n+import org.apache.beam.sdk.state.StateSpecs;\n+import org.apache.beam.sdk.state.TimeDomain;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.state.TimerSpecs;\n+import org.apache.beam.sdk.state.ValueState;\n+import org.apache.beam.sdk.state.WatermarkHoldState;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.splittabledofn.RestrictionTracker;\n+import org.apache.beam.sdk.transforms.windowing.TimestampCombiner;\n+import org.apache.beam.sdk.values.KV;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.Lists;\n+import org.junit.Test;\n+\n+/** Test suite for {@link DoFnFeatures}. */\n+public class DoFnFeaturesTest {", "originalCommit": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NDMzNA==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377544334", "bodyText": "\ud83d\udc4d", "author": "je-ik", "createdAt": "2020-02-11T10:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTQ1Ng==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377421456", "bodyText": "Passing a raw bool into a function call is not very readable. I suggest splitting into verifyDoFnSupportedForStreaming and verifyDoFnSupportedForBatch. These can each call the common code.", "author": "kennknowles", "createdAt": "2020-02-11T02:21:10Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/BatchStatefulParDoOverrides.java", "diffHunk": "@@ -176,7 +176,7 @@ private MultiOutputOverrideFactory(boolean isFnApi) {\n     public PCollection<OutputT> expand(PCollection<KV<K, InputT>> input) {\n       DoFn<KV<K, InputT>, OutputT> fn = originalParDo.getFn();\n       verifyFnIsStateful(fn);\n-      DataflowRunner.verifyStateSupported(fn);\n+      DataflowRunner.verifyDoFnSupported(fn, false);", "originalCommit": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU0NDUwNg==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377544506", "bodyText": "\ud83d\udc4d", "author": "je-ik", "createdAt": "2020-02-11T10:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMTI2Ng==", "url": "https://github.com/apache/beam/pull/10816#discussion_r378511266", "bodyText": "I added both versions, although the second one verifyDoFnSupportedStreaming is not used. I added that so that the methods are not imbalanced. The streaming case is called from DataflowRunner.verifyDoFnSupported(fn, context.getPipelineOptions().isStreaming()), where it would be weird to do if (context..isStream()) verifyStreaming() else ...", "author": "je-ik", "createdAt": "2020-02-12T21:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMTg2Mg==", "url": "https://github.com/apache/beam/pull/10816#discussion_r377421862", "bodyText": "This is a good example of DoFnFeatures being useful: since \"stateful ParDo\" is really a totally separate primitive, it makes sense to just have a single boolean indicating it. Eventually moving so the different primitives are more clearly split with different URNs would be good.\n(no action for you here - just a positive comment)", "author": "kennknowles", "createdAt": "2020-02-11T02:23:15Z", "path": "runners/google-cloud-dataflow-java/src/main/java/org/apache/beam/runners/dataflow/DataflowPipelineTranslator.java", "diffHunk": "@@ -1224,10 +1225,10 @@ private static void translateFn(\n       Map<TupleTag<?>, Coder<?>> outputCoders,\n       DoFnSchemaInformation doFnSchemaInformation,\n       Map<String, PCollectionView<?>> sideInputMapping) {\n-    DoFnSignature signature = DoFnSignatures.getSignature(fn.getClass());\n \n-    if (signature.usesState() || signature.usesTimers()) {\n-      DataflowRunner.verifyStateSupported(fn);\n+    boolean isStateful = DoFnFeatures.isStateful(fn);", "originalCommit": "85eeb10ff1f788e52028aafce42f80b2731dc8b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9e45f9d8693366d3cf47e26bb031eccef5e2b598", "url": "https://github.com/apache/beam/commit/9e45f9d8693366d3cf47e26bb031eccef5e2b598", "message": "[BEAM-9273] code review - to be squashed", "committedDate": "2020-02-12T21:03:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0Njk4Mg==", "url": "https://github.com/apache/beam/pull/10816#discussion_r379646982", "bodyText": "Nit: there's a lot of logic in this test class. See https://testing.googleblog.com/2014/07/testing-on-toilet-dont-put-logic-in.html\nIt would be better to simply write out the boilerplate for each test, so each test can be read in a straight line with no context needed.", "author": "kennknowles", "createdAt": "2020-02-14T21:13:58Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/reflect/DoFnSignaturesTest.java", "diffHunk": "@@ -1192,6 +1199,239 @@ public void bar(\n     assertThat(params.get(4), instanceOf(TaggedOutputReceiverParameter.class));\n   }\n \n+  private interface FeatureTest {\n+    void test();\n+  }\n+\n+  private static class StatelessDoFn extends DoFn<String, String> implements FeatureTest {\n+    @ProcessElement\n+    public void process(@Element String input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithValueState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<ValueState<String>> state = StateSpecs.value();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithTimers extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @TimerId(\"timer\")\n+    private final TimerSpec spec = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+\n+    @OnTimer(\"timer\")\n+    public void onTimer() {}\n+  }\n+\n+  private static class StatefulWithTimersAndValueState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @TimerId(\"timer\")\n+    private final TimerSpec timer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+    @StateId(\"state\")\n+    private final StateSpec<SetState<String>> state = StateSpecs.set();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+\n+    @OnTimer(\"timer\")\n+    public void onTimer() {}\n+  }\n+\n+  private static class StatefulWithSetState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<SetState<String>> spec = StateSpecs.set();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithMapState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<MapState<String, String>> spec = StateSpecs.map();\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class StatefulWithWatermarkHoldState extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @StateId(\"state\")\n+    private final StateSpec<WatermarkHoldState> spec =\n+        StateSpecs.watermarkStateInternal(TimestampCombiner.LATEST);\n+\n+    @ProcessElement\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private static class RequiresTimeSortedInput extends DoFn<KV<String, String>, String>\n+      implements FeatureTest {\n+    @ProcessElement\n+    @RequiresTimeSortedInput\n+    public void process(@Element KV<String, String> input) {}\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(true));\n+    }\n+  }\n+\n+  private static class Splittable extends DoFn<KV<String, Long>, String> implements FeatureTest {\n+    @ProcessElement\n+    public void process(ProcessContext c, RestrictionTracker<OffsetRange, ?> tracker) {}\n+\n+    @GetInitialRestriction\n+    public OffsetRange getInitialRange(@Element KV<String, Long> element) {\n+      return new OffsetRange(0L, element.getValue());\n+    }\n+\n+    @Override\n+    public void test() {\n+      assertThat(DoFnSignatures.isSplittable(this), SerializableMatchers.equalTo(true));\n+      assertThat(DoFnSignatures.isStateful(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesTimers(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesBagState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesMapState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesSetState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesValueState(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.usesWatermarkHold(this), SerializableMatchers.equalTo(false));\n+      assertThat(DoFnSignatures.requiresTimeSortedInput(this), SerializableMatchers.equalTo(false));\n+    }\n+  }\n+\n+  private final List<FeatureTest> tests =\n+      Lists.newArrayList(\n+          new StatelessDoFn(),\n+          new StatefulWithValueState(),\n+          new StatefulWithTimers(),\n+          new StatefulWithTimersAndValueState(),\n+          new StatefulWithSetState(),\n+          new StatefulWithMapState(),\n+          new StatefulWithWatermarkHoldState(),\n+          new RequiresTimeSortedInput(),\n+          new Splittable());\n+\n+  @Test\n+  public void testAllDoFnFeatures() {\n+    tests.forEach(FeatureTest::test);", "originalCommit": "9e45f9d8693366d3cf47e26bb031eccef5e2b598", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NjkyNw==", "url": "https://github.com/apache/beam/pull/10816#discussion_r379656927", "bodyText": "I wanted to keep the declaration of a class and its features encapsulated in single class. Agree that this doesn't play well with the rest of the DoFnSignaturesTest. But because there is effort in the direction of superseding all this with \"pipeline features\", I think it is fine to keep is as is for now and drop it as part of the effort later.", "author": "je-ik", "createdAt": "2020-02-14T21:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0Njk4Mg=="}], "type": "inlineReview"}]}