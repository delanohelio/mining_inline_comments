{"pr_number": 12990, "pr_title": "[BEAM-9547] Implement dot method for dataframes.", "pr_createdAt": "2020-10-01T16:44:02Z", "pr_url": "https://github.com/apache/beam/pull/12990", "timeline": [{"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7", "url": "https://github.com/apache/beam/commit/bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7", "message": "[BEAM-9547] Implement dot method for dataframes.", "committedDate": "2020-10-01T16:48:44Z", "type": "commit"}, {"oid": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7", "url": "https://github.com/apache/beam/commit/bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7", "message": "[BEAM-9547] Implement dot method for dataframes.", "committedDate": "2020-10-01T16:48:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMDE2OA==", "url": "https://github.com/apache/beam/pull/12990#discussion_r499020168", "bodyText": "nit: this formatting makes it really unclear where the lambda ends. I think this is it? Is this auto formatted? Can the lambda be put on a single line or indented to make this clearer?", "author": "apilloud", "createdAt": "2020-10-02T19:50:28Z", "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -34,6 +34,45 @@ def __array__(self, dtype=None):\n \n   between = frame_base._elementwise_method('between')\n \n+  def dot(self, other):\n+    left = self._expr\n+    if isinstance(other, DeferredSeries):\n+      right = expressions.ComputedExpression(\n+          'to_dataframe',\n+          pd.DataFrame, [other._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Index())\n+      right_is_series = True\n+    elif isinstance(other, DeferredDataFrame):\n+      right = other._expr\n+      right_is_series = False\n+    else:\n+      raise frame_base.WontImplementError('non-deferred result')\n+\n+    dots = expressions.ComputedExpression(\n+        'dot',\n+        # Transpose so we can sum across rows.\n+        lambda left,\n+        right: pd.DataFrame(left @ right).T,", "originalCommit": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDM5NA==", "url": "https://github.com/apache/beam/pull/12990#discussion_r499060394", "bodyText": "Yes, this is the auto-formatter. I'll play around with this.", "author": "robertwb", "createdAt": "2020-10-02T21:35:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMDE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMTQwOA==", "url": "https://github.com/apache/beam/pull/12990#discussion_r499021408", "bodyText": "nit: same thing here, in reverse. Can there be a newline here?", "author": "apilloud", "createdAt": "2020-10-02T19:53:26Z", "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -34,6 +34,45 @@ def __array__(self, dtype=None):\n \n   between = frame_base._elementwise_method('between')\n \n+  def dot(self, other):\n+    left = self._expr\n+    if isinstance(other, DeferredSeries):\n+      right = expressions.ComputedExpression(\n+          'to_dataframe',\n+          pd.DataFrame, [other._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Index())\n+      right_is_series = True\n+    elif isinstance(other, DeferredDataFrame):\n+      right = other._expr\n+      right_is_series = False\n+    else:\n+      raise frame_base.WontImplementError('non-deferred result')\n+\n+    dots = expressions.ComputedExpression(\n+        'dot',\n+        # Transpose so we can sum across rows.\n+        lambda left,\n+        right: pd.DataFrame(left @ right).T,\n+        [left, right],\n+        requires_partition_by=partitionings.Index())\n+    with expressions.allow_non_parallel_operations(True):\n+      sums = expressions.ComputedExpression(\n+          'sum',\n+          lambda dots: dots.sum(), [dots],\n+          requires_partition_by=partitionings.Singleton())\n+\n+      if right_is_series:\n+        result = expressions.ComputedExpression(\n+            'extract',\n+            lambda df: df[0], [sums],", "originalCommit": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDQyOQ==", "url": "https://github.com/apache/beam/pull/12990#discussion_r499060429", "bodyText": "Same.", "author": "robertwb", "createdAt": "2020-10-02T21:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMTQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyOTEyMA==", "url": "https://github.com/apache/beam/pull/12990#discussion_r499029120", "bodyText": "Should this have a isinstance check as well?", "author": "apilloud", "createdAt": "2020-10-02T20:11:55Z", "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -415,6 +453,37 @@ def aggregate(self, func, axis=0, *args, **kwargs):\n       'order-sensitive')\n   diff = frame_base.wont_implement_method('order-sensitive')\n \n+  def dot(self, other):\n+    # We want to broadcast the right hand side to all partitions of the left.\n+    # This is OK, as its index must be the same size as the columns set of self,\n+    # so cannot be too large.\n+    class AsScalar(object):\n+      def __init__(self, value):\n+        self.value = value\n+\n+    if isinstance(other, frame_base.DeferredFrame):\n+      proxy = other._expr.proxy()\n+      with expressions.allow_non_parallel_operations():\n+        side = expressions.ComputedExpression(\n+            'as_scalar',\n+            lambda df: AsScalar(df),\n+            [other._expr],\n+            requires_partition_by=partitionings.Singleton())\n+    else:", "originalCommit": "bd858ebe8d05b354b755b2cb9f5ee6ec5d4602b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDkzNA==", "url": "https://github.com/apache/beam/pull/12990#discussion_r499060934", "bodyText": "This side is all the constant types that pandas may accept.", "author": "robertwb", "createdAt": "2020-10-02T21:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyOTEyMA=="}], "type": "inlineReview"}, {"oid": "a344befcbb8eb03162548e633950c139262f56e3", "url": "https://github.com/apache/beam/commit/a344befcbb8eb03162548e633950c139262f56e3", "message": "better yapf", "committedDate": "2020-10-02T21:39:14Z", "type": "commit"}]}