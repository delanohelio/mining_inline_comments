{"pr_number": 11938, "pr_title": "[BEAM-9577] Remove uses of legacy artifact service in Java.", "pr_createdAt": "2020-06-05T19:11:10Z", "pr_url": "https://github.com/apache/beam/pull/11938", "timeline": [{"oid": "0fbf575abb3ab5e1b258e1046ceba9f693fd35f1", "url": "https://github.com/apache/beam/commit/0fbf575abb3ab5e1b258e1046ceba9f693fd35f1", "message": "[BEAM-9577] Remove uses of legacy artifact service in Java.", "committedDate": "2020-06-11T07:14:41Z", "type": "commit"}, {"oid": "0fbf575abb3ab5e1b258e1046ceba9f693fd35f1", "url": "https://github.com/apache/beam/commit/0fbf575abb3ab5e1b258e1046ceba9f693fd35f1", "message": "[BEAM-9577] Remove uses of legacy artifact service in Java.", "committedDate": "2020-06-11T07:14:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDYwNw==", "url": "https://github.com/apache/beam/pull/11938#discussion_r446390607", "bodyText": "As a followup I'm assuming we can finally deprecate the retrieval token field from the proto and the few places it still exists.", "author": "lukecwik", "createdAt": "2020-06-26T20:17:40Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableRunner.java", "diffHunk": "@@ -188,43 +178,24 @@ public PipelineResult run(Pipeline pipeline) {\n           prepareJobResponse.getArtifactStagingEndpoint();\n       String stagingSessionToken = prepareJobResponse.getStagingSessionToken();\n \n-      List<StagedFile> filesToStage = createFilesToStage(pipelineProto);\n-\n-      String retrievalToken = null;\n       try (CloseableResource<ManagedChannel> artifactChannel =\n           CloseableResource.of(\n               channelFactory.forDescriptor(artifactStagingEndpoint), ManagedChannel::shutdown)) {\n \n-        LOG.debug(\"Actual files staged: {}\", filesToStage);\n-        try {\n-          ArtifactStagingService.offer(\n-              new ArtifactRetrievalService(),\n-              ArtifactStagingServiceGrpc.newStub(artifactChannel.get()),\n-              stagingSessionToken);\n-          retrievalToken = \"\";\n-        } catch (ExecutionException exn) {\n-          if (exn.getCause() instanceof StatusRuntimeException\n-              && ((StatusRuntimeException) exn.getCause()).getStatus().getCode()\n-                  == Status.Code.UNIMPLEMENTED) {\n-            // Attempt legacy staging.\n-            ArtifactServiceStager stager = ArtifactServiceStager.overChannel(artifactChannel.get());\n-            retrievalToken = stager.stage(stagingSessionToken, filesToStage);\n-          } else {\n-            throw exn;\n-          }\n-        }\n+        ArtifactStagingService.offer(\n+            new ArtifactRetrievalService(),\n+            ArtifactStagingServiceGrpc.newStub(artifactChannel.get()),\n+            stagingSessionToken);\n       } catch (CloseableResource.CloseException e) {\n         LOG.warn(\"Error closing artifact staging channel\", e);\n         // CloseExceptions should only be thrown while closing the channel.\n-        checkState(retrievalToken != null);\n       } catch (Exception e) {\n         throw new RuntimeException(\"Error staging files.\", e);\n       }\n \n       RunJobRequest runJobRequest =\n           RunJobRequest.newBuilder()\n               .setPreparationId(prepareJobResponse.getPreparationId())\n-              .setRetrievalToken(retrievalToken)", "originalCommit": "0fbf575abb3ab5e1b258e1046ceba9f693fd35f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}