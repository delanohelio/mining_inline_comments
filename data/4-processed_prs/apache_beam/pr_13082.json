{"pr_number": 13082, "pr_title": "[BEAM-9547] Flesh out dataframe groupby (and related) implementation.", "pr_createdAt": "2020-10-13T00:09:49Z", "pr_url": "https://github.com/apache/beam/pull/13082", "timeline": [{"oid": "a0df3539aafea8f12dece9952d9ded08315d5e08", "url": "https://github.com/apache/beam/commit/a0df3539aafea8f12dece9952d9ded08315d5e08", "message": "Introduce intermediate superclass for both Dataframe and Series.", "committedDate": "2020-10-12T22:57:24Z", "type": "commit"}, {"oid": "164c13f53b977960e9bc4a717145cdca651161ce", "url": "https://github.com/apache/beam/commit/164c13f53b977960e9bc4a717145cdca651161ce", "message": "[BEAM-9547] Flesh out dataframe groupby (and related) implementation.\n\nWhen running https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html\nthis brings up the passed level to over 50% and reduces the number\nof failed to under 20%.", "committedDate": "2020-10-13T00:08:05Z", "type": "commit"}, {"oid": "96e17e174b4e9b2446b90f96eb29859cbf48132f", "url": "https://github.com/apache/beam/commit/96e17e174b4e9b2446b90f96eb29859cbf48132f", "message": "lint", "committedDate": "2020-10-13T00:25:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4OTAxOA==", "url": "https://github.com/apache/beam/pull/13082#discussion_r504989018", "bodyText": "Could you update pandas_doctests_test?  It looks like the skipped DataFrame.groupby tests should pass now, and hopefully the Series.groupby ones as well.", "author": "TheNeuralBit", "createdAt": "2020-10-14T21:42:44Z", "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -27,12 +28,118 @@\n from apache_beam.dataframe import partitionings\n \n \n-@frame_base.DeferredFrame._register_for(pd.Series)\n-class DeferredSeries(frame_base.DeferredFrame):\n+class DeferredDataFrameOrSeries(frame_base.DeferredFrame):\n   def __array__(self, dtype=None):\n     raise frame_base.WontImplementError(\n         'Conversion to a non-deferred a numpy array.')\n \n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def droplevel(self, level, axis):\n+    return frame_base.DeferredFrame.wrap(\n+        expressions.ComputedExpression(\n+            'droplevel',\n+            lambda df: df.droplevel(level, axis=axis), [self._expr],\n+            requires_partition_by=partitionings.Nothing(),\n+            preserves_partition_by=partitionings.Index()\n+            if axis in (1, 'column') else partitionings.Nothing()))\n+\n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def groupby(self, by, level, axis, as_index, group_keys, **kwargs):", "originalCommit": "96e17e174b4e9b2446b90f96eb29859cbf48132f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5OTI5Mw==", "url": "https://github.com/apache/beam/pull/13082#discussion_r505099293", "bodyText": "Ah, yes, will do.", "author": "robertwb", "createdAt": "2020-10-15T00:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4OTAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAyMTYyMw==", "url": "https://github.com/apache/beam/pull/13082#discussion_r505021623", "bodyText": "I was going to suggest you allow tuple here, but after looking into it I realized the pandas groupby intentionally does the same thing, since a tuple could be a field name. TIL\nhttps://github.com/pandas-dev/pandas/blob/d7a5b838d8d6234f6bec5a30bfa33b24bd4afbd9/pandas/core/groupby/grouper.py#L713-L718", "author": "TheNeuralBit", "createdAt": "2020-10-14T22:25:46Z", "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -27,12 +28,118 @@\n from apache_beam.dataframe import partitionings\n \n \n-@frame_base.DeferredFrame._register_for(pd.Series)\n-class DeferredSeries(frame_base.DeferredFrame):\n+class DeferredDataFrameOrSeries(frame_base.DeferredFrame):\n   def __array__(self, dtype=None):\n     raise frame_base.WontImplementError(\n         'Conversion to a non-deferred a numpy array.')\n \n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def droplevel(self, level, axis):\n+    return frame_base.DeferredFrame.wrap(\n+        expressions.ComputedExpression(\n+            'droplevel',\n+            lambda df: df.droplevel(level, axis=axis), [self._expr],\n+            requires_partition_by=partitionings.Nothing(),\n+            preserves_partition_by=partitionings.Index()\n+            if axis in (1, 'column') else partitionings.Nothing()))\n+\n+  @frame_base.args_to_kwargs(pd.DataFrame)\n+  @frame_base.populate_defaults(pd.DataFrame)\n+  def groupby(self, by, level, axis, as_index, group_keys, **kwargs):\n+    if not as_index:\n+      raise NotImplementedError('groupby(as_index=False)')\n+    if not group_keys:\n+      raise NotImplementedError('groupby(group_keys=False)')\n+\n+    if axis in (1, 'columns'):\n+      return _DeferredGroupByCols(\n+          expressions.ComputedExpression(\n+              'groupbycols',\n+              lambda df: df.groupby(by, axis=axis, **kwargs), [self._expr],\n+              requires_partition_by=partitionings.Nothing(),\n+              preserves_partition_by=partitionings.Index()))\n+\n+    if level is None and by is None:\n+      raise TypeError(\"You have to supply one of 'by' and 'level'\")\n+\n+    elif level is not None:\n+      if isinstance(level, (list, tuple)):\n+        levels = level\n+      else:\n+        levels = [level]\n+      all_levels = self._expr.proxy().index.names\n+      levels = [all_levels[i] if isinstance(i, int) else i for i in levels]\n+      levels_to_drop = self._expr.proxy().index.names.difference(levels)\n+      if levels_to_drop:\n+        to_group = self.droplevel(levels_to_drop)._expr\n+      else:\n+        to_group = self._expr\n+\n+    elif callable(by):\n+\n+      def map_index(df):\n+        df = df.copy()\n+        df.index = df.index.map(by)\n+        return df\n+\n+      to_group = expressions.ComputedExpression(\n+          'map_index',\n+          map_index, [self._expr],\n+          requires_partition_by=partitionings.Nothing(),\n+          preserves_partition_by=partitionings.Singleton())\n+\n+    elif isinstance(by, DeferredSeries):\n+\n+      if isinstance(self, DeferredSeries):\n+\n+        def set_index(s, by):\n+          df = pd.DataFrame(s)\n+          df, by = df.align(by, axis=0)\n+          return df.set_index(by).iloc[:, 0]\n+      else:\n+\n+        def set_index(df, by):\n+          df, by = df.align(by, axis=0)\n+          return df.set_index(by)\n+\n+      to_group = expressions.ComputedExpression(\n+          'set_index',\n+          set_index,  #\n+          [self._expr, by._expr],\n+          requires_partition_by=partitionings.Index(),\n+          preserves_partition_by=partitionings.Singleton())\n+\n+    elif isinstance(by, np.ndarray):\n+      raise frame_base.WontImplementError('order sensitive')\n+\n+    else:\n+      if not isinstance(by, list):", "originalCommit": "96e17e174b4e9b2446b90f96eb29859cbf48132f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMjYwOQ==", "url": "https://github.com/apache/beam/pull/13082#discussion_r505032609", "bodyText": "Should we consider implementing this and groups for categorical grouping keys?", "author": "TheNeuralBit", "createdAt": "2020-10-14T22:40:30Z", "path": "sdks/python/apache_beam/dataframe/frames.py", "diffHunk": "@@ -1120,6 +1222,15 @@ def agg(self, fn):\n             requires_partition_by=partitionings.Index(),\n             preserves_partition_by=partitionings.Singleton()))\n \n+  aggregate = agg\n+\n+  first = last = head = tail = frame_base.not_implemented_method(\n+      'order sensitive')\n+\n+  __len__ = frame_base.wont_implement_method('non-deferred')", "originalCommit": "96e17e174b4e9b2446b90f96eb29859cbf48132f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5NzYwMw==", "url": "https://github.com/apache/beam/pull/13082#discussion_r505097603", "bodyText": "Good thought. Dropped a TODO for now.", "author": "robertwb", "createdAt": "2020-10-15T00:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMjYwOQ=="}], "type": "inlineReview"}, {"oid": "84c9d7a402d4be6ef7a80fb8fac1aec0a965b639", "url": "https://github.com/apache/beam/commit/84c9d7a402d4be6ef7a80fb8fac1aec0a965b639", "message": "lint, enable tests, todo", "committedDate": "2020-10-15T00:56:59Z", "type": "commit"}, {"oid": "02d8c0a44b023f8cf52a940db09ac9b44d98c2a1", "url": "https://github.com/apache/beam/commit/02d8c0a44b023f8cf52a940db09ac9b44d98c2a1", "message": "mypy, pickling fix", "committedDate": "2020-10-15T16:56:01Z", "type": "commit"}]}