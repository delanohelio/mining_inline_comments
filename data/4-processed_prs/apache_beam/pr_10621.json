{"pr_number": 10621, "pr_title": "[BEAM-9056] Staging artifacts from environment", "pr_createdAt": "2020-01-17T02:03:18Z", "pr_url": "https://github.com/apache/beam/pull/10621", "timeline": [{"oid": "120d471da5d49e417a3914f5cd6be84a70d30724", "url": "https://github.com/apache/beam/commit/120d471da5d49e417a3914f5cd6be84a70d30724", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-01-28T23:18:39Z", "type": "forcePushed"}, {"oid": "4499912f60b3fe2eb8fb081fa5ad7cbb5cbc292f", "url": "https://github.com/apache/beam/commit/4499912f60b3fe2eb8fb081fa5ad7cbb5cbc292f", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-01-30T00:53:03Z", "type": "forcePushed"}, {"oid": "acdff31a049a8f3627c3a627709372c850ea5e95", "url": "https://github.com/apache/beam/commit/acdff31a049a8f3627c3a627709372c850ea5e95", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-01-30T23:54:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTI2Nw==", "url": "https://github.com/apache/beam/pull/10621#discussion_r376091267", "bodyText": "Path is relative, absolute or either ?", "author": "chamikaramj", "createdAt": "2020-02-06T21:27:26Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.", "originalCommit": "acdff31a049a8f3627c3a627709372c850ea5e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3MzIzNg==", "url": "https://github.com/apache/beam/pull/10621#discussion_r379673236", "bodyText": "I think it would be better to merge comments on model with #10733. Please write comments in #10733 if they're not already resolved there.", "author": "ihji", "createdAt": "2020-02-14T22:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTU1MQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r376091551", "bodyText": "Can you elaborate what this is ? Also do bother of these get set or only one of them ?", "author": "chamikaramj", "createdAt": "2020-02-06T21:28:05Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+  // A generated staged name (no path).\n+  string staged_name = 2;", "originalCommit": "acdff31a049a8f3627c3a627709372c850ea5e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3MzM4Nw==", "url": "https://github.com/apache/beam/pull/10621#discussion_r379673387", "bodyText": "Ditto.", "author": "ihji", "createdAt": "2020-02-14T22:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjM4MA==", "url": "https://github.com/apache/beam/pull/10621#discussion_r376092380", "bodyText": "Please add documentation for this (including properties).", "author": "chamikaramj", "createdAt": "2020-02-06T21:29:57Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -1087,6 +1087,44 @@ message SideInput {\n   FunctionSpec window_mapping_fn = 3;\n }\n \n+message StandardArtifacts {\n+  enum Types {\n+    // A URN for artifacts stored in a local directory.\n+    // payload: ArtifactFilePayload.\n+    FILE     = 0 [(beam_urn) = \"beam:artifact:file:v1\"];\n+    // A URN for artifacts embedded in ArtifactInformation proto.\n+    // payload: raw data bytes.\n+    EMBEDDED = 1 [(beam_urn) = \"beam:artifact:embedded:v1\"];\n+    // A URN for artifacts described by HTTP links.\n+    // payload: a string for an artifact HTTP URL\n+    HTTP     = 2 [(beam_urn) = \"beam:artifact:http:v1\"];\n+    // A URN for artifacts hosted on PYPI.\n+    // artifact_id: a PYPI project name\n+    // version_range: a PYPI compatible version string\n+    // payload: None\n+    PYPI     = 3 [(beam_urn) = \"beam:artifact:pypi:v1\"];\n+    // A URN for artifacts hosted on Maven central.\n+    // artifact_id: [maven group id]:[maven artifact id]\n+    // version_range: a Maven compatible version string\n+    // payload: None\n+    MAVEN    = 4 [(beam_urn) = \"beam:artifact:maven:v1\"];\n+  }\n+}\n+\n+message ArtifactFilePayload {\n+  // A path to an artifact file on a local system.\n+  string local_path = 1;\n+  // A generated staged name (no path).\n+  string staged_name = 2;\n+}\n+\n+message ArtifactInformation {\n+  string urn = 1;\n+  bytes payload = 2;\n+  string artifact_id = 3;\n+  string version_range = 4;", "originalCommit": "acdff31a049a8f3627c3a627709372c850ea5e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3MzQ0NQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r379673445", "bodyText": "Ditto.", "author": "ihji", "createdAt": "2020-02-14T22:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MzgwMQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r376093801", "bodyText": "Please add a TODO to remove this experiment when full solution is fully implemented (for all supported runners).", "author": "chamikaramj", "createdAt": "2020-02-06T21:32:55Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -171,6 +193,83 @@ public static Environment createProcessEnvironment(\n     }\n   }\n \n+  public static Collection<ArtifactInformation> getArtifacts(PipelineOptions options) {\n+    Set<String> pathsToStage = Sets.newHashSet();\n+    List<String> experiments = options.as(ExperimentalOptions.class).getExperiments();\n+    if (experiments != null) {", "originalCommit": "acdff31a049a8f3627c3a627709372c850ea5e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1Njc5OQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r382356799", "bodyText": "done.", "author": "ihji", "createdAt": "2020-02-21T01:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MzgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NjkxOA==", "url": "https://github.com/apache/beam/pull/10621#discussion_r382356918", "bodyText": "done.", "author": "ihji", "createdAt": "2020-02-21T01:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MzgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NDk4Ng==", "url": "https://github.com/apache/beam/pull/10621#discussion_r376094986", "bodyText": "Is this method just to get artifacts from the experiment ? If so please name this method accordingly.", "author": "chamikaramj", "createdAt": "2020-02-06T21:35:25Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -171,6 +193,83 @@ public static Environment createProcessEnvironment(\n     }\n   }\n \n+  public static Collection<ArtifactInformation> getArtifacts(PipelineOptions options) {", "originalCommit": "acdff31a049a8f3627c3a627709372c850ea5e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NTE4Mg==", "url": "https://github.com/apache/beam/pull/10621#discussion_r382355182", "bodyText": "It gets a list of all artifacts from the experiment as well as from ClassLoader. The method was moved from PortableRunner to pre-generate the dependencies (originally the dependencies were calculated when submitting pipeline).", "author": "ihji", "createdAt": "2020-02-21T01:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NDk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NzA1Mw==", "url": "https://github.com/apache/beam/pull/10621#discussion_r382357053", "bodyText": "It gets a list of all artifacts from the experiment as well as from ClassLoader. The method was moved from PortableRunner to pre-generate the dependencies (originally the dependencies were calculated when submitting pipeline).", "author": "ihji", "createdAt": "2020-02-21T01:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NDk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NzA0NQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r376097045", "bodyText": "\"Unsupported artifact type ...\" might be a better error here.", "author": "chamikaramj", "createdAt": "2020-02-06T21:40:08Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableRunner.java", "diffHunk": "@@ -203,11 +146,33 @@ public PipelineResult run(Pipeline pipeline) {\n           prepareJobResponse.getArtifactStagingEndpoint();\n       String stagingSessionToken = prepareJobResponse.getStagingSessionToken();\n \n+      ImmutableList.Builder<StagedFile> filesToStageBuilder = ImmutableList.builder();\n+      for (Map.Entry<String, RunnerApi.Environment> entry :\n+          pipelineProto.getComponents().getEnvironmentsMap().entrySet()) {\n+        for (RunnerApi.ArtifactInformation info : entry.getValue().getDependenciesList()) {\n+          if (BeamUrns.getUrn(RunnerApi.StandardArtifacts.Types.FILE).equals(info.getUrn())) {\n+            RunnerApi.ArtifactFilePayload filePayload;\n+            try {\n+              filePayload = RunnerApi.ArtifactFilePayload.parseFrom(info.getPayload());\n+            } catch (InvalidProtocolBufferException e) {\n+              throw new RuntimeException(\"Error parsing artifact file payload.\", e);\n+            }\n+            filesToStageBuilder.add(\n+                StagedFile.of(new File(filePayload.getLocalPath()), filePayload.getStagedName()));\n+          } else {\n+            throw new RuntimeException(\n+                String.format(\"expect file artifact type but %s\", info.getUrn()));", "originalCommit": "acdff31a049a8f3627c3a627709372c850ea5e95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NDA2MA==", "url": "https://github.com/apache/beam/pull/10621#discussion_r382354060", "bodyText": "done.", "author": "ihji", "createdAt": "2020-02-21T01:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NzA0NQ=="}], "type": "inlineReview"}, {"oid": "0c52b405fb907164127d77baebb12101c5f52664", "url": "https://github.com/apache/beam/commit/0c52b405fb907164127d77baebb12101c5f52664", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-10T23:28:40Z", "type": "forcePushed"}, {"oid": "b2357bd3af92d57682148afedc9cbcc6fde5fd9b", "url": "https://github.com/apache/beam/commit/b2357bd3af92d57682148afedc9cbcc6fde5fd9b", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-14T22:36:21Z", "type": "forcePushed"}, {"oid": "7c878a361d4b249f1277834d14aa0c2e540925cd", "url": "https://github.com/apache/beam/commit/7c878a361d4b249f1277834d14aa0c2e540925cd", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-19T23:44:43Z", "type": "forcePushed"}, {"oid": "303a1ddd056ac97f10f4c694a5ab24e12ef1f044", "url": "https://github.com/apache/beam/commit/303a1ddd056ac97f10f4c694a5ab24e12ef1f044", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-21T01:10:26Z", "type": "forcePushed"}, {"oid": "acb5f3fa282cc1974c5195a48a10cba70b9601c0", "url": "https://github.com/apache/beam/commit/acb5f3fa282cc1974c5195a48a10cba70b9601c0", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-21T01:47:06Z", "type": "forcePushed"}, {"oid": "fd637a856570a644471e9e5b551eaeae79de294f", "url": "https://github.com/apache/beam/commit/fd637a856570a644471e9e5b551eaeae79de294f", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-24T20:55:03Z", "type": "forcePushed"}, {"oid": "91cee049e8ffad3fe78668162903234ef7554c3b", "url": "https://github.com/apache/beam/commit/91cee049e8ffad3fe78668162903234ef7554c3b", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-25T23:30:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3NTg4Ng==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384675886", "bodyText": "Is this the behavior expected by Beam runners (zipping up directories) ?", "author": "chamikaramj", "createdAt": "2020-02-26T18:19:35Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Environments.java", "diffHunk": "@@ -175,6 +197,90 @@ public static Environment createProcessEnvironment(\n     }\n   }\n \n+  public static Collection<ArtifactInformation> getArtifacts(PipelineOptions options) {\n+    Set<String> pathsToStage = Sets.newHashSet();\n+    // TODO(heejong): remove jar_packages experimental flag when cross-language dependency\n+    //   management is implemented for all runners.\n+    List<String> experiments = options.as(ExperimentalOptions.class).getExperiments();\n+    if (experiments != null) {\n+      Optional<String> jarPackages =\n+          experiments.stream()\n+              .filter((String flag) -> flag.startsWith(\"jar_packages=\"))\n+              .findFirst();\n+      jarPackages.ifPresent(\n+          s -> pathsToStage.addAll(Arrays.asList(s.replaceFirst(\"jar_packages=\", \"\").split(\",\"))));\n+    }\n+    List<String> stagingFiles = options.as(PortablePipelineOptions.class).getFilesToStage();\n+    if (stagingFiles == null) {\n+      pathsToStage.addAll(\n+          detectClassPathResourcesToStage(Environments.class.getClassLoader(), options));\n+      if (pathsToStage.isEmpty()) {\n+        throw new IllegalArgumentException(\"No classpath elements found.\");\n+      }\n+      LOG.debug(\n+          \"PortablePipelineOptions.filesToStage was not specified. \"\n+              + \"Defaulting to files from the classpath: {}\",\n+          pathsToStage.size());\n+    } else {\n+      pathsToStage.addAll(stagingFiles);\n+    }\n+\n+    ImmutableList.Builder<ArtifactInformation> filesToStage = ImmutableList.builder();\n+    for (String path : pathsToStage) {\n+      File file = new File(path);\n+      if (new File(path).exists()) {\n+        // Spurious items get added to the classpath. Filter by just those that exist.\n+        if (file.isDirectory()) {\n+          // Zip up directories so we can upload them to the artifact service.", "originalCommit": "91cee049e8ffad3fe78668162903234ef7554c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0OTk0Mg==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384849942", "bodyText": "Looks like this was the previous behavior.", "author": "robertwb", "createdAt": "2020-02-27T00:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3NTg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyOTA1Mw==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384729053", "bodyText": "Probably it's better to explicitly declare the given environment as the default (through an additional argument to registerEnvironment()) instead of assuming first one that was passed to here to be the default.", "author": "chamikaramj", "createdAt": "2020-02-26T19:54:34Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SdkComponents.java", "diffHunk": "@@ -261,14 +263,20 @@ public String registerCoder(Coder<?> coder) throws IOException {\n    * return the same unique ID.\n    */\n   public String registerEnvironment(Environment env) {\n+    String environmentId;\n     String existing = environmentIds.get(env);\n     if (existing != null) {\n-      return existing;\n+      environmentId = existing;\n+    } else {\n+      String name = uniqify(env.getUrn(), environmentIds.values());\n+      environmentIds.put(env, name);\n+      componentsBuilder.putEnvironments(name, env);\n+      environmentId = name;\n     }\n-    String name = uniqify(env.getUrn(), environmentIds.values());\n-    environmentIds.put(env, name);\n-    componentsBuilder.putEnvironments(name, env);\n-    return name;\n+    if (defaultEnvironmentId == null) {", "originalCommit": "91cee049e8ffad3fe78668162903234ef7554c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MTE3MQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384851171", "bodyText": "+1", "author": "robertwb", "createdAt": "2020-02-27T00:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyOTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MzY5OQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r386643699", "bodyText": "Created a separate ticket: https://issues.apache.org/jira/browse/BEAM-9425", "author": "ihji", "createdAt": "2020-03-02T20:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyOTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MjQyNQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r387982425", "bodyText": "Why should this be a separate ticket ? Can't we just change method to registerEnvironment(Environment env, boolean default)\nand change above to\nsdkComponents.registerEnvironment(\nEnvironments.createOrGetDefaultEnvironment(portablePipelineOptions), true);", "author": "chamikaramj", "createdAt": "2020-03-04T22:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyOTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTY5Mw==", "url": "https://github.com/apache/beam/pull/10621#discussion_r388509693", "bodyText": "If we change the signature of registerEnvironment, a number of test files (*TranslationTest, *RunnerTest) also need to be touched. I think it will create unnecessary noise in this PR.", "author": "ihji", "createdAt": "2020-03-05T19:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyOTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1ODc2MQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r388558761", "bodyText": "Ok. Let's still do this immediately after this one though so that we do not forget about it.", "author": "chamikaramj", "createdAt": "2020-03-05T20:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyOTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNDIxNA==", "url": "https://github.com/apache/beam/pull/10621#discussion_r389114214", "bodyText": "This is a case where doing it in a different commit in the same PR could make sense. But I'm OK with deferring as long as it happens soon.", "author": "robertwb", "createdAt": "2020-03-06T19:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyOTA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDY2OQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384850669", "bodyText": "Would this be better placed in createOrGetDefaultEnvironment?", "author": "robertwb", "createdAt": "2020-02-27T00:35:24Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SdkComponents.java", "diffHunk": "@@ -88,11 +88,13 @@ public static SdkComponents create(RunnerApi.Components components) {\n   public static SdkComponents create(PipelineOptions options) {\n     SdkComponents sdkComponents = new SdkComponents(RunnerApi.Components.getDefaultInstance(), \"\");\n     PortablePipelineOptions portablePipelineOptions = options.as(PortablePipelineOptions.class);\n-    sdkComponents.defaultEnvironmentId =\n-        sdkComponents.registerEnvironment(\n-            Environments.createOrGetDefaultEnvironment(\n+    sdkComponents.registerEnvironment(\n+        Environments.createOrGetDefaultEnvironment(\n                 portablePipelineOptions.getDefaultEnvironmentType(),\n-                portablePipelineOptions.getDefaultEnvironmentConfig()));\n+                portablePipelineOptions.getDefaultEnvironmentConfig())\n+            .toBuilder()\n+            .addAllDependencies(Environments.getArtifacts(options))", "originalCommit": "91cee049e8ffad3fe78668162903234ef7554c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTY2OA==", "url": "https://github.com/apache/beam/pull/10621#discussion_r385469668", "bodyText": "agreed. moved to createOrGetDefaultEnvironment.", "author": "ihji", "createdAt": "2020-02-28T01:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MDY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MTgxMw==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384851813", "bodyText": "Perhaps it's worth pulling this out into a separate method?", "author": "robertwb", "createdAt": "2020-02-27T00:39:08Z", "path": "runners/portability/java/src/main/java/org/apache/beam/runners/portability/PortableRunner.java", "diffHunk": "@@ -200,11 +143,44 @@ public PipelineResult run(Pipeline pipeline) {\n           prepareJobResponse.getArtifactStagingEndpoint();\n       String stagingSessionToken = prepareJobResponse.getStagingSessionToken();\n \n+      ImmutableList.Builder<StagedFile> filesToStageBuilder = ImmutableList.builder();", "originalCommit": "91cee049e8ffad3fe78668162903234ef7554c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTc1MQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r385469751", "bodyText": "done.", "author": "ihji", "createdAt": "2020-02-28T01:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MTgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MzA2Nw==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384853067", "bodyText": "Does this actually stage them, or just add them to the returned list? If not, the name and docstring should be updated.", "author": "robertwb", "createdAt": "2020-02-27T00:43:37Z", "path": "sdks/python/apache_beam/runners/portability/stager.py", "diffHunk": "@@ -331,22 +389,23 @@ def _download_file(from_url, to_path):\n   def _is_remote_path(path):\n     return path.find('://') != -1\n \n-  def _stage_jar_packages(self, jar_packages, staging_location, temp_dir):\n-    # type: (...) -> List[str]\n+  @staticmethod\n+  def _stage_jar_packages(jar_packages, temp_dir):", "originalCommit": "91cee049e8ffad3fe78668162903234ef7554c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTgwMA==", "url": "https://github.com/apache/beam/pull/10621#discussion_r385469800", "bodyText": "done.", "author": "ihji", "createdAt": "2020-02-28T01:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MzA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MzA5OQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384853099", "bodyText": "Similarly.", "author": "robertwb", "createdAt": "2020-02-27T00:43:44Z", "path": "sdks/python/apache_beam/runners/portability/stager.py", "diffHunk": "@@ -377,34 +436,33 @@ def _stage_jar_packages(self, jar_packages, staging_location, temp_dir):\n \n     for package in local_packages:\n       basename = os.path.basename(package)\n-      staged_path = FileSystems.join(staging_location, basename)\n-      self.stage_artifact(package, staged_path)\n-      resources.append(basename)\n+      resources.append((package, basename))\n \n     return resources\n \n-  def _stage_extra_packages(self, extra_packages, staging_location, temp_dir):\n-    # type: (...) -> List[str]\n+  @staticmethod\n+  def _stage_extra_packages(extra_packages, temp_dir):", "originalCommit": "91cee049e8ffad3fe78668162903234ef7554c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTgyMQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r385469821", "bodyText": "done.", "author": "ihji", "createdAt": "2020-02-28T01:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MzA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MzMyMQ==", "url": "https://github.com/apache/beam/pull/10621#discussion_r384853321", "bodyText": "same", "author": "robertwb", "createdAt": "2020-02-27T00:44:28Z", "path": "sdks/python/apache_beam/runners/portability/stager.py", "diffHunk": "@@ -547,21 +601,22 @@ def _desired_sdk_filename_in_staging_location(sdk_location):\n     else:\n       return DATAFLOW_SDK_TARBALL_FILE\n \n-  def _stage_beam_sdk(self, sdk_remote_location, staging_location, temp_dir):\n-    # type: (...) -> List[str]\n+  @staticmethod\n+  def _stage_beam_sdk(sdk_remote_location, temp_dir):", "originalCommit": "91cee049e8ffad3fe78668162903234ef7554c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTgzOA==", "url": "https://github.com/apache/beam/pull/10621#discussion_r385469838", "bodyText": "done.", "author": "ihji", "createdAt": "2020-02-28T01:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MzMyMQ=="}], "type": "inlineReview"}, {"oid": "0b15aac649776ab86698330d24031f94f1c955ac", "url": "https://github.com/apache/beam/commit/0b15aac649776ab86698330d24031f94f1c955ac", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-02-28T01:46:26Z", "type": "forcePushed"}, {"oid": "6fce2528b0ff011ff3d416ac9e70c8d7264b1f3c", "url": "https://github.com/apache/beam/commit/6fce2528b0ff011ff3d416ac9e70c8d7264b1f3c", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-03-11T02:25:45Z", "type": "commit"}, {"oid": "6fce2528b0ff011ff3d416ac9e70c8d7264b1f3c", "url": "https://github.com/apache/beam/commit/6fce2528b0ff011ff3d416ac9e70c8d7264b1f3c", "message": "[BEAM-9056] Staging artifacts from environment", "committedDate": "2020-03-11T02:25:45Z", "type": "forcePushed"}]}