{"pr_number": 12770, "pr_title": "[BEAM-10545] Assembled the extension with components", "pr_createdAt": "2020-09-03T20:40:46Z", "pr_url": "https://github.com/apache/beam/pull/12770", "timeline": [{"oid": "e580532d3e8a1f0de8ab5797766ae5a9b96a9a5e", "url": "https://github.com/apache/beam/commit/e580532d3e8a1f0de8ab5797766ae5a9b96a9a5e", "message": "[BEAM-10545] Assembled the extension with components\n\n1. Assembled the side panel widget using all existing components.\n2. Added a final touch with CSS styles for some components.\n3. Added boilerplate to instantiate the side panel from 3 entry points\n   from the jupyterlab workspace.\n4. Minor tweak: added a button that could interrupt the kernel on click.\n   It's rendered when the kernel model is busy executing code for\n   visualization.", "committedDate": "2020-09-03T20:56:23Z", "type": "forcePushed"}, {"oid": "c43ffed31adbe51ca034b1a91b2e9b5458a90afb", "url": "https://github.com/apache/beam/commit/c43ffed31adbe51ca034b1a91b2e9b5458a90afb", "message": "[BEAM-10545] Assembled the extension with components\n\n1. Assembled the side panel widget using all existing components.\n2. Added a final touch with CSS styles for some components.\n3. Added boilerplate to instantiate the side panel from 3 entry points\n   from the jupyterlab workspace.\n4. Minor tweak: added a button that could interrupt the kernel on click.\n   It's rendered when the kernel model is busy executing code for\n   visualization.", "committedDate": "2020-09-08T18:20:25Z", "type": "commit"}, {"oid": "c43ffed31adbe51ca034b1a91b2e9b5458a90afb", "url": "https://github.com/apache/beam/commit/c43ffed31adbe51ca034b1a91b2e9b5458a90afb", "message": "[BEAM-10545] Assembled the extension with components\n\n1. Assembled the side panel widget using all existing components.\n2. Added a final touch with CSS styles for some components.\n3. Added boilerplate to instantiate the side panel from 3 entry points\n   from the jupyterlab workspace.\n4. Minor tweak: added a button that could interrupt the kernel on click.\n   It's rendered when the kernel model is busy executing code for\n   visualization.", "committedDate": "2020-09-08T18:20:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTEzNQ==", "url": "https://github.com/apache/beam/pull/12770#discussion_r485129135", "bodyText": "I would suggest moving this out to a private async method for readability. Since you're already using async/await in the then handler, it seems like it would be most consistent to use it throughout rather than chaining with then and catch.", "author": "prodonjs", "createdAt": "2020-09-08T18:53:31Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/SidePanel.ts", "diffHunk": "@@ -0,0 +1,120 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import {\n+  SessionContext,\n+  ISessionContext,\n+  sessionContextDialogs\n+} from '@jupyterlab/apputils';\n+import { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n+import { ServiceManager } from '@jupyterlab/services';\n+import { Message } from '@lumino/messaging';\n+import { BoxPanel } from '@lumino/widgets';\n+\n+// prettier-ignore\n+import {\n+  InteractiveInspectorWidget\n+} from './inspector/InteractiveInspectorWidget';\n+\n+/**\n+ * The side panel: main user interface of the extension.\n+ *\n+ * Multiple instances of the side panel can be opened at the same time. They\n+ * can be operated independently but sharing the same kernel state if connected\n+ * to the same notebook session model or running kernel instance.\n+ */\n+export class SidePanel extends BoxPanel {\n+  constructor(\n+    manager: ServiceManager.IManager,\n+    rendermime: IRenderMimeRegistry\n+  ) {\n+    super({\n+      direction: 'top-to-bottom',\n+      alignment: 'end'\n+    });\n+    this.id = 'apache-beam-jupyterlab-sidepanel';\n+    this.title.label = 'Interactive Beam Inspector';\n+    this.title.closable = true;\n+\n+    this._sessionContext = new SessionContext({\n+      sessionManager: manager.sessions,\n+      specsManager: manager.kernelspecs,\n+      name: 'Interactive Beam Inspector Session'\n+    });\n+\n+    this._inspector = new InteractiveInspectorWidget(this._sessionContext);\n+    this.addWidget(this._inspector);\n+\n+    void this._sessionContext", "originalCommit": "c43ffed31adbe51ca034b1a91b2e9b5458a90afb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NTAzMg==", "url": "https://github.com/apache/beam/pull/12770#discussion_r485945032", "bodyText": "Thanks! Used async/wait syntax throughly.", "author": "KevinGG", "createdAt": "2020-09-09T21:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTc2NQ==", "url": "https://github.com/apache/beam/pull/12770#discussion_r485129765", "bodyText": "If there is no handling if value is falsy, I would suggest if (!value) return; to eliminate a layer of nesting.", "author": "prodonjs", "createdAt": "2020-09-08T18:54:45Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/SidePanel.ts", "diffHunk": "@@ -0,0 +1,120 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+import {\n+  SessionContext,\n+  ISessionContext,\n+  sessionContextDialogs\n+} from '@jupyterlab/apputils';\n+import { IRenderMimeRegistry } from '@jupyterlab/rendermime';\n+import { ServiceManager } from '@jupyterlab/services';\n+import { Message } from '@lumino/messaging';\n+import { BoxPanel } from '@lumino/widgets';\n+\n+// prettier-ignore\n+import {\n+  InteractiveInspectorWidget\n+} from './inspector/InteractiveInspectorWidget';\n+\n+/**\n+ * The side panel: main user interface of the extension.\n+ *\n+ * Multiple instances of the side panel can be opened at the same time. They\n+ * can be operated independently but sharing the same kernel state if connected\n+ * to the same notebook session model or running kernel instance.\n+ */\n+export class SidePanel extends BoxPanel {\n+  constructor(\n+    manager: ServiceManager.IManager,\n+    rendermime: IRenderMimeRegistry\n+  ) {\n+    super({\n+      direction: 'top-to-bottom',\n+      alignment: 'end'\n+    });\n+    this.id = 'apache-beam-jupyterlab-sidepanel';\n+    this.title.label = 'Interactive Beam Inspector';\n+    this.title.closable = true;\n+\n+    this._sessionContext = new SessionContext({\n+      sessionManager: manager.sessions,\n+      specsManager: manager.kernelspecs,\n+      name: 'Interactive Beam Inspector Session'\n+    });\n+\n+    this._inspector = new InteractiveInspectorWidget(this._sessionContext);\n+    this.addWidget(this._inspector);\n+\n+    void this._sessionContext\n+      .initialize()\n+      .then(async value => {\n+        if (value) {", "originalCommit": "c43ffed31adbe51ca034b1a91b2e9b5458a90afb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NTIxNQ==", "url": "https://github.com/apache/beam/pull/12770#discussion_r485945215", "bodyText": "Inverted the condition check.", "author": "KevinGG", "createdAt": "2020-09-09T21:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMzI3Mg==", "url": "https://github.com/apache/beam/pull/12770#discussion_r485133272", "bodyText": "We ran into this issue with some of our extensions this summer and found that it was best if we referenced JupyterLab's CSS variables for colors where possible so we would be able to support users with different JupyterLab themes.\n\nhttps://jupyterlab.readthedocs.io/en/stable/developer/css.html\nhttps://github.com/jupyterlab/jupyterlab/blob/master/packages/theme-light-extension/style/variables.css", "author": "prodonjs", "createdAt": "2020-09-08T19:00:53Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/style/mdc-theme.css", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/*\n+ * Theme configured from https://rmwc.io/.\n+ */\n+:root {\n+  --mdc-theme-primary: #1a73e8;", "originalCommit": "c43ffed31adbe51ca034b1a91b2e9b5458a90afb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NTM3MQ==", "url": "https://github.com/apache/beam/pull/12770#discussion_r485945371", "bodyText": "Thanks! This is really helpful. I've changed to use the CSS variables defined by Jupyter.", "author": "KevinGG", "createdAt": "2020-09-09T21:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzMzI3Mg=="}], "type": "inlineReview"}, {"oid": "3bdd431fe176330b180791644153e03bb1b18955", "url": "https://github.com/apache/beam/commit/3bdd431fe176330b180791644153e03bb1b18955", "message": "Use async/wait syntax and CSS variables.", "committedDate": "2020-09-09T21:55:21Z", "type": "commit"}, {"oid": "69322c543e5599428a9fa1568ff9df57b3995dc2", "url": "https://github.com/apache/beam/commit/69322c543e5599428a9fa1568ff9df57b3995dc2", "message": "fix the lint", "committedDate": "2020-09-09T23:12:59Z", "type": "commit"}]}