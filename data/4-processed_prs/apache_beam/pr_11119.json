{"pr_number": 11119, "pr_title": "[BEAM-9498] Include descriptor and type of unsupported fields in RowJson exception", "pr_createdAt": "2020-03-13T01:08:25Z", "pr_url": "https://github.com/apache/beam/pull/11119", "timeline": [{"oid": "c5e11c2339a01dd3e56919659473861acc1699a7", "url": "https://github.com/apache/beam/commit/c5e11c2339a01dd3e56919659473861acc1699a7", "message": "Include field name in RowJson error messages", "committedDate": "2020-03-13T00:59:19Z", "type": "commit"}, {"oid": "987e64d156bf21977ebd08d009c46d39e12e4399", "url": "https://github.com/apache/beam/commit/987e64d156bf21977ebd08d009c46d39e12e4399", "message": "Include all unsupported fields in message", "committedDate": "2020-03-13T01:10:04Z", "type": "commit"}, {"oid": "987e64d156bf21977ebd08d009c46d39e12e4399", "url": "https://github.com/apache/beam/commit/987e64d156bf21977ebd08d009c46d39e12e4399", "message": "Include all unsupported fields in message", "committedDate": "2020-03-13T01:10:04Z", "type": "forcePushed"}, {"oid": "55081af605677ce5659d010524e580843ba21aa0", "url": "https://github.com/apache/beam/commit/55081af605677ce5659d010524e580843ba21aa0", "message": "checkstyle", "committedDate": "2020-03-13T23:39:34Z", "type": "commit"}, {"oid": "ce43f37d478fb16073924879e6ddae631a050b7c", "url": "https://github.com/apache/beam/commit/ce43f37d478fb16073924879e6ddae631a050b7c", "message": "spotless", "committedDate": "2020-03-14T00:15:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MDM0NA==", "url": "https://github.com/apache/beam/pull/11119#discussion_r393390344", "bodyText": "nit: drop the variable, it doesn't add value.", "author": "apilloud", "createdAt": "2020-03-17T01:02:14Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -84,41 +85,76 @@\n   private static final ImmutableSet<TypeName> SUPPORTED_TYPES =\n       ImmutableSet.of(BYTE, INT16, INT32, INT64, FLOAT, DOUBLE, BOOLEAN, STRING, DECIMAL);\n \n+  /**\n+   * Throws {@link UnsupportedRowJsonException} if {@code schema} contains an unsupported field\n+   * type.\n+   */\n   public static void verifySchemaSupported(Schema schema) {\n-    schema.getFields().forEach(RowJson::verifyFieldTypeSupported);\n+    ImmutableList<UnsupportedField> unsupportedFields = findUnsupportedFields(schema);\n+    if (!unsupportedFields.isEmpty()) {\n+      throw new UnsupportedRowJsonException(\n+          String.format(\n+              \"Field type%s %s not supported when converting between JSON and Rows. Supported types are: %s\",\n+              unsupportedFields.size() > 1 ? \"s\" : \"\",\n+              unsupportedFields.toString(),\n+              SUPPORTED_TYPES.toString()));\n+    }\n+  }\n+\n+  private static class UnsupportedField {\n+    final String descriptor;\n+    final TypeName typeName;\n+\n+    UnsupportedField(String descriptor, TypeName typeName) {\n+      this.descriptor = descriptor;\n+      this.typeName = typeName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return this.descriptor + \"=\" + this.typeName;\n+    }\n+  }\n+\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Schema schema) {\n+    return schema.getFields().stream()\n+        .flatMap((field) -> findUnsupportedFields(field).stream())\n+        .collect(toImmutableList());\n   }\n \n-  static void verifyFieldTypeSupported(Field field) {\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Field field) {\n     FieldType fieldType = field.getType();", "originalCommit": "ce43f37d478fb16073924879e6ddae631a050b7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyODczMQ==", "url": "https://github.com/apache/beam/pull/11119#discussion_r394028731", "bodyText": "Done! thanks", "author": "TheNeuralBit", "createdAt": "2020-03-17T23:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MDM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTE0OA==", "url": "https://github.com/apache/beam/pull/11119#discussion_r393391148", "bodyText": "nit: drop the variable, it doesn't add value.", "author": "apilloud", "createdAt": "2020-03-17T01:05:31Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/RowJson.java", "diffHunk": "@@ -84,41 +85,76 @@\n   private static final ImmutableSet<TypeName> SUPPORTED_TYPES =\n       ImmutableSet.of(BYTE, INT16, INT32, INT64, FLOAT, DOUBLE, BOOLEAN, STRING, DECIMAL);\n \n+  /**\n+   * Throws {@link UnsupportedRowJsonException} if {@code schema} contains an unsupported field\n+   * type.\n+   */\n   public static void verifySchemaSupported(Schema schema) {\n-    schema.getFields().forEach(RowJson::verifyFieldTypeSupported);\n+    ImmutableList<UnsupportedField> unsupportedFields = findUnsupportedFields(schema);\n+    if (!unsupportedFields.isEmpty()) {\n+      throw new UnsupportedRowJsonException(\n+          String.format(\n+              \"Field type%s %s not supported when converting between JSON and Rows. Supported types are: %s\",\n+              unsupportedFields.size() > 1 ? \"s\" : \"\",\n+              unsupportedFields.toString(),\n+              SUPPORTED_TYPES.toString()));\n+    }\n+  }\n+\n+  private static class UnsupportedField {\n+    final String descriptor;\n+    final TypeName typeName;\n+\n+    UnsupportedField(String descriptor, TypeName typeName) {\n+      this.descriptor = descriptor;\n+      this.typeName = typeName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return this.descriptor + \"=\" + this.typeName;\n+    }\n+  }\n+\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Schema schema) {\n+    return schema.getFields().stream()\n+        .flatMap((field) -> findUnsupportedFields(field).stream())\n+        .collect(toImmutableList());\n   }\n \n-  static void verifyFieldTypeSupported(Field field) {\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(Field field) {\n     FieldType fieldType = field.getType();\n-    verifyFieldTypeSupported(fieldType);\n+    return findUnsupportedFields(fieldType, field.getName());\n   }\n \n-  static void verifyFieldTypeSupported(FieldType fieldType) {\n+  private static ImmutableList<UnsupportedField> findUnsupportedFields(\n+      FieldType fieldType, String fieldName) {\n     TypeName fieldTypeName = fieldType.getTypeName();\n \n     if (fieldTypeName.isCompositeType()) {\n       Schema rowFieldSchema = fieldType.getRowSchema();", "originalCommit": "ce43f37d478fb16073924879e6ddae631a050b7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6f2352bf0d869d0d0bb530c3a32aa14a60b28f59", "url": "https://github.com/apache/beam/commit/6f2352bf0d869d0d0bb530c3a32aa14a60b28f59", "message": "address review comments", "committedDate": "2020-03-17T23:29:33Z", "type": "commit"}]}