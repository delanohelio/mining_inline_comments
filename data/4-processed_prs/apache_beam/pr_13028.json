{"pr_number": 13028, "pr_title": "[BEAM-8017] Plumb errors and remove panics from package graphx", "pr_createdAt": "2020-10-07T10:11:57Z", "pr_url": "https://github.com/apache/beam/pull/13028", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNjQ5Mg==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501236492", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tt.Fatalf(\"Marshal(Marshal(%v)) failed: %v\", test.c, err)\n          \n          \n            \n            \t\t\t\tt.Fatalf(\"Marshal(%v) failed: %v\", test.c, err)", "author": "lostluck", "createdAt": "2020-10-07T18:49:10Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/coder_test.go", "diffHunk": "@@ -107,7 +107,11 @@ func TestMarshalUnmarshalCoders(t *testing.T) {\n \n \tfor _, test := range tests {\n \t\tt.Run(test.name, func(t *testing.T) {\n-\t\t\tcoders, err := graphx.UnmarshalCoders(graphx.MarshalCoders([]*coder.Coder{test.c}))\n+\t\t\tids, marshalCoders, err := graphx.MarshalCoders([]*coder.Coder{test.c})\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatalf(\"Marshal(Marshal(%v)) failed: %v\", test.c, err)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2MzA1Mg==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501263052", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn nil, errors.Errorf(\"Failed to make KV Union coder. Expected CoGBK, got %v\", gbk)\n          \n          \n            \n            \t\treturn nil, errors.Errorf(\"failed to make KV Union coder. Expected CoGBK, got %v\", gbk)", "author": "lostluck", "createdAt": "2020-10-07T19:38:16Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/cogbk.go", "diffHunk": "@@ -70,37 +69,45 @@ const (\n )\n \n // MakeKVUnionCoder returns KV<K,KV<int,[]byte>> for a given CoGBK.\n-func MakeKVUnionCoder(gbk *graph.MultiEdge) *coder.Coder {\n+func MakeKVUnionCoder(gbk *graph.MultiEdge) (*coder.Coder, error) {\n \tif gbk.Op != graph.CoGBK {\n-\t\tpanic(fmt.Sprintf(\"expected CoGBK, got %v\", gbk))\n+\t\treturn nil, errors.Errorf(\"Failed to make KV Union coder. Expected CoGBK, got %v\", gbk)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2MzIyMQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501263221", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn nil, errors.Errorf(\"Failed to make GBK Union coder. Expected CoGBK, got %v\", gbk)\n          \n          \n            \n            \t\treturn nil, errors.Errorf(\"failed to make GBK Union coder. Expected CoGBK, got %v\", gbk)", "author": "lostluck", "createdAt": "2020-10-07T19:38:34Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/cogbk.go", "diffHunk": "@@ -70,37 +69,45 @@ const (\n )\n \n // MakeKVUnionCoder returns KV<K,KV<int,[]byte>> for a given CoGBK.\n-func MakeKVUnionCoder(gbk *graph.MultiEdge) *coder.Coder {\n+func MakeKVUnionCoder(gbk *graph.MultiEdge) (*coder.Coder, error) {\n \tif gbk.Op != graph.CoGBK {\n-\t\tpanic(fmt.Sprintf(\"expected CoGBK, got %v\", gbk))\n+\t\treturn nil, errors.Errorf(\"Failed to make KV Union coder. Expected CoGBK, got %v\", gbk)\n \t}\n \n \tfrom := gbk.Input[0].From\n \tkey := from.Coder.Components[0]\n-\treturn coder.NewKV([]*coder.Coder{key, makeUnionCoder()})\n+\tkvCoder, err := makeUnionCoder()\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"Failed to make KV Union coder.\")\n+\t}\n+\treturn coder.NewKV([]*coder.Coder{key, kvCoder}), nil\n }\n \n // MakeGBKUnionCoder returns CoGBK<K,KV<int,[]byte>> for a given CoGBK.\n-func MakeGBKUnionCoder(gbk *graph.MultiEdge) *coder.Coder {\n+func MakeGBKUnionCoder(gbk *graph.MultiEdge) (*coder.Coder, error) {\n \tif gbk.Op != graph.CoGBK {\n-\t\tpanic(fmt.Sprintf(\"expected CoGBK, got %v\", gbk))\n+\t\treturn nil, errors.Errorf(\"Failed to make GBK Union coder. Expected CoGBK, got %v\", gbk)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2MzM3OA==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501263378", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn nil, errors.Wrapf(err, \"Failed to make GBK Union coder.\")\n          \n          \n            \n            \t\treturn nil, errors.Wrapf(err, \"failed to make GBK Union coder.\")", "author": "lostluck", "createdAt": "2020-10-07T19:38:52Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/cogbk.go", "diffHunk": "@@ -70,37 +69,45 @@ const (\n )\n \n // MakeKVUnionCoder returns KV<K,KV<int,[]byte>> for a given CoGBK.\n-func MakeKVUnionCoder(gbk *graph.MultiEdge) *coder.Coder {\n+func MakeKVUnionCoder(gbk *graph.MultiEdge) (*coder.Coder, error) {\n \tif gbk.Op != graph.CoGBK {\n-\t\tpanic(fmt.Sprintf(\"expected CoGBK, got %v\", gbk))\n+\t\treturn nil, errors.Errorf(\"Failed to make KV Union coder. Expected CoGBK, got %v\", gbk)\n \t}\n \n \tfrom := gbk.Input[0].From\n \tkey := from.Coder.Components[0]\n-\treturn coder.NewKV([]*coder.Coder{key, makeUnionCoder()})\n+\tkvCoder, err := makeUnionCoder()\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"Failed to make KV Union coder.\")\n+\t}\n+\treturn coder.NewKV([]*coder.Coder{key, kvCoder}), nil\n }\n \n // MakeGBKUnionCoder returns CoGBK<K,KV<int,[]byte>> for a given CoGBK.\n-func MakeGBKUnionCoder(gbk *graph.MultiEdge) *coder.Coder {\n+func MakeGBKUnionCoder(gbk *graph.MultiEdge) (*coder.Coder, error) {\n \tif gbk.Op != graph.CoGBK {\n-\t\tpanic(fmt.Sprintf(\"expected CoGBK, got %v\", gbk))\n+\t\treturn nil, errors.Errorf(\"Failed to make GBK Union coder. Expected CoGBK, got %v\", gbk)\n \t}\n \n \tfrom := gbk.Input[0].From\n \tkey := from.Coder.Components[0]\n-\treturn coder.NewCoGBK([]*coder.Coder{key, makeUnionCoder()})\n+\tkvCoder, err := makeUnionCoder()\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"Failed to make GBK Union coder.\")", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDAyOA==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264028", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn nil, errors.Errorf(\"Failed to encode DoFn %v, missing fn\", u)\n          \n          \n            \n            \t\treturn nil, errors.Errorf(\"failed to encode DoFn %v, missing fn\", u)", "author": "lostluck", "createdAt": "2020-10-07T19:40:08Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/serialize.go", "diffHunk": "@@ -252,7 +255,7 @@ func encodeFn(u *graph.Fn) (*v1pb.Fn, error) {\n \t\treturn &v1pb.Fn{Type: typ, Opt: string(data)}, nil\n \n \tdefault:\n-\t\tpanic(fmt.Sprintf(\"Failed to encode DoFn %v, missing fn\", u))\n+\t\treturn nil, errors.Errorf(\"Failed to encode DoFn %v, missing fn\", u)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDIwNg==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn nil, errors.Errorf(\"Unsupported environment %v\", urn)\n          \n          \n            \n            \t\treturn nil, errors.Errorf(\"unsupported environment %v\", urn)", "author": "lostluck", "createdAt": "2020-10-07T19:40:27Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -77,12 +77,12 @@ func goCapabilities() []string {\n }\n \n // CreateEnvironment produces the appropriate payload for the type of environment.\n-func CreateEnvironment(ctx context.Context, urn string, extractEnvironmentConfig func(context.Context) string) *pipepb.Environment {\n+func CreateEnvironment(ctx context.Context, urn string, extractEnvironmentConfig func(context.Context) string) (*pipepb.Environment, error) {\n \tvar serializedPayload []byte\n \tswitch urn {\n \tcase \"beam:env:process:v1\":\n \t\t// TODO Support process based SDK Harness.\n-\t\tpanic(fmt.Sprintf(\"Unsupported environment %v\", urn))\n+\t\treturn nil, errors.Errorf(\"Unsupported environment %v\", urn)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDM0OA==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"Failed to add scope tree: %v\", s)\n          \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"failed to add scope tree: %v\", s)", "author": "lostluck", "createdAt": "2020-10-07T19:40:43Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -184,18 +190,26 @@ func (m *marshaller) getRequirements() []string {\n \treturn reqs\n }\n \n-func (m *marshaller) addScopeTree(s *ScopeTree) string {\n+func (m *marshaller) addScopeTree(s *ScopeTree) (string, error) {\n \tid := scopeID(s.Scope.Scope)\n \tif _, exists := m.transforms[id]; exists {\n-\t\treturn id\n+\t\treturn id, nil\n \t}\n \n \tvar subtransforms []string\n \tfor _, edge := range s.Edges {\n-\t\tsubtransforms = append(subtransforms, m.addMultiEdge(edge)...)\n+\t\tids, err := m.addMultiEdge(edge)\n+\t\tif err != nil {\n+\t\t\treturn \"\", errors.Wrapf(err, \"Failed to add scope tree: %v\", s)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDQzMQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264431", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"Failed to add scope tree: %v\", s)\n          \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"failed to add scope tree: %v\", s)", "author": "lostluck", "createdAt": "2020-10-07T19:40:52Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -184,18 +190,26 @@ func (m *marshaller) getRequirements() []string {\n \treturn reqs\n }\n \n-func (m *marshaller) addScopeTree(s *ScopeTree) string {\n+func (m *marshaller) addScopeTree(s *ScopeTree) (string, error) {\n \tid := scopeID(s.Scope.Scope)\n \tif _, exists := m.transforms[id]; exists {\n-\t\treturn id\n+\t\treturn id, nil\n \t}\n \n \tvar subtransforms []string\n \tfor _, edge := range s.Edges {\n-\t\tsubtransforms = append(subtransforms, m.addMultiEdge(edge)...)\n+\t\tids, err := m.addMultiEdge(edge)\n+\t\tif err != nil {\n+\t\t\treturn \"\", errors.Wrapf(err, \"Failed to add scope tree: %v\", s)\n+\t\t}\n+\t\tsubtransforms = append(subtransforms, ids...)\n \t}\n \tfor _, tree := range s.Children {\n-\t\tsubtransforms = append(subtransforms, m.addScopeTree(tree))\n+\t\tid, err := m.addScopeTree(tree)\n+\t\tif err != nil {\n+\t\t\treturn \"\", errors.Wrapf(err, \"Failed to add scope tree: %v\", s)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDUwMQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"\", errors.Wrapf(err, \"Failed to add socpe tree: %v\", s)\n          \n          \n            \n            \t\treturn \"\", errors.Wrapf(err, \"failed to add socpe tree: %v\", s)", "author": "lostluck", "createdAt": "2020-10-07T19:41:02Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -204,60 +218,90 @@ func (m *marshaller) addScopeTree(s *ScopeTree) string {\n \t\tEnvironmentId: m.addDefaultEnv(),\n \t}\n \n-\tm.updateIfCombineComposite(s, transform)\n+\tif err := m.updateIfCombineComposite(s, transform); err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"Failed to add socpe tree: %v\", s)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDU5NQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264595", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn errors.Wrapf(err, \"Failed to update PTransform spec: %v\", transform)\n          \n          \n            \n            \t\treturn errors.Wrapf(err, \"failed to update PTransform spec: %v\", transform)", "author": "lostluck", "createdAt": "2020-10-07T19:41:12Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -204,60 +218,90 @@ func (m *marshaller) addScopeTree(s *ScopeTree) string {\n \t\tEnvironmentId: m.addDefaultEnv(),\n \t}\n \n-\tm.updateIfCombineComposite(s, transform)\n+\tif err := m.updateIfCombineComposite(s, transform); err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"Failed to add socpe tree: %v\", s)\n+\t}\n \n \tm.transforms[id] = transform\n-\treturn id\n+\treturn id, nil\n }\n \n // updateIfCombineComposite examines the scope tree and sets the PTransform Spec\n // to be a CombinePerKey with a CombinePayload if it's a liftable composite.\n // Beam Portability requires that composites contain an implementation for runners\n // that don't understand the URN and Payload, which this lightly checks for.\n-func (m *marshaller) updateIfCombineComposite(s *ScopeTree, transform *pipepb.PTransform) {\n+func (m *marshaller) updateIfCombineComposite(s *ScopeTree, transform *pipepb.PTransform) error {\n \tif s.Scope.Name != graph.CombinePerKeyScope ||\n \t\tlen(s.Edges) != 2 ||\n \t\tlen(s.Edges[0].Edge.Input) != 1 ||\n \t\tlen(s.Edges[1].Edge.Output) != 1 ||\n \t\ts.Edges[1].Edge.Op != graph.Combine {\n-\t\treturn\n+\t\treturn nil\n \t}\n \n \tedge := s.Edges[1].Edge\n-\tacID := m.coders.Add(edge.AccumCoder)\n+\tacID, err := m.coders.Add(edge.AccumCoder)\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"Failed to update PTransform spec: %v\", transform)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDcxMw==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264713", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn errors.Wrapf(err, \"Failed to update PTransform spec: %v\", transform)\n          \n          \n            \n            \t\treturn errors.Wrapf(err, \"failed to update PTransform spec: %v\", transform)", "author": "lostluck", "createdAt": "2020-10-07T19:41:24Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -204,60 +218,90 @@ func (m *marshaller) addScopeTree(s *ScopeTree) string {\n \t\tEnvironmentId: m.addDefaultEnv(),\n \t}\n \n-\tm.updateIfCombineComposite(s, transform)\n+\tif err := m.updateIfCombineComposite(s, transform); err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"Failed to add socpe tree: %v\", s)\n+\t}\n \n \tm.transforms[id] = transform\n-\treturn id\n+\treturn id, nil\n }\n \n // updateIfCombineComposite examines the scope tree and sets the PTransform Spec\n // to be a CombinePerKey with a CombinePayload if it's a liftable composite.\n // Beam Portability requires that composites contain an implementation for runners\n // that don't understand the URN and Payload, which this lightly checks for.\n-func (m *marshaller) updateIfCombineComposite(s *ScopeTree, transform *pipepb.PTransform) {\n+func (m *marshaller) updateIfCombineComposite(s *ScopeTree, transform *pipepb.PTransform) error {\n \tif s.Scope.Name != graph.CombinePerKeyScope ||\n \t\tlen(s.Edges) != 2 ||\n \t\tlen(s.Edges[0].Edge.Input) != 1 ||\n \t\tlen(s.Edges[1].Edge.Output) != 1 ||\n \t\ts.Edges[1].Edge.Op != graph.Combine {\n-\t\treturn\n+\t\treturn nil\n \t}\n \n \tedge := s.Edges[1].Edge\n-\tacID := m.coders.Add(edge.AccumCoder)\n+\tacID, err := m.coders.Add(edge.AccumCoder)\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"Failed to update PTransform spec: %v\", transform)\n+\t}\n+\tmustEncodeMultiEdge, err := mustEncodeMultiEdgeBase64(edge)\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"Failed to update PTransform spec: %v\", transform)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDc2OA==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264768", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \treturn errors.Wrapf(err, \"Failed to add input kind: %v\", edge)\n          \n          \n            \n            \treturn errors.Wrapf(err, \"failed to add input kind: %v\", edge)", "author": "lostluck", "createdAt": "2020-10-07T19:41:32Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -204,60 +218,90 @@ func (m *marshaller) addScopeTree(s *ScopeTree) string {\n \t\tEnvironmentId: m.addDefaultEnv(),\n \t}\n \n-\tm.updateIfCombineComposite(s, transform)\n+\tif err := m.updateIfCombineComposite(s, transform); err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"Failed to add socpe tree: %v\", s)\n+\t}\n \n \tm.transforms[id] = transform\n-\treturn id\n+\treturn id, nil\n }\n \n // updateIfCombineComposite examines the scope tree and sets the PTransform Spec\n // to be a CombinePerKey with a CombinePayload if it's a liftable composite.\n // Beam Portability requires that composites contain an implementation for runners\n // that don't understand the URN and Payload, which this lightly checks for.\n-func (m *marshaller) updateIfCombineComposite(s *ScopeTree, transform *pipepb.PTransform) {\n+func (m *marshaller) updateIfCombineComposite(s *ScopeTree, transform *pipepb.PTransform) error {\n \tif s.Scope.Name != graph.CombinePerKeyScope ||\n \t\tlen(s.Edges) != 2 ||\n \t\tlen(s.Edges[0].Edge.Input) != 1 ||\n \t\tlen(s.Edges[1].Edge.Output) != 1 ||\n \t\ts.Edges[1].Edge.Op != graph.Combine {\n-\t\treturn\n+\t\treturn nil\n \t}\n \n \tedge := s.Edges[1].Edge\n-\tacID := m.coders.Add(edge.AccumCoder)\n+\tacID, err := m.coders.Add(edge.AccumCoder)\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"Failed to update PTransform spec: %v\", transform)\n+\t}\n+\tmustEncodeMultiEdge, err := mustEncodeMultiEdgeBase64(edge)\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"Failed to update PTransform spec: %v\", transform)\n+\t}\n \tpayload := &pipepb.CombinePayload{\n \t\tCombineFn: &pipepb.FunctionSpec{\n \t\t\tUrn:     URNDoFn,\n-\t\t\tPayload: []byte(mustEncodeMultiEdgeBase64(edge)),\n+\t\t\tPayload: []byte(mustEncodeMultiEdge),\n \t\t},\n \t\tAccumulatorCoderId: acID,\n \t}\n \ttransform.Spec = &pipepb.FunctionSpec{Urn: URNCombinePerKey, Payload: protox.MustEncode(payload)}\n+\treturn nil\n+}\n+\n+func newAddMultiEdgeError(err error, edge NamedEdge) error {\n+\treturn errors.Wrapf(err, \"Failed to add input kind: %v\", edge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NDk3Mw==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501264973", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\treturn nil, errors.Errorf(\"Not implemented\")\n          \n          \n            \n            \t\t\t\treturn nil, errors.Errorf(\"not implemented\")", "author": "lostluck", "createdAt": "2020-10-07T19:41:52Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -322,31 +372,44 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t\t\t\t}\n \n \t\t\tcase graph.Map, graph.MultiMap:\n-\t\t\t\tpanic(\"NYI\")\n+\t\t\t\treturn nil, errors.Errorf(\"Not implemented\")", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NTA0Mg==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501265042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\treturn nil, errors.Errorf(\"Unexpected input kind: %v\", edge)\n          \n          \n            \n            \t\t\t\treturn nil, errors.Errorf(\"unexpected input kind: %v\", edge)", "author": "lostluck", "createdAt": "2020-10-07T19:42:01Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -322,31 +372,44 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t\t\t\t}\n \n \t\t\tcase graph.Map, graph.MultiMap:\n-\t\t\t\tpanic(\"NYI\")\n+\t\t\t\treturn nil, errors.Errorf(\"Not implemented\")\n \n \t\t\tdefault:\n-\t\t\t\tpanic(fmt.Sprintf(\"unexpected input kind: %v\", edge))\n+\t\t\t\treturn nil, errors.Errorf(\"Unexpected input kind: %v\", edge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NTIxMg==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501265212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\terr := errors.Errorf(\"Unexpected opcode: %v\", edge.Edge.Op)\n          \n          \n            \n            \t\terr := errors.Errorf(\"unexpected opcode: %v\", edge.Edge.Op)", "author": "lostluck", "createdAt": "2020-10-07T19:42:20Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -358,16 +421,21 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t\tspec = &pipepb.FunctionSpec{Urn: URNGBK}\n \n \tcase graph.WindowInto:\n+\t\twindowFn, err := makeWindowFn(edge.Edge.WindowFn)\n+\t\tif err != nil {\n+\t\t\treturn nil, newAddMultiEdgeError(err, edge)\n+\t\t}\n \t\tpayload := &pipepb.WindowIntoPayload{\n-\t\t\tWindowFn: makeWindowFn(edge.Edge.WindowFn),\n+\t\t\tWindowFn: windowFn,\n \t\t}\n \t\tspec = &pipepb.FunctionSpec{Urn: URNWindow, Payload: protox.MustEncode(payload)}\n \n \tcase graph.External:\n \t\tspec = &pipepb.FunctionSpec{Urn: edge.Edge.Payload.URN, Payload: edge.Edge.Payload.Data}\n \n \tdefault:\n-\t\tpanic(fmt.Sprintf(\"Unexpected opcode: %v\", edge.Edge.Op))\n+\t\terr := errors.Errorf(\"Unexpected opcode: %v\", edge.Edge.Op)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NTU2MQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501265561", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)\n          \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"failed to expand cross language transform for edge: %v\", namedEdge)", "author": "lostluck", "createdAt": "2020-10-07T19:43:04Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -384,17 +452,19 @@ func (m *marshaller) addMultiEdge(edge NamedEdge) []string {\n \t}\n \tm.transforms[id] = transform\n \tallPIds = append(allPIds, id)\n-\treturn allPIds\n+\treturn allPIds, nil\n }\n \n-func (m *marshaller) expandCrossLanguage(namedEdge NamedEdge) string {\n+func (m *marshaller) expandCrossLanguage(namedEdge NamedEdge) (string, error) {\n \tedge := namedEdge.Edge\n \tid := edgeID(edge)\n \n \tinputs := make(map[string]string)\n \n \tfor tag, n := range ExternalInputs(edge) {\n-\t\tm.addNode(n)\n+\t\tif _, err := m.addNode(n); err != nil {\n+\t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NTY2Mw==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501265663", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)\n          \n          \n            \n            \t\t\t\treturn \"\", errors.Wrapf(err, \"failed to expand cross language transform for edge: %v\", namedEdge)", "author": "lostluck", "createdAt": "2020-10-07T19:43:18Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -420,33 +490,58 @@ func (m *marshaller) expandCrossLanguage(namedEdge NamedEdge) string {\n \t\t// map consumers of these outputs to the expanded transform's outputs.\n \t\toutputs := make(map[string]string)\n \t\tfor i, out := range edge.Output {\n-\t\t\tm.addNode(out.To)\n+\t\t\tif _, err := m.addNode(out.To); err != nil {\n+\t\t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NTczNQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501265735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)\n          \n          \n            \n            \t\t\treturn \"\", errors.Wrapf(err, \"failed to expand cross language transform for edge: %v\", namedEdge)", "author": "lostluck", "createdAt": "2020-10-07T19:43:26Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -420,33 +490,58 @@ func (m *marshaller) expandCrossLanguage(namedEdge NamedEdge) string {\n \t\t// map consumers of these outputs to the expanded transform's outputs.\n \t\toutputs := make(map[string]string)\n \t\tfor i, out := range edge.Output {\n-\t\t\tm.addNode(out.To)\n+\t\t\tif _, err := m.addNode(out.To); err != nil {\n+\t\t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)\n+\t\t\t}\n \t\t\toutputs[fmt.Sprintf(\"i%v\", i)] = nodeID(out.To)\n \t\t}\n \t\ttransform.Outputs = outputs\n-\t\ttransform.EnvironmentId = ExpandedTransform(edge.External.Expanded).EnvironmentId\n+\t\tenvironment, err := ExpandedTransform(edge.External.Expanded)\n+\t\tif err != nil {\n+\t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NTg3MQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501265871", "bodyText": "There's a lot of repetition in this function around the error handler. We can reduce that.\nMake an anonymous helper function at the top of the function:\nhandleErr := func(err) (string, error) {\n\t\treturn \"\", errors.Wrapf(err, \"failed to expand CoGBK transform for edge: %v\", edge)\n}\n\nAnd then replace the repeated return lines with:\n  return handleErr(err)", "author": "lostluck", "createdAt": "2020-10-07T19:43:40Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -420,33 +490,58 @@ func (m *marshaller) expandCrossLanguage(namedEdge NamedEdge) string {\n \t\t// map consumers of these outputs to the expanded transform's outputs.\n \t\toutputs := make(map[string]string)\n \t\tfor i, out := range edge.Output {\n-\t\t\tm.addNode(out.To)\n+\t\t\tif _, err := m.addNode(out.To); err != nil {\n+\t\t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)\n+\t\t\t}\n \t\t\toutputs[fmt.Sprintf(\"i%v\", i)] = nodeID(out.To)\n \t\t}\n \t\ttransform.Outputs = outputs\n-\t\ttransform.EnvironmentId = ExpandedTransform(edge.External.Expanded).EnvironmentId\n+\t\tenvironment, err := ExpandedTransform(edge.External.Expanded)\n+\t\tif err != nil {\n+\t\t\treturn \"\", errors.Wrapf(err, \"Failed to expand cross language transform for edge: %v\", namedEdge)\n+\t\t}\n+\t\ttransform.EnvironmentId = environment.EnvironmentId\n \t}\n \n \tm.transforms[id] = transform\n-\treturn id\n+\treturn id, nil\n }\n \n-func (m *marshaller) expandCoGBK(edge NamedEdge) string {\n+func (m *marshaller) expandCoGBK(edge NamedEdge) (string, error) {\n \t// TODO(BEAM-490): replace once CoGBK is a primitive. For now, we have to translate\n \t// CoGBK with multiple PCollections as described in cogbk.go.\n \n \tid := edgeID(edge.Edge)\n-\tkvCoderID := m.coders.Add(MakeKVUnionCoder(edge.Edge))\n-\tgbkCoderID := m.coders.Add(MakeGBKUnionCoder(edge.Edge))\n+\tkvCoder, err := MakeKVUnionCoder(edge.Edge)\n+\tif err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"Fail to expand CoGBK transform for edge: %v\", edge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5MzcxMw==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501393713", "bodyText": "thanks, this is a good catch, I also create a anonymous function to return errors from addMultiEdge method rather than create a named helper function for the same purpose.", "author": "milantracy", "createdAt": "2020-10-08T01:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI2NTg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MDI0NQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501270245", "bodyText": "Please use the same anon-function approach here to reduce repetition.", "author": "lostluck", "createdAt": "2020-10-07T19:51:50Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -569,36 +670,59 @@ func (m *marshaller) expandCoGBK(edge NamedEdge) string {\n // User code is able to write reshards, but it's easier to access\n // the window coders framework side, which is critical for the reshard\n // to function with unbounded inputs.\n-func (m *marshaller) expandReshuffle(edge NamedEdge) string {\n+func (m *marshaller) expandReshuffle(edge NamedEdge) (string, error) {\n \tid := edgeID(edge.Edge)\n-\tvar kvCoderID, gbkCoderID string\n-\t{\n-\t\tkv := makeUnionCoder()\n-\t\tkvCoderID = m.coders.Add(kv)\n-\t\tgbkCoderID = m.coders.Add(coder.NewCoGBK(kv.Components))\n+\tkvCoder, err := makeUnionCoder()\n+\tif err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"Fail to expand Reshuffle transform for edge: %v\", edge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MDU1NQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501270555", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \twindowingStrategyId, err := m.addWindowingStrategy(n.WindowingStrategy())\n          \n          \n            \n            \twindowingStrategyId, err := m.addWindowingStrategy(n.WindowingStrategy())", "author": "lostluck", "createdAt": "2020-10-07T19:52:25Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -699,27 +828,38 @@ func (m *marshaller) expandReshuffle(edge NamedEdge) string {\n \t\t},\n \t\tEnvironmentId: m.addDefaultEnv(),\n \t}\n-\treturn reshuffleID\n+\treturn reshuffleID, nil\n }\n \n-func (m *marshaller) addNode(n *graph.Node) string {\n+func (m *marshaller) addNode(n *graph.Node) (string, error) {\n \tid := nodeID(n)\n \tif _, exists := m.pcollections[id]; exists {\n-\t\treturn id\n+\t\treturn id, nil\n \t}\n \t// TODO(herohde) 11/15/2017: expose UniqueName to user.\n-\treturn m.makeNode(id, m.coders.Add(n.Coder), n)\n+\tcid, err := m.coders.Add(n.Coder)\n+\tif err != nil {\n+\t\treturn \"\", err\n+\t}\n+\treturn m.makeNode(id, cid, n)\n }\n \n-func (m *marshaller) makeNode(id, cid string, n *graph.Node) string {\n+func (m *marshaller) makeNode(id, cid string, n *graph.Node) (string, error) {\n+\n+\twindowingStrategyId, err := m.addWindowingStrategy(n.WindowingStrategy())\n+", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MDkyOA==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501270928", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \treturn m.internWindowingStrategy(ws), nil\n          \n          \n            \n            \n          \n          \n            \n            }\n          \n          \n            \n            \treturn m.internWindowingStrategy(ws), nil\n          \n          \n            \n            }", "author": "lostluck", "createdAt": "2020-10-07T19:53:07Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -737,10 +877,14 @@ func (m *marshaller) addDefaultEnv() string {\n \treturn id\n }\n \n-func (m *marshaller) addWindowingStrategy(w *window.WindowingStrategy) string {\n-\tws := marshalWindowingStrategy(m.coders, w)\n+func (m *marshaller) addWindowingStrategy(w *window.WindowingStrategy) (string, error) {\n+\tws, err := marshalWindowingStrategy(m.coders, w)\n+\tif err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"Failed to add window strategy %v\", w)\n+\t}\n \tws.EnvironmentId = m.addDefaultEnv()\n-\treturn m.internWindowingStrategy(ws)\n+\treturn m.internWindowingStrategy(ws), nil\n+\n }", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MTE4OQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501271189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn nil, errors.Errorf(\"Unexpected windowing strategy: %v\", w)\n          \n          \n            \n            \t\treturn nil, errors.Errorf(\"unexpected windowing strategy: %v\", w)", "author": "lostluck", "createdAt": "2020-10-07T19:53:36Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -809,32 +965,32 @@ func makeWindowFn(w *window.Fn) *pipepb.FunctionSpec {\n \t\t\t\t\tGapSize: ptypes.DurationProto(w.Gap),\n \t\t\t\t},\n \t\t\t),\n-\t\t}\n+\t\t}, nil\n \tdefault:\n-\t\tpanic(fmt.Sprintf(\"Unexpected windowing strategy: %v\", w))\n+\t\treturn nil, errors.Errorf(\"Unexpected windowing strategy: %v\", w)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MTI1MQ==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501271251", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn nil, errors.Errorf(\"Unexpected windowing strategy: %v\", w)\n          \n          \n            \n            \t\treturn nil, errors.Errorf(\"unexpected windowing strategy: %v\", w)", "author": "lostluck", "createdAt": "2020-10-07T19:53:44Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -809,32 +965,32 @@ func makeWindowFn(w *window.Fn) *pipepb.FunctionSpec {\n \t\t\t\t\tGapSize: ptypes.DurationProto(w.Gap),\n \t\t\t\t},\n \t\t\t),\n-\t\t}\n+\t\t}, nil\n \tdefault:\n-\t\tpanic(fmt.Sprintf(\"Unexpected windowing strategy: %v\", w))\n+\t\treturn nil, errors.Errorf(\"Unexpected windowing strategy: %v\", w)\n \t}\n }\n \n-func makeWindowCoder(w *window.Fn) *coder.WindowCoder {\n+func makeWindowCoder(w *window.Fn) (*coder.WindowCoder, error) {\n \tswitch w.Kind {\n \tcase window.GlobalWindows:\n-\t\treturn coder.NewGlobalWindow()\n+\t\treturn coder.NewGlobalWindow(), nil\n \tcase window.FixedWindows, window.SlidingWindows, URNSlidingWindowsWindowFn:\n-\t\treturn coder.NewIntervalWindow()\n+\t\treturn coder.NewIntervalWindow(), nil\n \tdefault:\n-\t\tpanic(fmt.Sprintf(\"Unexpected windowing strategy: %v\", w))\n+\t\treturn nil, errors.Errorf(\"Unexpected windowing strategy: %v\", w)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MTMyMA==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501271320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"\", errors.Wrapf(err, \"Failed to serialize %v\", edge)\n          \n          \n            \n            \t\treturn \"\", errors.Wrapf(err, \"failed to serialize %v\", edge)", "author": "lostluck", "createdAt": "2020-10-07T19:53:53Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -809,32 +965,32 @@ func makeWindowFn(w *window.Fn) *pipepb.FunctionSpec {\n \t\t\t\t\tGapSize: ptypes.DurationProto(w.Gap),\n \t\t\t\t},\n \t\t\t),\n-\t\t}\n+\t\t}, nil\n \tdefault:\n-\t\tpanic(fmt.Sprintf(\"Unexpected windowing strategy: %v\", w))\n+\t\treturn nil, errors.Errorf(\"Unexpected windowing strategy: %v\", w)\n \t}\n }\n \n-func makeWindowCoder(w *window.Fn) *coder.WindowCoder {\n+func makeWindowCoder(w *window.Fn) (*coder.WindowCoder, error) {\n \tswitch w.Kind {\n \tcase window.GlobalWindows:\n-\t\treturn coder.NewGlobalWindow()\n+\t\treturn coder.NewGlobalWindow(), nil\n \tcase window.FixedWindows, window.SlidingWindows, URNSlidingWindowsWindowFn:\n-\t\treturn coder.NewIntervalWindow()\n+\t\treturn coder.NewIntervalWindow(), nil\n \tdefault:\n-\t\tpanic(fmt.Sprintf(\"Unexpected windowing strategy: %v\", w))\n+\t\treturn nil, errors.Errorf(\"Unexpected windowing strategy: %v\", w)\n \t}\n }\n \n-func mustEncodeMultiEdgeBase64(edge *graph.MultiEdge) string {\n+func mustEncodeMultiEdgeBase64(edge *graph.MultiEdge) (string, error) {\n \tref, err := EncodeMultiEdge(edge)\n \tif err != nil {\n-\t\tpanic(errors.Wrapf(err, \"Failed to serialize %v\", edge))\n+\t\treturn \"\", errors.Wrapf(err, \"Failed to serialize %v\", edge)", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MTUxNw==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501271517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tgot, err := ExpandedTransform(exp)\n          \n          \n            \n            \n          \n          \n            \n            \t\tif err != nil {\n          \n          \n            \n            \t\t\tt.Fatal(err)\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tgot, err := ExpandedTransform(exp)\n          \n          \n            \n            \t\tif err != nil {\n          \n          \n            \n            \t\t\tt.Fatal(err)\n          \n          \n            \n            \t\t}", "author": "lostluck", "createdAt": "2020-10-07T19:54:14Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/xlang_test.go", "diffHunk": "@@ -156,7 +156,11 @@ func TestExpandedTransform(t *testing.T) {\n \t\twant := newTransform(\"x\")\n \t\texp := &graph.ExpandedTransform{Transform: want}\n \n-\t\tgot := ExpandedTransform(exp)\n+\t\tgot, err := ExpandedTransform(exp)\n+\n+\t\tif err != nil {\n+\t\t\tt.Fatal(err)\n+\t\t}", "originalCommit": "5221d52a0513187132243d8edb8aa149e4eed9a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "910b593c927ff0aeb8558d91f44f6508b0f66fb9", "url": "https://github.com/apache/beam/commit/910b593c927ff0aeb8558d91f44f6508b0f66fb9", "message": "[BEAM-8017] Plumb errors and remove panics from package graphx\n\nExported methods and functions in package graphx are not backwards compatible, APIs return an extra error indicating roots of failures", "committedDate": "2020-10-08T01:11:02Z", "type": "forcePushed"}, {"oid": "7f0f44154c2850972a0f7e3cdd9d25f4d03bc3ff", "url": "https://github.com/apache/beam/commit/7f0f44154c2850972a0f7e3cdd9d25f4d03bc3ff", "message": "[BEAM-8017] Plumb errors and remove panics from package graphx\n\nExported methods and functions in package graphx are not backwards compatible, APIs return an extra error indicating roots of failures", "committedDate": "2020-10-08T01:23:31Z", "type": "commit"}, {"oid": "7f0f44154c2850972a0f7e3cdd9d25f4d03bc3ff", "url": "https://github.com/apache/beam/commit/7f0f44154c2850972a0f7e3cdd9d25f4d03bc3ff", "message": "[BEAM-8017] Plumb errors and remove panics from package graphx\n\nExported methods and functions in package graphx are not backwards compatible, APIs return an extra error indicating roots of failures", "committedDate": "2020-10-08T01:23:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NzkxMw==", "url": "https://github.com/apache/beam/pull/13028#discussion_r501397913", "bodyText": "Typo I missed on the first pass.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn \"\", errors.Wrapf(err, \"failed to add socpe tree: %v\", s)\n          \n          \n            \n            \t\treturn \"\", errors.Wrapf(err, \"failed to add scope tree: %v\", s)", "author": "lostluck", "createdAt": "2020-10-08T01:26:12Z", "path": "sdks/go/pkg/beam/core/runtime/graphx/translate.go", "diffHunk": "@@ -204,60 +218,89 @@ func (m *marshaller) addScopeTree(s *ScopeTree) string {\n \t\tEnvironmentId: m.addDefaultEnv(),\n \t}\n \n-\tm.updateIfCombineComposite(s, transform)\n+\tif err := m.updateIfCombineComposite(s, transform); err != nil {\n+\t\treturn \"\", errors.Wrapf(err, \"failed to add socpe tree: %v\", s)", "originalCommit": "7f0f44154c2850972a0f7e3cdd9d25f4d03bc3ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7dc8c0189926ae88ab780e059065666e5f063580", "url": "https://github.com/apache/beam/commit/7dc8c0189926ae88ab780e059065666e5f063580", "message": "Update sdks/go/pkg/beam/core/runtime/graphx/translate.go\r\n\r\nfix typo of scope.", "committedDate": "2020-10-08T01:29:28Z", "type": "commit"}]}