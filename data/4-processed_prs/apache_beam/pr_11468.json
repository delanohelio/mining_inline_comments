{"pr_number": 11468, "pr_title": "[BEAM-9789] Fix lock error. Add test.", "pr_createdAt": "2020-04-20T20:24:14Z", "pr_url": "https://github.com/apache/beam/pull/11468", "timeline": [{"oid": "8078d63b7ad8fc0922bc0ca94b190f14c62ef382", "url": "https://github.com/apache/beam/commit/8078d63b7ad8fc0922bc0ca94b190f14c62ef382", "message": "[BEAM-9789] Fix lock error. Add test.", "committedDate": "2020-04-20T20:18:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MzY3Mg==", "url": "https://github.com/apache/beam/pull/11468#discussion_r411793672", "bodyText": "What's the difference between the \"badLookup\" and \"nilLookup\" tests? Doesn't lookupDesc default to nil if it's not specified, making these two tests identical except with different lookupErrs?", "author": "youngoli", "createdAt": "2020-04-21T01:03:21Z", "path": "sdks/go/pkg/beam/core/runtime/harness/harness_test.go", "diffHunk": "@@ -0,0 +1,169 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package harness\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/core/runtime/exec\"\n+\tfnpb \"github.com/apache/beam/sdks/go/pkg/beam/model/fnexecution_v1\"\n+\tpipepb \"github.com/apache/beam/sdks/go/pkg/beam/model/pipeline_v1\"\n+\t\"github.com/golang/protobuf/proto\"\n+)\n+\n+// validDescriptor describes a valid pipeline with a source and a sink, but doesn't do anything else.\n+func validDescriptor(t *testing.T) *fnpb.ProcessBundleDescriptor {\n+\tt.Helper()\n+\tport := &fnpb.RemoteGrpcPort{\n+\t\tCoderId: \"c1\",\n+\t\tApiServiceDescriptor: &pipepb.ApiServiceDescriptor{\n+\t\t\tUrl: \"hostname:port\",\n+\t\t},\n+\t}\n+\tportBytes, err := proto.Marshal(port)\n+\tif err != nil {\n+\t\tt.Fatalf(\"bad port: %v\", err)\n+\t}\n+\treturn &fnpb.ProcessBundleDescriptor{\n+\t\tId: \"test\",\n+\t\tTransforms: map[string]*pipepb.PTransform{\n+\t\t\t\"source\": &pipepb.PTransform{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn:     \"beam:runner:source:v1\",\n+\t\t\t\t\tPayload: portBytes,\n+\t\t\t\t},\n+\t\t\t\tOutputs: map[string]string{\n+\t\t\t\t\t\"o1\": \"p1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\t\"sink\": &pipepb.PTransform{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn:     \"beam:runner:sink:v1\",\n+\t\t\t\t\tPayload: portBytes,\n+\t\t\t\t},\n+\t\t\t\tInputs: map[string]string{\n+\t\t\t\t\t\"i1\": \"p1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\tPcollections: map[string]*pipepb.PCollection{\n+\t\t\t\"p1\": &pipepb.PCollection{\n+\t\t\t\tCoderId: \"c1\",\n+\t\t\t},\n+\t\t},\n+\t\tCoders: map[string]*pipepb.Coder{\n+\t\t\t\"c1\": &pipepb.Coder{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn: \"beam:coder:windowed_value:v1\",\n+\t\t\t\t},\n+\t\t\t\tComponentCoderIds: []string{\"c2\", \"c3\"},\n+\t\t\t},\n+\t\t\t\"c2\": &pipepb.Coder{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn: \"beam:coder:varint:v1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\t\"c3\": &pipepb.Coder{\n+\t\t\t\tSpec: &pipepb.FunctionSpec{\n+\t\t\t\t\tUrn: \"beam:coder:global_window:v1\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+}\n+\n+func invalidDescriptor(t *testing.T) *fnpb.ProcessBundleDescriptor {\n+\treturn &fnpb.ProcessBundleDescriptor{}\n+}\n+\n+func TestControl_getOrCreatePlan(t *testing.T) {\n+\ttestBDID := bundleDescriptorID(\"test\")\n+\ttestPlan, err := exec.UnmarshalPlan(validDescriptor(t))\n+\tif err != nil {\n+\t\tt.Fatal(\"bad testPlan\")\n+\t}\n+\ttests := []struct {\n+\t\tname               string\n+\t\tlookupErr, planErr error\n+\t\tlookupDesc         *fnpb.ProcessBundleDescriptor\n+\t\tdescriptors        map[bundleDescriptorID]*fnpb.ProcessBundleDescriptor\n+\t\tplans              map[bundleDescriptorID][]*exec.Plan\n+\t}{\n+\t\t{\n+\t\t\tname:       \"OK\",\n+\t\t\tlookupDesc: validDescriptor(t),\n+\t\t}, {\n+\t\t\tname: \"cachedDescriptor\",\n+\t\t\tdescriptors: map[bundleDescriptorID]*fnpb.ProcessBundleDescriptor{\n+\t\t\t\ttestBDID: validDescriptor(t),\n+\t\t\t},\n+\t\t}, {\n+\t\t\tname: \"cachedPlan\",\n+\t\t\tplans: map[bundleDescriptorID][]*exec.Plan{\n+\t\t\t\ttestBDID: []*exec.Plan{testPlan},\n+\t\t\t},\n+\t\t}, {\n+\t\t\tname:      \"badLookup\",", "originalCommit": "8078d63b7ad8fc0922bc0ca94b190f14c62ef382", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5NzgwOA==", "url": "https://github.com/apache/beam/pull/11468#discussion_r411797808", "bodyText": "Ah good catch. It should be a plan error instead, but I'll remove the case.", "author": "lostluck", "createdAt": "2020-04-21T01:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MzY3Mg=="}], "type": "inlineReview"}, {"oid": "845c3747512b056b3dcc0731349e9a9eba3b40c8", "url": "https://github.com/apache/beam/commit/845c3747512b056b3dcc0731349e9a9eba3b40c8", "message": "Remove redundant case.", "committedDate": "2020-04-21T18:51:26Z", "type": "commit"}]}