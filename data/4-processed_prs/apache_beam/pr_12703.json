{"pr_number": 12703, "pr_title": "[BEAM-10603] Add describe and cancel to RecordingManager", "pr_createdAt": "2020-08-27T18:58:38Z", "pr_url": "https://github.com/apache/beam/pull/12703", "timeline": [{"oid": "b3011ad47b46fb1916aba3485491c80731578c9b", "url": "https://github.com/apache/beam/commit/b3011ad47b46fb1916aba3485491c80731578c9b", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8", "committedDate": "2020-08-31T19:32:17Z", "type": "forcePushed"}, {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe", "url": "https://github.com/apache/beam/commit/a4dcca4a0aea106e54e8d41ce841a174a54398fe", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8", "committedDate": "2020-08-31T20:33:02Z", "type": "commit"}, {"oid": "a4dcca4a0aea106e54e8d41ce841a174a54398fe", "url": "https://github.com/apache/beam/commit/a4dcca4a0aea106e54e8d41ce841a174a54398fe", "message": "Add describe and cancel to RecordingManager\n\nChange-Id: I414463dc40a58c1452b7f4a6e819b9e054e4cac8", "committedDate": "2020-08-31T20:33:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MzczOQ==", "url": "https://github.com/apache/beam/pull/12703#discussion_r482393739", "bodyText": "You can use attempt_to_cancel_background_caching_job(user_pipeline) https://github.com/apache/beam/blob/master/sdks/python/apache_beam/runners/interactive/background_caching_job.py#L220", "author": "KevinGG", "createdAt": "2020-09-02T20:09:22Z", "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -258,16 +278,46 @@ def _watch(self, pcolls):\n         ie.current_env().watch(\n             {'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n-  def clear(self, pcolls):\n+  def _clear(self, pipeline_instrument):\n     # type: (List[beam.pvalue.PCollection]) -> None\n \n-    \"\"\"Clears the cache of the given PCollections.\"\"\"\n+    \"\"\"Clears the recording of all non-source PCollections.\"\"\"\n \n     cache_manager = ie.current_env().get_cache_manager(self.user_pipeline)\n-    for pc in pcolls:\n-      cache_key = self._pipeline_instrument.cache_key(pc)\n+\n+    # Only clear the PCollections that aren't being populated from the\n+    # BackgroundCachingJob.\n+    all_cached = set(\n+        str(c.to_key()) for c in pipeline_instrument.cacheables.values())\n+    source_pcolls = getattr(cache_manager, 'capture_keys', set())\n+    to_clear = all_cached - source_pcolls\n+\n+    for cache_key in to_clear:\n       cache_manager.clear('full', cache_key)\n \n+  def cancel(self):\n+    # type: (None) -> None\n+\n+    \"\"\"Cancels the current background recording job.\"\"\"\n+\n+    bcj = ie.current_env().get_background_caching_job(self.user_pipeline)\n+    if bcj:\n+      bcj.cancel()", "originalCommit": "a4dcca4a0aea106e54e8d41ce841a174a54398fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0NTY4NA==", "url": "https://github.com/apache/beam/pull/12703#discussion_r482445684", "bodyText": "Great, thanks!", "author": "rohdesamuel", "createdAt": "2020-09-02T20:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5MzczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyMDA2MQ==", "url": "https://github.com/apache/beam/pull/12703#discussion_r482420061", "bodyText": "Are we still calling it BackgroundCachingJob?", "author": "davidyan74", "createdAt": "2020-09-02T20:29:17Z", "path": "sdks/python/apache_beam/runners/interactive/recording_manager_test.py", "diffHunk": "@@ -288,18 +347,122 @@ def test_basic_wordcount(self):\n     # Create the recording objects. By calling `record` a new PipelineFragment\n     # is started to compute the given PCollections and cache to disk.\n     rm = RecordingManager(p)\n-    recording = rm.record([elems], max_n=3, max_duration_secs=500)\n-    stream = recording.stream(elems)\n-    recording.wait_until_finish()\n+    numbers_recording = rm.record([numbers], max_n=3, max_duration_secs=500)\n+    numbers_stream = numbers_recording.stream(numbers)\n+    numbers_recording.wait_until_finish()\n \n     # Once the pipeline fragment completes, we can read from the stream and know\n     # that all elements were written to cache.\n-    elems = list(stream.read())\n+    elems = list(numbers_stream.read())\n     expected_elems = [\n         WindowedValue(i, MIN_TIMESTAMP, [GlobalWindow()]) for i in range(3)\n     ]\n     self.assertListEqual(elems, expected_elems)\n \n+    # Make an extra recording and test the description.\n+    letters_recording = rm.record([letters], max_n=3, max_duration_secs=500)\n+    letters_recording.wait_until_finish()\n+\n+    self.assertEqual(\n+        rm.describe()['size'],\n+        numbers_recording.describe()['size'] +\n+        letters_recording.describe()['size'])\n+\n+    rm.cancel()\n+\n+  @unittest.skipIf(\n+      sys.version_info < (3, 6, 0),\n+      'This test requires at least Python 3.6 to work.')\n+  def test_cancel_stops_recording(self):\n+    # Add the TestStream so that it can be cached.\n+    ib.options.capturable_sources.add(TestStream)\n+\n+    p = beam.Pipeline(\n+        InteractiveRunner(), options=PipelineOptions(streaming=True))\n+    elems = (\n+        p\n+        | TestStream().advance_watermark_to(0).advance_processing_time(\n+            1).add_elements(list(range(10))).advance_processing_time(1))\n+    squares = elems | beam.Map(lambda x: x**2)\n+\n+    # Watch the local scope for Interactive Beam so that referenced PCollections\n+    # will be cached.\n+    ib.watch(locals())\n+\n+    # This is normally done in the interactive_utils when a transform is\n+    # applied but needs an IPython environment. So we manually run this here.\n+    ie.current_env().track_user_pipelines()\n+\n+    # Get the recording then the BackgroundCachingJob.", "originalCommit": "a4dcca4a0aea106e54e8d41ce841a174a54398fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0NjY4MA==", "url": "https://github.com/apache/beam/pull/12703#discussion_r482446680", "bodyText": "For the time being yes, but this will be changed later on.", "author": "rohdesamuel", "createdAt": "2020-09-02T20:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQyMDA2MQ=="}], "type": "inlineReview"}, {"oid": "ab76559752bb27497d75fc44a614851d3b257ad6", "url": "https://github.com/apache/beam/commit/ab76559752bb27497d75fc44a614851d3b257ad6", "message": "use the existing method to cancel the BCJ\n\nChange-Id: Ifd0bd62c95958a96728c293628b6ed5be2b38790", "committedDate": "2020-09-02T20:48:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0NDUyNA==", "url": "https://github.com/apache/beam/pull/12703#discussion_r482544524", "bodyText": "Generally doing this is not necessary. You can name the attribute self.cache_key, and users can access the attribute directly, unless there's a strong reason not to.", "author": "pabloem", "createdAt": "2020-09-02T22:31:06Z", "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -63,6 +63,12 @@ def var(self):\n     \"\"\"Returns the variable named that defined this PCollection.\"\"\"\n     return self._var\n \n+  def cache_key(self):", "originalCommit": "ab76559752bb27497d75fc44a614851d3b257ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwODI5NQ==", "url": "https://github.com/apache/beam/pull/12703#discussion_r485108295", "bodyText": "Gotcha, I turned this into a property. I wanted others to access the cache_key and var of the stream but without the ability for owners to modify the values.", "author": "rohdesamuel", "createdAt": "2020-09-08T18:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0NDUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwODQ2Nw==", "url": "https://github.com/apache/beam/pull/12703#discussion_r484908467", "bodyText": "It's a little unsafe to use string representation as keys, no? Should CacheKey implement a hash method instead?", "author": "pabloem", "createdAt": "2020-09-08T13:19:30Z", "path": "sdks/python/apache_beam/runners/interactive/recording_manager.py", "diffHunk": "@@ -258,16 +278,44 @@ def _watch(self, pcolls):\n         ie.current_env().watch(\n             {'anonymous_pcollection_{}'.format(id(pcoll)): pcoll})\n \n-  def clear(self, pcolls):\n+  def _clear(self, pipeline_instrument):\n     # type: (List[beam.pvalue.PCollection]) -> None\n \n-    \"\"\"Clears the cache of the given PCollections.\"\"\"\n+    \"\"\"Clears the recording of all non-source PCollections.\"\"\"\n \n     cache_manager = ie.current_env().get_cache_manager(self.user_pipeline)\n-    for pc in pcolls:\n-      cache_key = self._pipeline_instrument.cache_key(pc)\n+\n+    # Only clear the PCollections that aren't being populated from the\n+    # BackgroundCachingJob.\n+    all_cached = set(\n+        str(c.to_key()) for c in pipeline_instrument.cacheables.values())", "originalCommit": "ab76559752bb27497d75fc44a614851d3b257ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwOTg4NA==", "url": "https://github.com/apache/beam/pull/12703#discussion_r484909884", "bodyText": "It seems that we're using the string representation everywhere, so it may represent a large change - and I see it;s a carefully written repr method, so it's not necessary for this PR.", "author": "pabloem", "createdAt": "2020-09-08T13:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwODQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDEyOA==", "url": "https://github.com/apache/beam/pull/12703#discussion_r485084128", "bodyText": "Gotcha, I can make a follow-up PR.", "author": "rohdesamuel", "createdAt": "2020-09-08T17:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwODQ2Nw=="}], "type": "inlineReview"}, {"oid": "0d7add997cd371b3232ea34729a0d03d286d8899", "url": "https://github.com/apache/beam/commit/0d7add997cd371b3232ea34729a0d03d286d8899", "message": "Turn cache_key and var into properties\n\nChange-Id: Ie74c50e7624df1b0611b35fe98d12eff905520aa", "committedDate": "2020-09-08T19:06:42Z", "type": "commit"}, {"oid": "0d7add997cd371b3232ea34729a0d03d286d8899", "url": "https://github.com/apache/beam/commit/0d7add997cd371b3232ea34729a0d03d286d8899", "message": "Turn cache_key and var into properties\n\nChange-Id: Ie74c50e7624df1b0611b35fe98d12eff905520aa", "committedDate": "2020-09-08T19:06:42Z", "type": "forcePushed"}]}