{"pr_number": 12012, "pr_title": "[BEAM-10260] Fix continuation token support with statecache", "pr_createdAt": "2020-06-15T15:31:30Z", "pr_url": "https://github.com/apache/beam/pull/12012", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2NzkxMg==", "url": "https://github.com/apache/beam/pull/12012#discussion_r440567912", "bodyText": "Why would extend be called in this case? Should this be an error?", "author": "tweise", "createdAt": "2020-06-16T03:38:23Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -941,15 +942,29 @@ def extend(self,\n              is_cached=False\n             ):\n     # type: (...) -> _Future\n+    # Make sure the input is a list of elements\n+    elements = list(elements)\n     cache_token = self._get_cache_token(state_key, is_cached)\n     if cache_token:\n       # Update the cache\n       cache_key = self._convert_to_cache_key(state_key)\n-      if self._state_cache.get(cache_key, cache_token) is None:\n-        # We have never cached this key before, first initialize cache\n-        self.blocking_get(state_key, coder, is_cached=True)\n-      # Now update the values in the cache\n-      self._state_cache.extend(cache_key, cache_token, elements)\n+      cached_value = self._state_cache.get(cache_key, cache_token)\n+      # Keep in mind that the state for this key can be evicted\n+      # while executing this function. Either read or write to the cache\n+      # but never do both here!\n+      if cached_value is None:\n+        # We have never cached this key before, first retrieve state\n+        cached_value = self.blocking_get(state_key, coder)\n+      # Just extend the already cached value\n+      if isinstance(cached_value, list):\n+        # The state is fully cached and can be extended\n+        cached_value.extend(elements)\n+      elif isinstance(cached_value, itertools.chain):\n+        # The state is too large to be fully cached (continuation token used),", "originalCommit": "451ebe39f63c7a63d7a332d9b366323794fcd226", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0MzkwOQ==", "url": "https://github.com/apache/beam/pull/12012#discussion_r440643909", "bodyText": "Extend is called when new state gets appended. In line 963 we know that the cache already contains the head of the state + an iterator which retrieves the rest from the runner due to the use of continuation tokens for large state. We don't want to cache further values, that's why we skip updating the cache and just send the new values to the Runner (below). When we retrieve this state from the cache, it will have the head cached and retrieve the rest from the Runner, including the appended values.\nShould it be an error? No, because we still want to be able to append to large state.", "author": "mxm", "createdAt": "2020-06-16T07:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2NzkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MTc2Ng==", "url": "https://github.com/apache/beam/pull/12012#discussion_r440981766", "bodyText": "Makes sense, I missed that the new elements are still written to the state handler.", "author": "tweise", "createdAt": "2020-06-16T16:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2NzkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODEzNw==", "url": "https://github.com/apache/beam/pull/12012#discussion_r440568137", "bodyText": "Isn't cached_value.extend(elements) the only place where this matters?", "author": "tweise", "createdAt": "2020-06-16T03:39:36Z", "path": "sdks/python/apache_beam/runners/worker/sdk_worker.py", "diffHunk": "@@ -941,15 +942,29 @@ def extend(self,\n              is_cached=False\n             ):\n     # type: (...) -> _Future\n+    # Make sure the input is a list of elements\n+    elements = list(elements)", "originalCommit": "451ebe39f63c7a63d7a332d9b366323794fcd226", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NDMyMQ==", "url": "https://github.com/apache/beam/pull/12012#discussion_r440644321", "bodyText": "Yes, though we will iterate twice over elements. 1) for the cache 2) for serializing the elements for the runner. Materializing to a list ensures that the results will be the same. An Iterable could theoretically return different results.", "author": "mxm", "createdAt": "2020-06-16T07:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NTY1Ng==", "url": "https://github.com/apache/beam/pull/12012#discussion_r440745656", "bodyText": "I've moved the call down to execute only when caching is enabled.", "author": "mxm", "createdAt": "2020-06-16T10:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODEzNw=="}], "type": "inlineReview"}, {"oid": "16da449b27f1c25e292b9e6458cab8cb6db69411", "url": "https://github.com/apache/beam/commit/16da449b27f1c25e292b9e6458cab8cb6db69411", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction.", "committedDate": "2020-06-16T10:21:02Z", "type": "forcePushed"}, {"oid": "35d78e498d7bde9df9d27561b2b8099bff5c5084", "url": "https://github.com/apache/beam/commit/35d78e498d7bde9df9d27561b2b8099bff5c5084", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction.", "committedDate": "2020-06-16T12:10:46Z", "type": "forcePushed"}, {"oid": "a85cc8102994fcadd79f903b5806aa8f9fde9139", "url": "https://github.com/apache/beam/commit/a85cc8102994fcadd79f903b5806aa8f9fde9139", "message": "[BEAM-10260] Fix continuation token support with statecache\n\nThe continuation mode was always-on by mistake. Also, continuation mode would\narbitrarily nest appended state via iterators which would lead to the following\nerror:\n\n```\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n\nIn case of continuations tokens, we do not cache anything anymore after the\ncontinuation. Caching after the continuation token would defeat the purpose of\nusing continuation tokens for large state. A test was added for continuation\ntokens.\n\nThe extend operation was removed from the statecache in favor of using only\nput/get/clear which avoids any race conditions with the cache eviction.", "committedDate": "2020-06-16T13:21:46Z", "type": "commit"}, {"oid": "c30629e6b556e8c473a5db0ae5d8d16503b265a8", "url": "https://github.com/apache/beam/commit/c30629e6b556e8c473a5db0ae5d8d16503b265a8", "message": "[BEAM-10260] Remove is_cached parameter from CachingStateHandler\n\nThe parameter is not needed anymore because side input caching has been\nimplemented, which was the original reason for having the parameter.", "committedDate": "2020-06-16T13:21:46Z", "type": "commit"}, {"oid": "c30629e6b556e8c473a5db0ae5d8d16503b265a8", "url": "https://github.com/apache/beam/commit/c30629e6b556e8c473a5db0ae5d8d16503b265a8", "message": "[BEAM-10260] Remove is_cached parameter from CachingStateHandler\n\nThe parameter is not needed anymore because side input caching has been\nimplemented, which was the original reason for having the parameter.", "committedDate": "2020-06-16T13:21:46Z", "type": "forcePushed"}]}