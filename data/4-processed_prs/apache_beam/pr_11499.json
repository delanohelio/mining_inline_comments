{"pr_number": 11499, "pr_title": "[BEAM-9775] Adding Go SDF example, adjusting GetProgress signature.", "pr_createdAt": "2020-04-22T18:29:39Z", "pr_url": "https://github.com/apache/beam/pull/11499", "timeline": [{"oid": "47857933cc17818af66d40add02eed1aa563f4e8", "url": "https://github.com/apache/beam/commit/47857933cc17818af66d40add02eed1aa563f4e8", "message": "[BEAM-9775] Go SDF Example, Initial Implementation\n\nCurrently this still has some bug in it preventing all elements from\ngetting read.", "committedDate": "2020-04-22T18:26:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5Mzg4NA==", "url": "https://github.com/apache/beam/pull/11499#discussion_r413293884", "bodyText": "size /5 might not divide evenly?", "author": "lostluck", "createdAt": "2020-04-22T20:10:46Z", "path": "sdks/go/examples/stringsplit/stringsplit.go", "diffHunk": "@@ -0,0 +1,230 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// An example of using a Splittable DoFn in the Go SDK with a portable runner.\n+//\n+// The following instructions describe how to execute this example in the\n+// Flink local runner.\n+//\n+// 1. From a command line, navigate to the top-level beam/ directory and run\n+// the Flink job server:\n+//    ./gradlew :runners:flink:1.10:job-server:runShadow -Djob-host=localhost -Dflink-master=local\n+//\n+// 2. The job server is ready to receive jobs once it outputs a log like the\n+// following: `JobService started on localhost:8099`. Take note of the endpoint\n+// in that log message.\n+//\n+// 3. While the job server is running in one command line window, create a\n+// second one in the same directory and run this example with the following\n+// command, using the endpoint you noted from step 2:\n+//    go run sdks/go/examples/stringsplit/stringsplit.go --runner=universal --endpoint=localhost:8099\n+//\n+// 4. Once the pipeline is complete, the job server can be closed with ctrl+C.\n+// To check the output of the pipeline, search the job server logs for the\n+// phrase \"StringSplit Output\".\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/examples/stringsplit/offsetrange\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/log\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*StringSplitFn)(nil)).Elem())\n+}\n+\n+// StringSplitFn is a Splittable DoFn that splits strings into substrings of the\n+// specified size (for example, to be able to fit them in a small buffer).\n+// See ProcessElement for more details.\n+type StringSplitFn struct {\n+\tBufSize int64\n+}\n+\n+// CreateInitialRestriction creates an offset range restriction for each element\n+// with the size of the restriction corresponding to the length of the string.\n+func (fn *StringSplitFn) CreateInitialRestriction(s string) offsetrange.Restriction {\n+\treturn offsetrange.Restriction{Start: 0, End: int64(len(s))}\n+}\n+\n+// SplitRestriction performs initial splits so that each restriction is split\n+// into 5.\n+func (fn *StringSplitFn) SplitRestriction(s string, rest offsetrange.Restriction) []offsetrange.Restriction {\n+\tsize := rest.End - rest.Start\n+\tsplitPts := []int64{\n+\t\trest.Start,\n+\t\trest.Start + (size / 5),", "originalCommit": "47857933cc17818af66d40add02eed1aa563f4e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzMTg1NQ==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414131855", "bodyText": "I don't think that's an issue. It might not always divide evenly, and in small enough inputs it could create restrictions with nothing to emit, but it still gives correct output even in those cases (which I did test out). What I was really aiming for was just giving a basic example of what the initial split should do, while also splitting in a way that doesn't evenly lie on claimable blocks, so I can include the logic in ProcessElement to find the nearest claimable block, and include comments about how only the start of the claimed block needs to lie in the restriction.", "author": "youngoli", "createdAt": "2020-04-23T21:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5Mzg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MjM1Mw==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414162353", "bodyText": "Do we know if it's a mistake to have duplicated restrictions in the returned list?", "author": "lostluck", "createdAt": "2020-04-23T22:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5Mzg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNTM5NQ==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414135395", "bodyText": "Please add the Apache 2.0 License header to the new files.", "author": "lostluck", "createdAt": "2020-04-23T21:26:13Z", "path": "sdks/go/examples/stringsplit/offsetrange/offsetrange.go", "diffHunk": "@@ -0,0 +1,107 @@\n+package offsetrange", "originalCommit": "26c2e985372cb074893d8af2babb4bacb98a0d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDE3MA==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414280170", "bodyText": "Whoops, fixed.", "author": "youngoli", "createdAt": "2020-04-24T04:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNTM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MDE1Mg==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414160152", "bodyText": "Please update the method documentation to match the new semantics.", "author": "lostluck", "createdAt": "2020-04-23T22:15:46Z", "path": "sdks/go/examples/stringsplit/offsetrange/offsetrange.go", "diffHunk": "@@ -0,0 +1,107 @@\n+package offsetrange\n+\n+import (\n+\t\"errors\"\n+\t\"math\"\n+\t\"reflect\"\n+\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*Tracker)(nil)))\n+\tbeam.RegisterType(reflect.TypeOf((*Restriction)(nil)))\n+}\n+\n+type Restriction struct {\n+\tStart, End int64 // Half-closed interval with boundaries [start, end).\n+}\n+\n+// Tracker tracks a restriction  that can be represented as a range of integer values,\n+// for example for byte offsets in a file, or indices in an array. Note that this tracker makes\n+// no assumptions about the positions of blocks within the range, so users must handle validation\n+// of block positions if needed.\n+type Tracker struct {\n+\tRest    Restriction\n+\tClaimed int64 // Tracks the last claimed position.\n+\tStopped bool  // Tracks whether TryClaim has already indicated to stop processing elements for\n+\t// any reason.\n+\tErr error\n+}\n+\n+// NewTracker is a constructor for an Tracker given a start and end range.\n+func NewTracker(rest Restriction) *Tracker {\n+\treturn &Tracker{\n+\t\tRest:    rest,\n+\t\tClaimed: rest.Start - 1,\n+\t\tStopped: false,\n+\t\tErr:     nil,\n+\t}\n+}\n+\n+// TryClaim accepts an int64 position and successfully claims it if that position is greater than\n+// the previously claimed position and less than the end of the restriction. Note that the\n+// Tracker is not considered done until a position >= tracker.end tries to be claimed,\n+// at which point this method signals to end processing.\n+func (tracker *Tracker) TryClaim(rawPos interface{}) bool {\n+\tif tracker.Stopped == true {\n+\t\ttracker.Err = errors.New(\"cannot claim work after restriction tracker returns false\")\n+\t\treturn false\n+\t}\n+\n+\tpos := rawPos.(int64)\n+\n+\tif pos < tracker.Rest.Start {\n+\t\ttracker.Stopped = true\n+\t\ttracker.Err = errors.New(\"position claimed is out of bounds of the restriction\")\n+\t\treturn false\n+\t}\n+\tif pos <= tracker.Claimed {\n+\t\ttracker.Stopped = true\n+\t\ttracker.Err = errors.New(\"cannot claim a position lower than the previously claimed position\")\n+\t\treturn false\n+\t}\n+\n+\ttracker.Claimed = pos\n+\tif pos >= tracker.Rest.End {\n+\t\ttracker.Stopped = true\n+\t\treturn false\n+\t}\n+\treturn true\n+}\n+\n+// IsDone returns true if the most recent claimed element is past the end of the restriction.", "originalCommit": "26c2e985372cb074893d8af2babb4bacb98a0d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDE0Nw==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414280147", "bodyText": "I was planning on doing it in a seperate PR, but thinking about it, it's a really small change, so why not? Done", "author": "youngoli", "createdAt": "2020-04-24T04:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MDE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NDgxMQ==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414164811", "bodyText": "Consider just returning rt.GetError() instead of the extra block.\nHaving the rt.GetError() automatically checked is feasible given we already have the tracker pointer. We can just\nif ge, ok := rt.(interface{GetError() error}); ok {\n  err := ge.GetError()\n ... handle error...\n}", "author": "lostluck", "createdAt": "2020-04-23T22:26:18Z", "path": "sdks/go/examples/stringsplit/stringsplit.go", "diffHunk": "@@ -0,0 +1,249 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// An example of using a Splittable DoFn in the Go SDK with a portable runner.\n+//\n+// The following instructions describe how to execute this example in the\n+// Flink local runner.\n+//\n+// 1. From a command line, navigate to the top-level beam/ directory and run\n+// the Flink job server:\n+//    ./gradlew :runners:flink:1.10:job-server:runShadow -Djob-host=localhost -Dflink-master=local\n+//\n+// 2. The job server is ready to receive jobs once it outputs a log like the\n+// following: `JobService started on localhost:8099`. Take note of the endpoint\n+// in that log message.\n+//\n+// 3. While the job server is running in one command line window, create a\n+// second one in the same directory and run this example with the following\n+// command, using the endpoint you noted from step 2:\n+//    go run sdks/go/examples/stringsplit/stringsplit.go --runner=universal --endpoint=localhost:8099\n+//\n+// 4. Once the pipeline is complete, the job server can be closed with ctrl+C.\n+// To check the output of the pipeline, search the job server logs for the\n+// phrase \"StringSplit Output\".\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"flag\"\n+\t\"reflect\"\n+\t\"time\"\n+\n+\t\"github.com/apache/beam/sdks/go/examples/stringsplit/offsetrange\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/log\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+)\n+\n+func init() {\n+\tbeam.RegisterType(reflect.TypeOf((*StringSplitFn)(nil)).Elem())\n+\tbeam.RegisterType(reflect.TypeOf((*LogFn)(nil)).Elem())\n+}\n+\n+// StringSplitFn is a Splittable DoFn that splits strings into substrings of the\n+// specified size (for example, to be able to fit them in a small buffer).\n+// See ProcessElement for more details.\n+type StringSplitFn struct {\n+\tBufSize int64\n+}\n+\n+// CreateInitialRestriction creates an offset range restriction for each element\n+// with the size of the restriction corresponding to the length of the string.\n+func (fn *StringSplitFn) CreateInitialRestriction(s string) offsetrange.Restriction {\n+\trest := offsetrange.Restriction{Start: 0, End: int64(len(s))}\n+\tlog.Debugf(context.Background(), \"StringSplit CreateInitialRestriction: %v\", rest)\n+\treturn rest\n+}\n+\n+// SplitRestriction performs initial splits so that each restriction is split\n+// into 5.\n+func (fn *StringSplitFn) SplitRestriction(s string, rest offsetrange.Restriction) []offsetrange.Restriction {\n+\tsize := rest.End - rest.Start\n+\tsplitPts := []int64{\n+\t\trest.Start,\n+\t\trest.Start + (size / 5),\n+\t\trest.Start + (size * 2 / 5),\n+\t\trest.Start + (size * 3 / 5),\n+\t\trest.Start + (size * 4 / 5),\n+\t\trest.End,\n+\t}\n+\tvar splits []offsetrange.Restriction\n+\tfor i := 0; i < len(splitPts)-1; i++ {\n+\t\tsplits = append(splits, offsetrange.Restriction{Start: splitPts[i], End: splitPts[i+1]})\n+\t}\n+\tlog.Debugf(context.Background(), \"StringSplit SplitRestrictions: %v -> %v\", rest, splits)\n+\treturn splits\n+}\n+\n+// RestrictionSize returns the size as the difference between the restriction's\n+// start and end.\n+func (fn *StringSplitFn) RestrictionSize(s string, rest offsetrange.Restriction) float64 {\n+\tsize := float64(rest.End - rest.Start)\n+\tlog.Debugf(context.Background(), \"StringSplit RestrictionSize: %v -> %v\", rest, size)\n+\treturn size\n+}\n+\n+// CreateTracker creates an offset range restriction tracker out of the offset\n+// range restriction.\n+func (fn *StringSplitFn) CreateTracker(rest offsetrange.Restriction) *offsetrange.Tracker {\n+\treturn offsetrange.NewTracker(rest)\n+}\n+\n+// ProcessElement splits a string into substrings of a specified size (set in\n+// StringSplitFn.BufSize).\n+//\n+// Note that the substring blocks are not guaranteed to line up with the\n+// restriction boundaries. ProcessElement is expected to emit any substring\n+// block that begins in its restriction, even if it extends past the end of the\n+// restriction.\n+//\n+// Example: If BufSize is 100, then a restriction of 75 to 325 should emit the\n+// following substrings: [100, 200], [200, 300], [300, 400]\n+func (fn *StringSplitFn) ProcessElement(rt *offsetrange.Tracker, elem string, emit func(string)) error {\n+\tlog.Debugf(context.Background(), \"StringSplit ProcessElement: Tracker = %v\", rt)\n+\ti := rt.Rest.Start\n+\tif rem := i % fn.BufSize; rem != 0 {\n+\t\ti += fn.BufSize - rem // Skip to next multiple of BufSize.\n+\t}\n+\tstrEnd := int64(len(elem))\n+\n+\tfor ok := rt.TryClaim(i); ok == true; ok = rt.TryClaim(i) {\n+\t\tif i+fn.BufSize > strEnd {\n+\t\t\temit(elem[i:])\n+\t\t} else {\n+\t\t\temit(elem[i : i+fn.BufSize])\n+\t\t}\n+\t\ti += fn.BufSize\n+\t}\n+\t// TODO(BEAM-9799): Remove this check once error checking is automatic.\n+\tif err := rt.GetError(); err != nil {\n+\t\treturn err\n+\t}\n+\treturn nil", "originalCommit": "26c2e985372cb074893d8af2babb4bacb98a0d8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDExMw==", "url": "https://github.com/apache/beam/pull/11499#discussion_r414280113", "bodyText": "Done. I'll hold off on having it automatically checked for the moment, just because I wanna add a test along with that when I get to it.", "author": "youngoli", "createdAt": "2020-04-24T04:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NDgxMQ=="}], "type": "inlineReview"}, {"oid": "7d82da52a86065d621eeb9819f6380e4491099fa", "url": "https://github.com/apache/beam/commit/7d82da52a86065d621eeb9819f6380e4491099fa", "message": "[BEAM-9775] Fixing bug in example, adding wait for log output.", "committedDate": "2020-04-24T02:18:25Z", "type": "commit"}, {"oid": "7d82da52a86065d621eeb9819f6380e4491099fa", "url": "https://github.com/apache/beam/commit/7d82da52a86065d621eeb9819f6380e4491099fa", "message": "[BEAM-9775] Fixing bug in example, adding wait for log output.", "committedDate": "2020-04-24T02:18:25Z", "type": "forcePushed"}, {"oid": "38b04b1534d3fe4c18d0c83c9a7d4bd37e738aab", "url": "https://github.com/apache/beam/commit/38b04b1534d3fe4c18d0c83c9a7d4bd37e738aab", "message": "[BEAM-9775] Update GetProgress API along with example.", "committedDate": "2020-04-24T04:34:34Z", "type": "commit"}, {"oid": "38b04b1534d3fe4c18d0c83c9a7d4bd37e738aab", "url": "https://github.com/apache/beam/commit/38b04b1534d3fe4c18d0c83c9a7d4bd37e738aab", "message": "[BEAM-9775] Update GetProgress API along with example.", "committedDate": "2020-04-24T04:34:34Z", "type": "forcePushed"}]}