{"pr_number": 11070, "pr_title": "[BEAM-8280] Blog post: Python typing changes", "pr_createdAt": "2020-03-07T00:55:51Z", "pr_url": "https://github.com/apache/beam/pull/11070", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjI1Nw==", "url": "https://github.com/apache/beam/pull/11070#discussion_r389216257", "bodyText": "It could be nice to clarify that these annotations are used at runtime. e.g.\n\nthus getting additional runtime type checking for free.", "author": "chadrik", "createdAt": "2020-03-07T01:53:15Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,118 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand\n+\n+Second, we've added support for Python 3 type annotations. This allows SDK\n+users to specify a DoFn's type hints in one place. \n+We've also expanded Beam's support of `typing` module types.\n+\n+For more background see: \n+[Ensuring Python Type Safety](https://beam.apache.org/documentation/sdks/python-type-safety/).\n+\n+# Beam Is Typed\n+\n+TODO\n+\n+# New Ways to Annotate\n+\n+## Python 3 Syntax Annotations\n+\n+Coming in Beam 2.21 (BEAM-8280), you will be able to using Python annotation\n+syntax to specify input and output types.\n+\n+For example, this new form:\n+```py\n+class MyDoFn(beam.DoFn):\n+  def process(self, element: int) -> typing.Text:\n+    yield str(element)\n+```\n+is equivalent to this:\n+```py\n+@beam.typehints.with_input_types(int)\n+@beam.typehints.with_output_types(typing.Text)\n+class MyDoFn(beam.DoFn):\n+  def process(self, element):\n+    yield str(element)\n+```\n+\n+One of the advantages of the new form is that you may already be using it\n+in tandem with a static type checker such as mypy, thus getting additional\n+type checking for free.", "originalCommit": "9861d24f0c85dd072653f9cf45a88b34705bf80a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjM1Ng==", "url": "https://github.com/apache/beam/pull/11070#discussion_r389216356", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Uses of Beam's with_input_type, with_output_type methods and decorators will \n          \n          \n            \n            still work and take precedence over annotations.\n          \n          \n            \n            Uses of Beam's `with_input_type`, `with_output_type` methods and decorators will \n          \n          \n            \n            still work and take precedence over annotations.", "author": "chadrik", "createdAt": "2020-03-07T01:54:09Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,118 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand\n+\n+Second, we've added support for Python 3 type annotations. This allows SDK\n+users to specify a DoFn's type hints in one place. \n+We've also expanded Beam's support of `typing` module types.\n+\n+For more background see: \n+[Ensuring Python Type Safety](https://beam.apache.org/documentation/sdks/python-type-safety/).\n+\n+# Beam Is Typed\n+\n+TODO\n+\n+# New Ways to Annotate\n+\n+## Python 3 Syntax Annotations\n+\n+Coming in Beam 2.21 (BEAM-8280), you will be able to using Python annotation\n+syntax to specify input and output types.\n+\n+For example, this new form:\n+```py\n+class MyDoFn(beam.DoFn):\n+  def process(self, element: int) -> typing.Text:\n+    yield str(element)\n+```\n+is equivalent to this:\n+```py\n+@beam.typehints.with_input_types(int)\n+@beam.typehints.with_output_types(typing.Text)\n+class MyDoFn(beam.DoFn):\n+  def process(self, element):\n+    yield str(element)\n+```\n+\n+One of the advantages of the new form is that you may already be using it\n+in tandem with a static type checker such as mypy, thus getting additional\n+type checking for free.\n+\n+This feature will be enabled by default, and there will be 2 mechanisms in\n+place to disable it:\n+1. Calling `apache_beam.typehints.disable_type_annotations()` before pipeline\n+construction will disable the new feature completely.\n+1. Decorating a function with `@apache_beam.typehints.no_annotations` will\n+tell Beam to ignore annotations for it. \n+ \n+Uses of Beam's with_input_type, with_output_type methods and decorators will \n+still work and take precedence over annotations.", "originalCommit": "9861d24f0c85dd072653f9cf45a88b34705bf80a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjM4Mg==", "url": "https://github.com/apache/beam/pull/11070#discussion_r389216382", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Coming in Beam 2.21 (BEAM-8280), you will be able to using Python annotation\n          \n          \n            \n            Coming in Beam 2.21 (BEAM-8280), you will be able to use Python annotation", "author": "chadrik", "createdAt": "2020-03-07T01:54:35Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,118 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand\n+\n+Second, we've added support for Python 3 type annotations. This allows SDK\n+users to specify a DoFn's type hints in one place. \n+We've also expanded Beam's support of `typing` module types.\n+\n+For more background see: \n+[Ensuring Python Type Safety](https://beam.apache.org/documentation/sdks/python-type-safety/).\n+\n+# Beam Is Typed\n+\n+TODO\n+\n+# New Ways to Annotate\n+\n+## Python 3 Syntax Annotations\n+\n+Coming in Beam 2.21 (BEAM-8280), you will be able to using Python annotation", "originalCommit": "9861d24f0c85dd072653f9cf45a88b34705bf80a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjQ0Mw==", "url": "https://github.com/apache/beam/pull/11070#discussion_r395402443", "bodyText": "@chadrik LMK if you want to write about the new type hints, mypy checking, other stuff you've added related to types.", "author": "udim", "createdAt": "2020-03-20T01:25:17Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand\n+\n+Second, we've added support for Python 3 type annotations. This allows SDK\n+users to specify a DoFn's type hints in one place. \n+We've also expanded Beam's support of `typing` module types.\n+\n+For more background see: \n+[Ensuring Python Type Safety](https://beam.apache.org/documentation/sdks/python-type-safety/).\n+\n+# Beam Is Typed\n+\n+TODO", "originalCommit": "746a7eb9beaba7cbd7d386284045e50d20f27d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5ODIxMQ==", "url": "https://github.com/apache/beam/pull/11070#discussion_r395798211", "bodyText": "I definitely do, wont' have time for at least half a week.  Can you give me a timeline?\nI am currently in save-the-company mode, so I don't have much time on my hands until that's done.  Our industry is a lot like a factory.  Many humans on high-end graphics workstations operating on petabytes of data in a highly collaborative assembly line.  It's not something that's easily convertable to WFH, but we're almost there.", "author": "chadrik", "createdAt": "2020-03-20T17:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNDA1NA==", "url": "https://github.com/apache/beam/pull/11070#discussion_r395824054", "bodyText": "The deadline is by the time 2.21 is released. That release is scheduled to be cut on Apr 8, and I estimate releasing it will take 2-6 weeks. So let's aim for Apr 22.", "author": "udim", "createdAt": "2020-03-20T18:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNjI5MA==", "url": "https://github.com/apache/beam/pull/11070#discussion_r395826290", "bodyText": "So, no immediate rush. We are also adjusting to WFH", "author": "udim", "createdAt": "2020-03-20T18:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MTM2OQ==", "url": "https://github.com/apache/beam/pull/11070#discussion_r419651369", "bodyText": "Hi, I realize I missed our April 22nd deadline.  I can commit to getting this done by EOW.  Does that work for you?", "author": "chadrik", "createdAt": "2020-05-04T18:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjQ0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxODM0MQ==", "url": "https://github.com/apache/beam/pull/11070#discussion_r421718341", "bodyText": "Yes, that works", "author": "udim", "createdAt": "2020-05-07T18:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMjQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwOTU2MQ==", "url": "https://github.com/apache/beam/pull/11070#discussion_r422409561", "bodyText": "I don't fully understand the issue presented here.  Ignoring pipelines that are dynamically generated at runtime, I think it should be possible for mypy to track the types of many pipelines, as long as A) developers avoid certain pitfalls (like lambdas), and B) we write a mypy plugin to smooth over some gaps.", "author": "chadrik", "createdAt": "2020-05-08T22:49:01Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand\n+\n+Second, we've added support for Python 3 type annotations. This allows SDK\n+users to specify a DoFn's type hints in one place. \n+We've also expanded Beam's support of `typing` module types.\n+\n+For more background see: \n+[Ensuring Python Type Safety](https://beam.apache.org/documentation/sdks/python-type-safety/).\n+\n+# Beam Is Typed\n+\n+TODO\n+\n+# New Ways to Annotate\n+\n+## Python 3 Syntax Annotations\n+\n+Coming in Beam 2.21 (BEAM-8280), you will be able to use Python annotation\n+syntax to specify input and output types.\n+\n+For example, this new form:\n+```py\n+class MyDoFn(beam.DoFn):\n+  def process(self, element: int) -> typing.Text:\n+    yield str(element)\n+```\n+is equivalent to this:\n+```py\n+@beam.typehints.with_input_types(int)\n+@beam.typehints.with_output_types(typing.Text)\n+class MyDoFn(beam.DoFn):\n+  def process(self, element):\n+    yield str(element)\n+```\n+\n+One of the advantages of the new form is that you may already be using it\n+in tandem with a static type checker such as mypy, thus getting additional\n+type checking for free.\n+\n+This feature will be enabled by default, and there will be 2 mechanisms in\n+place to disable it:\n+1. Calling `apache_beam.typehints.disable_type_annotations()` before pipeline\n+construction will disable the new feature completely.\n+1. Decorating a function with `@apache_beam.typehints.no_annotations` will\n+tell Beam to ignore annotations for it. \n+ \n+Uses of Beam's `with_input_type`, `with_output_type` methods and decorators will \n+still work and take precedence over annotations.\n+\n+Sidebar:\n+\n+> You might ask: couldn't we use mypy to type check Beam pipelines? The main issue\n+is that such a tool would have to understand type relations between\n+pipeline graph nodes, e.g., that the type of element passed to a transform\n+should be consistent with its annotated input type.", "originalCommit": "746a7eb9beaba7cbd7d386284045e50d20f27d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5NjIzMA==", "url": "https://github.com/apache/beam/pull/11070#discussion_r428996230", "bodyText": "I'm thinking of rephrasing this to just mention dynamically generated pipelines.\nAs an aside, do you think that adding types to PCollections (such as PCollection[Tuple[K, Iterable[V]]]) would obviate the need for a plugin?", "author": "udim", "createdAt": "2020-05-22T01:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwOTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzAzNA==", "url": "https://github.com/apache/beam/pull/11070#discussion_r429063034", "bodyText": "I went very deep on making transforms and collections generic, and I got pretty close to making it work, but there was still a need for a plug-in. IIRC, it wasn\u2019t possible for mypy to propagate all of the type information when the apply() method was used. When we get past this current push I\u2019ll revive that old experiment and show you where I got.", "author": "chadrik", "createdAt": "2020-05-22T06:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwOTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNzEwMA==", "url": "https://github.com/apache/beam/pull/11070#discussion_r430617100", "bodyText": "Meanwhile, we will start working on adding type checking to PCollection types in the coming weeks (I don't have the details yet). The idea is to type check things like this within Beam as well:\ndef expand(pcoll: PCollection[str]) -> PCollection[Tuple[str, int]]", "author": "udim", "createdAt": "2020-05-26T18:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwOTU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NDk2OQ==", "url": "https://github.com/apache/beam/pull/11070#discussion_r426054969", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TODO\n          \n          \n            \n            In tandem with the new type annotation support within DoFns, we've invested a\n          \n          \n            \n            great deal of time adding type annotations to the Beam python code itself.\n          \n          \n            \n            With this in place, we have begun using mypy, a static type \n          \n          \n            \n            checker, as part of Beam's code review process, which ensures higher quality \n          \n          \n            \n            contributions and fewer bugs.\n          \n          \n            \n            The added context and insight that type annotations add throughout Beam is \n          \n          \n            \n            useful for all Beam developers, contributors and end users alike, but\n          \n          \n            \n            it is especially beneficial for developers who are new to the project.\n          \n          \n            \n            If you use an IDE that understands type annotations, it will provide richer\n          \n          \n            \n            type completions and warnings than before.\n          \n          \n            \n            You'll also be able to use your IDE to inspect the types of Beam functions and \n          \n          \n            \n            transforms to better understand how they work, which will ease your own \n          \n          \n            \n            development.\n          \n          \n            \n            Finally, once Beam is fully annotated, end users will be able to benefit from\n          \n          \n            \n            the use of static type analysis on their own pipelines and custom transforms.", "author": "chadrik", "createdAt": "2020-05-15T21:27:19Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand\n+\n+Second, we've added support for Python 3 type annotations. This allows SDK\n+users to specify a DoFn's type hints in one place. \n+We've also expanded Beam's support of `typing` module types.\n+\n+For more background see: \n+[Ensuring Python Type Safety](https://beam.apache.org/documentation/sdks/python-type-safety/).\n+\n+# Beam Is Typed\n+\n+TODO", "originalCommit": "746a7eb9beaba7cbd7d386284045e50d20f27d56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTE0Mg==", "url": "https://github.com/apache/beam/pull/11070#discussion_r426055142", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Adding type hints throughout Beam. TODO expand\n          \n          \n            \n            Adding type annotations throughout Beam.  Type annotations make a large and \n          \n          \n            \n            sophisticated codebase like Beam easier to comprehend and navigate in your \n          \n          \n            \n            favorite IDE.", "author": "chadrik", "createdAt": "2020-05-15T21:27:45Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand", "originalCommit": "746a7eb9beaba7cbd7d386284045e50d20f27d56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTI5Ng==", "url": "https://github.com/apache/beam/pull/11070#discussion_r426055296", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type checking for free.\n          \n          \n            \n            runtime type checking for free.", "author": "chadrik", "createdAt": "2020-05-15T21:28:09Z", "path": "website/src/_posts/2020-03-06-python-typing.md", "diffHunk": "@@ -0,0 +1,117 @@\n+---\n+layout: post\n+title:  \"Python SDK Typing Changes\"\n+date:   2020-03-06 00:00:01 -0800\n+excerpt_separator: <!--more-->\n+categories: blog python typing\n+authors:\n+  - chadrik\n+  - udim\n+\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+TODO excerpt\n+\n+<!--more-->\n+\n+Python supports type annotations on functions (PEP 484). Static type checkers,\n+such as mypy, are used to verify adherence to these types.\n+For example:\n+```py\n+def f(v: int) -> int:\n+  return v[0]\n+```\n+Running mypy on the above code will give the error:\n+`Value of type \"int\" is not indexable`.\n+\n+We've recently made changes to Beam in 2 areas:\n+\n+Adding type hints throughout Beam. TODO expand\n+\n+Second, we've added support for Python 3 type annotations. This allows SDK\n+users to specify a DoFn's type hints in one place. \n+We've also expanded Beam's support of `typing` module types.\n+\n+For more background see: \n+[Ensuring Python Type Safety](https://beam.apache.org/documentation/sdks/python-type-safety/).\n+\n+# Beam Is Typed\n+\n+TODO\n+\n+# New Ways to Annotate\n+\n+## Python 3 Syntax Annotations\n+\n+Coming in Beam 2.21 (BEAM-8280), you will be able to use Python annotation\n+syntax to specify input and output types.\n+\n+For example, this new form:\n+```py\n+class MyDoFn(beam.DoFn):\n+  def process(self, element: int) -> typing.Text:\n+    yield str(element)\n+```\n+is equivalent to this:\n+```py\n+@beam.typehints.with_input_types(int)\n+@beam.typehints.with_output_types(typing.Text)\n+class MyDoFn(beam.DoFn):\n+  def process(self, element):\n+    yield str(element)\n+```\n+\n+One of the advantages of the new form is that you may already be using it\n+in tandem with a static type checker such as mypy, thus getting additional\n+type checking for free.", "originalCommit": "746a7eb9beaba7cbd7d386284045e50d20f27d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MzcyNg==", "url": "https://github.com/apache/beam/pull/11070#discussion_r428993726", "bodyText": "Changed.\nRuntime is a relative term. :)\nIn Beam I like to say that we have static type checking during pipeline construction, and runtime type checking when the pipeline is running (the latter is off by default).", "author": "udim", "createdAt": "2020-05-22T01:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NTI5Ng=="}], "type": "inlineReview"}, {"oid": "c391f6a8598012947114583708d8d2ca39984734", "url": "https://github.com/apache/beam/commit/c391f6a8598012947114583708d8d2ca39984734", "message": "[BEAM-8280] Blog post: Python typing changes\n\nCo-authored-by: Chad Dombrova <chadrik@gmail.com>", "committedDate": "2020-05-22T01:11:46Z", "type": "commit"}, {"oid": "c391f6a8598012947114583708d8d2ca39984734", "url": "https://github.com/apache/beam/commit/c391f6a8598012947114583708d8d2ca39984734", "message": "[BEAM-8280] Blog post: Python typing changes\n\nCo-authored-by: Chad Dombrova <chadrik@gmail.com>", "committedDate": "2020-05-22T01:11:46Z", "type": "forcePushed"}, {"oid": "9b95061e4b49035e916615745be8a60a8b74c630", "url": "https://github.com/apache/beam/commit/9b95061e4b49035e916615745be8a60a8b74c630", "message": "Added excerpt and reworked sidebar.", "committedDate": "2020-05-22T02:04:19Z", "type": "commit"}, {"oid": "f7151cb3ea38831b05de7588b677f31d3c77350b", "url": "https://github.com/apache/beam/commit/f7151cb3ea38831b05de7588b677f31d3c77350b", "message": "Rename file to match new style and update headers\n\nMore cleanup", "committedDate": "2020-05-22T02:13:39Z", "type": "commit"}, {"oid": "9a0bae90ba213e4d63bd21aa3a222e5ba1e191fe", "url": "https://github.com/apache/beam/commit/9a0bae90ba213e4d63bd21aa3a222e5ba1e191fe", "message": "More fixes, blog with dates in the future don't\n\nappear so I changed the date today.", "committedDate": "2020-05-22T02:47:16Z", "type": "commit"}, {"oid": "7e7f7edc62a607ab124e6513b68b20fb9179c68d", "url": "https://github.com/apache/beam/commit/7e7f7edc62a607ab124e6513b68b20fb9179c68d", "message": "Also update link to blog post", "committedDate": "2020-05-22T06:12:35Z", "type": "commit"}, {"oid": "94a3635eb57126686d300ba245e49e9af83ce9cf", "url": "https://github.com/apache/beam/commit/94a3635eb57126686d300ba245e49e9af83ce9cf", "message": "Update date to today", "committedDate": "2020-05-28T17:23:47Z", "type": "commit"}]}