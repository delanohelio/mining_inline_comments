{"pr_number": 12372, "pr_title": "[BEAM-10545] KernelModel and jest tests", "pr_createdAt": "2020-07-25T00:23:28Z", "pr_url": "https://github.com/apache/beam/pull/12372", "timeline": [{"oid": "b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "url": "https://github.com/apache/beam/commit/b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "message": "[BEAM-10545] KernelModel and jest tests\n\n1. Added a KernelModel module that handles messaging between the\n   frontend and the connected kernel.\n2. Integrated jest test framework with typescript.\n3. Advanced prettier to 1.19 so that it can parse typescript optional\n   chaining syntax.\n4. The tests can be executed with `jlpm jest`. Test details see README.\n5. Changes made by jlpm are:\n   jlpm add --dev jest @types/jest ts-jest identity-obj-proxy\n   jlpm upgrade prettier@^1.19.0", "committedDate": "2020-07-27T20:49:02Z", "type": "commit"}, {"oid": "b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "url": "https://github.com/apache/beam/commit/b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "message": "[BEAM-10545] KernelModel and jest tests\n\n1. Added a KernelModel module that handles messaging between the\n   frontend and the connected kernel.\n2. Integrated jest test framework with typescript.\n3. Advanced prettier to 1.19 so that it can parse typescript optional\n   chaining syntax.\n4. The tests can be executed with `jlpm jest`. Test details see README.\n5. Changes made by jlpm are:\n   jlpm add --dev jest @types/jest ts-jest identity-obj-proxy\n   jlpm upgrade prettier@^1.19.0", "committedDate": "2020-07-27T20:49:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNTg4MA==", "url": "https://github.com/apache/beam/pull/12372#discussion_r462515880", "bodyText": "This is just a nit, but for consistency, I would keep the private method signature the same as the public methods (ie. private _onIOPub(msg: KernelMessage.IIOPubMessage) {...)  as opposed to this syntax which assigns the lambda function to the private data member.", "author": "prodonjs", "createdAt": "2020-07-29T18:53:04Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/kernel/KernelModel.ts", "diffHunk": "@@ -0,0 +1,161 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * The module holds the model that handles messaging between the frontend and\n+ * the connected kernel.\n+ */\n+\n+import { ISessionContext } from '@jupyterlab/apputils';\n+\n+import {\n+  IDisplayData,\n+  IDisplayUpdate,\n+  IExecuteResult\n+} from '@jupyterlab/nbformat';\n+\n+import { Kernel, KernelMessage } from '@jupyterlab/services';\n+\n+import { ISignal, Signal } from '@lumino/signaling';\n+\n+import { KernelCode } from '../kernel/KernelCode';\n+\n+export class KernelModel {\n+  constructor(sessionContext: ISessionContext, enableConsoleLog = false) {\n+    this._sessionContext = sessionContext;\n+    this._enableConsoleLog = enableConsoleLog;\n+  }\n+\n+  get future(): Kernel.IFuture<\n+    KernelMessage.IExecuteRequestMsg,\n+    KernelMessage.IExecuteReplyMsg\n+  > | null {\n+    return this._future;\n+  }\n+\n+  set future(\n+    value: Kernel.IFuture<\n+      KernelMessage.IExecuteRequestMsg,\n+      KernelMessage.IExecuteReplyMsg\n+    > | null\n+  ) {\n+    if (this._future === value) {\n+      return;\n+    }\n+\n+    if (this._future) {\n+      this._future.dispose();\n+    }\n+\n+    this._future = value;\n+\n+    if (!value) {\n+      return;\n+    }\n+\n+    value.onIOPub = this._onIOPub;\n+  }\n+\n+  get executeResult(): object {\n+    if (this._executeResult) {\n+      const dataInPlainText = this._executeResult.data['text/plain'] as string;\n+      if (dataInPlainText) {\n+        try {\n+          // The slice removes trailing single quotes from the nbformat output.\n+          // The replace removes literal backslashes from the nbformat output.\n+          const dataInJsonString = dataInPlainText\n+            .slice(1, -1)\n+            .replace(/\\\\'/g, \"'\");\n+          return JSON.parse(dataInJsonString);\n+        } catch (e) {\n+          console.error(e);\n+          return {};\n+        }\n+      }\n+    }\n+    return {};\n+  }\n+\n+  get displayData(): Array<IDisplayData> {\n+    return this._displayData;\n+  }\n+\n+  get displayUpdate(): Array<IDisplayUpdate> {\n+    return this._displayUpdate;\n+  }\n+\n+  get stateChanged(): ISignal<KernelModel, void> {\n+    return this._stateChanged;\n+  }\n+\n+  execute(code: string, expectReply = true): void {\n+    // Dispose the kernel future so that no more IOPub will be handled.\n+    if (this.future) {\n+      this.future.dispose();\n+      this.future = null;\n+    }\n+    // Clear the outputs from previous kernel executions.\n+    this._executeResult = null;\n+    this._displayData.length = 0;\n+    this._displayUpdate.length = 0;\n+    if (!this._sessionContext || !this._sessionContext.session?.kernel) {\n+      return;\n+    }\n+    this.future = this._sessionContext.session?.kernel?.requestExecute({\n+      code: KernelCode.COMMON_KERNEL_IMPORTS + code,\n+      silent: !expectReply,\n+      store_history: false // eslint-disable-line @typescript-eslint/camelcase\n+    });\n+  }\n+\n+  private _onIOPub = (msg: KernelMessage.IIOPubMessage): void => {", "originalCommit": "b05204e8ad24ef0b5b4aa7adac5e9b405ce871da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0MjU1MA==", "url": "https://github.com/apache/beam/pull/12372#discussion_r462542550", "bodyText": "Thanks, Jason! I've made the change to the private field. Additionally, it requires a bind(this) when assigning the function to the future.", "author": "KevinGG", "createdAt": "2020-07-29T19:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNTg4MA=="}], "type": "inlineReview"}, {"oid": "8f24efaaa65a5e520f29afbd7842da4c20194156", "url": "https://github.com/apache/beam/commit/8f24efaaa65a5e520f29afbd7842da4c20194156", "message": "Change the syntax of private _onIOPub to a function declaration instead of arrow function assignment. This requires binding `this` when assigning the function to the `future`.", "committedDate": "2020-07-29T19:39:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NTI5MA==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463165290", "bodyText": "What does this console.log's do? Are they executed?", "author": "aaltay", "createdAt": "2020-07-30T17:44:02Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/__tests__/kernel/KernelModel.test.ts", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * Tests for KernelModel module.\n+ *\n+ * Non camelcase fields are nbformat fields used in notebooks. Lint is ignored\n+ * for them.\n+ */\n+\n+import { KernelModel } from '../../kernel/KernelModel';\n+\n+const fakeSessionContext = {\n+  session: {\n+    kernel: {\n+      requestExecute: function(): object {\n+        return {\n+          onIOPub: function(): void {\n+            // do nothing\n+          }\n+        };\n+      }\n+    }\n+  }\n+};\n+\n+it('creates new future with IOPub callbacks when executing new code in kernel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('new code');\n+  expect(kernelModel.future).not.toBe(null);\n+  expect(kernelModel.future.onIOPub).not.toBe(null);\n+});\n+\n+it('handles execute result from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  kernelModel.future.onIOPub({\n+    header: {\n+      // eslint-disable-next-line @typescript-eslint/camelcase\n+      msg_type: 'execute_result'\n+    },\n+    content: {\n+      data: {\n+        'text/plain':\n+          '\\'{\"pipelineId\": {\"metadata\": {\"name\": \"pipeline\", \"inMemoryId\": 1, \"type\": \"pipeline\"}, \"pcolls\": {\"pcollId\": {\"name\": \"pcoll\", \"inMemoryId\": 2, \"type\": \"pcollection\"}}}}\\''\n+      },\n+      channel: 'iopub'\n+    }\n+  } as any);\n+  expect(kernelModel.executeResult).toEqual({\n+    pipelineId: {\n+      metadata: {\n+        name: 'pipeline',\n+        inMemoryId: 1,\n+        type: 'pipeline'\n+      },\n+      pcolls: {\n+        pcollId: {\n+          name: 'pcoll',\n+          inMemoryId: 2,\n+          type: 'pcollection'\n+        }\n+      }\n+    }\n+  });\n+});\n+\n+it('handles display data from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  const displayData = {\n+    // eslint-disable-next-line @typescript-eslint/camelcase\n+    output_type: 'display_data',\n+    data: {\n+      'text/html': '<div></div>',\n+      'application/javascript': 'console.log(1);'", "originalCommit": "8f24efaaa65a5e520f29afbd7842da4c20194156", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MjM0NA==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463182344", "bodyText": "It's a valid Javascript statement that logs to the console.\nIn the test, if it is executed, the result shows up in the terminal.\nThis unit test doesn't do the execution though because it's just a data model not a UI component.", "author": "KevinGG", "createdAt": "2020-07-30T18:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NTI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2Njc3OQ==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463166779", "bodyText": "it seems to replace a backslash and a quote? \\\\'", "author": "aaltay", "createdAt": "2020-07-30T17:46:47Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/kernel/KernelModel.ts", "diffHunk": "@@ -0,0 +1,161 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * The module holds the model that handles messaging between the frontend and\n+ * the connected kernel.\n+ */\n+\n+import { ISessionContext } from '@jupyterlab/apputils';\n+\n+import {\n+  IDisplayData,\n+  IDisplayUpdate,\n+  IExecuteResult\n+} from '@jupyterlab/nbformat';\n+\n+import { Kernel, KernelMessage } from '@jupyterlab/services';\n+\n+import { ISignal, Signal } from '@lumino/signaling';\n+\n+import { KernelCode } from '../kernel/KernelCode';\n+\n+export class KernelModel {\n+  constructor(sessionContext: ISessionContext, enableConsoleLog = false) {\n+    this._sessionContext = sessionContext;\n+    this._enableConsoleLog = enableConsoleLog;\n+  }\n+\n+  get future(): Kernel.IFuture<\n+    KernelMessage.IExecuteRequestMsg,\n+    KernelMessage.IExecuteReplyMsg\n+  > | null {\n+    return this._future;\n+  }\n+\n+  set future(\n+    value: Kernel.IFuture<\n+      KernelMessage.IExecuteRequestMsg,\n+      KernelMessage.IExecuteReplyMsg\n+    > | null\n+  ) {\n+    if (this._future === value) {\n+      return;\n+    }\n+\n+    if (this._future) {\n+      this._future.dispose();\n+    }\n+\n+    this._future = value;\n+\n+    if (!value) {\n+      return;\n+    }\n+\n+    value.onIOPub = this._onIOPub.bind(this);\n+  }\n+\n+  get executeResult(): object {\n+    if (this._executeResult) {\n+      const dataInPlainText = this._executeResult.data['text/plain'] as string;\n+      if (dataInPlainText) {\n+        try {\n+          // The slice removes trailing single quotes from the nbformat output.\n+          // The replace removes literal backslashes from the nbformat output.", "originalCommit": "8f24efaaa65a5e520f29afbd7842da4c20194156", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4Mzc5OA==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463183798", "bodyText": "It's removing characters in nbformat texts.\nKernel generates json.\nWhen messaged to frontend by Jupyter in nbformat, the text becomes 'json_with_backslashes'.\nThis removes the \"'\" from both ends of the string.\nThen removes all the backlashes.\nThe result text will be a valid json that is parsable.", "author": "KevinGG", "createdAt": "2020-07-30T18:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2Njc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NzY2MQ==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463167661", "bodyText": "If silent is the name of the underlying api, why do we use an oppositely behaving expectReply flag?", "author": "aaltay", "createdAt": "2020-07-30T17:48:07Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/kernel/KernelModel.ts", "diffHunk": "@@ -0,0 +1,161 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * The module holds the model that handles messaging between the frontend and\n+ * the connected kernel.\n+ */\n+\n+import { ISessionContext } from '@jupyterlab/apputils';\n+\n+import {\n+  IDisplayData,\n+  IDisplayUpdate,\n+  IExecuteResult\n+} from '@jupyterlab/nbformat';\n+\n+import { Kernel, KernelMessage } from '@jupyterlab/services';\n+\n+import { ISignal, Signal } from '@lumino/signaling';\n+\n+import { KernelCode } from '../kernel/KernelCode';\n+\n+export class KernelModel {\n+  constructor(sessionContext: ISessionContext, enableConsoleLog = false) {\n+    this._sessionContext = sessionContext;\n+    this._enableConsoleLog = enableConsoleLog;\n+  }\n+\n+  get future(): Kernel.IFuture<\n+    KernelMessage.IExecuteRequestMsg,\n+    KernelMessage.IExecuteReplyMsg\n+  > | null {\n+    return this._future;\n+  }\n+\n+  set future(\n+    value: Kernel.IFuture<\n+      KernelMessage.IExecuteRequestMsg,\n+      KernelMessage.IExecuteReplyMsg\n+    > | null\n+  ) {\n+    if (this._future === value) {\n+      return;\n+    }\n+\n+    if (this._future) {\n+      this._future.dispose();\n+    }\n+\n+    this._future = value;\n+\n+    if (!value) {\n+      return;\n+    }\n+\n+    value.onIOPub = this._onIOPub.bind(this);\n+  }\n+\n+  get executeResult(): object {\n+    if (this._executeResult) {\n+      const dataInPlainText = this._executeResult.data['text/plain'] as string;\n+      if (dataInPlainText) {\n+        try {\n+          // The slice removes trailing single quotes from the nbformat output.\n+          // The replace removes literal backslashes from the nbformat output.\n+          const dataInJsonString = dataInPlainText\n+            .slice(1, -1)\n+            .replace(/\\\\'/g, \"'\");\n+          return JSON.parse(dataInJsonString);\n+        } catch (e) {\n+          console.error(e);\n+          return {};\n+        }\n+      }\n+    }\n+    return {};\n+  }\n+\n+  get displayData(): Array<IDisplayData> {\n+    return this._displayData;\n+  }\n+\n+  get displayUpdate(): Array<IDisplayUpdate> {\n+    return this._displayUpdate;\n+  }\n+\n+  get stateChanged(): ISignal<KernelModel, void> {\n+    return this._stateChanged;\n+  }\n+\n+  execute(code: string, expectReply = true): void {\n+    // Dispose the kernel future so that no more IOPub will be handled.\n+    if (this.future) {\n+      this.future.dispose();\n+      this.future = null;\n+    }\n+    // Clear the outputs from previous kernel executions.\n+    this._executeResult = null;\n+    this._displayData.length = 0;\n+    this._displayUpdate.length = 0;\n+    if (!this._sessionContext || !this._sessionContext.session?.kernel) {\n+      return;\n+    }\n+    this.future = this._sessionContext.session?.kernel?.requestExecute({\n+      code: KernelCode.COMMON_KERNEL_IMPORTS + code,\n+      silent: !expectReply,", "originalCommit": "8f24efaaa65a5e520f29afbd7842da4c20194156", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4NTk2MQ==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463185961", "bodyText": "The problem with silent is that it's confusing with the existence of store_history.\nIntuitively, if silent, the kernel execution should not store history. However, it's not that case.\nsilent only means if the execution should return a result. The history is stored. The side effects are obvious.\nSo you will see execution_count increased even when you set silent to true.\nFacading it with expectReply makes it clear when using the model.", "author": "KevinGG", "createdAt": "2020-07-30T18:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NzY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2OTAxNg==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463169016", "bodyText": "what is the difference between display data and display update messages?", "author": "aaltay", "createdAt": "2020-07-30T17:50:21Z", "path": "sdks/python/apache_beam/runners/interactive/extensions/apache-beam-jupyterlab-sidepanel/src/__tests__/kernel/KernelModel.test.ts", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n+// use this file except in compliance with the License. You may obtain a copy of\n+// the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n+// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+// License for the specific language governing permissions and limitations under\n+// the License.\n+\n+/**\n+ * Tests for KernelModel module.\n+ *\n+ * Non camelcase fields are nbformat fields used in notebooks. Lint is ignored\n+ * for them.\n+ */\n+\n+import { KernelModel } from '../../kernel/KernelModel';\n+\n+const fakeSessionContext = {\n+  session: {\n+    kernel: {\n+      requestExecute: function(): object {\n+        return {\n+          onIOPub: function(): void {\n+            // do nothing\n+          }\n+        };\n+      }\n+    }\n+  }\n+};\n+\n+it('creates new future with IOPub callbacks when executing new code in kernel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('new code');\n+  expect(kernelModel.future).not.toBe(null);\n+  expect(kernelModel.future.onIOPub).not.toBe(null);\n+});\n+\n+it('handles execute result from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  kernelModel.future.onIOPub({\n+    header: {\n+      // eslint-disable-next-line @typescript-eslint/camelcase\n+      msg_type: 'execute_result'\n+    },\n+    content: {\n+      data: {\n+        'text/plain':\n+          '\\'{\"pipelineId\": {\"metadata\": {\"name\": \"pipeline\", \"inMemoryId\": 1, \"type\": \"pipeline\"}, \"pcolls\": {\"pcollId\": {\"name\": \"pcoll\", \"inMemoryId\": 2, \"type\": \"pcollection\"}}}}\\''\n+      },\n+      channel: 'iopub'\n+    }\n+  } as any);\n+  expect(kernelModel.executeResult).toEqual({\n+    pipelineId: {\n+      metadata: {\n+        name: 'pipeline',\n+        inMemoryId: 1,\n+        type: 'pipeline'\n+      },\n+      pcolls: {\n+        pcollId: {\n+          name: 'pcoll',\n+          inMemoryId: 2,\n+          type: 'pcollection'\n+        }\n+      }\n+    }\n+  });\n+});\n+\n+it('handles display data from IOPub channel', () => {\n+  const kernelModel = new KernelModel(fakeSessionContext as any);\n+  kernelModel.execute('any code');\n+  const displayData = {\n+    // eslint-disable-next-line @typescript-eslint/camelcase\n+    output_type: 'display_data',\n+    data: {\n+      'text/html': '<div></div>',\n+      'application/javascript': 'console.log(1);'\n+    },\n+    metadata: {\n+      some: 'data'\n+    }\n+  };\n+\n+  kernelModel.future.onIOPub({\n+    header: {\n+      // eslint-disable-next-line @typescript-eslint/camelcase\n+      msg_type: 'display_data'\n+    },\n+    content: displayData\n+  } as any);\n+  expect(kernelModel.displayData).toEqual([displayData]);\n+});\n+\n+it('handles display update from IOPub channel', () => {", "originalCommit": "8f24efaaa65a5e520f29afbd7842da4c20194156", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4ODE2NQ==", "url": "https://github.com/apache/beam/pull/12372#discussion_r463188165", "bodyText": "Think of display data as incrementally displaying contents while display update as modifying contents already displayed.\nAn example,\n\ndisplay data is [1, 2 ,3], you'll see 1 2 3 being displayed;\ndisplay update is [1, 2, 3] for a same display_id, you'll see 1, then it becomes 2, then it becomes 3.", "author": "KevinGG", "createdAt": "2020-07-30T18:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2OTAxNg=="}], "type": "inlineReview"}]}