{"pr_number": 11737, "pr_title": "[BEAM-9984] Support BIT_OR aggregation function in Beam SQL", "pr_createdAt": "2020-05-18T00:43:43Z", "pr_url": "https://github.com/apache/beam/pull/11737", "timeline": [{"oid": "bdda62c5d448bf773fe2f0aa41aec208ab26cf2d", "url": "https://github.com/apache/beam/commit/bdda62c5d448bf773fe2f0aa41aec208ab26cf2d", "message": "[BEAM-9984] Support BIT_OR aggregation function in Beam SQL", "committedDate": "2020-05-18T00:32:14Z", "type": "commit"}, {"oid": "ac91f5ae9bcf3416de9a37e9f9ae838041cd8e25", "url": "https://github.com/apache/beam/commit/ac91f5ae9bcf3416de9a37e9f9ae838041cd8e25", "message": "[BEAM-9984] Fixed error message typos", "committedDate": "2020-05-18T01:14:17Z", "type": "commit"}, {"oid": "569a0a238bf73d1937af099206b9cfe8683c19dc", "url": "https://github.com/apache/beam/commit/569a0a238bf73d1937af099206b9cfe8683c19dc", "message": "[BEAM-9984] Added ZetaSQL test", "committedDate": "2020-05-18T02:32:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NjQ1MQ==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426856451", "bodyText": "Ah I didn't realized that Calcite does not do type validation on argument type for a specific function. ZetaSQL does it.", "author": "amaliujia", "createdAt": "2020-05-18T19:47:46Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -171,10 +173,18 @@ static CombineFn createAvg(Schema.FieldType fieldType) {\n         return new BigDecimalAvg();\n       default:\n         throw new UnsupportedOperationException(\n-            String.format(\"[%s] is not support in AVG\", fieldType));\n+            String.format(\"[%s] is not supported in AVG\", fieldType));\n     }\n   }\n \n+  static CombineFn createBitOr(Schema.FieldType fieldType) {\n+    if (fieldType.getTypeName() == TypeName.INT64) {\n+      return new BitOr();\n+    }\n+    throw new UnsupportedOperationException(\n+        String.format(\"[%s] is not supported in BIT_OR\", fieldType));", "originalCommit": "569a0a238bf73d1937af099206b9cfe8683c19dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODA0Nw==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426918047", "bodyText": "I saw the other functions in this class do something similar, so I thought I'd do so as well", "author": "omarismail94", "createdAt": "2020-05-18T22:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NjQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426859494", "bodyText": "I am thinking there is no need to define a class to wrap long val? Just use Long?\nAlso you could consider this interface: https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/Sum.java#L129?", "author": "amaliujia", "createdAt": "2020-05-18T19:54:01Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/transform/BeamBuiltinAggregations.java", "diffHunk": "@@ -347,4 +357,35 @@ public BigDecimal toBigDecimal(BigDecimal record) {\n       return record;\n     }\n   }\n+\n+  static class BitOr<T extends Number> extends CombineFn<T, BitOr.Accum, Long> {\n+    static class Accum {", "originalCommit": "569a0a238bf73d1937af099206b9cfe8683c19dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTQ3Ng==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426931476", "bodyText": "Hmm, Im not sure if this works. How would I create the accumulator? I can't do new Long(). That's why I wrapped long in Accum", "author": "omarismail94", "createdAt": "2020-05-18T22:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNTQ2MQ==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426935461", "bodyText": "Actually, this might work, let me test this\n  static class BitOr<T extends Number> extends CombineFn<T, Long, Long> {\n    @Override\n    public Long createAccumulator() {\n      return 0L;\n    }\n\n    @Override\n    public Long addInput(Long accum, T input) {\n      return accum | input.longValue();\n    }\n\n    @Override\n    public Long mergeAccumulators(Iterable<Long> accums) {\n      Long merged = createAccumulator();\n      for (Long accum : accums) {\n        merged = merged | accum;\n      }\n      return merged;\n    }\n\n    @Override\n    public Long extractOutput(Long accum) {\n      return accum;\n    }\n  }\n}", "author": "omarismail94", "createdAt": "2020-05-18T22:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNTk3Ng==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426935976", "bodyText": "It worked! Will commit this now!", "author": "omarismail94", "createdAt": "2020-05-18T22:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTcwNg==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426859706", "bodyText": "Nice catch!", "author": "amaliujia", "createdAt": "2020-05-18T19:54:26Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -2836,7 +2836,6 @@ public void testDistinctOnNull() {\n   }\n \n   @Test\n-  @Ignore(\"BeamSQL does not support ANY_VALUE\")", "originalCommit": "569a0a238bf73d1937af099206b9cfe8683c19dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODExNA==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426918114", "bodyText": "Thanks!", "author": "omarismail94", "createdAt": "2020-05-18T22:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTkzMA==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426859930", "bodyText": "Nice! Surprisingly you can figure out how to enable this function in ZetaSQL dialect!", "author": "amaliujia", "createdAt": "2020-05-18T19:54:51Z", "path": "sdks/java/extensions/sql/zetasql/src/test/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSQLDialectSpecTest.java", "diffHunk": "@@ -4500,6 +4499,23 @@ public void testIsNullTrueFalse() {\n     pipeline.run().waitUntilFinish(Duration.standardMinutes(PIPELINE_EXECUTION_WAITTIME_MINUTES));\n   }\n \n+  @Test\n+  public void testZetaSQLBitOr() {", "originalCommit": "569a0a238bf73d1937af099206b9cfe8683c19dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODMwMA==", "url": "https://github.com/apache/beam/pull/11737#discussion_r426918300", "bodyText": "Zeta was surprisingly easier than Calcite!", "author": "omarismail94", "createdAt": "2020-05-18T22:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTkzMA=="}], "type": "inlineReview"}, {"oid": "f6c1ca5fadcc79f35a661001726cd340f9504b6b", "url": "https://github.com/apache/beam/commit/f6c1ca5fadcc79f35a661001726cd340f9504b6b", "message": "[BEAM-9984] Cleand up BitOr class so it does not need a nested static class", "committedDate": "2020-05-18T22:58:06Z", "type": "commit"}]}