{"pr_number": 11141, "pr_title": "[BEAM-7923] Include side effects in p.run", "pr_createdAt": "2020-03-16T22:29:35Z", "pr_url": "https://github.com/apache/beam/pull/11141", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzAwNQ==", "url": "https://github.com/apache/beam/pull/11141#discussion_r393347005", "bodyText": "This test was flaky because the dataframe columns can be built in arbitrary orders. This option makes sure it doesn't take column positioning into consideration since we only care about the equivalence of data.", "author": "KevinGG", "createdAt": "2020-03-16T22:33:21Z", "path": "sdks/python/apache_beam/runners/interactive/utils_test.py", "diffHunk": "@@ -56,7 +56,7 @@ def test_parse_windowedvalue_with_window_info(self):\n         [['a', 2, int(1e6), els[0].windows, els[0].pane_info],\n          ['b', 3, int(1e6), els[1].windows, els[1].pane_info]],\n         columns=[0, 1, 'event_time', 'windows', 'pane_info'])\n-    pd.testing.assert_frame_equal(actual_df, expected_df)\n+    pd.testing.assert_frame_equal(actual_df, expected_df, check_like=True)", "originalCommit": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTA3Ng==", "url": "https://github.com/apache/beam/pull/11141#discussion_r393351076", "bodyText": "Do you want to track, mark side effects differently? Does users want to specifically track these pcollections?", "author": "aaltay", "createdAt": "2020-03-16T22:45:32Z", "path": "sdks/python/apache_beam/runners/interactive/pipeline_instrument.py", "diffHunk": "@@ -418,10 +420,16 @@ def visit_transform(self, transform_node):\n                       tuple(ie.current_env().options.capturable_sources)):\n           unbounded_source_pcolls.update(transform_node.outputs.values())\n         cacheable_inputs.update(self._pin._cacheable_inputs(transform_node))\n+        ins, outs = self._pin._all_inputs_outputs(transform_node)\n+        all_inputs.update(ins)\n+        all_outputs.update(outs)\n \n     v = InstrumentVisitor(self)\n     self._pipeline.visit(v)\n \n+    # Every output PCollection that is never used as an input PCollection is\n+    # considered as a side effect of the pipeline run and should be included.\n+    self._extended_targets.update(all_outputs.difference(all_inputs))", "originalCommit": "44f4af4ee948b9791cd8f4944c5d225540f3c9d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1Mjc2OA==", "url": "https://github.com/apache/beam/pull/11141#discussion_r393352768", "bodyText": "It's not necessary. The intended behavior is not ambiguous: When the user uses show, head, collect APIs, these PCollections are excluded completely as the user explicitly wishes. And when the user invokes p.run(), all transforms in the pipeline should be executed as expected.\nThis change is only to make sure that the prune logic doesn't affect the above intended behavior.", "author": "KevinGG", "createdAt": "2020-03-16T22:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTA3Ng=="}], "type": "inlineReview"}, {"oid": "b458cfdc65086b7476f0c949a1389dccf8a681f1", "url": "https://github.com/apache/beam/commit/b458cfdc65086b7476f0c949a1389dccf8a681f1", "message": "[BEAM-7923] Include side effects in p.run\n\n1. PCollections never used as inputs and not watched, such as sinks without being assigned\nto variables will be pruned before `p.run()`. The change makes sure that\nthese side effect PCollections are now considered as extended targets\nand will be executed on `p.run()`.\n2. Note the change will not affect `show`, `head` and `collect` because\nthey have an additional pipeline fragment logic that already prunes\neverything unrelated before the instrumenting and the prune logic inside\ninstrumenting.", "committedDate": "2020-03-17T19:27:57Z", "type": "commit"}, {"oid": "b458cfdc65086b7476f0c949a1389dccf8a681f1", "url": "https://github.com/apache/beam/commit/b458cfdc65086b7476f0c949a1389dccf8a681f1", "message": "[BEAM-7923] Include side effects in p.run\n\n1. PCollections never used as inputs and not watched, such as sinks without being assigned\nto variables will be pruned before `p.run()`. The change makes sure that\nthese side effect PCollections are now considered as extended targets\nand will be executed on `p.run()`.\n2. Note the change will not affect `show`, `head` and `collect` because\nthey have an additional pipeline fragment logic that already prunes\neverything unrelated before the instrumenting and the prune logic inside\ninstrumenting.", "committedDate": "2020-03-17T19:27:57Z", "type": "forcePushed"}]}