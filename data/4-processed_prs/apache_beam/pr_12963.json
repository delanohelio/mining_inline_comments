{"pr_number": 12963, "pr_title": "[BEAM-10983] Add getting started from Spark page", "pr_createdAt": "2020-09-29T15:54:28Z", "pr_url": "https://github.com/apache/beam/pull/12963", "timeline": [{"oid": "854ed5bd06f88860443dfd0e313cbc6f985c1a6e", "url": "https://github.com/apache/beam/commit/854ed5bd06f88860443dfd0e313cbc6f985c1a6e", "message": "[BEAM-10983] Add getting started from Spark page", "committedDate": "2020-09-29T15:52:58Z", "type": "commit"}, {"oid": "c484e68489db6551aff70f6dde765ec0ca89d58d", "url": "https://github.com/apache/beam/commit/c484e68489db6551aff70f6dde765ec0ca89d58d", "message": "Add \"From Apache Spark\" entry to side menu", "committedDate": "2020-09-29T17:17:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxODY1MQ==", "url": "https://github.com/apache/beam/pull/12963#discussion_r497018651", "bodyText": "The Beam and Spark APIs are mostly equivalent. The backend stuff, not so much.\nI might reword this as, \"The Beam and Spark APIs are similar.\"", "author": "ibzib", "createdAt": "2020-09-29T20:18:18Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,245 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+Beam and Spark are mostly equivalent, so you already know the basic concepts.", "originalCommit": "c484e68489db6551aff70f6dde765ec0ca89d58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2OTk1OA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508069958", "bodyText": "Thanks, done", "author": "davidcavazos", "createdAt": "2020-10-19T21:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxODY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMTYwMw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r497021603", "bodyText": "It might be worth mentioning a couple other important details here:\n\nBeam pipelines are constructed lazily, in other words, no computation happens until pipeline.run() is called.\nwith beam.Pipeline() as pipeline implicitly calls pipeline.run().", "author": "ibzib", "createdAt": "2020-09-29T20:23:45Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,245 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+Beam and Spark are mostly equivalent, so you already know the basic concepts.\n+\n+A collection of elements in Spark is called a _Resilient Distributed Dataset_ (RDD),\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    result = (\n+        sc.parallelize([1, 2, 3, 4])\n+        .map(lambda x: x * 2)\n+        .reduce(lambda x, y: x + y)\n+    )\n+    print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the", "originalCommit": "c484e68489db6551aff70f6dde765ec0ca89d58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3OTczNw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508079737", "bodyText": "I added a note just below the example.", "author": "davidcavazos", "createdAt": "2020-10-19T21:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMTYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMjgzNA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r497022834", "bodyText": "Nit: should we add a label here too for consistency?", "author": "ibzib", "createdAt": "2020-09-29T20:25:59Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,245 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+Beam and Spark are mostly equivalent, so you already know the basic concepts.\n+\n+A collection of elements in Spark is called a _Resilient Distributed Dataset_ (RDD),\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    result = (\n+        sc.parallelize([1, 2, 3, 4])\n+        .map(lambda x: x * 2)\n+        .reduce(lambda x, y: x + y)\n+    )\n+    print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+A label can optionally be added to a transform using the\n+_right shift operator_ `>>` like `data | 'My description' >> beam.Map(...)`.\n+This serves both as comments and makes your pipeline easier to debug.\n+\n+This is how the pipeline looks after adding labels.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | 'Create numbers' >> beam.Create([1, 2, 3, 4])\n+        | 'Multiply by two' >> beam.Map(lambda x: x * 2)\n+        | 'Sum everything' >> beam.CombineGlobally(sum)\n+        | beam.Map(print)", "originalCommit": "c484e68489db6551aff70f6dde765ec0ca89d58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDM3MA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508070370", "bodyText": "Added", "author": "davidcavazos", "createdAt": "2020-10-19T21:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMjgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjgzMA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r497026830", "bodyText": "It'd be really nice if each Beam transform was linked to its respective documentation/transforms page.", "author": "ibzib", "createdAt": "2020-09-29T20:33:16Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,245 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+Beam and Spark are mostly equivalent, so you already know the basic concepts.\n+\n+A collection of elements in Spark is called a _Resilient Distributed Dataset_ (RDD),\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    result = (\n+        sc.parallelize([1, 2, 3, 4])\n+        .map(lambda x: x * 2)\n+        .reduce(lambda x, y: x + y)\n+    )\n+    print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+A label can optionally be added to a transform using the\n+_right shift operator_ `>>` like `data | 'My description' >> beam.Map(...)`.\n+This serves both as comments and makes your pipeline easier to debug.\n+\n+This is how the pipeline looks after adding labels.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | 'Create numbers' >> beam.Create([1, 2, 3, 4])\n+        | 'Multiply by two' >> beam.Map(lambda x: x * 2)\n+        | 'Sum everything' >> beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+## Setup\n+\n+Here's a comparison on how to get started both in PySpark and Beam.\n+\n+{{< table >}}\n+<table>\n+<tr>\n+    <th></th>\n+    <th>PySpark</th>\n+    <th>Beam</th>\n+</tr>\n+<tr>\n+    <td><b>Install</b></td>\n+    <td><code>$ pip install pyspark</code></td>\n+    <td><code>$ pip install apache-beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Imports</b></td>\n+    <td><code>import pyspark</code></td>\n+    <td><code>import apache_beam as beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating a<br>local pipeline</b></td>\n+    <td>\n+        <code>with pyspark.SparkContext() as sc:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+    <td>\n+        <code>with beam.Pipeline() as pipeline:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Creating values</b></td>\n+    <td><code>values = sc.parallelize([1, 2, 3, 4])</code></td>\n+    <td><code>values = pipeline | beam.Create([1, 2, 3, 4])</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating<br>key-value pairs</b></td>\n+    <td>\n+        <code>pairs = sc.parallelize([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+    <td>\n+        <code>pairs = pipeline | beam.Create([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Running a<br>local pipeline</b></td>\n+    <td><code>$ spark-submit spark_pipeline.py</code></td>\n+    <td><code>$ python beam_pipeline.py</code></td>\n+</tr>\n+</table>\n+{{< /table >}}\n+\n+## Transforms\n+\n+Here are the equivalents of some common transforms in both PySpark and Beam.\n+\n+{{< table >}}", "originalCommit": "c484e68489db6551aff70f6dde765ec0ca89d58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MzkxMA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508083910", "bodyText": "Sure, the table gets a little uglier, and definitely over 80 characters long, but I can do that.\nPS: I tried using reference links, but the website doesn't like them to be inside a table (even HTML instead of Markdown), so they have to be inlined if we want them here.", "author": "davidcavazos", "createdAt": "2020-10-19T21:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzE2Mw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r497033163", "bodyText": "Probably better to use lists instead of tuples in Beam. I'm not sure tuples are adequately tested/supported: https://the-asf.slack.com/archives/CBDNLQZM1/p1598454585014000", "author": "ibzib", "createdAt": "2020-09-29T20:39:38Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,245 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+Beam and Spark are mostly equivalent, so you already know the basic concepts.\n+\n+A collection of elements in Spark is called a _Resilient Distributed Dataset_ (RDD),\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    result = (\n+        sc.parallelize([1, 2, 3, 4])\n+        .map(lambda x: x * 2)\n+        .reduce(lambda x, y: x + y)\n+    )\n+    print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+A label can optionally be added to a transform using the\n+_right shift operator_ `>>` like `data | 'My description' >> beam.Map(...)`.\n+This serves both as comments and makes your pipeline easier to debug.\n+\n+This is how the pipeline looks after adding labels.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | 'Create numbers' >> beam.Create([1, 2, 3, 4])\n+        | 'Multiply by two' >> beam.Map(lambda x: x * 2)\n+        | 'Sum everything' >> beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+## Setup\n+\n+Here's a comparison on how to get started both in PySpark and Beam.\n+\n+{{< table >}}\n+<table>\n+<tr>\n+    <th></th>\n+    <th>PySpark</th>\n+    <th>Beam</th>\n+</tr>\n+<tr>\n+    <td><b>Install</b></td>\n+    <td><code>$ pip install pyspark</code></td>\n+    <td><code>$ pip install apache-beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Imports</b></td>\n+    <td><code>import pyspark</code></td>\n+    <td><code>import apache_beam as beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating a<br>local pipeline</b></td>\n+    <td>\n+        <code>with pyspark.SparkContext() as sc:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+    <td>\n+        <code>with beam.Pipeline() as pipeline:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Creating values</b></td>\n+    <td><code>values = sc.parallelize([1, 2, 3, 4])</code></td>\n+    <td><code>values = pipeline | beam.Create([1, 2, 3, 4])</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating<br>key-value pairs</b></td>\n+    <td>\n+        <code>pairs = sc.parallelize([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+    <td>\n+        <code>pairs = pipeline | beam.Create([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>", "originalCommit": "c484e68489db6551aff70f6dde765ec0ca89d58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MjQ2Mw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508082463", "bodyText": "I don't have an @apache.org email so I can't open the discussion.\nI thought tuples were supported better than lists. I've been using tuples for all the samples and I've never had an issue. I also think type-wise, tuples are \"allowed\" to have elements of any/different types, while lists should only be of one type. On a type checker like mypy or any other typed language, it would be a compile error to have a list of two different types, unless you use Any which should be discouraged.\nI think I would prefer to keep these as tuples, @aaltay what do you think?", "author": "davidcavazos", "createdAt": "2020-10-19T21:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5NTA1Mw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508095053", "bodyText": "I don't have an @apache.org email so I can't open the discussion.\n\nAnyone should be able to join the ASF slack. There is an invite link on the Beam website: https://beam.apache.org/community/contact-us/\nThe case I linked might be an isolated bug. If tuples have worked for you, I'm fine with keeping them in the documentation.", "author": "ibzib", "createdAt": "2020-10-19T22:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzODM4OQ==", "url": "https://github.com/apache/beam/pull/12963#discussion_r497038389", "bodyText": "Nit: clarify what you mean here by \"Python value\" (in this case it's an int value).", "author": "ibzib", "createdAt": "2020-09-29T20:44:44Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,245 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+Beam and Spark are mostly equivalent, so you already know the basic concepts.\n+\n+A collection of elements in Spark is called a _Resilient Distributed Dataset_ (RDD),\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    result = (\n+        sc.parallelize([1, 2, 3, 4])\n+        .map(lambda x: x * 2)\n+        .reduce(lambda x, y: x + y)\n+    )\n+    print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+A label can optionally be added to a transform using the\n+_right shift operator_ `>>` like `data | 'My description' >> beam.Map(...)`.\n+This serves both as comments and makes your pipeline easier to debug.\n+\n+This is how the pipeline looks after adding labels.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | 'Create numbers' >> beam.Create([1, 2, 3, 4])\n+        | 'Multiply by two' >> beam.Map(lambda x: x * 2)\n+        | 'Sum everything' >> beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+## Setup\n+\n+Here's a comparison on how to get started both in PySpark and Beam.\n+\n+{{< table >}}\n+<table>\n+<tr>\n+    <th></th>\n+    <th>PySpark</th>\n+    <th>Beam</th>\n+</tr>\n+<tr>\n+    <td><b>Install</b></td>\n+    <td><code>$ pip install pyspark</code></td>\n+    <td><code>$ pip install apache-beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Imports</b></td>\n+    <td><code>import pyspark</code></td>\n+    <td><code>import apache_beam as beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating a<br>local pipeline</b></td>\n+    <td>\n+        <code>with pyspark.SparkContext() as sc:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+    <td>\n+        <code>with beam.Pipeline() as pipeline:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Creating values</b></td>\n+    <td><code>values = sc.parallelize([1, 2, 3, 4])</code></td>\n+    <td><code>values = pipeline | beam.Create([1, 2, 3, 4])</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating<br>key-value pairs</b></td>\n+    <td>\n+        <code>pairs = sc.parallelize([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+    <td>\n+        <code>pairs = pipeline | beam.Create([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Running a<br>local pipeline</b></td>\n+    <td><code>$ spark-submit spark_pipeline.py</code></td>\n+    <td><code>$ python beam_pipeline.py</code></td>\n+</tr>\n+</table>\n+{{< /table >}}\n+\n+## Transforms\n+\n+Here are the equivalents of some common transforms in both PySpark and Beam.\n+\n+{{< table >}}\n+|                   | PySpark                               | Beam                                                    |\n+|-------------------|---------------------------------------|---------------------------------------------------------|\n+| **Map**           | `values.map(lambda x: x * 2)`         | `values | beam.Map(lambda x: x * 2)`                    |\n+| **Filter**        | `values.filter(lambda x: x % 2 == 0)` | `values | beam.Filter(lambda x: x % 2 == 0)`            |\n+| **FlatMap**       | `values.flatMap(lambda x: range(x))`  | `values | beam.FlatMap(lambda x: range(x))`             |\n+| **Group by key**  | `pairs.groupByKey()`                  | `pairs | beam.GroupByKey()`                             |\n+| **Reduce**        | `values.reduce(lambda x, y: x+y)`     | `values | beam.CombineGlobally(sum)`                    |\n+| **Reduce by key** | `pairs.reduceByKey(lambda x, y: x+y)` | `pairs | beam.CombinePerKey(sum)`                       |\n+| **Distinct**      | `values.distinct()`                   | `values | beam.Distinct()`                              |\n+| **Count**         | `values.count()`                      | `values | beam.combiners.Count.Globally()`              |\n+| **Count by key**  | `pairs.countByKey()`                  | `pairs | beam.combiners.Count.PerKey()`                 |\n+| **Take smallest** | `values.takeOrdered(3)`               | `values | beam.combiners.Top.Smallest(3)`               |\n+| **Take largest**  | `values.takeOrdered(3, lambda x: -x)` | `values | beam.combiners.Top.Largest(3)`                |\n+| **Random sample** | `values.takeSample(False, 3)`         | `values | beam.combiners.Sample.FixedSizeGlobally(3)`   |\n+| **Union**         | `values.union(otherValues)`           | `(values, otherValues) | beam.Flatten()`                |\n+| **Co-group**      | `pairs.cogroup(otherPairs)`           | `{'Xs': pairs, 'Ys': otherPairs} | beam.CoGroupByKey()` |\n+{{< /table >}}\n+\n+> \u2139\ufe0f To learn more about the transforms available in Beam, check the\n+> [Python transform gallery](/documentation/transforms/python/overview).\n+\n+## Using calculated values\n+\n+Since we are working in potentially distributed environments,\n+we can't guarantee that the results we've calculated are available at any given machine.\n+\n+In PySpark, we can get a result from a collection of elements (RDD) by using\n+`data.collect()`, or other aggregations such as `reduce()`, `count()` and more.\n+\n+Here's an example to scale numbers into a range between zero and one.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    values = sc.parallelize([1, 2, 3, 4])\n+    total = values.reduce(lambda x, y: x + y)\n+\n+    # We can simply use `total` since it's already a Python value from `reduce`.", "originalCommit": "c484e68489db6551aff70f6dde765ec0ca89d58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MDI3MQ==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508090271", "bodyText": "Done", "author": "davidcavazos", "createdAt": "2020-10-19T22:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzODM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0NTQyNg==", "url": "https://github.com/apache/beam/pull/12963#discussion_r497045426", "bodyText": "Link to /documentation/programming-guide/#side-inputs.", "author": "ibzib", "createdAt": "2020-09-29T20:51:38Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,245 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+Beam and Spark are mostly equivalent, so you already know the basic concepts.\n+\n+A collection of elements in Spark is called a _Resilient Distributed Dataset_ (RDD),\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    result = (\n+        sc.parallelize([1, 2, 3, 4])\n+        .map(lambda x: x * 2)\n+        .reduce(lambda x, y: x + y)\n+    )\n+    print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+A label can optionally be added to a transform using the\n+_right shift operator_ `>>` like `data | 'My description' >> beam.Map(...)`.\n+This serves both as comments and makes your pipeline easier to debug.\n+\n+This is how the pipeline looks after adding labels.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | 'Create numbers' >> beam.Create([1, 2, 3, 4])\n+        | 'Multiply by two' >> beam.Map(lambda x: x * 2)\n+        | 'Sum everything' >> beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+## Setup\n+\n+Here's a comparison on how to get started both in PySpark and Beam.\n+\n+{{< table >}}\n+<table>\n+<tr>\n+    <th></th>\n+    <th>PySpark</th>\n+    <th>Beam</th>\n+</tr>\n+<tr>\n+    <td><b>Install</b></td>\n+    <td><code>$ pip install pyspark</code></td>\n+    <td><code>$ pip install apache-beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Imports</b></td>\n+    <td><code>import pyspark</code></td>\n+    <td><code>import apache_beam as beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating a<br>local pipeline</b></td>\n+    <td>\n+        <code>with pyspark.SparkContext() as sc:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+    <td>\n+        <code>with beam.Pipeline() as pipeline:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Creating values</b></td>\n+    <td><code>values = sc.parallelize([1, 2, 3, 4])</code></td>\n+    <td><code>values = pipeline | beam.Create([1, 2, 3, 4])</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating<br>key-value pairs</b></td>\n+    <td>\n+        <code>pairs = sc.parallelize([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+    <td>\n+        <code>pairs = pipeline | beam.Create([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Running a<br>local pipeline</b></td>\n+    <td><code>$ spark-submit spark_pipeline.py</code></td>\n+    <td><code>$ python beam_pipeline.py</code></td>\n+</tr>\n+</table>\n+{{< /table >}}\n+\n+## Transforms\n+\n+Here are the equivalents of some common transforms in both PySpark and Beam.\n+\n+{{< table >}}\n+|                   | PySpark                               | Beam                                                    |\n+|-------------------|---------------------------------------|---------------------------------------------------------|\n+| **Map**           | `values.map(lambda x: x * 2)`         | `values | beam.Map(lambda x: x * 2)`                    |\n+| **Filter**        | `values.filter(lambda x: x % 2 == 0)` | `values | beam.Filter(lambda x: x % 2 == 0)`            |\n+| **FlatMap**       | `values.flatMap(lambda x: range(x))`  | `values | beam.FlatMap(lambda x: range(x))`             |\n+| **Group by key**  | `pairs.groupByKey()`                  | `pairs | beam.GroupByKey()`                             |\n+| **Reduce**        | `values.reduce(lambda x, y: x+y)`     | `values | beam.CombineGlobally(sum)`                    |\n+| **Reduce by key** | `pairs.reduceByKey(lambda x, y: x+y)` | `pairs | beam.CombinePerKey(sum)`                       |\n+| **Distinct**      | `values.distinct()`                   | `values | beam.Distinct()`                              |\n+| **Count**         | `values.count()`                      | `values | beam.combiners.Count.Globally()`              |\n+| **Count by key**  | `pairs.countByKey()`                  | `pairs | beam.combiners.Count.PerKey()`                 |\n+| **Take smallest** | `values.takeOrdered(3)`               | `values | beam.combiners.Top.Smallest(3)`               |\n+| **Take largest**  | `values.takeOrdered(3, lambda x: -x)` | `values | beam.combiners.Top.Largest(3)`                |\n+| **Random sample** | `values.takeSample(False, 3)`         | `values | beam.combiners.Sample.FixedSizeGlobally(3)`   |\n+| **Union**         | `values.union(otherValues)`           | `(values, otherValues) | beam.Flatten()`                |\n+| **Co-group**      | `pairs.cogroup(otherPairs)`           | `{'Xs': pairs, 'Ys': otherPairs} | beam.CoGroupByKey()` |\n+{{< /table >}}\n+\n+> \u2139\ufe0f To learn more about the transforms available in Beam, check the\n+> [Python transform gallery](/documentation/transforms/python/overview).\n+\n+## Using calculated values\n+\n+Since we are working in potentially distributed environments,\n+we can't guarantee that the results we've calculated are available at any given machine.\n+\n+In PySpark, we can get a result from a collection of elements (RDD) by using\n+`data.collect()`, or other aggregations such as `reduce()`, `count()` and more.\n+\n+Here's an example to scale numbers into a range between zero and one.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+with pyspark.SparkContext() as sc:\n+    values = sc.parallelize([1, 2, 3, 4])\n+    total = values.reduce(lambda x, y: x + y)\n+\n+    # We can simply use `total` since it's already a Python value from `reduce`.\n+    scaled_values = values.map(lambda x: x / total)\n+\n+    # But to access `scaled_values`, we need to call `collect`.\n+    print(scaled_values.collect())\n+{{< /highlight >}}\n+\n+In Beam the results from _all_ transforms result in a PCollection.\n+We use _side inputs_ to feed a PCollection into a transform and access its values.", "originalCommit": "c484e68489db6551aff70f6dde765ec0ca89d58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MDAwMA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508090000", "bodyText": "Done", "author": "davidcavazos", "createdAt": "2020-10-19T22:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0NTQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MDMxNg==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508090316", "bodyText": "Done", "author": "davidcavazos", "createdAt": "2020-10-19T22:06:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0NTQyNg=="}], "type": "inlineReview"}, {"oid": "17aed03f86421d228d40c6e55201a341643edb40", "url": "https://github.com/apache/beam/commit/17aed03f86421d228d40c6e55201a341643edb40", "message": "Add links to transform catalog", "committedDate": "2020-10-19T22:03:23Z", "type": "commit"}, {"oid": "eaff2e92d05dd091b135cfaa8f2efe411ec7fba0", "url": "https://github.com/apache/beam/commit/eaff2e92d05dd091b135cfaa8f2efe411ec7fba0", "message": "Merge branch 'master' of github.com:apache/beam into coming-from-spark", "committedDate": "2020-10-19T22:03:45Z", "type": "commit"}, {"oid": "26a2a04d04cc2c4030357291a09f8d262d9c67f3", "url": "https://github.com/apache/beam/commit/26a2a04d04cc2c4030357291a09f8d262d9c67f3", "message": "Add more links", "committedDate": "2020-10-19T22:07:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MDUyMg==", "url": "https://github.com/apache/beam/pull/12963#discussion_r508090522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This means that when you _pipe_ `|` data you're only _decalring_ the\n          \n          \n            \n            This means that when you _pipe_ `|` data you're only _declaring_ the", "author": "ibzib", "createdAt": "2020-10-19T22:06:49Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -71,6 +71,17 @@ with beam.Pipeline() as pipeline:\n > That's because we can only access the elements of a PCollection\n > from within a PTransform.\n \n+Another thing to note is that Beam pipelines are constructed _lazily_.\n+This means that when you _pipe_ `|` data you're only _decalring_ the", "originalCommit": "eaff2e92d05dd091b135cfaa8f2efe411ec7fba0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2f397998454a12bb04ae028519e47da950db9690", "url": "https://github.com/apache/beam/commit/2f397998454a12bb04ae028519e47da950db9690", "message": "Add RDD/DataFrame clarification", "committedDate": "2020-10-20T16:49:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3NjU1Ng==", "url": "https://github.com/apache/beam/pull/12963#discussion_r509276556", "bodyText": "I am not sure if worth but since we mention lazy computation we probably may mention what triggers 'producing results', in Spark is done by Spark's actions e.g. collect(), etc and in Beam by outputting the data (you can relate this to the print mention). Notice that I saw the warning of the with section but we can double mention this here and/or mention p.run()).\nNote this is just an extra suggestion but it is not mandatory at all, it is already clear, this is 'extra details'.", "author": "iemejia", "createdAt": "2020-10-21T13:24:13Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,261 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+The Beam and Spark APIs are similar, so you already know the basic concepts.\n+\n+Spark stores data _Spark DataFrames_ for structured data,\n+and in _Resilient Distributed Datasets_ (RDD) for unstructured data.\n+We are using RDDs for this guide.\n+\n+A _Spark RDD_ represents a collection of elements,\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+sc = pyspark.SparkContext()\n+result = (\n+    sc.parallelize([1, 2, 3, 4])\n+    .map(lambda x: x * 2)\n+    .reduce(lambda x, y: x + y)\n+)\n+print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+Another thing to note is that Beam pipelines are constructed _lazily_.\n+This means that when you _pipe_ `|` data you're only _declaring_ the\n+transformations and the order you want them to happen,\n+but the actual computation doesn't happen.\n+The pipeline is run _after_ the `with beam.Pipeline() as pipeline` context has\n+closed.\n+The pipeline is then sent to your runner of choice and it processes the data.\n+\n+> \u2139\ufe0f When the `with beam.Pipeline() as pipeline` context closes,\n+> it implicitly calls `pipeline.run()` which triggers the computation to happen.\n+\n+A label can optionally be added to a transform using the\n+_right shift operator_ `>>` like `data | 'My description' >> beam.Map(...)`.\n+This serves both as comments and makes your pipeline easier to debug.\n+\n+This is how the pipeline looks after adding labels.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | 'Create numbers' >> beam.Create([1, 2, 3, 4])\n+        | 'Multiply by two' >> beam.Map(lambda x: x * 2)\n+        | 'Sum everything' >> beam.CombineGlobally(sum)\n+        | 'Print results' >> beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+## Setup\n+\n+Here's a comparison on how to get started both in PySpark and Beam.\n+\n+{{< table >}}\n+<table>\n+<tr>\n+    <th></th>\n+    <th>PySpark</th>\n+    <th>Beam</th>\n+</tr>\n+<tr>\n+    <td><b>Install</b></td>\n+    <td><code>$ pip install pyspark</code></td>\n+    <td><code>$ pip install apache-beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Imports</b></td>\n+    <td><code>import pyspark</code></td>\n+    <td><code>import apache_beam as beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating a<br>local pipeline</b></td>\n+    <td>\n+        <code>sc = pyspark.SparkContext() as sc:</code><br>\n+        <code># Your pipeline code here.</code>\n+    </td>\n+    <td>\n+        <code>with beam.Pipeline() as pipeline:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Creating values</b></td>\n+    <td><code>values = sc.parallelize([1, 2, 3, 4])</code></td>\n+    <td><code>values = pipeline | beam.Create([1, 2, 3, 4])</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating<br>key-value pairs</b></td>\n+    <td>\n+        <code>pairs = sc.parallelize([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+    <td>\n+        <code>pairs = pipeline | beam.Create([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+</tr>", "originalCommit": "e5d9edd69621203ade20c539e60d27fc961c9ba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5MDMwNw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r540990307", "bodyText": "If it's already clear, I think I'll leave it out in favor of simplicity. Sometimes less is more :)", "author": "davidcavazos", "createdAt": "2020-12-11T14:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3NjU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc4NTQ3OQ==", "url": "https://github.com/apache/beam/pull/12963#discussion_r516785479", "bodyText": "The actual Overview page has a Getting Started section you can include this new doc in.", "author": "rosetn", "createdAt": "2020-11-03T16:12:20Z", "path": "website/www/site/layouts/partials/section-menu/en/get-started.html", "diffHunk": "@@ -22,12 +22,13 @@\n     <li><a href=\"/get-started/quickstart-go/\">Quickstart - Go</a></li>\n   </ul>\n </li>\n+<li><a href=\"/get-started/from-spark/\">From Apache Spark</a></li>", "originalCommit": "e5d9edd69621203ade20c539e60d27fc961c9ba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk5Mjc5Mw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r540992793", "bodyText": "Thanks, I just added a link there too", "author": "davidcavazos", "createdAt": "2020-12-11T14:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc4NTQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc4OTI0Ng==", "url": "https://github.com/apache/beam/pull/12963#discussion_r516789246", "bodyText": "WDYT about replacing \"is easy\" with \"is familiar\" or removing this sentence, since you explain the connection in the next sentence?", "author": "rosetn", "createdAt": "2020-11-03T16:17:42Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,261 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.", "originalCommit": "e5d9edd69621203ade20c539e60d27fc961c9ba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyODk2OA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r529828968", "bodyText": "Sounds good, done", "author": "davidcavazos", "createdAt": "2020-11-24T19:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc4OTI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwODA3Mg==", "url": "https://github.com/apache/beam/pull/12963#discussion_r516808072", "bodyText": "I'd consider only italicizing the new Spark terms. The font emphasis can create accessibility issues if it's too frequent.", "author": "rosetn", "createdAt": "2020-11-03T16:44:22Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,261 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark", "originalCommit": "e5d9edd69621203ade20c539e60d27fc961c9ba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyODgyNw==", "url": "https://github.com/apache/beam/pull/12963#discussion_r529828827", "bodyText": "Got it, thanks", "author": "davidcavazos", "createdAt": "2020-11-24T19:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwODA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwOTEwOA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r516809108", "bodyText": "Replace \"how\" with \"what\"", "author": "rosetn", "createdAt": "2020-11-03T16:45:47Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,261 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+The Beam and Spark APIs are similar, so you already know the basic concepts.\n+\n+Spark stores data _Spark DataFrames_ for structured data,\n+and in _Resilient Distributed Datasets_ (RDD) for unstructured data.\n+We are using RDDs for this guide.\n+\n+A _Spark RDD_ represents a collection of elements,\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+sc = pyspark.SparkContext()\n+result = (\n+    sc.parallelize([1, 2, 3, 4])\n+    .map(lambda x: x * 2)\n+    .reduce(lambda x, y: x + y)\n+)\n+print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.", "originalCommit": "e5d9edd69621203ade20c539e60d27fc961c9ba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzMDk5NA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r529830994", "bodyText": "Done", "author": "davidcavazos", "createdAt": "2020-11-24T19:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwOTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDU1NQ==", "url": "https://github.com/apache/beam/pull/12963#discussion_r517704555", "bodyText": "I realized we should probably clarify somewhere that \"Beam Python on the Spark runner\" and PySpark are completed unrelated, since that seems to be a common misconception.", "author": "ibzib", "createdAt": "2020-11-05T00:08:18Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,261 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is easy.\n+The Beam and Spark APIs are similar, so you already know the basic concepts.\n+\n+Spark stores data _Spark DataFrames_ for structured data,\n+and in _Resilient Distributed Datasets_ (RDD) for unstructured data.\n+We are using RDDs for this guide.\n+\n+A _Spark RDD_ represents a collection of elements,\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+sc = pyspark.SparkContext()\n+result = (\n+    sc.parallelize([1, 2, 3, 4])\n+    .map(lambda x: x * 2)\n+    .reduce(lambda x, y: x + y)\n+)\n+print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's how an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+Another thing to note is that Beam pipelines are constructed _lazily_.\n+This means that when you _pipe_ `|` data you're only _declaring_ the\n+transformations and the order you want them to happen,\n+but the actual computation doesn't happen.\n+The pipeline is run _after_ the `with beam.Pipeline() as pipeline` context has\n+closed.\n+The pipeline is then sent to your runner of choice and it processes the data.", "originalCommit": "e5d9edd69621203ade20c539e60d27fc961c9ba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4OTU2Mg==", "url": "https://github.com/apache/beam/pull/12963#discussion_r540989562", "bodyText": "Done", "author": "davidcavazos", "createdAt": "2020-12-11T14:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDU1NQ=="}], "type": "inlineReview"}, {"oid": "a751df81bcb17186edc8ef22f14a8ed79a30a630", "url": "https://github.com/apache/beam/commit/a751df81bcb17186edc8ef22f14a8ed79a30a630", "message": "Merge branch 'master' of github.com:apache/beam into coming-from-spark", "committedDate": "2020-11-24T19:32:45Z", "type": "commit"}, {"oid": "6c338cef9b01c52fcc530904551893cbfc529e17", "url": "https://github.com/apache/beam/commit/6c338cef9b01c52fcc530904551893cbfc529e17", "message": "Add link to from-spark page", "committedDate": "2020-12-11T14:38:46Z", "type": "commit"}, {"oid": "a3406b3558a77a1030dfa3d5d41477d86ea82217", "url": "https://github.com/apache/beam/commit/a3406b3558a77a1030dfa3d5d41477d86ea82217", "message": "Added extra explanations", "committedDate": "2020-12-11T14:39:28Z", "type": "commit"}, {"oid": "67af84a51c471e7c53fc23a43acf597f60233273", "url": "https://github.com/apache/beam/commit/67af84a51c471e7c53fc23a43acf597f60233273", "message": "Merge branch 'master' of github.com:apache/beam into coming-from-spark", "committedDate": "2020-12-11T14:39:43Z", "type": "commit"}, {"oid": "67af84a51c471e7c53fc23a43acf597f60233273", "url": "https://github.com/apache/beam/commit/67af84a51c471e7c53fc23a43acf597f60233273", "message": "Merge branch 'master' of github.com:apache/beam into coming-from-spark", "committedDate": "2020-12-11T14:39:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyMTAyMg==", "url": "https://github.com/apache/beam/pull/12963#discussion_r541421022", "bodyText": "typo--declaring", "author": "rosetn", "createdAt": "2020-12-11T23:42:59Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,268 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is familiar.\n+The Beam and Spark APIs are similar, so you already know the basic concepts.\n+\n+Spark stores data _Spark DataFrames_ for structured data,\n+and in _Resilient Distributed Datasets_ (RDD) for unstructured data.\n+We are using RDDs for this guide.\n+\n+A Spark RDD represents a collection of elements,\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+sc = pyspark.SparkContext()\n+result = (\n+    sc.parallelize([1, 2, 3, 4])\n+    .map(lambda x: x * 2)\n+    .reduce(lambda x, y: x + y)\n+)\n+print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's what an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+Another thing to note is that Beam pipelines are constructed _lazily_.\n+This means that when you pipe `|` data you're only _decalring_ the", "originalCommit": "67af84a51c471e7c53fc23a43acf597f60233273", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDQ1Ng==", "url": "https://github.com/apache/beam/pull/12963#discussion_r542520456", "bodyText": "Thanks, fixed", "author": "davidcavazos", "createdAt": "2020-12-14T16:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyMTAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyMTk5MQ==", "url": "https://github.com/apache/beam/pull/12963#discussion_r541421991", "bodyText": "comm after count()", "author": "rosetn", "createdAt": "2020-12-11T23:44:11Z", "path": "website/www/site/content/en/get-started/from-spark.md", "diffHunk": "@@ -0,0 +1,268 @@\n+---\n+title: \"Getting started from Apache Spark\"\n+---\n+<!--\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+\n+# Getting started from Apache Spark\n+\n+{{< localstorage language language-py >}}\n+\n+If you already know [_Apache Spark_](http://spark.apache.org/),\n+learning _Apache Beam_ is familiar.\n+The Beam and Spark APIs are similar, so you already know the basic concepts.\n+\n+Spark stores data _Spark DataFrames_ for structured data,\n+and in _Resilient Distributed Datasets_ (RDD) for unstructured data.\n+We are using RDDs for this guide.\n+\n+A Spark RDD represents a collection of elements,\n+while in Beam it's called a _Parallel Collection_ (PCollection).\n+A PCollection in Beam does _not_ have any ordering guarantees.\n+\n+Likewise, a transform in Beam is called a _Parallel Transform_ (PTransform).\n+\n+Here are some examples of common operations and their equivalent between PySpark and Beam.\n+\n+## Overview\n+\n+Here's a simple example of a PySpark pipeline that takes the numbers from one to four,\n+multiplies them by two, adds all the values together, and prints the result.\n+\n+{{< highlight py >}}\n+import pyspark\n+\n+sc = pyspark.SparkContext()\n+result = (\n+    sc.parallelize([1, 2, 3, 4])\n+    .map(lambda x: x * 2)\n+    .reduce(lambda x, y: x + y)\n+)\n+print(result)\n+{{< /highlight >}}\n+\n+In Beam you _pipe_ your data through the pipeline using the\n+_pipe operator_ `|` like `data | beam.Map(...)` instead of chaining\n+methods like `data.map(...)`, but they're doing the same thing.\n+\n+Here's what an equivalent pipeline looks like in Beam.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | beam.Create([1, 2, 3, 4])\n+        | beam.Map(lambda x: x * 2)\n+        | beam.CombineGlobally(sum)\n+        | beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+> \u2139\ufe0f Note that we called `print` inside a `Map` transform.\n+> That's because we can only access the elements of a PCollection\n+> from within a PTransform.\n+\n+Another thing to note is that Beam pipelines are constructed _lazily_.\n+This means that when you pipe `|` data you're only _decalring_ the\n+transformations and the order you want them to happen,\n+but the actual computation doesn't happen.\n+The pipeline is run _after_ the `with beam.Pipeline() as pipeline` context has\n+closed.\n+\n+> \u2139\ufe0f When the `with beam.Pipeline() as pipeline` context closes,\n+> it implicitly calls `pipeline.run()` which triggers the computation to happen.\n+\n+The pipeline is then sent to your\n+[runner of choice](https://beam.apache.org/documentation/runners/capability-matrix/)\n+and it processes the data.\n+\n+> \u2139\ufe0f The pipeline can run locally with the _DirectRunner_,\n+> or in a distributed runner such as Flink, Spark, or Dataflow.\n+> The Spark runner is not related to PySpark.\n+\n+A label can optionally be added to a transform using the\n+_right shift operator_ `>>` like `data | 'My description' >> beam.Map(...)`.\n+This serves both as comments and makes your pipeline easier to debug.\n+\n+This is how the pipeline looks after adding labels.\n+\n+{{< highlight py >}}\n+import apache_beam as beam\n+\n+with beam.Pipeline() as pipeline:\n+    result = (\n+        pipeline\n+        | 'Create numbers' >> beam.Create([1, 2, 3, 4])\n+        | 'Multiply by two' >> beam.Map(lambda x: x * 2)\n+        | 'Sum everything' >> beam.CombineGlobally(sum)\n+        | 'Print results' >> beam.Map(print)\n+    )\n+{{< /highlight >}}\n+\n+## Setup\n+\n+Here's a comparison on how to get started both in PySpark and Beam.\n+\n+{{< table >}}\n+<table>\n+<tr>\n+    <th></th>\n+    <th>PySpark</th>\n+    <th>Beam</th>\n+</tr>\n+<tr>\n+    <td><b>Install</b></td>\n+    <td><code>$ pip install pyspark</code></td>\n+    <td><code>$ pip install apache-beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Imports</b></td>\n+    <td><code>import pyspark</code></td>\n+    <td><code>import apache_beam as beam</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating a<br>local pipeline</b></td>\n+    <td>\n+        <code>sc = pyspark.SparkContext() as sc:</code><br>\n+        <code># Your pipeline code here.</code>\n+    </td>\n+    <td>\n+        <code>with beam.Pipeline() as pipeline:</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;# Your pipeline code here.</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Creating values</b></td>\n+    <td><code>values = sc.parallelize([1, 2, 3, 4])</code></td>\n+    <td><code>values = pipeline | beam.Create([1, 2, 3, 4])</code></td>\n+</tr>\n+<tr>\n+    <td><b>Creating<br>key-value pairs</b></td>\n+    <td>\n+        <code>pairs = sc.parallelize([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+    <td>\n+        <code>pairs = pipeline | beam.Create([</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key1', 'value1'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key2', 'value2'),</code><br>\n+        <code>&nbsp;&nbsp;&nbsp;&nbsp;('key3', 'value3'),</code><br>\n+        <code>])</code>\n+    </td>\n+</tr>\n+<tr>\n+    <td><b>Running a<br>local pipeline</b></td>\n+    <td><code>$ spark-submit spark_pipeline.py</code></td>\n+    <td><code>$ python beam_pipeline.py</code></td>\n+</tr>\n+</table>\n+{{< /table >}}\n+\n+## Transforms\n+\n+Here are the equivalents of some common transforms in both PySpark and Beam.\n+\n+{{< table >}}\n+|                                                                                  | PySpark                               | Beam                                                    |\n+|----------------------------------------------------------------------------------|---------------------------------------|---------------------------------------------------------|\n+| [**Map**](/documentation/transforms/python/elementwise/map/)                     | `values.map(lambda x: x * 2)`         | `values | beam.Map(lambda x: x * 2)`                    |\n+| [**Filter**](/documentation/transforms/python/elementwise/filter/)               | `values.filter(lambda x: x % 2 == 0)` | `values | beam.Filter(lambda x: x % 2 == 0)`            |\n+| [**FlatMap**](/documentation/transforms/python/elementwise/flatmap/)             | `values.flatMap(lambda x: range(x))`  | `values | beam.FlatMap(lambda x: range(x))`             |\n+| [**Group by key**](/documentation/transforms/python/aggregation/groupbykey/)     | `pairs.groupByKey()`                  | `pairs | beam.GroupByKey()`                             |\n+| [**Reduce**](/documentation/transforms/python/aggregation/combineglobally/)      | `values.reduce(lambda x, y: x+y)`     | `values | beam.CombineGlobally(sum)`                    |\n+| [**Reduce by key**](/documentation/transforms/python/aggregation/combineperkey/) | `pairs.reduceByKey(lambda x, y: x+y)` | `pairs | beam.CombinePerKey(sum)`                       |\n+| [**Distinct**](/documentation/transforms/python/aggregation/distinct/)           | `values.distinct()`                   | `values | beam.Distinct()`                              |\n+| [**Count**](/documentation/transforms/python/aggregation/count/)                 | `values.count()`                      | `values | beam.combiners.Count.Globally()`              |\n+| [**Count by key**](/documentation/transforms/python/aggregation/count/)          | `pairs.countByKey()`                  | `pairs | beam.combiners.Count.PerKey()`                 |\n+| [**Take smallest**](/documentation/transforms/python/aggregation/top/)           | `values.takeOrdered(3)`               | `values | beam.combiners.Top.Smallest(3)`               |\n+| [**Take largest**](/documentation/transforms/python/aggregation/top/)            | `values.takeOrdered(3, lambda x: -x)` | `values | beam.combiners.Top.Largest(3)`                |\n+| [**Random sample**](/documentation/transforms/python/aggregation/sample/)        | `values.takeSample(False, 3)`         | `values | beam.combiners.Sample.FixedSizeGlobally(3)`   |\n+| [**Union**](/documentation/transforms/python/other/flatten/)                     | `values.union(otherValues)`           | `(values, otherValues) | beam.Flatten()`                |\n+| [**Co-group**](/documentation/transforms/python/aggregation/cogroupbykey/)       | `pairs.cogroup(otherPairs)`           | `{'Xs': pairs, 'Ys': otherPairs} | beam.CoGroupByKey()` |\n+{{< /table >}}\n+\n+> \u2139\ufe0f To learn more about the transforms available in Beam, check the\n+> [Python transform gallery](/documentation/transforms/python/overview).\n+\n+## Using calculated values\n+\n+Since we are working in potentially distributed environments,\n+we can't guarantee that the results we've calculated are available at any given machine.\n+\n+In PySpark, we can get a result from a collection of elements (RDD) by using\n+`data.collect()`, or other aggregations such as `reduce()`, `count()` and more.", "originalCommit": "67af84a51c471e7c53fc23a43acf597f60233273", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDY1OA==", "url": "https://github.com/apache/beam/pull/12963#discussion_r542520658", "bodyText": "Done", "author": "davidcavazos", "createdAt": "2020-12-14T16:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQyMTk5MQ=="}], "type": "inlineReview"}, {"oid": "95574707f068177d7bf591279d4fb1f2f830935f", "url": "https://github.com/apache/beam/commit/95574707f068177d7bf591279d4fb1f2f830935f", "message": "Fixed typos + removed italics", "committedDate": "2020-12-14T16:27:36Z", "type": "commit"}]}