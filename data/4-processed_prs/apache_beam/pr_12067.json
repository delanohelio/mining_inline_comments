{"pr_number": 12067, "pr_title": "[BEAM-10308] Make component ID assignments consistent across PipelineContext instances", "pr_createdAt": "2020-06-23T21:55:35Z", "pr_url": "https://github.com/apache/beam/pull/12067", "timeline": [{"oid": "142bc299004b17900bb8f3699ed816070c7489b9", "url": "https://github.com/apache/beam/commit/142bc299004b17900bb8f3699ed816070c7489b9", "message": "Add failing test of ref assignment consistency", "committedDate": "2020-06-23T21:17:20Z", "type": "commit"}, {"oid": "35237ae6d14a49b7305297cfa56cdb31e7299abd", "url": "https://github.com/apache/beam/commit/35237ae6d14a49b7305297cfa56cdb31e7299abd", "message": "Extract out unique ref assignment, scope it globally", "committedDate": "2020-06-23T21:45:56Z", "type": "commit"}, {"oid": "efcdbc694cbe0a6bab182c2c6180b92817eb0636", "url": "https://github.com/apache/beam/commit/efcdbc694cbe0a6bab182c2c6180b92817eb0636", "message": "lint", "committedDate": "2020-06-24T15:23:55Z", "type": "commit"}, {"oid": "0724933eda23e0ee2982b6065078b6a850e0a3da", "url": "https://github.com/apache/beam/commit/0724933eda23e0ee2982b6065078b6a850e0a3da", "message": "yapf", "committedDate": "2020-06-24T18:24:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1Mjk0Mg==", "url": "https://github.com/apache/beam/pull/12067#discussion_r446452942", "bodyText": "Partitioning the cached ID assignments by id(pipeline) is a sub-par and dangerous solution because id is only guaranteed to be unique among objects that have non-overlapping lifetimes. If we go with something like this approach, we need to at least tie these instances' lifetimes to the lifetime of the pipeline.", "author": "TheNeuralBit", "createdAt": "2020-06-26T23:41:21Z", "path": "sdks/python/apache_beam/runners/pipeline_context.py", "diffHunk": "@@ -49,6 +50,52 @@\n   from apache_beam.coders.coder_impl import IterableStateWriter\n \n \n+class _UniqueRefAssigner(object):\n+  \"\"\"Utility for assigning unique refs to proto messages for use in components.\n+\n+  Instances of _UniqueRefAssigner are global (scoped by the base string). That\n+  way once a unique ref is assigned it will be used consistently across\n+  PipelineContext instances.\n+  \"\"\"\n+  _INSTANCES = {}  # type: Dict[Tuple[Pipeline, str], _UniqueRefAssigner]\n+\n+  def __init__(self, base):\n+    self._base = base\n+    self._counter = 0\n+    self._obj_to_id = {}  # type: Dict[Any, str]\n+\n+  def get_or_assign(self, obj=None, label=None):\n+    # type: (Optional[Any], Optional[str]) -> str\n+\n+    \"\"\"Retrieve the unique ref for the given object.\n+\n+    Generates and assigns a unique ref if one hasn't been assigned yet. label\n+    will be incorporated into the unique ref when assigning a new unique ref,\n+    otherwise it is ignored.\"\"\"\n+    if obj not in self._obj_to_id:\n+      self._obj_to_id[obj] = self._unique_ref(obj, label)\n+\n+    return self._obj_to_id[obj]\n+\n+  def _unique_ref(self, obj=None, label=None):\n+    self._counter += 1\n+    return \"%s_%s_%d\" % (self._base, label or type(obj).__name__, self._counter)\n+\n+  @classmethod\n+  def get_instance(cls, pipeline, base):\n+    # type: (Optional[Pipeline], str) -> _UniqueRefAssigner\n+\n+    \"\"\"Return the _UniqueRefAssigner with the given base string.\n+\n+    Creates a new instance if one doesn't already exist for this base string.\"\"\"\n+    key = (id(pipeline), base)", "originalCommit": "5cf25e6a82c9cbd5002a2846e3345b84f91d8abd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fdbbe5b2710d2204e230806cf1ef2c8a5b4e4cea", "url": "https://github.com/apache/beam/commit/fdbbe5b2710d2204e230806cf1ef2c8a5b4e4cea", "message": "Store component id assignments on pipeline object", "committedDate": "2020-06-29T23:08:00Z", "type": "commit"}, {"oid": "600dd85b20d65c37d3fe546bac365a161dfe4f1e", "url": "https://github.com/apache/beam/commit/600dd85b20d65c37d3fe546bac365a161dfe4f1e", "message": "Add test for BEAM-10143", "committedDate": "2020-06-29T23:08:13Z", "type": "commit"}, {"oid": "600dd85b20d65c37d3fe546bac365a161dfe4f1e", "url": "https://github.com/apache/beam/commit/600dd85b20d65c37d3fe546bac365a161dfe4f1e", "message": "Add test for BEAM-10143", "committedDate": "2020-06-29T23:08:13Z", "type": "forcePushed"}, {"oid": "07fac9a52af0b49be4a0ca8f15192b4f25786961", "url": "https://github.com/apache/beam/commit/07fac9a52af0b49be4a0ca8f15192b4f25786961", "message": "yapf", "committedDate": "2020-06-29T23:36:59Z", "type": "commit"}, {"oid": "725299b98088771e486053c540cec085cc2b487b", "url": "https://github.com/apache/beam/commit/725299b98088771e486053c540cec085cc2b487b", "message": "lint", "committedDate": "2020-06-30T00:08:54Z", "type": "commit"}, {"oid": "cd9a47ad634abf222bbf272d31c94a27cf9070d5", "url": "https://github.com/apache/beam/commit/cd9a47ad634abf222bbf272d31c94a27cf9070d5", "message": "Revert change that removes _obj_to_id. It breaks ExpansionServicer", "committedDate": "2020-06-30T18:53:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NjE1Mw==", "url": "https://github.com/apache/beam/pull/12067#discussion_r448646153", "bodyText": "There's not actually a circular dependency of classes. You could move this class in here and that would be fine.", "author": "kennknowles", "createdAt": "2020-07-01T22:22:03Z", "path": "sdks/python/apache_beam/pipeline.py", "diffHunk": "@@ -221,6 +221,14 @@ def __init__(self, runner=None, options=None, argv=None):\n     # then the transform will have to be cloned with a new label.\n     self.applied_labels = set()  # type: Set[str]\n \n+    # Create a context for assigning IDs to components. Ensures that any\n+    # components that receive an ID during pipeline construction (for example in\n+    # ExternalTransform), will receive the same component ID when generating the\n+    # full pipeline proto.\n+    from apache_beam.runners import pipeline_context", "originalCommit": "cd9a47ad634abf222bbf272d31c94a27cf9070d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0MjQ1OA==", "url": "https://github.com/apache/beam/pull/12067#discussion_r450442458", "bodyText": "Done, thanks!", "author": "TheNeuralBit", "createdAt": "2020-07-06T19:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NjE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0Nzk5OQ==", "url": "https://github.com/apache/beam/pull/12067#discussion_r448647999", "bodyText": "There's a lot of overlap between the purpose of this and the purpose of the PipelineContext but I can see how they are different. I see that the pipeline only takes the context at to_runner_api time, and the context has tweaks like use_fake_coders and default_environment. So when using xlang expansion you can keep just the ids and throw away the contents that will be generated according to these tweaks later.", "author": "kennknowles", "createdAt": "2020-07-01T22:27:17Z", "path": "sdks/python/apache_beam/runners/pipeline_context.py", "diffHunk": "@@ -49,6 +50,32 @@\n   from apache_beam.coders.coder_impl import IterableStateWriter\n \n \n+class ComponentIdContext(object):", "originalCommit": "cd9a47ad634abf222bbf272d31c94a27cf9070d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0ODM0MQ==", "url": "https://github.com/apache/beam/pull/12067#discussion_r448648341", "bodyText": "Based on this use, maybe _component_id_context isn't private at all? And maybe it is a component_id_map or some such. It isn't \"context\" in the sense that it isn't \"the stuff surrounding the thing you are interested in\".", "author": "kennknowles", "createdAt": "2020-07-01T22:28:21Z", "path": "sdks/python/apache_beam/transforms/external.py", "diffHunk": "@@ -286,7 +286,8 @@ def expand(self, pvalueish):\n     pipeline = (\n         next(iter(self._inputs.values())).pipeline\n         if self._inputs else pvalueish.pipeline)\n-    context = pipeline_context.PipelineContext()\n+    context = pipeline_context.PipelineContext(\n+        component_id_context=pipeline._component_id_context)", "originalCommit": "cd9a47ad634abf222bbf272d31c94a27cf9070d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0MjIwNQ==", "url": "https://github.com/apache/beam/pull/12067#discussion_r450442205", "bodyText": "Good point, renamed it to component_id_map everywhere", "author": "TheNeuralBit", "createdAt": "2020-07-06T19:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0ODM0MQ=="}], "type": "inlineReview"}, {"oid": "8abbf0cdf1d4738857ec32fc588c21adde8b12f2", "url": "https://github.com/apache/beam/commit/8abbf0cdf1d4738857ec32fc588c21adde8b12f2", "message": "address review comments", "committedDate": "2020-07-01T23:49:13Z", "type": "commit"}]}