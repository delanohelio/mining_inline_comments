{"pr_number": 12437, "pr_title": "[BEAM-7390] Add mean code snippets", "pr_createdAt": "2020-07-31T19:08:09Z", "pr_url": "https://github.com/apache/beam/pull/12437", "timeline": [{"oid": "e22c689d2338080b2ed461893b13557c5b2692b3", "url": "https://github.com/apache/beam/commit/e22c689d2338080b2ed461893b13557c5b2692b3", "message": "[BEAM-7390] Add mean code snippets", "committedDate": "2020-07-31T19:07:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4MDg0MQ==", "url": "https://github.com/apache/beam/pull/12437#discussion_r463880841", "bodyText": "maximum -> mean, across the doc.", "author": "aaltay", "createdAt": "2020-07-31T23:05:28Z", "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "diffHunk": "@@ -16,23 +16,64 @@ limitations under the License.\n -->\n \n # Mean\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.combiners.html?highlight=mean#apache_beam.transforms.combiners.Mean\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Mean\" >}}\n \n Transforms for computing the arithmetic mean of the elements in a collection,\n or the mean of the values associated with each key in a collection of\n key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [CombineGlobally](/documentation/transforms/python/aggregation/combineglobally) to combine elements.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the element with the maximum value in different ways.", "originalCommit": "e22c689d2338080b2ed461893b13557c5b2692b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MzgwMA==", "url": "https://github.com/apache/beam/pull/12437#discussion_r464553800", "bodyText": "Thanks!", "author": "davidcavazos", "createdAt": "2020-08-03T17:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4MDg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMDE4Mg==", "url": "https://github.com/apache/beam/pull/12437#discussion_r463910182", "bodyText": "Replace \"avareage\" with \"average\"", "author": "rosetn", "createdAt": "2020-08-01T02:33:06Z", "path": "website/www/site/content/en/documentation/transforms/python/aggregation/mean.md", "diffHunk": "@@ -16,23 +16,64 @@ limitations under the License.\n -->\n \n # Mean\n-<table align=\"left\">\n-    <a target=\"_blank\" class=\"button\"\n-        href=\"https://beam.apache.org/releases/pydoc/current/apache_beam.transforms.combiners.html?highlight=mean#apache_beam.transforms.combiners.Mean\">\n-      <img src=\"https://beam.apache.org/images/logos/sdks/python.png\" width=\"20px\" height=\"20px\"\n-           alt=\"Pydoc\" />\n-     Pydoc\n-    </a>\n-</table>\n-<br><br>\n \n+{{< localstorage language language-py >}}\n+\n+{{< button-pydoc path=\"apache_beam.transforms.combiners\" class=\"Mean\" >}}\n \n Transforms for computing the arithmetic mean of the elements in a collection,\n or the mean of the values associated with each key in a collection of\n key-value pairs.\n \n ## Examples\n-See [BEAM-7390](https://issues.apache.org/jira/browse/BEAM-7390) for updates. \n \n-## Related transforms \n-* [CombineGlobally](/documentation/transforms/python/aggregation/combineglobally) to combine elements.\n\\ No newline at end of file\n+In the following example, we create a pipeline with a `PCollection`.\n+Then, we get the element with the maximum value in different ways.\n+\n+### Example 1: Maximum element in a PCollection\n+\n+We use `Mean.Globally()` to get the average of the elements from the *entire* `PCollection`.\n+\n+{{< highlight py >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean.py\" mean_globally >}}\n+{{< /highlight >}}\n+\n+{{< paragraph class=\"notebook-skip\" >}}\n+Output:\n+{{< /paragraph >}}\n+\n+{{< highlight class=\"notebook-skip\" >}}\n+{{< code_sample \"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean_test.py\" mean_element >}}\n+{{< /highlight >}}\n+\n+{{< buttons-code-snippet\n+  py=\"sdks/python/apache_beam/examples/snippets/transforms/aggregation/mean.py\" >}}\n+\n+### Example 2: Maximum elements for each key\n+\n+We use `Mean.PerKey()` to get the avareage of the elements for each unique key in a `PCollection` of key-values.", "originalCommit": "e22c689d2338080b2ed461893b13557c5b2692b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1Mzg3NQ==", "url": "https://github.com/apache/beam/pull/12437#discussion_r464553875", "bodyText": "Thanks!", "author": "davidcavazos", "createdAt": "2020-08-03T17:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxMDE4Mg=="}], "type": "inlineReview"}, {"oid": "ee901c293779f3a7f05bcb3333c0a7b88d553898", "url": "https://github.com/apache/beam/commit/ee901c293779f3a7f05bcb3333c0a7b88d553898", "message": "Fixed typos", "committedDate": "2020-08-03T17:24:33Z", "type": "commit"}]}