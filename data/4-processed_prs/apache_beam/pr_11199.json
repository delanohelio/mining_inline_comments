{"pr_number": 11199, "pr_title": "[BEAM-9562] Update Timer encoding with respect of dynamic timers", "pr_createdAt": "2020-03-23T20:06:08Z", "pr_url": "https://github.com/apache/beam/pull/11199", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzI0NA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r397213244", "bodyText": "You don't need to change this to v2 since these are not stable yet.", "author": "lukecwik", "createdAt": "2020-03-24T14:51:11Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -718,9 +726,15 @@ message StandardCoders {\n     //                        1: 80 00 00 00 00 00 00 01\n     //                      256: 80 00 00 00 00 00 01 00\n     //      9223372036854775807: FF FF FF FF FF FF FF FF\n-    //   payload - user defined data, uses the component coder\n-    // Components: Coder for the payload.\n-    TIMER = 4 [(beam_urn) = \"beam:coder:timer:v1\"];\n+    //\n+    //   hold timestamp - similar to fire timestamp, but stands for the\n+    //     watermark the timer is expected to hold.\n+    //\n+    //   windows - uses the component coder.\n+    //\n+    //   paneinfo - similar to how paneinfo gets encoded in WindowedValue.\n+    // Components: Coder for the user key, coder for the windows,\n+    TIMER = 4 [(beam_urn) = \"beam:coder:timer:v2\"];", "originalCommit": "0453c3f9e2a1fe32ed06d1d75dfd57d877d4a45c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMzgzNA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r397213834", "bodyText": "The dynamic tag is supposed to be part of the encoding.", "author": "lukecwik", "createdAt": "2020-03-24T14:51:56Z", "path": "model/pipeline/src/main/proto/beam_runner_api.proto", "diffHunk": "@@ -703,13 +703,21 @@ message StandardCoders {\n     // Components: Coder for a single element.\n     ITERABLE = 3 [(beam_urn) = \"beam:coder:iterable:v1\"];\n \n-    // Encodes a timer containing a timestamp and a user specified payload.\n-    // The encoding is represented as: timestamp payload\n-    //   timestamp - a big endian 8 byte integer representing millis-since-epoch.\n-    //     The encoded representation is shifted so that the byte representation of\n-    //     negative values are lexicographically ordered before the byte representation\n-    //     of positive values. This is typically done by subtracting -9223372036854775808\n-    //     from the value and encoding it as a signed big endian integer. Example values:\n+    // Encodes a timer containing a user key, a clear bit,\n+    // a fire timestamp, a hold timestamp, the windows that the user key is in,\n+    // the paneinfo of the user key.\n+    // The encoding is represented as:\n+    //   user key - user defined key, uses the component coder.\n+    //", "originalCommit": "0453c3f9e2a1fe32ed06d1d75dfd57d877d4a45c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDI0Mg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r397214242", "bodyText": "timer_id == timer_family_tag since the timer_id represents the key from timer_family_specs.\nNote that we will either need to remove timer_specs from ParDoPayload or ensure that timer_specs and timer_family_specs don't share any keys.", "author": "lukecwik", "createdAt": "2020-03-24T14:52:26Z", "path": "model/fn-execution/src/main/proto/beam_fn_api.proto", "diffHunk": "@@ -609,16 +609,20 @@ message Elements {\n     // represents the producer of these timers.\n     string transform_id = 2;\n \n+    // (Optional) The local timer family name used to identify the associated\n+    // timer family specification\n+    string timer_family_tag = 3;", "originalCommit": "0453c3f9e2a1fe32ed06d1d75dfd57d877d4a45c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyODYzNQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r397328635", "bodyText": "We should agree on terminology. The \"family\" represents the set of timers, within that one has multiple [dynamic] tags. I would call this timer_family_id.\nWe should not have both timer_specs and timer_family_specs.", "author": "robertwb", "createdAt": "2020-03-24T17:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNDI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyNDkwNg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r397324906", "bodyText": "This should be timers to represent a full stream of timers.", "author": "robertwb", "createdAt": "2020-03-24T17:15:00Z", "path": "model/fn-execution/src/main/proto/beam_fn_api.proto", "diffHunk": "@@ -609,16 +609,20 @@ message Elements {\n     // represents the producer of these timers.\n     string transform_id = 2;\n \n+    // (Optional) The local timer family name used to identify the associated\n+    // timer family specification\n+    string timer_family_tag = 3;\n+\n     // (Optional) The local timer name used to identify the associated timer specification.\n-    string timer_id = 3;\n+    string timer_id = 4;\n \n     // (Optional) Represents a logical byte stream of a timer. Encoded according\n     // to the coder in the timer spec.\n-    bytes timer = 4;\n+    bytes timer = 5;", "originalCommit": "0453c3f9e2a1fe32ed06d1d75dfd57d877d4a45c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTQ0Nw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r397351447", "bodyText": "The Elements has repeated field of Timer. So I think the Timer represents a single timer,  and Element represent a full stream of timers for one bundle.", "author": "boyuanzz", "createdAt": "2020-03-24T17:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyNDkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NTQ2Nw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r397445467", "bodyText": "The Timer represents some set of encoded timers for a specific PTransform and timer family.\nIts important to support many timers within a timer and it follows the logical data stream as described here: https://s.apache.org/beam-fn-api-send-and-receive-data", "author": "lukecwik", "createdAt": "2020-03-24T20:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyNDkwNg=="}], "type": "inlineReview"}, {"oid": "43ca8789d34e9786043bc201ee3d11f0706f0d25", "url": "https://github.com/apache/beam/commit/43ca8789d34e9786043bc201ee3d11f0706f0d25", "message": "Update Timer encoding into V2", "committedDate": "2020-03-27T04:49:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NzU2OA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399587568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE)));\n          \n          \n            \n                                Timer.Coder.of(((KvCoder) mainInput.getCoder()).getKeyCoder(), GlobalWindow.Coder.INSTANCE)));", "author": "lukecwik", "createdAt": "2020-03-27T23:56:41Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ParDoTranslation.java", "diffHunk": "@@ -197,7 +199,7 @@ public boolean canTranslate(PTransform<?, ?> pTransform) {\n                     ((KvCoder) mainInput.getCoder()).getKeyCoder(),\n                     // TODO: Add support for timer payloads to the SDK\n                     // We currently assume that all payloads are unspecified.\n-                    Timer.Coder.of(VoidCoder.of())));\n+                    Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE)));", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MDI0Mg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399740242", "bodyText": "I chose StringUtf8Coder for convenience since there is no place actually parsing this key. I plan to plump through actual coders when migrating to use data channel.", "author": "boyuanzz", "createdAt": "2020-03-29T03:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NzU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAwNTQxNQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r401005415", "bodyText": "sg", "author": "lukecwik", "createdAt": "2020-03-31T15:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NzU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NzYxNg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399587616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // TODO: Add support for timer payloads to the SDK\n          \n          \n            \n                                // We currently assume that all payloads are unspecified.", "author": "lukecwik", "createdAt": "2020-03-27T23:56:54Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/ParDoTranslation.java", "diffHunk": "@@ -197,7 +199,7 @@ public boolean canTranslate(PTransform<?, ?> pTransform) {\n                     ((KvCoder) mainInput.getCoder()).getKeyCoder(),\n                     // TODO: Add support for timer payloads to the SDK\n                     // We currently assume that all payloads are unspecified.", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4ODAzOQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399588039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns a timer for the given timestamp with a user specified payload.\n          \n          \n            \n               * Returns a timer for the given timestamp with a user specified key.", "author": "lukecwik", "createdAt": "2020-03-27T23:59:05Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,14 +49,26 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a timer for the given timestamp with a user specified payload.", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4ODYxMQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399588611", "bodyText": "May I suggest you create these two static methods for creating the two common cases?\n.of(userKey, dynamicTimerTag, fireTimestamp, holdTimestamp, windows, pane);\n.cleared(userKey, dynamicTImerTag);\nthis way you can make sure that dynamicTimerTag, fireTimestamp, holdTimestamp, windows and pane are not null", "author": "lukecwik", "createdAt": "2020-03-28T00:02:06Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,14 +49,26 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a timer for the given timestamp with a user specified payload.\n+   *\n+   * @return\n+   */\n+  // TODO(BEAM-9562): Plumb through actual Timer fields.\n+  public static <T> Timer<T> of(", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNzg1Mw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r400607853", "bodyText": "Thanks for you suggestion! I really like this idea. I planned to refine the signature when moving to data channel, but I can do it in this PR.", "author": "boyuanzz", "createdAt": "2020-03-31T02:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4ODYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4ODY2NQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399588665", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public abstract Boolean getClearBit();\n          \n          \n            \n              public abstract boolean getClearBit();", "author": "lukecwik", "createdAt": "2020-03-28T00:02:23Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -57,11 +78,24 @@\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract T getUserKey();\n+\n+  public abstract String getDynamicTimerTag();\n+\n+  public abstract Boolean getClearBit();", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4ODc4Mg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399588782", "bodyText": "please update class comment", "author": "lukecwik", "createdAt": "2020-03-28T00:02:59Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -73,59 +107,81 @@\n    */\n   public static class Coder<T> extends StructuredCoder<Timer<T>> {", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4OTI0Ng==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399589246", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Boolean clearBit = BooleanCoder.of().decode(inStream);\n          \n          \n            \n                  boolean clearBit = BooleanCoder.of().decode(inStream);", "author": "lukecwik", "createdAt": "2020-03-28T00:05:24Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -73,59 +107,81 @@\n    */\n   public static class Coder<T> extends StructuredCoder<Timer<T>> {\n \n-    public static <T> Coder of(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      return new Coder(payloadCoder);\n+    public static <T> Coder<T> of(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      return new Coder<>(keyCoder, windowCoder);\n     }\n \n-    private final org.apache.beam.sdk.coders.Coder<T> payloadCoder;\n+    private final org.apache.beam.sdk.coders.Coder<T> keyCoder;\n+    private final org.apache.beam.sdk.coders.Coder<Collection<? extends BoundedWindow>>\n+        windowsCoder;\n \n-    private Coder(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      this.payloadCoder = payloadCoder;\n+    private Coder(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      this.keyCoder = keyCoder;\n+      this.windowsCoder = (org.apache.beam.sdk.coders.Coder) CollectionCoder.of(windowCoder);\n+      ;\n     }\n \n     @Override\n     public void encode(Timer<T> timer, OutputStream outStream) throws CoderException, IOException {\n-      InstantCoder.of().encode(timer.getTimestamp(), outStream);\n-      payloadCoder.encode(timer.getPayload(), outStream);\n+      keyCoder.encode(timer.getUserKey(), outStream);\n+      StringUtf8Coder.of().encode(timer.getDynamicTimerTag(), outStream);\n+      BooleanCoder.of().encode(timer.getClearBit(), outStream);\n+      if (!timer.getClearBit()) {\n+        InstantCoder.of().encode(timer.getFireTimestamp(), outStream);\n+        InstantCoder.of().encode(timer.getHoldTimestamp(), outStream);\n+        windowsCoder.encode(timer.getWindows(), outStream);\n+        PaneInfoCoder.INSTANCE.encode(timer.getPane(), outStream);\n+      }\n     }\n \n     @Override\n     public Timer<T> decode(InputStream inStream) throws CoderException, IOException {\n-      Instant instant = InstantCoder.of().decode(inStream);\n-      T value = payloadCoder.decode(inStream);\n-      return Timer.of(instant, value);\n+      T userKey = keyCoder.decode(inStream);\n+      String dynamicTimerTag = StringUtf8Coder.of().decode(inStream);\n+      Boolean clearBit = BooleanCoder.of().decode(inStream);", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4OTMxNQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399589315", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Instant holeTimestamp = InstantCoder.of().decode(inStream);\n          \n          \n            \n                  Instant holdTimestamp = InstantCoder.of().decode(inStream);", "author": "lukecwik", "createdAt": "2020-03-28T00:05:45Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -73,59 +107,81 @@\n    */\n   public static class Coder<T> extends StructuredCoder<Timer<T>> {\n \n-    public static <T> Coder of(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      return new Coder(payloadCoder);\n+    public static <T> Coder<T> of(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      return new Coder<>(keyCoder, windowCoder);\n     }\n \n-    private final org.apache.beam.sdk.coders.Coder<T> payloadCoder;\n+    private final org.apache.beam.sdk.coders.Coder<T> keyCoder;\n+    private final org.apache.beam.sdk.coders.Coder<Collection<? extends BoundedWindow>>\n+        windowsCoder;\n \n-    private Coder(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      this.payloadCoder = payloadCoder;\n+    private Coder(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      this.keyCoder = keyCoder;\n+      this.windowsCoder = (org.apache.beam.sdk.coders.Coder) CollectionCoder.of(windowCoder);\n+      ;\n     }\n \n     @Override\n     public void encode(Timer<T> timer, OutputStream outStream) throws CoderException, IOException {\n-      InstantCoder.of().encode(timer.getTimestamp(), outStream);\n-      payloadCoder.encode(timer.getPayload(), outStream);\n+      keyCoder.encode(timer.getUserKey(), outStream);\n+      StringUtf8Coder.of().encode(timer.getDynamicTimerTag(), outStream);\n+      BooleanCoder.of().encode(timer.getClearBit(), outStream);\n+      if (!timer.getClearBit()) {\n+        InstantCoder.of().encode(timer.getFireTimestamp(), outStream);\n+        InstantCoder.of().encode(timer.getHoldTimestamp(), outStream);\n+        windowsCoder.encode(timer.getWindows(), outStream);\n+        PaneInfoCoder.INSTANCE.encode(timer.getPane(), outStream);\n+      }\n     }\n \n     @Override\n     public Timer<T> decode(InputStream inStream) throws CoderException, IOException {\n-      Instant instant = InstantCoder.of().decode(inStream);\n-      T value = payloadCoder.decode(inStream);\n-      return Timer.of(instant, value);\n+      T userKey = keyCoder.decode(inStream);\n+      String dynamicTimerTag = StringUtf8Coder.of().decode(inStream);\n+      Boolean clearBit = BooleanCoder.of().decode(inStream);\n+      if (clearBit) {\n+        return Timer.of(userKey, dynamicTimerTag, clearBit);\n+      }\n+      Instant fireTimestamp = InstantCoder.of().decode(inStream);\n+      Instant holeTimestamp = InstantCoder.of().decode(inStream);", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4OTYzMw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399589633", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  verifyDeterministic(this, \"Windows coder must be deterministic\", windowsCoder);\n          \n          \n            \n                  verifyDeterministic(this, \"Window coder must be deterministic\", windowsCoder);", "author": "lukecwik", "createdAt": "2020-03-28T00:07:35Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -73,59 +107,81 @@\n    */\n   public static class Coder<T> extends StructuredCoder<Timer<T>> {\n \n-    public static <T> Coder of(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      return new Coder(payloadCoder);\n+    public static <T> Coder<T> of(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      return new Coder<>(keyCoder, windowCoder);\n     }\n \n-    private final org.apache.beam.sdk.coders.Coder<T> payloadCoder;\n+    private final org.apache.beam.sdk.coders.Coder<T> keyCoder;\n+    private final org.apache.beam.sdk.coders.Coder<Collection<? extends BoundedWindow>>\n+        windowsCoder;\n \n-    private Coder(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      this.payloadCoder = payloadCoder;\n+    private Coder(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      this.keyCoder = keyCoder;\n+      this.windowsCoder = (org.apache.beam.sdk.coders.Coder) CollectionCoder.of(windowCoder);\n+      ;\n     }\n \n     @Override\n     public void encode(Timer<T> timer, OutputStream outStream) throws CoderException, IOException {\n-      InstantCoder.of().encode(timer.getTimestamp(), outStream);\n-      payloadCoder.encode(timer.getPayload(), outStream);\n+      keyCoder.encode(timer.getUserKey(), outStream);\n+      StringUtf8Coder.of().encode(timer.getDynamicTimerTag(), outStream);\n+      BooleanCoder.of().encode(timer.getClearBit(), outStream);\n+      if (!timer.getClearBit()) {\n+        InstantCoder.of().encode(timer.getFireTimestamp(), outStream);\n+        InstantCoder.of().encode(timer.getHoldTimestamp(), outStream);\n+        windowsCoder.encode(timer.getWindows(), outStream);\n+        PaneInfoCoder.INSTANCE.encode(timer.getPane(), outStream);\n+      }\n     }\n \n     @Override\n     public Timer<T> decode(InputStream inStream) throws CoderException, IOException {\n-      Instant instant = InstantCoder.of().decode(inStream);\n-      T value = payloadCoder.decode(inStream);\n-      return Timer.of(instant, value);\n+      T userKey = keyCoder.decode(inStream);\n+      String dynamicTimerTag = StringUtf8Coder.of().decode(inStream);\n+      Boolean clearBit = BooleanCoder.of().decode(inStream);\n+      if (clearBit) {\n+        return Timer.of(userKey, dynamicTimerTag, clearBit);\n+      }\n+      Instant fireTimestamp = InstantCoder.of().decode(inStream);\n+      Instant holeTimestamp = InstantCoder.of().decode(inStream);\n+      Collection<? extends BoundedWindow> windows = windowsCoder.decode(inStream);\n+      PaneInfo pane = PaneInfoCoder.INSTANCE.decode(inStream);\n+      return Timer.of(\n+          userKey, dynamicTimerTag, clearBit, fireTimestamp, holeTimestamp, windows, pane);\n     }\n \n     @Override\n     public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n-      return Collections.singletonList(payloadCoder);\n-    }\n-\n-    @Override\n-    public void verifyDeterministic() throws NonDeterministicException {\n-      verifyDeterministic(this, \"Payload coder must be deterministic\", payloadCoder);\n+      return Collections.singletonList(keyCoder);\n     }\n \n     @Override\n-    public boolean consistentWithEquals() {\n-      return payloadCoder.consistentWithEquals();\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getComponents() {\n+      return Arrays.asList(keyCoder, windowsCoder);\n     }\n \n     @Override\n-    public Object structuralValue(Timer<T> value) {\n-      return Timer.of(value.getTimestamp(), payloadCoder.structuralValue(value.getPayload()));\n-    }\n-\n-    @Override\n-    public boolean isRegisterByteSizeObserverCheap(Timer<T> value) {\n-      return payloadCoder.isRegisterByteSizeObserverCheap(value.getPayload());\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      verifyDeterministic(this, \"UserKey coder must be deterministic\", keyCoder);\n+      verifyDeterministic(this, \"Windows coder must be deterministic\", windowsCoder);", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MTQyNQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399591425", "bodyText": "why do you have to specify the tag_coder_impl, shouldn't it always be Python's string utf8 coder?", "author": "lukecwik", "createdAt": "2020-03-28T00:16:50Z", "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -629,22 +629,56 @@ def estimate_size(self, unused_value, nested=False):\n \n class TimerCoderImpl(StreamCoderImpl):\n   \"\"\"For internal use only; no backwards-compatibility guarantees.\"\"\"\n-  def __init__(self, payload_coder_impl):\n+  def __init__(self, key_coder_impl, window_coder_impl, tag_coder_impl):", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTU2MQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r401851561", "bodyText": "Yes it should be as long as we agree on that the tag should be string.", "author": "boyuanzz", "createdAt": "2020-04-01T19:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MTQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MTQ5Ng==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399591496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                self._key_coder_impl.encode_to_stream(value.user_key, out, nested)\n          \n          \n            \n                self._key_coder_impl.encode_to_stream(value.user_key, out, True)\n          \n      \n    \n    \n  \n\nWe should ignore the nested field since it will change the encoding.", "author": "lukecwik", "createdAt": "2020-03-28T00:17:21Z", "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -629,22 +629,56 @@ def estimate_size(self, unused_value, nested=False):\n \n class TimerCoderImpl(StreamCoderImpl):\n   \"\"\"For internal use only; no backwards-compatibility guarantees.\"\"\"\n-  def __init__(self, payload_coder_impl):\n+  def __init__(self, key_coder_impl, window_coder_impl, tag_coder_impl):\n     self._timestamp_coder_impl = TimestampCoderImpl()\n-    self._payload_coder_impl = payload_coder_impl\n+    self._boolean_coder_impl = BooleanCoderImpl()\n+    self._pane_info_coder_impl = PaneInfoCoderImpl()\n+    self._key_coder_impl = key_coder_impl\n+    self._windows_coder_impl = TupleSequenceCoderImpl(window_coder_impl)\n+    self._tag_coder_impl = tag_coder_impl\n \n   def encode_to_stream(self, value, out, nested):\n     # type: (dict, create_OutputStream, bool) -> None\n-    self._timestamp_coder_impl.encode_to_stream(value['timestamp'], out, True)\n-    self._payload_coder_impl.encode_to_stream(value.get('payload'), out, True)\n+    self._key_coder_impl.encode_to_stream(value.user_key, out, nested)", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MTUxOQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399591519", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  self._pane_info_coder_impl.encode_to_stream(value.paneinfo, out, True)\n          \n          \n            \n                  self._pane_info_coder_impl.encode_to_stream(value.paneinfo, out, nested)", "author": "lukecwik", "createdAt": "2020-03-28T00:17:33Z", "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -629,22 +629,56 @@ def estimate_size(self, unused_value, nested=False):\n \n class TimerCoderImpl(StreamCoderImpl):\n   \"\"\"For internal use only; no backwards-compatibility guarantees.\"\"\"\n-  def __init__(self, payload_coder_impl):\n+  def __init__(self, key_coder_impl, window_coder_impl, tag_coder_impl):\n     self._timestamp_coder_impl = TimestampCoderImpl()\n-    self._payload_coder_impl = payload_coder_impl\n+    self._boolean_coder_impl = BooleanCoderImpl()\n+    self._pane_info_coder_impl = PaneInfoCoderImpl()\n+    self._key_coder_impl = key_coder_impl\n+    self._windows_coder_impl = TupleSequenceCoderImpl(window_coder_impl)\n+    self._tag_coder_impl = tag_coder_impl\n \n   def encode_to_stream(self, value, out, nested):\n     # type: (dict, create_OutputStream, bool) -> None\n-    self._timestamp_coder_impl.encode_to_stream(value['timestamp'], out, True)\n-    self._payload_coder_impl.encode_to_stream(value.get('payload'), out, True)\n+    self._key_coder_impl.encode_to_stream(value.user_key, out, nested)\n+    self._tag_coder_impl.encode_to_stream(\n+        value.dynamic_timer_tag, out, True)\n+    self._boolean_coder_impl.encode_to_stream(value.clear_bit, out, True)\n+    if not value.clear_bit:\n+      self._timestamp_coder_impl.encode_to_stream(\n+          value.fire_timestamp, out, True)\n+      self._timestamp_coder_impl.encode_to_stream(\n+          value.hold_timestamp, out, True)\n+      self._windows_coder_impl.encode_to_stream(value.windows, out, True)\n+      self._pane_info_coder_impl.encode_to_stream(value.paneinfo, out, True)", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MTc0Mg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r399591742", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                user_key = self._key_coder_impl.decode_from_stream(in_stream, nested)\n          \n          \n            \n                user_key = self._key_coder_impl.decode_from_stream(in_stream, True)", "author": "lukecwik", "createdAt": "2020-03-28T00:18:45Z", "path": "sdks/python/apache_beam/coders/coder_impl.py", "diffHunk": "@@ -629,22 +629,56 @@ def estimate_size(self, unused_value, nested=False):\n \n class TimerCoderImpl(StreamCoderImpl):\n   \"\"\"For internal use only; no backwards-compatibility guarantees.\"\"\"\n-  def __init__(self, payload_coder_impl):\n+  def __init__(self, key_coder_impl, window_coder_impl, tag_coder_impl):\n     self._timestamp_coder_impl = TimestampCoderImpl()\n-    self._payload_coder_impl = payload_coder_impl\n+    self._boolean_coder_impl = BooleanCoderImpl()\n+    self._pane_info_coder_impl = PaneInfoCoderImpl()\n+    self._key_coder_impl = key_coder_impl\n+    self._windows_coder_impl = TupleSequenceCoderImpl(window_coder_impl)\n+    self._tag_coder_impl = tag_coder_impl\n \n   def encode_to_stream(self, value, out, nested):\n     # type: (dict, create_OutputStream, bool) -> None\n-    self._timestamp_coder_impl.encode_to_stream(value['timestamp'], out, True)\n-    self._payload_coder_impl.encode_to_stream(value.get('payload'), out, True)\n+    self._key_coder_impl.encode_to_stream(value.user_key, out, nested)\n+    self._tag_coder_impl.encode_to_stream(\n+        value.dynamic_timer_tag, out, True)\n+    self._boolean_coder_impl.encode_to_stream(value.clear_bit, out, True)\n+    if not value.clear_bit:\n+      self._timestamp_coder_impl.encode_to_stream(\n+          value.fire_timestamp, out, True)\n+      self._timestamp_coder_impl.encode_to_stream(\n+          value.hold_timestamp, out, True)\n+      self._windows_coder_impl.encode_to_stream(value.windows, out, True)\n+      self._pane_info_coder_impl.encode_to_stream(value.paneinfo, out, True)\n \n   def decode_from_stream(self, in_stream, nested):\n     # type: (create_InputStream, bool) -> dict\n     # TODO(robertwb): Consider using a concrete class rather than a dict here.\n-    return dict(\n-        timestamp=self._timestamp_coder_impl.decode_from_stream(\n+    from apache_beam.transforms import userstate\n+    user_key = self._key_coder_impl.decode_from_stream(in_stream, nested)", "originalCommit": "e2fee34918537de1a553d298da1d7a8e08a10b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e1cbcce5c3a33f7a7c50ccb7418ec10fa342d686", "url": "https://github.com/apache/beam/commit/e1cbcce5c3a33f7a7c50ccb7418ec10fa342d686", "message": "Update standard_coders.yaml", "committedDate": "2020-04-01T21:59:45Z", "type": "forcePushed"}, {"oid": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "url": "https://github.com/apache/beam/commit/d63f9cf3ce5b9683505582e4e47554ca5376405e", "message": "Update standard_coders.yaml", "committedDate": "2020-04-01T22:00:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMDc5Nw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402410797", "bodyText": "Please add a test for a cleared timer encoding.", "author": "lukecwik", "createdAt": "2020-04-02T15:37:08Z", "path": "model/fn-execution/src/main/resources/org/apache/beam/model/fnexecution/v1/standard_coders.yaml", "diffHunk": "@@ -207,15 +224,19 @@ examples:\n \n coder:\n   urn: \"beam:coder:timer:v1\"\n-  components: [{urn: \"beam:coder:bytes:v1\"}]\n+  components: [{urn: \"beam:coder:string_utf8:v1\"},\n+               {urn: \"beam:coder:global_window:v1\"}]\n examples:\n-  \"\\0\\0\\0\\0\\0\\0\\0\\0\\u0003abc\": {timestamp: -9223372036854775808, payload: abc}\n-  \"\\x7f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\\x01\\u0003abc\": {timestamp: -255, payload: abc}\n-  \"\\x7f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\\u0003abc\": {timestamp: -1, payload: abc}\n-  \"\\x80\\0\\0\\0\\0\\0\\0\\0\\u0003abc\": {timestamp: 0, payload: abc}\n-  \"\\x80\\0\\0\\0\\0\\0\\0\\x01\\u0003abc\": {timestamp: 1, payload: abc}\n-  \"\\x80\\0\\0\\0\\0\\0\\x01\\0\\u0003abc\": {timestamp: 256, payload: abc}\n-  \"\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\\u0003abc\": {timestamp: 9223372036854775807, payload: abc}\n+  \"\\u0003\\u006b\\u0065\\u0079\\u0003\\u0074\\u0061\\u0067\\u0000\\u0080\\u0000\\u0000\\u0000\\u0000\\u0000\\u0003\\u00e8\\u0080\\u0000\\u0000\\u0000\\u0000\\u0000\\u0003\\u00e8\\u0000\\u0000\\u0000\\u0001\\u000f\": {", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMTUzMA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402411530", "bodyText": "You sure the charset needs to be ISO_8859_1?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #   byte[] byets = CoderUtils.encodeToByteArray(coder, timer);\n          \n          \n            \n            #   String str = new String(byets, java.nio.charset.StandardCharsets.ISO_8859_1);\n          \n          \n            \n            #   byte[] bytes = CoderUtils.encodeToByteArray(coder, timer);\n          \n          \n            \n            #   String str = new String(bytes, java.nio.charset.StandardCharsets.ISO_8859_1);", "author": "lukecwik", "createdAt": "2020-04-02T15:38:11Z", "path": "model/fn-execution/src/main/resources/org/apache/beam/model/fnexecution/v1/standard_coders.yaml", "diffHunk": "@@ -28,6 +28,23 @@\n #             one of a few standard JSON types such as numbers, strings, dicts that map naturally\n #             to the type encoded by the coder.\n #\n+# Java code snippet to generate example bytes:\n+#   Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE);\n+#   Instant now = new Instant(1000L);\n+#   Timer<String> timer = Timer.of(\n+#     \"key\",\n+#     \"tag\",\n+#     now,\n+#     now,\n+#     Collections.singletonList(GlobalWindow.INSTANCE),\n+#     PaneInfo.NO_FIRING);\n+#   byte[] byets = CoderUtils.encodeToByteArray(coder, timer);\n+#   String str = new String(byets, java.nio.charset.StandardCharsets.ISO_8859_1);", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MTIwMw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402481203", "bodyText": "Kind of sure since it works for me. And I found usage here: \n  \n    \n      beam/runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/CommonCoderTest.java\n    \n    \n         Line 190\n      in\n      03c8544\n    \n    \n    \n    \n\n        \n          \n           byte[] serialized = oneTestSpec.getKey().getBytes(StandardCharsets.ISO_8859_1);", "author": "boyuanzz", "createdAt": "2020-04-02T17:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTQxOQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402685419", "bodyText": "sg", "author": "lukecwik", "createdAt": "2020-04-03T01:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMTUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzk4Mg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402413982", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A timer consists of a userKey, a dynamicTimerTag, a clearBit, a fireTimestamp, a holdTimestamp a\n          \n          \n            \n             * list of window and pane.\n          \n          \n            \n             * A timer consists of a user key, a dynamic timer tag and either a bit that says that this timer should be cleared or data representing the firing timestamp, hold timestamp and a list of windows and pane information that should be used when producing output.", "author": "lukecwik", "createdAt": "2020-04-02T15:41:35Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -21,17 +21,27 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n import org.apache.beam.sdk.coders.CoderException;\n+import org.apache.beam.sdk.coders.CollectionCoder;\n import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.coders.StringUtf8Coder;\n import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.transforms.windowing.PaneInfo;\n+import org.apache.beam.sdk.transforms.windowing.PaneInfo.PaneInfoCoder;\n import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n import org.joda.time.Instant;\n \n /**\n- * A timer consists of a timestamp and a corresponding user supplied payload.\n+ * A timer consists of a userKey, a dynamicTimerTag, a clearBit, a fireTimestamp, a holdTimestamp a\n+ * list of window and pane.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNDczMw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402414733", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n          \n          \n            \n               * holdTimestamp, windows and pane.\n          \n          \n            \n               * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code fireTimestamp},\n          \n          \n            \n               * {@code holdTimestamp}, {@code windows} and {@code pane}.", "author": "lukecwik", "createdAt": "2020-04-02T15:42:39Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNjU5NA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402416594", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n          \n          \n            \n               * from TimerSpec.\n          \n          \n            \n               * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link TimerSpec}.", "author": "lukecwik", "createdAt": "2020-04-02T15:45:14Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxNzY0OQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402417649", "bodyText": "fire timestamp and hold timestamp can be null when the clear is set.", "author": "lukecwik", "createdAt": "2020-04-02T15:46:43Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the clearBit is true.\n    *\n    * <p>The time is relative to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the clearBit is true.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the windows which is associated with the timer. This field is nullable only when the\n+   * clearBit is true.\n+   */\n+  @Nullable\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * clearBit is true.\n+   */\n+  @Nullable\n+  public abstract PaneInfo getPane();\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof Timer)) {\n+      return false;\n+    } else {\n+      Timer<?> that = (Timer<?>) other;\n+\n+      return Objects.equals(this.getUserKey(), that.getUserKey())\n+          && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+          && (this.getClearBit() == that.getClearBit())\n+          && this.getFireTimestamp().equals(that.getFireTimestamp())\n+          && this.getHoldTimestamp().equals(that.getHoldTimestamp())", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxODIzNw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402418237", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Returns a boolean which indicate whether the timer is going to be cleared. */\n          \n          \n            \n              /** Returns whether the timer is going to be cleared. */", "author": "lukecwik", "createdAt": "2020-04-02T15:47:34Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxODU0Nw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402418547", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n          \n          \n            \n               * the clearBit is true.\n          \n          \n            \n               * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n          \n          \n            \n               * the timer is being cleared.", "author": "lukecwik", "createdAt": "2020-04-02T15:47:56Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the clearBit is true.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNTQxNQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402425415", "bodyText": "CC: @robertwb @reuvenlax\nOriginally I was thinking that timers should always be relative but now that I think about it more I think we should make this field absolute. When timers are created during normal element processing within an SDK then watermark timer should be computed based upon the input elements timestamp and processing time timers can be computed using the system's clock. For timers created during timer callbacks, the timers should always be relative to the fire timestamp of that timer.\nHold timestamps by default should be the input elements timestamp plus an optional positive offset during normal element processing and they should be the hold timestamp of the fired timer plus an optional positive offset during timer callbacks.", "author": "lukecwik", "createdAt": "2020-04-02T15:57:10Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the clearBit is true.\n    *\n    * <p>The time is relative to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5NTMxOQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402495319", "bodyText": "Agree on always using absolute timestamp here.\nOne question about computing hold timestamp. Why do we need an  optional positive offset besides input timestamp? I thought the watermark hold should be set as the input element timestamp.", "author": "boyuanzz", "createdAt": "2020-04-02T17:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNTQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwNTIxNQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402505215", "bodyText": "The default should be the input timestamp but we should allow people to set it to any value greater then that. For example, consider a person writing a simple polling function where they check the status of something using a timer and they would like to be able to advance the hold based upon what the current system time is. The input to this transform is the output of impulse (+ a dummy key) so the input timestamp would be MIN_TIMESTAMP initially.", "author": "lukecwik", "createdAt": "2020-04-02T17:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNTQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyNjkzMg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402426932", "bodyText": "This was missed during the doc review but the timer will always need to encode the windowing information otherwise we won't know what windows the timer is in to clear.\nWe'll need to update the documentation for this as well.", "author": "lukecwik", "createdAt": "2020-04-02T15:59:12Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the clearBit is true.\n    *\n    * <p>The time is relative to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the clearBit is true.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the windows which is associated with the timer. This field is nullable only when the\n+   * clearBit is true.\n+   */\n+  @Nullable\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * clearBit is true.\n+   */\n+  @Nullable\n+  public abstract PaneInfo getPane();\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof Timer)) {\n+      return false;\n+    } else {\n+      Timer<?> that = (Timer<?>) other;\n+\n+      return Objects.equals(this.getUserKey(), that.getUserKey())\n+          && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+          && (this.getClearBit() == that.getClearBit())\n+          && this.getFireTimestamp().equals(that.getFireTimestamp())\n+          && this.getHoldTimestamp().equals(that.getHoldTimestamp())\n+          && Objects.equals(this.getWindows(), that.getWindows())\n+          && Objects.equals(this.getPane(), that.getPane());\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    // Hash only the millis of the timestamp to be consistent with equals\n+    return Objects.hash(\n+        getUserKey(),\n+        getDynamicTimerTag(),\n+        getClearBit(),\n+        getFireTimestamp().getMillis(),\n+        getHoldTimestamp().getMillis(),\n+        getWindows(),\n+        getPane());\n+  }\n \n   /**\n    * A {@link org.apache.beam.sdk.coders.Coder} for timers.\n    *\n-   * <p>This coder is deterministic if the payload coder is deterministic.\n+   * <p>This coder is deterministic if both the key coder and window coder are deterministic.\n    *\n-   * <p>This coder is inexpensive for size estimation of elements if the payload coder is\n-   * inexpensive for size estimation.\n+   * <p>This coder is inexpensive for size estimation of elements if the key coder is inexpensive\n+   * for size estimation.\n    */\n   public static class Coder<T> extends StructuredCoder<Timer<T>> {\n \n-    public static <T> Coder of(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      return new Coder(payloadCoder);\n+    public static <T> Coder<T> of(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      return new Coder<>(keyCoder, windowCoder);\n     }\n \n-    private final org.apache.beam.sdk.coders.Coder<T> payloadCoder;\n-\n-    private Coder(org.apache.beam.sdk.coders.Coder<T> payloadCoder) {\n-      this.payloadCoder = payloadCoder;\n+    private final org.apache.beam.sdk.coders.Coder<T> keyCoder;\n+    private final org.apache.beam.sdk.coders.Coder<Collection<? extends BoundedWindow>>\n+        windowsCoder;\n+    private final org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder;\n+\n+    private Coder(\n+        org.apache.beam.sdk.coders.Coder<T> keyCoder,\n+        org.apache.beam.sdk.coders.Coder<? extends BoundedWindow> windowCoder) {\n+      this.windowCoder = windowCoder;\n+      this.keyCoder = keyCoder;\n+      this.windowsCoder = (org.apache.beam.sdk.coders.Coder) CollectionCoder.of(windowCoder);\n     }\n \n     @Override\n     public void encode(Timer<T> timer, OutputStream outStream) throws CoderException, IOException {\n-      InstantCoder.of().encode(timer.getTimestamp(), outStream);\n-      payloadCoder.encode(timer.getPayload(), outStream);\n+      keyCoder.encode(timer.getUserKey(), outStream);\n+      StringUtf8Coder.of().encode(timer.getDynamicTimerTag(), outStream);\n+      BooleanCoder.of().encode(timer.getClearBit(), outStream);\n+      if (!timer.getClearBit()) {\n+        InstantCoder.of().encode(timer.getFireTimestamp(), outStream);\n+        InstantCoder.of().encode(timer.getHoldTimestamp(), outStream);\n+        windowsCoder.encode(timer.getWindows(), outStream);\n+        PaneInfoCoder.INSTANCE.encode(timer.getPane(), outStream);\n+      }", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyODcyMg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402428722", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n          \n          \n            \n               * the clearBit is true.\n          \n          \n            \n               * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n          \n          \n            \n               * the timer is being cleared.", "author": "lukecwik", "createdAt": "2020-04-02T16:01:47Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the clearBit is true.\n    *\n    * <p>The time is relative to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the clearBit is true.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyODg5Mw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402428893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the windows which is associated with the timer. This field is nullable only when the\n          \n          \n            \n               * clearBit is true.\n          \n          \n            \n               * Returns the windows which is associated with the timer.", "author": "lukecwik", "createdAt": "2020-04-02T16:02:02Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the clearBit is true.\n    *\n    * <p>The time is relative to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the clearBit is true.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the windows which is associated with the timer. This field is nullable only when the\n+   * clearBit is true.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyOTA0Mw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402429043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the paneinfo that is related to the timer. This field is nullable only when the\n          \n          \n            \n               * clearBit is true.\n          \n          \n            \n               * Returns the paneinfo that is related to the timer. This field is nullable only when the\n          \n          \n            \n               * timer is being cleared.", "author": "lukecwik", "createdAt": "2020-04-02T16:02:16Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +50,197 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given userKey, dynamicTimerTag, fireTimestamp,\n+   * holdTimestamp, windows and pane.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      Collection<? extends BoundedWindow> windows,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, false, fireTimestamp, holdTimestamp, windows, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag. */\n+  public static <T> Timer<T> cleared(T userKey, String dynamicTimerTag) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, true, null, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is empty string only when the timer is set\n+   * from TimerSpec.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns a boolean which indicate whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the clearBit is true.\n    *\n    * <p>The time is relative to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the clearBit is true.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the windows which is associated with the timer. This field is nullable only when the\n+   * clearBit is true.\n+   */\n+  @Nullable\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * clearBit is true.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMDUxNA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402430514", "bodyText": "check that clear is equal", "author": "lukecwik", "createdAt": "2020-04-02T16:04:25Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/CommonCoderTest.java", "diffHunk": "@@ -434,8 +452,16 @@ private void verifyDecodedValue(CommonCoder coder, Object expectedValue, Object\n       assertFalse(expectedValueIterator.hasNext());\n \n     } else if (s.equals(getUrn(StandardCoders.Enum.TIMER))) {\n-      assertEquals(((Timer) expectedValue).getTimestamp(), ((Timer) actualValue).getTimestamp());\n-      assertThat(((Timer) expectedValue).getPayload(), equalTo(((Timer) actualValue).getPayload()));\n+      assertEquals(((Timer) expectedValue).getUserKey(), ((Timer) actualValue).getUserKey());\n+      assertEquals(", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMTE1MA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402431150", "bodyText": "use two different instant objects otherwise you can't tell if they get swapped accidentally", "author": "lukecwik", "createdAt": "2020-04-02T16:05:24Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/TimerTest.java", "diffHunk": "@@ -36,39 +38,121 @@\n   private static final Instant INSTANT = Instant.now();\n \n   @Test\n-  public void testTimer() {\n-    Timer<Void> timerA = Timer.of(INSTANT);\n-    assertEquals(INSTANT, timerA.getTimestamp());\n-    assertNull(timerA.getPayload());\n+  public void testClearTimer() {\n+    Timer<String> clearedTimer = Timer.cleared(\"timer\", \"tag\");\n+    assertTrue(clearedTimer.getClearBit());\n+    assertEquals(\"timer\", clearedTimer.getUserKey());\n+    assertEquals(\"tag\", clearedTimer.getDynamicTimerTag());\n+  }\n \n-    Timer<String> timerB = Timer.of(INSTANT, \"ABC\");\n-    assertEquals(INSTANT, timerB.getTimestamp());\n-    assertEquals(\"ABC\", timerB.getPayload());\n+  @Test\n+  public void testTimer() {\n+    Timer<String> timer =\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjk2Ng==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402432966", "bodyText": "Add a cleared timer for this case.", "author": "lukecwik", "createdAt": "2020-04-02T16:07:53Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/TimerTest.java", "diffHunk": "@@ -36,39 +38,121 @@\n   private static final Instant INSTANT = Instant.now();\n \n   @Test\n-  public void testTimer() {\n-    Timer<Void> timerA = Timer.of(INSTANT);\n-    assertEquals(INSTANT, timerA.getTimestamp());\n-    assertNull(timerA.getPayload());\n+  public void testClearTimer() {\n+    Timer<String> clearedTimer = Timer.cleared(\"timer\", \"tag\");\n+    assertTrue(clearedTimer.getClearBit());\n+    assertEquals(\"timer\", clearedTimer.getUserKey());\n+    assertEquals(\"tag\", clearedTimer.getDynamicTimerTag());\n+  }\n \n-    Timer<String> timerB = Timer.of(INSTANT, \"ABC\");\n-    assertEquals(INSTANT, timerB.getTimestamp());\n-    assertEquals(\"ABC\", timerB.getPayload());\n+  @Test\n+  public void testTimer() {\n+    Timer<String> timer =\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING);\n+    assertEquals(\"key\", timer.getUserKey());\n+    assertEquals(\"tag\", timer.getDynamicTimerTag());\n+    assertEquals(INSTANT, timer.getFireTimestamp());\n+    assertEquals(INSTANT, timer.getHoldTimestamp());\n+    assertEquals(Collections.singleton(GlobalWindow.INSTANCE), timer.getWindows());\n+    assertEquals(PaneInfo.NO_FIRING, timer.getPane());\n+    assertFalse(timer.getClearBit());\n   }\n \n   @Test\n-  public void testTimerCoderWithInconsistentWithEqualsPayloadCoder() throws Exception {\n-    Coder<Timer<byte[]>> coder = Timer.Coder.of(ByteArrayCoder.of());\n+  public void testTimerCoderWithInconsistentWithEqualsComponentCoders() throws Exception {\n+    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE);\n     CoderProperties.coderSerializable(coder);\n     CoderProperties.structuralValueDecodeEncodeEqual(", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMzEzNw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402433137", "bodyText": "Add a cleared timer for this case.", "author": "lukecwik", "createdAt": "2020-04-02T16:08:10Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/TimerTest.java", "diffHunk": "@@ -36,39 +38,121 @@\n   private static final Instant INSTANT = Instant.now();\n \n   @Test\n-  public void testTimer() {\n-    Timer<Void> timerA = Timer.of(INSTANT);\n-    assertEquals(INSTANT, timerA.getTimestamp());\n-    assertNull(timerA.getPayload());\n+  public void testClearTimer() {\n+    Timer<String> clearedTimer = Timer.cleared(\"timer\", \"tag\");\n+    assertTrue(clearedTimer.getClearBit());\n+    assertEquals(\"timer\", clearedTimer.getUserKey());\n+    assertEquals(\"tag\", clearedTimer.getDynamicTimerTag());\n+  }\n \n-    Timer<String> timerB = Timer.of(INSTANT, \"ABC\");\n-    assertEquals(INSTANT, timerB.getTimestamp());\n-    assertEquals(\"ABC\", timerB.getPayload());\n+  @Test\n+  public void testTimer() {\n+    Timer<String> timer =\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING);\n+    assertEquals(\"key\", timer.getUserKey());\n+    assertEquals(\"tag\", timer.getDynamicTimerTag());\n+    assertEquals(INSTANT, timer.getFireTimestamp());\n+    assertEquals(INSTANT, timer.getHoldTimestamp());\n+    assertEquals(Collections.singleton(GlobalWindow.INSTANCE), timer.getWindows());\n+    assertEquals(PaneInfo.NO_FIRING, timer.getPane());\n+    assertFalse(timer.getClearBit());\n   }\n \n   @Test\n-  public void testTimerCoderWithInconsistentWithEqualsPayloadCoder() throws Exception {\n-    Coder<Timer<byte[]>> coder = Timer.Coder.of(ByteArrayCoder.of());\n+  public void testTimerCoderWithInconsistentWithEqualsComponentCoders() throws Exception {\n+    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE);\n     CoderProperties.coderSerializable(coder);\n     CoderProperties.structuralValueDecodeEncodeEqual(\n-        coder, Timer.of(INSTANT, \"ABC\".getBytes(UTF_8)));\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING));\n     CoderProperties.structuralValueConsistentWithEquals(\n-        coder, Timer.of(INSTANT, \"ABC\".getBytes(UTF_8)), Timer.of(INSTANT, \"ABC\".getBytes(UTF_8)));\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING),\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING));\n   }\n \n   @Test\n-  public void testTimerCoderWithConsistentWithEqualsPayloadCoder() throws Exception {\n-    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of());\n-    CoderProperties.coderDecodeEncodeEqual(coder, Timer.of(INSTANT, \"ABC\"));\n+  public void testTimerCoderWithConsistentWithEqualsComponentCoders() throws Exception {\n+    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE);", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMzg3MQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402433871", "bodyText": "We can get rid of this test since standard_coders.yaml covers it.", "author": "lukecwik", "createdAt": "2020-04-02T16:09:13Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/TimerTest.java", "diffHunk": "@@ -36,39 +38,121 @@\n   private static final Instant INSTANT = Instant.now();\n \n   @Test\n-  public void testTimer() {\n-    Timer<Void> timerA = Timer.of(INSTANT);\n-    assertEquals(INSTANT, timerA.getTimestamp());\n-    assertNull(timerA.getPayload());\n+  public void testClearTimer() {\n+    Timer<String> clearedTimer = Timer.cleared(\"timer\", \"tag\");\n+    assertTrue(clearedTimer.getClearBit());\n+    assertEquals(\"timer\", clearedTimer.getUserKey());\n+    assertEquals(\"tag\", clearedTimer.getDynamicTimerTag());\n+  }\n \n-    Timer<String> timerB = Timer.of(INSTANT, \"ABC\");\n-    assertEquals(INSTANT, timerB.getTimestamp());\n-    assertEquals(\"ABC\", timerB.getPayload());\n+  @Test\n+  public void testTimer() {\n+    Timer<String> timer =\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING);\n+    assertEquals(\"key\", timer.getUserKey());\n+    assertEquals(\"tag\", timer.getDynamicTimerTag());\n+    assertEquals(INSTANT, timer.getFireTimestamp());\n+    assertEquals(INSTANT, timer.getHoldTimestamp());\n+    assertEquals(Collections.singleton(GlobalWindow.INSTANCE), timer.getWindows());\n+    assertEquals(PaneInfo.NO_FIRING, timer.getPane());\n+    assertFalse(timer.getClearBit());\n   }\n \n   @Test\n-  public void testTimerCoderWithInconsistentWithEqualsPayloadCoder() throws Exception {\n-    Coder<Timer<byte[]>> coder = Timer.Coder.of(ByteArrayCoder.of());\n+  public void testTimerCoderWithInconsistentWithEqualsComponentCoders() throws Exception {\n+    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE);\n     CoderProperties.coderSerializable(coder);\n     CoderProperties.structuralValueDecodeEncodeEqual(\n-        coder, Timer.of(INSTANT, \"ABC\".getBytes(UTF_8)));\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING));\n     CoderProperties.structuralValueConsistentWithEquals(\n-        coder, Timer.of(INSTANT, \"ABC\".getBytes(UTF_8)), Timer.of(INSTANT, \"ABC\".getBytes(UTF_8)));\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING),\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING));\n   }\n \n   @Test\n-  public void testTimerCoderWithConsistentWithEqualsPayloadCoder() throws Exception {\n-    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of());\n-    CoderProperties.coderDecodeEncodeEqual(coder, Timer.of(INSTANT, \"ABC\"));\n+  public void testTimerCoderWithConsistentWithEqualsComponentCoders() throws Exception {\n+    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE);\n+    CoderProperties.coderDecodeEncodeEqual(\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singletonList(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING));\n     CoderProperties.coderConsistentWithEquals(\n-        coder, Timer.of(INSTANT, \"ABC\"), Timer.of(INSTANT, \"ABC\"));\n-    CoderProperties.coderDeterministic(coder, Timer.of(INSTANT, \"ABC\"), Timer.of(INSTANT, \"ABC\"));\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singletonList(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING),\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singletonList(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING));\n+    CoderProperties.coderDeterministic(\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singletonList(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING),\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            INSTANT,\n+            INSTANT,\n+            Collections.singletonList(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING));\n   }\n \n   @Test\n   public void testTimerCoderWireFormat() throws Exception {\n-    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of());\n+    Coder<Timer<String>> coder = Timer.Coder.of(StringUtf8Coder.of(), GlobalWindow.Coder.INSTANCE);\n     CoderProperties.coderEncodesBase64(\n-        coder, Timer.of(new Instant(255L), \"ABC\"), \"gAAAAAAAAP8DQUJD\");\n+        coder,\n+        Timer.of(\n+            \"key\",\n+            \"tag\",\n+            new Instant(225L),\n+            new Instant(225L),\n+            Collections.singleton(GlobalWindow.INSTANCE),\n+            PaneInfo.NO_FIRING),\n+        \"A2tleQN0YWcAgAAAAAAAAOGAAAAAAAAA4QAAAAEP\");\n   }", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNzczMQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402437731", "bodyText": "Why is this change necessary?", "author": "lukecwik", "createdAt": "2020-04-02T16:14:43Z", "path": "sdks/python/apache_beam/coders/coders_test_common.py", "diffHunk": "@@ -80,8 +81,9 @@ def tearDownClass(cls):\n         coders.RunnerAPICoderHolder,\n         coders.ToBytesCoder\n     ])\n-    assert not standard - cls.seen, standard - cls.seen\n-    assert not standard - cls.seen_nested, standard - cls.seen_nested\n+    cls.seen_nested -= set([coders.ProtoCoder, CustomCoder])\n+    assert not standard - cls.seen\n+    assert not cls.seen_nested - standard", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwOTMwNA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402509304", "bodyText": "The major change here is assert not cls.seen_nested - standard.  In my case I found that there is a TimerCoder in standard set, which is expected, but not in cls.seen_nested. I checked the code  \n  \n    \n      beam/sdks/python/apache_beam/coders/coders_test_common.py\n    \n    \n         Line 93\n      in\n      b3e0612\n    \n    \n    \n    \n\n        \n          \n           if isinstance(coder, coders.TupleCoder): \n        \n    \n  \n\n, only when the input coder is a TupleCoder, there are new coders added into cls.seen_nested, which means, cls.seen_nested should be a subset of standard, correct? @robertwb What do you think?", "author": "boyuanzz", "createdAt": "2020-04-02T18:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzNzczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzODY2MQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402438661", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # TODO(c): Plumb through actual timer fields.\n          \n          \n            \n                # TODO(BEAM-9562): Plumb through actual timer fields.", "author": "lukecwik", "createdAt": "2020-04-02T16:16:13Z", "path": "sdks/python/apache_beam/runners/worker/bundle_processor.py", "diffHunk": "@@ -580,16 +580,36 @@ def __init__(self,\n \n   def set(self, ts):\n     ts = timestamp.Timestamp.of(ts)\n+    # TODO(c): Plumb through actual timer fields.", "originalCommit": "d63f9cf3ce5b9683505582e4e47554ca5376405e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NzYwNw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402687607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n          \n          \n            \n              /** Returns a cleared timer for the given {@code userKey}, {@code dynamicTimerTag} and {@code windows}. */", "author": "lukecwik", "createdAt": "2020-04-03T01:30:07Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NzcxMg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402687712", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A timer consists of a user key, a dynamic timer tag and either a bit that says that this timer\n          \n          \n            \n             * should be cleared or data representing the firing timestamp, hold timestamp and a list of windows\n          \n          \n            \n             * and pane information that should be used when producing output.\n          \n          \n            \n             * A timer consists of a user key, a dynamic timer tag, a set of windows and either a bit that says that this timer\n          \n          \n            \n             * should be cleared or data representing the firing timestamp, hold timestamp and pane information that should be used when producing output.", "author": "lukecwik", "createdAt": "2020-04-03T01:30:34Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -21,17 +21,29 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n import org.apache.beam.sdk.coders.CoderException;\n+import org.apache.beam.sdk.coders.CollectionCoder;\n import org.apache.beam.sdk.coders.InstantCoder;\n+import org.apache.beam.sdk.coders.StringUtf8Coder;\n import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.state.TimerSpec;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.transforms.windowing.PaneInfo;\n+import org.apache.beam.sdk.transforms.windowing.PaneInfo.PaneInfoCoder;\n import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n import org.joda.time.Instant;\n \n /**\n- * A timer consists of a timestamp and a corresponding user supplied payload.\n+ * A timer consists of a user key, a dynamic timer tag and either a bit that says that this timer\n+ * should be cleared or data representing the firing timestamp, hold timestamp and a list of windows\n+ * and pane information that should be used when producing output.", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NzgyMg==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402687822", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n          \n          \n            \n               * TimerSpec}.\n          \n          \n            \n               * Returns the tag that the timer is set on. The tag is {@code \"\"} when the timer is for a {@link\n          \n          \n            \n               * TimerSpec}.", "author": "lukecwik", "createdAt": "2020-04-03T01:31:01Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n+  public static <T> Timer<T> cleared(\n+      T userKey, String dynamicTimerTag, Collection<? extends BoundedWindow> windows) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, windows, true, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n+   * TimerSpec}.", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4ODA4OQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402688089", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the paneinfo that is related to the timer. This field is nullable only when the\n          \n          \n            \n               * timer is being cleared.\n          \n          \n            \n               * Returns the {@link PaneInfo} that is related to the timer. This field is nullable only when the\n          \n          \n            \n               * timer is being cleared.", "author": "lukecwik", "createdAt": "2020-04-03T01:32:03Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n+  public static <T> Timer<T> cleared(\n+      T userKey, String dynamicTimerTag, Collection<? extends BoundedWindow> windows) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, windows, true, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n+   * TimerSpec}.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns the windows which is associated with the timer. */\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /** Returns whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the timer is being cleared.\n    *\n-   * <p>The time is relative to the time domain defined in the {@link\n+   * <p>The time is absolute to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the timer is being cleared.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * timer is being cleared.", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4ODc2OQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402688769", "bodyText": "This will make the method less error prone in case the contract changes.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (this.getClearBit()) {\n          \n          \n            \n                  return Objects.equals(this.getUserKey(), that.getUserKey())\n          \n          \n            \n                      && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n          \n          \n            \n                      && (this.getClearBit() == that.getClearBit())\n          \n          \n            \n                      && Objects.equals(this.getWindows(), that.getWindows());\n          \n          \n            \n                }\n          \n          \n            \n                return Objects.equals(this.getUserKey(), that.getUserKey())\n          \n          \n            \n                    && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n          \n          \n            \n                    && (this.getClearBit() == that.getClearBit())\n          \n          \n            \n                    && this.getFireTimestamp().equals(that.getFireTimestamp())\n          \n          \n            \n                    && this.getHoldTimestamp().equals(that.getHoldTimestamp())\n          \n          \n            \n                    && Objects.equals(this.getWindows(), that.getWindows())\n          \n          \n            \n                    && Objects.equals(this.getPane(), that.getPane());\n          \n          \n            \n              }\n          \n          \n            \n                return Objects.equals(this.getUserKey(), that.getUserKey())\n          \n          \n            \n                    && Objects.equals(this.getDynamicTimerTag(), that.getDynamicTimerTag())\n          \n          \n            \n                    && Objects.equals(this.getWindows(), that.getWindows())\n          \n          \n            \n                    && (this.getClearBit() == that.getClearBit())\n          \n          \n            \n                    && Objects.equals(this.getFireTimestamp(), that.getFireTimestamp())\n          \n          \n            \n                    && Objects.equals(this.getHoldTimestamp(), that.getHoldTimestamp())\n          \n          \n            \n                    && Objects.equals(this.getPane(), that.getPane());\n          \n          \n            \n              }", "author": "lukecwik", "createdAt": "2020-04-03T01:34:41Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n+  public static <T> Timer<T> cleared(\n+      T userKey, String dynamicTimerTag, Collection<? extends BoundedWindow> windows) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, windows, true, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n+   * TimerSpec}.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns the windows which is associated with the timer. */\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /** Returns whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the timer is being cleared.\n    *\n-   * <p>The time is relative to the time domain defined in the {@link\n+   * <p>The time is absolute to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the timer is being cleared.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * timer is being cleared.\n+   */\n+  @Nullable\n+  public abstract PaneInfo getPane();\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof Timer)) {\n+      return false;\n+    }\n+    Timer<?> that = (Timer<?>) other;\n+    if (this.getClearBit()) {\n+      return Objects.equals(this.getUserKey(), that.getUserKey())\n+          && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+          && (this.getClearBit() == that.getClearBit())\n+          && Objects.equals(this.getWindows(), that.getWindows());\n+    }\n+    return Objects.equals(this.getUserKey(), that.getUserKey())\n+        && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+        && (this.getClearBit() == that.getClearBit())\n+        && this.getFireTimestamp().equals(that.getFireTimestamp())\n+        && this.getHoldTimestamp().equals(that.getHoldTimestamp())\n+        && Objects.equals(this.getWindows(), that.getWindows())\n+        && Objects.equals(this.getPane(), that.getPane());\n+  }", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4ODk3Nw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402688977", "bodyText": "The hash is still stable will null objects.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (getClearBit()) {\n          \n          \n            \n                  return Objects.hash(getUserKey(), getDynamicTimerTag(), getClearBit(), getWindows());\n          \n          \n            \n                }", "author": "lukecwik", "createdAt": "2020-04-03T01:35:30Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n+  public static <T> Timer<T> cleared(\n+      T userKey, String dynamicTimerTag, Collection<? extends BoundedWindow> windows) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, windows, true, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n+   * TimerSpec}.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns the windows which is associated with the timer. */\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /** Returns whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the timer is being cleared.\n    *\n-   * <p>The time is relative to the time domain defined in the {@link\n+   * <p>The time is absolute to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the timer is being cleared.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * timer is being cleared.\n+   */\n+  @Nullable\n+  public abstract PaneInfo getPane();\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof Timer)) {\n+      return false;\n+    }\n+    Timer<?> that = (Timer<?>) other;\n+    if (this.getClearBit()) {\n+      return Objects.equals(this.getUserKey(), that.getUserKey())\n+          && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+          && (this.getClearBit() == that.getClearBit())\n+          && Objects.equals(this.getWindows(), that.getWindows());\n+    }\n+    return Objects.equals(this.getUserKey(), that.getUserKey())\n+        && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+        && (this.getClearBit() == that.getClearBit())\n+        && this.getFireTimestamp().equals(that.getFireTimestamp())\n+        && this.getHoldTimestamp().equals(that.getHoldTimestamp())\n+        && Objects.equals(this.getWindows(), that.getWindows())\n+        && Objects.equals(this.getPane(), that.getPane());\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    // Hash only the millis of the timestamp to be consistent with equals\n+    if (getClearBit()) {\n+      return Objects.hash(getUserKey(), getDynamicTimerTag(), getClearBit(), getWindows());\n+    }", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4OTAzMA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402689030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Objects.hash(\n          \n          \n            \n                    getUserKey(),\n          \n          \n            \n                    getDynamicTimerTag(),\n          \n          \n            \n                    getClearBit(),\n          \n          \n            \n                    getFireTimestamp().getMillis(),\n          \n          \n            \n                    getHoldTimestamp().getMillis(),\n          \n          \n            \n                    getWindows(),\n          \n          \n            \n                    getPane());\n          \n          \n            \n                return Objects.hash(\n          \n          \n            \n                    getUserKey(),\n          \n          \n            \n                    getDynamicTimerTag(),\n          \n          \n            \n                    getWindows(),\n          \n          \n            \n                    getClearBit(),\n          \n          \n            \n                    getFireTimestamp().getMillis(),\n          \n          \n            \n                    getHoldTimestamp().getMillis(),\n          \n          \n            \n                    getPane());", "author": "lukecwik", "createdAt": "2020-04-03T01:35:45Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n+  public static <T> Timer<T> cleared(\n+      T userKey, String dynamicTimerTag, Collection<? extends BoundedWindow> windows) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, windows, true, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n+   * TimerSpec}.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns the windows which is associated with the timer. */\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /** Returns whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the timer is being cleared.\n    *\n-   * <p>The time is relative to the time domain defined in the {@link\n+   * <p>The time is absolute to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the timer is being cleared.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * timer is being cleared.\n+   */\n+  @Nullable\n+  public abstract PaneInfo getPane();\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof Timer)) {\n+      return false;\n+    }\n+    Timer<?> that = (Timer<?>) other;\n+    if (this.getClearBit()) {\n+      return Objects.equals(this.getUserKey(), that.getUserKey())\n+          && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+          && (this.getClearBit() == that.getClearBit())\n+          && Objects.equals(this.getWindows(), that.getWindows());\n+    }\n+    return Objects.equals(this.getUserKey(), that.getUserKey())\n+        && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+        && (this.getClearBit() == that.getClearBit())\n+        && this.getFireTimestamp().equals(that.getFireTimestamp())\n+        && this.getHoldTimestamp().equals(that.getHoldTimestamp())\n+        && Objects.equals(this.getWindows(), that.getWindows())\n+        && Objects.equals(this.getPane(), that.getPane());\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    // Hash only the millis of the timestamp to be consistent with equals\n+    if (getClearBit()) {\n+      return Objects.hash(getUserKey(), getDynamicTimerTag(), getClearBit(), getWindows());\n+    }\n+    return Objects.hash(\n+        getUserKey(),\n+        getDynamicTimerTag(),\n+        getClearBit(),\n+        getFireTimestamp().getMillis(),\n+        getHoldTimestamp().getMillis(),\n+        getWindows(),\n+        getPane());", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcxMzY5Nw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402713697", "bodyText": "getFireTimestamp() returns null when clearBit is true. I think we still need to check  clearBit in order to hash the timestamp with milliseconds.", "author": "boyuanzz", "createdAt": "2020-04-03T03:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4OTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5OTYwOQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r403099609", "bodyText": "good point", "author": "lukecwik", "createdAt": "2020-04-03T15:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4OTAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4OTE4Mw==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402689183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>This coder is inexpensive for size estimation of elements if the key coder is inexpensive\n          \n          \n            \n               * for size estimation.\n          \n          \n            \n               * <p>This coder is inexpensive for size estimation of elements if the key coder and window coder are inexpensive\n          \n          \n            \n               * for size estimation.", "author": "lukecwik", "createdAt": "2020-04-03T01:36:25Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n+  public static <T> Timer<T> cleared(\n+      T userKey, String dynamicTimerTag, Collection<? extends BoundedWindow> windows) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, windows, true, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n+   * TimerSpec}.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns the windows which is associated with the timer. */\n+  public abstract Collection<? extends BoundedWindow> getWindows();\n+\n+  /** Returns whether the timer is going to be cleared. */\n+  public abstract boolean getClearBit();\n+\n   /**\n-   * Returns the timestamp of when the timer is scheduled to fire.\n+   * Returns the timestamp of when the timer is scheduled to fire. This field is nullable only when\n+   * the timer is being cleared.\n    *\n-   * <p>The time is relative to the time domain defined in the {@link\n+   * <p>The time is absolute to the time domain defined in the {@link\n    * org.apache.beam.model.pipeline.v1.RunnerApi.TimerFamilySpec} that is associated with this\n    * timer.\n    */\n-  public abstract Instant getTimestamp();\n+  @Nullable\n+  public abstract Instant getFireTimestamp();\n \n-  /** A user supplied payload. */\n+  /**\n+   * Returns the watermark that the timer is supposed to be held. This field is nullable only when\n+   * the timer is being cleared.\n+   */\n   @Nullable\n-  public abstract T getPayload();\n+  public abstract Instant getHoldTimestamp();\n+\n+  /**\n+   * Returns the paneinfo that is related to the timer. This field is nullable only when the\n+   * timer is being cleared.\n+   */\n+  @Nullable\n+  public abstract PaneInfo getPane();\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (!(other instanceof Timer)) {\n+      return false;\n+    }\n+    Timer<?> that = (Timer<?>) other;\n+    if (this.getClearBit()) {\n+      return Objects.equals(this.getUserKey(), that.getUserKey())\n+          && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+          && (this.getClearBit() == that.getClearBit())\n+          && Objects.equals(this.getWindows(), that.getWindows());\n+    }\n+    return Objects.equals(this.getUserKey(), that.getUserKey())\n+        && this.getDynamicTimerTag().equals(that.getDynamicTimerTag())\n+        && (this.getClearBit() == that.getClearBit())\n+        && this.getFireTimestamp().equals(that.getFireTimestamp())\n+        && this.getHoldTimestamp().equals(that.getHoldTimestamp())\n+        && Objects.equals(this.getWindows(), that.getWindows())\n+        && Objects.equals(this.getPane(), that.getPane());\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    // Hash only the millis of the timestamp to be consistent with equals\n+    if (getClearBit()) {\n+      return Objects.hash(getUserKey(), getDynamicTimerTag(), getClearBit(), getWindows());\n+    }\n+    return Objects.hash(\n+        getUserKey(),\n+        getDynamicTimerTag(),\n+        getClearBit(),\n+        getFireTimestamp().getMillis(),\n+        getHoldTimestamp().getMillis(),\n+        getWindows(),\n+        getPane());\n+  }\n \n   /**\n    * A {@link org.apache.beam.sdk.coders.Coder} for timers.\n    *\n-   * <p>This coder is deterministic if the payload coder is deterministic.\n+   * <p>This coder is deterministic if both the key coder and window coder are deterministic.\n    *\n-   * <p>This coder is inexpensive for size estimation of elements if the payload coder is\n-   * inexpensive for size estimation.\n+   * <p>This coder is inexpensive for size estimation of elements if the key coder is inexpensive\n+   * for size estimation.", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MjIxMA==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402692210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Returns the windows which is associated with the timer. */\n          \n          \n            \n              /** Returns the windows which are associated with the timer. */", "author": "lukecwik", "createdAt": "2020-04-03T01:47:52Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/Timer.java", "diffHunk": "@@ -40,92 +52,201 @@\n @AutoValue\n public abstract class Timer<T> {\n \n-  /** Returns a timer for the given timestamp with a {@code null} payload. */\n-  public static Timer<Void> of(Instant time) {\n-    return of(time, (Void) null);\n+  /**\n+   * Returns a non-cleared timer for the given {@code userKey}, {@code dynamicTimerTag}, {@code\n+   * fireTimestamp}, {@code holdTimestamp}, {@code windows} and {@code pane}.\n+   */\n+  public static <T> Timer<T> of(\n+      T userKey,\n+      String dynamicTimerTag,\n+      Collection<? extends BoundedWindow> windows,\n+      Instant fireTimestamp,\n+      Instant holdTimestamp,\n+      PaneInfo pane) {\n+    return new AutoValue_Timer(\n+        userKey, dynamicTimerTag, windows, false, fireTimestamp, holdTimestamp, pane);\n   }\n \n-  /** Returns a timer for the given timestamp with a user specified payload. */\n-  public static <T> Timer<T> of(Instant timestamp, @Nullable T payload) {\n-    return new AutoValue_Timer(timestamp, payload);\n+  /** Returns a cleared timer for the given userKey, dynamicTimerTag and windows. */\n+  public static <T> Timer<T> cleared(\n+      T userKey, String dynamicTimerTag, Collection<? extends BoundedWindow> windows) {\n+    return new AutoValue_Timer(userKey, dynamicTimerTag, windows, true, null, null, null);\n   }\n \n+  /** Returns the key that the timer is set on. */\n+  public abstract T getUserKey();\n+\n+  /**\n+   * Returns the tag that the timer is set on. This tag is {@code \"\"} when the timer is for a {@link\n+   * TimerSpec}.\n+   */\n+  public abstract String getDynamicTimerTag();\n+\n+  /** Returns the windows which is associated with the timer. */", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY5MjU1MQ==", "url": "https://github.com/apache/beam/pull/11199#discussion_r402692551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Instant FIREINSTANT = new Instant(123L);\n          \n          \n            \n              private static final Instant HOLDINSTANT = new Instant(456L);\n          \n          \n            \n              private static final Instant FIRE_TIME = new Instant(123L);\n          \n          \n            \n              private static final Instant HOLD_TIME = new Instant(456L);", "author": "lukecwik", "createdAt": "2020-04-03T01:49:09Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/TimerTest.java", "diffHunk": "@@ -33,42 +35,128 @@\n /** Tests for {@link Timer}. */\n @RunWith(JUnit4.class)\n public class TimerTest {\n-  private static final Instant INSTANT = Instant.now();\n+  private static final Instant FIREINSTANT = new Instant(123L);\n+  private static final Instant HOLDINSTANT = new Instant(456L);", "originalCommit": "3ca7a1239ccead1a04fc6d42c1533bb11ea3012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "151b2f80997810ed9311124d2831b70a51d1c07a", "url": "https://github.com/apache/beam/commit/151b2f80997810ed9311124d2831b70a51d1c07a", "message": "Update Timer encoding", "committedDate": "2020-04-03T05:18:35Z", "type": "commit"}, {"oid": "151b2f80997810ed9311124d2831b70a51d1c07a", "url": "https://github.com/apache/beam/commit/151b2f80997810ed9311124d2831b70a51d1c07a", "message": "Update Timer encoding", "committedDate": "2020-04-03T05:18:35Z", "type": "forcePushed"}]}