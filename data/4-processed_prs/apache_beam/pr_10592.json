{"pr_number": 10592, "pr_title": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers", "pr_createdAt": "2020-01-15T00:12:05Z", "pr_url": "https://github.com/apache/beam/pull/10592", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwMDgzOA==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370900838", "bodyText": "From looking at the examples in https://mypy.readthedocs.io/en/stable/protocols.html, it seems that the pattern is to name a protocol after what it does.\nAlternate name ideas: PartitionableBuffer, SupportsPartition, PartitionableBytesList", "author": "udim", "createdAt": "2020-01-25T01:03:07Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -262,7 +263,21 @@ def done(self):\n                    in self._req_worker_mapping.items()])\n \n \n-class _ListBuffer(list):\n+class BufferProtocol(Protocol):", "originalCommit": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwMTQwMw==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370901403", "bodyText": "Instead of asserting is not None, the code could self._table.clear() instead of self._table = None in line 359.", "author": "udim", "createdAt": "2020-01-25T01:07:37Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -288,6 +303,7 @@ def append(self, elements_data):\n     # type: (bytes) -> None\n     if self._grouped_output:\n       raise RuntimeError('Grouping table append after read.')\n+    assert self._table is not None", "originalCommit": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1Mzk0Nw==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370953947", "bodyText": "great suggestion", "author": "chadrik", "createdAt": "2020-01-25T20:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwMTQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNTMxOA==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370905318", "bodyText": "This protocol's name does not match its structure. Structurally, _ListBuffer is a CopyOnWriteListProtocol but semantically it does not do the CopyOnWrite part. A verb other than append could be used to make the distinction, perhaps overlay? (and the protocol could be OverlayList or FloatingList)", "author": "udim", "createdAt": "2020-01-25T01:46:20Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -1026,12 +1050,23 @@ def _extract_endpoints(stage,  # type: fn_api_runner_transforms.Stage\n   class StateServicer(beam_fn_api_pb2_grpc.BeamFnStateServicer,\n                       sdk_worker.StateHandler):\n \n+    class CopyOnWriteListProtocol(Protocol):", "originalCommit": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDMyOA==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370954328", "bodyText": "How about we rename this protocol to Buffer and the other to PartitionableBuffer?  PartitionableBuffer can inherit from Buffer and add the partition() method.\nWe don't want to rename append() to overlay() because we want to use a list as one of our data structures that implements this protocol.", "author": "chadrik", "createdAt": "2020-01-25T20:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNTMxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4MDIwNQ==", "url": "https://github.com/apache/beam/pull/10592#discussion_r371380205", "bodyText": "SG", "author": "udim", "createdAt": "2020-01-27T17:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNTMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNjM4Ng==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370906386", "bodyText": "A list is not semantically a CopyOnWriteListProtocol.", "author": "udim", "createdAt": "2020-01-25T01:59:57Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -1065,24 +1106,37 @@ def append(self, item):\n           self._overlay[self._key] = list(self._underlying[self._key])\n         self._overlay[self._key].append(item)\n \n+    StateType = Union[CopyOnWriteState,\n+                      DefaultDict[bytes, CopyOnWriteListProtocol]]\n+\n     def __init__(self):\n+      # type: () -> None\n       self._lock = threading.Lock()\n-      self._state = collections.defaultdict(list)  # type: DefaultDict[bytes, List[bytes]]\n-      self._checkpoint = None\n+      self._state = collections.defaultdict(list)  # type: FnApiRunner.StateServicer.StateType", "originalCommit": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NDI5NQ==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370954295", "bodyText": "List[bytes] implements the CopyOnWriteListProtocol protocol (now simply called Buffer) by virtue of supporting __iter__ and append.", "author": "chadrik", "createdAt": "2020-01-25T20:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNjM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzA0Ng==", "url": "https://github.com/apache/beam/pull/10592#discussion_r370907046", "bodyText": "This is confusing. Why does self._state change its type during the lifetime of StateServicer?\nPerhaps it'd be clearer if there were 2 members (_state and _cow_state), or if self._state was initialized to be a CopyOnWriteState in this method? @robertwb", "author": "udim", "createdAt": "2020-01-25T02:10:02Z", "path": "sdks/python/apache_beam/runners/portability/fn_api_runner.py", "diffHunk": "@@ -1065,24 +1106,37 @@ def append(self, item):\n           self._overlay[self._key] = list(self._underlying[self._key])\n         self._overlay[self._key].append(item)\n \n+    StateType = Union[CopyOnWriteState,\n+                      DefaultDict[bytes, CopyOnWriteListProtocol]]\n+\n     def __init__(self):\n+      # type: () -> None\n       self._lock = threading.Lock()\n-      self._state = collections.defaultdict(list)  # type: DefaultDict[bytes, List[bytes]]", "originalCommit": "a2fb653052b5efc324b7f7f3e2a0e1a1b6b6213f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4NDI0NQ==", "url": "https://github.com/apache/beam/pull/10592#discussion_r371384245", "bodyText": "This comment isn't a blocker for this PR.", "author": "udim", "createdAt": "2020-01-27T17:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkwNzA0Ng=="}], "type": "inlineReview"}, {"oid": "bfe63768c8091f2822ad0ffc5340e80ec80daa58", "url": "https://github.com/apache/beam/commit/bfe63768c8091f2822ad0ffc5340e80ec80daa58", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers", "committedDate": "2020-01-25T20:41:31Z", "type": "forcePushed"}, {"oid": "9c547d3fa8f4e2561f761a02f4bf63ae9403ed38", "url": "https://github.com/apache/beam/commit/9c547d3fa8f4e2561f761a02f4bf63ae9403ed38", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers", "committedDate": "2020-01-25T20:44:10Z", "type": "forcePushed"}, {"oid": "7b4824049623c68a64027183c7e2e0be6009912d", "url": "https://github.com/apache/beam/commit/7b4824049623c68a64027183c7e2e0be6009912d", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers", "committedDate": "2020-01-25T21:48:18Z", "type": "commit"}, {"oid": "7b4824049623c68a64027183c7e2e0be6009912d", "url": "https://github.com/apache/beam/commit/7b4824049623c68a64027183c7e2e0be6009912d", "message": "[BEAM-7746] Introduce a protocol to handle various types of partitioning buffers", "committedDate": "2020-01-25T21:48:18Z", "type": "forcePushed"}]}