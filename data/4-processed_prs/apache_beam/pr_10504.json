{"pr_number": 10504, "pr_title": "[BEAM-9062] Improve assertion error for equal_to", "pr_createdAt": "2020-01-05T23:53:19Z", "pr_url": "https://github.com/apache/beam/pull/10504", "timeline": [{"oid": "bb3cd4f1d3540a0665d62d36362c8cf131b8b8ad", "url": "https://github.com/apache/beam/commit/bb3cd4f1d3540a0665d62d36362c8cf131b8b8ad", "message": "Improve assertion error for equal_to\n\nNow lists the first element found in actual not found in expected, or all of the elements from actual. Only effects the exception error message, which is not covered by any unit tests.", "committedDate": "2020-01-05T23:52:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3MTI0MA==", "url": "https://github.com/apache/beam/pull/10504#discussion_r363471240", "bodyText": "Thanks, @sorensenjs!\n'expected missing X' may be also read as:  expected the missing element X. Consider rewording as \"unexpected element\" and \"missing element\".", "author": "tvalentyn", "createdAt": "2020-01-06T20:35:28Z", "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -179,10 +179,11 @@ def _equal(actual):\n           expected_list.remove(element)\n         except ValueError:\n           raise BeamAssertException(\n-              'Failed assert: %r == %r' % (expected, actual))\n+              'Failed assert: %r == %r, expected missing %r' %", "originalCommit": "bb3cd4f1d3540a0665d62d36362c8cf131b8b8ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70d6e42d3c84144f75e80fe9e0b51381dfec62f3", "url": "https://github.com/apache/beam/commit/70d6e42d3c84144f75e80fe9e0b51381dfec62f3", "message": "Update util.py\n\nAddress recommended change to add 'element' to clarify exception message.", "committedDate": "2020-01-06T21:35:58Z", "type": "commit"}, {"oid": "64b0351a4a1db60165d2e14a4fb9d6aa193d4b3e", "url": "https://github.com/apache/beam/commit/64b0351a4a1db60165d2e14a4fb9d6aa193d4b3e", "message": "Update util.py\n\nFurther clarifications.", "committedDate": "2020-01-06T21:40:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzMTc0Mg==", "url": "https://github.com/apache/beam/pull/10504#discussion_r363531742", "bodyText": "This line exceeds 80 characters. Please fix. Thanks to this PR I realized our lint checker stopped catching this error: https://issues.apache.org/jira/browse/BEAM-9058. Fix is in flight (#10510).", "author": "tvalentyn", "createdAt": "2020-01-06T23:30:48Z", "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -179,11 +179,12 @@ def _equal(actual):\n           expected_list.remove(element)\n         except ValueError:\n           raise BeamAssertException(\n-              'Failed assert: %r == %r, expected missing element %r' %\n+              'Failed assert: %r == %r, right side missing at least element %r' %", "originalCommit": "64b0351a4a1db60165d2e14a4fb9d6aa193d4b3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf72fdc862ebc3415f5575510a7adc5ecaa78f51", "url": "https://github.com/apache/beam/commit/cf72fdc862ebc3415f5575510a7adc5ecaa78f51", "message": "Update util.py\n\nFix line too long.", "committedDate": "2020-01-07T00:06:56Z", "type": "commit"}, {"oid": "820d2a2c65b5907357c7c9ff8503b1c570ca45d9", "url": "https://github.com/apache/beam/commit/820d2a2c65b5907357c7c9ff8503b1c570ca45d9", "message": "Switch left and right.", "committedDate": "2020-01-07T00:23:09Z", "type": "commit"}, {"oid": "f7c426a35f20a154e31d0ff281ba6fba96a5ef17", "url": "https://github.com/apache/beam/commit/f7c426a35f20a154e31d0ff281ba6fba96a5ef17", "message": "Switch actual<->expected, left<->right and add a test", "committedDate": "2020-01-07T01:13:22Z", "type": "commit"}, {"oid": "e688f2ef90ae6dc12e0ac53ca50998801e313ffe", "url": "https://github.com/apache/beam/commit/e688f2ef90ae6dc12e0ac53ca50998801e313ffe", "message": "Add unit tests and more complete messaging about missing elements.", "committedDate": "2020-01-07T01:28:09Z", "type": "commit"}, {"oid": "e2fca02b548f6dc287499b85d62a9502e02ed97a", "url": "https://github.com/apache/beam/commit/e2fca02b548f6dc287499b85d62a9502e02ed97a", "message": "Merge branch 'patch-1' of https://github.com/sorensenjs/beam into patch-1", "committedDate": "2020-01-07T01:32:11Z", "type": "commit"}, {"oid": "b286e45bb06200608423f505cb82523e1d353f98", "url": "https://github.com/apache/beam/commit/b286e45bb06200608423f505cb82523e1d353f98", "message": "Resolve merge conflict.", "committedDate": "2020-01-07T01:34:27Z", "type": "commit"}, {"oid": "d48036a5f57ac4eb8c189397c0f0c6ee4d2199c7", "url": "https://github.com/apache/beam/commit/d48036a5f57ac4eb8c189397c0f0c6ee4d2199c7", "message": "Switch actual and expected print order.", "committedDate": "2020-01-07T01:48:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU2NzM4Mg==", "url": "https://github.com/apache/beam/pull/10504#discussion_r363567382", "bodyText": "Since currently LHS is actual, RHS is expected, I think the error should say \"right side is missing...\" or \"unexpected elements: ...\", and left_missing should be renamed.", "author": "tvalentyn", "createdAt": "2020-01-07T02:21:02Z", "path": "sdks/python/apache_beam/testing/util.py", "diffHunk": "@@ -166,23 +166,27 @@ def _equal(actual):\n       sorted_actual = sorted(actual)\n       if sorted_expected != sorted_actual:\n         raise BeamAssertException(\n-            'Failed assert: %r == %r' % (sorted_expected, sorted_actual))\n+            'Failed assert: %r == %r' % (sorted_actual, sorted_expected))\n     # Slower method, used in two cases:\n     # 1) If sorted expected != actual, use this method to verify the inequality.\n     #    This ensures we don't raise any false negatives for types that don't\n     #    have a deterministic sort order.\n     # 2) As a fallback if we encounter a TypeError in python 3. this method\n     #    works on collections that have different types.\n     except (BeamAssertException, TypeError):\n+      left_missing = []\n       for element in actual:\n         try:\n           expected_list.remove(element)\n         except ValueError:\n-          raise BeamAssertException(\n-              'Failed assert: %r == %r' % (expected, actual))\n-      if expected_list:\n-        raise BeamAssertException(\n-            'Failed assert: %r == %r' % (expected, actual))\n+          left_missing.append(element)\n+      if left_missing or expected_list:\n+        msg = 'Failed assert: %r == %r' % (actual, expected)\n+        if left_missing:\n+          msg = msg + ', left side missing elements %r' % left_missing", "originalCommit": "d48036a5f57ac4eb8c189397c0f0c6ee4d2199c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eea925f5dc456b178512df6e113f7eae6c6c2c97", "url": "https://github.com/apache/beam/commit/eea925f5dc456b178512df6e113f7eae6c6c2c97", "message": "Remove left/right in favor of missing and unexpected.", "committedDate": "2020-01-07T02:51:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0MTUwMg==", "url": "https://github.com/apache/beam/pull/10504#discussion_r363841502", "bodyText": "nit: extra \"missing\" in test name.", "author": "tvalentyn", "createdAt": "2020-01-07T16:44:36Z", "path": "sdks/python/apache_beam/testing/util_test.py", "diffHunk": "@@ -67,6 +67,26 @@ def test_assert_that_fails(self):\n       with TestPipeline() as p:\n         assert_that(p | Create([1, 10, 100]), equal_to([1, 2, 3]))\n \n+  def test_assert_missing(self):\n+    with self.assertRaisesRegexp(Exception,\n+                                 \"missing elements \\['c'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b']), equal_to(['a', 'b', 'c']))\n+\n+  def test_assert_unexpected(self):\n+    with self.assertRaisesRegexp(Exception,\n+                                 \"unexpected elements \\['c', 'd'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b', 'c', 'd']), equal_to(['a', 'b']))\n+\n+  def test_assert_missing_missing_and_unexpected(self):", "originalCommit": "eea925f5dc456b178512df6e113f7eae6c6c2c97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MzkyMA==", "url": "https://github.com/apache/beam/pull/10504#discussion_r363893920", "bodyText": "Done", "author": "sorensenjs", "createdAt": "2020-01-07T18:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0MTUwMg=="}], "type": "inlineReview"}, {"oid": "da60159a22a6f7b82bd8a3c42e84577fe670ae81", "url": "https://github.com/apache/beam/commit/da60159a22a6f7b82bd8a3c42e84577fe670ae81", "message": "Address lint errors, and remove extra missing in test name.", "committedDate": "2020-01-07T17:11:10Z", "type": "commit"}, {"oid": "74ea6e63ffb30eb7c02df179835089d72df4f21a", "url": "https://github.com/apache/beam/commit/74ea6e63ffb30eb7c02df179835089d72df4f21a", "message": "Make lint clean on py2/py3.", "committedDate": "2020-01-07T18:39:05Z", "type": "commit"}, {"oid": "ced311b21e338a6a14cbbef6a04d871b67c4c73f", "url": "https://github.com/apache/beam/commit/ced311b21e338a6a14cbbef6a04d871b67c4c73f", "message": "Switch Py2 and Py3 try-except clause to avoid a warning at test runtime on Py3 and add another possible order of unexpected elements.", "committedDate": "2020-01-07T19:56:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNTE2NA==", "url": "https://github.com/apache/beam/pull/10504#discussion_r363925164", "bodyText": "PCollections don't guarantee the order of elements, so once PCollection materializes we may access its elements in the order of 'a', 'b', 'd', 'c', in which case the generated error message will be \"unexpected elements ['d', 'c']\". While also correct, this message will fail current assertion. Added a small change to accommodate that, and reversed the order in try clause to avoid a warning at runtime on Py3.", "author": "tvalentyn", "createdAt": "2020-01-07T19:59:55Z", "path": "sdks/python/apache_beam/testing/util_test.py", "diffHunk": "@@ -67,6 +73,26 @@ def test_assert_that_fails(self):\n       with TestPipeline() as p:\n         assert_that(p | Create([1, 10, 100]), equal_to([1, 2, 3]))\n \n+  def test_assert_missing(self):\n+    with self.assertRaisesRegex(BeamAssertException,\n+                                r\"missing elements \\['c'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b']), equal_to(['a', 'b', 'c']))\n+\n+  def test_assert_unexpected(self):\n+    with self.assertRaisesRegex(BeamAssertException,\n+                                r\"unexpected elements \\['c', 'd'\\]\"):\n+      with TestPipeline() as p:\n+        assert_that(p | Create(['a', 'b', 'c', 'd']), equal_to(['a', 'b']))", "originalCommit": "74ea6e63ffb30eb7c02df179835089d72df4f21a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}