{"pr_number": 13209, "pr_title": "[BEAM-9615] Add schema coders and tests.", "pr_createdAt": "2020-10-27T23:23:04Z", "pr_url": "https://github.com/apache/beam/pull/13209", "timeline": [{"oid": "71a7459ce4eec30bcfad726a45e85f5b9b82b686", "url": "https://github.com/apache/beam/commit/71a7459ce4eec30bcfad726a45e85f5b9b82b686", "message": "[BEAM-9615] Add schema coders and tests.", "committedDate": "2020-10-27T23:06:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAxMDExNQ==", "url": "https://github.com/apache/beam/pull/13209#discussion_r514010115", "bodyText": "Is the %v in the format string supposed to be the error? It reads like it's meant to output the expected decoded value (i.e. test).", "author": "youngoli", "createdAt": "2020-10-29T06:18:22Z", "path": "sdks/go/pkg/beam/coder_test.go", "diffHunk": "@@ -75,46 +134,51 @@ func TestCoders(t *testing.T) {\n \t\t1,\n \t\ttrue,\n \t\t\"a string\",\n-\t\tmap[int64]string{1: \"one\", 11: \"oneone\", 21: \"twoone\", 1211: \"onetwooneone\"},\n+\t\tmap[int64]string{1: \"one\", 11: \"oneone\", 21: \"twoone\", 1211: \"onetwooneone\"}, // (not supported by custom type registration)\n \t\tstruct {\n \t\t\tA int\n \t\t\tB *string\n \t\t\tC bool\n \t\t}{4, &ptrString, false},\n-\t\t[...]int64{1, 2, 3, 4, 5}, // array\n+\t\t[...]int64{1, 2, 3, 4, 5}, // array (not supported by custom type registration)\n \t\t[]int64{1, 2, 3, 4, 5},    // slice\n \t\tstruct {\n \t\t\tA []int\n \t\t\tB [3]int\n \t\t}{A: []int{1, 2, 3}, B: [...]int{4, 5, 6}},\n+\t\t[...]struct{ A int }{{1}, {2}, {3}, {4}, {5}},\n+\t\t[]struct{ B int }{{1}, {2}, {3}, {4}, {5}},\n+\t\tregTestType{[4]int{4, 2, 4, 2}},\n \t}\n \n \tfor _, test := range tests {\n-\t\tvar results []string\n-\t\trt := reflect.TypeOf(test)\n-\t\tenc := NewElementEncoder(rt)\n-\t\tfor i := 0; i < 10; i++ {\n-\t\t\tvar buf bytes.Buffer\n-\t\t\tif err := enc.Encode(test, &buf); err != nil {\n-\t\t\t\tt.Fatalf(\"Failed to encode %v: %v\", tests, err)\n+\t\tt.Run(fmt.Sprintf(\"%T\", test), func(t *testing.T) {\n+\t\t\tvar results []string\n+\t\t\trt := reflect.TypeOf(test)\n+\t\t\tenc := NewElementEncoder(rt)\n+\t\t\tfor i := 0; i < 10; i++ {\n+\t\t\t\tvar buf bytes.Buffer\n+\t\t\t\tif err := enc.Encode(test, &buf); err != nil {\n+\t\t\t\t\tt.Fatalf(\"Failed to encode %v: %v\", test, err)\n+\t\t\t\t}\n+\t\t\t\tresults = append(results, string(buf.Bytes()))\n \t\t\t}\n-\t\t\tresults = append(results, string(buf.Bytes()))\n-\t\t}\n-\t\tfor i, d := range results {\n-\t\t\tif d != results[0] {\n-\t\t\t\tt.Errorf(\"coder not deterministic: encoding %d not the same as the first encoding: %v != %v \", i, d, results[0])\n+\t\t\tfor i, d := range results {\n+\t\t\t\tif d != results[0] {\n+\t\t\t\t\tt.Errorf(\"coder not deterministic: encoding %d not the same as the first encoding: %v != %v \", i, d, results[0])\n+\t\t\t\t}\n \t\t\t}\n-\t\t}\n \n-\t\tdec := NewElementDecoder(rt)\n-\t\tbuf := bytes.NewBuffer([]byte(results[0]))\n-\t\tdecoded, err := dec.Decode(buf)\n-\t\tif err != nil {\n-\t\t\tt.Fatalf(\"Failed to decode: %v\", err)\n-\t\t}\n+\t\t\tdec := NewElementDecoder(rt)\n+\t\t\tbuf := bytes.NewBuffer([]byte(results[0]))\n+\t\t\tdecoded, err := dec.Decode(buf)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatalf(\"Failed to decode: %q, into %v\", results[0], err)", "originalCommit": "71a7459ce4eec30bcfad726a45e85f5b9b82b686", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwOTYzMg==", "url": "https://github.com/apache/beam/pull/13209#discussion_r514509632", "bodyText": "Done.", "author": "lostluck", "createdAt": "2020-10-29T19:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAxMDExNQ=="}], "type": "inlineReview"}, {"oid": "a930970ed3c45301d2a0c55b232ec70a2653dcdc", "url": "https://github.com/apache/beam/commit/a930970ed3c45301d2a0c55b232ec70a2653dcdc", "message": "Remove \"into\" typo.", "committedDate": "2020-10-29T19:23:26Z", "type": "commit"}]}