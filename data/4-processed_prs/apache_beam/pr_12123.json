{"pr_number": 12123, "pr_title": "MetricFilter matching by Metric objects.", "pr_createdAt": "2020-06-29T21:04:23Z", "pr_url": "https://github.com/apache/beam/pull/12123", "timeline": [{"oid": "943b1fbcd5ad3da302e17b872b031415a442de0a", "url": "https://github.com/apache/beam/commit/943b1fbcd5ad3da302e17b872b031415a442de0a", "message": "MetricFilter matching by Metric objects.\n\nThis change would encourage reusing predefined metric objects in\nmetric queries.\n\nQuerying with the metric object may result more maintainable code\nthan duplicating the name and namespace strings. Or storeing the\nnames elsewhere as CONSTANT_NAME.", "committedDate": "2020-06-29T21:32:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjM3OA==", "url": "https://github.com/apache/beam/pull/12123#discussion_r447282378", "bodyText": "Should we add a new test for with_metric instead of replacing the with_name test?", "author": "aaltay", "createdAt": "2020-06-29T22:08:26Z", "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -162,7 +161,7 @@ def process(self, element):\n     # Verify user counter.\n     metric_results = (\n         res.metrics().query(\n-            MetricsFilter().with_name('metrics_user_counter_element')))\n+            MetricsFilter().with_metric(SomeDoFn.user_counter_elements)))", "originalCommit": "943b1fbcd5ad3da302e17b872b031415a442de0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTcyNA==", "url": "https://github.com/apache/beam/pull/12123#discussion_r447325724", "bodyText": "yes, can you add both to the test, please?", "author": "pabloem", "createdAt": "2020-06-29T23:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NDU5Nw==", "url": "https://github.com/apache/beam/pull/12123#discussion_r447794597", "bodyText": "Sure. I pulled the old test back.", "author": "rainwoodman", "createdAt": "2020-06-30T15:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjM3OA=="}], "type": "inlineReview"}, {"oid": "72e283631b788f19c23b8cc1149875961cdf1cdb", "url": "https://github.com/apache/beam/commit/72e283631b788f19c23b8cc1149875961cdf1cdb", "message": "MetricFilter matching by Metric objects.\n\nThis change would encourage reusing predefined metric objects in\nmetric queries.\n\nQuerying with the metric object may result more maintainable code\nthan duplicating the name and namespace strings. Or storeing the\nnames elsewhere as CONSTANT_NAME.", "committedDate": "2020-06-30T15:52:08Z", "type": "forcePushed"}, {"oid": "ac0f4f05d6a0f2975c564c3723b38dac4eb89c89", "url": "https://github.com/apache/beam/commit/ac0f4f05d6a0f2975c564c3723b38dac4eb89c89", "message": "MetricFilter matching by Metric objects.\n\nThis change would encourage reusing predefined metric objects in\nmetric queries.\n\nQuerying with the metric object may result more maintainable code\nthan duplicating the name and namespace strings. Or storeing the\nnames elsewhere as CONSTANT_NAME.", "committedDate": "2020-06-30T15:54:35Z", "type": "commit"}, {"oid": "ac0f4f05d6a0f2975c564c3723b38dac4eb89c89", "url": "https://github.com/apache/beam/commit/ac0f4f05d6a0f2975c564c3723b38dac4eb89c89", "message": "MetricFilter matching by Metric objects.\n\nThis change would encourage reusing predefined metric objects in\nmetric queries.\n\nQuerying with the metric object may result more maintainable code\nthan duplicating the name and namespace strings. Or storeing the\nnames elsewhere as CONSTANT_NAME.", "committedDate": "2020-06-30T15:54:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMDA1Nw==", "url": "https://github.com/apache/beam/pull/12123#discussion_r447800057", "bodyText": "Is this the canonical way of fetching a metric result?\nDepending on if inc() is ever triggered, or triggered in different Steps, there can be 0 to many entries in the counters list.", "author": "rainwoodman", "createdAt": "2020-06-30T16:03:45Z", "path": "sdks/python/apache_beam/metrics/metric_test.py", "diffHunk": "@@ -159,15 +163,26 @@ def process(self, element):\n     res = pipeline.run()\n     res.wait_until_finish()\n \n+    # Verify static counter.\n+    metric_results = (\n+        res.metrics().query(\n+            MetricsFilter().with_metric(SomeDoFn.static_counter_elements)))\n+    outputs_static_counter = metric_results['counters'][0]\n+\n+    self.assertEqual(\n+        outputs_static_counter.key.metric.name,\n+        'metrics_static_counter_element')\n+    self.assertEqual(outputs_static_counter.committed, 8)\n+\n     # Verify user counter.\n     metric_results = (\n         res.metrics().query(\n             MetricsFilter().with_name('metrics_user_counter_element')))\n-    outputs_counter = metric_results['counters'][0]\n+    outputs_user_counter = metric_results['counters'][0]", "originalCommit": "ac0f4f05d6a0f2975c564c3723b38dac4eb89c89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODgyMQ==", "url": "https://github.com/apache/beam/pull/12123#discussion_r448128821", "bodyText": "you're right. I would not call this the canonical way. Though tbh this API should be improved to be less JAva-like.\nIn this case, we query it this way only for purposes of the unittest, because we know what to expect.", "author": "pabloem", "createdAt": "2020-07-01T05:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMDA1Nw=="}], "type": "inlineReview"}]}