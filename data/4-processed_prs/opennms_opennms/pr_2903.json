{"pr_number": 2903, "pr_title": "NMS-12521: Use protobuf instead of bson for Netflow", "pr_createdAt": "2020-02-26T15:54:44Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2903", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384593722", "bodyText": "I would like to try and maintain avoiding having knowledge of specific payloads in the Telemetry API.\nI realize this may be required if we want to combine the protobuf definitions though and avoid intermediary byte arrays though. IMO it would only be worth doing this if we we're able to show some associated performance benefits.", "author": "j-white", "createdAt": "2020-02-26T16:05:07Z", "path": "features/telemetry/api/pom.xml", "diffHunk": "@@ -45,5 +50,10 @@\n       <groupId>io.dropwizard.metrics</groupId>\n       <artifactId>metrics-core</artifactId>\n     </dependency>\n+    <dependency>", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMjIxNA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384602214", "bodyText": "I currently have netflow.proto generated files in flows/api project but we can move this to telemetry/api ( which is the model I initially had).  I moved this to flows/api as I was trying to avoid conversion from FlowMessage to Flow.  I don't think it offers any performance benefits as it is just converting from one DTO to another.", "author": "cgorantla", "createdAt": "2020-02-26T16:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNDUxMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384604513", "bodyText": "We can keep it in flows/api then. This dependency shouldn't be needed then no?", "author": "j-white", "createdAt": "2020-02-26T16:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwOTgwNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384609806", "bodyText": "yes. I still have the conversion of FlowMessage to Flow in  Netflow5Converter.  Once everything is moved to FlowMessage  it will be removed.", "author": "cgorantla", "createdAt": "2020-02-26T16:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxMjIwNA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384612204", "bodyText": "Sorry, I think we can remove this dependency on flows/api it is only needed in adapter.", "author": "cgorantla", "createdAt": "2020-02-26T16:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyODk2MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r385128961", "bodyText": "IMO, the transport protocol stuff should go to /features/telemetry/protocols/netflow/transport ans it is related to netflow only.", "author": "fooker", "createdAt": "2020-02-27T13:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MDgxOQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r385380819", "bodyText": "IMO, the transport protocol stuff should go to /features/telemetry/protocols/netflow/transport ans it is related to netflow only.\n\nYou mean protobuf generated files should be moved to transport ?", "author": "cgorantla", "createdAt": "2020-02-27T21:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0Njk0MA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r385446940", "bodyText": "Yeah. Abd they should reside under proto/netflow/. This allows parser and adapter to use it.", "author": "fooker", "createdAt": "2020-02-28T00:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5Mzg1NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384593854", "bodyText": "BMP? :)", "author": "j-white", "createdAt": "2020-02-26T16:05:21Z", "path": "features/telemetry/protocols/bmp/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/bmp/adpater/routes/BmpRoutesAdapterTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.bmp.adpater.routes;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.junit.Test;\n+import org.opennms.core.ipc.sink.api.AsyncDispatcher;\n+import org.opennms.netmgt.telemetry.api.receiver.TelemetryMessage;\n+import org.opennms.netmgt.telemetry.protocols.bmp.parser.BmpParser;\n+\n+import com.codahale.metrics.MetricRegistry;\n+\n+public class BmpRoutesAdapterTest {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNTcwMg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384635702", "bodyText": "Not sure if this will work out well. In sflow it's still possible to return multiple flows from one incoming message.\nCollections.singletonList should make it easy to implement the original interface.", "author": "fooker", "createdAt": "2020-02-26T17:07:42Z", "path": "features/flows/api/src/main/java/org/opennms/netmgt/flows/api/Converter.java", "diffHunk": "@@ -30,6 +30,8 @@\n \n import java.util.List;\n \n+// TODO: Remove the converter once proto maps to Flow interface directly.\n public interface Converter<P> {\n     List<Flow> convert(P packet);\n+    Flow convertTo(P packet);", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNjg0NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384636844", "bodyText": "Should be Optional.ofNullable.", "author": "fooker", "createdAt": "2020-02-26T17:09:48Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNjk2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384636962", "bodyText": "Should be Optional.ofNullable", "author": "fooker", "createdAt": "2020-02-26T17:10:02Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNzg3NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384637874", "bodyText": "SmaplingAlgorithm is an enum by itself. We should use the enum variants instead of the number.", "author": "fooker", "createdAt": "2020-02-26T17:11:27Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.getOutputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.getNumPackets();\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.getProtocol();\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+                switch (flowMessage.getSamplingAlgorithm().getNumber()) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNzk4MA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384637980", "bodyText": "Should be Optional.ofNullable", "author": "fooker", "createdAt": "2020-02-26T17:11:36Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.getOutputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.getNumPackets();\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.getProtocol();\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n+                    case 1:\n+                        return SamplingAlgorithm.SystematicCountBasedSampling;\n+                    case 2:\n+                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n+                }\n+                return SamplingAlgorithm.Unassigned;\n+            }\n+\n+            @Override\n+            public Double getSamplingInterval() {\n+                return flowMessage.getSamplingInterval();\n+            }\n+\n+            @Override\n+            public String getSrcAddr() {\n+                return flowMessage.getSrcAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getSrcAddrHostname() {\n+                return Optional.of(flowMessage.getSrcHostname());", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzODE5Mw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384638193", "bodyText": "Use the variants here, too.", "author": "fooker", "createdAt": "2020-02-26T17:11:53Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,223 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.flows.api.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {\n \n     @Override\n-    public List<Flow> convert(final BsonDocument packet) {\n-        return Collections.singletonList(new Netflow5Flow(packet));\n+    public List<Flow> convert(final FlowMessage flowMessage) {\n+\n+        Flow flow = buildFlowFromProto(flowMessage);\n+        List<Flow> flows = new ArrayList<>();\n+        flows.add(flow);\n+        return flows;\n+    }\n+\n+    @Override\n+    public Flow convertTo(FlowMessage flowMessage) {\n+        return buildFlowFromProto(flowMessage);\n+    }\n+\n+    //TODO: Remove conversion and map the interface directly.\n+    private Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.getNumBytes();\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                if (flowMessage.getDirection().equals(org.opennms.netmgt.flows.model.Direction.EGRESS)) {\n+                    return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+                return flowMessage.getDstAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                return Optional.of(flowMessage.getDstHostname());\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.getDstAs();\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.getDstMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.getDstPort();\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.getEngineId();\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.getEngineType();\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.getDeltaSwitched();\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.getFirstSwitched();\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.getNumFlowRecords();\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.getFlowSeqNum();\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.getInputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.getIpProtocolVersion();\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.getLastSwitched();\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                return flowMessage.getNextHopAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                return Optional.of(flowMessage.getNextHopHostname());\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.getOutputSnmpIfindex();\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.getNumPackets();\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.getProtocol();\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+                switch (flowMessage.getSamplingAlgorithm().getNumber()) {\n+                    case 1:\n+                        return SamplingAlgorithm.SystematicCountBasedSampling;\n+                    case 2:\n+                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n+                }\n+                return SamplingAlgorithm.Unassigned;\n+            }\n+\n+            @Override\n+            public Double getSamplingInterval() {\n+                return flowMessage.getSamplingInterval();\n+            }\n+\n+            @Override\n+            public String getSrcAddr() {\n+                return flowMessage.getSrcAddress();\n+            }\n+\n+            @Override\n+            public Optional<String> getSrcAddrHostname() {\n+                return Optional.of(flowMessage.getSrcHostname());\n+            }\n+\n+            @Override\n+            public Long getSrcAs() {\n+                return flowMessage.getSrcAs();\n+            }\n+\n+            @Override\n+            public Integer getSrcMaskLen() {\n+                return flowMessage.getSrcMaskLen();\n+            }\n+\n+            @Override\n+            public Integer getSrcPort() {\n+                return flowMessage.getSrcPort();\n+            }\n+\n+            @Override\n+            public Integer getTcpFlags() {\n+                return flowMessage.getTcpFlags();\n+            }\n+\n+            @Override\n+            public Integer getTos() {\n+                return flowMessage.getTos();\n+            }\n+\n+            @Override\n+            public NetflowVersion getNetflowVersion() {\n+                switch (flowMessage.getNetflowVersion().getNumber()) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzODgzMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384638833", "bodyText": "I'm not sure if \"\" is semantically equal to null in this case.", "author": "fooker", "createdAt": "2020-02-26T17:12:53Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -78,11 +76,11 @@ public void canParseNetflow5Flows() {\n         assertThat(flow.getSamplingInterval(), is(0.0));\n         assertThat(flow.getSamplingAlgorithm(), is(Flow.SamplingAlgorithm.Unassigned));\n         MatcherAssert.assertThat(flow.getSrcAddr(), equalTo(\"10.0.2.2\"));\n-        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.empty()));\n+        MatcherAssert.assertThat(flow.getSrcAddrHostname(), equalTo(Optional.of(\"\")));\n         MatcherAssert.assertThat(flow.getSrcPort(), equalTo(54435));\n         MatcherAssert.assertThat(flow.getSrcMaskLen(), equalTo(0));\n         MatcherAssert.assertThat(flow.getDstAddr(), equalTo(\"10.0.2.15\"));\n-        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.empty()));\n+        MatcherAssert.assertThat(flow.getDstAddrHostname(), equalTo(Optional.of(\"\")));", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzOTA3Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384639072", "bodyText": "VLAN 0 is not equal to no VLAN", "author": "fooker", "createdAt": "2020-02-26T17:13:16Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -95,8 +93,8 @@ public void canParseNetflow5Flows() {\n         MatcherAssert.assertThat(flow.getPackets(), equalTo(5L));\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n-        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n-        MatcherAssert.assertThat(flow.getVlan(), nullValue());\n+        MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.of(\"\")));\n+        MatcherAssert.assertThat(flow.getVlan(), equalTo(0));", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4NDgwMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384684803", "bodyText": "yeah, proto has primitives and never returns null  even for Strings.  need to find a way to differentiate between actual values and not having a value.", "author": "cgorantla", "createdAt": "2020-02-26T18:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzOTA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzA1NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384643054", "bodyText": "I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge.", "author": "fooker", "createdAt": "2020-02-26T17:19:54Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Header.java", "diffHunk": "@@ -111,4 +114,28 @@ public String toString() {\n                 .add(new UnsignedValue(\"@samplingInterval\", this.samplingInterval))\n                 .build();\n     }\n+\n+    void updateBuilder(FlowMessageProto.Builder builder) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY5MTYzMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384691633", "bodyText": "Makes sense. will do that.", "author": "cgorantla", "createdAt": "2020-02-26T18:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzM0OA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384643348", "bodyText": "I would prefer to have these messages in the parser and keep the proto implementations clean of that knowledge.", "author": "fooker", "createdAt": "2020-02-26T17:20:25Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Packet.java", "diffHunk": "@@ -70,6 +75,18 @@ public Packet(final Header header,\n         this.records = records;\n     }\n \n+    private FlowMessageProto.Builder createFlowMessage(Header header, Record record) {", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MzgzMQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r384643831", "bodyText": "Any reason to remove these finals?", "author": "fooker", "createdAt": "2020-02-26T17:21:14Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/netflow5/proto/Record.java", "diffHunk": "@@ -54,9 +56,9 @@\n \n     public final Packet packet; // Enclosing packet\n \n-    public final Inet4Address srcAddr;\n-    public final Inet4Address dstAddr;\n-    public final Inet4Address nextHop;\n+    public Inet4Address srcAddr;", "originalCommit": "766d7069386bc37238465cc8b8d38a51eec8ff4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MDY0NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390190644", "bodyText": "Is this really required in the api module or can the dependency be moved to the transport module?", "author": "fooker", "createdAt": "2020-03-10T09:36:46Z", "path": "features/telemetry/api/pom.xml", "diffHunk": "@@ -27,6 +27,11 @@\n     </plugins>\n   </build>\n   <dependencies>\n+    <dependency>", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MzQxNw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390193417", "bodyText": "This can implement the Converter interface and can be used instead of the {Netflow 5, Netflow9, IPFIX} specific converter implementations. And Therefore it should be renamed, too.", "author": "fooker", "createdAt": "2020-03-10T09:41:48Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class FlowMapper {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDEwNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390194106", "bodyText": "Organize your imports :)", "author": "fooker", "createdAt": "2020-03-10T09:43:08Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java", "diffHunk": "@@ -33,10 +33,18 @@\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NTcyMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390195723", "bodyText": "Maybe we can add a generic NetflowAdapter which reduces the duplicated code in all adapters (which will be all the same, if we unify the Converters). The old Adapter implementations should kept for backward compatibility but will reduce to empty sub-classes.", "author": "fooker", "createdAt": "2020-03-10T09:45:56Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixAdapter.java", "diffHunk": "@@ -33,10 +33,18 @@\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5.Netflow5Adapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class IpfixAdapter extends AbstractFlowAdapter<BsonDocument> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjEzNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390196135", "bodyText": "Same as for IpfixAdapter.", "author": "fooker", "createdAt": "2020-03-10T09:46:33Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Adapter.java", "diffHunk": "@@ -28,17 +28,20 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow5Adapter extends AbstractFlowAdapter<BsonDocument> {\n+public class Netflow5Adapter extends AbstractFlowAdapter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjM5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390196397", "bodyText": "Same as for IpfixAdapter.", "author": "fooker", "createdAt": "2020-03-10T09:46:58Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Adapter.java", "diffHunk": "@@ -28,15 +28,20 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n \n-import org.bson.BsonDocument;\n-import org.bson.RawBsonDocument;\n import org.opennms.netmgt.flows.api.FlowRepository;\n import org.opennms.netmgt.telemetry.api.adapter.TelemetryMessageLogEntry;\n import org.opennms.netmgt.telemetry.protocols.flows.AbstractFlowAdapter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.codahale.metrics.MetricRegistry;\n+import com.google.protobuf.InvalidProtocolBufferException;\n \n-public class Netflow9Adapter extends AbstractFlowAdapter<BsonDocument> {\n+public class Netflow9Adapter extends AbstractFlowAdapter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODI5Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390198297", "bodyText": "Same as for IpfixConverter.", "author": "fooker", "createdAt": "2020-03-10T09:50:12Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5Converter.java", "diffHunk": "@@ -28,17 +28,21 @@\n \n package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow5;\n \n+import static org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper.buildFlowFromProto;\n+\n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n \n-public class Netflow5Converter implements Converter<BsonDocument> {\n+public class Netflow5Converter implements Converter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODgwMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390198803", "bodyText": "Same as for IpfixConverter.", "author": "fooker", "createdAt": "2020-03-10T09:51:00Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9Converter.java", "diffHunk": "@@ -31,14 +31,16 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n \n-public class Netflow9Converter implements Converter<BsonDocument> {\n+public class Netflow9Converter implements Converter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5OTI3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390199271", "bodyText": "This can will be obsolete if FlowMapper will implement Converter", "author": "fooker", "createdAt": "2020-03-10T09:51:47Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixConverter.java", "diffHunk": "@@ -31,14 +31,16 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.common.FlowMapper;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n \n-public class IpfixConverter implements Converter<BsonDocument> {\n+public class IpfixConverter implements Converter<FlowMessage> {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMjQyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390212425", "bodyText": "Can we move the FlowMessageBuilder implementations to the parser module and let the parser do the dispatch by an abstract method (something like protected abstract FlowMessageProtoOrBuilder buildMessage(record, enrichment).\nIn addition, there are a couple of methods below, which still do BSON stuff. Are the still needed?", "author": "fooker", "createdAt": "2020-03-10T10:14:51Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ParserBase.java", "diffHunk": "@@ -259,13 +259,13 @@ public void setThreads(int threads) {\n                     // if we can't keep up\n                     final Runnable dispatch = () -> {\n                         // Let's serialize\n-                        final ByteBuffer buffer = serializeRecords(this.protocol, record, enrichment);\n+                        byte[] flowMessage = FlowMessageBuilderFactory.buildAndSerialize(this.protocol, record, enrichment);", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMjgzNA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390212834", "bodyText": "This dispatching should be done in the parsers...", "author": "fooker", "createdAt": "2020-03-10T10:15:39Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMzczOQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390213739", "bodyText": "Is this really required? The simple no-op RecordEnrichement implementation can be moved to the tests and the original method can be called instead.", "author": "fooker", "createdAt": "2020-03-10T10:17:13Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMTUxMg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390221512", "bodyText": "I'm not sure about this one. I would prefer to use the Values visitor instead of instanceof.", "author": "fooker", "createdAt": "2020-03-10T10:31:24Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMTYwNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390221606", "bodyText": "Maybe this should return Optional instead of a hard coded default.", "author": "fooker", "createdAt": "2020-03-10T10:31:33Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMjExNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390222116", "bodyText": "This would benefit from Optionals, too.", "author": "fooker", "createdAt": "2020-03-10T10:32:30Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {\n+            UnsignedLong unsignedValue = ((UnsignedValue) value).getValue();\n+            return unsignedValue.longValue();\n+        }\n+        return null;\n+    }\n+\n+    static Boolean getBooleanValue(Value<?> value) {\n+        if (value instanceof BooleanValue) {\n+            return ((BooleanValue) value).getValue();\n+        }\n+        return Boolean.FALSE;\n+    }\n+\n+    static InetAddress getInetAddress(Value<?> value) {\n+        if (value instanceof IPv4AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        if (value instanceof IPv6AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        return null;\n+    }\n+\n+    static Instant getTime(Value<?> value) {\n+        if (value instanceof DateTimeValue) {\n+            return ((DateTimeValue) value).getValue();\n+        }\n+        return null;\n+    }\n+\n+    public static <V> Optional<V> first(final V... values) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMjY5NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390222695", "bodyText": "I can't see any usage - do I miss something?", "author": "fooker", "createdAt": "2020-03-10T10:33:36Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {\n+            UnsignedLong unsignedValue = ((UnsignedValue) value).getValue();\n+            return unsignedValue.longValue();\n+        }\n+        return null;\n+    }\n+\n+    static Boolean getBooleanValue(Value<?> value) {\n+        if (value instanceof BooleanValue) {\n+            return ((BooleanValue) value).getValue();\n+        }\n+        return Boolean.FALSE;\n+    }\n+\n+    static InetAddress getInetAddress(Value<?> value) {\n+        if (value instanceof IPv4AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        if (value instanceof IPv6AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        return null;\n+    }\n+\n+    static Instant getTime(Value<?> value) {\n+        if (value instanceof DateTimeValue) {\n+            return ((DateTimeValue) value).getValue();\n+        }\n+        return null;\n+    }\n+\n+    public static <V> Optional<V> first(final V... values) {\n+        return Stream.of(values)\n+                .filter(Objects::nonNull)\n+                .findFirst();\n+    }\n+\n+    public static class Timeout {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMzE5Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390223192", "bodyText": "Maybe this should be called makeTypeValue or buildTypeValue.", "author": "fooker", "createdAt": "2020-03-10T10:34:28Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/FlowMessageBuilderFactory.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.BooleanValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.DateTimeValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv4AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.IPv6AddressValue;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.values.UnsignedValue;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public class FlowMessageBuilderFactory {\n+\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record, RecordEnrichment enrichment) {\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else {\n+            throw new RuntimeException(\"Unknown netflow Protocol\");\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    public static byte[] buildAndSerialize(Protocol protocol, Iterable<Value<?>> record) {\n+        RecordEnrichment enrichment = new RecordEnrichment() {\n+            @Override\n+            public Optional<String> getHostnameFor(InetAddress srcAddress) {\n+                return Optional.empty();\n+            }\n+        };\n+        if (protocol.equals(Protocol.NETFLOW5)) {\n+            Netflow5MessageBuilder builder = new Netflow5MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.NETFLOW9)) {\n+            NetFlow9MessageBuilder builder = new NetFlow9MessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        } else if (protocol.equals(Protocol.IPFIX)) {\n+            IpFixMessageBuilder builder = new IpFixMessageBuilder(record, enrichment);\n+            return builder.buildData();\n+        }\n+        return null;\n+    }\n+\n+\n+    static Long getLongValue(Value<?> value) {\n+        if (value instanceof UnsignedValue) {\n+            UnsignedLong unsignedValue = ((UnsignedValue) value).getValue();\n+            return unsignedValue.longValue();\n+        }\n+        return null;\n+    }\n+\n+    static Boolean getBooleanValue(Value<?> value) {\n+        if (value instanceof BooleanValue) {\n+            return ((BooleanValue) value).getValue();\n+        }\n+        return Boolean.FALSE;\n+    }\n+\n+    static InetAddress getInetAddress(Value<?> value) {\n+        if (value instanceof IPv4AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        if (value instanceof IPv6AddressValue) {\n+            return (InetAddress) value.getValue();\n+        }\n+        return null;\n+    }\n+\n+    static Instant getTime(Value<?> value) {\n+        if (value instanceof DateTimeValue) {\n+            return ((DateTimeValue) value).getValue();\n+        }\n+        return null;\n+    }\n+\n+    public static <V> Optional<V> first(final V... values) {\n+        return Stream.of(values)\n+                .filter(Objects::nonNull)\n+                .findFirst();\n+    }\n+\n+    public static class Timeout {\n+        protected final long active;\n+        protected final long inactive;\n+\n+        public Timeout(final long active, final long inactive) {\n+            this.active = active;\n+            this.inactive = inactive;\n+        }\n+\n+        public long getActive() {\n+            return this.active;\n+        }\n+\n+        public long getInactive() {\n+            return this.inactive;\n+        }\n+    }\n+\n+    static UInt32Value setIntValue(int value) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyOTYxMQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390229611", "bodyText": "I think this can be simplified by assuming that there will be only one value for each of these \"duplicates\" which we try to resolve with the first(...) calls below.\nAs an example:\nIntant flowEnd should be just. You can set it for all its variants (flowEndSeconds, flowEndMilliseconds, flowEndMicroseconds, ...) and just overwrite it if it really should occur more than once.\nThis would reduce the complexity to just the handling of the absolute and the delta values.\nThis is true for a couple of other fields, too.", "author": "fooker", "createdAt": "2020-03-10T10:46:47Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {\n+\n+    private final FlowMessageProto.Builder builder;\n+    private final Iterable<Value<?>> values;\n+    private final RecordEnrichment enrichment;\n+    private Long exportTime;\n+    private Long octetDeltaCount;\n+    private Long postOctetDeltaCount;\n+    private Long layer2OctetDeltaCount;\n+    private Long postLayer2OctetDeltaCount;\n+    private Long transportOctetDeltaCount;\n+    private InetAddress destinationIPv6Address;\n+    private InetAddress destinationIPv4Address;\n+    private Long destinationIPv6PrefixLength;\n+    private Long destinationIPv4PrefixLength;\n+    private Instant flowStartSeconds;\n+    private Instant flowStartMilliseconds;\n+    private Instant flowStartMicroseconds;\n+    private Instant flowStartNanoseconds;\n+    private Long flowStartDeltaMicroseconds;\n+    private Long flowStartSysUpTime;\n+    private Instant systemInitTimeMilliseconds;\n+    private Instant flowEndSeconds;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMDM2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390230362", "bodyText": "Things like this would simplify if getTypeValue would return an Optional.", "author": "fooker", "createdAt": "2020-03-10T10:48:13Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {\n+\n+    private final FlowMessageProto.Builder builder;\n+    private final Iterable<Value<?>> values;\n+    private final RecordEnrichment enrichment;\n+    private Long exportTime;\n+    private Long octetDeltaCount;\n+    private Long postOctetDeltaCount;\n+    private Long layer2OctetDeltaCount;\n+    private Long postLayer2OctetDeltaCount;\n+    private Long transportOctetDeltaCount;\n+    private InetAddress destinationIPv6Address;\n+    private InetAddress destinationIPv4Address;\n+    private Long destinationIPv6PrefixLength;\n+    private Long destinationIPv4PrefixLength;\n+    private Instant flowStartSeconds;\n+    private Instant flowStartMilliseconds;\n+    private Instant flowStartMicroseconds;\n+    private Instant flowStartNanoseconds;\n+    private Long flowStartDeltaMicroseconds;\n+    private Long flowStartSysUpTime;\n+    private Instant systemInitTimeMilliseconds;\n+    private Instant flowEndSeconds;\n+    private Instant flowEndMilliseconds;\n+    private Instant flowEndMicroseconds;\n+    private Instant flowEndNanoseconds;\n+    private Long flowEndDeltaMicroseconds;\n+    private Long flowEndSysUpTime;\n+    private InetAddress ipNextHopIPv6Address;\n+    private InetAddress ipNextHopIPv4Address;\n+    private InetAddress bgpNextHopIPv6Address;\n+    private InetAddress bgpNextHopIPv4Address;\n+    private Long packetDeltaCount;\n+    private Long postPacketDeltaCount;\n+    private Long transportPacketDeltaCount;\n+    private Long samplingAlgorithm;\n+    private Long samplerMode;\n+    private Long selectorAlgorithm;\n+    private Long samplingInterval;\n+    private Long samplerRandomInterval;\n+    private Long samplingFlowInterval;\n+    private Long samplingFlowSpacing;\n+    private Long flowSamplingTimeInterval;\n+    private Long flowSamplingTimeSpacing;\n+    private Long samplingSize;\n+    private Long samplingPopulation;\n+    private Long samplingProbability;\n+    private Long hashSelectedRangeMin;\n+    private Long hashSelectedRangeMax;\n+    private Long hashOutputRangeMin;\n+    private Long hashOutputRangeMax;\n+    private InetAddress sourceIPv6Address;\n+    private InetAddress sourceIPv4Address;\n+    private Long sourceIPv6PrefixLength;\n+    private Long sourceIPv4PrefixLength;\n+    private Long vlanId;\n+    private Long postVlanId;\n+    private Long dot1qVlanId;\n+    private Long dot1qCustomerVlanId;\n+    private Long postDot1qVlanId;\n+    private Long postDot1qCustomerVlanId;\n+    private Long flowActiveTimeout;\n+    private Long flowInactiveTimeout;\n+    private Long numBytes;\n+    private Long numPackets;\n+    private Long firstSwitched;\n+    private Long lastSwitched;\n+\n+    IpFixMessageBuilder(Iterable<Value<?>> values, RecordEnrichment enrichment) {\n+        this.values = values;\n+        this.enrichment = enrichment;\n+        this.builder = FlowMessageProto.newBuilder();\n+    }\n+\n+    private void addField(Value<?> value) {\n+        switch (value.getName()) {\n+            case \"@exportTime\":\n+                exportTime = getLongValue(value);\n+                break;\n+            case \"octetDeltaCount\":\n+                octetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postOctetDeltaCount\":\n+                postOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"layer2OctetDeltaCount\":\n+                layer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postLayer2OctetDeltaCount\":\n+                postLayer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"transportOctetDeltaCount\":\n+                transportOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"flowDirection\":\n+                Long directionValue = getLongValue(value);\n+                Direction direction = Direction.UNRECOGNIZED;\n+                if (directionValue != null) {\n+                    switch (directionValue.intValue()) {\n+                        case 0:\n+                            direction = Direction.INGRESS;\n+                            break;\n+                        case 1:\n+                            direction = Direction.EGRESS;\n+                            break;\n+                    }\n+                }\n+                if (!direction.equals(Direction.UNRECOGNIZED)) {\n+                    this.builder.setDirection(direction);\n+                }\n+                break;\n+            case \"destinationIPv6Address\":\n+                destinationIPv6Address = getInetAddress(value);\n+                break;\n+            case \"destinationIPv4Address\":\n+                destinationIPv4Address = getInetAddress(value);\n+                break;\n+            case \"bgpDestinationAsNumber\":\n+                Long bgpDestinationAsNumber = getLongValue(value);\n+                if (bgpDestinationAsNumber != null) {\n+                    builder.setDstAs(setLongValue(bgpDestinationAsNumber));\n+                }\n+                break;\n+            case \"destinationIPv6PrefixLength\":\n+                destinationIPv6PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationIPv4PrefixLength\":\n+                destinationIPv4PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationTransportPort\":\n+                Long destinationTransportPort = getLongValue(value);\n+                if (destinationTransportPort != null) {\n+                    builder.setDstPort(setIntValue(destinationTransportPort.intValue()));\n+                }\n+                break;\n+            case \"engineId\":\n+                Long engineId = getLongValue(value);\n+                if (engineId != null) {\n+                    builder.setEngineId(setIntValue(engineId.intValue()));\n+                }\n+                break;\n+            case \"engineType\":\n+                Long engineType = getLongValue(value);\n+                if (engineType != null) {\n+                    builder.setEngineType(setIntValue(engineType.intValue()));\n+                }\n+                break;\n+            case \"@recordCount\":\n+                Long recordCount = getLongValue(value);\n+                if (recordCount != null) {\n+                    builder.setNumFlowRecords(setIntValue(recordCount.intValue()));\n+                }\n+                break;\n+            case \"@sequenceNumber\":\n+                Long sequenceNumber = getLongValue(value);\n+                if (sequenceNumber != null) {\n+                    builder.setFlowSeqNum(setLongValue(sequenceNumber));\n+                }\n+                break;\n+            case \"ingressInterface\":\n+                Long ingressInterface = getLongValue(value);\n+                if (ingressInterface != null) {\n+                    builder.setInputSnmpIfindex(setIntValue(ingressInterface.intValue()));\n+                }\n+                break;\n+            case \"ipVersion\":\n+                Long ipVersion = getLongValue(value);\n+                if (ipVersion != null) {\n+                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n+                }\n+                break;\n+            case \"egressInterface\":\n+                Long egressInterface = getLongValue(value);\n+                if (egressInterface != null) {\n+                    builder.setOutputSnmpIfindex(setIntValue(egressInterface.intValue()));\n+                }\n+                break;\n+            case \"protocolIdentifier\":\n+                Long protocolIdentifier = getLongValue(value);\n+                if (protocolIdentifier != null) {\n+                    builder.setProtocol(setIntValue(protocolIdentifier.intValue()));\n+                }\n+                break;\n+            case \"tcpControlBits\":\n+                Long tcpControlBits = getLongValue(value);", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMTYyNg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390231626", "bodyText": "Don't use isPresent. This can be done by nested firsts and single ifPresent which will set the value.", "author": "fooker", "createdAt": "2020-03-10T10:50:31Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {\n+\n+    private final FlowMessageProto.Builder builder;\n+    private final Iterable<Value<?>> values;\n+    private final RecordEnrichment enrichment;\n+    private Long exportTime;\n+    private Long octetDeltaCount;\n+    private Long postOctetDeltaCount;\n+    private Long layer2OctetDeltaCount;\n+    private Long postLayer2OctetDeltaCount;\n+    private Long transportOctetDeltaCount;\n+    private InetAddress destinationIPv6Address;\n+    private InetAddress destinationIPv4Address;\n+    private Long destinationIPv6PrefixLength;\n+    private Long destinationIPv4PrefixLength;\n+    private Instant flowStartSeconds;\n+    private Instant flowStartMilliseconds;\n+    private Instant flowStartMicroseconds;\n+    private Instant flowStartNanoseconds;\n+    private Long flowStartDeltaMicroseconds;\n+    private Long flowStartSysUpTime;\n+    private Instant systemInitTimeMilliseconds;\n+    private Instant flowEndSeconds;\n+    private Instant flowEndMilliseconds;\n+    private Instant flowEndMicroseconds;\n+    private Instant flowEndNanoseconds;\n+    private Long flowEndDeltaMicroseconds;\n+    private Long flowEndSysUpTime;\n+    private InetAddress ipNextHopIPv6Address;\n+    private InetAddress ipNextHopIPv4Address;\n+    private InetAddress bgpNextHopIPv6Address;\n+    private InetAddress bgpNextHopIPv4Address;\n+    private Long packetDeltaCount;\n+    private Long postPacketDeltaCount;\n+    private Long transportPacketDeltaCount;\n+    private Long samplingAlgorithm;\n+    private Long samplerMode;\n+    private Long selectorAlgorithm;\n+    private Long samplingInterval;\n+    private Long samplerRandomInterval;\n+    private Long samplingFlowInterval;\n+    private Long samplingFlowSpacing;\n+    private Long flowSamplingTimeInterval;\n+    private Long flowSamplingTimeSpacing;\n+    private Long samplingSize;\n+    private Long samplingPopulation;\n+    private Long samplingProbability;\n+    private Long hashSelectedRangeMin;\n+    private Long hashSelectedRangeMax;\n+    private Long hashOutputRangeMin;\n+    private Long hashOutputRangeMax;\n+    private InetAddress sourceIPv6Address;\n+    private InetAddress sourceIPv4Address;\n+    private Long sourceIPv6PrefixLength;\n+    private Long sourceIPv4PrefixLength;\n+    private Long vlanId;\n+    private Long postVlanId;\n+    private Long dot1qVlanId;\n+    private Long dot1qCustomerVlanId;\n+    private Long postDot1qVlanId;\n+    private Long postDot1qCustomerVlanId;\n+    private Long flowActiveTimeout;\n+    private Long flowInactiveTimeout;\n+    private Long numBytes;\n+    private Long numPackets;\n+    private Long firstSwitched;\n+    private Long lastSwitched;\n+\n+    IpFixMessageBuilder(Iterable<Value<?>> values, RecordEnrichment enrichment) {\n+        this.values = values;\n+        this.enrichment = enrichment;\n+        this.builder = FlowMessageProto.newBuilder();\n+    }\n+\n+    private void addField(Value<?> value) {\n+        switch (value.getName()) {\n+            case \"@exportTime\":\n+                exportTime = getLongValue(value);\n+                break;\n+            case \"octetDeltaCount\":\n+                octetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postOctetDeltaCount\":\n+                postOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"layer2OctetDeltaCount\":\n+                layer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postLayer2OctetDeltaCount\":\n+                postLayer2OctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"transportOctetDeltaCount\":\n+                transportOctetDeltaCount = getLongValue(value);\n+                break;\n+            case \"flowDirection\":\n+                Long directionValue = getLongValue(value);\n+                Direction direction = Direction.UNRECOGNIZED;\n+                if (directionValue != null) {\n+                    switch (directionValue.intValue()) {\n+                        case 0:\n+                            direction = Direction.INGRESS;\n+                            break;\n+                        case 1:\n+                            direction = Direction.EGRESS;\n+                            break;\n+                    }\n+                }\n+                if (!direction.equals(Direction.UNRECOGNIZED)) {\n+                    this.builder.setDirection(direction);\n+                }\n+                break;\n+            case \"destinationIPv6Address\":\n+                destinationIPv6Address = getInetAddress(value);\n+                break;\n+            case \"destinationIPv4Address\":\n+                destinationIPv4Address = getInetAddress(value);\n+                break;\n+            case \"bgpDestinationAsNumber\":\n+                Long bgpDestinationAsNumber = getLongValue(value);\n+                if (bgpDestinationAsNumber != null) {\n+                    builder.setDstAs(setLongValue(bgpDestinationAsNumber));\n+                }\n+                break;\n+            case \"destinationIPv6PrefixLength\":\n+                destinationIPv6PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationIPv4PrefixLength\":\n+                destinationIPv4PrefixLength = getLongValue(value);\n+                break;\n+            case \"destinationTransportPort\":\n+                Long destinationTransportPort = getLongValue(value);\n+                if (destinationTransportPort != null) {\n+                    builder.setDstPort(setIntValue(destinationTransportPort.intValue()));\n+                }\n+                break;\n+            case \"engineId\":\n+                Long engineId = getLongValue(value);\n+                if (engineId != null) {\n+                    builder.setEngineId(setIntValue(engineId.intValue()));\n+                }\n+                break;\n+            case \"engineType\":\n+                Long engineType = getLongValue(value);\n+                if (engineType != null) {\n+                    builder.setEngineType(setIntValue(engineType.intValue()));\n+                }\n+                break;\n+            case \"@recordCount\":\n+                Long recordCount = getLongValue(value);\n+                if (recordCount != null) {\n+                    builder.setNumFlowRecords(setIntValue(recordCount.intValue()));\n+                }\n+                break;\n+            case \"@sequenceNumber\":\n+                Long sequenceNumber = getLongValue(value);\n+                if (sequenceNumber != null) {\n+                    builder.setFlowSeqNum(setLongValue(sequenceNumber));\n+                }\n+                break;\n+            case \"ingressInterface\":\n+                Long ingressInterface = getLongValue(value);\n+                if (ingressInterface != null) {\n+                    builder.setInputSnmpIfindex(setIntValue(ingressInterface.intValue()));\n+                }\n+                break;\n+            case \"ipVersion\":\n+                Long ipVersion = getLongValue(value);\n+                if (ipVersion != null) {\n+                    builder.setIpProtocolVersion(setIntValue(ipVersion.intValue()));\n+                }\n+                break;\n+            case \"egressInterface\":\n+                Long egressInterface = getLongValue(value);\n+                if (egressInterface != null) {\n+                    builder.setOutputSnmpIfindex(setIntValue(egressInterface.intValue()));\n+                }\n+                break;\n+            case \"protocolIdentifier\":\n+                Long protocolIdentifier = getLongValue(value);\n+                if (protocolIdentifier != null) {\n+                    builder.setProtocol(setIntValue(protocolIdentifier.intValue()));\n+                }\n+                break;\n+            case \"tcpControlBits\":\n+                Long tcpControlBits = getLongValue(value);\n+                if (tcpControlBits != null) {\n+                    builder.setTcpFlags(setIntValue(tcpControlBits.intValue()));\n+                }\n+                break;\n+            case \"ipClassOfService\":\n+                Long ipClassOfService = getLongValue(value);\n+                if (ipClassOfService != null) {\n+                    builder.setTos(setIntValue(ipClassOfService.intValue()));\n+                }\n+                break;\n+            case \"@observationDomainId\":\n+                Long observationDomainId = getLongValue(value);\n+                if (observationDomainId != null) {\n+                    builder.setNodeIdentifier(String.valueOf(observationDomainId));\n+                }\n+                break;\n+\n+            case \"flowStartSeconds\":\n+                flowStartSeconds = getTime(value);\n+                break;\n+            case \"flowStartMilliseconds\":\n+                flowStartMilliseconds = getTime(value);\n+                break;\n+            case \"flowStartMicroseconds\":\n+                flowStartMicroseconds = getTime(value);\n+                break;\n+            case \"flowStartNanoseconds\":\n+                flowStartNanoseconds = getTime(value);\n+                break;\n+            case \"flowStartDeltaMicroseconds\":\n+                flowStartDeltaMicroseconds = getLongValue(value);\n+                break;\n+            case \"flowStartSysUpTime\":\n+                flowStartSysUpTime = getLongValue(value);\n+                break;\n+            case \"systemInitTimeMilliseconds\":\n+                systemInitTimeMilliseconds = getTime(value);\n+                break;\n+            case \"flowEndSeconds\":\n+                flowEndSeconds = getTime(value);\n+                break;\n+            case \"flowEndMilliseconds\":\n+                flowEndMilliseconds = getTime(value);\n+                break;\n+            case \"flowEndMicroseconds\":\n+                flowEndMicroseconds = getTime(value);\n+                break;\n+            case \"flowEndNanoseconds\":\n+                flowEndNanoseconds = getTime(value);\n+            case \"flowEndDeltaMicroseconds\":\n+                flowEndDeltaMicroseconds = getLongValue(value);\n+                break;\n+            case \"flowEndSysUpTime\":\n+                flowEndSysUpTime = getLongValue(value);\n+                break;\n+            case \"ipNextHopIPv6Address\":\n+                ipNextHopIPv6Address = getInetAddress(value);\n+                break;\n+            case \"ipNextHopIPv4Address\":\n+                ipNextHopIPv4Address = getInetAddress(value);\n+                break;\n+            case \"bgpNextHopIPv6Address\":\n+                bgpNextHopIPv6Address = getInetAddress(value);\n+                break;\n+            case \"bgpNextHopIPv4Address\":\n+                bgpNextHopIPv4Address = getInetAddress(value);\n+                break;\n+            case \"packetDeltaCount\":\n+                packetDeltaCount = getLongValue(value);\n+                break;\n+            case \"postPacketDeltaCount\":\n+                postPacketDeltaCount = getLongValue(value);\n+                break;\n+            case \"transportPacketDeltaCount\":\n+                transportPacketDeltaCount = getLongValue(value);\n+                break;\n+            case \"samplingAlgorithm\":\n+                samplingAlgorithm = getLongValue(value);\n+                break;\n+            case \"samplerMode\":\n+                samplerMode = getLongValue(value);\n+                break;\n+            case \"selectorAlgorithm\":\n+                selectorAlgorithm = getLongValue(value);\n+                break;\n+            case \"samplingInterval\":\n+                samplingInterval = getLongValue(value);\n+                break;\n+            case \"samplerRandomInterval\":\n+                samplerRandomInterval = getLongValue(value);\n+                break;\n+            case \"samplingFlowInterval\":\n+                samplingFlowInterval = getLongValue(value);\n+                break;\n+            case \"samplingFlowSpacing\":\n+                samplingFlowSpacing = getLongValue(value);\n+                break;\n+            case \"flowSamplingTimeInterval\":\n+                flowSamplingTimeInterval = getLongValue(value);\n+                break;\n+            case \"flowSamplingTimeSpacing\":\n+                flowSamplingTimeSpacing = getLongValue(value);\n+                break;\n+            case \"samplingSize\":\n+                samplingSize = getLongValue(value);\n+                break;\n+            case \"samplingPopulation\":\n+                samplingPopulation = getLongValue(value);\n+                break;\n+            case \"samplingProbability\":\n+                samplingProbability = getLongValue(value);\n+                break;\n+            case \"hashSelectedRangeMin\":\n+                hashSelectedRangeMin = getLongValue(value);\n+                break;\n+            case \"hashSelectedRangeMax\":\n+                hashSelectedRangeMax = getLongValue(value);\n+                break;\n+            case \"hashOutputRangeMin\":\n+                hashOutputRangeMin = getLongValue(value);\n+                break;\n+            case \"hashOutputRangeMax\":\n+                hashOutputRangeMax = getLongValue(value);\n+                break;\n+            case \"sourceIPv6Address\":\n+                sourceIPv6Address = getInetAddress(value);\n+                break;\n+            case \"sourceIPv4Address\":\n+                sourceIPv4Address = getInetAddress(value);\n+                break;\n+            case \"sourceIPv6PrefixLength\":\n+                sourceIPv6PrefixLength = getLongValue(value);\n+                break;\n+            case \"sourceIPv4PrefixLength\":\n+                sourceIPv4PrefixLength = getLongValue(value);\n+                break;\n+            case \"sourceTransportPort\":\n+                Long sourceTransportPort = getLongValue(value);\n+                if (sourceTransportPort != null) {\n+                    builder.setSrcPort(setIntValue(sourceTransportPort.intValue()));\n+                }\n+                break;\n+            case \"vlanId\":\n+                vlanId = getLongValue(value);\n+                break;\n+            case \"postVlanId\":\n+                postVlanId = getLongValue(value);\n+                break;\n+            case \"dot1qVlanId\":\n+                dot1qVlanId = getLongValue(value);\n+                break;\n+            case \"dot1qCustomerVlanId\":\n+                dot1qCustomerVlanId = getLongValue(value);\n+                break;\n+            case \"postDot1qVlanId\":\n+                postDot1qVlanId = getLongValue(value);\n+                break;\n+            case \"postDot1qCustomerVlanId\":\n+                postDot1qCustomerVlanId = getLongValue(value);\n+                break;\n+            case \"flowActiveTimeout\":\n+                flowActiveTimeout = getLongValue(value);\n+                break;\n+            case \"flowInactiveTimeout\":\n+                flowInactiveTimeout = getLongValue(value);\n+                break;\n+        }\n+    }\n+\n+    byte[] buildData() {\n+\n+        values.forEach(this::addField);\n+\n+        first(octetDeltaCount,\n+                postOctetDeltaCount,\n+                layer2OctetDeltaCount,\n+                postLayer2OctetDeltaCount,\n+                transportOctetDeltaCount)\n+                .ifPresent(bytes -> {\n+                    numBytes = bytes;\n+                    builder.setNumBytes(setLongValue(bytes));\n+                });\n+\n+        first(destinationIPv6Address,\n+                destinationIPv4Address).ifPresent(ipAddress -> {\n+            builder.setDstAddress(ipAddress.getHostAddress());\n+            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setDstHostname);\n+        });\n+\n+        first(destinationIPv6PrefixLength,\n+                destinationIPv4PrefixLength)\n+                .ifPresent(prefixLen -> builder.setDstMaskLen(setIntValue(prefixLen.intValue())));\n+\n+\n+        first(ipNextHopIPv6Address,\n+                ipNextHopIPv4Address,\n+                bgpNextHopIPv6Address,\n+                bgpNextHopIPv4Address).ifPresent(ipAddress -> {\n+            builder.setNextHopAddress(ipAddress.getHostAddress());\n+            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setNextHopHostname);\n+        });\n+\n+        first(sourceIPv6Address,\n+                sourceIPv4Address).ifPresent(ipAddress -> {\n+            builder.setSrcAddress(ipAddress.getHostAddress());\n+            enrichment.getHostnameFor(ipAddress).ifPresent(builder::setSrcHostname);\n+        });\n+\n+        first(sourceIPv6PrefixLength,\n+                sourceIPv4PrefixLength)\n+                .ifPresent(prefixLen -> builder.setSrcMaskLen(setIntValue(prefixLen.intValue())));\n+\n+        first(vlanId,\n+                postVlanId,\n+                dot1qVlanId,\n+                dot1qCustomerVlanId,\n+                postDot1qVlanId,\n+                postDot1qCustomerVlanId)\n+                .ifPresent(vlanId -> builder.setVlan(setIntValue(vlanId.intValue())));\n+\n+        long timeStamp = exportTime * 1000;\n+        builder.setTimestamp(timeStamp);\n+\n+        // Set first switched\n+        Long flowStartDeltaMicroseconds = this.flowStartDeltaMicroseconds != null ?\n+                this.flowStartDeltaMicroseconds + timeStamp : null;\n+        Long systemInitTimeMilliseconds = this.systemInitTimeMilliseconds != null ?\n+                this.systemInitTimeMilliseconds.toEpochMilli() : null;\n+        Long flowStartSysUpTime = this.flowStartSysUpTime != null && systemInitTimeMilliseconds != null ?\n+                this.flowStartSysUpTime + systemInitTimeMilliseconds : null;\n+\n+        Optional<Long> firstSwitchedInMilli = first(flowStartSeconds,\n+                flowStartMilliseconds,\n+                flowStartMicroseconds,\n+                flowStartNanoseconds).map(Instant::toEpochMilli);\n+        if (firstSwitchedInMilli.isPresent()) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDMxMA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390234310", "bodyText": "Oh man, this thing is quite a mess - but I don't have any idea on how to make it any better.", "author": "fooker", "createdAt": "2020-03-10T10:55:37Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/transport/IpFixMessageBuilder.java", "diffHunk": "@@ -0,0 +1,640 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.parser.transport;\n+\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.first;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getInetAddress;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getLongValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.getTime;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setDoubleValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setIntValue;\n+import static org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory.setLongValue;\n+\n+import java.net.InetAddress;\n+import java.time.Instant;\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.RecordEnrichment;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ie.Value;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.common.primitives.UnsignedLong;\n+\n+class IpFixMessageBuilder {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNTE3MA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390235170", "bodyText": "Remove them if they are not used.", "author": "fooker", "createdAt": "2020-03-10T10:57:10Z", "path": "features/telemetry/protocols/netflow/transport/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>org.opennms.features.telemetry.protocols.netflow</artifactId>\n+    <groupId>org.opennms.features.telemetry.protocols</groupId>\n+    <version>26.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.opennms.features.telemetry.protocols.netflow</groupId>\n+  <artifactId>org.opennms.features.telemetry.protocols.netflow.transport</artifactId>\n+  <packaging>bundle</packaging>\n+  <name>OpenNMS :: Features :: Telemetry :: Protocols :: Netflow :: Transport</name>\n+  <build>\n+<!--    <extensions>", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjQ3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390236471", "bodyText": "Please do not commit stuff like this - makes review more hard...", "author": "fooker", "createdAt": "2020-03-10T10:59:30Z", "path": "features/telemetry/protocols/sflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/sflow/adapter/SFlowConverter.java", "diffHunk": "@@ -74,4 +74,5 @@ private static RuntimeException invalidDocument() {\n \n         return result;\n     }\n+", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzAwOA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390237008", "bodyText": "The package should be netflow.transport, to. This was a little confusing...", "author": "fooker", "createdAt": "2020-03-10T11:00:32Z", "path": "features/telemetry/protocols/netflow/transport/src/main/proto/netflow.proto", "diffHunk": "@@ -0,0 +1,74 @@\n+\n+\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"org.opennms.netmgt.telemetry.protocols.netflow.proto\";", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzk5Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390237996", "bodyText": "This should be removed as it's not used.", "author": "fooker", "createdAt": "2020-03-10T11:02:28Z", "path": "features/telemetry/protocols/netflow/transport/src/main/proto/netflow.proto", "diffHunk": "@@ -0,0 +1,74 @@\n+\n+\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"org.opennms.netmgt.telemetry.protocols.netflow.proto\";\n+option java_outer_classname = \"FlowProtos\";\n+\n+import \"google/protobuf/wrappers.proto\";\n+\n+\n+\n+enum Direction {\n+    INGRESS = 0;\n+    EGRESS = 1;\n+}\n+\n+enum SamplingAlgorithm {\n+    Unassigned = 0;\n+    SystematicCountBasedSampling = 1;\n+    SystematicTimeBasedSampling = 2;\n+    RandomNoutOfNSampling = 3;\n+    UniformProbabilisticSampling = 4;\n+    PropertyMatchFiltering = 5;\n+    HashBasedFiltering = 6;\n+    FlowStateDependentIntermediateFlowSelectionProcess = 7;\n+}\n+\n+enum NetflowVersion {\n+    V5 = 0;\n+    V9 = 1;\n+    IPFIX = 2;\n+    SFLOW = 3;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDA2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390240062", "bodyText": "This should be formatted as CAPITALS_WITH_UNDERSCORES.", "author": "fooker", "createdAt": "2020-03-10T11:06:44Z", "path": "features/telemetry/protocols/netflow/transport/src/main/proto/netflow.proto", "diffHunk": "@@ -0,0 +1,74 @@\n+\n+\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"org.opennms.netmgt.telemetry.protocols.netflow.proto\";\n+option java_outer_classname = \"FlowProtos\";\n+\n+import \"google/protobuf/wrappers.proto\";\n+\n+\n+\n+enum Direction {\n+    INGRESS = 0;\n+    EGRESS = 1;\n+}\n+\n+enum SamplingAlgorithm {\n+    Unassigned = 0;\n+    SystematicCountBasedSampling = 1;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDc4NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390240784", "bodyText": "Do not commit stuff like this, please.", "author": "fooker", "createdAt": "2020-03-10T11:08:21Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/ie/RecordProvider.java", "diffHunk": "@@ -30,6 +30,7 @@\n \n import java.util.stream.Stream;\n \n+", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjA3Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390242076", "bodyText": "I can't find any usage of this - is it still needed?", "author": "fooker", "createdAt": "2020-03-10T11:11:03Z", "path": "features/telemetry/protocols/netflow/parser/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/parser/InvalidPacketException.java", "diffHunk": "@@ -40,6 +40,10 @@ public InvalidPacketException(final ByteBuf buffer, final String message, final\n         super(appendPosition(message, buffer), cause);\n     }\n \n+    public InvalidPacketException(final String message, final Throwable cause) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0Mzc1Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390243752", "bodyText": "This should be moved to a standalone class.\nThe old *Flow (like IpfixFlow) classes can be removed.", "author": "fooker", "createdAt": "2020-03-10T11:14:41Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class FlowMapper {\n+\n+    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NjAyMg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390246022", "bodyText": "This should throw an IllegalStateException.", "author": "fooker", "createdAt": "2020-03-10T11:19:48Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/FlowMapper.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class FlowMapper {\n+\n+    public static Flow buildFlowFromProto(FlowMessage flowMessage) {\n+        return new Flow() {\n+            @Override\n+            public long getTimestamp() {\n+                return flowMessage.getTimestamp();\n+            }\n+\n+            @Override\n+            public Long getBytes() {\n+                return flowMessage.hasNumBytes() ? flowMessage.getNumBytes().getValue() : null;\n+            }\n+\n+            @Override\n+            public Direction getDirection() {\n+                switch (flowMessage.getDirection()) {\n+                    case INGRESS:\n+                        return Direction.INGRESS;\n+                    case EGRESS:\n+                        return Direction.EGRESS;\n+                }\n+                return Direction.INGRESS;\n+\n+            }\n+\n+            @Override\n+            public String getDstAddr() {\n+\n+                if (!Strings.isNullOrEmpty(flowMessage.getDstAddress())) {\n+                    return flowMessage.getDstAddress();\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<String> getDstAddrHostname() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getDstHostname())) {\n+                    return Optional.of(flowMessage.getDstHostname());\n+                }\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Long getDstAs() {\n+                return flowMessage.hasDstAs() ? flowMessage.getDstAs().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getDstMaskLen() {\n+                return flowMessage.hasDstMaskLen() ? flowMessage.getDstMaskLen().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getDstPort() {\n+                return flowMessage.hasDstPort() ? flowMessage.getDstPort().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getEngineId() {\n+                return flowMessage.hasEngineId() ? flowMessage.getEngineId().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getEngineType() {\n+                return flowMessage.hasEngineType() ? flowMessage.getEngineType().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getDeltaSwitched() {\n+                return flowMessage.hasDeltaSwitched() ? flowMessage.getDeltaSwitched().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getFirstSwitched() {\n+                return flowMessage.hasFirstSwitched() ? flowMessage.getFirstSwitched().getValue() : null;\n+            }\n+\n+            @Override\n+            public int getFlowRecords() {\n+                return flowMessage.hasNumFlowRecords() ? flowMessage.getNumFlowRecords().getValue() : 0;\n+            }\n+\n+            @Override\n+            public long getFlowSeqNum() {\n+                return flowMessage.hasFlowSeqNum() ? flowMessage.getFlowSeqNum().getValue() : 0L;\n+            }\n+\n+            @Override\n+            public Integer getInputSnmp() {\n+                return flowMessage.hasInputSnmpIfindex() ? flowMessage.getInputSnmpIfindex().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getIpProtocolVersion() {\n+                return flowMessage.hasIpProtocolVersion() ? flowMessage.getIpProtocolVersion().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getLastSwitched() {\n+                return flowMessage.hasLastSwitched() ? flowMessage.getLastSwitched().getValue() : null;\n+            }\n+\n+            @Override\n+            public String getNextHop() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getNextHopAddress())) {\n+                    return flowMessage.getNextHopAddress();\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<String> getNextHopHostname() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getNextHopHostname())) {\n+                    return Optional.of(flowMessage.getNextHopHostname());\n+                }\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Integer getOutputSnmp() {\n+                return flowMessage.hasOutputSnmpIfindex() ? flowMessage.getOutputSnmpIfindex().getValue() : null;\n+            }\n+\n+            @Override\n+            public Long getPackets() {\n+                return flowMessage.hasNumPackets() ? flowMessage.getNumPackets().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getProtocol() {\n+                return flowMessage.hasProtocol() ? flowMessage.getProtocol().getValue() : null;\n+            }\n+\n+            @Override\n+            public SamplingAlgorithm getSamplingAlgorithm() {\n+\n+                switch (flowMessage.getSamplingAlgorithm()) {\n+                    case SystematicCountBasedSampling:\n+                        return SamplingAlgorithm.SystematicCountBasedSampling;\n+                    case SystematicTimeBasedSampling:\n+                        return SamplingAlgorithm.SystematicTimeBasedSampling;\n+                    case RandomNoutOfNSampling:\n+                        return SamplingAlgorithm.RandomNoutOfNSampling;\n+                    case UniformProbabilisticSampling:\n+                        return SamplingAlgorithm.UniformProbabilisticSampling;\n+                    case PropertyMatchFiltering:\n+                        return SamplingAlgorithm.PropertyMatchFiltering;\n+                    case HashBasedFiltering:\n+                        return SamplingAlgorithm.HashBasedFiltering;\n+                    case FlowStateDependentIntermediateFlowSelectionProcess:\n+                        return SamplingAlgorithm.FlowStateDependentIntermediateFlowSelectionProcess;\n+                }\n+                return SamplingAlgorithm.Unassigned;\n+            }\n+\n+            @Override\n+            public Double getSamplingInterval() {\n+                return  flowMessage.hasSamplingInterval() ? flowMessage.getSamplingInterval().getValue() : null;\n+            }\n+\n+            @Override\n+            public String getSrcAddr() {\n+                if(!Strings.isNullOrEmpty(flowMessage.getSrcAddress())) {\n+                    return flowMessage.getSrcAddress();\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Optional<String> getSrcAddrHostname() {\n+                if (!Strings.isNullOrEmpty(flowMessage.getSrcHostname())) {\n+                    return Optional.of(flowMessage.getSrcHostname());\n+                }\n+                return Optional.empty();\n+            }\n+\n+            @Override\n+            public Long getSrcAs() {\n+                return flowMessage.hasSrcAs() ? flowMessage.getSrcAs().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getSrcMaskLen() {\n+                return flowMessage.hasSrcMaskLen() ? flowMessage.getSrcMaskLen().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getSrcPort() {\n+                return flowMessage.hasSrcPort() ? flowMessage.getSrcPort().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getTcpFlags() {\n+                return flowMessage.hasTcpFlags() ? flowMessage.getTcpFlags().getValue() : null;\n+            }\n+\n+            @Override\n+            public Integer getTos() {\n+                return flowMessage.hasTos() ? flowMessage.getTos().getValue() : null;\n+            }\n+\n+            @Override\n+            public NetflowVersion getNetflowVersion() {\n+                switch (flowMessage.getNetflowVersion()) {\n+                    case V5:\n+                        return NetflowVersion.V5;\n+                    case V9:\n+                        return NetflowVersion.V9;\n+                    case IPFIX:\n+                        return NetflowVersion.IPFIX;\n+                    case SFLOW:\n+                        return NetflowVersion.SFLOW;\n+                    default:\n+                        return NetflowVersion.V5;", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTQ5NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390249494", "bodyText": "Is this hand edited?", "author": "fooker", "createdAt": "2020-03-10T11:27:35Z", "path": "features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/proto/FlowMessageProtoOrBuilder.java", "diffHunk": "@@ -0,0 +1,800 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+// Generated by the protocol buffer compiler.  DO NOT EDIT!\n+// source: netflow.proto\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.proto;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+\n+public interface FlowMessageProtoOrBuilder extends\n+    // @@protoc_insertion_point(interface_extends:FlowMessageProto)\n+    com.google.protobuf.MessageOrBuilder, FlowMessage {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTkzNw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390249937", "bodyText": "I don't think we need this interface at all. Instead, we should use the FlowMessageProto directly in the converters.", "author": "fooker", "createdAt": "2020-03-10T11:28:32Z", "path": "features/telemetry/protocols/netflow/transport/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/common/FlowMessage.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.common;\n+\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.Direction;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.NetflowVersion;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.SamplingAlgorithm;\n+\n+import com.google.protobuf.DoubleValue;\n+import com.google.protobuf.UInt32Value;\n+import com.google.protobuf.UInt64Value;\n+\n+public interface FlowMessage {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTc3MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390251771", "bodyText": "I can see this is useful during the transition but I would prefer to get rid of the BSON stuff completely. My proposal is to generate the BSON output one last time and use it to generate some JSON which will be used in this tests instead.", "author": "fooker", "createdAt": "2020-03-10T11:32:32Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpFixProtobufValidationTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.opennms.netmgt.telemetry.listeners.utils.BufferUtils.slice;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.bson.BsonDocument;\n+import org.bson.RawBsonDocument;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.opennms.netmgt.flows.api.Converter;\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9.Netflow9Converter;\n+import org.opennms.netmgt.telemetry.protocols.netflow.common.FlowMessage;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.InvalidPacketException;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ParserBase;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.Protocol;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ipfix.proto.Header;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.ipfix.proto.Packet;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.session.Session;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.session.TcpSession;\n+import org.opennms.netmgt.telemetry.protocols.netflow.parser.transport.FlowMessageBuilderFactory;\n+import org.opennms.netmgt.telemetry.protocols.netflow.proto.FlowMessageProto;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+\n+/**\n+ * This test validates netflow protobuf values against bson output.\n+ */\n+public class IpFixProtobufValidationTest {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjU0OQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390252549", "bodyText": "What's the difference?", "author": "fooker", "createdAt": "2020-03-10T11:34:04Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -96,7 +96,7 @@ public void canParseNetflow5Flows() {\n         MatcherAssert.assertThat(flow.getDirection(), equalTo(Flow.Direction.INGRESS));\n         MatcherAssert.assertThat(flow.getNextHop(), equalTo(\"0.0.0.0\"));\n         MatcherAssert.assertThat(flow.getNextHopHostname(), equalTo(Optional.empty()));\n-        MatcherAssert.assertThat(flow.getVlan(), nullValue());", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390252794", "bodyText": "Just make the method throws Exception.", "author": "fooker", "createdAt": "2020-03-10T11:34:39Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow5/Netflow5ConverterTest.java", "diffHunk": "@@ -121,9 +121,15 @@ public void canParseNetflow5Flows() {\n                 header = new Header(slice(buffer, Header.SIZE));\n                 final Packet packet = new Packet(header, buffer);\n                 packet.getRecords().forEach(rec -> {\n-                    final ByteBuffer bf = ParserBase.serialize(Protocol.NETFLOW9, rec);\n-                    final BsonDocument doc = new RawBsonDocument(bf.array());\n-                    flows.addAll(nf5Converter.convert(doc));\n+\n+                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW5, rec);\n+                    try {\n+                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        flows.addAll(nf5Converter.convert(flowMessage));\n+                    } catch (InvalidProtocolBufferException e) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMzQ4Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r394333482", "bodyText": "It's in lambda expression", "author": "cgorantla", "createdAt": "2020-03-18T13:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNzgzNA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397517834", "bodyText": "Right. But in the end it could be a good old for loop, right?", "author": "fooker", "createdAt": "2020-03-24T23:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NzE2Mg==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r401157162", "bodyText": "Since packet.getRecords() is a stream, I'm inclined to keep this way.", "author": "cgorantla", "createdAt": "2020-03-31T19:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzQxNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r390253415", "bodyText": "Same here", "author": "fooker", "createdAt": "2020-03-10T11:35:56Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9ConverterTest.java", "diffHunk": "@@ -113,9 +116,15 @@ public void canParseNetflow9Flows() {\n                 header = new Header(slice(buffer, Header.SIZE));\n                 final Packet packet = new Packet(session, header, buffer);\n                 packet.getRecords().forEach(rec -> {\n-                    final ByteBuffer bf = ParserBase.serialize(Protocol.NETFLOW9, rec);\n-                    final BsonDocument doc = new RawBsonDocument(bf.array());\n-                    flows.addAll(nf9Converter.convert(doc));\n+\n+                    byte[] message = FlowMessageBuilderFactory.buildAndSerialize(Protocol.NETFLOW9, rec);\n+                    try {\n+                        FlowMessage flowMessage = FlowMessageProto.parseFrom(message);\n+                        flows.addAll(nf9Converter.convert(flowMessage));\n+                    } catch (InvalidProtocolBufferException e) {", "originalCommit": "628f488dd99abfee27aab31b69ba5a1409717e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "url": "https://github.com/OpenNMS/opennms/commit/b0e90f013c5b6948e960f7eb2d66870c3c84e12a", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T03:34:14Z", "type": "forcePushed"}, {"oid": "b52efa8ffe9c0a00c1ed698732ad397d9831ef6d", "url": "https://github.com/OpenNMS/opennms/commit/b52efa8ffe9c0a00c1ed698732ad397d9831ef6d", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T03:39:14Z", "type": "forcePushed"}, {"oid": "2338ce52a009fb3c722d05a08923f8ef829ef1a1", "url": "https://github.com/OpenNMS/opennms/commit/2338ce52a009fb3c722d05a08923f8ef829ef1a1", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T03:45:45Z", "type": "forcePushed"}, {"oid": "c84a68990b5e619da9a4d0498ed5867c25a03df7", "url": "https://github.com/OpenNMS/opennms/commit/c84a68990b5e619da9a4d0498ed5867c25a03df7", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T13:11:15Z", "type": "forcePushed"}, {"oid": "e388d89b283f332b44cf6614f61985d9f9c2c420", "url": "https://github.com/OpenNMS/opennms/commit/e388d89b283f332b44cf6614f61985d9f9c2c420", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T13:13:34Z", "type": "commit"}, {"oid": "e388d89b283f332b44cf6614f61985d9f9c2c420", "url": "https://github.com/OpenNMS/opennms/commit/e388d89b283f332b44cf6614f61985d9f9c2c420", "message": "NMS-12521: Move from bson to proto for netflow\n\nNMS-12521: Some more refactoring\n\nNMS-12521: Fix integration tests and may be smoke as well\n\nNMS-12521: Only use proto for netflow5 to make smoke tests pass\n\nNMS-12521: Add proto for Netflow9\n\nNMS-12521: More changes in Netflow9\n\nNMS-12521: Add netflow9, IPFIX\n\nNMS-12521: Move FlowMessage, fix features\n\nNMS-12521: Use protobuf wrapper for all primitives\n\nNMS-12521: Fix sentinel telemetry\n\nNMS-12521: Avoid empty values for addresses\n\nNMS-12521: Add more validation tests\n\nNMS-12521: Refactor to proto", "committedDate": "2020-03-18T13:13:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMTY3MA==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397511670", "bodyText": "Small nit: Should be Netflow (vs NetFlow)", "author": "fooker", "createdAt": "2020-03-24T22:57:55Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowConverter.java", "diffHunk": "@@ -26,19 +26,19 @@\n  *     http://www.opennms.com/\n  *******************************************************************************/\n \n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n \n import java.util.Collections;\n import java.util.List;\n \n-import org.bson.BsonDocument;\n import org.opennms.netmgt.flows.api.Converter;\n import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n \n-public class IpfixConverter implements Converter<BsonDocument> {\n+public class NetFlowConverter implements Converter<FlowMessage> {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMjI1Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397512257", "bodyText": "Same here: Netflow (vs NetFlow)", "author": "fooker", "createdAt": "2020-03-24T22:59:23Z", "path": "features/telemetry/protocols/netflow/adapter/src/main/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/common/NetFlowMessage.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.common;\n+\n+import java.util.Optional;\n+\n+import org.opennms.netmgt.flows.api.Flow;\n+import org.opennms.netmgt.telemetry.protocols.netflow.transport.FlowMessage;\n+\n+import com.google.common.base.Strings;\n+\n+public class NetFlowMessage implements Flow {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDcyMw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397514723", "bodyText": "We should adopt this test. I remember this was quite tricky to get right - so it would be nice to test the behavior on the parser, too.", "author": "fooker", "createdAt": "2020-03-24T23:06:15Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/FlowTimeoutTest.java", "diffHunk": "@@ -1,129 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2019 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-\n-import org.bson.BsonDocument;\n-import org.bson.BsonDocumentWriter;\n-import org.junit.Test;\n-\n-public class FlowTimeoutTest {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0ODQ0NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r401148445", "bodyText": "Updated tests to handle this directly on proto builder.", "author": "cgorantla", "createdAt": "2020-03-31T19:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjMwNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397516305", "bodyText": "Why not load this as resource?", "author": "fooker", "createdAt": "2020-03-24T23:10:41Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/ipfix/IpfixTestData.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.ipfix;\n+\n+// Generated using protobuf json utils.\n+public interface IpfixTestData {\n+\n+    String[] ipFixData = {\"{\\n\" +", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODAyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397518025", "bodyText": "Same here, we should adopt this test.", "author": "fooker", "createdAt": "2020-03-24T23:15:23Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/FlowTimeoutTest.java", "diffHunk": "@@ -1,123 +0,0 @@\n-/*******************************************************************************\n- * This file is part of OpenNMS(R).\n- *\n- * Copyright (C) 2019 The OpenNMS Group, Inc.\n- * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n- *\n- * OpenNMS(R) is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU Affero General Public License as published\n- * by the Free Software Foundation, either version 3 of the License,\n- * or (at your option) any later version.\n- *\n- * OpenNMS(R) is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU Affero General Public License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with OpenNMS(R).  If not, see:\n- *      http://www.gnu.org/licenses/\n- *\n- * For more information contact:\n- *     OpenNMS(R) Licensing <license@opennms.org>\n- *     http://www.opennms.org/\n- *     http://www.opennms.com/\n- *******************************************************************************/\n-\n-package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n-\n-import org.bson.BsonDocument;\n-import org.bson.BsonDocumentWriter;\n-import org.junit.Test;\n-\n-public class FlowTimeoutTest {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxODQ1Nw==", "url": "https://github.com/OpenNMS/opennms/pull/2903#discussion_r397518457", "bodyText": "Make this a resource, too.", "author": "fooker", "createdAt": "2020-03-24T23:16:37Z", "path": "features/telemetry/protocols/netflow/adapter/src/test/java/org/opennms/netmgt/telemetry/protocols/netflow/adapter/netflow9/Netflow9TestData.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.netmgt.telemetry.protocols.netflow.adapter.netflow9;\n+\n+// Generated using protobuf json utils.\n+public interface Netflow9TestData {\n+\n+    String[] Netflow9Message = {", "originalCommit": "e388d89b283f332b44cf6614f61985d9f9c2c420", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2e7af2606e9c55ee99039b4c03f0541024381ee", "url": "https://github.com/OpenNMS/opennms/commit/f2e7af2606e9c55ee99039b4c03f0541024381ee", "message": "Merge branch 'release-26.0.0' into jira/NMS-12521", "committedDate": "2020-03-26T21:36:29Z", "type": "commit"}, {"oid": "36b00350ef2a7a091f87639d723466f4b9e83b84", "url": "https://github.com/OpenNMS/opennms/commit/36b00350ef2a7a091f87639d723466f4b9e83b84", "message": "NMS-12521: Re-structure timeout tests, handle review comments", "committedDate": "2020-03-31T19:05:22Z", "type": "commit"}, {"oid": "36b00350ef2a7a091f87639d723466f4b9e83b84", "url": "https://github.com/OpenNMS/opennms/commit/36b00350ef2a7a091f87639d723466f4b9e83b84", "message": "NMS-12521: Re-structure timeout tests, handle review comments", "committedDate": "2020-03-31T19:05:22Z", "type": "forcePushed"}, {"oid": "d904c9db45dc6c129e6c35dcbe08240ab45290fe", "url": "https://github.com/OpenNMS/opennms/commit/d904c9db45dc6c129e6c35dcbe08240ab45290fe", "message": "NMS-12521: Refactor NetflowAdapter", "committedDate": "2020-03-31T20:23:33Z", "type": "commit"}]}