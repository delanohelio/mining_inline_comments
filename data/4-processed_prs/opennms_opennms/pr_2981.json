{"pr_number": 2981, "pr_title": "NMS-12661: Fix collection set building for ResponseTime resources", "pr_createdAt": "2020-04-20T15:44:30Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2981", "timeline": [{"oid": "d7e2619a8b0759cad5fd5ac59664e08f585493d1", "url": "https://github.com/OpenNMS/opennms/commit/d7e2619a8b0759cad5fd5ac59664e08f585493d1", "message": "NMS-12661: Fix collection set building for ResponseTime resources", "committedDate": "2020-04-20T02:44:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0ODY3NQ==", "url": "https://github.com/OpenNMS/opennms/pull/2981#discussion_r411548675", "bodyText": "Can we move this to the org.opennms.netmgt.collection.support.builder package? Would be useful there so we could reuse it.", "author": "j-white", "createdAt": "2020-04-20T17:12:23Z", "path": "features/kafka/producer/src/test/java/org/opennms/features/kafka/producer/collection/KafkaPersisterIT.java", "diffHunk": "@@ -136,16 +141,65 @@ public void testKafkaCollection() throws IOException {\n         OnmsNode node = databasePopulator.getNode5();\n         CollectionAgent agent = new MockCollectionAgent(node.getId(), \"test\", InetAddress.getLocalHost());\n         NodeLevelResource nodeResource = new NodeLevelResource(node.getId());\n+\n         CollectionSet collectionSet = new CollectionSetBuilder(agent).withTimestamp(new Date(2))\n                 .withNumericAttribute(nodeResource, \"group1\", \"node5\", 105, AttributeType.GAUGE)\n-                .withNumericAttribute(nodeResource, \"group2\", \"node5\", 1050, AttributeType.GAUGE).build();\n+                .withNumericAttribute(nodeResource, \"group2\", \"node5\", 1050, AttributeType.GAUGE)\n+                .withNumericAttribute(new ResponseTimeResource(), \"ICMP\", \"ICMP\", 120, AttributeType.GAUGE).build();\n         persister.visitCollectionSet(collectionSet);\n         \n-        await().atMost(1, TimeUnit.MINUTES).pollInterval(15, TimeUnit.SECONDS).until(() -> kafkaConsumer.getCollectionSet(), not(nullValue()));\n-        assertThat(kafkaConsumer.getCollectionSet().getResource(0).getNode().getNodeId(), equalTo(node.getId().longValue()));\n-        assertThat(kafkaConsumer.getCollectionSet().getResource(0).getNumericCount(), equalTo(2));\n-        assertThat(kafkaConsumer.getCollectionSet().getResource(0).getNumeric(1).getValue(), equalTo(1050.0));\n+        await().atMost(1, TimeUnit.MINUTES).pollInterval(15, TimeUnit.SECONDS).until(() -> kafkaConsumer.getCollectionSetValues(), not(Matchers.empty()));\n+        assertThat(kafkaConsumer.getCollectionSetValues().get(0).getResource(0).getNode().getNodeId(), equalTo(node.getId().longValue()));\n+        assertThat(kafkaConsumer.getCollectionSetValues().get(0).getResource(0).getNumericCount(), equalTo(2));\n+        assertThat(kafkaConsumer.getCollectionSetValues().get(0).getResource(1).getResponse().getInstance(), equalTo(IP_ADDRESS));\n+\n+    }\n+\n+    private class ResponseTimeResource implements Resource {", "originalCommit": "d7e2619a8b0759cad5fd5ac59664e08f585493d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMzA3MA==", "url": "https://github.com/OpenNMS/opennms/pull/2981#discussion_r411713070", "bodyText": "I ended up not using the LatencyTypeResource in the test but still kept it for future use.", "author": "cgorantla", "createdAt": "2020-04-20T21:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0ODY3NQ=="}], "type": "inlineReview"}, {"oid": "ce62468894635f9b3a8297e0a748a4927d7ebd0c", "url": "https://github.com/OpenNMS/opennms/commit/ce62468894635f9b3a8297e0a748a4927d7ebd0c", "message": "NMS-12661: Update test", "committedDate": "2020-04-20T21:42:59Z", "type": "commit"}]}