{"pr_number": 3032, "pr_title": "NMS-12781: Migrated VMware asset data to metadata entries", "pr_createdAt": "2020-06-05T09:19:52Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/3032", "timeline": [{"oid": "c91cd0aa6866e9d216d59247dc688c0238241014", "url": "https://github.com/OpenNMS/opennms/commit/c91cd0aa6866e9d216d59247dc688c0238241014", "message": "cpape/vmware-metadata: Migrated asset data to metadata entries", "committedDate": "2020-06-04T17:38:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzgwNw==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435823807", "bodyText": "Can you reference the constants from VmwareTopologyProvider without entering dependency hell?", "author": "fooker", "createdAt": "2020-06-05T10:08:29Z", "path": "core/upgrade/src/main/java/org/opennms/upgrade/implementations/VmwareAssetsMigratorOffline.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\n+ * This file is part of OpenNMS(R).\n+ *\n+ * Copyright (C) 2020 The OpenNMS Group, Inc.\n+ * OpenNMS(R) is Copyright (C) 1999-2020 The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n+ *\n+ * OpenNMS(R) is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published\n+ * by the Free Software Foundation, either version 3 of the License,\n+ * or (at your option) any later version.\n+ *\n+ * OpenNMS(R) is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with OpenNMS(R).  If not, see:\n+ *      http://www.gnu.org/licenses/\n+ *\n+ * For more information contact:\n+ *     OpenNMS(R) Licensing <license@opennms.org>\n+ *     http://www.opennms.org/\n+ *     http://www.opennms.com/\n+ *******************************************************************************/\n+\n+package org.opennms.upgrade.implementations;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.opennms.core.db.DataSourceFactory;\n+import org.opennms.upgrade.api.AbstractOnmsUpgrade;\n+import org.opennms.upgrade.api.OnmsUpgradeException;\n+\n+public class VmwareAssetsMigratorOffline extends AbstractOnmsUpgrade {\n+\n+    private final static int BATCH_SIZE = 2000;\n+\n+    public VmwareAssetsMigratorOffline() throws OnmsUpgradeException {\n+        super();\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return 9;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Moves VMware asset data to the node's metadata.\";\n+    }\n+\n+    @Override\n+    public boolean requiresOnmsRunning() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void preExecute() throws OnmsUpgradeException {\n+        try (final Connection connection = DataSourceFactory.getInstance().getConnection()) {\n+            final Statement preExecutionStatement = connection.createStatement();\n+            try (final ResultSet preExecutionResultSet = preExecutionStatement.executeQuery(\"SELECT EXISTS (SELECT 1 FROM pg_attribute WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'assets') AND attname = 'vmwaretopologyinfo')\")) {\n+                preExecutionResultSet.next();\n+                if (!preExecutionResultSet.getBoolean(1)) {\n+                    throw new OnmsUpgradeException(\"The 'vmwaretopologyinfo' columns do not exist anymore\");\n+                }\n+            } catch (SQLException e) {\n+                e.printStackTrace();\n+                throw new OnmsUpgradeException(\"Error checking for column 'vmwaretopologyinfo'\", e);\n+            }\n+        } catch (SQLException e) {\n+            throw new OnmsUpgradeException(\"Error opening database connection\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void postExecute() throws OnmsUpgradeException {\n+    }\n+\n+    @Override\n+    public void rollback() throws OnmsUpgradeException {\n+    }\n+\n+    @Override\n+    public void execute() throws OnmsUpgradeException {\n+        long nodeCount = 0;\n+\n+        try (final Connection connection = DataSourceFactory.getInstance().getConnection()) {\n+            connection.setAutoCommit(false);\n+\n+            do {\n+                try (final Statement selectStatement = connection.createStatement(); final ResultSet resultSet = selectStatement.executeQuery(\"SELECT nodeid, vmwaremanagedobjectid, vmwaremangedentitytype, vmwaremanagementserver, vmwaretopologyinfo, vmwarestate FROM assets WHERE vmwaremanagementserver IS NOT NULL LIMIT \" + BATCH_SIZE)) {\n+\n+                    if (!resultSet.next()) {\n+                        break;\n+                    }\n+\n+                    try (final PreparedStatement insertStatement = connection.prepareStatement(\"INSERT INTO node_metadata (id, context, key, value) VALUES  (?,?,?,?)\");\n+                         final PreparedStatement nullifyStatement = connection.prepareStatement(\"UPDATE assets SET vmwaremanagedobjectid=NULL, vmwaremangedentitytype=NULL, vmwaremanagementserver=NULL, vmwaretopologyinfo=NULL, vmwarestate=NULL WHERE nodeid=?\")) {\n+\n+                        do {\n+                            final Integer nodeId = resultSet.getInt(\"nodeid\");\n+                            final String vmwareManagedObjectId = resultSet.getString(\"vmwaremanagedobjectid\");\n+                            final String vmwareMangedentityType = resultSet.getString(\"vmwaremangedentitytype\");\n+                            final String vmwareManagementServer = resultSet.getString(\"vmwaremanagementserver\");\n+                            final String vmwareTopologyInfo = resultSet.getString(\"vmwaretopologyinfo\");\n+                            final String vmwareState = resultSet.getString(\"vmwarestate\");\n+\n+                            insertStatement.setInt(1, nodeId);\n+                            insertStatement.setString(2, \"VMware\");", "originalCommit": "c91cd0aa6866e9d216d59247dc688c0238241014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzODk2NA==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435838964", "bodyText": "My idea was to reference all constants from the VmwareImporter. I tried, but failed so hard. Topology is really special concerning dependencies.", "author": "christianpape", "createdAt": "2020-06-05T10:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNDE3OQ==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435824179", "bodyText": "\ud83d\ude18", "author": "fooker", "createdAt": "2020-06-05T10:09:12Z", "path": "features/topology-map/plugins/org.opennms.features.topology.plugins.topo.vmware/src/main/java/org/opennms/features/topology/plugins/topo/vmware/internal/VmwareTopologyProvider.java", "diffHunk": "@@ -135,10 +144,10 @@ public void refresh() {\n         getEntities(\"VirtualMachine\").stream().forEach(this::addVirtualMachine);\n     }\n \n-    private List<OnmsNode> getEntities(String entityType) {\n-        List<OnmsNode> entities = m_nodeDao.findAllByVarCharAssetColumn(\"vmwareManagedEntityType\", entityType);\n+    private List<OnmsNode> getEntities(final String entityType) {", "originalCommit": "c91cd0aa6866e9d216d59247dc688c0238241014", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNjM2OA==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435826368", "bodyText": "What's the difference between these methods and the ones in VmwareImporter?", "author": "fooker", "createdAt": "2020-06-05T10:13:44Z", "path": "features/topology-map/plugins/org.opennms.features.topology.plugins.topo.vmware/src/main/java/org/opennms/features/topology/plugins/topo/vmware/internal/VmwareTopologyProvider.java", "diffHunk": "@@ -318,4 +329,29 @@ private void addVirtualMachine(OnmsNode virtualMachine) {\n                 graph.getVertex(getNamespace(), vmwareManagementServer + \"/\" + vmwareHostSystemId)\n         );\n     }\n+", "originalCommit": "c91cd0aa6866e9d216d59247dc688c0238241014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMTIyNQ==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435831225", "bodyText": "If it is a duplication, it may be unified.", "author": "fooker", "createdAt": "2020-06-05T10:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNjM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg0NTI3OA==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435845278", "bodyText": "Yes maybe, but not in the scope of this PR.", "author": "christianpape", "createdAt": "2020-06-05T10:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNjM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMDEyMQ==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435830121", "bodyText": "Maybe call it findMetaDataByContextAndKey as this can become quite expensive", "author": "fooker", "createdAt": "2020-06-05T10:21:50Z", "path": "opennms-model/src/main/java/org/opennms/netmgt/model/OnmsNode.java", "diffHunk": "@@ -1014,6 +1014,13 @@ public void removeRequisitionedCategory(final String category) {\n         return m_metaData;\n     }\n \n+    public Optional<OnmsMetaData> getMetaDataForContextAndKey(final String context, final String key) {", "originalCommit": "c91cd0aa6866e9d216d59247dc688c0238241014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzOTY0Mg==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435839642", "bodyText": "Ok", "author": "christianpape", "createdAt": "2020-06-05T10:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMDEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMDQ4NA==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435830484", "bodyText": "Please add a note to 'breaking changes' as this alters the REST endpoint.", "author": "fooker", "createdAt": "2020-06-05T10:22:32Z", "path": "opennms-webapp-rest/src/main/java/org/opennms/web/rest/v2/README.adoc", "diffHunk": "@@ -151,11 +151,6 @@ org.opennms.web.rest.support.SearchPropertiesToAsciidocTest\n | assetRecord.vendorAssetNumber | String | Vendor Asset Number\n | assetRecord.vendorFax | String | Vendor Fax\n | assetRecord.vendorPhone | String | Vendor Phone\n-| assetRecord.vmwareManagedEntityType | String | VMware Managed Entity Type", "originalCommit": "c91cd0aa6866e9d216d59247dc688c0238241014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzOTc2MA==", "url": "https://github.com/OpenNMS/opennms/pull/3032#discussion_r435839760", "bodyText": "Good point.", "author": "christianpape", "createdAt": "2020-06-05T10:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgzMDQ4NA=="}], "type": "inlineReview"}, {"oid": "6adf9e5e80f0713cfcf46519c20df7288cd36f55", "url": "https://github.com/OpenNMS/opennms/commit/6adf9e5e80f0713cfcf46519c20df7288cd36f55", "message": "cpape/vmware-metadata: Review changes", "committedDate": "2020-06-05T10:50:49Z", "type": "commit"}]}