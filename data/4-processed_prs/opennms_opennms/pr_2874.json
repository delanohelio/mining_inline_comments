{"pr_number": 2874, "pr_title": "NMS-12479: Remove module name from Kafka RPC topic names.", "pr_createdAt": "2020-01-21T00:52:13Z", "pr_url": "https://github.com/OpenNMS/opennms/pull/2874", "timeline": [{"oid": "bba3f7419b59f591571a1062bb0022baa9fd47fb", "url": "https://github.com/OpenNMS/opennms/commit/bba3f7419b59f591571a1062bb0022baa9fd47fb", "message": "NMS-12479: Remove module from kafka rpc topics\n\nRemove the need for module name in topic names.\nInclude topic name in proto message.\nAlso upgrade kafka-rpc.proto to proto3.\nRe-generate proto source files.\nUse kafka specific topic name generation", "committedDate": "2020-01-21T00:45:24Z", "type": "commit"}, {"oid": "633ff4eff487b7c25042cc7e9ae689d12b306ccd", "url": "https://github.com/OpenNMS/opennms/commit/633ff4eff487b7c25042cc7e9ae689d12b306ccd", "message": "Merge branch 'develop' into jira/NMS-12479", "committedDate": "2020-01-21T00:48:18Z", "type": "commit"}, {"oid": "36288cf055b079ce690b6819f3694acf9c92e076", "url": "https://github.com/OpenNMS/opennms/commit/36288cf055b079ce690b6819f3694acf9c92e076", "message": "NMS-12479: Handle unmarshalling and execution in separate thread\n\nAs all the requests are handled with one consumer thread, unmarshalling\nand execution are handled in a separate thread.\nNote that execution may still happen in completely different thread.", "committedDate": "2020-01-21T14:31:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyOTkzNQ==", "url": "https://github.com/OpenNMS/opennms/pull/2874#discussion_r369229935", "bodyText": "This is a problem - if a Minion doesn't have a module loaded it still consumes the relevant requests and drops them silently.", "author": "j-white", "createdAt": "2020-01-21T20:37:00Z", "path": "core/ipc/rpc/kafka/src/main/java/org/opennms/core/ipc/rpc/kafka/KafkaRpcServerManager.java", "diffHunk": "@@ -258,40 +256,24 @@ public void run() {\n                             if (rpcMessage.getTotalChunks() > 1) {\n                                 // Handle multiple chunks\n                                 boolean allChunksReceived = handleChunks(rpcMessage);\n-                                if(!allChunksReceived) {\n+                                if (!allChunksReceived) {\n                                     continue;\n                                 }\n                                 rpcContent = messageCache.get(rpcId);\n                                 //Remove rpcId from cache.\n                                 messageCache.remove(rpcId);\n                                 currentChunkCache.remove(rpcId);\n                             }\n-                            //Build child span from rpcMessage and start minion span.\n-                            Tracer.SpanBuilder spanBuilder = buildSpanFromRpcMessage(rpcMessage);\n-                            Span minionSpan = spanBuilder.start();\n-\n-                            RpcRequest request = module.unmarshalRequest(rpcContent.toStringUtf8());\n-                            setTagsOnMinion(rpcMessage, request, minionSpan);\n-\n-                            CompletableFuture<RpcResponse> future = module.execute(request);\n-                            future.whenComplete((res, ex) -> {\n-                                final RpcResponse response;\n-                                if (ex != null) {\n-                                    // An exception occurred, store the exception in a new response\n-                                    LOG.warn(\"An error occured while executing a call in {}.\", module.getId(), ex);\n-                                    response = module.createResponseWithException(ex);\n-                                    minionSpan.log(ex.getMessage());\n-                                    minionSpan.setTag(TAG_RPC_FAILED, \"true\");\n-                                } else {\n-                                    // No exception occurred, use the given response\n-                                    response = res;\n-                                }\n-                                // Finish minion Span\n-                                minionSpan.finish();\n-                                sendResponse(rpcId, response);\n-                            });\n+                            final RpcModule module = modulesById.get(rpcMessage.getModuleId());\n+                            if(module == null) {", "originalCommit": "36288cf055b079ce690b6819f3694acf9c92e076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NjU4MQ==", "url": "https://github.com/OpenNMS/opennms/pull/2874#discussion_r369246581", "bodyText": "yeah.  If you are considering a scenario where certain modules are loaded on one minion and rest of the modules are loaded on another minion, that may not work with this approach.", "author": "cgorantla", "createdAt": "2020-01-21T21:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMTYxNA==", "url": "https://github.com/OpenNMS/opennms/pull/2874#discussion_r369721614", "bodyText": "I realized that we can't disable RPC as that would disable Echo module as well which is needed  for maintaining minion status.  We can still create a topic specific to Echo and subscribe to it by default.  subscribe to generic rpc-request topic only if at least one of the other rpc modules are loaded.  Let me know what do you think.", "author": "cgorantla", "createdAt": "2020-01-22T18:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcyMzc2Ng==", "url": "https://github.com/OpenNMS/opennms/pull/2874#discussion_r369723766", "bodyText": "Or introduce two more Minion Status, RPC_UP, SINK_UP", "author": "cgorantla", "createdAt": "2020-01-22T18:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIyOTkzNQ=="}], "type": "inlineReview"}, {"oid": "6793a4faa7163da820c5835530cf45c4d391a7ee", "url": "https://github.com/OpenNMS/opennms/commit/6793a4faa7163da820c5835530cf45c4d391a7ee", "message": "NMS-12479: Move subscribe before looping", "committedDate": "2020-01-22T21:16:44Z", "type": "commit"}, {"oid": "b8f8744227f65d804ba269516608af60b2fe3f19", "url": "https://github.com/OpenNMS/opennms/commit/b8f8744227f65d804ba269516608af60b2fe3f19", "message": "NMS-12479: Make it configurable to use single topic for all modules\n\nBy default, each module has it's own topic.", "committedDate": "2020-01-24T22:44:09Z", "type": "commit"}, {"oid": "f6d22c20f4046c602bef0794e26a73015498f463", "url": "https://github.com/OpenNMS/opennms/commit/f6d22c20f4046c602bef0794e26a73015498f463", "message": "NMS-12479: Use one consumer on OpenNMS as before", "committedDate": "2020-01-29T00:44:39Z", "type": "commit"}, {"oid": "9758cc4c1b2b4f799b044833f0d8dc350f0c84c5", "url": "https://github.com/OpenNMS/opennms/commit/9758cc4c1b2b4f799b044833f0d8dc350f0c84c5", "message": "Merge branch 'develop' into jira/NMS-12479", "committedDate": "2020-01-29T00:53:19Z", "type": "commit"}, {"oid": "64feb5c533ce28d2657b0b82c70bcb428f2de0df", "url": "https://github.com/OpenNMS/opennms/commit/64feb5c533ce28d2657b0b82c70bcb428f2de0df", "message": "Review of Using Single Topic documentation (#2881)", "committedDate": "2020-02-06T16:40:33Z", "type": "commit"}]}