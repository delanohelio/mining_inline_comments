{"pr_number": 8465, "pr_title": "  Extend Management with App events #8451", "pr_createdAt": "2020-11-09T16:24:35Z", "pr_url": "https://github.com/enonic/xp/pull/8465", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDEyNQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r519950125", "bodyText": "Should be in apps", "author": "rymsha", "createdAt": "2020-11-09T16:36:46Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+\n+@Path(\"sse\")", "originalCommit": "f4bd2e808e27534cbf4fe73ab81b8864648571fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMjQ0NQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520022445", "bodyText": "Done", "author": "anatol-sialitski", "createdAt": "2020-11-09T18:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDQ1Mw==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r519950453", "bodyText": "Should be events", "author": "rymsha", "createdAt": "2020-11-09T16:37:13Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+\n+@Path(\"sse\")\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String START = \"start\";\n+\n+    private static final String STOP = \"stop\";\n+\n+    private static final String UNINSTALL = \"uninstall\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private SseBroadcaster sseBroadcaster;\n+\n+    private Sse sse;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        if ( sseBroadcaster != null )\n+        {\n+            sseBroadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.sse = sse;\n+        this.sseBroadcaster = sse.newBroadcaster();\n+    }\n+\n+    @GET\n+    @Path(\"subscribe-app-events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)", "originalCommit": "f4bd2e808e27534cbf4fe73ab81b8864648571fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMTk0MA==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520021940", "bodyText": "Done", "author": "anatol-sialitski", "createdAt": "2020-11-09T18:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDg4MQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r519950881", "bodyText": "Just list", "author": "rymsha", "createdAt": "2020-11-09T16:37:51Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+\n+@Path(\"sse\")\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String START = \"start\";\n+\n+    private static final String STOP = \"stop\";\n+\n+    private static final String UNINSTALL = \"uninstall\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private SseBroadcaster sseBroadcaster;\n+\n+    private Sse sse;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        if ( sseBroadcaster != null )\n+        {\n+            sseBroadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.sse = sse;\n+        this.sseBroadcaster = sse.newBroadcaster();\n+    }\n+\n+    @GET\n+    @Path(\"subscribe-app-events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( @Context SseEventSink sseEventSink )\n+    {\n+        this.sseBroadcaster.register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = sse.newEventBuilder().\n+            name( \"List of applications\" ).", "originalCommit": "f4bd2e808e27534cbf4fe73ab81b8864648571fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMjYwNQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520022605", "bodyText": "Done", "author": "anatol-sialitski", "createdAt": "2020-11-09T18:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MDg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NjE2OQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r519956169", "bodyText": "We maybe doing something wrong here. These events are global, but we probably need local (from bundle events)\nNeed to discuss.", "author": "rymsha", "createdAt": "2020-11-09T16:44:49Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+\n+@Path(\"sse\")\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String START = \"start\";\n+\n+    private static final String STOP = \"stop\";\n+\n+    private static final String UNINSTALL = \"uninstall\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private SseBroadcaster sseBroadcaster;\n+\n+    private Sse sse;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        if ( sseBroadcaster != null )\n+        {\n+            sseBroadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.sse = sse;\n+        this.sseBroadcaster = sse.newBroadcaster();\n+    }\n+\n+    @GET\n+    @Path(\"subscribe-app-events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( @Context SseEventSink sseEventSink )\n+    {\n+        this.sseBroadcaster.register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = sse.newEventBuilder().\n+            name( \"List of applications\" ).\n+            id( UUID.randomUUID().toString() ).\n+            mediaType( MediaType.APPLICATION_JSON_TYPE ).\n+            data( ListApplicationJson.class, new ListApplicationJson( applicationService.getInstalledApplications().stream().\n+                map( application -> new ApplicationInfoJson( application, applicationService.isLocalApplication( application.getKey() ) ) ).\n+                collect( Collectors.toList() ) ) ).\n+            comment( \"List of installed applications\" ).build();\n+\n+        sseEventSink.send( sseEvent );\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( EVENT_TYPE.equals( event.getType() ) )", "originalCommit": "f4bd2e808e27534cbf4fe73ab81b8864648571fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxODgwNw==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520518807", "bodyText": "Done", "author": "anatol-sialitski", "createdAt": "2020-11-10T12:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NjE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NzkwMw==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r519957903", "bodyText": "Isn't it so that broadcaster always initialized?", "author": "rymsha", "createdAt": "2020-11-09T16:46:20Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+\n+@Path(\"sse\")\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String START = \"start\";\n+\n+    private static final String STOP = \"stop\";\n+\n+    private static final String UNINSTALL = \"uninstall\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private SseBroadcaster sseBroadcaster;\n+\n+    private Sse sse;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        if ( sseBroadcaster != null )\n+        {\n+            sseBroadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.sse = sse;\n+        this.sseBroadcaster = sse.newBroadcaster();\n+    }\n+\n+    @GET\n+    @Path(\"subscribe-app-events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( @Context SseEventSink sseEventSink )\n+    {\n+        this.sseBroadcaster.register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = sse.newEventBuilder().\n+            name( \"List of applications\" ).\n+            id( UUID.randomUUID().toString() ).\n+            mediaType( MediaType.APPLICATION_JSON_TYPE ).\n+            data( ListApplicationJson.class, new ListApplicationJson( applicationService.getInstalledApplications().stream().\n+                map( application -> new ApplicationInfoJson( application, applicationService.isLocalApplication( application.getKey() ) ) ).\n+                collect( Collectors.toList() ) ) ).\n+            comment( \"List of installed applications\" ).build();\n+\n+        sseEventSink.send( sseEvent );\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( EVENT_TYPE.equals( event.getType() ) )\n+        {\n+            event.getValueAs( String.class, EVENT_TYPE_KEY ).\n+                ifPresent( eventSubType -> {\n+                    switch ( eventSubType )\n+                    {\n+                        case INSTALLED:\n+                        case START:\n+                        case STOP:\n+                        case UNINSTALL:\n+                        case UNINSTALLED:\n+                            handleEvent( event, eventSubType );\n+                            break;\n+                        default:\n+                            LOG.debug( \"Ignoring {} {}\", EVENT_TYPE, eventSubType );\n+                            break;\n+                    }\n+                } );\n+        }\n+    }\n+\n+    private void handleEvent( final Event event, final String eventSubType )\n+    {\n+        if ( sseBroadcaster == null )", "originalCommit": "f4bd2e808e27534cbf4fe73ab81b8864648571fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7e4e4c8bd9d93b0398329738aa1bc5f39f36f417", "url": "https://github.com/enonic/xp/commit/7e4e4c8bd9d93b0398329738aa1bc5f39f36f417", "message": "Extend Management with App events #8451", "committedDate": "2020-11-09T18:12:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMzIyMQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520133221", "bodyText": "Must be admins only", "author": "rymsha", "createdAt": "2020-11-09T21:31:40Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+\n+@Path(\"apps\")\n+@Component(immediate = true, property = \"group=api\")", "originalCommit": "7e4e4c8bd9d93b0398329738aa1bc5f39f36f417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxODY5Nw==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520518697", "bodyText": "Done", "author": "anatol-sialitski", "createdAt": "2020-11-10T12:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzMzIyMQ=="}], "type": "inlineReview"}, {"oid": "ab60fb8a27999e1f35373f7d64938af5643e5a2f", "url": "https://github.com/enonic/xp/commit/ab60fb8a27999e1f35373f7d64938af5643e5a2f", "message": "Extend Management with App events #8451", "committedDate": "2020-11-10T12:17:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MTI1OQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520541259", "bodyText": "static", "author": "rymsha", "createdAt": "2020-11-10T12:57:14Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+import com.enonic.xp.security.RoleKeys;\n+\n+@Path(\"app\")\n+@RolesAllowed(RoleKeys.ADMIN_ID)\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String STATE = \"state\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private volatile SseContextHolder contextHolder;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        final SseBroadcaster broadcaster = contextHolder.getBroadcaster();\n+\n+        if ( broadcaster != null )\n+        {\n+            broadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.contextHolder = new SseContextHolder( sse );\n+    }\n+\n+    @GET\n+    @Path(\"events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( final @Context SseEventSink sseEventSink )\n+    {\n+        contextHolder.getBroadcaster().register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = contextHolder.getSse().newEventBuilder().\n+            name( \"list\" ).\n+            id( UUID.randomUUID().toString() ).\n+            mediaType( MediaType.APPLICATION_JSON_TYPE ).\n+            data( ListApplicationJson.class, new ListApplicationJson( applicationService.getInstalledApplications().stream().\n+                map( application -> new ApplicationInfoJson( application, applicationService.isLocalApplication( application.getKey() ) ) ).\n+                collect( Collectors.toList() ) ) ).\n+            comment( \"List of installed applications\" ).build();\n+\n+        sseEventSink.send( sseEvent );\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( EVENT_TYPE.equals( event.getType() ) && event.isLocalOrigin() )\n+        {\n+            event.getValueAs( String.class, EVENT_TYPE_KEY ).\n+                ifPresent( eventSubType -> {\n+                    switch ( eventSubType )\n+                    {\n+                        case INSTALLED:\n+                        case STATE:\n+                        case UNINSTALLED:\n+                            handleEvent( event, eventSubType );\n+                            break;\n+                        default:\n+                            LOG.debug( \"Ignoring {} {}\", EVENT_TYPE, eventSubType );\n+                            break;\n+                    }\n+                } );\n+        }\n+    }\n+\n+    private void handleEvent( final Event event, final String eventSubType )\n+    {\n+        if ( contextHolder == null )\n+        {\n+            LOG.debug( \"Skipping {} {}. Please to subscribe to send SSE events.\", EVENT_TYPE, eventSubType );\n+            return;\n+        }\n+\n+        if ( event.getValue( APPLICATION_KEY_PARAM ).isPresent() )\n+        {\n+            final OutboundSseEvent.Builder eventBuilder = contextHolder.getSse().newEventBuilder().\n+                name( eventSubType ).\n+                id( UUID.randomUUID().toString() ).\n+                mediaType( MediaType.APPLICATION_JSON_TYPE );\n+\n+            if ( UNINSTALLED.equals( eventSubType ) )\n+            {\n+                eventBuilder.data( ApplicationUninstalledJson.class,\n+                                   new ApplicationUninstalledJson( event.getValue( APPLICATION_KEY_PARAM ).get().toString() ) );\n+            }\n+            else\n+            {\n+                final ApplicationKey applicationKey = ApplicationKey.from( event.getValue( APPLICATION_KEY_PARAM ).get().toString() );\n+\n+                final Application application = applicationService.getInstalledApplication( applicationKey );\n+\n+                if ( application == null )\n+                {\n+                    throw new ApplicationNotFoundException( applicationKey );\n+                }\n+\n+                final boolean localApplication = applicationService.isLocalApplication( application.getKey() );\n+\n+                eventBuilder.data( ApplicationInfoJson.class, new ApplicationInfoJson( application, localApplication ) );\n+            }\n+\n+            contextHolder.getBroadcaster().broadcast( eventBuilder.build() );\n+        }\n+    }\n+\n+    private class SseContextHolder", "originalCommit": "ab60fb8a27999e1f35373f7d64938af5643e5a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MTM5Mw==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520541393", "bodyText": "getters are not needed", "author": "rymsha", "createdAt": "2020-11-10T12:57:30Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+import com.enonic.xp.security.RoleKeys;\n+\n+@Path(\"app\")\n+@RolesAllowed(RoleKeys.ADMIN_ID)\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String STATE = \"state\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private volatile SseContextHolder contextHolder;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        final SseBroadcaster broadcaster = contextHolder.getBroadcaster();\n+\n+        if ( broadcaster != null )\n+        {\n+            broadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.contextHolder = new SseContextHolder( sse );\n+    }\n+\n+    @GET\n+    @Path(\"events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( final @Context SseEventSink sseEventSink )\n+    {\n+        contextHolder.getBroadcaster().register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = contextHolder.getSse().newEventBuilder().\n+            name( \"list\" ).\n+            id( UUID.randomUUID().toString() ).\n+            mediaType( MediaType.APPLICATION_JSON_TYPE ).\n+            data( ListApplicationJson.class, new ListApplicationJson( applicationService.getInstalledApplications().stream().\n+                map( application -> new ApplicationInfoJson( application, applicationService.isLocalApplication( application.getKey() ) ) ).\n+                collect( Collectors.toList() ) ) ).\n+            comment( \"List of installed applications\" ).build();\n+\n+        sseEventSink.send( sseEvent );\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( EVENT_TYPE.equals( event.getType() ) && event.isLocalOrigin() )\n+        {\n+            event.getValueAs( String.class, EVENT_TYPE_KEY ).\n+                ifPresent( eventSubType -> {\n+                    switch ( eventSubType )\n+                    {\n+                        case INSTALLED:\n+                        case STATE:\n+                        case UNINSTALLED:\n+                            handleEvent( event, eventSubType );\n+                            break;\n+                        default:\n+                            LOG.debug( \"Ignoring {} {}\", EVENT_TYPE, eventSubType );\n+                            break;\n+                    }\n+                } );\n+        }\n+    }\n+\n+    private void handleEvent( final Event event, final String eventSubType )\n+    {\n+        if ( contextHolder == null )\n+        {\n+            LOG.debug( \"Skipping {} {}. Please to subscribe to send SSE events.\", EVENT_TYPE, eventSubType );\n+            return;\n+        }\n+\n+        if ( event.getValue( APPLICATION_KEY_PARAM ).isPresent() )\n+        {\n+            final OutboundSseEvent.Builder eventBuilder = contextHolder.getSse().newEventBuilder().\n+                name( eventSubType ).\n+                id( UUID.randomUUID().toString() ).\n+                mediaType( MediaType.APPLICATION_JSON_TYPE );\n+\n+            if ( UNINSTALLED.equals( eventSubType ) )\n+            {\n+                eventBuilder.data( ApplicationUninstalledJson.class,\n+                                   new ApplicationUninstalledJson( event.getValue( APPLICATION_KEY_PARAM ).get().toString() ) );\n+            }\n+            else\n+            {\n+                final ApplicationKey applicationKey = ApplicationKey.from( event.getValue( APPLICATION_KEY_PARAM ).get().toString() );\n+\n+                final Application application = applicationService.getInstalledApplication( applicationKey );\n+\n+                if ( application == null )\n+                {\n+                    throw new ApplicationNotFoundException( applicationKey );\n+                }\n+\n+                final boolean localApplication = applicationService.isLocalApplication( application.getKey() );\n+\n+                eventBuilder.data( ApplicationInfoJson.class, new ApplicationInfoJson( application, localApplication ) );\n+            }\n+\n+            contextHolder.getBroadcaster().broadcast( eventBuilder.build() );\n+        }\n+    }\n+\n+    private class SseContextHolder\n+    {\n+\n+        final Sse sse;\n+\n+        final SseBroadcaster broadcaster;\n+\n+        SseContextHolder( final Sse sse )\n+        {\n+            this.sse = sse;\n+            this.broadcaster = sse.newBroadcaster();\n+        }\n+\n+        Sse getSse()", "originalCommit": "ab60fb8a27999e1f35373f7d64938af5643e5a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MTc4Mg==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520541782", "bodyText": "save contextHolder into local var and operate only with it in the method later", "author": "rymsha", "createdAt": "2020-11-10T12:58:06Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+import com.enonic.xp.security.RoleKeys;\n+\n+@Path(\"app\")\n+@RolesAllowed(RoleKeys.ADMIN_ID)\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String STATE = \"state\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private volatile SseContextHolder contextHolder;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        final SseBroadcaster broadcaster = contextHolder.getBroadcaster();\n+\n+        if ( broadcaster != null )\n+        {\n+            broadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.contextHolder = new SseContextHolder( sse );\n+    }\n+\n+    @GET\n+    @Path(\"events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( final @Context SseEventSink sseEventSink )\n+    {\n+        contextHolder.getBroadcaster().register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = contextHolder.getSse().newEventBuilder().\n+            name( \"list\" ).\n+            id( UUID.randomUUID().toString() ).\n+            mediaType( MediaType.APPLICATION_JSON_TYPE ).\n+            data( ListApplicationJson.class, new ListApplicationJson( applicationService.getInstalledApplications().stream().\n+                map( application -> new ApplicationInfoJson( application, applicationService.isLocalApplication( application.getKey() ) ) ).\n+                collect( Collectors.toList() ) ) ).\n+            comment( \"List of installed applications\" ).build();\n+\n+        sseEventSink.send( sseEvent );\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( EVENT_TYPE.equals( event.getType() ) && event.isLocalOrigin() )\n+        {\n+            event.getValueAs( String.class, EVENT_TYPE_KEY ).\n+                ifPresent( eventSubType -> {\n+                    switch ( eventSubType )\n+                    {\n+                        case INSTALLED:\n+                        case STATE:\n+                        case UNINSTALLED:\n+                            handleEvent( event, eventSubType );\n+                            break;\n+                        default:\n+                            LOG.debug( \"Ignoring {} {}\", EVENT_TYPE, eventSubType );\n+                            break;\n+                    }\n+                } );\n+        }\n+    }\n+\n+    private void handleEvent( final Event event, final String eventSubType )\n+    {\n+        if ( contextHolder == null )", "originalCommit": "ab60fb8a27999e1f35373f7d64938af5643e5a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0Mjc5MA==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520542790", "bodyText": "it should be contentHolder saved into local var and checked for null.\nBroadcaster is never null, when contentHolder is not null", "author": "rymsha", "createdAt": "2020-11-10T12:59:44Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+import com.enonic.xp.security.RoleKeys;\n+\n+@Path(\"app\")\n+@RolesAllowed(RoleKeys.ADMIN_ID)\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String STATE = \"state\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private volatile SseContextHolder contextHolder;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        final SseBroadcaster broadcaster = contextHolder.getBroadcaster();", "originalCommit": "ab60fb8a27999e1f35373f7d64938af5643e5a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MzEwOQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r520543109", "bodyText": "I think toString is not needed", "author": "rymsha", "createdAt": "2020-11-10T13:00:14Z", "path": "modules/core/core-app/src/main/java/com/enonic/xp/core/impl/app/event/ApplicationClusterEvents.java", "diffHunk": "@@ -34,6 +34,7 @@ public static Event installed( final Node applicationNode )\n             distributed( true ).\n             value( EVENT_TYPE_KEY, INSTALLED ).\n             value( NODE_ID_PARAM, applicationNode.id() ).\n+            value( APPLICATION_KEY_PARAM, applicationNode.name().toString() ).", "originalCommit": "ab60fb8a27999e1f35373f7d64938af5643e5a2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97a597c9767c1c7aa6b574b48ad57ad3c1d0f488", "url": "https://github.com/enonic/xp/commit/97a597c9767c1c7aa6b574b48ad57ad3c1d0f488", "message": "Extend Management with App events #8451", "committedDate": "2020-11-10T16:02:53Z", "type": "forcePushed"}, {"oid": "85577e266c59409967ece10efa1da03aafffffe9", "url": "https://github.com/enonic/xp/commit/85577e266c59409967ece10efa1da03aafffffe9", "message": "Extend Management with App events #8451", "committedDate": "2020-11-11T07:14:03Z", "type": "forcePushed"}, {"oid": "3ab5c191de6fba886274203530da0d999afcbf5f", "url": "https://github.com/enonic/xp/commit/3ab5c191de6fba886274203530da0d999afcbf5f", "message": "Extend Management with App events #8451", "committedDate": "2020-11-11T09:35:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3MzY2OA==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r521273668", "bodyText": "It looks like overkill for state event (on start/stop) to fetch app details? But maybe @gbbirkisson has a use for it?", "author": "rymsha", "createdAt": "2020-11-11T10:50:40Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+import com.enonic.xp.security.RoleKeys;\n+\n+@Path(\"app\")\n+@RolesAllowed(RoleKeys.ADMIN_ID)\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String STATE = \"state\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private volatile SseContextHolder contextHolder;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        final SseContextHolder ctx = contextHolder;\n+\n+        if ( ctx != null )\n+        {\n+            ctx.broadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.contextHolder = new SseContextHolder( sse );\n+    }\n+\n+    @GET\n+    @Path(\"events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( final @Context SseEventSink sseEventSink )\n+    {\n+        final SseContextHolder ctx = contextHolder;\n+\n+        if ( ctx == null )\n+        {\n+            return;\n+        }\n+\n+        ctx.broadcaster.register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = ctx.sse.newEventBuilder().\n+            name( \"list\" ).\n+            id( UUID.randomUUID().toString() ).\n+            mediaType( MediaType.APPLICATION_JSON_TYPE ).\n+            data( ListApplicationJson.class, new ListApplicationJson( applicationService.getInstalledApplications().stream().\n+                map( application -> new ApplicationInfoJson( application, applicationService.isLocalApplication( application.getKey() ) ) ).\n+                collect( Collectors.toList() ) ) ).build();\n+\n+        sseEventSink.send( sseEvent );\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( EVENT_TYPE.equals( event.getType() ) && event.isLocalOrigin() )\n+        {\n+            event.getValueAs( String.class, EVENT_TYPE_KEY ).\n+                ifPresent( eventSubType -> {\n+                    switch ( eventSubType )\n+                    {\n+                        case INSTALLED:\n+                        case STATE:\n+                        case UNINSTALLED:\n+                            handleEvent( event, eventSubType );\n+                            break;\n+                        default:\n+                            LOG.debug( \"Ignoring {} {}\", EVENT_TYPE, eventSubType );\n+                            break;\n+                    }\n+                } );\n+        }\n+    }\n+\n+    private void handleEvent( final Event event, final String eventSubType )\n+    {\n+        final SseContextHolder ctx = contextHolder;\n+\n+        if ( ctx == null )\n+        {\n+            LOG.debug( \"Skipping {} {}. Please to subscribe to send SSE events.\", EVENT_TYPE, eventSubType );\n+            return;\n+        }\n+\n+        if ( event.getValue( APPLICATION_KEY_PARAM ).isPresent() )\n+        {\n+            final OutboundSseEvent.Builder eventBuilder = ctx.sse.newEventBuilder().\n+                name( eventSubType ).\n+                id( UUID.randomUUID().toString() ).\n+                mediaType( MediaType.APPLICATION_JSON_TYPE );\n+\n+            if ( UNINSTALLED.equals( eventSubType ) )\n+            {\n+                eventBuilder.data( ApplicationUninstalledJson.class,\n+                                   new ApplicationUninstalledJson( event.getValue( APPLICATION_KEY_PARAM ).get().toString() ) );\n+            }\n+            else\n+            {\n+                final ApplicationKey applicationKey = ApplicationKey.from( event.getValue( APPLICATION_KEY_PARAM ).get().toString() );\n+\n+                final Application application = applicationService.getInstalledApplication( applicationKey );", "originalCommit": "3ab5c191de6fba886274203530da0d999afcbf5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMjcxOQ==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r521312719", "bodyText": "I personally like the model K8s uses, that is send event type and the whole object related to that event. If it is not a huge performance problem, I think we should keep it. It will probably come in handy.", "author": "gbbirkisson", "createdAt": "2020-11-11T12:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3MzY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNjQ1MA==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r521316450", "bodyText": "In current implementation it is open for race conditions. That is my main concern.\nBut\nwith installed event it is a race anyway\nand race chance is low.", "author": "rymsha", "createdAt": "2020-11-11T12:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3MzY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3NTc1NA==", "url": "https://github.com/enonic/xp/pull/8465#discussion_r521275754", "bodyText": "There are no users of this exception. A WARN log should be enough.", "author": "rymsha", "createdAt": "2020-11-11T10:54:39Z", "path": "modules/server/server-rest/src/main/java/com/enonic/xp/impl/server/rest/SseEntryPoint.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package com.enonic.xp.impl.server.rest;\n+\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.sse.OutboundSseEvent;\n+import javax.ws.rs.sse.Sse;\n+import javax.ws.rs.sse.SseBroadcaster;\n+import javax.ws.rs.sse.SseEventSink;\n+\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.enonic.xp.app.Application;\n+import com.enonic.xp.app.ApplicationKey;\n+import com.enonic.xp.app.ApplicationNotFoundException;\n+import com.enonic.xp.app.ApplicationService;\n+import com.enonic.xp.event.Event;\n+import com.enonic.xp.event.EventListener;\n+import com.enonic.xp.impl.server.rest.model.ApplicationInfoJson;\n+import com.enonic.xp.impl.server.rest.model.ApplicationUninstalledJson;\n+import com.enonic.xp.impl.server.rest.model.ListApplicationJson;\n+import com.enonic.xp.jaxrs.JaxRsComponent;\n+import com.enonic.xp.security.RoleKeys;\n+\n+@Path(\"app\")\n+@RolesAllowed(RoleKeys.ADMIN_ID)\n+@Component(immediate = true, property = \"group=api\")\n+public class SseEntryPoint\n+    implements JaxRsComponent, EventListener\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger( SseEntryPoint.class );\n+\n+    private static final String EVENT_TYPE = \"application.cluster\";\n+\n+    private static final String EVENT_TYPE_KEY = \"eventType\";\n+\n+    private static final String INSTALLED = \"installed\";\n+\n+    private static final String STATE = \"state\";\n+\n+    private static final String UNINSTALLED = \"uninstalled\";\n+\n+    private static final String APPLICATION_KEY_PARAM = \"key\";\n+\n+    private final ApplicationService applicationService;\n+\n+    private volatile SseContextHolder contextHolder;\n+\n+    @Activate\n+    public SseEntryPoint( final @Reference ApplicationService applicationService )\n+    {\n+        this.applicationService = applicationService;\n+    }\n+\n+    @Deactivate\n+    public void deactivate()\n+    {\n+        final SseContextHolder ctx = contextHolder;\n+\n+        if ( ctx != null )\n+        {\n+            ctx.broadcaster.close();\n+        }\n+    }\n+\n+    @Context\n+    public void setSse( final Sse sse )\n+    {\n+        this.contextHolder = new SseContextHolder( sse );\n+    }\n+\n+    @GET\n+    @Path(\"events\")\n+    @Produces(MediaType.SERVER_SENT_EVENTS)\n+    public void subscribe( final @Context SseEventSink sseEventSink )\n+    {\n+        final SseContextHolder ctx = contextHolder;\n+\n+        if ( ctx == null )\n+        {\n+            return;\n+        }\n+\n+        ctx.broadcaster.register( sseEventSink );\n+\n+        final OutboundSseEvent sseEvent = ctx.sse.newEventBuilder().\n+            name( \"list\" ).\n+            id( UUID.randomUUID().toString() ).\n+            mediaType( MediaType.APPLICATION_JSON_TYPE ).\n+            data( ListApplicationJson.class, new ListApplicationJson( applicationService.getInstalledApplications().stream().\n+                map( application -> new ApplicationInfoJson( application, applicationService.isLocalApplication( application.getKey() ) ) ).\n+                collect( Collectors.toList() ) ) ).build();\n+\n+        sseEventSink.send( sseEvent );\n+    }\n+\n+    @Override\n+    public void onEvent( final Event event )\n+    {\n+        if ( EVENT_TYPE.equals( event.getType() ) && event.isLocalOrigin() )\n+        {\n+            event.getValueAs( String.class, EVENT_TYPE_KEY ).\n+                ifPresent( eventSubType -> {\n+                    switch ( eventSubType )\n+                    {\n+                        case INSTALLED:\n+                        case STATE:\n+                        case UNINSTALLED:\n+                            handleEvent( event, eventSubType );\n+                            break;\n+                        default:\n+                            LOG.debug( \"Ignoring {} {}\", EVENT_TYPE, eventSubType );\n+                            break;\n+                    }\n+                } );\n+        }\n+    }\n+\n+    private void handleEvent( final Event event, final String eventSubType )\n+    {\n+        final SseContextHolder ctx = contextHolder;\n+\n+        if ( ctx == null )\n+        {\n+            LOG.debug( \"Skipping {} {}. Please to subscribe to send SSE events.\", EVENT_TYPE, eventSubType );\n+            return;\n+        }\n+\n+        if ( event.getValue( APPLICATION_KEY_PARAM ).isPresent() )\n+        {\n+            final OutboundSseEvent.Builder eventBuilder = ctx.sse.newEventBuilder().\n+                name( eventSubType ).\n+                id( UUID.randomUUID().toString() ).\n+                mediaType( MediaType.APPLICATION_JSON_TYPE );\n+\n+            if ( UNINSTALLED.equals( eventSubType ) )\n+            {\n+                eventBuilder.data( ApplicationUninstalledJson.class,\n+                                   new ApplicationUninstalledJson( event.getValue( APPLICATION_KEY_PARAM ).get().toString() ) );\n+            }\n+            else\n+            {\n+                final ApplicationKey applicationKey = ApplicationKey.from( event.getValue( APPLICATION_KEY_PARAM ).get().toString() );\n+\n+                final Application application = applicationService.getInstalledApplication( applicationKey );\n+\n+                if ( application == null )\n+                {\n+                    throw new ApplicationNotFoundException( applicationKey );", "originalCommit": "3ab5c191de6fba886274203530da0d999afcbf5f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "648166c9a95878a08dc83480dd00e1ef374c84b0", "url": "https://github.com/enonic/xp/commit/648166c9a95878a08dc83480dd00e1ef374c84b0", "message": "Extend Management with App events #8451", "committedDate": "2020-11-11T13:06:13Z", "type": "commit"}, {"oid": "648166c9a95878a08dc83480dd00e1ef374c84b0", "url": "https://github.com/enonic/xp/commit/648166c9a95878a08dc83480dd00e1ef374c84b0", "message": "Extend Management with App events #8451", "committedDate": "2020-11-11T13:06:13Z", "type": "forcePushed"}]}