{"pr_number": 8527, "pr_title": "Return all projects layers in /list API #8413", "pr_createdAt": "2020-12-04T10:06:35Z", "pr_url": "https://github.com/enonic/xp/pull/8527", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMDk4MQ==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r536000981", "bodyText": "Change to findFirst() so when we support multi-inheritance first project will be returned", "author": "rymsha", "createdAt": "2020-12-04T10:35:42Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/project/Projects.java", "diffHunk": "@@ -39,6 +39,14 @@ public static Projects from( Repositories repositories )\n             build();\n     }\n \n+    public Project get( final ProjectName name )\n+    {\n+        return this.stream().\n+            filter( project -> project.getName().equals( name ) ).\n+            findAny().", "originalCommit": "f0d8553e79f24ef373eaec0b86cf01360457686d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxNTI2Mw==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r536015263", "bodyText": "I think we need graph method in projectService. This one does not follow spec #8413 (comment)", "author": "rymsha", "createdAt": "2020-12-04T10:58:28Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/project/ProjectResource.java", "diffHunk": "@@ -184,6 +192,47 @@ public ProjectJson get( final @QueryParam(\"name\") String projectNameValue )\n         return doCreateJson( this.projectService.get( projectName ) );\n     }\n \n+    @GET\n+    @Path(\"getTree\")\n+    public List<ProjectParentJson> getTree( final @QueryParam(\"name\") String projectNameValue )\n+    {\n+        final List<Project> result = new ArrayList<>();\n+        final Projects projects = adminContext().callWith( () -> this.projectService.list() );", "originalCommit": "f0d8553e79f24ef373eaec0b86cf01360457686d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "804a741c21595ec0b1ce246c34cadb95b5a29a76", "url": "https://github.com/enonic/xp/commit/804a741c21595ec0b1ce246c34cadb95b5a29a76", "message": "Return all projects layers in /list API #8413", "committedDate": "2020-12-07T10:16:58Z", "type": "forcePushed"}, {"oid": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "url": "https://github.com/enonic/xp/commit/f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "message": "Return all projects layers in /list API #8413", "committedDate": "2020-12-07T10:40:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMjk1MA==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537402950", "bodyText": "Is it OK to extend lmmutavleList here?", "author": "rymsha", "createdAt": "2020-12-07T10:41:15Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/project/json/ProjectGraphJson.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.enonic.xp.admin.impl.rest.resource.project.json;\n+\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.enonic.xp.project.ProjectGraph;\n+import com.enonic.xp.support.AbstractImmutableEntityList;\n+\n+public final class ProjectGraphJson\n+    extends AbstractImmutableEntityList<ProjectGraphEntryJson>", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MjA0Mw==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537442043", "bodyText": "we do the same with AccessControlEntriesJson", "author": "vbradnitski", "createdAt": "2020-12-07T11:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwMjk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNDUxMA==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537404510", "bodyText": "Utility methods don't belong to here.", "author": "rymsha", "createdAt": "2020-12-07T10:43:33Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/project/Projects.java", "diffHunk": "@@ -39,6 +39,14 @@ public static Projects from( Repositories repositories )\n             build();\n     }\n \n+    public Project get( final ProjectName name )", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNjAzMA==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537406030", "bodyText": "It has multiple parents in graph", "author": "rymsha", "createdAt": "2020-12-07T10:45:40Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/project/ProjectGraphEntry.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.enonic.xp.project;\n+\n+import java.util.Objects;\n+\n+import com.google.common.base.Preconditions;\n+\n+import com.enonic.xp.annotation.PublicApi;\n+\n+@PublicApi\n+public final class ProjectGraphEntry\n+{\n+    private final ProjectName name;\n+\n+    private final ProjectName parent;", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNjM5Nw==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537406397", "bodyText": "This is service responsibility to convert", "author": "rymsha", "createdAt": "2020-12-07T10:46:13Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/project/ProjectGraphEntry.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.enonic.xp.project;\n+\n+import java.util.Objects;\n+\n+import com.google.common.base.Preconditions;\n+\n+import com.enonic.xp.annotation.PublicApi;\n+\n+@PublicApi\n+public final class ProjectGraphEntry\n+{\n+    private final ProjectName name;\n+\n+    private final ProjectName parent;\n+\n+    private ProjectGraphEntry( Builder builder )\n+    {\n+        this.name = builder.name;\n+        this.parent = builder.parent;\n+    }\n+\n+    public static Builder create()\n+    {\n+        return new Builder();\n+    }\n+\n+    public static ProjectGraphEntry from( final Project project )", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNzAwOQ==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537407009", "bodyText": "I'm not sure we need equality methods in this class", "author": "rymsha", "createdAt": "2020-12-07T10:47:09Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/project/ProjectGraphEntry.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.enonic.xp.project;\n+\n+import java.util.Objects;\n+\n+import com.google.common.base.Preconditions;\n+\n+import com.enonic.xp.annotation.PublicApi;\n+\n+@PublicApi\n+public final class ProjectGraphEntry\n+{\n+    private final ProjectName name;\n+\n+    private final ProjectName parent;\n+\n+    private ProjectGraphEntry( Builder builder )\n+    {\n+        this.name = builder.name;\n+        this.parent = builder.parent;\n+    }\n+\n+    public static Builder create()\n+    {\n+        return new Builder();\n+    }\n+\n+    public static ProjectGraphEntry from( final Project project )\n+    {\n+        if ( project == null )\n+        {\n+            return null;\n+        }\n+\n+        return ProjectGraphEntry.create().\n+            name( project.getName() ).\n+            parent( project.getParent() ).\n+            build();\n+    }\n+\n+    public ProjectName getName()\n+    {\n+        return name;\n+    }\n+\n+    public ProjectName getParent()\n+    {\n+        return parent;\n+    }\n+\n+    @Override\n+    public boolean equals( final Object o )", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3OTY3Nw==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537479677", "bodyText": "delete", "author": "rymsha", "createdAt": "2020-12-07T12:47:27Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/project/ProjectGraph.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.enonic.xp.project;\n+\n+import java.util.Collection;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableList;\n+\n+import com.enonic.xp.annotation.PublicApi;\n+import com.enonic.xp.support.AbstractImmutableEntityList;\n+\n+@PublicApi\n+public final class ProjectGraph\n+    extends AbstractImmutableEntityList<ProjectGraphEntry>\n+{\n+    private ProjectGraph( final Builder builder )\n+    {\n+        super( builder.projects.build() );\n+    }\n+\n+    public static ProjectGraph empty()\n+    {\n+        return create().build();\n+    }\n+\n+\n+    public static Builder create()\n+    {\n+        return new Builder();\n+    }\n+\n+    @Override\n+    public String toString()", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4Mjc3Ng==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537482776", "bodyText": "no need", "author": "rymsha", "createdAt": "2020-12-07T12:52:21Z", "path": "modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java", "diffHunk": "@@ -252,6 +260,53 @@ public Projects list()\n         } );\n     }\n \n+    @Override\n+    public ProjectGraph graph( final ProjectName projectName )\n+    {\n+        final List<Project> result = new ArrayList<>();\n+\n+        final Project targetProject = this.get( projectName );\n+\n+        if ( targetProject == null )", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ4ODEzMA==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537488130", "bodyText": "do it in graph", "author": "rymsha", "createdAt": "2020-12-07T13:00:48Z", "path": "modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java", "diffHunk": "@@ -260,12 +315,25 @@ private Projects doList()\n     @Override\n     public Project get( final ProjectName projectName )\n     {\n-        return callWithGetContext( () -> doGet( projectName ), projectName );\n+        try", "originalCommit": "f4c8a6db2166fdcaa56183edfa78fb3d0e87c608", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8a0d12be89efd792bb1c9613ed340265e1463e6", "url": "https://github.com/enonic/xp/commit/a8a0d12be89efd792bb1c9613ed340265e1463e6", "message": "Return all projects layers in /list API #8413", "committedDate": "2020-12-07T18:51:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzOTE2NQ==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537839165", "bodyText": "Static import helps", "author": "rymsha", "createdAt": "2020-12-07T21:17:18Z", "path": "modules/itest/itest-core/src/test/java/com/enonic/xp/core/project/ProjectServiceImplTest.java", "diffHunk": "@@ -807,6 +810,37 @@ void modify_default_project_permissions()\n         } );\n     }\n \n+    @Test\n+    void graph()\n+    {\n+        final Project project1 = ADMIN_CONTEXT.callWith( () -> doCreateProject( ProjectName.from( \"project1\" ), null, true, null ) );\n+        final Project project2 =\n+            ADMIN_CONTEXT.callWith( () -> doCreateProject( ProjectName.from( \"project2\" ), null, true, project1.getName() ) );\n+        final Project project3 =\n+            ADMIN_CONTEXT.callWith( () -> doCreateProject( ProjectName.from( \"project3\" ), null, true, project2.getName() ) );\n+        final Project project4 =\n+            ADMIN_CONTEXT.callWith( () -> doCreateProject( ProjectName.from( \"project4\" ), null, true, project2.getName() ) );\n+        final Project project5 =\n+            ADMIN_CONTEXT.callWith( () -> doCreateProject( ProjectName.from( \"project5\" ), null, true, project4.getName() ) );\n+\n+        final ProjectGraph graph1 = ADMIN_CONTEXT.callWith( () -> projectService.graph( project1.getName() ) );\n+\n+        assertEquals( 5, graph1.getSize() );\n+        assertThat( graph1.getList() ).\n+            extracting( \"name\", \"parent\" ).\n+            containsExactly( Tuple.tuple( project1.getName(), null ), Tuple.tuple( project2.getName(), project1.getName() ),\n+                             Tuple.tuple( project4.getName(), project2.getName() ), Tuple.tuple( project3.getName(), project2.getName() ),\n+                             Tuple.tuple( project5.getName(), project4.getName() ) );\n+\n+        final ProjectGraph graph2 = ADMIN_CONTEXT.callWith( () -> projectService.graph( project4.getName() ) );\n+\n+        assertEquals( 4, graph2.getSize() );\n+        assertThat( graph2.getList() ).\n+            extracting( \"name\", \"parent\" ).\n+            containsExactly( Tuple.tuple( project1.getName(), null ), Tuple.tuple( project2.getName(), project1.getName() ),", "originalCommit": "a8a0d12be89efd792bb1c9613ed340265e1463e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MDU3Nw==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537840577", "bodyText": "Don't we want exception here?", "author": "rymsha", "createdAt": "2020-12-07T21:19:52Z", "path": "modules/core/core-project/src/main/java/com/enonic/xp/core/impl/project/ProjectServiceImpl.java", "diffHunk": "@@ -435,6 +504,14 @@ private BufferedImage scaleWidth( final BufferedImage source, final int sizeInt\n         return ImageHelper.getScaledInstance( source, newWidth.intValue(), newHeight.intValue() );\n     }\n \n+    private Project getProject( final Projects projects, final ProjectName name )\n+    {\n+        return projects.stream().\n+            filter( project -> project.getName().equals( name ) ).\n+            findFirst().\n+            orElse( null );", "originalCommit": "a8a0d12be89efd792bb1c9613ed340265e1463e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0Mjc3Nw==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537842777", "bodyText": "Don't use guava when not necessarily, please. Unmodifiable list works here just fine", "author": "rymsha", "createdAt": "2020-12-07T21:23:28Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/project/json/ProjectGraphJson.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.enonic.xp.admin.impl.rest.resource.project.json;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.enonic.xp.project.ProjectGraph;\n+\n+public final class ProjectGraphJson\n+{\n+    private final List<ProjectGraphEntryJson> entries;\n+\n+    public ProjectGraphJson( final ProjectGraph projectGraph )\n+    {\n+        this.entries = projectGraph != null ? ImmutableList.copyOf( projectGraph.stream().", "originalCommit": "a8a0d12be89efd792bb1c9613ed340265e1463e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MzQyOA==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r537843428", "bodyText": "Never used? Not needed.", "author": "rymsha", "createdAt": "2020-12-07T21:24:32Z", "path": "modules/core/core-api/src/main/java/com/enonic/xp/project/ProjectGraph.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.enonic.xp.project;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import com.enonic.xp.annotation.PublicApi;\n+import com.enonic.xp.support.AbstractImmutableEntityList;\n+\n+@PublicApi\n+public final class ProjectGraph\n+    extends AbstractImmutableEntityList<ProjectGraphEntry>\n+{\n+    private ProjectGraph( final Builder builder )\n+    {\n+        super( builder.projects.build() );\n+    }\n+\n+    public static ProjectGraph empty()", "originalCommit": "a8a0d12be89efd792bb1c9613ed340265e1463e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "166362b4d47aa64c5b9312be1b0cfd80bd517082", "url": "https://github.com/enonic/xp/commit/166362b4d47aa64c5b9312be1b0cfd80bd517082", "message": "Return all projects layers in /list API #8413", "committedDate": "2020-12-08T09:21:03Z", "type": "commit"}, {"oid": "166362b4d47aa64c5b9312be1b0cfd80bd517082", "url": "https://github.com/enonic/xp/commit/166362b4d47aa64c5b9312be1b0cfd80bd517082", "message": "Return all projects layers in /list API #8413", "committedDate": "2020-12-08T09:21:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwODM0Mg==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r538308342", "bodyText": "I suggest to use tree instead off getTree, because get presents in the HTTP method", "author": "anatol-sialitski", "createdAt": "2020-12-08T12:25:20Z", "path": "modules/admin/admin-impl/src/main/java/com/enonic/xp/admin/impl/rest/resource/project/ProjectResource.java", "diffHunk": "@@ -184,6 +186,14 @@ public ProjectJson get( final @QueryParam(\"name\") String projectNameValue )\n         return doCreateJson( this.projectService.get( projectName ) );\n     }\n \n+    @GET\n+    @Path(\"getTree\")", "originalCommit": "166362b4d47aa64c5b9312be1b0cfd80bd517082", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxNDM2MA==", "url": "https://github.com/enonic/xp/pull/8527#discussion_r538314360", "bodyText": "If we have list this one should be called tree, I agree", "author": "rymsha", "createdAt": "2020-12-08T12:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwODM0Mg=="}], "type": "inlineReview"}]}