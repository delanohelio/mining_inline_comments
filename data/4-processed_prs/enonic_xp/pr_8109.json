{"pr_number": 8109, "pr_title": "Audit logs appear to always be created as \"anonymous\" user #8079", "pr_createdAt": "2020-05-22T15:16:34Z", "pr_url": "https://github.com/enonic/xp/pull/8109", "timeline": [{"oid": "39d313431ca78a9a52aafec747c5f84be8fd8949", "url": "https://github.com/enonic/xp/commit/39d313431ca78a9a52aafec747c5f84be8fd8949", "message": "Audit logs appear to always be created as \"anonymous\" user #8079", "committedDate": "2020-05-22T17:24:41Z", "type": "commit"}, {"oid": "39d313431ca78a9a52aafec747c5f84be8fd8949", "url": "https://github.com/enonic/xp/commit/39d313431ca78a9a52aafec747c5f84be8fd8949", "message": "Audit logs appear to always be created as \"anonymous\" user #8079", "committedDate": "2020-05-22T17:24:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyMDcxOQ==", "url": "https://github.com/enonic/xp/pull/8109#discussion_r429420719", "bodyText": "Use CompletableFuture and it will look great!\n(Tip: CF::runAsync has same signature as Executor::execute )", "author": "rymsha", "createdAt": "2020-05-22T19:28:41Z", "path": "modules/core/core-content/src/test/java/com/enonic/xp/core/impl/content/ContentAuditLogSupportImplTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.enonic.xp.core.impl.content;\n+\n+import java.time.Instant;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+import com.enonic.xp.audit.AuditLogService;\n+import com.enonic.xp.audit.LogAuditLogParams;\n+import com.enonic.xp.content.Content;\n+import com.enonic.xp.content.ContentConstants;\n+import com.enonic.xp.content.ContentId;\n+import com.enonic.xp.content.ContentPath;\n+import com.enonic.xp.content.CreateContentParams;\n+import com.enonic.xp.context.Context;\n+import com.enonic.xp.context.ContextBuilder;\n+import com.enonic.xp.data.PropertyTree;\n+import com.enonic.xp.repository.RepositoryId;\n+import com.enonic.xp.schema.content.ContentTypeName;\n+import com.enonic.xp.security.IdProviderKey;\n+import com.enonic.xp.security.PrincipalKey;\n+import com.enonic.xp.security.RoleKeys;\n+import com.enonic.xp.security.User;\n+import com.enonic.xp.security.auth.AuthenticationInfo;\n+\n+public class ContentAuditLogSupportImplTest\n+{\n+\n+    @Test\n+    public void testCreateContent()\n+        throws Exception\n+    {\n+        // mock\n+        final ContentConfig config = Mockito.mock( ContentConfig.class );\n+\n+        final AuditLogService auditLogService = Mockito.mock( AuditLogService.class );\n+\n+        Mockito.when( config.auditlog_enabled() ).thenReturn( true );\n+\n+        // prepare\n+        final ExecutorService executor = Executors.newSingleThreadExecutor();\n+\n+        final ContentAuditLogSupportImpl support = new ContentAuditLogSupportImpl( config, executor, auditLogService );\n+\n+        final PropertyTree propertyTree = new PropertyTree();\n+        propertyTree.addString( \"test-data\", \"test-data\" );\n+\n+        final CreateContentParams params = CreateContentParams.create().\n+            type( ContentTypeName.site() ).\n+            parent( ContentPath.ROOT ).\n+            contentData( propertyTree ).\n+            displayName( \"displayName\" ).build();\n+\n+        final Content content = Content.create().\n+            id( ContentId.from( \"contentId\" ) ).\n+            type( ContentTypeName.site() ).\n+            name( \"contentName\" ).\n+            displayName( \"displayName\" ).\n+            parentPath( ContentPath.ROOT ).\n+            build();\n+\n+        final User user = User.create().\n+            key( PrincipalKey.ofUser( IdProviderKey.system(), \"testUser\" ) ).\n+            displayName( \"Test User\" ).\n+            modifiedTime( Instant.now() ).\n+            email( \"test-user@enonic.com\" ).\n+            login( \"test-user\" ).\n+            build();\n+\n+        final AuthenticationInfo authInfo = AuthenticationInfo.create().\n+            user( user ).\n+            principals( RoleKeys.ADMIN_LOGIN ).\n+            build();\n+\n+        final Context context = ContextBuilder.create().\n+            branch( ContentConstants.BRANCH_DRAFT ).\n+            repositoryId( RepositoryId.from( \"test-repository\" ) ).\n+            authInfo( authInfo ).\n+            build();\n+\n+        // test\n+        context.runWith( () -> support.createContent( params, content ) );\n+\n+        executor.shutdown();", "originalCommit": "39d313431ca78a9a52aafec747c5f84be8fd8949", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}