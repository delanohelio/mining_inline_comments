{"pr_number": 3215, "pr_title": "[STORM-3585] New compact Constraint config including maxNodeCoLocationCnt and incompatibleComponents", "pr_createdAt": "2020-02-25T02:37:38Z", "pr_url": "https://github.com/apache/storm/pull/3215", "timeline": [{"oid": "164f3ec430bd5d37342d7fa636b44ba843174599", "url": "https://github.com/apache/storm/commit/164f3ec430bd5d37342d7fa636b44ba843174599", "message": "[STORM-3585] Implement Comparable interface.", "committedDate": "2020-02-21T21:15:18Z", "type": "commit"}, {"oid": "170ad9d30c583564fea37549c0ba7b9438863683", "url": "https://github.com/apache/storm/commit/170ad9d30c583564fea37549c0ba7b9438863683", "message": "[STORM-3585] Component constraint can specify an optional maxCoLocationCnt and list of incompatible components on node level.\n    Process new constrint specification. Enforce the limits in scuduling.\n    Minor changes to log messages.", "committedDate": "2020-02-25T02:22:10Z", "type": "commit"}, {"oid": "c5865267920c2701785ed848b583d92ac23d1b01", "url": "https://github.com/apache/storm/commit/c5865267920c2701785ed848b583d92ac23d1b01", "message": "[STORM-3585] Modify test code for new spread syntax with maxCoLocationCnt\n\tAlso fix backtrack test to allow a higher co-location-count.", "committedDate": "2020-02-25T02:26:33Z", "type": "commit"}, {"oid": "0139b5e232c7bafa26c40bdc34058cee560214f1", "url": "https://github.com/apache/storm/commit/0139b5e232c7bafa26c40bdc34058cee560214f1", "message": "[STORM-3585] Parameterize this class so that each test can be run twice (once with old and once with new consolidated constraint config)", "committedDate": "2020-02-26T01:40:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNjk5NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r384636994", "bodyText": "Instead of using large number this should be function on total executors requested by topology.", "author": "kishorvpatil", "createdAt": "2020-02-26T17:10:04Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -447,22 +518,24 @@ public boolean isExecAssignmentToWorkerValid(WorkerSlot worker, SearcherState st\n         return retMap;\n     }\n \n-    private ArrayList<ExecutorDetails> getSortedExecs(HashSet<String> spreadComps, Map<String, Map<String, Integer>> constraintMatrix,\n+    private ArrayList<ExecutorDetails> getSortedExecs(Map<String, Integer> spreadCompCnts,\n+                                                      Map<String, Set<String>> constraintMatrix,\n                                                       Map<String, Set<ExecutorDetails>> compToExecs) {\n         ArrayList<ExecutorDetails> retList = new ArrayList<>();\n         //find number of constraints per component\n         //Key->Comp Value-># of constraints\n-        Map<String, Integer> compConstraintCountMap = new HashMap<>();\n+        Map<String, Double> compConstraintCountMap = new HashMap<>();\n         constraintMatrix.forEach((comp, subMatrix) -> {\n-            int count = subMatrix.values().stream().mapToInt(Number::intValue).sum();\n-            //check component is declared for spreading\n-            if (spreadComps.contains(comp)) {\n-                count++;\n+            double count = subMatrix.size();\n+            // check if component is declared for spreading\n+            if (spreadCompCnts.containsKey(comp)) {\n+                // lower (1 and above only) value is most constrained should have higher count\n+                count += (1_000.0 / spreadCompCnts.get(comp));", "originalCommit": "0139b5e232c7bafa26c40bdc34058cee560214f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg2OTk2NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r384869964", "bodyText": "Replaced 1000 with component count.", "author": "bipinprasad", "createdAt": "2020-02-27T01:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzNjk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzOTY2MA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r384639660", "bodyText": "rename?", "author": "kishorvpatil", "createdAt": "2020-02-26T17:14:12Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -506,20 +581,21 @@ public SchedulingResult asSchedulingResult() {\n                 return SchedulingResult.success(\"Fully Scheduled by ConstraintSolverStrategy (\" + statesSearched\n                                                 + \" states traversed in \" + timeTakenMillis + \"ms, backtracked \" + backtracked + \" times)\");\n             }\n+            state.logNodeCompAssignments();\n             return SchedulingResult.failure(SchedulingStatus.FAIL_NOT_ENOUGH_RESOURCES,\n                                             \"Cannot find scheduling that satisfies all constraints (\" + statesSearched\n                                             + \" states traversed in \" + timeTakenMillis + \"ms, backtracked \" + backtracked + \" times)\");\n         }\n     }\n \n-    protected static class SearcherState {\n+    protected static final class SearcherState {\n         final long startTimeMillis;\n         private final long maxEndTimeMs;\n         // A map of the worker to the components in the worker to be able to enforce constraints.\n-        private final Map<WorkerSlot, Set<String>> workerCompAssignment;\n+        private final Map<WorkerSlot, Map<String, Integer>> workerCompAssignment;", "originalCommit": "0139b5e232c7bafa26c40bdc34058cee560214f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MDA4Nw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r384870087", "bodyText": "Changed names to end in Cnts.", "author": "bipinprasad", "createdAt": "2020-02-27T01:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYzOTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MDAxMA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r384640010", "bodyText": "Remove commented code.", "author": "kishorvpatil", "createdAt": "2020-02-26T17:14:42Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -54,27 +56,76 @@\n import org.apache.storm.metric.StormMetricsRegistry;\n import org.apache.storm.scheduler.resource.normalization.ResourceMetrics;\n \n+@RunWith(Parameterized.class)\n public class TestConstraintSolverStrategy {\n+    @Parameters\n+    public static Object[] data() {\n+        return new Object[] { false, true };\n+    }\n+    //public static Collection<Object[]> data(){", "originalCommit": "0139b5e232c7bafa26c40bdc34058cee560214f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3MDE2Ng==", "url": "https://github.com/apache/storm/pull/3215#discussion_r384870166", "bodyText": "Removed comment lines", "author": "bipinprasad", "createdAt": "2020-02-27T01:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MDAxMA=="}], "type": "inlineReview"}, {"oid": "f0a8af1cfe089797232b122938af4af9fa58eae7", "url": "https://github.com/apache/storm/commit/f0a8af1cfe089797232b122938af4af9fa58eae7", "message": "[STORM-3585] Remove commented code.", "committedDate": "2020-02-26T22:53:51Z", "type": "commit"}, {"oid": "eadc732872337866a78a9b22d4ea136acaf4ee3f", "url": "https://github.com/apache/storm/commit/eadc732872337866a78a9b22d4ea136acaf4ee3f", "message": "[STORM-3585] Rename variables and change hardcoded constant used with divisor for maxCoLocationCnt.", "committedDate": "2020-02-26T23:00:05Z", "type": "commit"}, {"oid": "c79d1b00cb6c30446374e7973d35a7c7a8652b54", "url": "https://github.com/apache/storm/commit/c79d1b00cb6c30446374e7973d35a7c7a8652b54", "message": "[STORM-3585] Update testIntegrationWithRAS() to use only maxCoLocationCnt > 1 and tweak test for success.", "committedDate": "2020-02-27T01:40:09Z", "type": "commit"}, {"oid": "4f52af7c3bda0683e1297569c5afda1952006b09", "url": "https://github.com/apache/storm/commit/4f52af7c3bda0683e1297569c5afda1952006b09", "message": "[STORM-3585] Replace HashMap with Map in variable definition.", "committedDate": "2020-02-27T19:00:10Z", "type": "commit"}, {"oid": "512decd5667b24c3583967c9de50584201edb5c2", "url": "https://github.com/apache/storm/commit/512decd5667b24c3583967c9de50584201edb5c2", "message": "[STORM-3585] Replace HashMap with Map in variable definition.", "committedDate": "2020-02-27T19:09:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMDIwOQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r385330209", "bodyText": "Please correct the comment, @Ethanlm  thinks the component exclusion is at worker level", "author": "kishorvpatil", "createdAt": "2020-02-27T19:40:38Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -45,64 +45,142 @@\n     //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *      { \"comp-1\": [ 2, \"comp-2\", \"comp-3\" ], # comp-1 cannot exist on same node as comp-2 or comp-3, and at most 2 comp-1 same node", "originalCommit": "512decd5667b24c3583967c9de50584201edb5c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNTExMQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r385335111", "bodyText": "The description can be modified to https://github.com/apache/storm/blob/master/storm-client/src/jvm/org/apache/storm/Config.java#L307-L312\nAlso, validator needs to allow for list or map.\nThe configuration could be more explicit in mentioning node level collation and component isolation.\n{\"comp-1\": { \"maxNodeCollations\" : 2, \"incompatibleComponents\": [ \"comp-2\", \"comp-3\"  ]} }", "author": "kishorvpatil", "createdAt": "2020-02-27T19:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMDIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTU2Mg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r386759562", "bodyText": "Updated Config.java, ConfigValidationAnnotations.java, ConfigValidations.java, ConstraintSolverStrategy and TestConstraintSolverStrategy.", "author": "bipinprasad", "createdAt": "2020-03-03T02:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMDIwOQ=="}], "type": "inlineReview"}, {"oid": "32345fb940e76566eec065b5f3e4098db5670df9", "url": "https://github.com/apache/storm/commit/32345fb940e76566eec065b5f3e4098db5670df9", "message": "[STORM-3583] Add custom annotation \"IsExactlyOneOf\" to parse overloaded configuration value.", "committedDate": "2020-03-03T01:45:08Z", "type": "commit"}, {"oid": "21d7231b0ac4faaa67640fec3c78b2afb28058d9", "url": "https://github.com/apache/storm/commit/21d7231b0ac4faaa67640fec3c78b2afb28058d9", "message": "[STORM-3585] Add validator classes CustomIsExactlyOneOfValidators and RasConstraintsTypeValidator.", "committedDate": "2020-03-03T01:47:03Z", "type": "commit"}, {"oid": "1dabd8f1c0d41f0eadeb64c69a785715c1db8f5e", "url": "https://github.com/apache/storm/commit/1dabd8f1c0d41f0eadeb64c69a785715c1db8f5e", "message": "[STORM-3585] Change annotation for TOPOLOGY_RAS_CONSTRAINTS to handle both old and new formats:\n\tusing @IsExactlyOneOf(valueValidatorClasses = { ListOfListOfStringValidator.class, RasConstraintsTypeValidator.class })", "committedDate": "2020-03-03T01:49:54Z", "type": "commit"}, {"oid": "ebe43d9d7cea1f274c983c581e35afb77a7ea5bf", "url": "https://github.com/apache/storm/commit/ebe43d9d7cea1f274c983c581e35afb77a7ea5bf", "message": "[STORM-3585] Add new test case testExactlyOneOfCustomAnnotation() for @IsExactlyOneOf", "committedDate": "2020-03-03T01:52:27Z", "type": "commit"}, {"oid": "d1076101f1c40a6c3e3e65dc6085e33df347d899", "url": "https://github.com/apache/storm/commit/d1076101f1c40a6c3e3e65dc6085e33df347d899", "message": "[STORM-3585] Change code to handle map entries in the consolidated topology.ras.config.", "committedDate": "2020-03-03T01:55:10Z", "type": "commit"}, {"oid": "47877020c4e6f9e2ee0eec87937d847860def2a5", "url": "https://github.com/apache/storm/commit/47877020c4e6f9e2ee0eec87937d847860def2a5", "message": "[STORM-3585] Generate newer MAP based consolidated topology.ras.config. Add test testNewConstraintFormat() to process JSON config string.", "committedDate": "2020-03-03T01:56:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODA3Mg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387438072", "bodyText": "typo: missing 'be\" in \"must  a instance\"", "author": "Ethanlm", "createdAt": "2020-03-04T04:01:32Z", "path": "storm-client/src/jvm/org/apache/storm/validation/ConfigValidation.java", "diffHunk": "@@ -850,6 +852,128 @@ public void validateField(String name, Object o) {\n         }\n     }\n \n+    public static class CustomIsExactlyOneOfValidators extends Validator {\n+        private Class<?>[] subValidators;\n+        private List<String> validatorClassNames;\n+\n+        public CustomIsExactlyOneOfValidators(Map<String, Object> params) {\n+            this.subValidators = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.VALUE_VALIDATOR_CLASSES);\n+            this.validatorClassNames = Arrays.asList(subValidators).stream().map(x -> x.getName()).collect(Collectors.toList());\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                throw new IllegalArgumentException(\"Field \" + name + \" must be set.\");\n+            }\n+\n+            HashMap<String, Exception> validatorExceptions = new HashMap<>();\n+            Set<String> selectedValidators = new HashSet<>();\n+            for (Class<?> vv : subValidators) {\n+                Object valueValidator;\n+                try {\n+                    valueValidator = vv.getConstructor().newInstance();\n+                } catch (Exception ex) {\n+                    throw new IllegalArgumentException(vv.getName() + \" instantiation failure\", ex);\n+                }\n+                if (valueValidator instanceof Validator) {\n+                    try {\n+                        ((Validator) valueValidator).validateField(name + \" \" + vv.getSimpleName() + \" value\", o);\n+                        selectedValidators.add(vv.getName());\n+                    } catch (Exception ex) {\n+                        // only one will pass, so ignore all validation errors - stored for future use\n+                        validatorExceptions.put(vv.getName(), ex);\n+                    }\n+                } else {\n+                    String err = String.format(\"validator: %s cannot be used in CustomExactlyOneOfValidators to validate values. \"\n+                            + \"Individual entry validators must a instance of Validator class\", vv.getName());", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc3ODEzMw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387778133", "bodyText": "Good catch.This was copied message - changed here and two other places in original code.", "author": "bipinprasad", "createdAt": "2020-03-04T16:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTY4Mg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387439682", "bodyText": "Originally when the validation class for topology.ras.constraints with ListOfListOfStringValidator, a value of null is accpetable.\nThe null check here will break backwards compatibility. So the question here is: do we want to maintain the backwards compatibility?\nOne thing I notice is that other validation classes accept null.  And we rely on NotNull annotation if we don't accept null as the value.", "author": "Ethanlm", "createdAt": "2020-03-04T04:10:16Z", "path": "storm-client/src/jvm/org/apache/storm/validation/ConfigValidation.java", "diffHunk": "@@ -850,6 +852,128 @@ public void validateField(String name, Object o) {\n         }\n     }\n \n+    public static class CustomIsExactlyOneOfValidators extends Validator {\n+        private Class<?>[] subValidators;\n+        private List<String> validatorClassNames;\n+\n+        public CustomIsExactlyOneOfValidators(Map<String, Object> params) {\n+            this.subValidators = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.VALUE_VALIDATOR_CLASSES);\n+            this.validatorClassNames = Arrays.asList(subValidators).stream().map(x -> x.getName()).collect(Collectors.toList());\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                throw new IllegalArgumentException(\"Field \" + name + \" must be set.\");", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAwMDU4Mw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388000583", "bodyText": "Allow null in RasConstraintsTypeValidator and CustomIsExactlyOneOfValidators.", "author": "bipinprasad", "createdAt": "2020-03-04T23:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzOTY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MDU1NQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387440555", "bodyText": "maybe (String) o3 is clearer than \"\" + o3?", "author": "Ethanlm", "createdAt": "2020-03-04T04:14:29Z", "path": "storm-client/src/jvm/org/apache/storm/validation/ConfigValidation.java", "diffHunk": "@@ -850,6 +852,128 @@ public void validateField(String name, Object o) {\n         }\n     }\n \n+    public static class CustomIsExactlyOneOfValidators extends Validator {\n+        private Class<?>[] subValidators;\n+        private List<String> validatorClassNames;\n+\n+        public CustomIsExactlyOneOfValidators(Map<String, Object> params) {\n+            this.subValidators = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.VALUE_VALIDATOR_CLASSES);\n+            this.validatorClassNames = Arrays.asList(subValidators).stream().map(x -> x.getName()).collect(Collectors.toList());\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                throw new IllegalArgumentException(\"Field \" + name + \" must be set.\");\n+            }\n+\n+            HashMap<String, Exception> validatorExceptions = new HashMap<>();\n+            Set<String> selectedValidators = new HashSet<>();\n+            for (Class<?> vv : subValidators) {\n+                Object valueValidator;\n+                try {\n+                    valueValidator = vv.getConstructor().newInstance();\n+                } catch (Exception ex) {\n+                    throw new IllegalArgumentException(vv.getName() + \" instantiation failure\", ex);\n+                }\n+                if (valueValidator instanceof Validator) {\n+                    try {\n+                        ((Validator) valueValidator).validateField(name + \" \" + vv.getSimpleName() + \" value\", o);\n+                        selectedValidators.add(vv.getName());\n+                    } catch (Exception ex) {\n+                        // only one will pass, so ignore all validation errors - stored for future use\n+                        validatorExceptions.put(vv.getName(), ex);\n+                    }\n+                } else {\n+                    String err = String.format(\"validator: %s cannot be used in CustomExactlyOneOfValidators to validate values. \"\n+                            + \"Individual entry validators must a instance of Validator class\", vv.getName());\n+                    LOG.warn(err);\n+                }\n+            }\n+            // check if one and only one validation succeeded\n+            if (selectedValidators.isEmpty()) {\n+                String parseErrs = String.join(\";\\n\\t\", validatorExceptions.entrySet().stream()\n+                        .map(e -> String.format(\"%s:%s\", e.getKey(), e.getValue())).collect(Collectors.toList()));\n+                String err = String.format(\"Field %s must be one of %s; parse errors are \\n\\t%s\", name,\n+                        String.join(\", \", validatorClassNames), parseErrs);\n+                throw new IllegalArgumentException(err);\n+            }\n+            if (selectedValidators.size() > 1) {\n+                throw new IllegalArgumentException(\"Field \" + name + \" must match exactly one of \" + String.join(\", \", selectedValidators));\n+            }\n+        }\n+    }\n+\n+    public static class RasConstraintsTypeValidator extends Validator {\n+        public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+        public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n+\n+        public static class RasConstraint {\n+            int maxNodeCoLocationCnt = -1;\n+            Set<String> incompatibleComponents = new HashSet<>();\n+        }\n+\n+        public Map<String, RasConstraint> rasConstraints = new HashMap<>(); // parsedConstraints\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                throw new IllegalArgumentException(\"Field \" + name + \" must be set.\");\n+            }\n+            if (!(o instanceof Map)) {\n+                throw new IllegalArgumentException(\n+                        \"Field \" + name + \" must be an Iterable containing only Map of Maps\");\n+            }\n+            Map<String, Object> map1 = (Map<String, Object>)o;\n+            for (Map.Entry<String, Object> entry1: map1.entrySet()) {\n+                String comp1 = entry1.getKey();\n+                Object o2 = entry1.getValue();\n+                RasConstraint rasConstraint = new RasConstraint();\n+                rasConstraints.put(comp1, rasConstraint);\n+                if (!(o2 instanceof Map)) {\n+                    String err = String.format(\"Field %s, component %s, expecting constraints Map with keys [\\\"%s\\\", \\\"%s\\\"], in \\\"%s\\\"\",\n+                            name, comp1, CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, o);\n+                    throw new IllegalArgumentException(err);\n+                }\n+                Map<String, Object> map2 = (Map<String, Object>)o2;\n+                for (Map.Entry<String, Object> entry2: map2.entrySet()) {\n+                    String constraintType = entry2.getKey();\n+                    Object o3 = entry2.getValue();\n+                    switch (constraintType) {\n+                        case CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT:\n+                            try {\n+                                int intVal = Integer.parseInt(\"\" + o3);", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MDc1MQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387780751", "bodyText": "o3 is not necessarily a String. May come in as an Integer. In any case, casting is not good practice.", "author": "bipinprasad", "createdAt": "2020-03-04T16:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MDU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MDYzOQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387880639", "bodyText": "Thanks", "author": "Ethanlm", "createdAt": "2020-03-04T19:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0MDU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjM0NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387446344", "bodyText": "All the exceptions in the signature can be removed", "author": "Ethanlm", "createdAt": "2020-03-04T04:44:06Z", "path": "storm-client/test/jvm/org/apache/storm/TestConfigValidate.java", "diffHunk": "@@ -541,6 +547,127 @@ public void testMapEntryCustomAnnotation() throws InvocationTargetException, NoS\n         }\n     }\n \n+    @Test\n+    public void testExactlyOneOfCustomAnnotation() throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException,", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MjQzNQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387872435", "bodyText": "All the tests have it. For consistency, they should all be removed or leave them as is?", "author": "bipinprasad", "createdAt": "2020-03-04T19:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MTc0Mg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387881742", "bodyText": "They should be removed since they are not needed.  But we don't have to remove them from other tests in this PR since they are old code and not harmful. They can be done in a separate PR.", "author": "Ethanlm", "createdAt": "2020-03-04T19:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NjEzMA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387966130", "bodyText": "Removed", "author": "bipinprasad", "createdAt": "2020-03-04T22:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NzkzNQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387447935", "bodyText": "(Integer) can be removed", "author": "Ethanlm", "createdAt": "2020-03-04T04:52:06Z", "path": "storm-client/test/jvm/org/apache/storm/TestConfigValidate.java", "diffHunk": "@@ -541,6 +547,127 @@ public void testMapEntryCustomAnnotation() throws InvocationTargetException, NoS\n         }\n     }\n \n+    @Test\n+    public void testExactlyOneOfCustomAnnotation() throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException,\n+            InstantiationException, IllegalAccessException {\n+        TestConfig config = new TestConfig();\n+        Collection<Object> passCases = new LinkedList<Object>();\n+        Collection<Object> failCases = new LinkedList<Object>();\n+\n+        List<Object> passCaseListOfList = new ArrayList<>();\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp2\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp3\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp4\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp5\"));\n+\n+        Map<Object, Object> passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NDIzOQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387874239", "bodyText": "Removed superflous Integer cast", "author": "bipinprasad", "createdAt": "2020-03-04T19:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NzkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0ODEwNQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387448105", "bodyText": "(Integer) can be removed", "author": "Ethanlm", "createdAt": "2020-03-04T04:52:48Z", "path": "storm-client/test/jvm/org/apache/storm/TestConfigValidate.java", "diffHunk": "@@ -541,6 +547,127 @@ public void testMapEntryCustomAnnotation() throws InvocationTargetException, NoS\n         }\n     }\n \n+    @Test\n+    public void testExactlyOneOfCustomAnnotation() throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException,\n+            InstantiationException, IllegalAccessException {\n+        TestConfig config = new TestConfig();\n+        Collection<Object> passCases = new LinkedList<Object>();\n+        Collection<Object> failCases = new LinkedList<Object>();\n+\n+        List<Object> passCaseListOfList = new ArrayList<>();\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp2\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp3\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp4\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp5\"));\n+\n+        Map<Object, Object> passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0ODEyNA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387448124", "bodyText": "(Integer) can be removed", "author": "Ethanlm", "createdAt": "2020-03-04T04:52:52Z", "path": "storm-client/test/jvm/org/apache/storm/TestConfigValidate.java", "diffHunk": "@@ -541,6 +547,127 @@ public void testMapEntryCustomAnnotation() throws InvocationTargetException, NoS\n         }\n     }\n \n+    @Test\n+    public void testExactlyOneOfCustomAnnotation() throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException,\n+            InstantiationException, IllegalAccessException {\n+        TestConfig config = new TestConfig();\n+        Collection<Object> passCases = new LinkedList<Object>();\n+        Collection<Object> failCases = new LinkedList<Object>();\n+\n+        List<Object> passCaseListOfList = new ArrayList<>();\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp2\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp3\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp4\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp5\"));\n+\n+        Map<Object, Object> passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp4\", \"comp5\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0ODE0Ng==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387448146", "bodyText": "(Integer) can be removed", "author": "Ethanlm", "createdAt": "2020-03-04T04:52:57Z", "path": "storm-client/test/jvm/org/apache/storm/TestConfigValidate.java", "diffHunk": "@@ -541,6 +547,127 @@ public void testMapEntryCustomAnnotation() throws InvocationTargetException, NoS\n         }\n     }\n \n+    @Test\n+    public void testExactlyOneOfCustomAnnotation() throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException,\n+            InstantiationException, IllegalAccessException {\n+        TestConfig config = new TestConfig();\n+        Collection<Object> passCases = new LinkedList<Object>();\n+        Collection<Object> failCases = new LinkedList<Object>();\n+\n+        List<Object> passCaseListOfList = new ArrayList<>();\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp2\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp3\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp4\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp5\"));\n+\n+        Map<Object, Object> passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp4\", \"comp5\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp4\", \"comp5\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, \"comp2\"},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0ODE5Nw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387448197", "bodyText": "(Integer) can be removed", "author": "Ethanlm", "createdAt": "2020-03-04T04:53:09Z", "path": "storm-client/test/jvm/org/apache/storm/TestConfigValidate.java", "diffHunk": "@@ -541,6 +547,127 @@ public void testMapEntryCustomAnnotation() throws InvocationTargetException, NoS\n         }\n     }\n \n+    @Test\n+    public void testExactlyOneOfCustomAnnotation() throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException,\n+            InstantiationException, IllegalAccessException {\n+        TestConfig config = new TestConfig();\n+        Collection<Object> passCases = new LinkedList<Object>();\n+        Collection<Object> failCases = new LinkedList<Object>();\n+\n+        List<Object> passCaseListOfList = new ArrayList<>();\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp2\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp3\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp4\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp5\"));\n+\n+        Map<Object, Object> passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp4\", \"comp5\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp4\", \"comp5\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, \"comp2\"},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, \"comp4\"},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        for (Object value : passCases) {\n+            config.put(TestConfig.TEST_MAP_CONFIG_9, value);\n+            ConfigValidation.validateFields(config, Arrays.asList(TestConfig.class));\n+        }\n+\n+        List<Object> failCaseList = new ArrayList<>();\n+        failCaseList.add(Arrays.asList(\"comp1\", Arrays.asList(\"comp2\", \"comp3\")));\n+        failCaseList.add(Arrays.asList(\"comp3\", Arrays.asList(\"comp4\", \"comp5\")));\n+        failCases.add(failCaseList);\n+\n+        Map<String, Object> failCaseMapOfMap = new HashMap<>();\n+        failCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0ODIxNg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387448216", "bodyText": "(Integer) can be removed", "author": "Ethanlm", "createdAt": "2020-03-04T04:53:13Z", "path": "storm-client/test/jvm/org/apache/storm/TestConfigValidate.java", "diffHunk": "@@ -541,6 +547,127 @@ public void testMapEntryCustomAnnotation() throws InvocationTargetException, NoS\n         }\n     }\n \n+    @Test\n+    public void testExactlyOneOfCustomAnnotation() throws InvocationTargetException, NoSuchMethodException, NoSuchFieldException,\n+            InstantiationException, IllegalAccessException {\n+        TestConfig config = new TestConfig();\n+        Collection<Object> passCases = new LinkedList<Object>();\n+        Collection<Object> failCases = new LinkedList<Object>();\n+\n+        List<Object> passCaseListOfList = new ArrayList<>();\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp2\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp1\", \"comp3\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp4\"));\n+        passCaseListOfList.add(Arrays.asList(\"comp2\", \"comp5\"));\n+\n+        Map<Object, Object> passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp4\", \"comp5\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp2\", \"comp3\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(\"comp4\", \"comp5\")},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        passCaseMapOfMap = new HashMap<>();\n+        passCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, \"comp2\"},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, \"comp4\"},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        passCases.add(passCaseMapOfMap);\n+\n+        for (Object value : passCases) {\n+            config.put(TestConfig.TEST_MAP_CONFIG_9, value);\n+            ConfigValidation.validateFields(config, Arrays.asList(TestConfig.class));\n+        }\n+\n+        List<Object> failCaseList = new ArrayList<>();\n+        failCaseList.add(Arrays.asList(\"comp1\", Arrays.asList(\"comp2\", \"comp3\")));\n+        failCaseList.add(Arrays.asList(\"comp3\", Arrays.asList(\"comp4\", \"comp5\")));\n+        failCases.add(failCaseList);\n+\n+        Map<String, Object> failCaseMapOfMap = new HashMap<>();\n+        failCaseMapOfMap.put(\"comp1\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)10 },\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, Arrays.asList(1, 2, 3)},\n+                }).collect(Collectors.toMap(data -> data[0], data -> data[1]))\n+        );\n+        failCaseMapOfMap.put(\"comp2\",\n+                Stream.of(new Object[][] {\n+                        { RasConstraintsTypeValidator.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, (Integer)2 },", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MDQxNA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387450414", "bodyText": "When !comps.contains(comp1), it would better to log some warning.", "author": "Ethanlm", "createdAt": "2020-03-04T05:04:21Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +39,188 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            this(topo.getConf(), topo.getComponents().keySet());\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target\n+            Object rasConstraints = conf.get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n+            comps.forEach(k -> incompatibleComponents.computeIfAbsent(k, x -> new HashSet<>()));\n+            if (rasConstraints instanceof List) {\n+                // old style\n+                List<List<String>> constraints = (List<List<String>>) rasConstraints;\n+                for (List<String> constraintPair : constraints) {\n+                    String comp1 = constraintPair.get(0);\n+                    String comp2 = constraintPair.get(1);\n+                    if (!comps.contains(comp1)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n+                        continue;\n+                    }\n+                    if (!comps.contains(comp2)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n+                        continue;\n+                    }\n+                    if (comp1.equals(comp2)) {\n+                        maxCoLocationCnts.put(comp1, 1);\n+                    } else {\n+                        incompatibleComponents.get(comp1).add(comp2);\n+                        incompatibleComponents.get(comp2).add(comp1);\n+                    }\n                 }\n-                if (!matrix.containsKey(comp2)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n-                    continue;\n+            } else {\n+                Map<String, Map<String,?>> constraintMap = (Map<String, Map<String,?>>) rasConstraints;\n+                constraintMap.forEach((comp1, v) -> {\n+                    if (comps.contains(comp1)) {\n+                        // v is a list of other components and an optional number which is a maxCoLocationCnt\n+                        v.forEach((ctype, constraint) -> {\n+                            switch (ctype) {\n+                                case CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT:\n+                                    try {\n+                                        int numValue = Integer.parseInt(\"\" + constraint);\n+                                        if (numValue < 1) {\n+                                            LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, numValue, comp1);\n+                                        } else {\n+                                            maxCoLocationCnts.put(comp1, numValue);\n+                                        }\n+                                    } catch (Exception ex) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, constraint, comp1);\n+                                    }\n+                                    break;\n+\n+                                case CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS:\n+                                    if (!(constraint instanceof List || constraint instanceof String)) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expecting a list of components or 1 component\",\n+                                                ctype, constraint, comp1);\n+                                        break;\n+                                    }\n+                                    List<String> list;\n+                                    list = (constraint instanceof String) ? Arrays.asList((String)constraint) : (List<String>)constraint;\n+                                    for (String comp2: list) {\n+                                        if (!comps.contains(comp2)) {\n+                                            LOG.warn(\"{} {} declared for Comp {} is not a valid component\", ctype, comp2, comp1);\n+                                            continue;\n+                                        }\n+                                        if (comp1.equals(comp2)) {\n+                                            if (!maxCoLocationCnts.containsKey(comp1)) {\n+                                                maxCoLocationCnts.put(comp1, 1);\n+                                            }\n+                                        } else {\n+                                            incompatibleComponents.get(comp1).add(comp2);\n+                                            incompatibleComponents.get(comp2).add(comp1);\n+                                        }\n+                                    }\n+                                    break;\n+\n+                                default:\n+                                    LOG.warn(\"ConstraintType={} invalid for component={}, valid values are {} and {}, ignoring value={}\",\n+                                            ctype, comp1, CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT,\n+                                            CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, constraint);\n+                                    break;\n+                            }\n+                        });\n+                    }", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3OTI0MQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387879241", "bodyText": "Added warning log.", "author": "bipinprasad", "createdAt": "2020-03-04T19:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MDQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MDYzMw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387450633", "bodyText": "(String) constraint will be better?", "author": "Ethanlm", "createdAt": "2020-03-04T05:05:29Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +39,188 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            this(topo.getConf(), topo.getComponents().keySet());\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target\n+            Object rasConstraints = conf.get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n+            comps.forEach(k -> incompatibleComponents.computeIfAbsent(k, x -> new HashSet<>()));\n+            if (rasConstraints instanceof List) {\n+                // old style\n+                List<List<String>> constraints = (List<List<String>>) rasConstraints;\n+                for (List<String> constraintPair : constraints) {\n+                    String comp1 = constraintPair.get(0);\n+                    String comp2 = constraintPair.get(1);\n+                    if (!comps.contains(comp1)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n+                        continue;\n+                    }\n+                    if (!comps.contains(comp2)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n+                        continue;\n+                    }\n+                    if (comp1.equals(comp2)) {\n+                        maxCoLocationCnts.put(comp1, 1);\n+                    } else {\n+                        incompatibleComponents.get(comp1).add(comp2);\n+                        incompatibleComponents.get(comp2).add(comp1);\n+                    }\n                 }\n-                if (!matrix.containsKey(comp2)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n-                    continue;\n+            } else {\n+                Map<String, Map<String,?>> constraintMap = (Map<String, Map<String,?>>) rasConstraints;\n+                constraintMap.forEach((comp1, v) -> {\n+                    if (comps.contains(comp1)) {\n+                        // v is a list of other components and an optional number which is a maxCoLocationCnt\n+                        v.forEach((ctype, constraint) -> {\n+                            switch (ctype) {\n+                                case CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT:\n+                                    try {\n+                                        int numValue = Integer.parseInt(\"\" + constraint);", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MDAzMg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387880032", "bodyText": "constraint variable here may not be a String, i.e. could be an Integer, depends on how quoted/parsed as a Json string.", "author": "bipinprasad", "createdAt": "2020-03-04T19:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MDYzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDQ3Mg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387884472", "bodyText": "Thanks", "author": "Ethanlm", "createdAt": "2020-03-04T19:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MDYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MTA0MQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387451041", "bodyText": "nit: space between (String) and constraint, (List<String>) and constraint", "author": "Ethanlm", "createdAt": "2020-03-04T05:07:26Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +39,188 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            this(topo.getConf(), topo.getComponents().keySet());\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target\n+            Object rasConstraints = conf.get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n+            comps.forEach(k -> incompatibleComponents.computeIfAbsent(k, x -> new HashSet<>()));\n+            if (rasConstraints instanceof List) {\n+                // old style\n+                List<List<String>> constraints = (List<List<String>>) rasConstraints;\n+                for (List<String> constraintPair : constraints) {\n+                    String comp1 = constraintPair.get(0);\n+                    String comp2 = constraintPair.get(1);\n+                    if (!comps.contains(comp1)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n+                        continue;\n+                    }\n+                    if (!comps.contains(comp2)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n+                        continue;\n+                    }\n+                    if (comp1.equals(comp2)) {\n+                        maxCoLocationCnts.put(comp1, 1);\n+                    } else {\n+                        incompatibleComponents.get(comp1).add(comp2);\n+                        incompatibleComponents.get(comp2).add(comp1);\n+                    }\n                 }\n-                if (!matrix.containsKey(comp2)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n-                    continue;\n+            } else {\n+                Map<String, Map<String,?>> constraintMap = (Map<String, Map<String,?>>) rasConstraints;\n+                constraintMap.forEach((comp1, v) -> {\n+                    if (comps.contains(comp1)) {\n+                        // v is a list of other components and an optional number which is a maxCoLocationCnt\n+                        v.forEach((ctype, constraint) -> {\n+                            switch (ctype) {\n+                                case CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT:\n+                                    try {\n+                                        int numValue = Integer.parseInt(\"\" + constraint);\n+                                        if (numValue < 1) {\n+                                            LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, numValue, comp1);\n+                                        } else {\n+                                            maxCoLocationCnts.put(comp1, numValue);\n+                                        }\n+                                    } catch (Exception ex) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, constraint, comp1);\n+                                    }\n+                                    break;\n+\n+                                case CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS:\n+                                    if (!(constraint instanceof List || constraint instanceof String)) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expecting a list of components or 1 component\",\n+                                                ctype, constraint, comp1);\n+                                        break;\n+                                    }\n+                                    List<String> list;\n+                                    list = (constraint instanceof String) ? Arrays.asList((String)constraint) : (List<String>)constraint;", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MTgyOA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387881828", "bodyText": "Standard style is not to have a space between cast and variable. Is this not correct?\nChanged.", "author": "bipinprasad", "createdAt": "2020-03-04T19:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MTA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTg0MQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387885841", "bodyText": "Standard style is to have a space\nhttps://www.oracle.com/technetwork/java/codeconventions-150003.pdf (search Casts)", "author": "Ethanlm", "createdAt": "2020-03-04T19:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MjQ3NQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387452475", "bodyText": "Consider this case:\n{\"comp-1\", {\"incompatibleComponents\", \"comp-1\"}, {\"maxNodeCoLocationCnt\" , 2}} \nThis means we can have at most 2 comp-1 on the same node, but no more than 1 comp-1 on the same worker.\nThe code here mixes worker-level and node-level constraints and the worker-level constraint will be ignored", "author": "Ethanlm", "createdAt": "2020-03-04T05:14:26Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +39,188 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            this(topo.getConf(), topo.getComponents().keySet());\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target\n+            Object rasConstraints = conf.get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n+            comps.forEach(k -> incompatibleComponents.computeIfAbsent(k, x -> new HashSet<>()));\n+            if (rasConstraints instanceof List) {\n+                // old style\n+                List<List<String>> constraints = (List<List<String>>) rasConstraints;\n+                for (List<String> constraintPair : constraints) {\n+                    String comp1 = constraintPair.get(0);\n+                    String comp2 = constraintPair.get(1);\n+                    if (!comps.contains(comp1)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n+                        continue;\n+                    }\n+                    if (!comps.contains(comp2)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n+                        continue;\n+                    }\n+                    if (comp1.equals(comp2)) {\n+                        maxCoLocationCnts.put(comp1, 1);\n+                    } else {\n+                        incompatibleComponents.get(comp1).add(comp2);\n+                        incompatibleComponents.get(comp2).add(comp1);\n+                    }\n                 }\n-                if (!matrix.containsKey(comp2)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n-                    continue;\n+            } else {\n+                Map<String, Map<String,?>> constraintMap = (Map<String, Map<String,?>>) rasConstraints;\n+                constraintMap.forEach((comp1, v) -> {\n+                    if (comps.contains(comp1)) {\n+                        // v is a list of other components and an optional number which is a maxCoLocationCnt\n+                        v.forEach((ctype, constraint) -> {\n+                            switch (ctype) {\n+                                case CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT:\n+                                    try {\n+                                        int numValue = Integer.parseInt(\"\" + constraint);\n+                                        if (numValue < 1) {\n+                                            LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, numValue, comp1);\n+                                        } else {\n+                                            maxCoLocationCnts.put(comp1, numValue);\n+                                        }\n+                                    } catch (Exception ex) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, constraint, comp1);\n+                                    }\n+                                    break;\n+\n+                                case CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS:\n+                                    if (!(constraint instanceof List || constraint instanceof String)) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expecting a list of components or 1 component\",\n+                                                ctype, constraint, comp1);\n+                                        break;\n+                                    }\n+                                    List<String> list;\n+                                    list = (constraint instanceof String) ? Arrays.asList((String)constraint) : (List<String>)constraint;\n+                                    for (String comp2: list) {\n+                                        if (!comps.contains(comp2)) {\n+                                            LOG.warn(\"{} {} declared for Comp {} is not a valid component\", ctype, comp2, comp1);\n+                                            continue;\n+                                        }\n+                                        if (comp1.equals(comp2)) {\n+                                            if (!maxCoLocationCnts.containsKey(comp1)) {", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NjM3NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387886374", "bodyText": "Fixed.", "author": "bipinprasad", "createdAt": "2020-03-04T19:31:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MjQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MzY0OA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387453648", "bodyText": "This means we want TOPOLOGY_SPREAD_COMPONENTS to override the maxCoLocationCnts from TOPOLOGY_RAS_CONSTRAINTS. But it's not very obvious to users unless we have enough comments/docs to explain this.\nBut having two configs doing similar work is always confusing.\nI would suggest\n\ndeprecate this config\nfor backwards compatibility, when this config is provided by the topology, only use it when maxCoLocationCnts for the components is not defined in TOPOLOGY_RAS_CONSTRAINTS", "author": "Ethanlm", "createdAt": "2020-03-04T05:19:53Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +39,188 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            this(topo.getConf(), topo.getComponents().keySet());\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target\n+            Object rasConstraints = conf.get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n+            comps.forEach(k -> incompatibleComponents.computeIfAbsent(k, x -> new HashSet<>()));\n+            if (rasConstraints instanceof List) {\n+                // old style\n+                List<List<String>> constraints = (List<List<String>>) rasConstraints;\n+                for (List<String> constraintPair : constraints) {\n+                    String comp1 = constraintPair.get(0);\n+                    String comp2 = constraintPair.get(1);\n+                    if (!comps.contains(comp1)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n+                        continue;\n+                    }\n+                    if (!comps.contains(comp2)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n+                        continue;\n+                    }\n+                    if (comp1.equals(comp2)) {\n+                        maxCoLocationCnts.put(comp1, 1);\n+                    } else {\n+                        incompatibleComponents.get(comp1).add(comp2);\n+                        incompatibleComponents.get(comp2).add(comp1);\n+                    }\n                 }\n-                if (!matrix.containsKey(comp2)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n-                    continue;\n+            } else {\n+                Map<String, Map<String,?>> constraintMap = (Map<String, Map<String,?>>) rasConstraints;\n+                constraintMap.forEach((comp1, v) -> {\n+                    if (comps.contains(comp1)) {\n+                        // v is a list of other components and an optional number which is a maxCoLocationCnt\n+                        v.forEach((ctype, constraint) -> {\n+                            switch (ctype) {\n+                                case CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT:\n+                                    try {\n+                                        int numValue = Integer.parseInt(\"\" + constraint);\n+                                        if (numValue < 1) {\n+                                            LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, numValue, comp1);\n+                                        } else {\n+                                            maxCoLocationCnts.put(comp1, numValue);\n+                                        }\n+                                    } catch (Exception ex) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expected >= 1\", ctype, constraint, comp1);\n+                                    }\n+                                    break;\n+\n+                                case CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS:\n+                                    if (!(constraint instanceof List || constraint instanceof String)) {\n+                                        LOG.warn(\"{} {} declared for Comp {} is not valid, expecting a list of components or 1 component\",\n+                                                ctype, constraint, comp1);\n+                                        break;\n+                                    }\n+                                    List<String> list;\n+                                    list = (constraint instanceof String) ? Arrays.asList((String)constraint) : (List<String>)constraint;\n+                                    for (String comp2: list) {\n+                                        if (!comps.contains(comp2)) {\n+                                            LOG.warn(\"{} {} declared for Comp {} is not a valid component\", ctype, comp2, comp1);\n+                                            continue;\n+                                        }\n+                                        if (comp1.equals(comp2)) {\n+                                            if (!maxCoLocationCnts.containsKey(comp1)) {\n+                                                maxCoLocationCnts.put(comp1, 1);\n+                                            }\n+                                        } else {\n+                                            incompatibleComponents.get(comp1).add(comp2);\n+                                            incompatibleComponents.get(comp2).add(comp1);\n+                                        }\n+                                    }\n+                                    break;\n+\n+                                default:\n+                                    LOG.warn(\"ConstraintType={} invalid for component={}, valid values are {} and {}, ignoring value={}\",\n+                                            ctype, comp1, CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT,\n+                                            CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, constraint);\n+                                    break;\n+                            }\n+                        });\n+                    }\n+                });\n+            }\n+\n+            // process Config.TOPOLOGY_SPREAD_COMPONENTS - old style\n+            Object obj = conf.get(Config.TOPOLOGY_SPREAD_COMPONENTS);", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NTg1NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387895854", "bodyText": "Changed code to use only if maxNodeCoLocationCnt is not already defined in TOPOLOGY_RAS_CONSTRAINTS., warn otherwise.", "author": "bipinprasad", "createdAt": "2020-03-04T19:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MzY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxODQ2Mw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388018463", "bodyText": "TOPOLOGY_SPREAD_COMPONENTS marked as @deprecated.", "author": "bipinprasad", "createdAt": "2020-03-05T00:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MzY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NDMyNA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387454324", "bodyText": "We might need more detailed explanations on what this config does.", "author": "Ethanlm", "createdAt": "2020-03-04T05:22:56Z", "path": "storm-client/src/jvm/org/apache/storm/Config.java", "diffHunk": "@@ -304,11 +307,13 @@\n     // an error will be thrown by nimbus on topology submission and not by the client prior to submitting\n     // the topology.\n     public static final String TOPOLOGY_SCHEDULER_STRATEGY = \"topology.scheduler.strategy\";\n+\n     /**\n-     * Declare scheduling constraints for a topology used by the constraint solver strategy. A List of pairs (also a list) of components\n-     * that cannot coexist in the same worker.\n+     * Declare scheduling constraints for a topology used by the constraint solver strategy. The format can be either", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjY3OA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387902678", "bodyText": "Added comments on the config format.", "author": "bipinprasad", "createdAt": "2020-03-04T20:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NDMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NTQ5MA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387455490", "bodyText": "constraintConfig doesn't seem necessary here", "author": "Ethanlm", "createdAt": "2020-03-04T05:28:32Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -134,48 +252,51 @@ private static boolean checkConstraintsSatisfied(Cluster cluster, TopologyDetail\n         return workerToNodes;\n     }\n \n-    private static boolean checkSpreadSchedulingValid(Cluster cluster, TopologyDetails topo) {\n+    private static boolean checkSpreadSchedulingValid(Cluster cluster, TopologyDetails topo, ConstraintConfig constraintConfig) {\n         LOG.info(\"Checking for a valid scheduling...\");\n         assert (cluster.getAssignmentById(topo.getId()) != null);\n-        Map<ExecutorDetails, WorkerSlot> result = cluster.getAssignmentById(topo.getId()).getExecutorToSlot();\n+        if (constraintConfig == null) {\n+            constraintConfig = new ConstraintConfig(topo);\n+        }\n         Map<ExecutorDetails, String> execToComp = topo.getExecutorToComponent();\n-        Map<WorkerSlot, HashSet<ExecutorDetails>> workerExecMap = new HashMap<>();\n-        Map<WorkerSlot, HashSet<String>> workerCompMap = new HashMap<>();\n-        Map<RasNode, HashSet<String>> nodeCompMap = new HashMap<>();\n+        Map<String, Map<String, Integer>> nodeCompMap = new HashMap<>(); // this is the critical count\n         Map<WorkerSlot, RasNode> workerToNodes = workerToNodes(cluster);\n         boolean ret = true;\n \n-        HashSet<String> spreadComps = getSpreadComps(topo);\n-        for (Map.Entry<ExecutorDetails, WorkerSlot> entry : result.entrySet()) {\n+        Map<String, Integer> spreadCompCnts = constraintConfig.maxCoLocationCnts;\n+        for (Map.Entry<ExecutorDetails, WorkerSlot> entry : cluster.getAssignmentById(topo.getId()).getExecutorToSlot().entrySet()) {\n             ExecutorDetails exec = entry.getKey();\n+            String comp = execToComp.get(exec);\n             WorkerSlot worker = entry.getValue();\n             RasNode node = workerToNodes.get(worker);\n-\n-            if (workerExecMap.computeIfAbsent(worker, (k) -> new HashSet<>()).contains(exec)) {\n-                LOG.error(\"Incorrect Scheduling: Found duplicate in scheduling\");\n-                return false;\n-            }\n-            workerExecMap.get(worker).add(exec);\n-            String comp = execToComp.get(exec);\n-            workerCompMap.computeIfAbsent(worker, (k) -> new HashSet<>()).add(comp);\n-            if (spreadComps.contains(comp)) {\n-                if (nodeCompMap.computeIfAbsent(node, (k) -> new HashSet<>()).contains(comp)) {\n-                    LOG.error(\"Incorrect Scheduling: Spread for Component: {} {} on node {} not satisfied {}\",\n-                              comp, exec, node.getId(), nodeCompMap.get(node));\n+            String nodeId = node.getId();\n+\n+            if (spreadCompCnts.containsKey(comp)) {\n+                int allowedColocationMaxCnt = spreadCompCnts.get(comp);\n+                Map<String, Integer> oneNodeCompMap = nodeCompMap.computeIfAbsent(nodeId, (k) -> new HashMap<>());\n+                oneNodeCompMap.put(comp, oneNodeCompMap.getOrDefault(comp, 0) + 1);\n+                if (allowedColocationMaxCnt < oneNodeCompMap.get(comp)) {\n+                    LOG.error(\"Incorrect Scheduling: MaxCoLocationCnt for Component: {} {} on node {} not satisfied, cnt {} > allowed {}\",\n+                            comp, exec, nodeId, oneNodeCompMap.get(comp), allowedColocationMaxCnt);\n                     ret = false;\n                 }\n             }\n-            nodeCompMap.computeIfAbsent(node, (k) -> new HashSet<>()).add(comp);\n+        }\n+        if (!ret) {\n+            LOG.error(\"Incorrect MaxCoLocationCnts: Node-Component-Cnt {}\", nodeCompMap);\n         }\n         return ret;\n     }\n \n     /**\n      * Check if resource constraints satisfied.\n      */\n-    private static boolean checkResourcesCorrect(Cluster cluster, TopologyDetails topo) {\n+    private static boolean checkResourcesCorrect(Cluster cluster, TopologyDetails topo, ConstraintConfig constraintConfig) {", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNDgwMg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387904802", "bodyText": "removed unused param", "author": "bipinprasad", "createdAt": "2020-03-04T20:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NTQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MTQyMg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387461422", "bodyText": "This constraintMatrix includes system components, like Acker because it gets components from execToComp\nBut topo.getComponents().keySet() in new ConstraintConfig(td); only includes non-system components.\nI have to say the storm code is confusing. But just want to point out the different between these two that will cause some behavior changes because of the code change here", "author": "Ethanlm", "createdAt": "2020-03-04T05:54:13Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -262,28 +367,27 @@ public SchedulingResult schedule(Cluster cluster, TopologyDetails td) {\n         //get mapping of components to executors\n         compToExecs = getCompToExecs(execToComp);\n \n-        //get topology constraints\n-        constraintMatrix = getConstraintMap(td, compToExecs.keySet());", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNzIyMA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387927220", "bodyText": "Fixed - added system components so they can also be specified in constraints.", "author": "bipinprasad", "createdAt": "2020-03-04T20:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDU2OQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387464569", "bodyText": "Maybe we should change >= to >?\nHere coLocationMaxCnt is exclusive.  And coLocationMaxCnt=1 would mean 0 of this component can co-exist on the same node, which doesn't seem right to me", "author": "Ethanlm", "createdAt": "2020-03-04T06:06:36Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -420,21 +528,24 @@ public boolean isExecAssignmentToWorkerValid(WorkerSlot worker, SearcherState st\n \n         //check if exec can be on worker based on user defined component exclusions\n         String execComp = execToComp.get(exec);\n-        Set<String> components = state.workerCompAssignment.get(worker);\n-        if (components != null) {\n-            Map<String, Integer> subMatrix = constraintMatrix.get(execComp);\n-            for (String comp : components) {\n-                if (subMatrix.get(comp) != 0) {\n+        Map<String, Integer> compAssignmentCnts = state.workerCompAssignmentCnts.get(worker);\n+        if (compAssignmentCnts != null && constraintConfig.incompatibleComponents.containsKey(execComp)) {\n+            Set<String> subMatrix = constraintConfig.incompatibleComponents.get(execComp);\n+            for (String comp : compAssignmentCnts.keySet()) {\n+                if (subMatrix.contains(comp)) {\n                     LOG.trace(\"{} found {} constraint violation {} on {}\", exec, execComp, comp, worker);\n                     return false;\n                 }\n             }\n         }\n \n         //check if exec satisfy spread\n-        if (spreadComps.contains(execComp)) {\n-            if (state.nodeCompAssignment.computeIfAbsent(node, (k) -> new HashSet<>()).contains(execComp)) {\n-                LOG.trace(\"{} Found spread violation {} on node {}\", exec, execComp, node.getId());\n+        if (constraintConfig.maxCoLocationCnts.containsKey(execComp)) {\n+            int coLocationMaxCnt = constraintConfig.maxCoLocationCnts.get(execComp);\n+            if (state.nodeCompAssignmentCnts.containsKey(node)\n+                    && state.nodeCompAssignmentCnts.get(node).getOrDefault(execComp, 0) >= coLocationMaxCnt) {", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMDE1Nw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387930157", "bodyText": "This check is before assignment.", "author": "bipinprasad", "createdAt": "2020-03-04T20:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwOTAxNw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388509017", "bodyText": "You are right. Thanks", "author": "Ethanlm", "createdAt": "2020-03-05T19:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2ODg2NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387468864", "bodyText": "Is this fixing some kind of bug?", "author": "Ethanlm", "createdAt": "2020-03-04T06:23:00Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -593,13 +710,26 @@ public ExecutorDetails currentExec() {\n             return execs.get(execIndex);\n         }\n \n+        /**\n+          * Assign executor to worker and node.\n+          * TODO: tryToSchedule is a misnomer, since it always schedules.\n+          * Assignment validity check is done before the call to tryToSchedule().\n+          *\n+          * @param execToComp Mapping from executor to component name.\n+          * @param node RasNode on which to schedule.\n+          * @param workerSlot WorkerSlot on which to schedule.\n+          */\n         public void tryToSchedule(Map<ExecutorDetails, String> execToComp, RasNode node, WorkerSlot workerSlot) {\n             ExecutorDetails exec = currentExec();\n             String comp = execToComp.get(exec);\n             LOG.trace(\"Trying assignment of {} {} to {}\", exec, comp, workerSlot);\n-            //It is possible that this component is already scheduled on this node or worker.  If so when we backtrack we cannot remove it\n-            okToRemoveFromWorker[execIndex] = workerCompAssignment.computeIfAbsent(workerSlot, (k) -> new HashSet<>()).add(comp);\n-            okToRemoveFromNode[execIndex] = nodeCompAssignment.computeIfAbsent(node, (k) -> new HashSet<>()).add(comp);\n+            // It is possible that this component is already scheduled on this node or worker.  If so when we backtrack we cannot remove it\n+            Map<String, Integer> oneMap = workerCompAssignmentCnts.computeIfAbsent(workerSlot, (k) -> new HashMap<>());\n+            oneMap.put(comp, oneMap.getOrDefault(comp, 0) + 1); // increment assignment count\n+            okToRemoveFromWorker[execIndex] = true;", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MDMzOA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387940338", "bodyText": "Yes", "author": "bipinprasad", "createdAt": "2020-03-04T21:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2ODg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNTYzOQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388505639", "bodyText": "Originally, okToRemoveFromWorker is an indicator that whether the component should be removed from workerCompAssignment and nodeCompAssignment during backtracking since originally they are both <Map, Set>.  I don't see a bug here. It's more like an optimization.\nSince now we change workerCompAssignment and nodeCompAssignment to <Map, Map>,  okToRemoveFromWorker is actually not needed any more.\nOr if we leave workerCompAssignment as <Map, Set>, then we need to keep okToRemoveFromWorker.", "author": "Ethanlm", "createdAt": "2020-03-05T19:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2ODg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc2ODM1MA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389768350", "bodyText": "It was a bug - as it should be always removed upon backtracking if assigned - counting is just safety check to make sure it does not go below zero.", "author": "bipinprasad", "createdAt": "2020-03-09T15:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2ODg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyMTIxNw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389921217", "bodyText": "Let me explain my understanding of the original code and please let me know what I am missing.\nLet's say we are trying to assign exec1 (whose component is comp1) to node1. And let's discuss only nodeCompAssignment for simplicity.\nFirst of all, we have isExecAssignmentToWorkerValid check before tryToSchedule, so there won't be any cases where comp1 is already in on node1 in nodeCompAssignment map, so okToRemoveFromNoder[exec1] is true. When we backtrack, we find it true and set it false. It looks okToRemoveFromNoder is not needed at all.\nSecondly, if we don't check isExecAssignmentToWorkerValid before tryToSchedule, let's say we already have exec0 (whose component is comp1) scheduled on node1 and now we want to schedule exec1.\nNow we will have okToRemoveFromNoder[exec1]=false since comp1 is already in nodeCompAssignment map. And when we backtrack, since okToRemoveFromNoder[exec1]=false, we will not remove comp1 from nodeCompAssignment map since there is a exec0 (also a comp1) scheduled on this node1. This is also a correct behavior.\nSo I don't see a bug in the original code. Please elaborate the bug you observed (asking this just for my knowledge). Thanks.\n\nIf we change workerCompAssignment and nodeCompAssignment from <Map, Set> to <Map, Map> (as in this PR),  I believe okToRemoveFromWorker and okToRemoveFromNode are not needed anymore.\nAnother solution is to change okToRemoveFromNode from boolean[] to int[] to keep track how many of the same component is on this node so far.\nI can't say which solution is better. I believe okToRemoveFromNode was introduced for performance but I don't know how much the performance gain is.", "author": "Ethanlm", "createdAt": "2020-03-09T19:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2ODg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Njc3NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389956774", "bodyText": "Current (and prior) code always checks before assignment. So let's consider that case only for simplicity - that the executor can be assigned to the selected worker and node.\nIf the executor is scheduled in tryToSchedule() then the okToRemoveFromNode flag should be flipped to true, so that when backtracking, the component (or component count) is properly decremented).\nEarlier code would not not remove a component once added (because the flag would only be flipped to true once and any subsequent  assignment backtracking would not remove the component - leading to inconsistent understanding of the current component distribution (and constraint evaluation). So the error will manifest when backtracking.\nLet's say exec1 and exec2 are both assigning the same component to the same worker/node and backtracking happens for exec2 assignment. is exec2 component is not properly decremented out of node1.\nThe assignment (nodeCompAssignment) is a shared variable across executors. So there is no indicator which executor assigned. This flag is only retained in the okToRemove.\nHope this makes sense - unless I am confused!", "author": "bipinprasad", "createdAt": "2020-03-09T20:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2ODg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIzNDkzNw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r391234937", "bodyText": "As we discussed offline, the previous code doesn't have a bug.\nokToRemoveFromWorker and okToRemoveFromNode are kept here just for safety and can be removed.", "author": "Ethanlm", "createdAt": "2020-03-11T20:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2ODg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2OTIyNQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387469225", "bodyText": "new TreeSet<RasNode> can be new TreeSet<>", "author": "Ethanlm", "createdAt": "2020-03-04T06:24:24Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -613,14 +743,51 @@ public void backtrack(Map<ExecutorDetails, String> execToComp, RasNode node, Wor\n             String comp = execToComp.get(exec);\n             LOG.trace(\"Backtracking {} {} from {}\", exec, comp, workerSlot);\n             if (okToRemoveFromWorker[execIndex]) {\n-                workerCompAssignment.get(workerSlot).remove(comp);\n+                Map<String, Integer> oneMap = workerCompAssignmentCnts.get(workerSlot);\n+                oneMap.put(comp, oneMap.getOrDefault(comp, 0) - 1); // decrement assignment count\n                 okToRemoveFromWorker[execIndex] = false;\n             }\n             if (okToRemoveFromNode[execIndex]) {\n-                nodeCompAssignment.get(node).remove(comp);\n+                Map<String, Integer> oneMap = nodeCompAssignmentCnts.get(node);\n+                oneMap.put(comp, oneMap.getOrDefault(comp, 0) - 1); // decrement assignment count\n                 okToRemoveFromNode[execIndex] = false;\n             }\n             node.freeSingleExecutor(exec, td);\n         }\n+\n+        /**\n+         * Use this method to log the current component assignments on the Node.\n+         * Useful for debugging and tests.\n+         */\n+        public void logNodeCompAssignments() {\n+            if (nodeCompAssignmentCnts == null || nodeCompAssignmentCnts.isEmpty()) {\n+                LOG.info(\"NodeCompAssignment is empty\");\n+                return;\n+            }\n+            StringBuffer sb = new StringBuffer();\n+            int cntAllNodes = 0;\n+            int cntFilledNodes = 0;\n+            for (RasNode node: new TreeSet<RasNode>(nodeCompAssignmentCnts.keySet())) {", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzODUwMQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387938501", "bodyText": "fixed", "author": "bipinprasad", "createdAt": "2020-03-04T21:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2OTIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NzExNA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387757114", "bodyText": "Some examples of old style and new style configurations might help.", "author": "kishorvpatil", "createdAt": "2020-03-04T15:50:38Z", "path": "storm-client/src/jvm/org/apache/storm/Config.java", "diffHunk": "@@ -304,11 +307,13 @@\n     // an error will be thrown by nimbus on topology submission and not by the client prior to submitting\n     // the topology.\n     public static final String TOPOLOGY_SCHEDULER_STRATEGY = \"topology.scheduler.strategy\";\n+\n     /**\n-     * Declare scheduling constraints for a topology used by the constraint solver strategy. A List of pairs (also a list) of components\n-     * that cannot coexist in the same worker.\n+     * Declare scheduling constraints for a topology used by the constraint solver strategy. The format can be either\n+     * old style (validated by ListOfListOfStringValidator.class or the newer style, which is a list of specific type of\n+     * Maps (validated by RasConstraintsTypeValidator.class). The value must be in one or the other format.", "originalCommit": "47877020c4e6f9e2ee0eec87937d847860def2a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzODc0NQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387938745", "bodyText": "Added", "author": "bipinprasad", "createdAt": "2020-03-04T21:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NzExNA=="}], "type": "inlineReview"}, {"oid": "ef31a403689cf32ed6c6686e94c9c401b2a190f0", "url": "https://github.com/apache/storm/commit/ef31a403689cf32ed6c6686e94c9c401b2a190f0", "message": "[STORM-3585] Fix message text \"must a instance\" to \"must be an instance\".", "committedDate": "2020-03-04T15:58:19Z", "type": "commit"}, {"oid": "56ae8e14dffc497972f80fc644c83a53747d32ac", "url": "https://github.com/apache/storm/commit/56ae8e14dffc497972f80fc644c83a53747d32ac", "message": "[STORM-3585] Remove superflous Integer cast.", "committedDate": "2020-03-04T19:07:53Z", "type": "commit"}, {"oid": "29ed1c452442bf4122f93b0795ab228ec2c0fb28", "url": "https://github.com/apache/storm/commit/29ed1c452442bf4122f93b0795ab228ec2c0fb28", "message": "[STORM-3585] Fix code for worker level constraints. Ignore TOPOLOGY_SPREAD_COMPONENT config when it conflicts\n   with TOPOLOGY_RAS_CONSTRAINTS maxNodeCoLocationCnt. Formating and warning log changes.", "committedDate": "2020-03-04T19:49:58Z", "type": "commit"}, {"oid": "ec04542a6229210d9bebcfd43e3a8854a342a7a6", "url": "https://github.com/apache/storm/commit/ec04542a6229210d9bebcfd43e3a8854a342a7a6", "message": "[STORM-3585] Added comment section describing TOPOLOGY_RAS_CONSTRAINTS and TOPOLOGY_SPREAD_COMPONENTS.", "committedDate": "2020-03-04T20:00:53Z", "type": "commit"}, {"oid": "5081d7a2e963c8a2908422ed54ea651743383696", "url": "https://github.com/apache/storm/commit/5081d7a2e963c8a2908422ed54ea651743383696", "message": "[STORM-3585] Removed unused parameter in checkResourcesCorrect()", "committedDate": "2020-03-04T20:05:24Z", "type": "commit"}, {"oid": "71c0d9495205a54c9a0c12a230720f2bb8ef2303", "url": "https://github.com/apache/storm/commit/71c0d9495205a54c9a0c12a230720f2bb8ef2303", "message": "[STORM-3585] Fix to allow System components in constraints.", "committedDate": "2020-03-04T20:53:19Z", "type": "commit"}, {"oid": "848dd7315287bdb827849a8595c5a29931842806", "url": "https://github.com/apache/storm/commit/848dd7315287bdb827849a8595c5a29931842806", "message": "[STORM-3585] Remove superfluous type indicator; fix log line.", "committedDate": "2020-03-04T21:28:27Z", "type": "commit"}, {"oid": "68b235902719d856cf9f1ce929e445f8bdf1e633", "url": "https://github.com/apache/storm/commit/68b235902719d856cf9f1ce929e445f8bdf1e633", "message": "[STORM-3585] Insert <p> tags to Fix multi-paragraph java doc.", "committedDate": "2020-03-04T21:35:58Z", "type": "commit"}, {"oid": "8a72b2f8f0027e39080fa8d4fa41bcf9082df988", "url": "https://github.com/apache/storm/commit/8a72b2f8f0027e39080fa8d4fa41bcf9082df988", "message": "[STORM-3585] Remove exception from testExactlyOneOfCustomAnnotation()", "committedDate": "2020-03-04T22:13:11Z", "type": "commit"}, {"oid": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "url": "https://github.com/apache/storm/commit/a5ee93f209a5c2af0209085ce4420cd1ed717be5", "message": "[STORM-3585] Deprecate TOPOLOGY_SPREAD_COMPONENTS. Allow null as in validate() for CustomIsExactlyOneOfValidators and RasConstraintsTypeValidator.", "committedDate": "2020-03-04T23:39:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2ODAzMQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r387968031", "bodyText": "typo: \"node\" -> \"worker\"", "author": "Ethanlm", "createdAt": "2020-03-04T22:16:51Z", "path": "storm-client/src/jvm/org/apache/storm/Config.java", "diffHunk": "@@ -304,15 +307,38 @@\n     // an error will be thrown by nimbus on topology submission and not by the client prior to submitting\n     // the topology.\n     public static final String TOPOLOGY_SCHEDULER_STRATEGY = \"topology.scheduler.strategy\";\n+\n     /**\n-     * Declare scheduling constraints for a topology used by the constraint solver strategy. A List of pairs (also a list) of components\n-     * that cannot coexist in the same worker.\n+     * Declare scheduling constraints for a topology used by the constraint solver strategy. The format can be either\n+     * old style (validated by ListOfListOfStringValidator.class or the newer style, which is a list of specific type of\n+     * Maps (validated by RasConstraintsTypeValidator.class). The value must be in one or the other format.\n+     *\n+     * <p>\n+     * Old style Config.TOPOLOGY_RAS_CONSTRAINTS (ListOfListOfString) specified a list of components that cannot\n+     * co-exist on the same Worker.\n+     * </p>\n+     *\n+     * <p>\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * (which serves the same function as the old style configuration) and optional number that specifies\n+     * the maximum co-location count for the component on a node.\n+     * </p>\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>", "originalCommit": "68b235902719d856cf9f1ce929e445f8bdf1e633", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NDc4NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389644784", "bodyText": "fixed", "author": "bipinprasad", "createdAt": "2020-03-09T13:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2ODAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NzY2MQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388447661", "bodyText": "Line 911-916 doesn't seem necessary?  Or at least it should be private", "author": "Ethanlm", "createdAt": "2020-03-05T17:28:53Z", "path": "storm-client/src/jvm/org/apache/storm/validation/ConfigValidation.java", "diffHunk": "@@ -850,6 +852,128 @@ public void validateField(String name, Object o) {\n         }\n     }\n \n+    public static class CustomIsExactlyOneOfValidators extends Validator {\n+        private Class<?>[] subValidators;\n+        private List<String> validatorClassNames;\n+\n+        public CustomIsExactlyOneOfValidators(Map<String, Object> params) {\n+            this.subValidators = (Class<?>[]) params.get(ConfigValidationAnnotations.ValidatorParams.VALUE_VALIDATOR_CLASSES);\n+            this.validatorClassNames = Arrays.asList(subValidators).stream().map(x -> x.getName()).collect(Collectors.toList());\n+        }\n+\n+        @Override\n+        public void validateField(String name, Object o) {\n+            if (o == null) {\n+                return;\n+            }\n+\n+            HashMap<String, Exception> validatorExceptions = new HashMap<>();\n+            Set<String> selectedValidators = new HashSet<>();\n+            for (Class<?> vv : subValidators) {\n+                Object valueValidator;\n+                try {\n+                    valueValidator = vv.getConstructor().newInstance();\n+                } catch (Exception ex) {\n+                    throw new IllegalArgumentException(vv.getName() + \" instantiation failure\", ex);\n+                }\n+                if (valueValidator instanceof Validator) {\n+                    try {\n+                        ((Validator) valueValidator).validateField(name + \" \" + vv.getSimpleName() + \" value\", o);\n+                        selectedValidators.add(vv.getName());\n+                    } catch (Exception ex) {\n+                        // only one will pass, so ignore all validation errors - stored for future use\n+                        validatorExceptions.put(vv.getName(), ex);\n+                    }\n+                } else {\n+                    String err = String.format(\"validator: %s cannot be used in CustomExactlyOneOfValidators to validate values. \"\n+                            + \"Individual entry validators must a instance of Validator class\", vv.getName());\n+                    LOG.warn(err);\n+                }\n+            }\n+            // check if one and only one validation succeeded\n+            if (selectedValidators.isEmpty()) {\n+                String parseErrs = String.join(\";\\n\\t\", validatorExceptions.entrySet().stream()\n+                        .map(e -> String.format(\"%s:%s\", e.getKey(), e.getValue())).collect(Collectors.toList()));\n+                String err = String.format(\"Field %s must be one of %s; parse errors are \\n\\t%s\", name,\n+                        String.join(\", \", validatorClassNames), parseErrs);\n+                throw new IllegalArgumentException(err);\n+            }\n+            if (selectedValidators.size() > 1) {\n+                throw new IllegalArgumentException(\"Field \" + name + \" must match exactly one of \" + String.join(\", \", selectedValidators));\n+            }\n+        }\n+    }\n+\n+    public static class RasConstraintsTypeValidator extends Validator {\n+        public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+        public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n+\n+        public static class RasConstraint {\n+            int maxNodeCoLocationCnt = -1;\n+            Set<String> incompatibleComponents = new HashSet<>();\n+        }\n+\n+        public Map<String, RasConstraint> rasConstraints = new HashMap<>(); // parsedConstraints", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1ODkzNg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389758936", "bodyText": "Originally I thought this could be used in testing and parsing. But due to package structure it cant. Removed this class. Check for validity only (also added test for the String in list check.", "author": "bipinprasad", "createdAt": "2020-03-09T15:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NzY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MDg5OQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388450899", "bodyText": "typo: node -> worker", "author": "Ethanlm", "createdAt": "2020-03-05T17:34:47Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +42,182 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4OTQ4Mg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389789482", "bodyText": "Fixed", "author": "bipinprasad", "createdAt": "2020-03-09T16:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MDg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTQ1OA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388451458", "bodyText": "Sets.union doesn't seem necessary since the former is a subset of the latter", "author": "Ethanlm", "createdAt": "2020-03-05T17:35:46Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +42,182 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            // getExecutorToComponent().values() also contains system components\n+            this(topo.getConf(), Sets.union(topo.getComponents().keySet(), new HashSet(topo.getExecutorToComponent().values())));", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MzcwMQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389793701", "bodyText": "There is no guarantee in TopologyDetails.class that latter is necessarily a superset. Such assumption should not be made in ConstraintConfig - even if true in most instances.", "author": "bipinprasad", "createdAt": "2020-03-09T16:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NDAwNg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388454006", "bodyText": "incompatibleComponents means the component cannot co-exist on the same worker. It does not necessary mean that there can only be at most one of this component on the same node.\nHere we don't need to (or shouldn't) differentiate whether comp1.equals(comp2) or not and we can deal with it just like others.", "author": "Ethanlm", "createdAt": "2020-03-05T17:40:01Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +42,182 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            // getExecutorToComponent().values() also contains system components\n+            this(topo.getConf(), Sets.union(topo.getComponents().keySet(), new HashSet(topo.getExecutorToComponent().values())));\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target\n+            Object rasConstraints = conf.get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n+            comps.forEach(k -> incompatibleComponents.computeIfAbsent(k, x -> new HashSet<>()));\n+            if (rasConstraints instanceof List) {\n+                // old style\n+                List<List<String>> constraints = (List<List<String>>) rasConstraints;\n+                for (List<String> constraintPair : constraints) {\n+                    String comp1 = constraintPair.get(0);\n+                    String comp2 = constraintPair.get(1);\n+                    if (!comps.contains(comp1)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n+                        continue;\n+                    }\n+                    if (!comps.contains(comp2)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n+                        continue;\n+                    }\n+                    if (comp1.equals(comp2)) {\n+                        maxCoLocationCnts.put(comp1, 1);", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5NTk5NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389795994", "bodyText": "Fixed.", "author": "bipinprasad", "createdAt": "2020-03-09T16:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NDAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NjQ0OA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388456448", "bodyText": "The meaning of this comment is not very clear to me", "author": "Ethanlm", "createdAt": "2020-03-05T17:44:41Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +42,182 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            // getExecutorToComponent().values() also contains system components\n+            this(topo.getConf(), Sets.union(topo.getComponents().keySet(), new HashSet(topo.getExecutorToComponent().values())));\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MDk1NQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388480955", "bodyText": "This comment is no longer valid. v is a map now.", "author": "Ethanlm", "createdAt": "2020-03-05T18:30:10Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -38,71 +42,182 @@\n import org.apache.storm.shade.com.google.common.annotations.VisibleForTesting;\n import org.apache.storm.utils.ObjectReader;\n import org.apache.storm.utils.Time;\n+import org.apache.storm.validation.ConfigValidation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class ConstraintSolverStrategy extends BaseResourceAwareStrategy {\n-    //hard coded max number of states to search\n     private static final Logger LOG = LoggerFactory.getLogger(ConstraintSolverStrategy.class);\n \n-    //constraints and spreads\n-    private Map<String, Map<String, Integer>> constraintMatrix;\n-    private HashSet<String> spreadComps = new HashSet<>();\n+    public static final String CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT = \"maxNodeCoLocationCnt\";\n+    public static final String CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS = \"incompatibleComponents\";\n \n-    private Map<String, RasNode> nodes;\n-    private Map<ExecutorDetails, String> execToComp;\n-    private Map<String, Set<ExecutorDetails>> compToExecs;\n-    private List<String> favoredNodeIds;\n-    private List<String> unFavoredNodeIds;\n+    /**\n+     * Component constraint as derived from configuration.\n+     * This is backward compatible and can parse old style Config.TOPOLOGY_RAS_CONSTRAINTS and Config.TOPOLOGY_SPREAD_COMPONENTS.\n+     * New style Config.TOPOLOGY_RAS_CONSTRAINTS is map where each component has a list of other incompatible components\n+     * and an optional number that specifies the maximum co-location count for the component on a node.\n+     *\n+     * <p>comp-1 cannot exist on same worker as comp-2 or comp-3, and at most \"2\" comp-1 on same node</p>\n+     * <p>comp-2 and comp-4 cannot be on same node (missing comp-1 is implied from comp-1 constraint)</p>\n+     *\n+     *  <p>\n+     *      { \"comp-1\": { \"maxNodeCoLocationCnt\": 2, \"incompatibleComponents\": [\"comp-2\", \"comp-3\" ] },\n+     *        \"comp-2\": { \"incompatibleComponents\": [ \"comp-4\" ] }\n+     *      }\n+     *  </p>\n+     */\n+    public static final class ConstraintConfig {\n+        private Map<String, Set<String>> incompatibleComponents = new HashMap<>();\n+        private Map<String, Integer> maxCoLocationCnts = new HashMap<>(); // maximum node CoLocationCnt for restricted components\n \n-    static Map<String, Map<String, Integer>> getConstraintMap(TopologyDetails topo, Set<String> comps) {\n-        Map<String, Map<String, Integer>> matrix = new HashMap<>();\n-        for (String comp : comps) {\n-            matrix.put(comp, new HashMap<>());\n-            for (String comp2 : comps) {\n-                matrix.get(comp).put(comp2, 0);\n-            }\n+        ConstraintConfig(TopologyDetails topo) {\n+            // getExecutorToComponent().values() also contains system components\n+            this(topo.getConf(), Sets.union(topo.getComponents().keySet(), new HashSet(topo.getExecutorToComponent().values())));\n         }\n-        List<List<String>> constraints = (List<List<String>>) topo.getConf().get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n-        if (constraints != null) {\n-            for (List<String> constraintPair : constraints) {\n-                String comp1 = constraintPair.get(0);\n-                String comp2 = constraintPair.get(1);\n-                if (!matrix.containsKey(comp1)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n-                    continue;\n+\n+        ConstraintConfig(Map<String, Object> conf, Set<String> comps) {\n+            // spread constraints, old style may come from Config.TOPOLOGY_RAS_CONSTRAINTS where the target\n+            Object rasConstraints = conf.get(Config.TOPOLOGY_RAS_CONSTRAINTS);\n+            comps.forEach(k -> incompatibleComponents.computeIfAbsent(k, x -> new HashSet<>()));\n+            if (rasConstraints instanceof List) {\n+                // old style\n+                List<List<String>> constraints = (List<List<String>>) rasConstraints;\n+                for (List<String> constraintPair : constraints) {\n+                    String comp1 = constraintPair.get(0);\n+                    String comp2 = constraintPair.get(1);\n+                    if (!comps.contains(comp1)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp1);\n+                        continue;\n+                    }\n+                    if (!comps.contains(comp2)) {\n+                        LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n+                        continue;\n+                    }\n+                    if (comp1.equals(comp2)) {\n+                        maxCoLocationCnts.put(comp1, 1);\n+                    } else {\n+                        incompatibleComponents.get(comp1).add(comp2);\n+                        incompatibleComponents.get(comp2).add(comp1);\n+                    }\n                 }\n-                if (!matrix.containsKey(comp2)) {\n-                    LOG.warn(\"Comp: {} declared in constraints is not valid!\", comp2);\n-                    continue;\n+            } else {\n+                Map<String, Map<String,?>> constraintMap = (Map<String, Map<String,?>>) rasConstraints;\n+                constraintMap.forEach((comp1, v) -> {\n+                    if (comps.contains(comp1)) {\n+                        // v is a list of other components and an optional number which is a maxCoLocationCnt", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDg1NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388510854", "bodyText": "typo: most -> more", "author": "Ethanlm", "createdAt": "2020-03-05T19:23:40Z", "path": "storm-server/src/main/java/org/apache/storm/scheduler/resource/strategies/scheduling/ConstraintSolverStrategy.java", "diffHunk": "@@ -447,22 +552,24 @@ public boolean isExecAssignmentToWorkerValid(WorkerSlot worker, SearcherState st\n         return retMap;\n     }\n \n-    private ArrayList<ExecutorDetails> getSortedExecs(HashSet<String> spreadComps, Map<String, Map<String, Integer>> constraintMatrix,\n+    private ArrayList<ExecutorDetails> getSortedExecs(Map<String, Integer> spreadCompCnts,\n+                                                      Map<String, Set<String>> constraintMatrix,\n                                                       Map<String, Set<ExecutorDetails>> compToExecs) {\n         ArrayList<ExecutorDetails> retList = new ArrayList<>();\n         //find number of constraints per component\n         //Key->Comp Value-># of constraints\n-        Map<String, Integer> compConstraintCountMap = new HashMap<>();\n+        Map<String, Double> compConstraintCountMap = new HashMap<>();\n         constraintMatrix.forEach((comp, subMatrix) -> {\n-            int count = subMatrix.values().stream().mapToInt(Number::intValue).sum();\n-            //check component is declared for spreading\n-            if (spreadComps.contains(comp)) {\n-                count++;\n+            double count = subMatrix.size();\n+            // check if component is declared for spreading\n+            if (spreadCompCnts.containsKey(comp)) {\n+                // lower (1 and above only) value is most constrained should have higher count", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzA2OA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388513068", "bodyText": "\"\"+ doesn't seem necessary.", "author": "Ethanlm", "createdAt": "2020-03-05T19:27:33Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -54,27 +58,70 @@\n import org.apache.storm.metric.StormMetricsRegistry;\n import org.apache.storm.scheduler.resource.normalization.ResourceMetrics;\n \n+@RunWith(Parameterized.class)\n public class TestConstraintSolverStrategy {\n+    @Parameters\n+    public static Object[] data() {\n+        return new Object[] { false, true };\n+    }\n+\n     private static final Logger LOG = LoggerFactory.getLogger(TestConstraintSolverStrategy.class);\n     private static final int MAX_TRAVERSAL_DEPTH = 2000;\n     private static final int NORMAL_BOLT_PARALLEL = 11;\n     //Dropping the parallelism of the bolts to 3 instead of 11 so we can find a solution in a reasonable amount of work when backtracking.\n     private static final int BACKTRACK_BOLT_PARALLEL = 3;\n+    private static final int CO_LOCATION_CNT = 2;\n \n-    public Map<String, Object> makeTestTopoConf() {\n+    // class members\n+    public Boolean consolidatedConfigFlag = Boolean.TRUE;\n+\n+    public TestConstraintSolverStrategy(boolean consolidatedConfigFlag) {\n+        this.consolidatedConfigFlag = consolidatedConfigFlag;\n+        LOG.info(\"Running tests with consolidatedConfigFlag={}\", \"\"+consolidatedConfigFlag);", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMjE4NQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r390722185", "bodyText": "fix", "author": "bipinprasad", "createdAt": "2020-03-11T03:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTMxNw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388515317", "bodyText": "typo: when --> is", "author": "Ethanlm", "createdAt": "2020-03-05T19:31:46Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -85,6 +132,80 @@\n         return config;\n     }\n \n+    /**\n+     * Set Config.TOPOLOGY_RAS_CONSTRAINTS (when consolidatedConfigFlag is true) or both\n+     * Config.TOPOLOGY_RAS_CONSTRAINTS/Config.TOPOLOGY_SPREAD_COMPONENTS (when consolidatedConfigFlag is false).\n+     *\n+     * When consolidatedConfigFlag when true, use the new more consolidated format to set Config.TOPOLOGY_RAS_CONSTRAINTS.", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMjIzNg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r390722236", "bodyText": "fix", "author": "bipinprasad", "createdAt": "2020-03-11T03:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNjE1Mg==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388516152", "bodyText": "nit: space after (List<Object>)\nString,Object can be deleted\nObject in new ArrayList<Object> can be deleted (Line157)", "author": "Ethanlm", "createdAt": "2020-03-05T19:33:35Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -85,6 +132,80 @@\n         return config;\n     }\n \n+    /**\n+     * Set Config.TOPOLOGY_RAS_CONSTRAINTS (when consolidatedConfigFlag is true) or both\n+     * Config.TOPOLOGY_RAS_CONSTRAINTS/Config.TOPOLOGY_SPREAD_COMPONENTS (when consolidatedConfigFlag is false).\n+     *\n+     * When consolidatedConfigFlag when true, use the new more consolidated format to set Config.TOPOLOGY_RAS_CONSTRAINTS.\n+     * When false, use the old configuration format for Config.TOPOLOGY_RAS_CONSTRAINTS/TOPOLOGY_SPREAD_COMPONENTS.\n+     *\n+     * @param constraints List of components, where the first one cannot co-exist with the others in the list\n+     * @param spreads Map of component and its maxCoLocationCnt\n+     * @param config Configuration to be updated\n+     */\n+    private void setConstraintConfig(List<List<String>> constraints, Map<String, Integer> spreads, Map<String, Object> config) {\n+        if (consolidatedConfigFlag) {\n+            // single configuration for each component\n+            Map<String, Map<String,Object>> modifiedConstraints = new HashMap<>();\n+            for (List<String> constraint: constraints) {\n+                if (constraint.size() < 2) {\n+                    continue;\n+                }\n+                String comp = constraint.get(0);\n+                List<String> others = constraint.subList(1, constraint.size());\n+                List<Object> incompatibleComponents = (List<Object>)modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>())", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMjY1Nw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r390722657", "bodyText": "fix", "author": "bipinprasad", "createdAt": "2020-03-11T03:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNjE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNjcwNA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388516704", "bodyText": "String,Object can be removed; \"\"+ doesn't seem necessary", "author": "Ethanlm", "createdAt": "2020-03-05T19:34:45Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -85,6 +132,80 @@\n         return config;\n     }\n \n+    /**\n+     * Set Config.TOPOLOGY_RAS_CONSTRAINTS (when consolidatedConfigFlag is true) or both\n+     * Config.TOPOLOGY_RAS_CONSTRAINTS/Config.TOPOLOGY_SPREAD_COMPONENTS (when consolidatedConfigFlag is false).\n+     *\n+     * When consolidatedConfigFlag when true, use the new more consolidated format to set Config.TOPOLOGY_RAS_CONSTRAINTS.\n+     * When false, use the old configuration format for Config.TOPOLOGY_RAS_CONSTRAINTS/TOPOLOGY_SPREAD_COMPONENTS.\n+     *\n+     * @param constraints List of components, where the first one cannot co-exist with the others in the list\n+     * @param spreads Map of component and its maxCoLocationCnt\n+     * @param config Configuration to be updated\n+     */\n+    private void setConstraintConfig(List<List<String>> constraints, Map<String, Integer> spreads, Map<String, Object> config) {\n+        if (consolidatedConfigFlag) {\n+            // single configuration for each component\n+            Map<String, Map<String,Object>> modifiedConstraints = new HashMap<>();\n+            for (List<String> constraint: constraints) {\n+                if (constraint.size() < 2) {\n+                    continue;\n+                }\n+                String comp = constraint.get(0);\n+                List<String> others = constraint.subList(1, constraint.size());\n+                List<Object> incompatibleComponents = (List<Object>)modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>())\n+                        .computeIfAbsent(ConstraintSolverStrategy.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, k -> new ArrayList<Object>());\n+                incompatibleComponents.addAll(others);\n+            }\n+            for (String comp: spreads.keySet()) {\n+                modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>()).put(ConstraintSolverStrategy.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, \"\"+spreads.get(comp));", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMzkzNQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r390723935", "bodyText": "yes on first\nsending in String into Map only.", "author": "bipinprasad", "createdAt": "2020-03-11T03:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNjcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjgyNw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388522827", "bodyText": "This method is not used by anyone and can be removed", "author": "Ethanlm", "createdAt": "2020-03-05T19:45:51Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -85,6 +132,80 @@\n         return config;\n     }\n \n+    /**\n+     * Set Config.TOPOLOGY_RAS_CONSTRAINTS (when consolidatedConfigFlag is true) or both\n+     * Config.TOPOLOGY_RAS_CONSTRAINTS/Config.TOPOLOGY_SPREAD_COMPONENTS (when consolidatedConfigFlag is false).\n+     *\n+     * When consolidatedConfigFlag when true, use the new more consolidated format to set Config.TOPOLOGY_RAS_CONSTRAINTS.\n+     * When false, use the old configuration format for Config.TOPOLOGY_RAS_CONSTRAINTS/TOPOLOGY_SPREAD_COMPONENTS.\n+     *\n+     * @param constraints List of components, where the first one cannot co-exist with the others in the list\n+     * @param spreads Map of component and its maxCoLocationCnt\n+     * @param config Configuration to be updated\n+     */\n+    private void setConstraintConfig(List<List<String>> constraints, Map<String, Integer> spreads, Map<String, Object> config) {\n+        if (consolidatedConfigFlag) {\n+            // single configuration for each component\n+            Map<String, Map<String,Object>> modifiedConstraints = new HashMap<>();\n+            for (List<String> constraint: constraints) {\n+                if (constraint.size() < 2) {\n+                    continue;\n+                }\n+                String comp = constraint.get(0);\n+                List<String> others = constraint.subList(1, constraint.size());\n+                List<Object> incompatibleComponents = (List<Object>)modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>())\n+                        .computeIfAbsent(ConstraintSolverStrategy.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, k -> new ArrayList<Object>());\n+                incompatibleComponents.addAll(others);\n+            }\n+            for (String comp: spreads.keySet()) {\n+                modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>()).put(ConstraintSolverStrategy.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, \"\"+spreads.get(comp));\n+            }\n+            config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, modifiedConstraints);\n+        } else {\n+            // constraint and MaxCoLocationCnts are separate - no maxCoLocationCnt implied as 1\n+            config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, constraints);\n+            config.put(Config.TOPOLOGY_SPREAD_COMPONENTS, spreads.entrySet().stream().map(e -> Arrays.asList()));\n+        }\n+    }\n+\n+    /**\n+     * Set Config.TOPOLOGY_RAS_CONSTRAINTS (when consolidated is true) or both\n+     * Config.TOPOLOGY_RAS_CONSTRAINTS/Config.TOPOLOGY_SPREAD_COMPONENTS (when consolidated is false).\n+     *\n+     * When consolidatedConfigFlag when true, use the new more consolidated format to set Config.TOPOLOGY_RAS_CONSTRAINTS.\n+     * When false, use the old configuration format for Config.TOPOLOGY_RAS_CONSTRAINTS/TOPOLOGY_SPREAD_COMPONENTS.\n+     *\n+     * @param constraints List of components, where the first one cannot co-exist with the others in the list\n+     * @param spreads List of components that can have only one Executor on a node (i.e. their maxCoLocationCnt = 1)\n+     * @param config Configuration to be updated\n+     */\n+    private void setConstraintConfig(List<List<String>> constraints, List<String> spreads, Map<String, Object> config) {", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwMjI0NA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389802244", "bodyText": "Somehow this \"should' be used otherwise an edge test case will not be properly handled. Removing it for now.", "author": "bipinprasad", "createdAt": "2020-03-09T16:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMjgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzI4Ng==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388527286", "bodyText": "Will this include the value, which are integers into the array? maybe new ArrayList<>(spreads.keySet()); is what should be here", "author": "Ethanlm", "createdAt": "2020-03-05T19:53:37Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -85,6 +132,80 @@\n         return config;\n     }\n \n+    /**\n+     * Set Config.TOPOLOGY_RAS_CONSTRAINTS (when consolidatedConfigFlag is true) or both\n+     * Config.TOPOLOGY_RAS_CONSTRAINTS/Config.TOPOLOGY_SPREAD_COMPONENTS (when consolidatedConfigFlag is false).\n+     *\n+     * When consolidatedConfigFlag when true, use the new more consolidated format to set Config.TOPOLOGY_RAS_CONSTRAINTS.\n+     * When false, use the old configuration format for Config.TOPOLOGY_RAS_CONSTRAINTS/TOPOLOGY_SPREAD_COMPONENTS.\n+     *\n+     * @param constraints List of components, where the first one cannot co-exist with the others in the list\n+     * @param spreads Map of component and its maxCoLocationCnt\n+     * @param config Configuration to be updated\n+     */\n+    private void setConstraintConfig(List<List<String>> constraints, Map<String, Integer> spreads, Map<String, Object> config) {\n+        if (consolidatedConfigFlag) {\n+            // single configuration for each component\n+            Map<String, Map<String,Object>> modifiedConstraints = new HashMap<>();\n+            for (List<String> constraint: constraints) {\n+                if (constraint.size() < 2) {\n+                    continue;\n+                }\n+                String comp = constraint.get(0);\n+                List<String> others = constraint.subList(1, constraint.size());\n+                List<Object> incompatibleComponents = (List<Object>)modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>())\n+                        .computeIfAbsent(ConstraintSolverStrategy.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, k -> new ArrayList<Object>());\n+                incompatibleComponents.addAll(others);\n+            }\n+            for (String comp: spreads.keySet()) {\n+                modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>()).put(ConstraintSolverStrategy.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, \"\"+spreads.get(comp));\n+            }\n+            config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, modifiedConstraints);\n+        } else {\n+            // constraint and MaxCoLocationCnts are separate - no maxCoLocationCnt implied as 1\n+            config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, constraints);\n+            config.put(Config.TOPOLOGY_SPREAD_COMPONENTS, spreads.entrySet().stream().map(e -> Arrays.asList()));", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwODM2Mw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389808363", "bodyText": "fixed", "author": "bipinprasad", "createdAt": "2020-03-09T16:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMTA5MA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388531090", "bodyText": "nit: space after (int)", "author": "Ethanlm", "createdAt": "2020-03-05T20:00:46Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -146,7 +267,43 @@ public void basicUnitTestWithKillAndRecover(ConstraintSolverStrategy cs, int bol\n \n         Assert.assertTrue(\"Assert scheduling topology success \" + result, result.isSuccess());\n         Assert.assertEquals(\"topo all executors scheduled?\", 0, cluster.getUnassignedExecutors(topo).size());\n-        Assert.assertTrue(\"Valid Scheduling?\", ConstraintSolverStrategy.validateSolution(cluster, topo));\n+        Assert.assertTrue(\"Valid Scheduling?\", ConstraintSolverStrategy.validateSolution(cluster, topo, null));\n+    }\n+\n+    @Test\n+    public void testNewConstraintFormat() {\n+        String s = String.format(\n+                \"{ \\\"comp-1\\\": \"\n+                        + \"                  { \\\"%s\\\": 2, \"\n+                        + \"                    \\\"%s\\\": [\\\"comp-2\\\", \\\"comp-3\\\" ] }, \"\n+                        + \"     \\\"comp-2\\\": \"\n+                        + \"                  { \\\"%s\\\": [ \\\"comp-4\\\" ] }, \"\n+                        + \"     \\\"comp-3\\\": \"\n+                        + \"                  { \\\"%s\\\": \\\"comp-5\\\" } \"\n+                        + \"}\",\n+                ConstraintSolverStrategy.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT,\n+                ConstraintSolverStrategy.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS,\n+                ConstraintSolverStrategy.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS,\n+                ConstraintSolverStrategy.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS\n+        );\n+        Object jsonValue = JSONValue.parse(s);\n+        Map<String, Object> config = Utils.readDefaultConfig();\n+        config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, jsonValue);\n+        Set<String> allComps = new HashSet<>();\n+        allComps.addAll(Arrays.asList(\"comp-1\", \"comp-2\", \"comp-3\", \"comp-4\", \"comp-5\"));\n+        ConstraintSolverStrategy.ConstraintConfig constraintConfig = new ConstraintSolverStrategy.ConstraintConfig(config, allComps);\n+\n+        Set<String> expectedSetComp1 = new HashSet<>();\n+        expectedSetComp1.addAll(Arrays.asList(\"comp-2\", \"comp-3\"));\n+        Set<String> expectedSetComp2 = new HashSet<>();\n+        expectedSetComp2.addAll(Arrays.asList(\"comp-1\", \"comp-4\"));\n+        Set<String> expectedSetComp3 = new HashSet<>();\n+        expectedSetComp3.addAll(Arrays.asList(\"comp-1\", \"comp-5\"));\n+        Assert.assertEquals(\"comp-1 incompatible components\", expectedSetComp1, constraintConfig.getIncompatibleComponents().get(\"comp-1\"));\n+        Assert.assertEquals(\"comp-2 incompatible components\", expectedSetComp2, constraintConfig.getIncompatibleComponents().get(\"comp-2\"));\n+        Assert.assertEquals(\"comp-3 incompatible components\", expectedSetComp3, constraintConfig.getIncompatibleComponents().get(\"comp-3\"));\n+        Assert.assertEquals(\"comp-1 maxNodeCoLocationCnt\", (int)2, (int)constraintConfig.getMaxCoLocationCnts().getOrDefault(\"comp-1\", -1));", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMDE4NQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389810185", "bodyText": "fixed cast", "author": "bipinprasad", "createdAt": "2020-03-09T16:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMjE0MQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388532141", "bodyText": "What's the different between this and testConstraintSolverForceBacktrack", "author": "Ethanlm", "createdAt": "2020-03-05T20:03:04Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -159,12 +316,30 @@ public void testConstraintSolverForceBacktrack() {\n                 return super.sortByValues(map).descendingMap();\n             }\n         };\n-        basicUnitTestWithKillAndRecover(cs, BACKTRACK_BOLT_PARALLEL);\n+        basicUnitTestWithKillAndRecover(cs, BACKTRACK_BOLT_PARALLEL, 2);\n+    }\n+\n+    @Test\n+    public void testConstraintSolverForceBacktrackWithSpreadCoLocation() {", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMjMwOA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389812308", "bodyText": "None. Removed testConstraintSolverForceBacktrack().", "author": "bipinprasad", "createdAt": "2020-03-09T16:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMjE0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MDk5Nw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389870997", "bodyText": "Also added Assertion to check for invalid test case (i.e. when maxCoLocationCnt is set to > 1 and testing under old config scenario.", "author": "bipinprasad", "createdAt": "2020-03-09T18:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzOTk3Ng==", "url": "https://github.com/apache/storm/pull/3215#discussion_r388539976", "bodyText": "Remove this if it is not needed?", "author": "Ethanlm", "createdAt": "2020-03-05T20:18:07Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -239,42 +435,50 @@ public void testScheduleLargeExecutorConstraintCount(int parallelismMultiplier)\n         scheduler.schedule(topologies, cluster);\n \n         boolean scheduleSuccess = isStatusSuccess(cluster.getStatus(topo.getId()));\n-        LOG.info(\"testScheduleLargeExecutorCount scheduling {} with {}x executor multiplier\", scheduleSuccess ? \"succeeds\" : \"fails\",\n-                parallelismMultiplier);\n+        LOG.info(\"testScheduleLargeExecutorCount scheduling {} with {}x executor multiplier, consolidatedConfigFlag={}\",\n+                scheduleSuccess ? \"succeeds\" : \"fails\", parallelismMultiplier, consolidatedConfigFlag);\n         Assert.assertTrue(scheduleSuccess);\n     }\n \n     @Test\n     public void testIntegrationWithRAS() {\n-        List<List<String>> constraints = new LinkedList<>();\n-        addContraints(\"spout-0\", \"bolt-0\", constraints);\n-        addContraints(\"bolt-1\", \"bolt-1\", constraints);\n-        addContraints(\"bolt-1\", \"bolt-2\", constraints);\n-        List<String> spread = new LinkedList<>();\n-        spread.add(\"spout-0\");\n+        if (!consolidatedConfigFlag) {\n+            LOG.info(\"Skipping test since bolt-1 maxCoLocationCnt=10 requires consolidatedConfigFlag=true, current={}\", consolidatedConfigFlag);\n+            return;\n+        }\n \n         Map<String, Object> config = Utils.readDefaultConfig();\n         config.put(Config.TOPOLOGY_SCHEDULER_STRATEGY, ConstraintSolverStrategy.class.getName());\n-        config.put(Config.TOPOLOGY_SPREAD_COMPONENTS, spread);\n-        config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, constraints);\n         config.put(Config.TOPOLOGY_RAS_CONSTRAINT_MAX_STATE_SEARCH, MAX_TRAVERSAL_DEPTH);\n         config.put(Config.TOPOLOGY_WORKER_MAX_HEAP_SIZE_MB, 100_000);\n         config.put(Config.TOPOLOGY_PRIORITY, 1);\n         config.put(Config.TOPOLOGY_COMPONENT_CPU_PCORE_PERCENT, 10);\n         config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_ONHEAP_MEMORY_MB, 100);\n         config.put(Config.TOPOLOGY_COMPONENT_RESOURCES_OFFHEAP_MEMORY_MB, 0.0);\n \n+        List<List<String>> constraints = new LinkedList<>();\n+        addConstraints(\"spout-0\", \"bolt-0\", constraints);\n+        // commented out unsatisfiable constraint since there are 300 executors and cannot fit on 30 nodes, added as spread\n+        // addConstraints(\"bolt-1\", \"bolt-1\", constraints);", "originalCommit": "a5ee93f209a5c2af0209085ce4420cd1ed717be5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MDAxMQ==", "url": "https://github.com/apache/storm/pull/3215#discussion_r389870011", "bodyText": "Added back. Constraint is satifisfiable when bolt-1 -> bolt-1 is not interpreted as maxNodeCoLocationCnt (fixed in ConstraintSolverStrategy)", "author": "bipinprasad", "createdAt": "2020-03-09T18:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzOTk3Ng=="}], "type": "inlineReview"}, {"oid": "9d6c0a513c1254e23eff7324123c4c1d50170060", "url": "https://github.com/apache/storm/commit/9d6c0a513c1254e23eff7324123c4c1d50170060", "message": "[STORM-3585] Fix comment.", "committedDate": "2020-03-09T15:20:00Z", "type": "commit"}, {"oid": "2563c15cfed6928faeb070d0d611b0c46c25f18d", "url": "https://github.com/apache/storm/commit/2563c15cfed6928faeb070d0d611b0c46c25f18d", "message": "[STORM-3585] Remove RasContraint class. Slight change to validation and test.", "committedDate": "2020-03-09T15:21:18Z", "type": "commit"}, {"oid": "cb975d5a4f39360f6951ae40243f883c155f0ad9", "url": "https://github.com/apache/storm/commit/cb975d5a4f39360f6951ae40243f883c155f0ad9", "message": "[STORM-3585: Fix method documentation.", "committedDate": "2020-03-09T16:00:14Z", "type": "commit"}, {"oid": "d97a7d493d57e283c938d8cb56ffb8bb813f1471", "url": "https://github.com/apache/storm/commit/d97a7d493d57e283c938d8cb56ffb8bb813f1471", "message": "[STORM-3585] Component constraint with same source/target component should not be interpreted as maxNodeCoLocationCnt of 1.", "committedDate": "2020-03-09T18:11:43Z", "type": "commit"}, {"oid": "bf297a8d6cadae1aa208f744a125e7ffca413a13", "url": "https://github.com/apache/storm/commit/bf297a8d6cadae1aa208f744a125e7ffca413a13", "message": "[STORM-3585] Fail if trying to set maxNodeCoLocationCnt > 1 in old-style spread cofig. Removed unused code. Skip invalid test cases (maxNodeCoLocationCnt > 1 with old config). Fix test case with same component constraint.", "committedDate": "2020-03-09T18:23:47Z", "type": "commit"}, {"oid": "2faf83cbdbe2f703befd109947c03f5397b1cfd9", "url": "https://github.com/apache/storm/commit/2faf83cbdbe2f703befd109947c03f5397b1cfd9", "message": "[STORM-3585] Add whitespace after cast.", "committedDate": "2020-03-10T14:35:42Z", "type": "commit"}, {"oid": "ab7e213c0e446907ad597bc4a5fba96bd66118ee", "url": "https://github.com/apache/storm/commit/ab7e213c0e446907ad597bc4a5fba96bd66118ee", "message": "[STORM-3585] Checkstyle fixes - space after comma.", "committedDate": "2020-03-10T15:41:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwNDA0Nw==", "url": "https://github.com/apache/storm/pull/3215#discussion_r390704047", "bodyText": "Maybe this should be != 1? There are a few places like these should be changed if you think this makes sense", "author": "Ethanlm", "createdAt": "2020-03-11T01:46:36Z", "path": "storm-server/src/test/java/org/apache/storm/scheduler/resource/strategies/scheduling/TestConstraintSolverStrategy.java", "diffHunk": "@@ -85,6 +132,54 @@\n         return config;\n     }\n \n+    /**\n+     * Set Config.TOPOLOGY_RAS_CONSTRAINTS (when consolidatedConfigFlag is true) or both\n+     * Config.TOPOLOGY_RAS_CONSTRAINTS/Config.TOPOLOGY_SPREAD_COMPONENTS (when consolidatedConfigFlag is false).\n+     *\n+     * When consolidatedConfigFlag when true, use the new more consolidated format to set Config.TOPOLOGY_RAS_CONSTRAINTS.\n+     * When false, use the old configuration format for Config.TOPOLOGY_RAS_CONSTRAINTS/TOPOLOGY_SPREAD_COMPONENTS.\n+     *\n+     * @param constraints List of components, where the first one cannot co-exist with the others in the list\n+     * @param spreads Map of component and its maxCoLocationCnt\n+     * @param config Configuration to be updated\n+     */\n+    private void setConstraintConfig(List<List<String>> constraints, Map<String, Integer> spreads, Map<String, Object> config) {\n+        if (consolidatedConfigFlag) {\n+            // single configuration for each component\n+            Map<String, Map<String,Object>> modifiedConstraints = new HashMap<>();\n+            for (List<String> constraint: constraints) {\n+                if (constraint.size() < 2) {\n+                    continue;\n+                }\n+                String comp = constraint.get(0);\n+                List<String> others = constraint.subList(1, constraint.size());\n+                List<Object> incompatibleComponents = (List<Object>)modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>())\n+                        .computeIfAbsent(ConstraintSolverStrategy.CONSTRAINT_TYPE_INCOMPATIBLE_COMPONENTS, k -> new ArrayList<Object>());\n+                incompatibleComponents.addAll(others);\n+            }\n+            for (String comp: spreads.keySet()) {\n+                modifiedConstraints.computeIfAbsent(comp, k -> new HashMap<String,Object>()).put(ConstraintSolverStrategy.CONSTRAINT_TYPE_MAX_NODE_CO_LOCATION_CNT, \"\"+spreads.get(comp));\n+            }\n+            config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, modifiedConstraints);\n+        } else {\n+            // constraint and MaxCoLocationCnts are separate - no maxCoLocationCnt implied as 1\n+            config.put(Config.TOPOLOGY_RAS_CONSTRAINTS, constraints);\n+            for (Map.Entry<String, Integer> e: spreads.entrySet()) {\n+                if (e.getValue() > 1) {", "originalCommit": "ab7e213c0e446907ad597bc4a5fba96bd66118ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODg2OA==", "url": "https://github.com/apache/storm/pull/3215#discussion_r390718868", "bodyText": "maxNodeCoLocationCnt is set to 1 or higher only. != 1 and >1 mean the same here. No change required.", "author": "bipinprasad", "createdAt": "2020-03-11T02:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwNDA0Nw=="}], "type": "inlineReview"}, {"oid": "7951d2dcf4697abdf60762ba3239aaef24f6ada9", "url": "https://github.com/apache/storm/commit/7951d2dcf4697abdf60762ba3239aaef24f6ada9", "message": "[STORM-3585] Remove some casts and string conversion,", "committedDate": "2020-03-11T03:17:56Z", "type": "commit"}, {"oid": "5135cb24b34858a384115cf89cc02c9ae5550fdd", "url": "https://github.com/apache/storm/commit/5135cb24b34858a384115cf89cc02c9ae5550fdd", "message": "[STORM-3585] comment fix.", "committedDate": "2020-03-11T20:02:45Z", "type": "commit"}]}