{"pr_number": 3329, "pr_title": "STORM-3694 allow reporting V2 metrics with dimensions and short names", "pr_createdAt": "2020-09-02T18:38:36Z", "pr_url": "https://github.com/apache/storm/pull/3329", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4MzMwMA==", "url": "https://github.com/apache/storm/pull/3329#discussion_r489883300", "bodyText": "Why do we need synchronized?\nIf there are two threads trying to register the same metric,\nline198 gauge = registry.register(metricNames.getLongName(), gauge); will throw IllegalArgumentException. (what's interesting is if registry.gauge() or registry.meter() etc. method is invoked, it will check and return the existing object if possible)\nIt implies this registerGauge can only be invoked once for each long name.", "author": "Ethanlm", "createdAt": "2020-09-17T02:13:23Z", "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "diffHunk": "@@ -171,6 +188,59 @@ public Histogram histogram(String name, TopologyContext context) {\n         metrics.put(names.getV2TickName(), metric);\n     }\n \n+    private <T> Gauge<T> registerGauge(String name, MetricNames metricNames, Gauge<T> gauge, int taskId,\n+                                       String componentId, String streamId) {\n+        TaskMetricDimensions taskMetricDimensions = new TaskMetricDimensions(taskId, componentId, streamId, this);\n+        synchronized (this) {", "originalCommit": "4f9fa7d97e202bd042fc9f510ea53448e23facb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MzY2Mg==", "url": "https://github.com/apache/storm/pull/3329#discussion_r490343662", "bodyText": "I don't think it is needed.  It's possible this was due to various experiments I had been trying prior to selecting this solution.  I will remove it.", "author": "agresch", "createdAt": "2020-09-17T15:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4MzMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4NDE5MQ==", "url": "https://github.com/apache/storm/pull/3329#discussion_r489884191", "bodyText": "Can we use metricNames.getV2TickName instead of name? It seems code duplication to pass this name parameter?\nI would also change metricNames.getV2TickName to metricNames.getShortName since it is not only about v2 tick anymore.\nAnd we need to update comments at https://github.com/apache/storm/blob/master/storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java#L316-L317", "author": "Ethanlm", "createdAt": "2020-09-17T02:14:46Z", "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "diffHunk": "@@ -171,6 +188,59 @@ public Histogram histogram(String name, TopologyContext context) {\n         metrics.put(names.getV2TickName(), metric);\n     }\n \n+    private <T> Gauge<T> registerGauge(String name, MetricNames metricNames, Gauge<T> gauge, int taskId,\n+                                       String componentId, String streamId) {\n+        TaskMetricDimensions taskMetricDimensions = new TaskMetricDimensions(taskId, componentId, streamId, this);\n+        synchronized (this) {\n+            TaskMetricRepo repo = taskMetrics.computeIfAbsent(taskMetricDimensions, (k) -> new TaskMetricRepo());\n+            repo.addGauge(name, gauge);", "originalCommit": "4f9fa7d97e202bd042fc9f510ea53448e23facb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ1ODI3OQ==", "url": "https://github.com/apache/storm/pull/3329#discussion_r490458279", "bodyText": "agreed", "author": "agresch", "createdAt": "2020-09-17T18:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4NDE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk2ODU1NA==", "url": "https://github.com/apache/storm/pull/3329#discussion_r489968554", "bodyText": "The interface change is concerning. It breaks backwards compatibility.", "author": "Ethanlm", "createdAt": "2020-09-17T04:49:06Z", "path": "storm-client/src/jvm/org/apache/storm/metrics2/reporters/StormReporter.java", "diffHunk": "@@ -15,12 +15,15 @@\n import com.codahale.metrics.MetricRegistry;\n import com.codahale.metrics.Reporter;\n import java.util.Map;\n+import org.apache.storm.metrics2.StormMetricRegistry;\n \n public interface StormReporter extends Reporter {\n     String REPORT_PERIOD = \"report.period\";\n     String REPORT_PERIOD_UNITS = \"report.period.units\";\n+    String REPORT_DIMENSIONS_ENABLED = \"report.dimensions.enabled\";\n \n-    void prepare(MetricRegistry metricsRegistry, Map<String, Object> topoConf, Map<String, Object> reporterConf);\n+    void prepare(MetricRegistry metricsRegistry, Map<String, Object> topoConf, Map<String, Object> reporterConf,", "originalCommit": "4f9fa7d97e202bd042fc9f510ea53448e23facb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MjI4Nw==", "url": "https://github.com/apache/storm/pull/3329#discussion_r490342287", "bodyText": "what if I provide a default implementation of the new prepare that calls the old method?", "author": "agresch", "createdAt": "2020-09-17T15:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk2ODU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk3NDEzMg==", "url": "https://github.com/apache/storm/pull/3329#discussion_r489974132", "bodyText": "I would suggest to change this to getReportDimensionsEnabled or isReportDimensionsEnabled", "author": "Ethanlm", "createdAt": "2020-09-17T05:10:21Z", "path": "storm-client/src/jvm/org/apache/storm/metrics2/reporters/ScheduledStormReporter.java", "diffHunk": "@@ -37,6 +37,10 @@ public static long getReportPeriod(Map<String, Object> reporterConf) {\n         return ObjectReader.getInt(reporterConf.get(REPORT_PERIOD), 10).longValue();\n     }\n \n+    public static boolean getReportDimensions(Map<String, Object> reporterConf) {", "originalCommit": "4f9fa7d97e202bd042fc9f510ea53448e23facb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4MTU1MA==", "url": "https://github.com/apache/storm/pull/3329#discussion_r489981550", "bodyText": "should we use  topologyId since we use topologyId in the long name", "author": "Ethanlm", "createdAt": "2020-09-17T05:36:11Z", "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "diffHunk": "@@ -198,14 +268,17 @@ public Histogram histogram(String name, TopologyContext context) {\n         return getMetricNameMap(taskId, taskIdTimers);\n     }\n \n-    public void start(Map<String, Object> topoConf) {\n+    public void start(Map<String, Object> topoConf, int port) {\n         try {\n             hostName = dotToUnderScore(Utils.localHostname());\n         } catch (UnknownHostException e) {\n             LOG.warn(\"Unable to determine hostname while starting the metrics system. Hostname will be reported\"\n                      + \" as 'localhost'.\");\n         }\n \n+        this.topologyName = (String) topoConf.get(Config.TOPOLOGY_NAME);", "originalCommit": "4f9fa7d97e202bd042fc9f510ea53448e23facb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNTUyNw==", "url": "https://github.com/apache/storm/pull/3329#discussion_r490535527", "bodyText": "Looks like this can be removed too since if there is name collision, the code in registry.register  will throw IllegalArgumentException", "author": "Ethanlm", "createdAt": "2020-09-17T20:15:30Z", "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "diffHunk": "@@ -181,62 +178,52 @@ public void metricSet(String prefix, MetricSet set, TopologyContext context) {\n     private static <T extends Metric> void saveMetricTaskIdMapping(Integer taskId, MetricNames names, T metric, Map<Integer,\n             Map<String, T>> taskIdMetrics) {\n         Map<String, T> metrics = taskIdMetrics.computeIfAbsent(taskId, (tid) -> new HashMap<>());\n-        if (metrics.get(names.getV2TickName()) != null) {\n+        if (metrics.get(names.getShortName()) != null) {", "originalCommit": "9de9581b1198b60f4d69976f0a1becbd7fb84607", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MTM3Mw==", "url": "https://github.com/apache/storm/pull/3329#discussion_r490541373", "bodyText": "looks like this line can be removed", "author": "Ethanlm", "createdAt": "2020-09-17T20:26:25Z", "path": "storm-client/src/jvm/org/apache/storm/metrics2/StormMetricRegistry.java", "diffHunk": "@@ -50,125 +50,182 @@\n     private final ConcurrentMap<Integer, Map<String, Counter>> taskIdCounters = new ConcurrentHashMap<>();\n     private final ConcurrentMap<Integer, Map<String, Timer>> taskIdTimers = new ConcurrentHashMap<>();\n     private final ConcurrentMap<Integer, Map<String, Histogram>> taskIdHistograms = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<TaskMetricDimensions, TaskMetricRepo> taskMetrics = new ConcurrentHashMap<>();\n     private String hostName = null;\n+    private int port = -1;\n+    private String topologyId = null;\n \n     public <T> SimpleGauge<T> gauge(\n         T initialValue, String name, String topologyId, String componentId, Integer taskId, Integer port) {\n+        Gauge gauge = new SimpleGauge<>(initialValue);\n         MetricNames metricNames = workerMetricName(name, topologyId, componentId, taskId, port);\n-        Gauge gauge = registry.gauge(metricNames.getLongName(), () -> new SimpleGauge<>(initialValue));\n+        gauge = registerGauge(metricNames, gauge, taskId, componentId, null);\n         saveMetricTaskIdMapping(taskId, metricNames, gauge, taskIdGauges);\n         return (SimpleGauge<T>) gauge;\n     }\n \n     public <T> Gauge<T> gauge(String name, Gauge<T> gauge, TopologyContext context) {\n         MetricNames metricNames = topologyMetricName(name, context);\n-        gauge = registry.register(metricNames.getLongName(), gauge);\n+        gauge = registerGauge(metricNames, gauge, context.getThisTaskId(), context.getThisComponentId(), null);\n         saveMetricTaskIdMapping(context.getThisTaskId(), metricNames, gauge, taskIdGauges);\n         return gauge;\n     }\n \n     public <T> Gauge<T> gauge(String name, Gauge<T> gauge, String topologyId, String componentId, Integer taskId, Integer port) {\n         MetricNames metricNames = workerMetricName(name, topologyId, componentId, taskId, port);\n-        gauge = registry.register(metricNames.getLongName(), gauge);\n+        gauge = registerGauge(metricNames, gauge, taskId, componentId, null);\n         saveMetricTaskIdMapping(taskId, metricNames, gauge, taskIdGauges);\n         return gauge;\n     }\n \n     public <T> Gauge<T> gauge(String name, Gauge<T> gauge, String topologyId, String componentId,\n                               String streamId, Integer taskId, Integer port) {\n         MetricNames metricNames = workerMetricName(name, topologyId, componentId, streamId, taskId, port);\n-        gauge = registry.register(metricNames.getLongName(), gauge);\n+        gauge = registerGauge(metricNames, gauge, taskId, componentId, streamId);\n         saveMetricTaskIdMapping(taskId, metricNames, gauge, taskIdGauges);\n         return gauge;\n     }\n \n     public Meter meter(String name, WorkerTopologyContext context, String componentId, Integer taskId, String streamId) {\n         MetricNames metricNames = workerMetricName(name, context.getStormId(), componentId, streamId, taskId, context.getThisWorkerPort());\n-        Meter meter = registry.meter(metricNames.getLongName());\n+        Meter meter = registerMeter(metricNames, new Meter(), taskId, componentId, streamId);\n         saveMetricTaskIdMapping(taskId, metricNames, meter, taskIdMeters);\n         return meter;\n     }\n \n     public Meter meter(String name, WorkerTopologyContext context, String componentId, Integer taskId) {\n         MetricNames metricNames = workerMetricName(name, context.getStormId(), componentId, taskId, context.getThisWorkerPort());\n-        Meter meter = registry.meter(metricNames.getLongName());\n+        Meter meter = registerMeter(metricNames, new Meter(), taskId, componentId, null);\n         saveMetricTaskIdMapping(taskId, metricNames, meter, taskIdMeters);\n         return meter;\n     }\n \n     public Meter meter(String name, TopologyContext context) {\n         MetricNames metricNames = topologyMetricName(name, context);\n-        Meter meter = registry.meter(metricNames.getLongName());\n+        Meter meter = registerMeter(metricNames, new Meter(), context.getThisTaskId(), context.getThisComponentId(), null);\n         saveMetricTaskIdMapping(context.getThisTaskId(), metricNames, meter, taskIdMeters);\n         return meter;\n     }\n \n     public Counter counter(String name, WorkerTopologyContext context, String componentId, Integer taskId, String streamId) {\n         MetricNames metricNames = workerMetricName(name, context.getStormId(), componentId, streamId, taskId, context.getThisWorkerPort());\n-        Counter counter = registry.counter(metricNames.getLongName());\n+        Counter counter = registerCounter(metricNames, new Counter(), taskId, componentId, streamId);\n         saveMetricTaskIdMapping(taskId, metricNames, counter, taskIdCounters);\n         return counter;\n     }\n \n     public Counter counter(String name, String topologyId, String componentId, Integer taskId, Integer workerPort, String streamId) {\n         MetricNames metricNames = workerMetricName(name, topologyId, componentId, streamId, taskId, workerPort);\n-        Counter counter = registry.counter(metricNames.getLongName());\n+        Counter counter = registerCounter(metricNames, new Counter(), taskId, componentId, streamId);\n         saveMetricTaskIdMapping(taskId, metricNames, counter, taskIdCounters);\n         return counter;\n     }\n \n     public Counter counter(String name, TopologyContext context) {\n         MetricNames metricNames = topologyMetricName(name, context);\n-        Counter counter = registry.counter(metricNames.getLongName());\n+        Counter counter = registerCounter(metricNames, new Counter(), context.getThisTaskId(), context.getThisComponentId(), null);\n         saveMetricTaskIdMapping(context.getThisTaskId(), metricNames, counter, taskIdCounters);\n         return counter;\n     }\n \n+    public Timer timer(String name, TopologyContext context) {\n+        MetricNames metricNames = topologyMetricName(name, context);\n+        Timer timer = registerTimer(metricNames, new Timer(), context.getThisTaskId(), context.getThisComponentId(), null);\n+        saveMetricTaskIdMapping(context.getThisTaskId(), metricNames, timer, taskIdTimers);\n+        return timer;\n+    }\n+\n+    public Histogram histogram(String name, TopologyContext context) {\n+        MetricNames metricNames = topologyMetricName(name, context);\n+        Histogram histogram = registerHistogram(metricNames, new Histogram(new ExponentiallyDecayingReservoir()),\n+                context.getThisTaskId(), context.getThisComponentId(), null);\n+        saveMetricTaskIdMapping(context.getThisTaskId(), metricNames, histogram, taskIdHistograms);\n+        return histogram;\n+    }\n+\n     public void metricSet(String prefix, MetricSet set, TopologyContext context) {\n         // Instead of registering the metrics as a set, register them individually.\n         // This allows fetching the individual metrics by type (getTaskGauges())\n         // to work as expected.\n+        TaskMetricDimensions taskMetricDimensions = new TaskMetricDimensions(context.getThisTaskId(),", "originalCommit": "9de9581b1198b60f4d69976f0a1becbd7fb84607", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87f6b8796969488a1344bd9cd41264839e04afbe", "url": "https://github.com/apache/storm/commit/87f6b8796969488a1344bd9cd41264839e04afbe", "message": "STORM-3694 allow reporting V2 metrics with dimensions and short names", "committedDate": "2020-09-18T17:38:01Z", "type": "commit"}, {"oid": "87f6b8796969488a1344bd9cd41264839e04afbe", "url": "https://github.com/apache/storm/commit/87f6b8796969488a1344bd9cd41264839e04afbe", "message": "STORM-3694 allow reporting V2 metrics with dimensions and short names", "committedDate": "2020-09-18T17:38:01Z", "type": "forcePushed"}]}