{"pr_number": 558, "pr_title": "Do not call get project.getBasePath", "pr_createdAt": "2020-08-19T08:07:43Z", "pr_url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/558", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1Njg5Nw==", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/558#discussion_r472856897", "bodyText": "Maybe fix this awkward formatting ;p", "author": "lukaszwawrzyk", "createdAt": "2020-08-19T08:31:19Z", "path": "src/com/twitter/intellij/pants/bsp/JarMappings.java", "diffHunk": "@@ -60,11 +60,14 @@ public void after(@NotNull List<? extends VFileEvent> events) {\n   private synchronized void ensureUpToDate() {\n     try {\n       if (!librariesFileIsUpToDate) {\n-        VirtualFile file = librariesFile();\n-        String content = new String(file.contentsToByteArray());\n-        Type mapType = new TypeToken<Map<String, String>>() {}.getType();\n-        libraryJarToLibrarySourceJar = new Gson().fromJson(content, mapType);\n-        librariesFileIsUpToDate = true;\n+        Optional<VirtualFile> file = librariesFile();\n+        if(file.isPresent()) {\n+          String content = new String(file.get().contentsToByteArray());\n+          Type mapType = new TypeToken<Map<String, String>>() {\n+          }.getType();", "originalCommit": "8cc8736aea80e2643f439b87fdb8e0ffb3f6b933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NzA4OA==", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/558#discussion_r472857088", "bodyText": "are these get calls safe?", "author": "lukaszwawrzyk", "createdAt": "2020-08-19T08:31:39Z", "path": "src/com/twitter/intellij/pants/bsp/JarMappings.java", "diffHunk": "@@ -125,17 +128,27 @@ private String targetAddressFromSanitizedFileName(String jarName) {\n \n   private boolean isProjectInternalDependency(VirtualFile jar) {\n     Path jarPath = Paths.get(jar.getPath());\n-    Path bloopJarsPath = bloopJarsPath(project);\n-    return jarPath.startsWith(bloopJarsPath);\n+    Optional<Path> bloopJarsPath = bloopJarsPath(project);\n+    Optional<Path> sourcesJarPath = sourcesJarPath(project);\n+    return jarPath.startsWith(bloopJarsPath.get()) || jarPath.startsWith(sourcesJarPath.get());", "originalCommit": "8cc8736aea80e2643f439b87fdb8e0ffb3f6b933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1ODEwNw==", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/558#discussion_r472858107", "bodyText": "We could have a method to return bloop directory and then this and bloopJarsPath could just resolve single child. Or even better, to resolve the bsp path, so it can also be used for librariesFile", "author": "lukaszwawrzyk", "createdAt": "2020-08-19T08:33:21Z", "path": "src/com/twitter/intellij/pants/bsp/JarMappings.java", "diffHunk": "@@ -125,17 +128,27 @@ private String targetAddressFromSanitizedFileName(String jarName) {\n \n   private boolean isProjectInternalDependency(VirtualFile jar) {\n     Path jarPath = Paths.get(jar.getPath());\n-    Path bloopJarsPath = bloopJarsPath(project);\n-    return jarPath.startsWith(bloopJarsPath);\n+    Optional<Path> bloopJarsPath = bloopJarsPath(project);\n+    Optional<Path> sourcesJarPath = sourcesJarPath(project);\n+    return jarPath.startsWith(bloopJarsPath.get()) || jarPath.startsWith(sourcesJarPath.get());\n   }\n \n-  private static Path bloopJarsPath(Project project) {\n-    return Paths.get(project.getBasePath(), \".bloop\", \"bloop-jars\");\n+  private static Optional<Path> bloopJarsPath(Project project) {\n+    return PantsBspData.importsFor(project).stream().findFirst()\n+      .map(path -> Paths.get(path.getBspPath().toString(), \".bloop\", \"bloop-jars\"));\n   }\n \n-  private VirtualFile librariesFile() {\n-    Path path = Paths.get(project.getBasePath(), \".pants\", \"libraries.json\");\n-    return LocalFileSystem.getInstance().findFileByIoFile(path.toFile());\n+  private static Optional<Path> sourcesJarPath(Project project) {\n+    return PantsBspData.importsFor(project).stream().findFirst()", "originalCommit": "8cc8736aea80e2643f439b87fdb8e0ffb3f6b933", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9143ec0f39809bd8abec84e2e29610f98f526b46", "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/9143ec0f39809bd8abec84e2e29610f98f526b46", "message": "Do not call get project.getBasePath\n\nThis method may return incorrect value. The case is that the user may\ncreate project literally *anywhere* and tnen import BSP project to\nit. `getBasePath` will return path to the directory where the project\nwas created.\n\nApart from that, since this commit the `sources-jar` dir is also\nrecognized as project internal dependency (updated\n`isProjectInternalDependency` method)", "committedDate": "2020-08-19T14:34:47Z", "type": "commit"}, {"oid": "dc8a06a5ec3923d768e48c5c4e50e37b41fbc4f5", "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/dc8a06a5ec3923d768e48c5c4e50e37b41fbc4f5", "message": "Tigger CI", "committedDate": "2020-08-19T17:37:45Z", "type": "commit"}]}