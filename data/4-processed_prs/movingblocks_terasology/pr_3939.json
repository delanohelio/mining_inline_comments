{"pr_number": 3939, "pr_title": "feat: Particle Pool Sharing", "pr_createdAt": "2020-05-07T22:47:18Z", "pr_url": "https://github.com/MovingBlocks/Terasology/pull/3939", "timeline": [{"oid": "4492ffabc3d088311fd98c7b2aa3e4fcbe6fa36a", "url": "https://github.com/MovingBlocks/Terasology/commit/4492ffabc3d088311fd98c7b2aa3e4fcbe6fa36a", "message": "Make sure shared particle pools are only updated once per frame.", "committedDate": "2020-05-07T19:53:03Z", "type": "commit"}, {"oid": "55fb230093b08a9435e3bd3448e47445a5899d1b", "url": "https://github.com/MovingBlocks/Terasology/commit/55fb230093b08a9435e3bd3448e47445a5899d1b", "message": "Update particle data after all emitters have been updated.", "committedDate": "2020-05-07T19:53:03Z", "type": "commit"}, {"oid": "c4c196c84a922baf330400e0e74ed79becf0841c", "url": "https://github.com/MovingBlocks/Terasology/commit/c4c196c84a922baf330400e0e74ed79becf0841c", "message": "Order methods in ParticleUpdaterImpl", "committedDate": "2020-05-07T19:53:03Z", "type": "commit"}, {"oid": "556eef00b5a9c81810cc67ec3347a9cdf9472aaf", "url": "https://github.com/MovingBlocks/Terasology/commit/556eef00b5a9c81810cc67ec3347a9cdf9472aaf", "message": "Make sure every particle pool is only rendered once.", "committedDate": "2020-05-07T22:03:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1MDEzNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3939#discussion_r422250136", "bodyText": "Here are some comments that should clarify the functionality of each filter.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(emitter -> emitter.ownerEntity.hasComponent(particleDataComponent))\n          \n          \n            \n                            .filter(distinctByKey(emitter -> emitter.particlePool))\n          \n          \n            \n                            .filter(emitter -> emitter.ownerEntity.hasComponent(particleDataComponent)) // check if owning entity has particleDataComponent\n          \n          \n            \n                            .filter(distinctByKey(emitter -> emitter.particlePool)) // each particle emitter has a unique pool", "author": "pollend", "createdAt": "2020-05-08T16:47:48Z", "path": "engine/src/main/java/org/terasology/particles/ParticleSystemManagerImpl.java", "diffHunk": "@@ -107,11 +111,16 @@ public void update(float delta) {\n     @Override\n     public Stream<ParticleRenderingData> getParticleEmittersByDataComponent(Class<? extends Component> particleDataComponent) {\n         return particleUpdater.getParticleEmitters().stream()\n-                .filter(p -> p.ownerEntity.hasComponent(particleDataComponent))\n-                .map(particleEmitterComponent ->\n-                        new ParticleRenderingData<>(\n-                                particleEmitterComponent.ownerEntity.getComponent(particleDataComponent),\n-                                particleEmitterComponent.particlePool\n-                        ));\n+                .filter(emitter -> emitter.ownerEntity.hasComponent(particleDataComponent))\n+                .filter(distinctByKey(emitter -> emitter.particlePool))", "originalCommit": "556eef00b5a9c81810cc67ec3347a9cdf9472aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d767c0881facc6fa77e3a9a71933d03f67eeee26", "url": "https://github.com/MovingBlocks/Terasology/commit/d767c0881facc6fa77e3a9a71933d03f67eeee26", "message": "Clarify filters in ParticleSystemManagerImpl with comments.", "committedDate": "2020-05-08T17:11:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NDkzOQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3939#discussion_r422264939", "bodyText": "Took me a few minutes to understand what is happening here... In the end, pretty elegant solution.", "author": "skaldarnar", "createdAt": "2020-05-08T17:16:53Z", "path": "engine/src/main/java/org/terasology/particles/ParticleSystemManagerImpl.java", "diffHunk": "@@ -107,11 +111,16 @@ public void update(float delta) {\n     @Override\n     public Stream<ParticleRenderingData> getParticleEmittersByDataComponent(Class<? extends Component> particleDataComponent) {\n         return particleUpdater.getParticleEmitters().stream()\n-                .filter(p -> p.ownerEntity.hasComponent(particleDataComponent))\n-                .map(particleEmitterComponent ->\n-                        new ParticleRenderingData<>(\n-                                particleEmitterComponent.ownerEntity.getComponent(particleDataComponent),\n-                                particleEmitterComponent.particlePool\n-                        ));\n+                .filter(emitter -> emitter.ownerEntity.hasComponent(particleDataComponent))\n+                .filter(distinctByKey(emitter -> emitter.particlePool))\n+                .map(emitter -> new ParticleRenderingData<>(\n+                        emitter.ownerEntity.getComponent(particleDataComponent),\n+                        emitter.particlePool\n+                ));\n+    }\n+\n+    private static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {\n+        Set<Object> seen = ConcurrentHashMap.newKeySet();\n+        return element -> seen.add(keyExtractor.apply(element));", "originalCommit": "556eef00b5a9c81810cc67ec3347a9cdf9472aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NjU4Mg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3939#discussion_r422266582", "bodyText": "Is it important that particle emitters and particale data are updated in separate loops, i.e., that the particle data is updated after all emitters have been updated? If so, please provide a brief comment stating the reason here.\nOtherwise, this could be done in a single forEach:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    particleEmitters.forEach(x -> updateParticleData(x, delta));\n          \n          \n            \n                    particleEmitters.forEach(x -> {\n          \n          \n            \n                        updateParticleEmitters(x, delta);\n          \n          \n            \n                        updateParticleData(x, delta);\n          \n          \n            \n                    });", "author": "skaldarnar", "createdAt": "2020-05-08T17:20:17Z", "path": "engine/src/main/java/org/terasology/particles/updating/ParticleUpdaterImpl.java", "diffHunk": "@@ -116,9 +118,10 @@ public void removeEmitter(final EntityRef emitter) {\n     public void update(final float delta) {\n         movingAvgDelta = TeraMath.lerp(movingAvgDelta, delta, 0.05f);\n \n-        for (ParticleEmitterComponent registeredParticleSystem : ImmutableList.copyOf(registeredParticleSystems)) {\n-            updateParticleSystem(registeredParticleSystem, delta);\n-        }\n+        Collection<ParticleEmitterComponent> particleEmitters = ImmutableList.copyOf(registeredParticleSystems);\n+        particleEmitters.forEach(x -> updateParticleEmitters(x, delta));\n+        particleEmitters.forEach(x -> updateParticleData(x, delta));", "originalCommit": "556eef00b5a9c81810cc67ec3347a9cdf9472aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4ODE0NA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3939#discussion_r422288144", "bodyText": "comment suggestion:\n// It's important to update all emitters before the particle data inside the pools gets updated.\n// This ensures that all freshly revived particles are also being updated.\n\nTo explain it further:\nIn the code you suggested a particle pool would be updated and in following loop iterations, other emitters might revive additional particles in that pool. These weren't part of the update.\nPlease provide feedback if the comment makes that clear enough. I'll add it then.", "author": "kBlaszczyk", "createdAt": "2020-05-08T18:03:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NjU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzOTIyNA==", "url": "https://github.com/MovingBlocks/Terasology/pull/3939#discussion_r422339224", "bodyText": "It does, thanks for explaining! \ud83d\udc4d", "author": "skaldarnar", "createdAt": "2020-05-08T19:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NjU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2ODYyNg==", "url": "https://github.com/MovingBlocks/Terasology/pull/3939#discussion_r422268626", "bodyText": "Would be nice to see some Javadoc here for future contributors (and people not familiar with all the details, just like me ^^)", "author": "skaldarnar", "createdAt": "2020-05-08T17:24:18Z", "path": "engine/src/main/java/org/terasology/particles/updating/ParticleUpdaterImpl.java", "diffHunk": "@@ -299,29 +302,39 @@ private void updateEmitter(final ParticleEmitterComponent particleEmitter, final\n         }\n     }\n \n-    private void updateParticleSystem(final ParticleEmitterComponent partSys, final float delta) {\n-        if (partSys.enabled && (partSys.particleSpawnsLeft == ParticleEmitterComponent.INFINITE_PARTICLE_SPAWNS || partSys.particleSpawnsLeft > 0)) {\n-            updateEmitter(partSys, 0, delta); // Emit particles\n+    private void updateParticleEmitters(final ParticleEmitterComponent emitter, final float delta) {", "originalCommit": "556eef00b5a9c81810cc67ec3347a9cdf9472aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2ODk3NQ==", "url": "https://github.com/MovingBlocks/Terasology/pull/3939#discussion_r422268975", "bodyText": "Same here. In combination with the comment further up this might also be the right spot to describe invariants or assumptions.", "author": "skaldarnar", "createdAt": "2020-05-08T17:24:53Z", "path": "engine/src/main/java/org/terasology/particles/updating/ParticleUpdaterImpl.java", "diffHunk": "@@ -299,29 +302,39 @@ private void updateEmitter(final ParticleEmitterComponent particleEmitter, final\n         }\n     }\n \n-    private void updateParticleSystem(final ParticleEmitterComponent partSys, final float delta) {\n-        if (partSys.enabled && (partSys.particleSpawnsLeft == ParticleEmitterComponent.INFINITE_PARTICLE_SPAWNS || partSys.particleSpawnsLeft > 0)) {\n-            updateEmitter(partSys, 0, delta); // Emit particles\n+    private void updateParticleEmitters(final ParticleEmitterComponent emitter, final float delta) {\n+        if (emitter.enabled && (emitter.particleSpawnsLeft == ParticleEmitterComponent.INFINITE_PARTICLE_SPAWNS || emitter.particleSpawnsLeft > 0)) {\n+            updateEmitter(emitter, 0, delta); // Emit particles\n         }\n \n-        updateParticles(partSys, delta); // Update particle lifetime and Affectors\n+        updateEmitterLifeTime(emitter, delta);\n+    }\n+\n+    private void updateParticleData(final ParticleEmitterComponent particleSystem, float delta) {", "originalCommit": "556eef00b5a9c81810cc67ec3347a9cdf9472aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4cf5494caaca9e74b262d77cf42e62d2730382a7", "url": "https://github.com/MovingBlocks/Terasology/commit/4cf5494caaca9e74b262d77cf42e62d2730382a7", "message": "Add some comments and Javadoc.", "committedDate": "2020-05-08T18:26:28Z", "type": "commit"}]}