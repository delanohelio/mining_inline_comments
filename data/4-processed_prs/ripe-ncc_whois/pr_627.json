{"pr_number": 627, "pr_title": "More frequent ripe authoritative resource refresh", "pr_createdAt": "2020-04-20T06:41:12Z", "pr_url": "https://github.com/RIPE-NCC/whois/pull/627", "timeline": [{"oid": "c5ccbc0158f1b1853f60afc60cc44175135a8534", "url": "https://github.com/RIPE-NCC/whois/commit/c5ccbc0158f1b1853f60afc60cc44175135a8534", "message": "Refresh RIPE authoritative resources every 15 minutes.\nSource authoritative resource data from RSNg.", "committedDate": "2020-04-17T11:38:22Z", "type": "commit"}, {"oid": "f92cfa0b5155d8fb913f6307f53dc297922c50a2", "url": "https://github.com/RIPE-NCC/whois/commit/f92cfa0b5155d8fb913f6307f53dc297922c50a2", "message": "Handle json unmarshalling.", "committedDate": "2020-04-20T06:39:24Z", "type": "commit"}, {"oid": "8ac0814a12c7cfe901c20e8202e2de88f13eeac8", "url": "https://github.com/RIPE-NCC/whois/commit/8ac0814a12c7cfe901c20e8202e2de88f13eeac8", "message": "Added property to fix tests.", "committedDate": "2020-04-20T07:29:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjIxNA==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411152214", "bodyText": "Use CIString? Or are these values always lowercase?", "author": "eshryane", "createdAt": "2020-04-20T07:24:25Z", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");", "originalCommit": "f92cfa0b5155d8fb913f6307f53dc297922c50a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NzgyNg==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411277826", "bodyText": "They're part of delegated stats format and always lowercase apparently..", "author": "sbusk", "createdAt": "2020-04-20T10:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3ODYxMw==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411278613", "bodyText": "Ok if it's already implemented this way", "author": "eshryane", "createdAt": "2020-04-20T10:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1MjQyNQ==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411152425", "bodyText": "Use CIString for parameters also?", "author": "eshryane", "createdAt": "2020-04-20T07:24:48Z", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,", "originalCommit": "f92cfa0b5155d8fb913f6307f53dc297922c50a2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjc5NA==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411152794", "bodyText": "Document when an asterisk is used? Is this RSNG specific, or in the delegated stats format?", "author": "eshryane", "createdAt": "2020-04-20T07:25:29Z", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,\n+                        final String countryCode,\n+                        final String type,\n+                        final String start,\n+                        final String value,\n+                        final String status,\n+                        final String expectedSource) {\n+\n+        if (!source.toLowerCase().contains(expectedSource)) {\n+            logger.debug(\"Ignoring source '{}', expected {}\", source, expectedSource);\n+            return;\n+        }\n+\n+        if (countryCode.indexOf('*') != -1) {", "originalCommit": "f92cfa0b5155d8fb913f6307f53dc297922c50a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NzQ3OA==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411277478", "bodyText": "This was in the existing code.. it's in the delegated stats format (which RSNG also outputs).", "author": "sbusk", "createdAt": "2020-04-20T10:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NDc5Mw==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411154793", "bodyText": "Replace ignored with ignored.getClass().getName() for consistency (default toString() may print anything).", "author": "eshryane", "createdAt": "2020-04-20T07:28:54Z", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AbstractAuthoritativeResourceLoader.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.google.common.collect.Sets;\n+import net.ripe.commons.ip.Asn;\n+import net.ripe.commons.ip.AsnRange;\n+import net.ripe.commons.ip.Ipv4;\n+import net.ripe.commons.ip.Ipv4Range;\n+import net.ripe.commons.ip.Ipv6;\n+import net.ripe.commons.ip.Ipv6Range;\n+import net.ripe.commons.ip.SortedRangeSet;\n+import net.ripe.db.whois.common.ip.Ipv4Resource;\n+import org.slf4j.Logger;\n+\n+import java.util.Set;\n+\n+abstract class AbstractAuthoritativeResourceLoader {\n+\n+    private final static Set<String> ALLOWED_STATUSES = Sets.newHashSet(\"allocated\", \"assigned\", \"available\", \"reserved\");\n+\n+    protected final Logger logger;\n+\n+    final SortedRangeSet<Asn, AsnRange> autNums = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv4, Ipv4Range> ipv4Space = new SortedRangeSet<>();\n+    final SortedRangeSet<Ipv6, Ipv6Range> ipv6Space = new SortedRangeSet<>();\n+\n+    AbstractAuthoritativeResourceLoader(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    void handleResource(final String source,\n+                        final String countryCode,\n+                        final String type,\n+                        final String start,\n+                        final String value,\n+                        final String status,\n+                        final String expectedSource) {\n+\n+        if (!source.toLowerCase().contains(expectedSource)) {\n+            logger.debug(\"Ignoring source '{}', expected {}\", source, expectedSource);\n+            return;\n+        }\n+\n+        if (countryCode.indexOf('*') != -1) {\n+            logger.debug(\"Ignoring country code '{}'\", countryCode);\n+            return;\n+        }\n+\n+        if (!ALLOWED_STATUSES.contains(status)) {\n+            logger.debug(\"Ignoring status '{}'\", status);\n+            return;\n+        }\n+\n+        try {\n+            switch (type) {\n+                case \"ipv4\":\n+                    createIpv4Resource(start, value);\n+                    break;\n+                case \"ipv6\":\n+                    createIpv6Resource(start, value);\n+                    break;\n+                case \"asn\":\n+                    createAutNum(start, value);\n+                    break;\n+                default:\n+                    logger.debug(\"Unsupported type '{}\", type);\n+                    break;\n+            }\n+        } catch (RuntimeException ignored) {\n+            logger.warn(\"Unexpected '{}-{}'\", ignored, ignored.getMessage());", "originalCommit": "f92cfa0b5155d8fb913f6307f53dc297922c50a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0MTE1MQ==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r414541151", "bodyText": "I don't mind to leave as-is, whatever you prefer", "author": "eshryane", "createdAt": "2020-04-24T12:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NDc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODQ1NQ==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411158455", "bodyText": "Do you also need to update AuthoritativeResourceRefreshTask.java to poll more frequently? It's currently set to once per hour", "author": "eshryane", "createdAt": "2020-04-20T07:35:34Z", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/AuthoritativeResourceImportTask.java", "diffHunk": "@@ -65,22 +58,10 @@ public void setEmbeddedValueResolver(final StringValueResolver valueResolver) {\n     @Scheduled(cron = \"0 15 0 * * *\")", "originalCommit": "f92cfa0b5155d8fb913f6307f53dc297922c50a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NzEwMA==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411277100", "bodyText": "Grs sources are refreshed on an hourly basis, the main source is refreshed every minute (if there are changes).", "author": "sbusk", "createdAt": "2020-04-20T10:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3ODI0MQ==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411278241", "bodyText": "OK, it's the GRS caches that are refreshed once an hour, thanks.", "author": "eshryane", "createdAt": "2020-04-20T10:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTYxNQ==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411159615", "bodyText": "Why are you using an explicit ObjectMapper, rather than creating a domain class for the response (and have JAX-RS handle it automatically)?", "author": "eshryane", "createdAt": "2020-04-20T07:37:42Z", "path": "whois-commons/src/main/java/net/ripe/db/whois/common/grs/RipeAuthoritativeResourceImportTask.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package net.ripe.db.whois.common.grs;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Sets;\n+import net.javacrumbs.shedlock.core.SchedulerLock;\n+import net.ripe.db.whois.common.dao.ResourceDataDao;\n+import net.ripe.db.whois.common.scheduler.DailyScheduledTask;\n+import org.glassfish.jersey.client.ClientProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import java.io.IOException;\n+\n+@Component\n+public class RipeAuthoritativeResourceImportTask extends AbstractAutoritativeResourceImportTask implements DailyScheduledTask {\n+\n+    protected static final String TASK_NAME = \"RipeAuthoritativeResourceImport\";\n+\n+    private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private final String baseUrl;\n+\n+    private Client client;\n+\n+    @Autowired\n+    public RipeAuthoritativeResourceImportTask(final ResourceDataDao resourceDataDao,\n+                                               @Value(\"${grs.import.enabled}\") final boolean enabled,\n+                                               @Value(\"${rsng.base.url}\") final String baseUrl) {\n+        super(enabled, resourceDataDao);\n+        this.baseUrl = baseUrl;\n+        this.client = ClientBuilder.newBuilder()\n+                .property(ClientProperties.CONNECT_TIMEOUT, 10_000)\n+                .property(ClientProperties.READ_TIMEOUT, 10_000)\n+                .build();\n+    }\n+\n+    /**\n+     * Run every 15 minutes.\n+     */\n+    @Override\n+    @Scheduled(cron = \"0 5/15 * * * *\")\n+    @SchedulerLock(name = TASK_NAME)\n+    public void run() {\n+        doImport(Sets.newHashSet(\"ripe\"));\n+    }\n+\n+    @Override\n+    protected AuthoritativeResource fetchAuthoritativeResource(String sourceName) throws IOException {\n+        final AuthoritativeResource authoritativeResource = new AuthoritativeResourceJsonLoader(LOGGER).load(\n+            OBJECT_MAPPER.readValue(", "originalCommit": "8ac0814a12c7cfe901c20e8202e2de88f13eeac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI3NjcwMw==", "url": "https://github.com/RIPE-NCC/whois/pull/627#discussion_r411276703", "bodyText": "As discussed during standup I completely agree it should be done automatically (I'd set it up like that initially) but for some reason it doesn't work with Jersey. I'll put a TODO in there as agreed.", "author": "sbusk", "createdAt": "2020-04-20T10:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTYxNQ=="}], "type": "inlineReview"}, {"oid": "4837c63ade4983d11f9d3d2eb98442e0915fccde", "url": "https://github.com/RIPE-NCC/whois/commit/4837c63ade4983d11f9d3d2eb98442e0915fccde", "message": "Use either RSNG import or delegated stats file for authoritative resource import depending on whether RSNG base url property has been set.", "committedDate": "2020-04-21T15:08:47Z", "type": "commit"}, {"oid": "40dcb030ebb139fa8f9a345f101d84781a8d7c3b", "url": "https://github.com/RIPE-NCC/whois/commit/40dcb030ebb139fa8f9a345f101d84781a8d7c3b", "message": "Always log state of Authoritative Resource import tasks on startup.", "committedDate": "2020-04-21T15:26:55Z", "type": "commit"}, {"oid": "0898022c2abfbe36724139801cf276a4303fdf87", "url": "https://github.com/RIPE-NCC/whois/commit/0898022c2abfbe36724139801cf276a4303fdf87", "message": "Log actual import enabled state.", "committedDate": "2020-04-21T20:53:09Z", "type": "commit"}]}