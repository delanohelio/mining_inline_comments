{"pr_number": 1881, "pr_title": "Document advice class name hard coding", "pr_createdAt": "2020-12-10T18:26:24Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881", "timeline": [{"oid": "3bf00c0e278bc77fd950caf8124875d6f6c1ab43", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3bf00c0e278bc77fd950caf8124875d6f6c1ab43", "message": "document why class names are hard coded and concatenated.", "committedDate": "2020-12-10T18:24:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMDQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540400442", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Subclasses of `InstrumentationModule` will often implement advice classes static inner classes.\n          \n          \n            \n            Subclasses of `InstrumentationModule` will often implement advice classes as static inner classes.", "author": "iNikem", "createdAt": "2020-12-10T18:28:43Z", "path": "docs/contributing/writing-instrumentation.md", "diffHunk": "@@ -124,3 +124,27 @@ are not legal in Java 7 (and prior) bytecode.\n Because OpenTelemetry API has many common default methods (e.g. `Span.current()`),\n the `javaagent-api` artifact has a class `Java8BytecodeBridge` which provides static methods\n for accessing these default methods from advice.\n+\n+### Why hard code advice class names?\n+\n+Subclasses of `InstrumentationModule` will often implement advice classes static inner classes.", "originalCommit": "3bf00c0e278bc77fd950caf8124875d6f6c1ab43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTIxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540401215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Simply referring to the inner class and\n          \n          \n            \n            calling `getName()` would be easier to read and understand than\n          \n          \n            \n            Simply writing `WonderfulAdvice.class.getName()` would be easier to read and understand than", "author": "iNikem", "createdAt": "2020-12-10T18:29:47Z", "path": "docs/contributing/writing-instrumentation.md", "diffHunk": "@@ -124,3 +124,27 @@ are not legal in Java 7 (and prior) bytecode.\n Because OpenTelemetry API has many common default methods (e.g. `Span.current()`),\n the `javaagent-api` artifact has a class `Java8BytecodeBridge` which provides static methods\n for accessing these default methods from advice.\n+\n+### Why hard code advice class names?\n+\n+Subclasses of `InstrumentationModule` will often implement advice classes static inner classes.\n+These classes are referred to by name in the mappings from method descriptor to advice class,\n+typically in the `transform()` method.\n+\n+For instance, this `MyInstrumentationModule` defines a single advice that mathches\n+on a single `execute` method:\n+\n+```\n+transformers.put(\n+  isMethod().and(named(\"execute\")), \n+  MyInstrumentationModule.class.getName() + \"$WonderfulAdvice\");\n+```\n+\n+Simply referring to the inner class and\n+calling `getName()` would be easier to read and understand than", "originalCommit": "3bf00c0e278bc77fd950caf8124875d6f6c1ab43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNjc0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540406746", "bodyText": "Thanks.", "author": "breedx-splk", "createdAt": "2020-12-10T18:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDczMTczMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540731733", "bodyText": "You decided against accepting this suggestion? It is fine, you just send mixed signals here :)", "author": "iNikem", "createdAt": "2020-12-11T07:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTg0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540401841", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Instrumentation modules are typically loaded by the user's classloader, and this \n          \n          \n            \n            Instrumentation modules are loaded by the agent's classloader, and this", "author": "iNikem", "createdAt": "2020-12-10T18:30:42Z", "path": "docs/contributing/writing-instrumentation.md", "diffHunk": "@@ -124,3 +124,27 @@ are not legal in Java 7 (and prior) bytecode.\n Because OpenTelemetry API has many common default methods (e.g. `Span.current()`),\n the `javaagent-api` artifact has a class `Java8BytecodeBridge` which provides static methods\n for accessing these default methods from advice.\n+\n+### Why hard code advice class names?\n+\n+Subclasses of `InstrumentationModule` will often implement advice classes static inner classes.\n+These classes are referred to by name in the mappings from method descriptor to advice class,\n+typically in the `transform()` method.\n+\n+For instance, this `MyInstrumentationModule` defines a single advice that mathches\n+on a single `execute` method:\n+\n+```\n+transformers.put(\n+  isMethod().and(named(\"execute\")), \n+  MyInstrumentationModule.class.getName() + \"$WonderfulAdvice\");\n+```\n+\n+Simply referring to the inner class and\n+calling `getName()` would be easier to read and understand than\n+this odd mix of string concatenation...but please NOTE:  **this is intentional** \n+and should be maintained.\n+\n+Instrumentation modules are typically loaded by the user's classloader, and this ", "originalCommit": "3bf00c0e278bc77fd950caf8124875d6f6c1ab43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwOTU3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540409576", "bodyText": "Thanks for clearing me up, I had it backwards!", "author": "breedx-splk", "createdAt": "2020-12-10T18:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTg0MQ=="}], "type": "inlineReview"}, {"oid": "8b6c2e0ef4ffa5a7469746e0e92588927f0c0113", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8b6c2e0ef4ffa5a7469746e0e92588927f0c0113", "message": "Update docs/contributing/writing-instrumentation.md\n\nCo-authored-by: Nikita Salnikov-Tarnovski <gnikem@gmail.com>", "committedDate": "2020-12-10T18:38:00Z", "type": "commit"}, {"oid": "c3f542e2193aabd2369da414d3f919906da004fd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c3f542e2193aabd2369da414d3f919906da004fd", "message": "Update docs/contributing/writing-instrumentation.md\n\nCo-authored-by: Nikita Salnikov-Tarnovski <gnikem@gmail.com>", "committedDate": "2020-12-10T18:41:50Z", "type": "commit"}, {"oid": "e44518fd941473f08db965c587930861a1b0fd21", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e44518fd941473f08db965c587930861a1b0fd21", "message": "spotless", "committedDate": "2020-12-10T22:46:26Z", "type": "commit"}, {"oid": "84b52db98873253a2094e5b39c10bc4e3c1cfa9b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84b52db98873253a2094e5b39c10bc4e3c1cfa9b", "message": "Merge remote-tracking branch 'origin/doc_advice_class_string_concat' into doc_advice_class_string_concat\n\n# Conflicts:\n#\tdocs/contributing/writing-instrumentation.md", "committedDate": "2020-12-10T22:47:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxNTMyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540815320", "bodyText": "transformers() method belongs to the TypeInstrumentation interface and I think it's a bit better to focus on them in this particular gotcha. A module just brings everything together.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Subclasses of `InstrumentationModule` will often implement advice classes as static inner classes.\n          \n          \n            \n            Implementations of `TypeInstrumentation` will often implement advice classes as static inner classes.", "author": "mateuszrzeszutek", "createdAt": "2020-12-11T09:39:22Z", "path": "docs/contributing/writing-instrumentation.md", "diffHunk": "@@ -124,3 +124,27 @@ are not legal in Java 7 (and prior) bytecode.\n Because OpenTelemetry API has many common default methods (e.g. `Span.current()`),\n the `javaagent-api` artifact has a class `Java8BytecodeBridge` which provides static methods\n for accessing these default methods from advice.\n+\n+### Why hard code advice class names?\n+\n+Subclasses of `InstrumentationModule` will often implement advice classes as static inner classes.", "originalCommit": "84b52db98873253a2094e5b39c10bc4e3c1cfa9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxNjIzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r540816239", "bodyText": "It might be useful to mention that it's okay to keep the advice class in the module class or in the package.", "author": "mateuszrzeszutek", "createdAt": "2020-12-11T09:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxNTMyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4MTcwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1881#discussion_r541081707", "bodyText": "Thanks @mateuszrzeszutek I agree that your suggestion is more specific.  Adding it.", "author": "breedx-splk", "createdAt": "2020-12-11T16:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxNTMyMA=="}], "type": "inlineReview"}, {"oid": "57f716678c8a2fd77e7750161a7d5d29c185586b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/57f716678c8a2fd77e7750161a7d5d29c185586b", "message": "Update docs/contributing/writing-instrumentation.md\n\nCo-authored-by: Mateusz Rzeszutek <mrzeszutek@splunk.com>", "committedDate": "2020-12-11T16:46:12Z", "type": "commit"}]}