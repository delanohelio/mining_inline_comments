{"pr_number": 573, "pr_title": "Propagate full Context while processing http server requests", "pr_createdAt": "2020-06-24T13:42:45Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573", "timeline": [{"oid": "e1d1a97fd3e1590802cd223cf902f6938b4a827f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1d1a97fd3e1590802cd223cf902f6938b4a827f", "message": "Propagate full Context while processing http server requests", "committedDate": "2020-06-24T15:43:24Z", "type": "commit"}, {"oid": "e1d1a97fd3e1590802cd223cf902f6938b4a827f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1d1a97fd3e1590802cd223cf902f6938b4a827f", "message": "Propagate full Context while processing http server requests", "committedDate": "2020-06-24T15:43:24Z", "type": "forcePushed"}, {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/967d0935f5c9ad0007539b8fd1bf35e411bbca45", "message": "Polish", "committedDate": "2020-06-24T18:00:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDczMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445130731", "bodyText": "currently at least, this method isn't needed (the only callers use the public overrides directly)", "author": "trask", "createdAt": "2020-06-24T19:46:18Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -223,9 +230,15 @@ private void setStatus(Span span, int status) {\n \n   protected abstract String method(REQUEST request);\n \n-  protected void attachSpanToRequest(Span span, REQUEST request) {}\n+  /** Stores given context in the given request in implementation specific way. */\n+  protected void attachContextToRequest(Context context, REQUEST request) {}\n \n-  protected Span getAttachedSpan(REQUEST request) {\n+  /**\n+   * Returns context stored to given request by {@link #attachContextToRequest(Context, REQUEST)}.\n+   *\n+   * <p>May be null.\n+   */\n+  protected Context getAttachedContext(REQUEST request) {", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjI2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322262", "bodyText": "I am thinking about making this public and changing this and attachContextToRequest abstract methods here.", "author": "iNikem", "createdAt": "2020-06-25T05:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTEzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445131131", "bodyText": "what do u think of startScope?", "author": "trask", "createdAt": "2020-06-24T19:47:07Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -172,8 +173,15 @@ public Span getCurrentSpan() {\n     return tracer.getCurrentSpan();\n   }\n \n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n+  /**\n+   * Creates new scoped context with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope newScope(Span span, REQUEST request) {", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322360", "bodyText": "Both looks fine to me, can rename if you wish.", "author": "iNikem", "createdAt": "2020-06-25T05:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzODY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445138691", "bodyText": "not related to this PR, but how about below\nmaybe at some point we could make HttpServerTracer.CONTEXT_ATTRIBUTE protected to force access via tracers(?)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                  if (contextAttribute instanceof Context) {\n          \n          \n            \n                    request.removeAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                    TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n          \n          \n            \n                  }\n          \n          \n            \n                  Context context = TRACER.removeAttachedContext(request);\n          \n          \n            \n                  if (context != null) {\n          \n          \n            \n                    TRACER.end(getSpan(context), request.getResponse().getStatus());\n          \n          \n            \n                  }", "author": "trask", "createdAt": "2020-06-24T20:01:21Z", "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/GrizzlyHttpHandlerInstrumentation.java", "diffHunk": "@@ -111,10 +113,10 @@ public static void methodExit(\n \n     @Override\n     public void onAfterService(final Request request) {\n-      final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof Span) {\n-        request.removeAttribute(SPAN_ATTRIBUTE);\n-        TRACER.end((Span) spanAttr, request.getResponse().getStatus());\n+      final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n+      if (contextAttribute instanceof Context) {\n+        request.removeAttribute(CONTEXT_ATTRIBUTE);\n+        TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n       }", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjg2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322866", "bodyText": "Definitely. In my ideal vision even these methods will not be needed and tracer will expose more semantically meaningful methods if it cannot handle everything itself.", "author": "iNikem", "createdAt": "2020-06-25T05:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzODY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDc0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445170745", "bodyText": "this just got re-worked in DataDog/dd-trace-java#1595", "author": "trask", "createdAt": "2020-06-24T21:03:59Z", "path": "instrumentation/servlet/request-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3HttpServerTracer.java", "diffHunk": "@@ -73,22 +77,23 @@ public void onRequest(Span span, HttpServletRequest request) {\n    * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n    * chain.\n    */\n+  // TODO review this hacky-hacky", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445173003", "bodyText": "\"ServletContext\" sounds so much like something else, maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Advice.Local(\"_originalServletContext\") Object originalServletContext,\n          \n          \n            \n                    @Advice.Local(\"_originalContext\") Object originalContext,", "author": "trask", "createdAt": "2020-06-24T21:08:51Z", "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -87,12 +90,13 @@ public RequestDispatcherInstrumentation() {\n     public static SpanWithScope start(\n         @Advice.Origin(\"#m\") final String method,\n         @Advice.This final RequestDispatcher dispatcher,\n-        @Advice.Local(\"_originalServletSpan\") Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") Object originalServletContext,", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDg5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445200890", "bodyText": "hm, good question, i think include and forward are synchronous, so thread-local context propagation should be enough", "author": "trask", "createdAt": "2020-06-24T22:13:08Z", "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -125,28 +129,31 @@ public static SpanWithScope start(\n \n       // save the original servlet span before overwriting the request attribute, so that it can be\n       // restored on method exit\n-      originalServletSpan = request.getAttribute(SPAN_ATTRIBUTE);\n+      originalServletContext = request.getAttribute(CONTEXT_ATTRIBUTE);\n \n       // this tells the dispatched servlet to use the current span as the parent for its work\n-      request.setAttribute(SPAN_ATTRIBUTE, span);\n+      Context newContext = withSpan(span, Context.current());\n+      request.setAttribute(CONTEXT_ATTRIBUTE, newContext);\n \n-      return new SpanWithScope(span, currentContextWith(span));\n+      return new SpanWithScope(span, withScopedContext(newContext));\n     }\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void stop(\n         @Advice.Enter final SpanWithScope spanWithScope,\n-        @Advice.Local(\"_originalServletSpan\") final Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") final Object originalServletContext,\n         @Advice.Argument(0) final ServletRequest request,\n         @Advice.Thrown final Throwable throwable) {\n       if (spanWithScope == null) {\n         return;\n       }\n \n       // restore the original servlet span\n-      // since spanWithScope is non-null here, originalServletSpan must have been set with the prior\n+      // since spanWithScope is non-null here, originalServletContext must have been set with the\n+      // prior\n       // servlet span (as opposed to remaining unset)\n-      request.setAttribute(SPAN_ATTRIBUTE, originalServletSpan);\n+      // TODO review this logic. Seems like manual context management", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNjU2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445336566", "bodyText": "Made #579 to come back to this later.", "author": "iNikem", "createdAt": "2020-06-25T06:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTEzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445205130", "bodyText": "can u hold off on this scala-related cleanup? there's big changes coming shortly in DataDog/dd-trace-java#1625", "author": "trask", "createdAt": "2020-06-24T22:24:30Z", "path": "instrumentation/java-concurrent/akka-2.5-testing/akka-2.5-testing.gradle", "diffHunk": "@@ -4,12 +4,8 @@ ext {\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n-apply from: \"$rootDir/gradle/test-with-scala.gradle\"", "originalCommit": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMzk1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445323954", "bodyText": "Yeah, that crept here semi-accidentally, because my builds failed for some mysterious reasons :( Will try to revert", "author": "iNikem", "createdAt": "2020-06-25T05:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTEzMA=="}], "type": "inlineReview"}, {"oid": "b5c1d7d047f2ed915556f6486e7db6d8f0829821", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b5c1d7d047f2ed915556f6486e7db6d8f0829821", "message": "Polish and revert scala test related changes", "committedDate": "2020-06-25T06:36:20Z", "type": "commit"}, {"oid": "abec5d5f5b2a8c7412968f8b2d40adace5ed7dbf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/abec5d5f5b2a8c7412968f8b2d40adace5ed7dbf", "message": "Merge branch 'master' into request-context-propagation", "committedDate": "2020-06-25T06:59:42Z", "type": "commit"}, {"oid": "e2e2b6077c26e07b2c98e8d8837003d91daa0259", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2e2b6077c26e07b2c98e8d8837003d91daa0259", "message": "Merge remote-tracking branch 'upstream/master' into request-context-propagation", "committedDate": "2020-06-26T14:12:17Z", "type": "commit"}, {"oid": "d2b014a3b31be0c1bad854eba1434d6883666f77", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d2b014a3b31be0c1bad854eba1434d6883666f77", "message": "Format", "committedDate": "2020-06-26T14:34:30Z", "type": "commit"}]}