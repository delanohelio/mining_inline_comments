{"pr_number": 1207, "pr_title": "Review semantic convention for Http Server spans", "pr_createdAt": "2020-09-15T13:03:55Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207", "timeline": [{"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "message": "Review semantic convention for Http Server spans", "committedDate": "2020-09-15T13:35:38Z", "type": "commit"}, {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "message": "Review semantic convention for Http Server spans", "committedDate": "2020-09-15T13:35:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMjY2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489132668", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **[3]:** In case of Almeria, return values are [SessionProtocol](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java),\n          \n          \n            \n            **[3]:** In case of Armeria, return values are [SessionProtocol](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java),", "author": "trask", "createdAt": "2020-09-16T03:01:21Z", "path": "docs/semantic-conventions.md", "diffHunk": "@@ -0,0 +1,36 @@\n+# Semantic conventions\n+\n+This document describes which [OpenTelemetry Semantic Conventions](https://github.com/open-telemetry/opentelemetry-specification/tree/master/specification/trace/semantic_conventions)\n+are implemented by Java autoinstrumentation and which ones are not.\n+\n+## Http Server\n+\n+| Attribute | Required | Implemented? |\n+|---|:---:|:---:|\n+| `http.method` | Y | + |\n+| `http.url` | N | + |\n+| `http.target` | N | - [1] |\n+| `http.host` | N | - [1] |\n+| `http.scheme` | N | - [1] |\n+| `http.status_code` | Y | + |\n+| `http.status_text` | N | - [2] |\n+| `http.flavor` | N | + [3] |\n+| `http.user_agent` | N | + |\n+| `http.request_content_length` | N | - |\n+| `http.request_content_length_uncompressed` | N | - |\n+| `http.response_content_length` | N | - |\n+| `http.response_content_length_uncompressed` | N | - |\n+| `http.server_name` | N | - |\n+| `http.route` | N | - |\n+| `http.client_ip` | N | + |\n+\n+**[1]:** As the majority of Java frameworks don't provide a standard way to obtain \"The full request\n+target as passed in a HTTP request line or equivalent.\", we don't set `http.target` semantic\n+attribute. As either it or `http.url` is required, we set the latter. This, in turn, makes setting\n+`http.schema` and `http.host` unnecessary duplication. Therefore, we do not set them as well.\n+\n+**[2]: TODO** After [this PR](https://github.com/open-telemetry/opentelemetry-specification/issues/950)\n+ is merged, remove this line. If it rejected, then implement this attribute.\n+\n+**[3]:** In case of Almeria, return values are [SessionProtocol](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java),", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMzAwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489133003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              But in Java world there is now standard way to access \"The full request target as passed in a HTTP request line or equivalent\"\n          \n          \n            \n              But in Java world there is no standard way to access \"The full request target as passed in a HTTP request line or equivalent\"", "author": "trask", "createdAt": "2020-09-16T03:02:49Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -169,27 +165,30 @@ protected void onConnection(Span span, CONNECTION connection) {\n     }\n   }\n \n-  // TODO use semantic attributes\n   protected void onRequest(Span span, REQUEST request) {\n     SemanticAttributes.HTTP_METHOD.set(span, method(request));\n-    String userAgent = requestHeader(request, USER_AGENT);\n-    if (userAgent != null) {\n-      SemanticAttributes.HTTP_USER_AGENT.set(span, userAgent);\n-    }\n+    SemanticAttributes.HTTP_USER_AGENT.set(span, requestHeader(request, USER_AGENT));\n+\n+    setUrl(span, request);\n \n-    try {\n-      URI url = url(request);\n-      HttpUrlUtils.setHttpUrl(span, url);\n-      if (Config.get().isHttpServerTagQueryString()) {\n-        span.setAttribute(MoreAttributes.HTTP_QUERY, url.getQuery());\n-        span.setAttribute(MoreAttributes.HTTP_FRAGMENT, url.getFragment());\n-      }\n-    } catch (Exception e) {\n-      log.debug(\"Error tagging url\", e);\n-    }\n     // TODO set resource name from URL.\n   }\n \n+  /*\n+  https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n+\n+  HTTP semantic convention recommends setting http.scheme, http.host, http.target attributes\n+  instead of http.url because it \"is usually not readily available on the server side but would have\n+  to be assembled in a cumbersome and sometimes lossy process from other information\".\n+\n+  But in Java world there is now standard way to access \"The full request target as passed in a HTTP request line or equivalent\"", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNDAzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489134036", "bodyText": "I think warn is ok, but wouldn't be opposed to debug either", "author": "trask", "createdAt": "2020-09-16T03:07:04Z", "path": "instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -26,21 +26,30 @@\n import java.security.Principal;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class ServletHttpServerTracer<RESPONSE>\n     extends HttpServerTracer<HttpServletRequest, RESPONSE, HttpServletRequest, HttpServletRequest> {\n \n+  private static final Logger log = LoggerFactory.getLogger(ServletHttpServerTracer.class);\n+\n   @Override\n-  // TODO this violates convention\n-  protected URI url(HttpServletRequest httpServletRequest) throws URISyntaxException {\n-    return new URI(\n-        httpServletRequest.getScheme(),\n-        null,\n-        httpServletRequest.getServerName(),\n-        httpServletRequest.getServerPort(),\n-        httpServletRequest.getRequestURI(),\n-        httpServletRequest.getQueryString(),\n-        null);\n+  protected String url(HttpServletRequest httpServletRequest) {\n+    try {\n+      return new URI(\n+              httpServletRequest.getScheme(),\n+              null,\n+              httpServletRequest.getServerName(),\n+              httpServletRequest.getServerPort(),\n+              httpServletRequest.getRequestURI(),\n+              httpServletRequest.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.warn(\"Failed to construct request URI\", e);", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTQ4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135483", "bodyText": "check startsWith \"http://\" or startsWith \"https://\" to avoid edge case", "author": "trask", "createdAt": "2020-09-16T03:12:43Z", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/server/NettyHttpServerTracer.java", "diffHunk": "@@ -60,10 +58,10 @@ public Context getServerContext(ChannelTraceContext channelTraceContext) {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.getUri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.getUri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.getUri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTU4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135586", "bodyText": "same comment", "author": "trask", "createdAt": "2020-09-16T03:13:07Z", "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_0/server/NettyHttpServerTracer.java", "diffHunk": "@@ -70,10 +68,10 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.getUri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.getUri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.getUri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTY0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135644", "bodyText": "same", "author": "trask", "createdAt": "2020-09-16T03:13:22Z", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_1/server/NettyHttpServerTracer.java", "diffHunk": "@@ -70,10 +68,10 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.uri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.uri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.uri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "originalCommit": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dde4fd52ed8e45fc087d912c9494c163312cc62d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dde4fd52ed8e45fc087d912c9494c163312cc62d", "message": "Polish", "committedDate": "2020-09-16T05:52:25Z", "type": "commit"}]}