{"pr_number": 345, "pr_title": "Add support for SignalFx and AppOptics tracing annotations", "pr_createdAt": "2020-04-23T15:13:27Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345", "timeline": [{"oid": "82754fef823f59d48e32fb22d2ae826d98c10e0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/82754fef823f59d48e32fb22d2ae826d98c10e0f", "message": "Add support for SignalFx and AppOptics tracing annotations", "committedDate": "2020-04-23T15:11:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDQwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345#discussion_r414254409", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static {\n          \n          \n            \n                ConfigUtils.updateConfig {\n          \n          \n            \n                  System.clearProperty(\"ota.trace.annotations\")\n          \n          \n            \n                  System.setProperty(\"ota.trace.classes.exclude\", TraceProvidersTest.name + \"*\")\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              def specCleanup() {\n          \n          \n            \n                ConfigUtils.updateConfig {\n          \n          \n            \n                  System.clearProperty(\"ota.trace.classes.exclude\")\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n      \n    \n    \n  \n\nIs this needed?", "author": "trask", "createdAt": "2020-04-24T02:53:31Z", "path": "instrumentation/trace-annotation/src/test/groovy/TraceProvidersTest.groovy", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.ConfigUtils\n+import io.opentelemetry.test.annotation.SayTracedHello\n+\n+/**\n+ * This test verifies that Otel supports various 3rd-party trace annotations\n+ */\n+class TraceProvidersTest extends AgentTestRunner {\n+\n+  static {\n+    ConfigUtils.updateConfig {\n+      System.clearProperty(\"ota.trace.annotations\")\n+      System.setProperty(\"ota.trace.classes.exclude\", TraceProvidersTest.name + \"*\")\n+    }\n+  }\n+\n+  def specCleanup() {\n+    ConfigUtils.updateConfig {\n+      System.clearProperty(\"ota.trace.classes.exclude\")\n+    }\n+  }\n+", "originalCommit": "82754fef823f59d48e32fb22d2ae826d98c10e0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3NjQ4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345#discussion_r414276482", "bodyText": "Specifying ota.trace.classes.exclude will stop instrumenting this test class itself. For me it polluted the log during test run. And I assume it adds some overhead to test running as well. I think all tests would benefit from this exclusion.\nHaving non-empty ota.trace.annotations will turn off default annotations list and this will result in this test failing.\nThus I think this configuration should stay.", "author": "iNikem", "createdAt": "2020-04-24T04:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3OTk5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345#discussion_r414279993", "bodyText": "Ah, makes sense. Can that change be made globally in AgentTestRunner (with a comment, so we don't accidentally remove it later thinking it's not needed)? Also, maybe this change would be better in a separate PR?", "author": "trask", "createdAt": "2020-04-24T04:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MDk5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345#discussion_r414280998", "bodyText": "So I will leave this PR as it is and will do a new PR where I will add ota.trace.classes.exclude to AgentTestRunner? Sounds good.", "author": "iNikem", "createdAt": "2020-04-24T04:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MTM1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345#discussion_r414281353", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-04-24T04:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNTI0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345#discussion_r414535245", "bodyText": "@trask Unfortunately it turns out that we cannot just globally apply class exclusion for all test classes. Some of them, e.g. ExecutorInstrumentationTest expect that their inner classes get instrumented during test. So that would require reviewing existing test and stricter rules for future ones. Will drop this until the benefit is clear.", "author": "iNikem", "createdAt": "2020-04-24T12:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDQwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDk3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/345#discussion_r414830970", "bodyText": "ok, makes sense. do u mind removing, or adding a comment explaining, the usage in TraceProvidersTest.groovy then?", "author": "trask", "createdAt": "2020-04-24T20:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NDQwOQ=="}], "type": "inlineReview"}]}