{"pr_number": 1910, "pr_title": "HTTP client instrumentation cleanup: google-http-client", "pr_createdAt": "2020-12-15T01:38:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910", "timeline": [{"oid": "2f2c7527af6a696e6734c125cfa5c3f7d76b44e5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2f2c7527af6a696e6734c125cfa5c3f7d76b44e5", "message": "HTTP client instrumentation cleanup: google-http-client", "committedDate": "2020-12-15T01:37:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2MzY3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543063674", "bodyText": "I liked this comment", "author": "anuraaga", "createdAt": "2020-12-15T05:46:33Z", "path": "instrumentation/google-http-client-1.19/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/googlehttpclient/GoogleHttpClientInstrumentationModule.java", "diffHunk": "@@ -85,21 +82,19 @@ public static void methodEnter(\n         @Advice.Local(\"otelContext\") Context context,\n         @Advice.Local(\"otelScope\") Scope scope) {\n \n-      ContextStore<HttpRequest, Context> contextStore =\n-          InstrumentationContext.get(HttpRequest.class, Context.class);\n-      context = contextStore.get(request);\n-\n-      if (context == null) {\n-        Context parentContext = currentContext();\n-        if (tracer().shouldStartSpan(parentContext)) {\n-          context = tracer().startSpan(parentContext, request, request.getHeaders());\n-          contextStore.put(request, context);\n-          scope = context.makeCurrent();\n-        }\n-      } else {\n-        // span was created by GoogleHttpClientAsyncAdvice instrumentation below", "originalCommit": "2f2c7527af6a696e6734c125cfa5c3f7d76b44e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4MjUxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543082516", "bodyText": "It's back \ud83d\udc4d", "author": "trask", "createdAt": "2020-12-15T06:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2MzY3NA=="}], "type": "inlineReview"}, {"oid": "67165da95b60eb7c3d94d3c0dc2f38741a3086d5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/67165da95b60eb7c3d94d3c0dc2f38741a3086d5", "message": "Bring back comment", "committedDate": "2020-12-15T06:34:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5NDM5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543094391", "bodyText": "Is this not needed anymore?", "author": "iNikem", "createdAt": "2020-12-15T07:02:15Z", "path": "instrumentation/google-http-client-1.19/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/googlehttpclient/GoogleHttpClientInstrumentationModule.java", "diffHunk": "@@ -85,21 +82,20 @@ public static void methodEnter(\n         @Advice.Local(\"otelContext\") Context context,\n         @Advice.Local(\"otelScope\") Scope scope) {\n \n-      ContextStore<HttpRequest, Context> contextStore =\n-          InstrumentationContext.get(HttpRequest.class, Context.class);\n-      context = contextStore.get(request);\n-\n-      if (context == null) {\n-        Context parentContext = currentContext();\n-        if (tracer().shouldStartSpan(parentContext)) {\n-          context = tracer().startSpan(parentContext, request, request.getHeaders());\n-          contextStore.put(request, context);", "originalCommit": "67165da95b60eb7c3d94d3c0dc2f38741a3086d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5NzkzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543097933", "bodyText": "I don't think it was needed previously. The ContextStore is only needed to propagate Context from the executeAsync() method to the execute() method.", "author": "trask", "createdAt": "2020-12-15T07:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5NDM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5NDk1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543094959", "bodyText": "I find this comment suspicious. Why of all places here to want to work without executors instrumentations?", "author": "iNikem", "createdAt": "2020-12-15T07:03:34Z", "path": "instrumentation/google-http-client-1.19/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/googlehttpclient/GoogleHttpClientInstrumentationModule.java", "diffHunk": "@@ -138,15 +125,12 @@ public static void methodEnter(\n         return;\n       }\n \n-      context = tracer().startSpan(parentContext, request, request.getHeaders());\n+      context = tracer().startSpan(parentContext, request);\n+      scope = context.makeCurrent();\n \n       // propagating the context manually here so this instrumentation will work with and without\n       // the executors instrumentation", "originalCommit": "67165da95b60eb7c3d94d3c0dc2f38741a3086d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc2MDIyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543760223", "bodyText": "I agree this comment is suspicious, so I removed it \ud83d\ude01.\nI think we always propagate the span out-of-band to the place where it is ended. (this was actually something nice about the Operation concept, b/c you had to pass the Operation object out-of-band to the place where it was ended, orthogonal to in-band Context propagation)", "author": "trask", "createdAt": "2020-12-15T23:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5NDk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5NTA2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543095065", "bodyText": "Is this not needed anymore?", "author": "iNikem", "createdAt": "2020-12-15T07:03:50Z", "path": "instrumentation/google-http-client-1.19/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/googlehttpclient/GoogleHttpClientInstrumentationModule.java", "diffHunk": "@@ -113,16 +109,7 @@ public static void methodExit(\n       }\n \n       scope.close();\n-      if (throwable == null) {\n-        tracer().end(context, response);\n-      } else {\n-        tracer().endExceptionally(context, response, throwable);\n-      }\n-      // If HttpRequest.setThrowExceptionOnExecuteError is set to false, there are no exceptions\n-      // for a failed request.  Thus, check the response code\n-      if (response != null && !response.isSuccessStatusCode()) {\n-        spanFromContext(context).setStatus(StatusCode.ERROR);", "originalCommit": "67165da95b60eb7c3d94d3c0dc2f38741a3086d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5ODExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1910#discussion_r543098118", "bodyText": "I don't think this was needed previously either. status is set in one of the end() methods above.", "author": "trask", "createdAt": "2020-12-15T07:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5NTA2NQ=="}], "type": "inlineReview"}, {"oid": "8ba38f19b89baf6a817e7972beb7e8e8aee6c08c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ba38f19b89baf6a817e7972beb7e8e8aee6c08c", "message": "Feedback", "committedDate": "2020-12-15T23:17:22Z", "type": "commit"}]}