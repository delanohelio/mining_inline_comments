{"pr_number": 1107, "pr_title": "Merge changes from dd-trace-java 0.58.0, 0.59.0, 0.60.0 (Part 1)", "pr_createdAt": "2020-08-26T19:41:22Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107", "timeline": [{"oid": "6dec7a7eaa9694da0b2e371238ca5f165e6f4214", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6dec7a7eaa9694da0b2e371238ca5f165e6f4214", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-08-26T19:50:49Z", "type": "forcePushed"}, {"oid": "9c6341ff21026d64572b38201fffd6c2e29020ce", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c6341ff21026d64572b38201fffd6c2e29020ce", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-08-27T04:09:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4NDU5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478084594", "bodyText": "cc: @tylerbenson, it looks like muzzle in dd-trace-java is only ever checking 2.11.12 b/c of\nresolutionStrategy {\n  force deps.scala\n}\n\nin test-with-scala.gradle", "author": "trask", "createdAt": "2020-08-27T04:14:07Z", "path": "instrumentation/scala-concurrent/scala-concurrent.gradle", "diffHunk": "@@ -0,0 +1,40 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+apply from: \"$rootDir/gradle/test-with-scala.gradle\"\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+muzzle {\n+  pass {\n+    group = 'org.scala-lang'\n+    module = \"scala-library\"\n+    versions = \"[2.8.0,2.12.0)\"\n+    assertInverse = true\n+  }", "originalCommit": "9c6341ff21026d64572b38201fffd6c2e29020ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU1ODQyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478558421", "bodyText": "did you find a way to solve it?", "author": "tylerbenson", "createdAt": "2020-08-27T16:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4NDU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MDI0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478560240", "bodyText": "I guess that's not a problem here since you aren't forcing that version.  Thanks for calling it out.", "author": "tylerbenson", "createdAt": "2020-08-27T16:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4NDU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3NTgwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478575805", "bodyText": "I took the liberty: DataDog/dd-trace-java#1810", "author": "tylerbenson", "createdAt": "2020-08-27T17:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4NDU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5NzU3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478597572", "bodyText": "It's actually failing for me on latestDepTestCompile which you seem to have removed here.", "author": "tylerbenson", "createdAt": "2020-08-27T17:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4NDU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0MzY5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478643696", "bodyText": "oh, good point, i added it back", "author": "trask", "createdAt": "2020-08-27T19:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODA4NDU5NA=="}], "type": "inlineReview"}, {"oid": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-08-27T04:16:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNjM1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478126353", "bodyText": "Can we confirm this caveat? Should we file an issue?", "author": "anuraaga", "createdAt": "2020-08-27T05:09:37Z", "path": "instrumentation/akka-context-propagation-2.5/src/main/java/io/opentelemetry/instrumentation/auto/akkaconcurrent/AkkaForkJoinPoolInstrumentation.java", "diffHunk": "@@ -28,27 +28,33 @@\n import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n import io.opentelemetry.instrumentation.auto.api.concurrent.ExecutorInstrumentationUtils;\n import io.opentelemetry.instrumentation.auto.api.concurrent.State;\n-import io.opentelemetry.instrumentation.auto.javaconcurrent.AbstractExecutorInstrumentation;\n import io.opentelemetry.javaagent.tooling.Instrumenter;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.Executor;\n import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public final class AkkaExecutorInstrumentation extends AbstractExecutorInstrumentation {\n+public final class AkkaForkJoinPoolInstrumentation extends Instrumenter.Default {\n \n-  public AkkaExecutorInstrumentation() {\n-    super(AbstractExecutorInstrumentation.EXEC_NAME + \".akka_fork_join\");\n+  public AkkaForkJoinPoolInstrumentation() {\n+    super(\"akka_context_propagation\");\n   }\n \n   @Override\n   protected boolean defaultEnabled() {\n     return false;\n   }\n \n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    // This might need to be an extendsClass matcher...", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyOTg3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478129870", "bodyText": "Just checking you saw my response #1089 (comment)", "author": "trask", "createdAt": "2020-08-27T05:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNjM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzODI4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478138289", "bodyText": "So how exceptions are recorded in Finatra? Or are they not?", "author": "iNikem", "createdAt": "2020-08-27T05:28:41Z", "path": "instrumentation/finatra-2.9/src/latestDepTest/groovy/FinatraServerLatestTest.groovy", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.SUCCESS\n+import static io.opentelemetry.trace.Span.Kind.INTERNAL\n+\n+import com.twitter.app.lifecycle.Event\n+import com.twitter.app.lifecycle.Observer\n+import com.twitter.finatra.http.HttpServer\n+import com.twitter.util.Await\n+import com.twitter.util.Closable\n+import com.twitter.util.Duration\n+import com.twitter.util.Promise\n+import io.opentelemetry.auto.test.asserts.TraceAssert\n+import io.opentelemetry.auto.test.base.HttpServerTest\n+import io.opentelemetry.sdk.trace.data.SpanData\n+\n+class FinatraServerLatestTest extends HttpServerTest<HttpServer> {\n+  private static final Duration TIMEOUT = Duration.fromSeconds(5)\n+  private static final Duration STARTUP_TIMEOUT = Duration.fromSeconds(20)\n+\n+  static closeAndWait(Closable closable) {\n+    if (closable != null) {\n+      Await.ready(closable.close(), TIMEOUT)\n+    }\n+  }\n+\n+  @Override\n+  HttpServer startServer(int port) {\n+    HttpServer testServer = new FinatraServer()\n+\n+    // Starting the server is blocking so start it in a separate thread\n+    Thread startupThread = new Thread({\n+      testServer.main(\"-admin.port=:0\", \"-http.port=:\" + port)\n+    })\n+    startupThread.setDaemon(true)\n+    startupThread.start()\n+\n+    Promise<Boolean> startupPromise = new Promise<>()\n+\n+    testServer.withObserver(new Observer() {\n+      @Override\n+      void onSuccess(Event event) {\n+        if (event == testServer.startupCompletionEvent()) {\n+          startupPromise.setValue(true)\n+        }\n+      }\n+\n+      void onEntry(Event event) {\n+\n+      }\n+\n+      @Override\n+      void onFailure(Event stage, Throwable throwable) {\n+        if (stage != Event.Close$.MODULE$) {\n+          startupPromise.setException(throwable)\n+        }\n+      }\n+    })\n+\n+    Await.result(startupPromise, STARTUP_TIMEOUT)\n+\n+    return testServer\n+  }\n+\n+  @Override\n+  boolean hasHandlerSpan() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testNotFound() {\n+    // Resource name is set to \"GET /notFound\"\n+    false\n+  }\n+\n+  @Override\n+  void stopServer(HttpServer httpServer) {\n+    Await.ready(httpServer.close(), TIMEOUT)\n+  }\n+\n+  @Override\n+  void handlerSpan(TraceAssert trace, int index, Object parent, String method = \"GET\", ServerEndpoint endpoint = SUCCESS) {\n+    trace.span(index) {\n+      operationName \"FinatraController\"\n+      spanKind INTERNAL\n+      childOf(parent as SpanData)\n+      // Finatra doesn't propagate the stack trace or exception to the instrumentation\n+      // so the normal errorAttributes() method can't be used", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxODgyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r479718827", "bodyText": "idk, this is not new code in this PR (copied from FinatraServerTest.groovy), opened #1131 to track", "author": "trask", "createdAt": "2020-08-30T04:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzODI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzOTUwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478139508", "bodyText": "@trask You have removed this check in another PR, haven't you?", "author": "iNikem", "createdAt": "2020-08-27T05:30:27Z", "path": "instrumentation/guava-10.0/src/main/java/io/opentelemetry/instrumentation/auto/guava/ListenableFutureInstrumentation.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package datadog.trace.instrumentation.guava10;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.util.concurrent.AbstractFuture;\n+import io.grpc.Context;\n+import io.opentelemetry.instrumentation.auto.api.ContextStore;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.instrumentation.auto.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.instrumentation.auto.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.instrumentation.auto.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Map;\n+import java.util.concurrent.Executor;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+\n+@AutoService(Instrumenter.class)\n+public class ListenableFutureInstrumentation extends Instrumenter.Default {\n+\n+  public ListenableFutureInstrumentation() {\n+    super(\"guava\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"com.google.common.util.concurrent.AbstractFuture\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"addListener\").and(ElementMatchers.takesArguments(Runnable.class, Executor.class)),\n+        ListenableFutureInstrumentation.class.getName() + \"$AddListenerAdvice\");\n+  }\n+\n+  public static class AddListenerAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static State addListenerEnter(\n+        @Advice.Argument(value = 0, readOnly = false) Runnable task,\n+        @Advice.Argument(1) final Executor executor) {\n+      final Context context = Context.current();\n+      final Runnable newTask = RunnableWrapper.wrapIfNeeded(task);\n+      // It is important to check potentially wrapped task if we can instrument task in this\n+      // executor. Some executors do not support wrapped tasks.", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyMDEyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r479720127", "bodyText": "yes, thanks, and this comment prompted #1128", "author": "trask", "createdAt": "2020-08-30T04:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzOTUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE0MDA5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478140092", "bodyText": "I think both properties should be inside ConfigUtils.updateConfig", "author": "iNikem", "createdAt": "2020-08-27T05:31:27Z", "path": "instrumentation/hystrix-1.4/src/test/groovy/HystrixObservableChainTest.groovy", "diffHunk": "@@ -19,13 +19,17 @@ import static io.opentelemetry.auto.test.utils.TraceUtils.runUnderTrace\n \n import com.netflix.hystrix.HystrixObservableCommand\n import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.ConfigUtils\n import rx.Observable\n import rx.schedulers.Schedulers\n \n class HystrixObservableChainTest extends AgentTestRunner {\n   static {\n     // Disable so failure testing below doesn't inadvertently change the behavior.\n     System.setProperty(\"hystrix.command.default.circuitBreaker.enabled\", \"false\")", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxOTA2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r479719063", "bodyText": "hystrix.command.default.circuitBreaker.enabled is configuration for the library under test, not for the instrumentation under test, so not sure it should be under updateConfig", "author": "trask", "createdAt": "2020-08-30T04:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE0MDA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE0MDE2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478140166", "bodyText": "Same here", "author": "iNikem", "createdAt": "2020-08-27T05:31:37Z", "path": "instrumentation/hystrix-1.4/src/test/groovy/HystrixObservableTest.groovy", "diffHunk": "@@ -30,6 +31,9 @@ class HystrixObservableTest extends AgentTestRunner {\n   static {\n     // Disable so failure testing below doesn't inadvertently change the behavior.\n     System.setProperty(\"hystrix.command.default.circuitBreaker.enabled\", \"false\")\n+    ConfigUtils.updateConfig {", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE0MDI1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478140256", "bodyText": "And here", "author": "iNikem", "createdAt": "2020-08-27T05:31:47Z", "path": "instrumentation/hystrix-1.4/src/test/groovy/HystrixTest.groovy", "diffHunk": "@@ -28,6 +29,9 @@ class HystrixTest extends AgentTestRunner {\n   static {\n     // Disable so failure testing below doesn't inadvertently change the behavior.\n     System.setProperty(\"hystrix.command.default.circuitBreaker.enabled\", \"false\")\n+    ConfigUtils.updateConfig {", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE0MzMxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478143310", "bodyText": "This certainly needs javadoc", "author": "iNikem", "createdAt": "2020-08-27T05:36:49Z", "path": "instrumentation/spring/spring-webflux-5.0/spring-webflux-5.0-library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -76,4 +87,13 @@ protected String getInstrumentationName() {\n   public Tracer getTracer() {\n     return tracer;\n   }\n+\n+  private static MethodHandle findRawStatusCode() {", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE0NDIxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1107#discussion_r478144217", "bodyText": "Why this change? Old code seems better to me :)", "author": "iNikem", "createdAt": "2020-08-27T05:38:19Z", "path": "javaagent-tooling/src/test/groovy/io/opentelemetry/javaagent/test/DefaultInstrumenterTest.groovy", "diffHunk": "@@ -93,9 +93,8 @@ class DefaultInstrumenterTest extends AgentSpecification {\n \n   def \"configure default sys prop as #value\"() {\n     setup:\n-    ConfigUtils.updateConfig {\n-      System.setProperty(\"otel.integrations.enabled\", value)\n-    }\n+    System.setProperty(\"otel.integrations.enabled\", value)", "originalCommit": "4ec4e36a1248c7c7eefe67687e5ab8f1436af9ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7935668043648da648079a680e06145610b4a5ca", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7935668043648da648079a680e06145610b4a5ca", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-08-27T18:36:40Z", "type": "forcePushed"}, {"oid": "b78b2db7be966cac1edcf5bbb5646657d28a5a3c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b78b2db7be966cac1edcf5bbb5646657d28a5a3c", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-08-30T04:27:01Z", "type": "forcePushed"}, {"oid": "7f9f61cc2dea4bbd7a251edaae19893751b0e3f1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7f9f61cc2dea4bbd7a251edaae19893751b0e3f1", "message": "Revert \"Config class should be loaded on the bootstrap for instrumentation tests\"\n\nThis reverts commit 4b6af486e62884a9af64a2446a6707152546a966.", "committedDate": "2020-08-30T05:28:41Z", "type": "forcePushed"}, {"oid": "e6be98f0e0dc695e1863d7fdc3cc8ba37cd8d2c7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e6be98f0e0dc695e1863d7fdc3cc8ba37cd8d2c7", "message": "Add classloader matcher to validate scala/akka presence (DataDog/dd-trace-java#1669)", "committedDate": "2020-09-01T17:24:52Z", "type": "commit"}, {"oid": "ea619fb16b4bfd5acadcca93eec8c06a19c62818", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ea619fb16b4bfd5acadcca93eec8c06a19c62818", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-09-01T17:24:54Z", "type": "forcePushed"}, {"oid": "d7d46b2ef9e66b94c9f46837e8961acef37390d3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d7d46b2ef9e66b94c9f46837e8961acef37390d3", "message": "Add instrumentation for Guava ListenableFutures context propagation (DataDog/dd-trace-java#1665)", "committedDate": "2020-09-01T17:31:23Z", "type": "commit"}, {"oid": "9e20571dabad856737ddbb5bff5609b4c1716c84", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e20571dabad856737ddbb5bff5609b4c1716c84", "message": "Separate out Akka ForkJoinPool instrumentation from java_concurrent (DataDog/dd-trace-java#1685)", "committedDate": "2020-09-01T17:31:23Z", "type": "commit"}, {"oid": "9f4c1ae578a4675e8666eacf5d04d5a04aef2790", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f4c1ae578a4675e8666eacf5d04d5a04aef2790", "message": "Separate out Scala ForkJoinPool instrumentation from java_concurrent (DataDog/dd-trace-java#1687)", "committedDate": "2020-09-01T17:31:23Z", "type": "commit"}, {"oid": "4f7e97c0d6b7d078c06b5cfc55e41be87d921d12", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4f7e97c0d6b7d078c06b5cfc55e41be87d921d12", "message": "Fix Spring filter instrumentation edge case (DataDog/dd-trace-java#1700)", "committedDate": "2020-09-01T17:31:23Z", "type": "commit"}, {"oid": "32fb96318b0308d798cfd729b5469931b1805571", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/32fb96318b0308d798cfd729b5469931b1805571", "message": "Fix finatra tests for latest dependencies (DataDog/dd-trace-java#1706)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "e2aca0f378457278ed877d1f4b0f77fdace0d162", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2aca0f378457278ed877d1f4b0f77fdace0d162", "message": "Add muzzle reference detection for invokedynamic calls. (DataDog/dd-trace-java#1712)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "0d4fe92296eecf6772cc2f1cbd92bb3df8ee9742", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0d4fe92296eecf6772cc2f1cbd92bb3df8ee9742", "message": "use spring-webflux-5.1+ ClientResponse.rawStatusCode when available (DataDog/dd-trace-java#1711)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "0cc35d36e535de6ebf26da6c8d2dc43b90a51cc2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0cc35d36e535de6ebf26da6c8d2dc43b90a51cc2", "message": "Move Spring Scheduling RunnableWrapper to separate class (DataDog/dd-trace-java#1717)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "f7b32e4fd54d52b7ed40b0c76a4a3b55e7365ad2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f7b32e4fd54d52b7ed40b0c76a4a3b55e7365ad2", "message": "Enable Async Propagation of trace in Kafka producer callback (DataDog/dd-trace-java#1727)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "a012143ac0cf2fd7627439e3bbca5da6efc8d180", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a012143ac0cf2fd7627439e3bbca5da6efc8d180", "message": "don't cache classloaders which can be skipped by name (DataDog/dd-trace-java#1732)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "80ee4f1d7c8ee02961895b9c2f0bbe8d3b93652d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/80ee4f1d7c8ee02961895b9c2f0bbe8d3b93652d", "message": "verify spring-scheduling supports lambdas (DataDog/dd-trace-java#1750)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "278672595b8ef04492748a7705c5e5c5486233e2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/278672595b8ef04492748a7705c5e5c5486233e2", "message": "disable hystrix tags by default, enabled by system property (DataDog/dd-trace-java#1743)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "43d53c9c0623c381b276c7be7114113182fbb956", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/43d53c9c0623c381b276c7be7114113182fbb956", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-09-01T17:31:24Z", "type": "commit"}, {"oid": "43d53c9c0623c381b276c7be7114113182fbb956", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/43d53c9c0623c381b276c7be7114113182fbb956", "message": "allow context propagation for kafka tombstones (DataDog/dd-trace-java#1754)", "committedDate": "2020-09-01T17:31:24Z", "type": "forcePushed"}]}