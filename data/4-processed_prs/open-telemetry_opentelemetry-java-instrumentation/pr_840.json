{"pr_number": 840, "pr_title": "Generate bootstrap jar with gradle instead of when running tests.", "pr_createdAt": "2020-07-30T09:50:39Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840", "timeline": [{"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "message": "Generate bootstrap jar with gradle instead of when running tests.", "committedDate": "2020-07-30T09:44:51Z", "type": "commit"}, {"oid": "4a23c4bf29bb10f632e77f6fdcca1538d1c39db9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4a23c4bf29bb10f632e77f6fdcca1538d1c39db9", "message": "kill all semicolons", "committedDate": "2020-07-30T11:43:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MTkzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462891939", "bodyText": "Package is certainly weird :)", "author": "iNikem", "createdAt": "2020-07-30T10:07:07Z", "path": "buildSrc/build.gradle.kts", "diffHunk": "@@ -10,6 +10,10 @@ gradlePlugin {\n       id = \"muzzle\"\n       implementationClass = \"MuzzlePlugin\"\n     }\n+    create(\"auto-instrumentation-plugin\") {\n+      id = \"io.opentelemetry.auto.auto-instrumentation\"\n+      implementationClass = \"io.opentelemetry.auto.gradle.instrumentation.AutoInstrumentationPlugin\"", "originalCommit": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2Mzk4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462963989", "bodyText": "Yeah - I did put about a minute into it but couldn't come up with a better package. Let me know if you have a suggestion so I can use it :)", "author": "anuraaga", "createdAt": "2020-07-30T12:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MTkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MjA1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463352053", "bodyText": "Tried a new name let me know :)", "author": "anuraaga", "createdAt": "2020-07-31T01:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MTkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MjE5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462892199", "bodyText": "This comment is not relevant here, is it?", "author": "iNikem", "createdAt": "2020-07-30T10:07:37Z", "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {\n+\n+  /**\n+   * An exact copy of {@code io.opentelemetry.auto.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}.\n+   *\n+   * <p>This list is needed to initialize the bootstrap classpath because Utils' static initializer", "originalCommit": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5Mjg4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462892885", "bodyText": "Why exactly do we have 2 separate arrays that we merge anyway?", "author": "iNikem", "createdAt": "2020-07-30T10:08:57Z", "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {\n+\n+  /**\n+   * An exact copy of {@code io.opentelemetry.auto.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}.\n+   *\n+   * <p>This list is needed to initialize the bootstrap classpath because Utils' static initializer\n+   * references bootstrap classes (e.g. AgentClassLoader).\n+   */\n+  public static final String[] BOOTSTRAP_PACKAGE_PREFIXES_COPY = {\n+    \"io.opentelemetry.auto.common.exec\",\n+    \"io.opentelemetry.auto.slf4j\",\n+    \"io.opentelemetry.auto.config\",\n+    \"io.opentelemetry.auto.bootstrap\",\n+    \"io.opentelemetry.auto.instrumentation.api\",\n+    \"io.opentelemetry.auto.shaded\",\n+    \"io.opentelemetry.auto.typedspan\",\n+  };\n+\n+  private static final String[] TEST_BOOTSTRAP_PREFIXES;\n+\n+  static {\n+    final String[] testBS = {\n+      \"io.opentelemetry.OpenTelemetry\", // OpenTelemetry API\n+      \"io.opentelemetry.common\", // OpenTelemetry API\n+      \"io.opentelemetry.context\", // OpenTelemetry API (context prop)\n+      \"io.opentelemetry.correlationcontext\", // OpenTelemetry API\n+      \"io.opentelemetry.internal\", // OpenTelemetry API\n+      \"io.opentelemetry.metrics\", // OpenTelemetry API\n+      \"io.opentelemetry.trace\", // OpenTelemetry API\n+      \"io.opentelemetry.contrib.auto.annotations\", // OpenTelemetry API Contrib\n+      \"io.grpc.Context\", // OpenTelemetry API dependency\n+      \"io.grpc.Deadline\", // OpenTelemetry API dependency\n+      \"io.grpc.PersistentHashArrayMappedTrie\", // OpenTelemetry API dependency\n+      \"io.grpc.ThreadLocalContextStorage\", // OpenTelemetry API dependency\n+      \"org.slf4j\",\n+      \"ch.qos.logback\",\n+      // Tomcat's servlet classes must be on boostrap\n+      // when running tomcat test\n+      \"javax.servlet.ServletContainerInitializer\",\n+      \"javax.servlet.ServletContext\"\n+    };\n+    TEST_BOOTSTRAP_PREFIXES =\n+        Arrays.copyOf(\n+            BOOTSTRAP_PACKAGE_PREFIXES_COPY,", "originalCommit": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTYyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462965625", "bodyText": "I think it's so one can be pure copy-paste from the business logic.", "author": "anuraaga", "createdAt": "2020-07-30T12:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5Mjg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MzAxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462893017", "bodyText": "Please write a javadoc", "author": "iNikem", "createdAt": "2020-07-30T10:09:11Z", "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {", "originalCommit": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTk4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462965983", "bodyText": "I added a bit, I'll add some more when moving more logic into here, this and instrumentation.gradle are serving the same layer so I may as well move everything into here.", "author": "anuraaga", "createdAt": "2020-07-30T12:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MzAxNw=="}], "type": "inlineReview"}, {"oid": "c0d8827d1258567a19c89481097ba5a1416c8748", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c0d8827d1258567a19c89481097ba5a1416c8748", "message": "docs", "committedDate": "2020-07-30T12:40:07Z", "type": "commit"}, {"oid": "db765979fa43e0ba65db0b1acc1714f63f0db35d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db765979fa43e0ba65db0b1acc1714f63f0db35d", "message": "docs", "committedDate": "2020-07-30T12:40:18Z", "type": "commit"}, {"oid": "c965d5662a7d23edf2648ca50ee2531a858d9c27", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c965d5662a7d23edf2648ca50ee2531a858d9c27", "message": "ByteCodeTest", "committedDate": "2020-07-31T00:14:29Z", "type": "commit"}, {"oid": "fbbf4ba6a4ad448b9de213c1fcfa25232411066b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fbbf4ba6a4ad448b9de213c1fcfa25232411066b", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into gradle-test-bootstrap-jar", "committedDate": "2020-07-31T00:14:34Z", "type": "commit"}, {"oid": "62f57b3fdf1f5f96f303bd0c9c12b976772132e6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/62f57b3fdf1f5f96f303bd0c9c12b976772132e6", "message": "Use latestDepTest classpath for its bootstrap jar", "committedDate": "2020-07-31T00:56:34Z", "type": "commit"}, {"oid": "6607c7bd523043eb9fd7222db9e392fef2a68a43", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6607c7bd523043eb9fd7222db9e392fef2a68a43", "message": "Rename package", "committedDate": "2020-07-31T01:03:17Z", "type": "commit"}, {"oid": "1b6eb9e92c677e961249eb918cff98b38d343a45", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1b6eb9e92c677e961249eb918cff98b38d343a45", "message": "Reformat comment", "committedDate": "2020-07-31T01:06:06Z", "type": "commit"}, {"oid": "42ff6bc17dfec63ba60977997c721747876a65a3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42ff6bc17dfec63ba60977997c721747876a65a3", "message": "Bootstrap jar absolute path", "committedDate": "2020-07-31T02:06:26Z", "type": "commit"}, {"oid": "a2b38da54228e7770dd03e9eaa3012982cc35c4c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a2b38da54228e7770dd03e9eaa3012982cc35c4c", "message": "Save bootstrap jar to reports dir.", "committedDate": "2020-07-31T04:50:24Z", "type": "commit"}, {"oid": "22735eaf180aef9870d2acf08d27d6a75a690192", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/22735eaf180aef9870d2acf08d27d6a75a690192", "message": "Debug", "committedDate": "2020-07-31T05:05:27Z", "type": "commit"}, {"oid": "22735eaf180aef9870d2acf08d27d6a75a690192", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/22735eaf180aef9870d2acf08d27d6a75a690192", "message": "Debug", "committedDate": "2020-07-31T05:05:27Z", "type": "forcePushed"}, {"oid": "58cc63730a117fe7a3ac0581d6e5a075a04f662c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/58cc63730a117fe7a3ac0581d6e5a075a04f662c", "message": "Debug", "committedDate": "2020-07-31T05:08:41Z", "type": "forcePushed"}, {"oid": "bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "message": "Debug", "committedDate": "2020-07-31T05:22:02Z", "type": "commit"}, {"oid": "bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "message": "Debug", "committedDate": "2020-07-31T05:22:02Z", "type": "forcePushed"}, {"oid": "9124dcc5170c99f01d582a90328f4ef010062b3e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9124dcc5170c99f01d582a90328f4ef010062b3e", "message": "Use project.getBuildDir", "committedDate": "2020-07-31T05:44:04Z", "type": "commit"}, {"oid": "ec628ec3ba7ef7c6137e0f10d629040f21984b5d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec628ec3ba7ef7c6137e0f10d629040f21984b5d", "message": "Restore", "committedDate": "2020-07-31T05:46:45Z", "type": "commit"}, {"oid": "afdee18c1b44ade1a8344e129c570075c8018bf3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/afdee18c1b44ade1a8344e129c570075c8018bf3", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into gradle-test-bootstrap-jar", "committedDate": "2020-07-31T05:46:55Z", "type": "commit"}, {"oid": "cf8df84823d0abec9ef5694a9b5ba45c84c201a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf8df84823d0abec9ef5694a9b5ba45c84c201a6", "message": "Revert", "committedDate": "2020-07-31T05:53:48Z", "type": "commit"}, {"oid": "f7d05cc8df9454e36db6aa7e5d662a63022e14be", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f7d05cc8df9454e36db6aa7e5d662a63022e14be", "message": "testFieldInjection is instrumentation test too.", "committedDate": "2020-07-31T06:53:09Z", "type": "commit"}, {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6346080ecc60bd57d26f536d1803dd7903234d86", "message": "Split out bytecode tests for testing-common", "committedDate": "2020-07-31T07:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463476340", "bodyText": "@trask This started throwing an exception even though the assertions pass, any idea if this is a valid fix?", "author": "anuraaga", "createdAt": "2020-07-31T08:28:25Z", "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -177,8 +180,12 @@ class FieldBackedProviderTest extends AgentTestRunner {\n \n   def \"context classes are redefine safe\"() {\n     when:\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(KeyClass, ClasspathUtils.convertToByteArray(KeyClass)))\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(UntransformableKeyClass, ClasspathUtils.convertToByteArray(UntransformableKeyClass)))\n+    try {", "originalCommit": "6346080ecc60bd57d26f536d1803dd7903234d86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4OTA3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463489070", "bodyText": "It seems strange, that test named \"context classes are redefine safe\" is expected to throw an exception.", "author": "iNikem", "createdAt": "2020-07-31T08:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4NjYyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463886626", "bodyText": "i don't think it's a valid fix \ud83d\ude04\ni tried it out, looks like jacoco instrumentation is getting applied to KeyClass and UntransformableKeyClass in your branch, which is causing the redefinition to fail, e.g.:\n  def \"context classes are redefine safe\"() {\n    when:\n    for (Field field : KeyClass.getDeclaredFields()) {\n      println field.getName()\n    }\n\nshows $jacocoData in your branch, but no jacoco field in master.\nit looks like those classes are supposed to be excluded from jacoco:\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/testing-common/testing-common.gradle#L13-L14\nso maybe your changes broke that exclusion somehow?", "author": "trask", "createdAt": "2020-07-31T23:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTI4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463915284", "bodyText": "Thanks for the debugging! Yeah that must be it I see what needs to be fixed. For reference though, does this mean that this behavior is only guaranteed when there isn't another agent running? I wonder how many of our features have that restriction.", "author": "anuraaga", "createdAt": "2020-08-01T03:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTUzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463915530", "bodyText": "Also I don't know why UntransformableKeyClass is not transformable that would be helpful if you know :) Is it a reference to the parent class that fills up the object? I didn't know there was a difference between subclasses of Object and other classes in that regard.", "author": "anuraaga", "createdAt": "2020-08-01T03:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}], "type": "inlineReview"}, {"oid": "d23c8e18116ef65c00528397db092f857e1c9239", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d23c8e18116ef65c00528397db092f857e1c9239", "message": "Apply jacoco configuration to all tests.", "committedDate": "2020-08-01T03:23:18Z", "type": "commit"}, {"oid": "36cf60deb77ceb62a59ff6691dce2b5087e88f2c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36cf60deb77ceb62a59ff6691dce2b5087e88f2c", "message": "Add note that jacoco may be causing frustration.", "committedDate": "2020-08-01T03:25:51Z", "type": "commit"}, {"oid": "5395896946efa3328dc62881582311159c3e2302", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5395896946efa3328dc62881582311159c3e2302", "message": "YOLO alert - Hope my guess at the reason is correct", "committedDate": "2020-08-01T03:30:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjc0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463982741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // NB: This test will fail if some other agent is also running that fills the class structure\n          \n          \n            \n              // before we can. A likely culprit is jacoco if you start seeing failure here due to a change\n          \n          \n            \n              // make sure jacoco exclusion is working.\n          \n          \n            \n              // NB: This test will fail if some other agent is also running that modifies the class structure\n          \n          \n            \n              // in a way that is incompatible with redefining the class back to its original bytecode.\n          \n          \n            \n              // A likely culprit is jacoco if you start seeing failure here due to a change make sure jacoco\n          \n          \n            \n              // exclusion is working.", "author": "trask", "createdAt": "2020-08-01T17:29:24Z", "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -175,6 +178,9 @@ class FieldBackedProviderTest extends AgentTestRunner {\n     new UntransformableKeyClass().incrementContextCount() == 1\n   }\n \n+  // NB: This test will fail if some other agent is also running that fills the class structure\n+  // before we can. A likely culprit is jacoco if you start seeing failure here due to a change\n+  // make sure jacoco exclusion is working.", "originalCommit": "5395896946efa3328dc62881582311159c3e2302", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjg5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463982890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * A class which cannot be transformed by our instrumentation. {@link KeyClass} is an empty object\n          \n          \n            \n               * meaning it has one field available for us to add context through redefinition. {@link\n          \n          \n            \n               * UntransformableKeyClass} has an implicit reference to its parent class, {@link KeyClass} and\n          \n          \n            \n               * thus has no available space for us to add context via redefinition.\n          \n          \n            \n               * A class which will not be transformed by our instrumentation due to {@link\n          \n          \n            \n               * FieldBackedProviderTest#shouldTransformClass(String, ClassLoader)}.", "author": "trask", "createdAt": "2020-08-01T17:31:14Z", "path": "testing-common/src/test/java/context/ContextTestInstrumentation.java", "diffHunk": "@@ -194,7 +194,12 @@ public void putContextCount(final int value) {\n     }\n   }\n \n-  /** A class which cannot be transformed by our instrumentation. */\n+  /**\n+   * A class which cannot be transformed by our instrumentation. {@link KeyClass} is an empty object\n+   * meaning it has one field available for us to add context through redefinition. {@link\n+   * UntransformableKeyClass} has an implicit reference to its parent class, {@link KeyClass} and\n+   * thus has no available space for us to add context via redefinition.", "originalCommit": "5395896946efa3328dc62881582311159c3e2302", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8350101bc08e6cdbd16e3e9c6e4844b1a7c9fb0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8350101bc08e6cdbd16e3e9c6e4844b1a7c9fb0", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-08-02T00:26:29Z", "type": "commit"}]}