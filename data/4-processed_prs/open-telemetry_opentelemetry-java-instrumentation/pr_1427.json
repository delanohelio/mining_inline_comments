{"pr_number": 1427, "pr_title": "Cassandra instrumentations should store normalised CQL queries as db.statement", "pr_createdAt": "2020-10-20T11:11:02Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDQwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508414405", "bodyText": "Should I change Cassandra 4.0 tests to use testcontainers as well? WDYT?", "author": "mateuszrzeszutek", "createdAt": "2020-10-20T11:12:51Z", "path": "instrumentation/cassandra/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -13,39 +13,45 @@ import io.opentelemetry.instrumentation.test.AgentTestRunner\n import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n import io.opentelemetry.sdk.trace.data.SpanData\n import io.opentelemetry.trace.attributes.SemanticAttributes\n+import java.time.Duration\n import java.util.concurrent.Executors\n import java.util.concurrent.atomic.AtomicBoolean\n-import org.cassandraunit.utils.EmbeddedCassandraServerHelper\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import org.testcontainers.containers.GenericContainer\n+import org.testcontainers.containers.output.Slf4jLogConsumer\n import spock.lang.Shared\n \n class CassandraClientTest extends AgentTestRunner {\n+  private static final Logger log = LoggerFactory.getLogger(CassandraClientTest)\n \n   @Shared\n-  Cluster cluster\n+  def executor = Executors.newCachedThreadPool()\n \n   @Shared\n-  def executor = Executors.newCachedThreadPool()\n+  GenericContainer cassandra\n+  @Shared\n+  int cassandraPort\n+  @Shared\n+  Cluster cluster\n \n   def setupSpec() {\n-    /*\n-     This timeout seems excessive but we've seen tests fail with timeout of 40s.\n-     TODO: if we continue to see failures we may want to consider using 'real' Cassandra\n-     started in container like we do for memcached. Note: this will complicate things because\n-     tests would have to assume they run under shared Cassandra and act accordingly.\n-      */\n-    EmbeddedCassandraServerHelper.startEmbeddedCassandra(EmbeddedCassandraServerHelper.CASSANDRA_RNDPORT_YML_FILE, 120000L)\n-\n-    cluster = EmbeddedCassandraServerHelper.getCluster()\n-\n-    /*\n-    Looks like sometimes our requests fail because Cassandra takes to long to respond,\n-    Increase this timeout as well to try to cope with this.\n-     */\n-    cluster.getConfiguration().getSocketOptions().setReadTimeoutMillis(120000)\n+    cassandra = new GenericContainer(\"cassandra:3\")\n+      .withExposedPorts(9042)\n+      .withLogConsumer(new Slf4jLogConsumer(log))\n+      .withStartupTimeout(Duration.ofSeconds(120))\n+    cassandra.start()", "originalCommit": "e1840b8e49ec380c61264fc977a9ab2deb71836b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1OTMwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508459302", "bodyText": "Yes, please. Although in the future I personally would prefer to have these logically separate changes in separate PRs :)", "author": "iNikem", "createdAt": "2020-10-20T12:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2OTUxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508469519", "bodyText": "I agree, I probably should have split this PR... but once I started working on this there were so many things that needed to be fixed/improved that I went with the flow and put them all here \ud83d\ude05", "author": "mateuszrzeszutek", "createdAt": "2020-10-20T12:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508458508", "bodyText": "I don't like this new package structure. How many classes in total are there under io.opentelemetry.javaagent.instrumentation.api.db package? Do we really need to split them even more into several subpackages?", "author": "iNikem", "createdAt": "2020-10-20T12:29:09Z", "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/cassandra/CassandraQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.cassandra;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.SqlNormalizer;", "originalCommit": "21411639181b1718429b53a8bd1d722fb7520113", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NjQ3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508466479", "bodyText": "Honestly I don't really like it as well, it's too long and there's too much nesting. How about ...api.db.normalizer? The auto-generated code probably needs its own package, because that package needs to be excluded from spotbugs/checkstyle.", "author": "mateuszrzeszutek", "createdAt": "2020-10-20T12:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxNjMwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508516304", "bodyText": "Makes sense", "author": "iNikem", "createdAt": "2020-10-20T13:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1NzM3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508557374", "bodyText": "Done", "author": "mateuszrzeszutek", "createdAt": "2020-10-20T14:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk0MTkxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508941914", "bodyText": "\ud83e\udd73", "author": "trask", "createdAt": "2020-10-21T01:54:04Z", "path": "instrumentation/cassandra/cassandra-3.0/cassandra-3.0.gradle", "diffHunk": "@@ -1,8 +1,5 @@\n // Set properties before any plugins get loaded\n ext {\n-  // TODO switch to container-based tests (away from cassandraunit)\n-  // Tests use cassandraunit, which runs embedded Cassandra 3, which is currently incompatible with Java 9.\n-  maxJavaVersionForTests = JavaVersion.VERSION_1_8", "originalCommit": "5bae7d96ac93d95187e14c739ac19825675f1467", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk0NDk0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508944948", "bodyText": "this feels cassandra-specific enough, and small enough, to not include in the api", "author": "trask", "createdAt": "2020-10-21T02:05:30Z", "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/CassandraQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CassandraQueryNormalizer {", "originalCommit": "5bae7d96ac93d95187e14c739ac19825675f1467", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508950507", "bodyText": "how about io.opentelemetry.javaagent.instrumentation.api.normalizer?\ni'm hoping io.opentelemetry.javaagent.instrumentation.api.db.DbSystem may go away open-telemetry/opentelemetry-java#1841, which would then leave .db empty\nalso, maybe it should go in instrumentation-api? (we can also decide this later)", "author": "trask", "createdAt": "2020-10-21T02:26:02Z", "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "diffHunk": "@@ -22,7 +11,7 @@ options {\n \n PARSER_BEGIN(SqlNormalizer)\n \n-package io.opentelemetry.javaagent.instrumentation.jdbc.normalizer;\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer;", "originalCommit": "5bae7d96ac93d95187e14c739ac19825675f1467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MzQ4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509083489", "bodyText": "api.normalizer is strange. We don't normalize API, do we? I think we need some sort of qualification here.", "author": "iNikem", "createdAt": "2020-10-21T08:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNzgyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509137824", "bodyText": "api.querynormalizer?\n\nalso, maybe it should go in instrumentation-api? (we can also decide this later)\n\nHmm, there's no need for this class to be accessible in manual instrumentations. Also, shouldn't we treat instrumentation-api kind of like a public API?", "author": "mateuszrzeszutek", "createdAt": "2020-10-21T09:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNjMxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509226317", "bodyText": "There is no need, but there can be a \"want\". Manual instrumentations may want to have access to a standard normalization logic.", "author": "iNikem", "createdAt": "2020-10-21T12:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5OTcyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509699726", "bodyText": "How about api.normalize? or api.normalization?", "author": "trask", "createdAt": "2020-10-21T21:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTQ5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r510015496", "bodyText": "Hmm, that still sounds kind of like we're normalizing API.\nHow about leaving it like it is for now? We can come back to this issue when DbSystem gets deleted", "author": "mateuszrzeszutek", "createdAt": "2020-10-22T09:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}], "type": "inlineReview"}, {"oid": "99fa6a20bb997ccc1a374ee4a1a791bb268f2312", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/99fa6a20bb997ccc1a374ee4a1a791bb268f2312", "message": "Move CassandraQueryNormalizer to cassandra instrumentations", "committedDate": "2020-10-21T09:52:11Z", "type": "forcePushed"}, {"oid": "0fc74a00013f301ac17f08a15e6d1cd7d662f06c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0fc74a00013f301ac17f08a15e6d1cd7d662f06c", "message": "Cassandra instrumentations should store normalised CQL queries as db.statement\n\n* Move `DbSystem` to package `...instrumentation.api.db`\n* Move `SqlNormalizer` to `javaagent-api`\n* Refactor Cassandra 3.0 tests so that they use testcontainers (and run on Java 11)\n* Implement Cassandra statement normalization", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "20e4c301e8b4b4b67757fad6ce34289f5a2517aa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/20e4c301e8b4b4b67757fad6ce34289f5a2517aa", "message": "spotbugs", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "bed1b940ccaa323040907570a6a437b727c8c62e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bed1b940ccaa323040907570a6a437b727c8c62e", "message": "Remove no longer needed classes from JDBC instrumentations' helperClassNames()", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "87ae8d79f28e32c5ae97cacf1dd9ea2a3698c352", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/87ae8d79f28e32c5ae97cacf1dd9ea2a3698c352", "message": "spotless", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "4334831327a7c571a0bb49fe21b15356e2ed012c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4334831327a7c571a0bb49fe21b15356e2ed012c", "message": "Use testcontainers in cassandra 4.0 tests", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "97424dceb7ca60b7d4ca8ef6909125582a6e2553", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97424dceb7ca60b7d4ca8ef6909125582a6e2553", "message": "Move SqlNormalizer to package ...api.db.normalizer", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "16b885645e02b9920c3528b75f41087e2a54e2af", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/16b885645e02b9920c3528b75f41087e2a54e2af", "message": "Move CassandraQueryNormalizer to cassandra instrumentations", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "bd417f913b259470f9ec18c72b9074831e0f02d1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bd417f913b259470f9ec18c72b9074831e0f02d1", "message": "muzzle fix", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "d1d6cc0cbb438a177fbc353ad45ad95215179ddf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1d6cc0cbb438a177fbc353ad45ad95215179ddf", "message": "Exclude Cassandra tests from CircleCI", "committedDate": "2020-10-22T09:24:28Z", "type": "commit"}, {"oid": "d1d6cc0cbb438a177fbc353ad45ad95215179ddf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1d6cc0cbb438a177fbc353ad45ad95215179ddf", "message": "Exclude Cassandra tests from CircleCI", "committedDate": "2020-10-22T09:24:28Z", "type": "forcePushed"}]}