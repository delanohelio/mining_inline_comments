{"pr_number": 152, "pr_title": "More general class loading instrumentation", "pr_createdAt": "2020-02-10T18:51:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152", "timeline": [{"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7ed62c8c7a055fba499f3e9a38e12a3a79a1456c", "message": "More general class loading instrumentation", "committedDate": "2020-02-10T18:47:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377939512", "bodyText": "Worth excluding the internal classloader or any classloader that we know delegates properly?", "author": "tylerbenson", "createdAt": "2020-02-11T22:32:26Z", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));", "originalCommit": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDQyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377990429", "bodyText": "ya, makes sense to exclude java.lang.ClassLoader itself. not sure any others are really worth it, wdyt?", "author": "trask", "createdAt": "2020-02-12T01:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODYyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378468623", "bodyText": "I think at least AgentClassLoader too.  I guess any other classloader could either explicitly or implicitly not delegate, so I think those are the only two that could work.", "author": "tylerbenson", "createdAt": "2020-02-12T19:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4NTY1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378485652", "bodyText": "done", "author": "trask", "createdAt": "2020-02-12T20:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDcyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377940725", "bodyText": "What is this for?", "author": "tylerbenson", "createdAt": "2020-02-11T22:35:06Z", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {Constants.class.getName()};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"loadClass\"))\n+            .and(\n+                takesArguments(1)\n+                    .and(takesArgument(0, named(\"java.lang.String\")))\n+                    .or(\n+                        takesArguments(2)\n+                            .and(takesArgument(0, named(\"java.lang.String\")))\n+                            .and(takesArgument(1, named(\"boolean\")))))\n+            .and(isPublic().or(isProtected()))\n+            .and(not(isStatic())),\n+        ClassloadingInstrumentation.class.getName() + \"$LoadClassAdvice\");\n+  }\n+\n+  public static class LoadClassAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)", "originalCommit": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDg0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377990844", "bodyText": "this tells byte buddy to skip the loadClass() method body if we return something non-null (since we want to short-circuit and return from loadClass() right away if we find what we're looking for in the bootstrap class loader", "author": "trask", "createdAt": "2020-02-12T01:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTQ5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378469490", "bodyText": "oh, I see... cool.", "author": "tylerbenson", "createdAt": "2020-02-12T19:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377941346", "bodyText": "Consider adding a unit test for this project with a regular urlclassloader that doesn't delegate properly.", "author": "tylerbenson", "createdAt": "2020-02-11T22:36:37Z", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {", "originalCommit": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTcyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377941729", "bodyText": "Also, a class comment here explaining the reason for this instrumentation would be a good idea since it might not be obvious to everyone.", "author": "tylerbenson", "createdAt": "2020-02-11T22:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDE5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377990197", "bodyText": "done", "author": "trask", "createdAt": "2020-02-12T01:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng=="}], "type": "inlineReview"}, {"oid": "bb6b67fa894296cc3f3ce977809b54822ba9115f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb6b67fa894296cc3f3ce977809b54822ba9115f", "message": "Merge remote-tracking branch 'upstream/master' into more-general-class-loading-instrumentation", "committedDate": "2020-02-12T00:35:37Z", "type": "commit"}, {"oid": "487feb54f407bae3f7ff3fc04264f7a9d0fa2653", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/487feb54f407bae3f7ff3fc04264f7a9d0fa2653", "message": "Add test against non-delegating URLClassLoader", "committedDate": "2020-02-12T00:51:26Z", "type": "commit"}, {"oid": "1e7d7199e6baa704a925d825e28abb6de954e061", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e7d7199e6baa704a925d825e28abb6de954e061", "message": "Add class comment", "committedDate": "2020-02-12T01:00:17Z", "type": "commit"}, {"oid": "ad4f9a22eeef6f37f336fe333f8922bfe4474aba", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad4f9a22eeef6f37f336fe333f8922bfe4474aba", "message": "Exclude java.lang.ClassLoader since it delegates", "committedDate": "2020-02-12T01:05:18Z", "type": "commit"}, {"oid": "8aec5a841781a0c633f931b422b244d0d887beb5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8aec5a841781a0c633f931b422b244d0d887beb5", "message": "Merge branch 'master' into more-general-class-loading-instrumentation", "committedDate": "2020-02-12T01:06:21Z", "type": "commit"}, {"oid": "6a9eb0b81b45f1425b70e452b79cde848dc56502", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6a9eb0b81b45f1425b70e452b79cde848dc56502", "message": "Fix codenarc failure", "committedDate": "2020-02-12T01:27:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDI2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378470269", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Some class loaders to do not delegate to their parent, so classes in those class loaders\n          \n          \n            \n             * Some class loaders do not delegate to their parent, so classes in those class loaders", "author": "tylerbenson", "createdAt": "2020-02-12T19:38:41Z", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -20,6 +20,16 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/*\n+ * Some class loaders to do not delegate to their parent, so classes in those class loaders", "originalCommit": "6a9eb0b81b45f1425b70e452b79cde848dc56502", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4NTU4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378485583", "bodyText": "done", "author": "trask", "createdAt": "2020-02-12T20:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDI2OQ=="}], "type": "inlineReview"}, {"oid": "b542fa9fa34d4bceed89fba73255f0bb88f52ab5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b542fa9fa34d4bceed89fba73255f0bb88f52ab5", "message": "Merge remote-tracking branch 'upstream/master' into more-general-class-loading-instrumentation", "committedDate": "2020-02-12T19:46:27Z", "type": "commit"}, {"oid": "350c40f71c65bf4daec88a067d79cd4c2ec49ecf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/350c40f71c65bf4daec88a067d79cd4c2ec49ecf", "message": "Fix comment wording", "committedDate": "2020-02-12T19:47:23Z", "type": "commit"}, {"oid": "b9be4c16e30bc05b9981fd39dd932ec2570c36bf", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b9be4c16e30bc05b9981fd39dd932ec2570c36bf", "message": "Exclude AgentClassLoader as well", "committedDate": "2020-02-12T19:48:25Z", "type": "commit"}]}