{"pr_number": 1610, "pr_title": "Remove Instrumenter.Default", "pr_createdAt": "2020-11-10T10:56:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610", "timeline": [{"oid": "12bb249eb90243bbc237d881b15d71d94b755556", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/12bb249eb90243bbc237d881b15d71d94b755556", "message": "Remove Instrumenter.Default", "committedDate": "2020-11-10T15:41:27Z", "type": "commit"}, {"oid": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "message": "Remove Instrumenter.Default - fix tests", "committedDate": "2020-11-10T15:41:27Z", "type": "commit"}, {"oid": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "message": "Remove Instrumenter.Default - fix tests", "committedDate": "2020-11-10T15:41:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0NjYyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520746627", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            matchers. The result of muzzle matcher is cached per each classloader, so that it is only executed\n          \n          \n            \n            once fo the whole instrumentation module.\n          \n          \n            \n            matchers. The result of muzzle matcher is cached per classloader, so that it is only executed\n          \n          \n            \n            once for the whole instrumentation module.", "author": "trask", "createdAt": "2020-11-10T17:36:51Z", "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -20,30 +20,32 @@ Muzzle has two phases:\n The compile-time reference collection and code generation process is implemented using a ByteBuddy\n plugin (called `MuzzleCodeGenerationPlugin`).\n \n-For each instrumentation the ByteBuddy plugin collects symbols referring to both internal and third\n-party APIs used by the currently processed instrumentation. The reference collection process starts\n-from advice classes (values of the map returned by the `Instrumenter.Default#transformers()` method)\n-and traverses the class graph until it encounters a reference to a non-instrumentation class.\n+For each instrumentation module the ByteBuddy plugin collects symbols referring to both internal and\n+third party APIs used by the currently processed module's type instrumentations (`InstrumentationModule#typeInstrumentations()`).\n+The reference collection process starts from advice classes (values of the map returned by the\n+`TypeInstrumentation#transformers()`method) and traverses the class graph until it encounters\n+a reference to a non-instrumentation class.\n \n All collected references are then used to create a `ReferenceMatcher` instance. This matcher\n-is stored in the instrumentation class in the method `Instrumenter.Default#getMuzzleReferenceMatcher()`.\n-The bytecode of this method (basically an array of `Reference` builder calls) is generated\n-automatically by the ByteBuddy plugin using an ASM code visitor.\n+is stored in the instrumentation module class in the method `InstrumentationModule#getMuzzleReferenceMatcher()`\n+and is shared between all type instrumentations. The bytecode of this method (basically an array of\n+`Reference` builder calls) is generated automatically by the ByteBuddy plugin using an ASM code visitor.\n \n The source code of the compile-time plugin is located in the `javaagent-tooling` module,\n package `io.opentelemetry.javaagent.tooling.muzzle.collector`.\n \n ### Runtime reference matching\n \n-The runtime reference matching process is implemented as a ByteBuddy matcher in `Instrumenter.Default`.\n+The runtime reference matching process is implemented as a ByteBuddy matcher in `InstrumentationModule`.\n `MuzzleMatcher` uses the `getMuzzleReferenceMatcher()` method generated during the compilation phase\n to verify that the class loader of the instrumented type has all necessary symbols (classes,\n methods, fields). If the `ReferenceMatcher` finds any mismatch between collected references and the\n actual application classpath types the whole instrumentation is discarded.\n \n It is worth noting that because the muzzle check is expensive, it is only performed after a match\n-has been made by the `InstrumenterDefault#classLoaderMatcher()` and `Instrumenter.Default#typeMatcher()`\n-matchers.\n+has been made by the `InstrumentationModule#classLoaderMatcher()` and `TypeInstrumentation#typeMatcher()`\n+matchers. The result of muzzle matcher is cached per each classloader, so that it is only executed\n+once fo the whole instrumentation module.", "originalCommit": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0OTM3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520749377", "bodyText": "just checking if intentional", "author": "trask", "createdAt": "2020-11-10T17:40:59Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -135,55 +120,37 @@ public static void assertInstrumentationMuzzled(\n   }\n \n   /**\n-   * Prints all references from all instrumenters present in the passed {@code\n+   * Prints all references from all instrumentation modules present in the passed {@code\n    * instrumentationClassLoader}.\n    *\n    * <p>Called by the {@code printMuzzleReferences} gradle task.\n    */\n   public static void printMuzzleReferences(ClassLoader instrumentationClassLoader) {\n-    for (Object instrumenter : loadAllInstrumenters(instrumentationClassLoader)) {\n-      if (instrumenter instanceof Instrumenter.Default\n-          || instrumenter instanceof InstrumentationModule) {\n+    for (InstrumentationModule instrumentationModule :\n+        ServiceLoader.load(InstrumentationModule.class, instrumentationClassLoader)) {\n+      try {\n+        Method getMuzzleMethod =\n+            instrumentationModule.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n+        ReferenceMatcher muzzle;\n         try {\n-          Method getMuzzleMethod =\n-              instrumenter.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n-          ReferenceMatcher muzzle;\n-          try {\n-            getMuzzleMethod.setAccessible(true);\n-            muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumenter);\n-          } finally {\n-            getMuzzleMethod.setAccessible(false);\n-          }\n-          System.out.println(instrumenter.getClass().getName());\n-          for (Reference ref : muzzle.getReferences()) {\n-            System.out.println(prettyPrint(\"  \", ref));\n-          }\n-        } catch (Exception e) {\n-          System.out.println(\n-              \"Unexpected exception printing references for \" + instrumenter.getClass().getName());\n-          throw new RuntimeException(e);\n+          getMuzzleMethod.setAccessible(true);\n+          muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumentationModule);\n+        } finally {\n+          getMuzzleMethod.setAccessible(false);\n+        }\n+        System.out.println(instrumentationModule.getClass().getName());\n+        for (Reference ref : muzzle.getReferences()) {\n+          System.out.println(prettyPrint(\"  \", ref));\n         }", "originalCommit": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MTY1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520761650", "bodyText": "Sysout? Yes, this class is just a helper that's only run from the Gradle muzzle plugin.", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T17:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0OTM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MDg2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520860863", "bodyText": "oh sorry! i missed that this is inside of printMuzzleReferences \ud83d\ude01", "author": "trask", "createdAt": "2020-11-10T20:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0OTM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MDQyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520750422", "bodyText": "include message in the re-thrown exception instead of sysout?", "author": "trask", "createdAt": "2020-11-10T17:42:37Z", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -135,55 +120,37 @@ public static void assertInstrumentationMuzzled(\n   }\n \n   /**\n-   * Prints all references from all instrumenters present in the passed {@code\n+   * Prints all references from all instrumentation modules present in the passed {@code\n    * instrumentationClassLoader}.\n    *\n    * <p>Called by the {@code printMuzzleReferences} gradle task.\n    */\n   public static void printMuzzleReferences(ClassLoader instrumentationClassLoader) {\n-    for (Object instrumenter : loadAllInstrumenters(instrumentationClassLoader)) {\n-      if (instrumenter instanceof Instrumenter.Default\n-          || instrumenter instanceof InstrumentationModule) {\n+    for (InstrumentationModule instrumentationModule :\n+        ServiceLoader.load(InstrumentationModule.class, instrumentationClassLoader)) {\n+      try {\n+        Method getMuzzleMethod =\n+            instrumentationModule.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n+        ReferenceMatcher muzzle;\n         try {\n-          Method getMuzzleMethod =\n-              instrumenter.getClass().getDeclaredMethod(\"getMuzzleReferenceMatcher\");\n-          ReferenceMatcher muzzle;\n-          try {\n-            getMuzzleMethod.setAccessible(true);\n-            muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumenter);\n-          } finally {\n-            getMuzzleMethod.setAccessible(false);\n-          }\n-          System.out.println(instrumenter.getClass().getName());\n-          for (Reference ref : muzzle.getReferences()) {\n-            System.out.println(prettyPrint(\"  \", ref));\n-          }\n-        } catch (Exception e) {\n-          System.out.println(\n-              \"Unexpected exception printing references for \" + instrumenter.getClass().getName());\n-          throw new RuntimeException(e);\n+          getMuzzleMethod.setAccessible(true);\n+          muzzle = (ReferenceMatcher) getMuzzleMethod.invoke(instrumentationModule);\n+        } finally {\n+          getMuzzleMethod.setAccessible(false);\n+        }\n+        System.out.println(instrumentationModule.getClass().getName());\n+        for (Reference ref : muzzle.getReferences()) {\n+          System.out.println(prettyPrint(\"  \", ref));\n         }\n-      } else {\n-        throw new RuntimeException(\n-            \"class \"\n-                + instrumenter.getClass().getName()\n-                + \" is not a default instrumenter. No refs to print.\");\n+      } catch (Exception e) {\n+        System.out.println(\n+            \"Unexpected exception printing references for \"\n+                + instrumentationModule.getClass().getName());\n+        throw new RuntimeException(e);", "originalCommit": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MjM2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520762366", "bodyText": "I'll do both - as I mentioned in another comment, this class is supposed to print out what it's doing since it's a part of the Gradle plugin.", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T18:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MDQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MTg0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520751841", "bodyText": "this class doesn't look like it changed package?", "author": "trask", "createdAt": "2020-11-10T17:44:51Z", "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -5,11 +5,11 @@\n \n package context\n \n-import static context.ContextTestInstrumentation.IncorrectCallUsageKeyClass\n-import static context.ContextTestInstrumentation.IncorrectContextClassUsageKeyClass\n-import static context.ContextTestInstrumentation.IncorrectKeyClassUsageKeyClass\n-import static context.ContextTestInstrumentation.KeyClass\n-import static context.ContextTestInstrumentation.UntransformableKeyClass\n+import static ContextTestInstrumentationModule.IncorrectCallUsageKeyClass\n+import static ContextTestInstrumentationModule.IncorrectContextClassUsageKeyClass\n+import static ContextTestInstrumentationModule.IncorrectKeyClassUsageKeyClass\n+import static ContextTestInstrumentationModule.KeyClass\n+import static ContextTestInstrumentationModule.UntransformableKeyClass", "originalCommit": "a96a69d2ad78d733966b2e739c15d5f1f0dfa759", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1OTU1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1610#discussion_r520759558", "bodyText": "\ud83d\ude2e\nThat surprised me, I don't know why would IntelliJ do this - reverted.", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T17:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1MTg0MQ=="}], "type": "inlineReview"}, {"oid": "44230cbb3b20a438a5df757203d99827c0cca1a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44230cbb3b20a438a5df757203d99827c0cca1a6", "message": "Update docs/contributing/muzzle.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-10T17:57:07Z", "type": "commit"}, {"oid": "2be88a85e646dc68827edf2bd0d9fb76e6bd8f2c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2be88a85e646dc68827edf2bd0d9fb76e6bd8f2c", "message": "Apply code review comments", "committedDate": "2020-11-10T18:03:34Z", "type": "commit"}]}