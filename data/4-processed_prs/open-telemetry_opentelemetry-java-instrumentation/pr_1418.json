{"pr_number": 1418, "pr_title": "Add context root to the front of the route in the span name", "pr_createdAt": "2020-10-19T03:45:18Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418", "timeline": [{"oid": "319453f241b7b1bd015c5672fc39089e7fb4189c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/319453f241b7b1bd015c5672fc39089e7fb4189c", "message": "Fix", "committedDate": "2020-10-22T22:29:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511704496", "bodyText": "Isn't this too specific a use case to put in BaseTracer?", "author": "anuraaga", "createdAt": "2020-10-26T03:36:33Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -30,6 +30,11 @@\n   public static final ContextKey<Span> CONTEXT_CLIENT_SPAN_KEY =\n       ContextKey.named(\"opentelemetry-trace-auto-client-span-key\");\n \n+  // Keeps track of the application root (e.g. servlet context path) that needs to be prepended", "originalCommit": "9ac0afc7c67684ecd763595ad1c41b5d18639b96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDYzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511704633", "bodyText": "Also is context the only way? I thought servlet has getServletPath and getRequestUri we'd be able to compute the context path based on it?\nhttps://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html", "author": "anuraaga", "createdAt": "2020-10-26T03:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNjE3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511706170", "bodyText": "Isn't this too specific a use case to put in BaseTracer?\n\nThat's a good idea, I can move this to something like an ApplicationRoot utility class in instrumentation-api\n\nAlso is context the only way? I thought servlet has getServletPath and getRequestUri we'd be able to compute the context path based on it?\n\nI'm not following this suggestion, can you expand?", "author": "trask", "createdAt": "2020-10-26T03:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNjU3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511706579", "bodyText": "I'm not following this suggestion, can you expand?\n\nI also might not be following the problem :) But if the problem is the URL we populate is incomplete, I would assume something on HttpServlerRequest would be sufficient to provide the complete URL?", "author": "anuraaga", "createdAt": "2020-10-26T03:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNzA2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511707064", "bodyText": "Got it, ya, that's what this PR does. When servlet starts, it captures request.getContextPath() and stores in the context, so that later on, when routes are updated, they can pre-pend the context path in front of the route.", "author": "trask", "createdAt": "2020-10-26T03:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcxNDExMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511714111", "bodyText": "I see I think I follow - there are places we compute the route and update name, but have no access to the HttpServletRequest. It feels a bit weird to put a string into Context like this, I'd probably put HttpServletRequest itself to indicate we are propagating information about the request.\nAlso instead of ApplicationRoot utility, I was hoping this could go in HttpServletTracer since it's specific to servlet.", "author": "anuraaga", "createdAt": "2020-10-26T04:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcxNTU4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511715585", "bodyText": "I see I think I follow - there are places we compute the route and update name, but have no access to the HttpServletRequest. It feels a bit weird to put a string into Context like this, I'd probably put HttpServletRequest itself to indicate we are propagating information about the request.\n\nWe can't have a ContextKey<HttpServletRequest> in instrumentation-api, since instrumentation-api doesn't have access to HttpServletRequest.\nWe could do ContextKey<Object> and cast it when we pull it out, but that doesn't feel great either.\n\nAlso instead of ApplicationRoot utility, I was hoping this could go in HttpServletTracer since it's specific to servlet.\n\nIt needs to be accessed from Tracers which don't extend HttpServletTracer.\nWe could still put it in HttpServletTracer, and access it from those Tracers, do u think that's better? I don't have strong opinion.", "author": "trask", "createdAt": "2020-10-26T04:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMjg5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511722899", "bodyText": "Perhaps we could have a servlet-utils with a static helper then - actually I had no idea webflux works with servlet since our instrumentation doesn't have a dependency on it! So it seems to make sense that we could have a package dedicated to helping out servlet implementations. Having it outside the main instrumentation API would make me a lot less anxious.", "author": "anuraaga", "createdAt": "2020-10-26T05:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTQ2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511725466", "bodyText": "That being said if my below suggestions make sense I may have been able to avoid the propagation requirement \ud83e\udd1e", "author": "anuraaga", "createdAt": "2020-10-26T05:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczOTkxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511739916", "bodyText": "I think we need propagation at least for JAX-RS.\nI agree there's danger of making it look too general, and people thinking that they need to always use it for all instrumentation.\nA new module :instrumentation:servlet:servlet-context-path that can be imported into other instrumentation as needed seems nice.\nThough if the initial filter/servlet isn't in the same class loader as the jax-rs resource, that may not work, because we will inject the class w/ context key into each place, and they won't share.\nWhat do you think of putting the context key in io.opentelemetry.instrumentation.api.servlet.ContextPath, to make it look less general?\nOr create servlet-context-path as a secondary \"instrumentation-api\" that we include in the bootstrap class loader?\nOr...", "author": "trask", "createdAt": "2020-10-26T06:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NjMxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511746312", "bodyText": "\"Secondar api\" \ud83d\ude31\nIs this whole problem specific to servlets? Or for other HTTP Server spans as well? E.g. Ratpack or Ktor or I-dont-know-what-else?", "author": "iNikem", "createdAt": "2020-10-26T06:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3NDQ5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511774492", "bodyText": "Yeah I'm trying to find a way to avoid extra API for a seemingly very specific use case.\nI have a theory that any request handled by servlet always has access to the HttpServletRequest somehow :) It's one of the reasons I've been persistent here.\nAdding a break point at updateSpanNames and see what's available when running the tests has helped find some options I think.\nI found for resteasy, we can get HttpServletRequest anywhere with this static call ResteasyProviderFactory.getContextData(HttpServletRequest.class)\nFor jersey, it's not HttpServletRequest but we seem to have a similar static call ContextHandler.getCurrentContext().getContextPath().\nSo is it possible for us to use these to solve the problem at the bottom layer? I guess it means introducing e.g., ResteasyAnnotationsTracer extends JaxRsAnnotationsTracer for the implementation-specific extraction but doesn't seem too bad.", "author": "anuraaga", "createdAt": "2020-10-26T08:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMDQ5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512400497", "bodyText": "@anuraaga It looks like ContextHandler.getCurrentContext().getContextPath() is for jetty not jersey (well, would work for jersey running in jetty).", "author": "trask", "createdAt": "2020-10-27T03:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxNTUyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512415521", "bodyText": "Is this whole problem specific to servlets? Or for other HTTP Server spans as well? E.g. Ratpack or Ktor or I-dont-know-what-else?\n\nIt's specific to any routing framework that runs inside of a servlet container. I think I was trying to generalize it too much to \"application root\", but better to keep it specific to \"servlet context path\".", "author": "trask", "createdAt": "2020-10-27T04:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}], "type": "inlineReview"}, {"oid": "a153af513300d8d9fbc1f51be9fa8c1a52512b14", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a153af513300d8d9fbc1f51be9fa8c1a52512b14", "message": "Test against jetty instrumentation", "committedDate": "2020-10-26T04:14:41Z", "type": "forcePushed"}, {"oid": "739524177f3ec74e3f0860ed36ec3cd197916c47", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/739524177f3ec74e3f0860ed36ec3cd197916c47", "message": "Add application root to span name", "committedDate": "2020-10-26T04:47:01Z", "type": "commit"}, {"oid": "8fa7b56a63b0df9ab62617c41d779e12f8e5af8c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8fa7b56a63b0df9ab62617c41d779e12f8e5af8c", "message": "Reduce duplicate context lookups", "committedDate": "2020-10-26T04:47:20Z", "type": "commit"}, {"oid": "3496ed73d9732d9f83642b6f11e635c44d52a273", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3496ed73d9732d9f83642b6f11e635c44d52a273", "message": "Use servlet path as route", "committedDate": "2020-10-26T04:48:40Z", "type": "commit"}, {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8db6d34dd5fb172884da95f93ef49677b048a7c0", "message": "Test against jetty instrumentation", "committedDate": "2020-10-26T04:48:42Z", "type": "commit"}, {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8db6d34dd5fb172884da95f93ef49677b048a7c0", "message": "Test against jetty instrumentation", "committedDate": "2020-10-26T04:48:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzY4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511723689", "bodyText": "I suspect we don't need this since we calculate the server span name correctly in the tracer IIUC. The fact that no tests changed means either this update isn't necessary or we're missing a test :)", "author": "anuraaga", "createdAt": "2020-10-26T05:16:51Z", "path": "instrumentation/jaxrs/jaxrs-1.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v1_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -26,23 +27,24 @@\n \n   public Span startSpan(Class<?> target, Method method) {\n     String pathBasedSpanName = getPathSpanName(target, method);\n-    Span serverSpan = BaseTracer.getCurrentServerSpan();\n+    Context context = Context.current();\n+    Span serverSpan = BaseTracer.getCurrentServerSpan(context);\n \n     // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n     String spanName;\n     if (serverSpan == null) {\n       spanName = pathBasedSpanName;\n     } else {\n       spanName = spanNameForMethod(target, method);\n-      updateServerSpanName(serverSpan, pathBasedSpanName);\n+      updateServerSpanName(context, serverSpan, pathBasedSpanName);", "originalCommit": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNDcyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511734725", "bodyText": "we didn't have any JAX-RS test that used a non-root context path, I added one now", "author": "trask", "createdAt": "2020-10-26T06:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjU2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511752569", "bodyText": "But you did not for JAX-RS 1.0 :)", "author": "iNikem", "createdAt": "2020-10-26T07:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4ODg0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512388848", "bodyText": "I added comment below about missing tests for jaxrs-1.0 and webflux", "author": "trask", "createdAt": "2020-10-27T03:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzk5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511723994", "bodyText": "Here also I suspect updateSpanName(serverSpan) isn't doing anything, and for the non-serverspan case we don't need the getApplicationRoot call", "author": "anuraaga", "createdAt": "2020-10-26T05:18:30Z", "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-common/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v2_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -32,14 +33,16 @@ public Span startSpan(Class<?> target, Method method) {\n     // We create span and immediately update its name\n     // We do that in order to reuse logic inside updateSpanNames method, which is used externally as\n     // well.\n-    Span span = tracer.spanBuilder(\"jax-rs.request\").startSpan();\n-    updateSpanNames(span, BaseTracer.getCurrentServerSpan(), target, method);\n+    Context context = Context.current();\n+    Span span = tracer.spanBuilder(\"jax-rs.request\").setParent(context).startSpan();\n+    updateSpanNames(context, span, BaseTracer.getCurrentServerSpan(context), target, method);\n     return span;\n   }\n \n-  public void updateSpanNames(Span span, Span serverSpan, Class<?> target, Method method) {\n-    // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n-    String pathBasedSpanName = getPathSpanName(target, method);\n+  public void updateSpanNames(\n+      Context context, Span span, Span serverSpan, Class<?> target, Method method) {\n+    String pathBasedSpanName =", "originalCommit": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTEwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511735103", "bodyText": "I think this is needed, I added a test for this now", "author": "trask", "createdAt": "2020-10-26T06:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTI1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511725251", "bodyText": "I think for webflux we can access the ServletHttpRequest directly with an instanceof for the ServerRequest\nhttps://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java#L57", "author": "anuraaga", "createdAt": "2020-10-26T05:24:25Z", "path": "instrumentation/spring/spring-webflux-5.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/webflux/server/HandlerAdapterAdvice.java", "diffHunk": "@@ -51,7 +51,8 @@ public static SpanWithScope methodEnter(\n       PathPattern bestPattern =\n           exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n       if (serverSpan != null && bestPattern != null) {\n-        serverSpan.updateName(bestPattern.getPatternString());\n+        serverSpan.updateName(", "originalCommit": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTMxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511725313", "bodyText": "Let's just use the HttpServletRequest", "author": "anuraaga", "createdAt": "2020-10-26T05:24:42Z", "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringWebMvcTracer.java", "diffHunk": "@@ -31,12 +32,12 @@ public Span startSpan(ModelAndView mv) {\n     return span;\n   }\n \n-  public void onRequest(Span span, HttpServletRequest request) {\n+  public void onRequest(Context context, Span span, HttpServletRequest request) {\n     if (request != null) {\n       Object bestMatchingPattern =\n           request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n       if (bestMatchingPattern != null) {\n-        span.updateName(bestMatchingPattern.toString());\n+        span.updateName(BaseTracer.getApplicationRoot(context) + bestMatchingPattern.toString());", "originalCommit": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d6550ee71146fa12a08204e661109d883ba92047", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6550ee71146fa12a08204e661109d883ba92047", "message": "Access context path directly when possible", "committedDate": "2020-10-26T05:53:48Z", "type": "commit"}, {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a5bc6eb730c114d65a77f07876c5d109ba5e436a", "message": "Add JAX-RS context path test", "committedDate": "2020-10-26T06:02:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTg5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511735893", "bodyText": "I didn't see how to get context path directly here, but will look at it closer tomorrow", "author": "trask", "createdAt": "2020-10-26T06:10:25Z", "path": "instrumentation/spring/spring-webflux-5.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/webflux/server/RouteOnSuccessOrError.java", "diffHunk": "@@ -41,7 +41,8 @@ public void accept(HandlerFunction<?> handler, Throwable throwable) {\n \n           Span serverSpan = context.get(BaseTracer.CONTEXT_SERVER_SPAN_KEY);\n           if (serverSpan != null) {\n-            serverSpan.updateName(parseRoute(predicateString));\n+            serverSpan.updateName(\n+                BaseTracer.getApplicationRoot(context) + parseRoute(predicateString));", "originalCommit": "a5bc6eb730c114d65a77f07876c5d109ba5e436a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc3OTgyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511779828", "bodyText": "It looks like this will work on all webflux, as suspicious as it may appear (let's of course put a instanceof for good measure, but from what I can tell it's always been implemented like this)\n((RequestPath) serverRequest.pathContainer()).contextPath()", "author": "anuraaga", "createdAt": "2020-10-26T08:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4ODAzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512388034", "bodyText": "updated", "author": "trask", "createdAt": "2020-10-27T03:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NzM1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511747352", "bodyText": "Why are you doing it in startScope and not in startSpan? Or even by overriding some getSpanName method?", "author": "iNikem", "createdAt": "2020-10-26T06:51:32Z", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -23,6 +24,22 @@\n \n   private static final Logger log = LoggerFactory.getLogger(ServletHttpServerTracer.class);\n \n+  @Override\n+  public Scope startScope(Span span, HttpServletRequest request) {", "originalCommit": "a5bc6eb730c114d65a77f07876c5d109ba5e436a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMjMzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512402330", "bodyText": "this is a really good question \ud83e\uddd0", "author": "trask", "createdAt": "2020-10-27T03:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NzM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMTkzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512411934", "bodyText": "fixed \ud83d\udc4d", "author": "trask", "createdAt": "2020-10-27T04:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NzM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTAzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511751039", "bodyText": "How can this work? I see in JAX-RS 1.0 tests that we expect span name to be POST /test/hello/{name}. And now you just prepend application root to it?", "author": "iNikem", "createdAt": "2020-10-26T07:03:36Z", "path": "instrumentation/jaxrs/jaxrs-1.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v1_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -26,23 +27,24 @@\n \n   public Span startSpan(Class<?> target, Method method) {\n     String pathBasedSpanName = getPathSpanName(target, method);\n-    Span serverSpan = BaseTracer.getCurrentServerSpan();\n+    Context context = Context.current();\n+    Span serverSpan = BaseTracer.getCurrentServerSpan(context);\n \n     // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n     String spanName;\n     if (serverSpan == null) {\n       spanName = pathBasedSpanName;\n     } else {\n       spanName = spanNameForMethod(target, method);\n-      updateServerSpanName(serverSpan, pathBasedSpanName);\n+      updateServerSpanName(context, serverSpan, pathBasedSpanName);\n     }\n \n     return tracer.spanBuilder(spanName).startSpan();\n   }\n \n-  private void updateServerSpanName(Span span, String spanName) {\n+  private void updateServerSpanName(Context context, Span span, String spanName) {\n     if (!spanName.isEmpty()) {\n-      span.updateName(spanName);\n+      span.updateName(BaseTracer.getApplicationRoot(context) + spanName);", "originalCommit": "a5bc6eb730c114d65a77f07876c5d109ba5e436a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4Nzc4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512387782", "bodyText": "Oops! I fixed the JAX-RS 1.0 instrumentation. Still no test for JAX-RS 1.0 + non-root context path though, I added comment about this below.", "author": "trask", "createdAt": "2020-10-27T02:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjAwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511752007", "bodyText": "Also I don't like this scattered non-obvious logic :( Several places which are very far from each other and not really related now have to implement the same rule for span name. If/when we change them again, it is certain we don't find all these places.\nAt the very least we should encapsulate this name rule and application root access into a separate class. E.g. ServletSpanName or something.", "author": "iNikem", "createdAt": "2020-10-26T07:06:42Z", "path": "instrumentation/jaxrs/jaxrs-1.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v1_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -26,23 +27,24 @@\n \n   public Span startSpan(Class<?> target, Method method) {\n     String pathBasedSpanName = getPathSpanName(target, method);\n-    Span serverSpan = BaseTracer.getCurrentServerSpan();\n+    Context context = Context.current();\n+    Span serverSpan = BaseTracer.getCurrentServerSpan(context);\n \n     // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n     String spanName;\n     if (serverSpan == null) {\n       spanName = pathBasedSpanName;\n     } else {\n       spanName = spanNameForMethod(target, method);\n-      updateServerSpanName(serverSpan, pathBasedSpanName);\n+      updateServerSpanName(context, serverSpan, pathBasedSpanName);\n     }\n \n     return tracer.spanBuilder(spanName).startSpan();\n   }\n \n-  private void updateServerSpanName(Span span, String spanName) {\n+  private void updateServerSpanName(Context context, Span span, String spanName) {\n     if (!spanName.isEmpty()) {\n-      span.updateName(spanName);\n+      span.updateName(BaseTracer.getApplicationRoot(context) + spanName);", "originalCommit": "a5bc6eb730c114d65a77f07876c5d109ba5e436a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxODQ2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512418469", "bodyText": "I think this is addressed now, let me know what u think", "author": "trask", "createdAt": "2020-10-27T05:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NTEyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511755121", "bodyText": "This is essentially one more way to calculate span name. Why we don't use BaseTracer.getApplicationRoot here? We have similar but something different rule scattered across the code base.", "author": "iNikem", "createdAt": "2020-10-26T07:16:18Z", "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringWebMvcTracer.java", "diffHunk": "@@ -36,7 +36,12 @@ public void onRequest(Span span, HttpServletRequest request) {\n       Object bestMatchingPattern =\n           request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n       if (bestMatchingPattern != null) {\n-        span.updateName(bestMatchingPattern.toString());\n+        String contextPath = request.getContextPath();\n+        if (contextPath != null && !contextPath.isEmpty() && !contextPath.equals(\"/\")) {\n+          span.updateName(contextPath + bestMatchingPattern.toString());", "originalCommit": "a5bc6eb730c114d65a77f07876c5d109ba5e436a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxODM2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512418365", "bodyText": "the latest commit consolidates everything to single approach", "author": "trask", "createdAt": "2020-10-27T05:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NTEyMQ=="}], "type": "inlineReview"}, {"oid": "daed03fbb43f5f21d845548d8a383a8b4473a69c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/daed03fbb43f5f21d845548d8a383a8b4473a69c", "message": "Fix JAX-RS 1.0 span names", "committedDate": "2020-10-27T01:22:36Z", "type": "commit"}, {"oid": "95061912bbf61ccb334bfc58ddbf6979da9f6f08", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/95061912bbf61ccb334bfc58ddbf6979da9f6f08", "message": "Remove application root dep from webflux", "committedDate": "2020-10-27T02:42:31Z", "type": "commit"}, {"oid": "c21b46861451b952df98f745c77ec8a574a14a61", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c21b46861451b952df98f745c77ec8a574a14a61", "message": "Better design if we are keeping it", "committedDate": "2020-10-27T03:23:10Z", "type": "commit"}, {"oid": "8b42107843b67b3e6c0ee537a04af467667e9696", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8b42107843b67b3e6c0ee537a04af467667e9696", "message": "Thanks iNikem", "committedDate": "2020-10-27T04:23:55Z", "type": "commit"}, {"oid": "4370108f6dfcc4e6df5019aea7a41fa6f12e42e0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4370108f6dfcc4e6df5019aea7a41fa6f12e42e0", "message": "Revert", "committedDate": "2020-10-27T04:33:54Z", "type": "commit"}, {"oid": "d8e4cb33dae2d730b2e729e00ed3afb2d3dc0ad1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d8e4cb33dae2d730b2e729e00ed3afb2d3dc0ad1", "message": "What it would look like using ServletContextPath everywhere", "committedDate": "2020-10-27T04:48:43Z", "type": "commit"}, {"oid": "90e9561ec5749ad6a94370ebd80300da06bf204d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/90e9561ec5749ad6a94370ebd80300da06bf204d", "message": "Merge remote-tracking branch 'upstream/master' into add-application-root-to-span-name", "committedDate": "2020-10-27T05:04:25Z", "type": "commit"}, {"oid": "6dccee64d3ae995c2439615a5824282de7349099", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6dccee64d3ae995c2439615a5824282de7349099", "message": "spotless", "committedDate": "2020-10-27T05:56:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNDgyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512434822", "bodyText": "ServletContextContextUtils? Just kidding :)", "author": "anuraaga", "createdAt": "2020-10-27T06:02:05Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/ServletContextPath.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+\n+public class ServletContextPath {", "originalCommit": "6dccee64d3ae995c2439615a5824282de7349099", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNDk4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512434983", "bodyText": "Let's add some class javadoc to explain what's going on, including why this needs to go in instrumentation-api", "author": "anuraaga", "createdAt": "2020-10-27T06:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNDgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NjQyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512446423", "bodyText": "\ud83d\udc4d will do tomorrow before merging", "author": "trask", "createdAt": "2020-10-27T06:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNDgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNzkzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512437934", "bodyText": "This javadoc is obsolete", "author": "iNikem", "createdAt": "2020-10-27T06:12:57Z", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/ServletContextPath.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+\n+public class ServletContextPath {\n+\n+  // Keeps track of the servlet context path that needs to be prepended to the route when updating\n+  // the span name\n+  public static final ContextKey<String> CONTEXT_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-context-path-key\");\n+\n+  /** Returns the servlet context path from the given context or <code>\"\"</code> if not found. */", "originalCommit": "6dccee64d3ae995c2439615a5824282de7349099", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzI0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512443246", "bodyText": "Is this method used?", "author": "iNikem", "createdAt": "2020-10-27T06:29:22Z", "path": "instrumentation/spring/spring-webflux-5.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/webflux/server/RouteOnSuccessOrError.java", "diffHunk": "@@ -69,4 +72,13 @@ private String parseRoute(String routerString) {\n                 .trim())\n         .replaceAll(\"\");\n   }\n+\n+  private static String getContextPath(ServerRequest serverRequest) {", "originalCommit": "6dccee64d3ae995c2439615a5824282de7349099", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NTYwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512445609", "bodyText": "nope, gone \ud83d\udc4d", "author": "trask", "createdAt": "2020-10-27T06:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzcxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512443713", "bodyText": "Technically, this is a duplication with ServletContextPath.prepend", "author": "iNikem", "createdAt": "2020-10-27T06:30:42Z", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -107,4 +125,13 @@ protected String flavor(HttpServletRequest connection, HttpServletRequest reques\n   protected String requestHeader(HttpServletRequest httpServletRequest, String name) {\n     return httpServletRequest.getHeader(name);\n   }\n+\n+  private static String getSpanName(HttpServletRequest request) {\n+    String spanName = request.getServletPath();\n+    String contextPath = request.getContextPath();\n+    if (contextPath != null && !contextPath.isEmpty() && !contextPath.equals(\"/\")) {\n+      spanName = contextPath + spanName;", "originalCommit": "6dccee64d3ae995c2439615a5824282de7349099", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0NjI2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512446266", "bodyText": "ya, I could add public static String prepend(String contextPath, String spanName) to ServletContextPath, but I'm thinking better to live with the duplication instead of adding API surface to an already confusing class ServletContextPath", "author": "trask", "createdAt": "2020-10-27T06:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzcxMw=="}], "type": "inlineReview"}, {"oid": "4b59bdba10023a84b4605dd95b90919056c57468", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4b59bdba10023a84b4605dd95b90919056c57468", "message": "Remove unused method", "committedDate": "2020-10-27T06:34:35Z", "type": "commit"}, {"oid": "088561ebf7e35cc4afd4261b26f1a6ae8091095a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/088561ebf7e35cc4afd4261b26f1a6ae8091095a", "message": "Remove outdated javadoc", "committedDate": "2020-10-27T06:35:20Z", "type": "commit"}, {"oid": "e7add716affafee79de545b0b2ab86f753f363e4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e7add716affafee79de545b0b2ab86f753f363e4", "message": "Fix redirect test", "committedDate": "2020-10-27T19:34:01Z", "type": "commit"}, {"oid": "4e3a4b990449fb515e37a6e4d87a9aaee783eb05", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e3a4b990449fb515e37a6e4d87a9aaee783eb05", "message": "spotless", "committedDate": "2020-10-27T19:56:27Z", "type": "commit"}, {"oid": "c5f1cde7dd135943b283b89c3df6966dc646324d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c5f1cde7dd135943b283b89c3df6966dc646324d", "message": "Merge remote-tracking branch 'upstream/master' into add-application-root-to-span-name", "committedDate": "2020-10-27T19:56:34Z", "type": "commit"}, {"oid": "f5c729dd21d391640a50a3c6ae087ceff23a8bd4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5c729dd21d391640a50a3c6ae087ceff23a8bd4", "message": "Add javadoc for ServletContextPath", "committedDate": "2020-10-27T20:26:04Z", "type": "commit"}]}