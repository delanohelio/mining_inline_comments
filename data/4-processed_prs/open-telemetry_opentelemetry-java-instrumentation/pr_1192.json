{"pr_number": 1192, "pr_title": "Add initial baseline instrumentation for AWS lambda runtime.", "pr_createdAt": "2020-09-11T09:38:24Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192", "timeline": [{"oid": "070c426221866707bed296d60af9830eb4b7e18e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/070c426221866707bed296d60af9830eb4b7e18e", "message": "Add initial baseline instrumentation for AWS lambda runtime.", "committedDate": "2020-09-11T09:34:46Z", "type": "commit"}, {"oid": "68ed4e79799e452340bb11469f14f59544247b20", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/68ed4e79799e452340bb11469f14f59544247b20", "message": "narc", "committedDate": "2020-09-11T10:55:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTU2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487321563", "bodyText": "this is different from existing convention of public static final TRACER (and no accessor), if u prefer this, let's create an issue to update in other places too?", "author": "trask", "createdAt": "2020-09-11T22:43:41Z", "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AwsLambdaInstrumentationHelper.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.awslambda.v1_0;\n+\n+import io.opentelemetry.instrumentation.awslambda.v1_0.AwsLambdaTracer;\n+\n+public final class AwsLambdaInstrumentationHelper {\n+\n+  private static final AwsLambdaTracer TRACER = new AwsLambdaTracer();\n+\n+  public static AwsLambdaTracer tracer() {\n+    return TRACER;\n+  }", "originalCommit": "68ed4e79799e452340bb11469f14f59544247b20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NDQ1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487364457", "bodyText": "Yeah good point, went back to old pattern for now and will file an issue to discuss.", "author": "anuraaga", "createdAt": "2020-09-12T04:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMjY1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487322657", "bodyText": "and in AwsLambdaTracer.startScope(), set CONTEXT_SERVER_SPAN_KEY (similar to HttpServerTracer)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  scope = TracingContextUtils.currentContextWith(span);\n          \n          \n            \n                  scope = tracer().startScope(span);", "author": "trask", "createdAt": "2020-09-11T22:48:01Z", "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AwsLambdaRequestHandlerInstrumentation.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.awslambda.v1_0;\n+\n+import static io.opentelemetry.instrumentation.auto.awslambda.v1_0.AwsLambdaInstrumentationHelper.tracer;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class AwsLambdaRequestHandlerInstrumentation extends AbstractAwsLambdaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"com.amazonaws.services.lambda.runtime.RequestHandler\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"com.amazonaws.services.lambda.runtime.RequestHandler\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"handleRequest\"))\n+            .and(takesArgument(1, named(\"com.amazonaws.services.lambda.runtime.Context\"))),\n+        AwsLambdaRequestHandlerInstrumentation.class.getName() + \"$HandleRequestAdvice\");\n+  }\n+\n+  public static class HandleRequestAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Argument(1) Context context,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      span = tracer().startSpan(context);\n+      scope = TracingContextUtils.currentContextWith(span);", "originalCommit": "68ed4e79799e452340bb11469f14f59544247b20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMzQ3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487323471", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-09-11T22:51:31Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /** Creates a new {@link TracingRequestHandler} which traces using the default {@link Tracer}. */\n+  protected TracingRequestHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link Tracer}.\n+   */\n+  protected TracingRequestHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }", "originalCommit": "68ed4e79799e452340bb11469f14f59544247b20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMzY4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487323686", "bodyText": "from above comment\nalso, fwiw, we've been using the var name ignored in other places (not consistently though), since that seems to keep Intellij from flagging it as unused\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (Scope unused = TracingContextUtils.currentContextWith(span)) {\n          \n          \n            \n                try (Scope unused = tracer.startScope(span)) {", "author": "trask", "createdAt": "2020-09-11T22:52:18Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /** Creates a new {@link TracingRequestHandler} which traces using the default {@link Tracer}. */\n+  protected TracingRequestHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link Tracer}.\n+   */\n+  protected TracingRequestHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public final O handleRequest(I input, Context context) {\n+    Span span = tracer.startSpan(context);\n+    Throwable error = null;\n+    try (Scope unused = TracingContextUtils.currentContextWith(span)) {", "originalCommit": "68ed4e79799e452340bb11469f14f59544247b20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NDM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487364360", "bodyText": "Ah didn't know intellij treated that differently", "author": "anuraaga", "createdAt": "2020-09-12T04:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMzY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487326327", "bodyText": "\ud83d\udc4d\ni wish there were better way to do this\nin other places we are doing the simpler, but less correct \ud83d\ude41\n      try (Scope ignored = TRACER.startScope(span)) {\n        ...\n        TRACER.end(span, response);\n        return response;\n      } catch (Throwable t) {\n        TRACER.endExceptionally(span, t);\n        throw t;\n      }", "author": "trask", "createdAt": "2020-09-11T23:03:12Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /** Creates a new {@link TracingRequestHandler} which traces using the default {@link Tracer}. */\n+  protected TracingRequestHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link Tracer}.\n+   */\n+  protected TracingRequestHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public final O handleRequest(I input, Context context) {\n+    Span span = tracer.startSpan(context);\n+    Throwable error = null;\n+    try (Scope unused = TracingContextUtils.currentContextWith(span)) {\n+      return doHandleRequest(input, context);\n+    } catch (Throwable t) {\n+      error = t;", "originalCommit": "68ed4e79799e452340bb11469f14f59544247b20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODIwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487528200", "bodyText": "Why is it less correct?", "author": "iNikem", "createdAt": "2020-09-13T13:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxMzUwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487613506", "bodyText": "it's only less correct if there's an internal exception inside TRACER.end(span, response) (at which point maybe we don't care?)\nfwiw, the way it's written in this PR maps to how our @OnMethodEnter/@OnMethodExit behave, which I think makes it nice, if we're going to fail, we fail in a more consistent way", "author": "trask", "createdAt": "2020-09-14T01:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNTgyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487615826", "bodyText": "Hmm, thinking more on this I think both patterns are wrong. @trask's example seems especially wrong since we shouldn't have one codepath that ends a span with the scope active and another that doesn't since it's inconsistent. Let's imagine SimpleSpanProcessor, it may execute an RPC inline with the call to end, but will have a different parent for the two cases.\nSo the question becomes whether it's correct to have the parent in both cases or none of the cases. I guess having the parent is better - SimpleSpanProcessor is effectively running span processing, maybe even export, in the context of the request, possibly slowing it down a lot, so it should be traced together with the request.\nI'll leave my code as is though since I don't think we have that behavior anywhere in our codebase right now :)", "author": "anuraaga", "createdAt": "2020-09-14T02:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNjA3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487616079", "bodyText": "@trask Yeah the exception problem means we're breaking user code anyways so much bigger problem :) I'm less concerned about the exception handling though ^^", "author": "anuraaga", "createdAt": "2020-09-14T02:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNzk4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487617988", "bodyText": "Well, I think I realized that can't work, if SimpleSpanProcessor was allowed to emit spans, it would emit as an infinite loop inline with the request :O But could still have log lines with timings of the simple export which is better than nothing so still lean towards making sure it has the scope.", "author": "anuraaga", "createdAt": "2020-09-14T02:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw=="}], "type": "inlineReview"}, {"oid": "822c9e46de265b41689f04fef8a7252cf3b82b32", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/822c9e46de265b41689f04fef8a7252cf3b82b32", "message": "Cleanup", "committedDate": "2020-09-12T04:09:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODQ4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487528484", "bodyText": "Auto instrumentation does not reuse TracingRequestHandler from library instrumentation, is it expected?", "author": "iNikem", "createdAt": "2020-09-13T13:16:28Z", "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AwsLambdaRequestHandlerInstrumentation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.awslambda.v1_0;\n+\n+import static io.opentelemetry.instrumentation.auto.awslambda.v1_0.AwsLambdaInstrumentationHelper.TRACER;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class AwsLambdaRequestHandlerInstrumentation extends AbstractAwsLambdaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"com.amazonaws.services.lambda.runtime.RequestHandler\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"com.amazonaws.services.lambda.runtime.RequestHandler\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"handleRequest\"))\n+            .and(takesArgument(1, named(\"com.amazonaws.services.lambda.runtime.Context\"))),\n+        AwsLambdaRequestHandlerInstrumentation.class.getName() + \"$HandleRequestAdvice\");\n+  }\n+\n+  public static class HandleRequestAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Argument(1) Context context,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      span = TRACER.startSpan(context);", "originalCommit": "822c9e46de265b41689f04fef8a7252cf3b82b32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNDM3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487614370", "bodyText": "Yeah since you define the lambda function as the string of the class name, there isn't really any way to use an @Advice to apply the manual instrumentation I think (some very advanced bytebuddy to replace inheritance / method name maybe :) ). Currently all the logic is in TRACER so it's ok, I'll move things around if that stops being the case.", "author": "anuraaga", "createdAt": "2020-09-14T02:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODUzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487528531", "bodyText": "Should there be a documentation or an example how to use it?", "author": "iNikem", "createdAt": "2020-09-13T13:16:47Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {", "originalCommit": "822c9e46de265b41689f04fef8a7252cf3b82b32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYxNDQwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487614409", "bodyText": "Yup good call - added some", "author": "anuraaga", "createdAt": "2020-09-14T02:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODUzMQ=="}], "type": "inlineReview"}, {"oid": "3b53bc44141c2d45f2d35fe50234624ae5d2ce9a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b53bc44141c2d45f2d35fe50234624ae5d2ce9a", "message": "docs", "committedDate": "2020-09-14T02:08:50Z", "type": "commit"}, {"oid": "85a3cf3f15b4758cb14c17c2525b53ae3835a8fa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/85a3cf3f15b4758cb14c17c2525b53ae3835a8fa", "message": "Remove sentence which is redundant with every manual instrumentation we provide.", "committedDate": "2020-09-14T02:11:25Z", "type": "commit"}]}