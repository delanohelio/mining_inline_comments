{"pr_number": 922, "pr_title": "Change the rest of decorators to tracers", "pr_createdAt": "2020-08-07T18:49:52Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922", "timeline": [{"oid": "b1a18ec798f6d4d523c020ce29501723f48124d5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1a18ec798f6d4d523c020ce29501723f48124d5", "message": "Change AwsSdkClientDecorator to tracer", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "message": "Change awsclient 1.11 decorator to tracer", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "message": "Use startSpan", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "message": "Remove unused method", "committedDate": "2020-08-07T02:23:09Z", "type": "commit"}, {"oid": "17dde6e21e2ad4bbdc99f6b005283c90412a1347", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17dde6e21e2ad4bbdc99f6b005283c90412a1347", "message": "Fix a muzzle failure", "committedDate": "2020-08-07T02:44:14Z", "type": "commit"}, {"oid": "f6cb517c1b68961d37dd39d667d30777cb218669", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f6cb517c1b68961d37dd39d667d30777cb218669", "message": "Change kubernetes client 7.0 decorator to tracer", "committedDate": "2020-08-07T16:46:43Z", "type": "commit"}, {"oid": "f263f1dbb16616e0318a7dcb2415ed97aaa1c3ce", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f263f1dbb16616e0318a7dcb2415ed97aaa1c3ce", "message": "Change play-ws decorator to tracer", "committedDate": "2020-08-07T17:08:45Z", "type": "commit"}, {"oid": "9cbc78cc8c6350999972edf6f39b31bbc360db04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9cbc78cc8c6350999972edf6f39b31bbc360db04", "message": "Change apache httpasyncclient decorator to tracer", "committedDate": "2020-08-07T17:26:52Z", "type": "commit"}, {"oid": "9bbdaf2b851a05a93f02280b0bb27221242a88d6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9bbdaf2b851a05a93f02280b0bb27221242a88d6", "message": "Fix build", "committedDate": "2020-08-07T17:30:59Z", "type": "commit"}, {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "message": "Make onRequest protected", "committedDate": "2020-08-07T17:33:31Z", "type": "commit"}, {"oid": "0367c2c48f2b6ddb356d271b999c161299431b90", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0367c2c48f2b6ddb356d271b999c161299431b90", "message": "Merge branch 'heya/http-client-tracers-2' into heya/http-client-tracers-3", "committedDate": "2020-08-07T17:34:16Z", "type": "commit"}, {"oid": "5e56466aae53618612723a9953f1a7e033dd3816", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5e56466aae53618612723a9953f1a7e033dd3816", "message": "Change spring-webflux-5.0 decorator to tracer", "committedDate": "2020-08-07T17:51:54Z", "type": "commit"}, {"oid": "07dad81f600ec6c26a1ff45cb627f28b49dd3617", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/07dad81f600ec6c26a1ff45cb627f28b49dd3617", "message": "Change spring-web-3.1 decorator to tracer", "committedDate": "2020-08-07T18:00:33Z", "type": "commit"}, {"oid": "b44256cc525ee0cbcb2c2e8f48bb257f7df51461", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b44256cc525ee0cbcb2c2e8f48bb257f7df51461", "message": "Change JaxRsClient decorator to tracer", "committedDate": "2020-08-07T18:14:27Z", "type": "commit"}, {"oid": "d5ba7e9337485a3d3de1a2df802a7d732842877b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d5ba7e9337485a3d3de1a2df802a7d732842877b", "message": "Change jaxrsclient 1.1 decorator to tracer", "committedDate": "2020-08-07T18:25:25Z", "type": "commit"}, {"oid": "54a20a4e012d07eae0a3b8d4bdc7268023f3c74e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/54a20a4e012d07eae0a3b8d4bdc7268023f3c74e", "message": "Change apachehttpclient 4.0 decorator to tracer", "committedDate": "2020-08-07T18:42:10Z", "type": "commit"}, {"oid": "da1b02748d477dc90d0c0b4a4a2a4d1186ba8bde", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da1b02748d477dc90d0c0b4a4a2a4d1186ba8bde", "message": "Fix a compilation error", "committedDate": "2020-08-07T19:17:55Z", "type": "commit"}, {"oid": "d4e8325548c5f4b0c06b8fa64698a33078bae7ca", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4e8325548c5f4b0c06b8fa64698a33078bae7ca", "message": "Fix build", "committedDate": "2020-08-07T19:56:14Z", "type": "commit"}, {"oid": "d16fcc63bcaab5d9311c986da3c6e6a5a6068273", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d16fcc63bcaab5d9311c986da3c6e6a5a6068273", "message": "Refactor awssdkclienttracer", "committedDate": "2020-08-07T22:22:53Z", "type": "commit"}, {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "message": "Address feedback", "committedDate": "2020-08-07T22:34:39Z", "type": "commit"}, {"oid": "aac4f9cce8627f94b7ef2e3ae0d4c81666000e0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/aac4f9cce8627f94b7ef2e3ae0d4c81666000e0f", "message": "Fix test failures", "committedDate": "2020-08-08T00:01:28Z", "type": "commit"}, {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36f4c33563dc92c251b00ee6a5383534685569f3", "message": "Fix ApacheHttpClientResponseHandlerTest", "committedDate": "2020-08-08T00:30:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODY3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358673", "bodyText": "I don't think scope can be null here", "author": "trask", "createdAt": "2020-08-08T04:09:05Z", "path": "instrumentation/play-ws/play-ws-2.1/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_1/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      if (scope != null) {", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODgzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358836", "bodyText": "can you switch this to new convention @Advice.Local(\"otelSpan\")?", "author": "trask", "createdAt": "2020-08-08T04:11:03Z", "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -72,12 +57,14 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n-\n+        @Advice.Enter final Span span,", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODg1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358852", "bodyText": "i don't think scope can be null here", "author": "trask", "createdAt": "2020-08-08T04:11:31Z", "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -72,12 +57,14 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n-\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      if (scope != null) {", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODg4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358889", "bodyText": "can you switch this to new convention @Advice.Local(\"otelSpan\")?", "author": "trask", "createdAt": "2020-08-08T04:11:49Z", "path": "instrumentation/play-ws/play-ws-2.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODkwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358906", "bodyText": "i don't think scope can be null here", "author": "trask", "createdAt": "2020-08-08T04:12:06Z", "path": "instrumentation/play-ws/play-ws-2.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      if (scope != null) {", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODkxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358919", "bodyText": "can you switch this to new convention @Advice.Local(\"otelSpan\")?", "author": "trask", "createdAt": "2020-08-08T04:12:19Z", "path": "instrumentation/play-ws/play-ws-2.1/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_1/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODk2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358969", "bodyText": "lost this comment", "author": "trask", "createdAt": "2020-08-08T04:13:19Z", "path": "instrumentation-core/apache-httpclient-4.0/src/main/java/io/opentelemetry/instrumentation/apachehttpclient/v4_0/ApacheHttpClientHelper.java", "diffHunk": "@@ -69,14 +48,15 @@ public static void doMethodExit(\n       final SpanWithScope spanWithScope, final Object result, final Throwable throwable) {\n     try {\n       Span span = spanWithScope.getSpan();\n-\n       if (result instanceof HttpResponse) {\n-        DECORATE.onResponse(span, (HttpResponse) result);\n-      } // else they probably provided a ResponseHandler.", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTAwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359001", "bodyText": "is this needed since only calls super?", "author": "trask", "createdAt": "2020-08-08T04:13:51Z", "path": "instrumentation-core/apache-httpclient-4.0/src/main/java/io/opentelemetry/instrumentation/apachehttpclient/v4_0/ApacheHttpClientTracer.java", "diffHunk": "@@ -59,8 +56,23 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpUriRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  @Override\n+  protected Span onResponse(Span span, HttpResponse httpResponse) {\n+    return super.onResponse(span, httpResponse);\n+  }", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyMjAzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468122030", "bodyText": "yes.", "author": "heyams", "createdAt": "2020-08-10T19:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTA3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359076", "bodyText": "in this case we want to pass tracer on, so that spring boot starter users can supply their own Tracer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new RestTemplateBeanPostProcessor();\n          \n          \n            \n                return new RestTemplateBeanPostProcessor(tracer);", "author": "trask", "createdAt": "2020-08-08T04:14:38Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateAutoConfiguration.java", "diffHunk": "@@ -43,6 +43,6 @@\n   @Bean\n   @Autowired\n   public RestTemplateBeanPostProcessor otelRestTemplateBeanPostProcessor(final Tracer tracer) {\n-    return new RestTemplateBeanPostProcessor(tracer);\n+    return new RestTemplateBeanPostProcessor();", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTE0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359145", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  restTemplateInterceptors.add(0, new RestTemplateInterceptor());\n          \n          \n            \n                  restTemplateInterceptors.add(0, new RestTemplateInterceptor(tracer));", "author": "trask", "createdAt": "2020-08-08T04:15:07Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -47,7 +42,7 @@ private void addRestTemplateInterceptorIfNotPresent(RestTemplate restTemplate) {\n     List<ClientHttpRequestInterceptor> restTemplateInterceptors = restTemplate.getInterceptors();\n     if (restTemplateInterceptors.stream()\n         .noneMatch(inteceptor -> inteceptor instanceof RestTemplateInterceptor)) {\n-      restTemplateInterceptors.add(0, new RestTemplateInterceptor(tracer));\n+      restTemplateInterceptors.add(0, new RestTemplateInterceptor());", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTE2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              RestTemplateBeanPostProcessor restTemplateBeanPostProcessor = new RestTemplateBeanPostProcessor();\n          \n          \n            \n              RestTemplateBeanPostProcessor restTemplateBeanPostProcessor = new RestTemplateBeanPostProcessor(tracer);", "author": "trask", "createdAt": "2020-08-08T04:15:20Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessorTest.java", "diffHunk": "@@ -31,8 +31,7 @@\n class RestTemplateBeanPostProcessorTest {\n   @Mock Tracer tracer;\n \n-  RestTemplateBeanPostProcessor restTemplateBeanPostProcessor =\n-      new RestTemplateBeanPostProcessor(tracer);\n+  RestTemplateBeanPostProcessor restTemplateBeanPostProcessor = new RestTemplateBeanPostProcessor();", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTQwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359400", "bodyText": "this can go up, before the scope, which helps us see it's all part of \"startSpan\"", "author": "trask", "createdAt": "2020-08-08T04:18:56Z", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -49,32 +48,27 @@ public static void addFilter(\n \n   @Override\n   public Mono<ClientResponse> filter(final ClientRequest request, final ExchangeFunction next) {\n-    Span span = DECORATE.getOrCreateSpan(request, tracer);\n-    DECORATE.afterStart(span);\n+    Span span = TRACER.getOrCreateSpan(TRACER.spanNameForRequest(request), tracer);\n \n     try (Scope scope = tracer.withSpan(span)) {\n       ClientRequest mutatedRequest =\n           ClientRequest.from(request)\n-              .headers(httpHeaders -> DECORATE.inject(Context.current(), httpHeaders))\n+              .headers(httpHeaders -> TRACER.inject(Context.current(), httpHeaders))\n               .build();\n-      DECORATE.onRequest(span, mutatedRequest);\n+      TRACER.onRequest(span, mutatedRequest);", "originalCommit": "36f4c33563dc92c251b00ee6a5383534685569f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5f7059931e3e3d7761a7c770cdbab01b17b80445", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f7059931e3e3d7761a7c770cdbab01b17b80445", "message": "Merge remote-tracking branch 'upstream/master' into heyams-http-client-tracers-2", "committedDate": "2020-08-10T06:03:14Z", "type": "commit"}, {"oid": "9f0eb047911fb67b8ce8612e6673a4cef80679a0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f0eb047911fb67b8ce8612e6673a4cef80679a0", "message": "Merge branch 'heyams-http-client-tracers-2' into heyams-http-client-tracers-3", "committedDate": "2020-08-10T06:15:09Z", "type": "commit"}, {"oid": "922141085da8be56e895e7f35c9f226032a66fd8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/922141085da8be56e895e7f35c9f226032a66fd8", "message": "Address feedback", "committedDate": "2020-08-10T19:12:48Z", "type": "commit"}, {"oid": "6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "message": "Address feedback", "committedDate": "2020-08-10T20:45:24Z", "type": "commit"}, {"oid": "369031cf05ad843e2dd9e374f522b155e96c97fb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/369031cf05ad843e2dd9e374f522b155e96c97fb", "message": "Remove an overridden method", "committedDate": "2020-08-10T20:51:35Z", "type": "commit"}, {"oid": "7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "message": "Fix build", "committedDate": "2020-08-10T22:39:53Z", "type": "commit"}, {"oid": "1c1fcad70884bc22656543de2dd704d462cd5d69", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1c1fcad70884bc22656543de2dd704d462cd5d69", "message": "Fix nullpointerexception", "committedDate": "2020-08-10T22:41:34Z", "type": "commit"}, {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/327757e48651a8f15fe53064a3f61b9a222d95fa", "message": "Remove BaseTracer", "committedDate": "2020-08-10T23:35:50Z", "type": "commit"}, {"oid": "54f843c158f5dbad5f2b8dca47dbc1e59a5c5dfe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/54f843c158f5dbad5f2b8dca47dbc1e59a5c5dfe", "message": "Merge branch 'heya/http-client-tracers-2' into heya/http-client-tracers-3", "committedDate": "2020-08-10T23:41:46Z", "type": "commit"}, {"oid": "38f71c378fe6f632c2c5be553ac77e9ac856a279", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38f71c378fe6f632c2c5be553ac77e9ac856a279", "message": "Fix a compilation error", "committedDate": "2020-08-10T23:57:11Z", "type": "commit"}, {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "message": "Remove local variables", "committedDate": "2020-08-11T00:30:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MDUyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468260526", "bodyText": "fyi #921", "author": "trask", "createdAt": "2020-08-11T00:36:53Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n   private final Tracer tracer;\n \n-  public RestTemplateBeanPostProcessor(Tracer tracer) {\n+  public RestTemplateBeanPostProcessor(final Tracer tracer) {", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MTgyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468261823", "bodyText": "comment was lost here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.endExceptionally(clientSpan, getResponse(context), ex);\n          \n          \n            \n                  // end span before calling delegate\n          \n          \n            \n                  TRACER.endExceptionally(clientSpan, getResponse(context), ex);", "author": "trask", "createdAt": "2020-08-11T00:41:05Z", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientInstrumentation.java", "diffHunk": "@@ -220,10 +213,7 @@ public void completed(final T result) {\n \n     @Override\n     public void failed(final Exception ex) {\n-      DECORATE.onResponse(clientSpan, getResponse(context));\n-      DECORATE.onError(clientSpan, ex);\n-      DECORATE.beforeFinish(clientSpan);\n-      clientSpan.end(); // end span before calling delegate\n+      TRACER.endExceptionally(clientSpan, getResponse(context), ex);", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MTkwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468261902", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.end(clientSpan, getResponse(context));\n          \n          \n            \n                  // end span before calling delegate\n          \n          \n            \n                  TRACER.end(clientSpan, getResponse(context));", "author": "trask", "createdAt": "2020-08-11T00:41:23Z", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientInstrumentation.java", "diffHunk": "@@ -236,9 +226,7 @@ public void failed(final Exception ex) {\n \n     @Override\n     public void cancelled() {\n-      DECORATE.onResponse(clientSpan, getResponse(context));\n-      DECORATE.beforeFinish(clientSpan);\n-      clientSpan.end(); // end span before calling delegate\n+      TRACER.end(clientSpan, getResponse(context));", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzAxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468263016", "bodyText": "i think move this to HttpClientTracer, looks like netty instrumentation calls it also (but we don't validate netty CONNECT span is CLIENT)", "author": "trask", "createdAt": "2020-08-11T00:45:37Z", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -78,8 +77,37 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.apache-httpasyncclient-4.0\";\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable CLIENT span (operation) name based on a given\n+   * name.\n+   */\n+  @Override\n+  public Span startSpan(String spanName) {\n+    return tracer.spanBuilder(spanName).setSpanKind(Kind.CLIENT).startSpan();\n+  }", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDk0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468720940", "bodyText": "Netty doesn't use it.. but Http-url-connection does.", "author": "heyams", "createdAt": "2020-08-11T16:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MjMxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468842313", "bodyText": "add a todo in #912", "author": "heyams", "createdAt": "2020-08-11T20:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzM1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468263353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HttpResponse response = (HttpResponse) result;\n          \n          \n            \n                    TRACER.onResponse(span, response);\n          \n          \n            \n                    TRACER.onResponse(span, (HttpResponse) result);", "author": "trask", "createdAt": "2020-08-11T00:46:47Z", "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientHelper.java", "diffHunk": "@@ -69,14 +48,15 @@ public static void doMethodExit(\n       final SpanWithScope spanWithScope, final Object result, final Throwable throwable) {\n     try {\n       Span span = spanWithScope.getSpan();\n-\n       if (result instanceof HttpResponse) {\n-        DECORATE.onResponse(span, (HttpResponse) result);\n-      } // else they probably provided a ResponseHandler.\n-\n-      DECORATE.onError(span, throwable);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+        HttpResponse response = (HttpResponse) result;\n+        TRACER.onResponse(span, response);", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzgzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468263836", "bodyText": "looks like this override is not needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              protected Span onResponse(Span span, HttpResponse httpResponse) {\n          \n          \n            \n                return super.onResponse(span, httpResponse);\n          \n          \n            \n              }", "author": "trask", "createdAt": "2020-08-11T00:48:49Z", "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientTracer.java", "diffHunk": "@@ -59,8 +56,23 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpUriRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  @Override\n+  protected Span onResponse(Span span, HttpResponse httpResponse) {\n+    return super.onResponse(span, httpResponse);\n+  }", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMzI2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468723263", "bodyText": "onResponse is called in the helper line 52.", "author": "heyams", "createdAt": "2020-08-11T16:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjM2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468266366", "bodyText": "i think this can use startScope\nalso, this:\nWARNING: this might be a chain...so we only have to trace the first in the chain.\n\nshouldn't be needed once this item from #912 is done:\n\nadd ClientDecorator.CONTEXT_CLIENT_SPAN_KEY to the context inside startScope", "author": "trask", "createdAt": "2020-08-11T00:58:43Z", "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Instrumentation.java", "diffHunk": "@@ -83,45 +81,42 @@ public JaxRsClientV1Instrumentation() {\n   public static class HandleAdvice {\n \n     @Advice.OnMethodEnter\n-    public static SpanWithScope onEnter(\n-        @Advice.Argument(0) final ClientRequest request, @Advice.This final ClientHandler thisObj) {\n+    public static void onEnter(\n+        @Advice.Argument(0) final ClientRequest request,\n+        @Advice.This final ClientHandler thisObj,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n \n       // WARNING: this might be a chain...so we only have to trace the first in the chain.\n       boolean isRootClientHandler = null == request.getProperties().get(CONTEXT_ATTRIBUTE);\n       if (isRootClientHandler) {\n-        Span span =\n-            TRACER\n-                .spanBuilder(DECORATE.spanNameForRequest(request))\n-                .setSpanKind(CLIENT)\n-                .startSpan();\n-        DECORATE.afterStart(span);\n-        DECORATE.onRequest(span, request);\n+        span = TRACER.startSpan(request);\n \n         Context context = withSpan(span, Context.current());\n         request.getProperties().put(CONTEXT_ATTRIBUTE, context);\n \n         OpenTelemetry.getPropagators()\n             .getHttpTextFormat()\n             .inject(context, request.getHeaders(), SETTER);\n-        return new SpanWithScope(span, withScopedContext(context));\n+        scope = withScopedContext(context);", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyNTcyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468725729", "bodyText": "it can't.  SETTER is HttpTextFormat.Setter MultivaluedMap type.. getSetter() supports HttpTextFormat.Setter REQUEST.\nThis is the issue i brought up in the very first PR.", "author": "heyams", "createdAt": "2020-08-11T16:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MDI2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469880268", "bodyText": "But you can make io.opentelemetry.auto.instrumentation.jaxrsclient.v1_1.InjectAdapter implements HttpTextFormat.Setter<ClientRequest>.", "author": "iNikem", "createdAt": "2020-08-13T11:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2Njc2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468266767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              protected Span onRequest(Span span, Request request) {\n          \n          \n            \n                return super.onRequest(span, request);\n          \n          \n            \n              }", "author": "trask", "createdAt": "2020-08-11T01:00:10Z", "path": "instrumentation/kubernetes-client-7.0/src/main/java/io/opentelemetry/auto/instrumentation/kubernetesclient/KubernetesClientTracer.java", "diffHunk": "@@ -53,4 +52,32 @@ protected String requestHeader(Request request, String name) {\n   protected String responseHeader(Response response, String name) {\n     return response.header(name);\n   }\n+\n+  @Override\n+  protected Setter<Request> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.kubernetes-client-7.0\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, Request request) {\n+    return super.onRequest(span, request);\n+  }", "originalCommit": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczOTE5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468739195", "bodyText": "This is called by TracingInterceptor.java line 38.", "author": "heyams", "createdAt": "2020-08-11T17:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2Njc2Nw=="}], "type": "inlineReview"}, {"oid": "0e8105fd9b580d65e467067e71e7228d826dcaae", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e8105fd9b580d65e467067e71e7228d826dcaae", "message": "Feedback", "committedDate": "2020-08-11T17:17:34Z", "type": "commit"}, {"oid": "ac56cc3e0400cfda847a2cdb1b14c830a6374f01", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac56cc3e0400cfda847a2cdb1b14c830a6374f01", "message": "Add javadoc to explain why it is needed to override methods", "committedDate": "2020-08-11T18:12:15Z", "type": "commit"}, {"oid": "67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "message": "Undo afterMarshalling and afterExecution in the tracer class", "committedDate": "2020-08-11T18:24:36Z", "type": "commit"}, {"oid": "2655d28220ae7148983809c5cf47843e2e02fe4b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2655d28220ae7148983809c5cf47843e2e02fe4b", "message": "Move spanName method to interceptor class", "committedDate": "2020-08-11T20:13:51Z", "type": "commit"}, {"oid": "ad5a786059ca5a5db62e2d1115422603170a4afb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad5a786059ca5a5db62e2d1115422603170a4afb", "message": "Merge branch 'heya/http-client-tracers-2' into heya/http-client-tracers-3", "committedDate": "2020-08-12T02:08:58Z", "type": "commit"}, {"oid": "3dd3b97fb11513a5dd5a1fe05b1ae23dc88e55ae", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3dd3b97fb11513a5dd5a1fe05b1ae23dc88e55ae", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers-3", "committedDate": "2020-08-12T17:31:59Z", "type": "commit"}, {"oid": "ccef511e3143d2a82d6ee6fa1a7d8b5944766966", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ccef511e3143d2a82d6ee6fa1a7d8b5944766966", "message": "Fix compilation errors", "committedDate": "2020-08-12T17:50:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzODU4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469438582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"io.opentelemetry.instrumentation.springwebflux.client.SpringWebfluxHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.springwebflux.client.HttpHeadersInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter\"\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.spring.webflux.client.SpringWebfluxHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.spring.webflux.client.HttpHeadersInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.spring.webflux.client.WebClientTracingFilter\"", "author": "trask", "createdAt": "2020-08-12T17:54:22Z", "path": "instrumentation/spring-webflux-5.0/src/main/java/io/opentelemetry/auto/instrumentation/spring/webflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -46,9 +46,9 @@ public WebClientFilterInstrumentation() {\n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n-      \"io.opentelemetry.instrumentation.spring.webflux.client.SpringWebfluxHttpClientDecorator\",\n-      \"io.opentelemetry.instrumentation.spring.webflux.client.HttpHeadersInjectAdapter\",\n-      \"io.opentelemetry.instrumentation.spring.webflux.client.WebClientTracingFilter\"\n+      \"io.opentelemetry.instrumentation.springwebflux.client.SpringWebfluxHttpClientTracer\",\n+      \"io.opentelemetry.instrumentation.springwebflux.client.HttpHeadersInjectAdapter\",\n+      \"io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter\"", "originalCommit": "ccef511e3143d2a82d6ee6fa1a7d8b5944766966", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0NzMzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469447334", "bodyText": "these look unused", "author": "trask", "createdAt": "2020-08-12T18:09:58Z", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -71,4 +68,28 @@ protected String responseHeader(ClientResponse clientResponse, String name) {\n     List<String> headers = clientResponse.headers().header(name);\n     return !headers.isEmpty() ? headers.get(0) : null;\n   }\n+\n+  @Override\n+  protected Setter<ClientRequest> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, ClientRequest clientRequest) {\n+    return super.onRequest(span, clientRequest);\n+  }\n+\n+  @Override\n+  protected String spanNameForRequest(ClientRequest clientRequest) {\n+    return super.spanNameForRequest(clientRequest);\n+  }", "originalCommit": "ccef511e3143d2a82d6ee6fa1a7d8b5944766966", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "77d2bcc7d071453e5336af03de6fe727142917cc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/77d2bcc7d071453e5336af03de6fe727142917cc", "message": "Fix merge conflicts", "committedDate": "2020-08-12T18:24:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDM0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469460341", "bodyText": "we will get rid of this soon, you can accept heyams#1, or i can send that in as separate PR after your PR", "author": "trask", "createdAt": "2020-08-12T18:32:56Z", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -71,4 +68,18 @@ protected String responseHeader(ClientResponse clientResponse, String name) {\n     List<String> headers = clientResponse.headers().header(name);\n     return !headers.isEmpty() ? headers.get(0) : null;\n   }\n+\n+  @Override\n+  protected Setter<ClientRequest> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  public Tracer getTracer() {\n+    return tracer;\n+  }", "originalCommit": "77d2bcc7d071453e5336af03de6fe727142917cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "55a54291fb698b42523890d1c8c2d07297d58a56", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/55a54291fb698b42523890d1c8c2d07297d58a56", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers-3", "committedDate": "2020-08-13T00:31:09Z", "type": "commit"}, {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/68622854118c408ae5ec24cc1a10764ef955ef7b", "message": "Fix test failures that wasn't actually run before, thanks to JUNIT 5 upgrade", "committedDate": "2020-08-13T01:27:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5Mjk0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469692947", "bodyText": "Think we're not supposed to have this per #921 (though we can delete at the same time so no worries)", "author": "anuraaga", "createdAt": "2020-08-13T04:42:37Z", "path": "instrumentation-core/spring/spring-web-3.1/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java", "diffHunk": "@@ -33,26 +32,19 @@\n \n   private final Tracer tracer;\n \n-  public RestTemplateInterceptor(Tracer tracer) {\n+  public RestTemplateInterceptor(final Tracer tracer) {", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzE3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469693171", "bodyText": "Hmm - I'm sensing something wrong with our API if we have to skip it so many times (thought for broader discussion, not an issue with this PR)", "author": "anuraaga", "createdAt": "2020-08-13T04:43:37Z", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -71,4 +68,18 @@ protected String responseHeader(ClientResponse clientResponse, String name) {\n     List<String> headers = clientResponse.headers().header(name);\n     return !headers.isEmpty() ? headers.get(0) : null;\n   }\n+\n+  @Override\n+  protected Setter<ClientRequest> getSetter() {", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2ODM1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469868358", "bodyText": "But why to you return null if io.opentelemetry.instrumentation.spring.webflux.client.HttpHeadersInjectAdapter.SETTER was used before?", "author": "iNikem", "createdAt": "2020-08-13T10:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NTczNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470085736", "bodyText": "Updated the adpater to be httpformat.setter.", "author": "heyams", "createdAt": "2020-08-13T16:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NjI0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470166242", "bodyText": "@iNikem we could make the HttpHeadersInjectAdapter implement HttpTextFormat.Setter<ClientRequest.Builder>, and add a third generic type to HttpClientTracer, maybe named HEADERS? this 3rd generic type might solve similar issue in a couple other places too. i'll log an issue for the getSetter() not working as broadly as we would like currently", "author": "trask", "createdAt": "2020-08-13T18:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2Nzg0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470167846", "bodyText": "#964", "author": "trask", "createdAt": "2020-08-13T18:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5Mzk1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469693954", "bodyText": "The funny thing about protected methods is unless we make them final they may as well be public :P", "author": "anuraaga", "createdAt": "2020-08-13T04:46:38Z", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -78,8 +77,38 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.apache-httpasyncclient-4.0\";\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable CLIENT span (operation) name based on a given\n+   * name.\n+   */\n+  @Override\n+  public Span startSpan(String spanName) {\n+    return tracer.spanBuilder(spanName).setSpanKind(Kind.CLIENT).startSpan();\n+  }\n+\n+  @Override\n+  public String spanNameForRequest(HttpRequest httpRequest) {\n+    return super.spanNameForRequest(httpRequest);\n+  }\n+\n+  /** This method is overridden to allow other classes in this package to call it. */", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NTI1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470085252", "bodyText": "It's error prone to make it public in the super class.. user might call startSpan and then onRequest again.  in that case, onRequest will get invoked twice.  besides there are only a couple of places need to do this.", "author": "heyams", "createdAt": "2020-08-13T16:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5Mzk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTA1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469875058", "bodyText": "Where is this inject now?", "author": "iNikem", "createdAt": "2020-08-13T11:10:42Z", "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientHelper.java", "diffHunk": "@@ -16,42 +16,21 @@\n \n package io.opentelemetry.auto.instrumentation.apachehttpclient.v4_0;\n \n-import static io.opentelemetry.auto.instrumentation.apachehttpclient.v4_0.ApacheHttpClientDecorator.DECORATE;\n-import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.auto.instrumentation.apachehttpclient.v4_0.ApacheHttpClientTracer.TRACER;\n \n-import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.instrumentation.api.decorator.ClientDecorator;\n import io.opentelemetry.instrumentation.auto.api.CallDepthThreadLocalMap;\n import io.opentelemetry.instrumentation.auto.api.SpanWithScope;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import org.apache.http.HttpResponse;\n import org.apache.http.client.HttpClient;\n import org.apache.http.client.methods.HttpUriRequest;\n \n public class ApacheHttpClientHelper {\n \n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.spring-webflux-5.0\");\n-\n   public static SpanWithScope doMethodEnter(final HttpUriRequest request) {\n-    return doMethodEnter(request, TRACER);\n-  }\n-\n-  public static SpanWithScope doMethodEnter(final HttpUriRequest request, final Tracer tracer) {\n-    Span span = DECORATE.getOrCreateSpan(request, tracer);\n-\n-    DECORATE.afterStart(span);\n-    DECORATE.onRequest(span, request);\n-\n-    Context context = ClientDecorator.currentContextWith(span);\n-    if (span.getContext().isValid()) {\n-      DECORATE.inject(context, request);", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3ODU4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470078589", "bodyText": "inside startScope.", "author": "heyams", "createdAt": "2020-08-13T16:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTQ4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469875487", "bodyText": "This name is wrong", "author": "iNikem", "createdAt": "2020-08-13T11:11:44Z", "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientTracer.java", "diffHunk": "@@ -59,8 +56,24 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpUriRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4MDM1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470080358", "bodyText": "FYI this is not a new name.  It exists like this before.  what should the new name be if you think it's not right?", "author": "heyams", "createdAt": "2020-08-13T16:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4ODEyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470088127", "bodyText": "This is ApacheHttpClientTracer. So name could be io.opentelemetry.auto.apache-http-client", "author": "iNikem", "createdAt": "2020-08-13T16:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjY2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469876660", "bodyText": "Still don't understand why do we do something extra to avoid it.", "author": "iNikem", "createdAt": "2020-08-13T11:14:21Z", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientTracer.java", "diffHunk": "@@ -64,20 +65,27 @@ public Span onRequest(final Span span, final Request<?> request) {\n     span.setAttribute(\"aws.operation\", awsOperation.getSimpleName());\n     span.setAttribute(\"aws.endpoint\", request.getEndpoint().toString());\n \n-    if (contextStore != null) {\n-      RequestMeta requestMeta = contextStore.get(originalRequest);\n-      if (requestMeta != null) {\n-        span.setAttribute(\"aws.bucket.name\", requestMeta.getBucketName());\n-        span.setAttribute(\"aws.queue.url\", requestMeta.getQueueUrl());\n-        span.setAttribute(\"aws.queue.name\", requestMeta.getQueueName());\n-        span.setAttribute(\"aws.stream.name\", requestMeta.getStreamName());\n-        span.setAttribute(\"aws.table.name\", requestMeta.getTableName());\n-      }\n+    if (requestMeta != null) {\n+      span.setAttribute(\"aws.bucket.name\", requestMeta.getBucketName());\n+      span.setAttribute(\"aws.queue.url\", requestMeta.getQueueUrl());\n+      span.setAttribute(\"aws.queue.name\", requestMeta.getQueueName());\n+      span.setAttribute(\"aws.stream.name\", requestMeta.getStreamName());\n+      span.setAttribute(\"aws.table.name\", requestMeta.getTableName());\n     }\n-\n     return span;\n   }\n \n+  /**\n+   * Override startScope not to inject context into the request since no need to propagate context", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4MTM1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470081359", "bodyText": "super class's startScope will do 2 things.. get the span and then inject the context into the request.  this is not needed for aws sdk tracer.", "author": "heyams", "createdAt": "2020-08-13T16:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzMDc0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470130748", "bodyText": "That's precisely what I don't understand: why do we want to avoid injecting trace context headers into AWS SDK requests? Even if in most cases nobody will consume them, what bad will happen if we do inject them? Is it worth making our code more complicated?", "author": "iNikem", "createdAt": "2020-08-13T17:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MDQzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470140432", "bodyText": "that's not my decision.. it was like that before.  please talk to the creator of aws sdk decorator.  it's out of scope for this pr anyway.", "author": "heyams", "createdAt": "2020-08-13T17:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODgxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469878811", "bodyText": "There io.opentelemetry.auto.instrumentation.jaxrsclient.v2_0.InjectAdapter.SETTER, why do you return null?", "author": "iNikem", "createdAt": "2020-08-13T11:18:51Z", "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v2_0/JaxRsClientTracer.java", "diffHunk": "@@ -54,4 +50,14 @@ protected String requestHeader(ClientRequestContext clientRequestContext, String\n   protected String responseHeader(ClientResponseContext clientResponseContext, String name) {\n     return clientResponseContext.getHeaderString(name);\n   }\n+\n+  @Override\n+  protected Setter<ClientRequestContext> getSetter() {\n+    return null;", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4MjQyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470082425", "bodyText": "HttpTextFormat.Setter.  JaxRsClientTracer has 'ClientRequestContext' request type.", "author": "heyams", "createdAt": "2020-08-13T16:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzMTUxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470131519", "bodyText": "As in case of version 1 below, you can change SETTER", "author": "iNikem", "createdAt": "2020-08-13T17:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MTkwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470141902", "bodyText": "I did try. it doesn't support clientrequestcontext.", "author": "heyams", "createdAt": "2020-08-13T17:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MjU3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470142576", "bodyText": "by the way return null in many other places too.  @anuraaga insisted to make this method abstract that's why it returns null for tracers that don't apply to the setter type.", "author": "heyams", "createdAt": "2020-08-13T17:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NjQxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470156412", "bodyText": "i think you can do the same thing here that you did for v1.1: 6702d6a", "author": "trask", "createdAt": "2020-08-13T18:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MzQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469883461", "bodyText": "You don't need so much customisations here. You can use startSpan(Request) from the superclass. Override spanNameForRequest to get digest. You may need to override startSpan(Request) to add these two attributes from digest.\nThis also will remove the need to make onRequest public and to call it manually.", "author": "iNikem", "createdAt": "2020-08-13T11:28:47Z", "path": "instrumentation/kubernetes-client-7.0/src/main/java/io/opentelemetry/auto/instrumentation/kubernetesclient/KubernetesClientTracer.java", "diffHunk": "@@ -53,4 +52,33 @@ protected String requestHeader(Request request, String name) {\n   protected String responseHeader(Response response, String name) {\n     return response.header(name);\n   }\n+\n+  @Override\n+  protected Setter<Request> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.kubernetes-client-7.0\";\n+  }\n+\n+  /** This method is overridden to allow other classes in this package to call it. */\n+  @Override\n+  protected Span onRequest(Span span, Request request) {\n+    return super.onRequest(span, request);\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable CLIENT span (operation) name based on a given\n+   * KubernetesRequestDigest.\n+   */\n+  public Span startSpan(KubernetesRequestDigest digest) {", "originalCommit": "68622854118c408ae5ec24cc1a10764ef955ef7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4OTE5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470089196", "bodyText": "this is old code.  If we want to refactor it, i can add it to the todo list.  It can be on a separate PR.", "author": "heyams", "createdAt": "2020-08-13T16:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MzQ2MQ=="}], "type": "inlineReview"}, {"oid": "6702d6a729d94bde3d6e7daa78d5ce844c0bb5a5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6702d6a729d94bde3d6e7daa78d5ce844c0bb5a5", "message": "Change JaxRsClient injectadpater to be HttpTextFormat.Setter<ClientRequest>", "committedDate": "2020-08-13T16:20:46Z", "type": "commit"}, {"oid": "333e0b62325c84038b05b3ca09d57f09fa26691c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/333e0b62325c84038b05b3ca09d57f09fa26691c", "message": "Update instrumentation name", "committedDate": "2020-08-13T17:44:02Z", "type": "commit"}, {"oid": "895758869c63de1220de9f7c0f814dfd5b8dc13d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/895758869c63de1220de9f7c0f814dfd5b8dc13d", "message": "Fix test failures", "committedDate": "2020-08-13T17:46:16Z", "type": "commit"}, {"oid": "895758869c63de1220de9f7c0f814dfd5b8dc13d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/895758869c63de1220de9f7c0f814dfd5b8dc13d", "message": "Fix test failures", "committedDate": "2020-08-13T17:46:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MTA2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470141060", "bodyText": "i think still need the scope != null here, until we do #912 (comment)", "author": "trask", "createdAt": "2020-08-13T17:54:23Z", "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Instrumentation.java", "diffHunk": "@@ -108,9 +96,7 @@ public static void onExit(\n         @Advice.Thrown final Throwable throwable,\n         @Advice.Local(\"otelSpan\") Span span,\n         @Advice.Local(\"otelScope\") Scope scope) {\n-      if (scope != null) {\n-        scope.close();\n-      }\n+      scope.close();", "originalCommit": "6702d6a729d94bde3d6e7daa78d5ce844c0bb5a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a147cd28b16a2dc984961b72f72f62f5b2ba7aff", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a147cd28b16a2dc984961b72f72f62f5b2ba7aff", "message": "Add scope null check back", "committedDate": "2020-08-13T17:59:33Z", "type": "commit"}]}