{"pr_number": 1618, "pr_title": "Use Kotlin context element in agent instrumentation", "pr_createdAt": "2020-11-11T09:22:49Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521228127", "bodyText": "These changes are the key to the proposal. My theory is span.makeCurrent is illegal code - the only reason it works here is because the agent is present, but if the agent was not present, resumed coroutines could see completely unrelated contexts, which is a disaster. The idea is that our agent is here to enable tracing, not to allow illegal code. How to \"codify\" that it's illegal is a tricky point though but something we will want to think about. Current idea is that https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java#L99 can also check the stacktrace to see if it is being called from a coroutine, and not from the context element. Dunno if it'll work but if it does, I think we end up in a nice place :)", "author": "anuraaga", "createdAt": "2020-11-11T09:30:45Z", "path": "instrumentation/kotlin-coroutines/javaagent/src/test/kotlin/KotlinCoroutineTests.kt", "diffHunk": "@@ -145,35 +147,35 @@ class KotlinCoroutineTests(private val dispatcher: CoroutineDispatcher) {\n   suspend fun a(iter: Long) {\n     var span = tracer.spanBuilder(\"a\").startSpan()\n     span.setAttribute(\"iter\", iter)\n-    var scope = span.makeCurrent()\n-    delay(10)\n-    a2(iter)\n-    scope.close()\n+    withContext(span.asContextElement()) {", "originalCommit": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyOTYxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521229616", "bodyText": "Also kudos to @adriancole for giving the idea of stack-walking as a potential mechanism for checking I was stuck on that.", "author": "anuraaga", "createdAt": "2020-11-11T09:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4MjA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521582099", "bodyText": "Does this require application authors who use auto-instrumentation and simply use (e.g.) kotlin suspend functions in their logic (without any manual instrumentation) to explicitly use (kotlin) withContext to pass our (otel) context?  That is, if app logic is written in kotlin and taking advantage of auto-instrumentation of inbound and outbound connections, will this still work without the app author having to take extra steps?", "author": "johnbley", "createdAt": "2020-11-11T19:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcxMDU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521710574", "bodyText": "Don't think so - the agent with this code is making sure to automatically propagate the parent at the time the coroutine is launched into its context, so that parent is always available. If all they're doing is using libraries which are auto-instrumented by the agent, it should work fine without calling withContext. It's only when doing manual instrumentation within Kotlin that they need to use withContext instead of makeCurrent. How does that sound?", "author": "anuraaga", "createdAt": "2020-11-11T23:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4NzIxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521787211", "bodyText": "I can see the confusion of this particular test, since it's a javaagent test, but also uses the library instrumentation directly.\ndo you think we need the nested spans to validate launchConcurrentSuspendFunctions? if not, we could remove a2 and b2 and not create any nested scopes at all, and not need to use the library instrumentation in the test.\nif you think the nested scopes is a good test showing interop, maybe we can move it out into a separate test class ...InteropTest.", "author": "trask", "createdAt": "2020-11-12T03:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMjQwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r522202405", "bodyText": "The nesting spans are crucial to the test - without any form of instrumentation, we were previously reporting nonsensical traces like \"a causes b causes a2\" and \"b2 causes a\".", "author": "johnbley", "createdAt": "2020-11-12T15:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNDc1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r522204754", "bodyText": ". It's only when doing manual instrumentation within Kotlin that they need to use withContext instead of makeCurrent. How does that sound?\n\nThat sounds great; I have no problem making kotlin instrumentation authors work a little to preserve (otel) context.  I actually originally tried something like this (using the kotlin coroutine context system more \"naturally) but was unable to make it work.  I'm glad you were able to figure it out!  l'm going to try to find some time to manually validate with a \"real\" kotlin app and see how this change works out in practice.", "author": "johnbley", "createdAt": "2020-11-12T15:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1MDA4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r522250089", "bodyText": "@johnbley #1620 links to a real, though simple kotlin app that exhibits problems with span propagation", "author": "holyjak", "createdAt": "2020-11-12T16:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MzYyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521773626", "bodyText": "is @NotNull useful here (and below)?", "author": "trask", "createdAt": "2020-11-12T02:13:33Z", "path": "instrumentation/kotlin-coroutines/library/src/main/java/io/opentelemetry/instrumentation/kotlincoroutines/ContextElement.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.instrumentation.kotlincoroutines;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+\n+public class ContextElement implements ThreadContextElement<Scope> {\n+\n+  static final CoroutineContext.Key<ContextElement> KEY =\n+      new CoroutineContext.Key<ContextElement>() {};\n+\n+  private final Context context;\n+\n+  public ContextElement(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @NotNull", "originalCommit": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NjY1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521776656", "bodyText": "just because this is weird/surprising\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return ContextElement(Java8BytecodeBridge.currentContext().with(this))\n          \n          \n            \n              // Java8BytecodeBridge is needed in order to support Kotlin which generally targets Java 6 bytecode\n          \n          \n            \n              return ContextElement(Java8BytecodeBridge.currentContext().with(this))", "author": "trask", "createdAt": "2020-11-12T02:24:13Z", "path": "instrumentation/kotlin-coroutines/library/src/main/kotlin/io/opentelemetry/instrumentation/kotlincoroutines/ContextExtensions.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.kotlincoroutines\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.context.Context\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge\n+import kotlin.coroutines.CoroutineContext\n+\n+/**\n+ * Returns a [CoroutineContext] which will make this [Context] current when resuming a coroutine\n+ * and restores the previous [Context] on suspension.\n+ */\n+fun Context.asContextElement(): CoroutineContext {\n+  return ContextElement(this)\n+}\n+\n+/**\n+ * Returns a [CoroutineContext] which will make this [Span] current when resuming a coroutine\n+ * and restores the previous [Context] on suspension.\n+ */\n+fun Span.asContextElement(): CoroutineContext {\n+  return ContextElement(Java8BytecodeBridge.currentContext().with(this))", "originalCommit": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTk5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521799997", "bodyText": "By the way, I'm wondering whether these should be in the SDK instead of instrumentation. Mainly since I was imagining adding to the javadoc for makeCurrent to not use it in Kotlin coroutines and use this instead. But that doesn't make as much sense when crossing repos.", "author": "anuraaga", "createdAt": "2020-11-12T03:28:22Z", "path": "instrumentation/kotlin-coroutines/library/src/main/kotlin/io/opentelemetry/instrumentation/kotlincoroutines/ContextExtensions.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.kotlincoroutines\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.context.Context\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge\n+import kotlin.coroutines.CoroutineContext\n+\n+/**\n+ * Returns a [CoroutineContext] which will make this [Context] current when resuming a coroutine\n+ * and restores the previous [Context] on suspension.\n+ */\n+fun Context.asContextElement(): CoroutineContext {", "originalCommit": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyNDUzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521824531", "bodyText": "language-specific extensions to the API, e.g. opentelemetry-extension-kotlin? I like it", "author": "trask", "createdAt": "2020-11-12T04:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg0MzI0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521843249", "bodyText": "Sent open-telemetry/opentelemetry-java#2066 for the library aspect of this PR", "author": "anuraaga", "createdAt": "2020-11-12T05:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNTI3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r522205273", "bodyText": "I agree - this is a great approach.", "author": "johnbley", "createdAt": "2020-11-12T15:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTk5Nw=="}], "type": "inlineReview"}, {"oid": "9a8011b9d46c339d0a626e58b6c0d99519240148", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a8011b9d46c339d0a626e58b6c0d99519240148", "message": "Use SDK helper", "committedDate": "2020-11-25T08:02:00Z", "type": "commit"}, {"oid": "9a8011b9d46c339d0a626e58b6c0d99519240148", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a8011b9d46c339d0a626e58b6c0d99519240148", "message": "Use SDK helper", "committedDate": "2020-11-25T08:02:00Z", "type": "forcePushed"}, {"oid": "b1e40ed6178f649e60533fad3532909f2bd314f5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1e40ed6178f649e60533fad3532909f2bd314f5", "message": "Revert unintended.", "committedDate": "2020-11-25T08:03:25Z", "type": "commit"}]}