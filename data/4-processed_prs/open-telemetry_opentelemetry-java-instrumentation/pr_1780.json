{"pr_number": 1780, "pr_title": "Add HTTP attributes support for AWS lambda function wrapper", "pr_createdAt": "2020-11-27T12:07:18Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1780", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2MDA0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1780#discussion_r532160042", "bodyText": "Do you think it makes sense to have a AwsLambdaGatewayProxyTracer extends HttpServerTracer?", "author": "anuraaga", "createdAt": "2020-11-29T05:50:51Z", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/HttpSpanAttributes.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import static io.opentelemetry.api.trace.attributes.SemanticAttributes.HTTP_METHOD;\n+import static io.opentelemetry.api.trace.attributes.SemanticAttributes.HTTP_STATUS_CODE;\n+import static io.opentelemetry.api.trace.attributes.SemanticAttributes.HTTP_URL;\n+import static io.opentelemetry.api.trace.attributes.SemanticAttributes.HTTP_USER_AGENT;\n+import static io.opentelemetry.instrumentation.awslambda.v1_0.MapUtils.emptyIfNull;\n+import static io.opentelemetry.instrumentation.awslambda.v1_0.MapUtils.lowercaseMap;\n+\n+import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\n+import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+\n+final class HttpSpanAttributes {", "originalCommit": "5504488644cc98efbd6fda685ae236ef92beeb11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUzMzg1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1780#discussion_r532533853", "bodyText": "I'd considered choosing different tracers based on the input class, but AwsLambdaTracer has some AWS specific logic (context propagation, faas.* attributes) that I'd need to duplicate in a new tracer (which would extend HttpServerTracer); I'd have to put the AWS logic in a separate helper class if I were to do that.\nSo out of the two choices: AWS logic in tracer vs HTTP logic in tracer I'd decided to put the HTTP things in the second place; it seemed to me that it'd be easier to add support for other event types this way (share the same tracer class with all the AWS things, separate strategy for additional attributes)", "author": "mateuszrzeszutek", "createdAt": "2020-11-30T11:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2MDA0Mg=="}], "type": "inlineReview"}, {"oid": "ebc5ab8964382e958c29c47b1c154e25c9f5c744", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ebc5ab8964382e958c29c47b1c154e25c9f5c744", "message": "Add HTTP attributes support for AWS lambda function wrapper", "committedDate": "2020-11-30T11:25:42Z", "type": "commit"}, {"oid": "ebc5ab8964382e958c29c47b1c154e25c9f5c744", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ebc5ab8964382e958c29c47b1c154e25c9f5c744", "message": "Add HTTP attributes support for AWS lambda function wrapper", "committedDate": "2020-11-30T11:25:42Z", "type": "forcePushed"}]}