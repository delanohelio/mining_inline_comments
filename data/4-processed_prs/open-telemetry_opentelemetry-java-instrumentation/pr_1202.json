{"pr_number": 1202, "pr_title": "Update to latest SDK snapshot.", "pr_createdAt": "2020-09-15T06:39:21Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1202", "timeline": [{"oid": "d0fe12c1bab2aacf86a06f39df3aa63ade697f2f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d0fe12c1bab2aacf86a06f39df3aa63ade697f2f", "message": "Update to latest SDK snapshot.", "committedDate": "2020-09-15T06:35:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMTcwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1202#discussion_r488421704", "bodyText": "Figured this is more informative than even what we were doing previously of just putting a hex string of a byte", "author": "anuraaga", "createdAt": "2020-09-15T06:40:11Z", "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "diffHunk": "@@ -47,9 +47,11 @@\n \n     Map<String, String> contextData = new HashMap<>();\n     SpanContext spanContext = currentSpan.getContext();\n-    contextData.put(\"traceId\", spanContext.getTraceId().toLowerBase16());\n-    contextData.put(\"spanId\", spanContext.getSpanId().toLowerBase16());\n-    contextData.put(\"traceFlags\", spanContext.getTraceFlags().toLowerBase16());\n+    contextData.put(\"traceId\", spanContext.getTraceIdAsHexString());\n+    contextData.put(\"spanId\", spanContext.getSpanIdAsHexString());\n+    if (spanContext.isSampled()) {\n+      contextData.put(\"sampled\", \"true\");", "originalCommit": "d0fe12c1bab2aacf86a06f39df3aa63ade697f2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}