{"pr_number": 583, "pr_title": "Merge changes from dd-trace-java 0.56.0", "pr_createdAt": "2020-06-26T06:07:49Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445988422", "bodyText": "Realize it's the same as the previous pattern so optional update, we should probably set this to an unmodifaibleSet in the constructor instead of passing a mutable object around?", "author": "anuraaga", "createdAt": "2020-06-26T06:17:47Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -16,53 +16,80 @@\n \n package io.opentelemetry.auto.bootstrap;\n \n+import io.opentelemetry.auto.bootstrap.instrumentation.api.Pair;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n-import java.nio.file.NoSuchFileException;\n import java.security.Permission;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class InternalJarURLHandler extends URLStreamHandler {\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n-  private JarFile bootstrapJarFile;\n+\n+  private static final WeakReference<Pair<String, JarEntry>> NULL = new WeakReference<>(null);\n+\n+  private final String name;\n+  private final FileNotInInternalJar notFound;\n+  private final Set<String> packages = new HashSet<>();", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNDcwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446024708", "bodyText": "This is only used within a very narrow context where (in the Datadog codebase, at least) we will not mutate the set once it's built, making the unmodifiable wrapper a pointless cost. If we wanted to present a view of this set to untrusted callers, we would have wrapped it.", "author": "richardstartin", "createdAt": "2020-06-26T07:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzNjQ5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446036490", "bodyText": "Note that in this fork, you're not actually using the set at all, so I recommend just removing it and saving a bit of space.", "author": "richardstartin", "createdAt": "2020-06-26T08:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MzcyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446583727", "bodyText": "thx! removed", "author": "trask", "createdAt": "2020-06-28T00:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445989574", "bodyText": "Just curious, is it possible for this class to be accessed from multiple threads? I wonder how many, if there are a lot of copies of this buffer, it's unfortunate they all get stuck in memory after classloading is done sort of lean towards not using a threadlocal for it, string seems pretty small.", "author": "anuraaga", "createdAt": "2020-06-26T06:21:46Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDMxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446580319", "bodyText": "it will come here from any thread that triggers class loading for AgentClassLoader, so likely not too many different threads, as the various instrumentation classes will only be loaded the first time they are used\nwe could do ThreadLocal<WeakReference<StringBuilder>>, but that wouldn't get it out of the ThreadLocal map, which is also nice to reduce collisions\nso maybe WeakReference<ThreadLocal<StringBuilder>>?\n(i'm also ok with no change here)\n@richardstartin wdyt?", "author": "trask", "createdAt": "2020-06-27T23:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MTY5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446591696", "bodyText": "I sort of lean towards not using the threadlocal optimization for these small strings and let it all be garbage that can be collected, over the complexity of weak references, since I suspect this is a tiny part of the optimization in the attached PR.\nBut if we're only leaking a few hundred bytes it's not so bad either.", "author": "anuraaga", "createdAt": "2020-06-28T02:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzMTQ2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446631469", "bodyText": "@trask actually this was an insurance policy against there ever being more than one thread accessing the variable. We haven't seen any negative consequences in our benchmarks, but I think it's a question of \"take it or leave it\" - if it doesn't look right to you, please just change it.", "author": "richardstartin", "createdAt": "2020-06-28T10:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgyMDg5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446820897", "bodyText": "removed the ThreadLocal<StringBuilder>", "author": "trask", "createdAt": "2020-06-29T07:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDUyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445990526", "bodyText": "Intended?", "author": "anuraaga", "createdAt": "2020-06-26T06:24:50Z", "path": "benchmark-integration/jetty-perftest/jetty-perftest.gradle", "diffHunk": "@@ -10,6 +10,6 @@ jar {\n   manifest {\n     attributes(\n       \"Main-Class\": \"io.opentelemetry.perftest.jetty.JettyPerftest\"\n-    )\n+      )", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDgyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446350823", "bodyText": "unfortunate side effect of the new formatting.  If you know of better settings to make it better align with how intellij does it, please let me know.", "author": "tylerbenson", "createdAt": "2020-06-26T18:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzg1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446583852", "bodyText": "reverted auto-formatting of gradle files for now", "author": "trask", "createdAt": "2020-06-28T00:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDY3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445990674", "bodyText": "Yay", "author": "anuraaga", "createdAt": "2020-06-26T06:25:14Z", "path": "gradle.properties", "diffHunk": "@@ -1 +1,4 @@\n+org.gradle.parallel=true", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445992323", "bodyText": "This is because this is a performance optimization, not for correctness, I'm presuming", "author": "anuraaga", "createdAt": "2020-06-26T06:30:14Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();\n+      sb.append(this.name).append(filename);\n+      if (filename.endsWith(\".class\")) {\n+        sb.append(\"data\");\n+      }\n+      String classFileName = sb.toString();\n+      sb.setLength(0);\n+      JarEntry entry = bootstrapJarFile.getJarEntry(classFileName);\n+      if (null != entry) {\n+        pair = Pair.of(filename, entry);\n+        // this mechanism intentionally does not ensure visibility of this write, because it doesn't", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzQ4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446023482", "bodyText": "Reference assignment is atomic so this cannot lead to inconsistency.\nIf some other thread doesn't see the write, they just see another instance or null, and may or may not do extra work.", "author": "richardstartin", "createdAt": "2020-06-26T07:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTAwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446025008", "bodyText": "may or may not do extra work.\n\nSo the answer is yes :) I think the comment can be more self-explantory by talking about the motivation instead of the detail\n// This is a performance optimization, so in the rare event this write is not visible to another thread, it just means the same work is recomputed but does not affect consistency.", "author": "anuraaga", "createdAt": "2020-06-26T07:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Mzg1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446583858", "bodyText": "updated comment", "author": "trask", "createdAt": "2020-06-28T00:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjY2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446332669", "bodyText": "If I understand correctly, all these changes to this class are performance optimisations, no? Is there any benchmark or, even better, a real use-case, which demonstrate the benefit of this?", "author": "iNikem", "createdAt": "2020-06-26T18:02:56Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -16,53 +16,80 @@\n \n package io.opentelemetry.auto.bootstrap;\n \n+import io.opentelemetry.auto.bootstrap.instrumentation.api.Pair;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n-import java.nio.file.NoSuchFileException;\n import java.security.Permission;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class InternalJarURLHandler extends URLStreamHandler {\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n-  private JarFile bootstrapJarFile;\n+\n+  private static final WeakReference<Pair<String, JarEntry>> NULL = new WeakReference<>(null);\n+\n+  private final String name;\n+  private final FileNotInInternalJar notFound;", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3NjI3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446576277", "bodyText": "see DataDog/dd-trace-java#1598", "author": "trask", "createdAt": "2020-06-27T22:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446333471", "bodyText": "Don't understand, what does this test do exactly?", "author": "iNikem", "createdAt": "2020-06-26T18:04:44Z", "path": "agent-bootstrap/src/test/groovy/io/opentelemetry/auto/bootstrap/InternalJarURLHandlerTest.groovy", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package datadog.trace.bootstrap\n+\n+import io.opentelemetry.auto.bootstrap.InternalJarURLHandler\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+import spock.lang.Shared\n+\n+class InternalJarURLHandlerTest extends AgentSpecification {\n+\n+  @Shared\n+  URL testJarLocation = new File(\"src/test/resources/classloader-test-jar/testjar-jdk8\").toURI().toURL()\n+\n+\n+  def \"test extract packages\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    expect:\n+    packages == handler.getPackages()\n+\n+    where:\n+    dir      | packages\n+    \"parent\" | ['a', 'a.b', 'a.b.c'].toSet()\n+    \"child\"  | ['x', 'x.y', 'x.y.z'].toSet()\n+  }\n+\n+  def \"test get URL\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    URLConnection connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    byte[] data = new byte[128]\n+    int read = connection.getInputStream().read(data)\n+    then:\n+    read > 0\n+\n+    where:\n+    dir      | file\n+    \"parent\" | '/a/A.class'\n+    \"parent\" | '/a/b/B.class'\n+    \"parent\" | '/a/b/c/C.class'\n+    \"child\"  | '/x/X.class'\n+    \"child\"  | '/x/y/Y.class'\n+    \"child\"  | '/x/y/z/Z.class'\n+  }\n+\n+\n+  def \"test read class twice\"() {", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDM2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446580366", "bodyText": "i updated the comment to explain a bit more", "author": "trask", "createdAt": "2020-06-27T23:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDQ0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446650440", "bodyText": "Still don't understand :( Why we should specifically test that we can read class on our second attempt? How does second attempt differ from the first or the third one?", "author": "iNikem", "createdAt": "2020-06-28T13:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4MjA1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446682052", "bodyText": "@iNikem I'm going to assume that you are keeping an open mind here so I will try to explain :).\nThere are two reasons related to a caching mechanism:\n\nConstrain what is cached: I wanted to test that a load does not cache the stream after releasing it and losing control over its lifecyle. What's special about the second load which makes it distinct from the first load is that there was a predecessor.  There is a caching mechanism in place, (the JarEntry is cached with the class name), but what if someone comes along later and tried to cache something closeable like the stream instead? That would be unfortunate, but this test would break if that ever happened.\nHitting the branch where caching has occurred: there happen to be about 800 classloads early on which go all the way down the chain and end up in the leaf-level classloader twice. Preventing this from happening would have been a much more invasive change than mitigating it with a cache. Unless you test the load twice, you won't test the branch where the cache is hit. The logic actually dismisses the cache after a hit, based on knowledge of this pattern, making the third load indistinguishable from the first load, hence the lack of a test for it. Good question though.\n\nDoes that make sense? :)", "author": "richardstartin", "createdAt": "2020-06-28T18:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NDUxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446684515", "bodyText": "Great, this explanation does make sense :) What is now missing, is this (or abridged) explanation in the test itself :) For that poor developer who will try to understand this test half a year in the future.", "author": "iNikem", "createdAt": "2020-06-28T18:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NDgyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446684821", "bodyText": "thx @richardstartin! @iNikem i will add this explanation to the test \ud83d\udc4d", "author": "trask", "createdAt": "2020-06-28T18:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NzE4OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446687189", "bodyText": "@iNikem I would love to live in a world where each and every test I'm unfamiliar with happens to have a nice two paragraph explanation attached and I never need to go and take a look at the system under test, but it's not the kind of luxury I've experienced myself.", "author": "richardstartin", "createdAt": "2020-06-28T19:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTYwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446689600", "bodyText": "If our world is not ideal, it does not mean we should not try to make it a better place. I hope you are not saying \u201cThere are a lot of bad code out there, why bother writing good one?\u201d :)", "author": "iNikem", "createdAt": "2020-06-28T19:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MzA0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446693041", "bodyText": "hm, i don't think that's what @richardstartin was saying. but anyways, i think we're good here. i will add the (very nice) comment to this test.", "author": "trask", "createdAt": "2020-06-28T20:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3NDk3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446774970", "bodyText": "comment added \ud83d\udc4d", "author": "trask", "createdAt": "2020-06-29T05:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzgzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446333834", "bodyText": "Why do you want to test several non-existent paths here? Why 1 is not enough?", "author": "iNikem", "createdAt": "2020-06-26T18:05:35Z", "path": "agent-bootstrap/src/test/groovy/io/opentelemetry/auto/bootstrap/InternalJarURLHandlerTest.groovy", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package datadog.trace.bootstrap\n+\n+import io.opentelemetry.auto.bootstrap.InternalJarURLHandler\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+import spock.lang.Shared\n+\n+class InternalJarURLHandlerTest extends AgentSpecification {\n+\n+  @Shared\n+  URL testJarLocation = new File(\"src/test/resources/classloader-test-jar/testjar-jdk8\").toURI().toURL()\n+\n+\n+  def \"test extract packages\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    expect:\n+    packages == handler.getPackages()\n+\n+    where:\n+    dir      | packages\n+    \"parent\" | ['a', 'a.b', 'a.b.c'].toSet()\n+    \"child\"  | ['x', 'x.y', 'x.y.z'].toSet()\n+  }\n+\n+  def \"test get URL\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    URLConnection connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    byte[] data = new byte[128]\n+    int read = connection.getInputStream().read(data)\n+    then:\n+    read > 0\n+\n+    where:\n+    dir      | file\n+    \"parent\" | '/a/A.class'\n+    \"parent\" | '/a/b/B.class'\n+    \"parent\" | '/a/b/c/C.class'\n+    \"child\"  | '/x/X.class'\n+    \"child\"  | '/x/y/Y.class'\n+    \"child\"  | '/x/y/z/Z.class'\n+  }\n+\n+\n+  def \"test read class twice\"() {\n+    // guards against caching the stream\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    URLConnection connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    InputStream is = connection.getInputStream()\n+    is.close()\n+    connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    is = connection.getInputStream()\n+    byte[] data = new byte[128]\n+    int read = is.read(data)\n+\n+    then:\n+    read > 0\n+\n+    where:\n+    dir      | file\n+    \"parent\" | '/a/A.class'\n+    \"parent\" | '/a/b/B.class'\n+    \"parent\" | '/a/b/c/C.class'\n+    \"child\"  | '/x/X.class'\n+    \"child\"  | '/x/y/Y.class'\n+    \"child\"  | '/x/y/z/Z.class'\n+  }\n+\n+  def \"handle not found\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    handler.openConnection(new File(file).toURI().toURL())\n+    then:\n+    // not going to specify (and thereby constrain) the sub type because it doesn't matter\n+    thrown IOException\n+\n+    // permuted\n+    where:\n+    dir      | file", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDM3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446584373", "bodyText": "updated", "author": "trask", "createdAt": "2020-06-28T00:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDMxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446334310", "bodyText": "I would love to see some explanations, why these class loaders in particular are listed.", "author": "iNikem", "createdAt": "2020-06-26T18:06:35Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -116,7 +116,11 @@ public boolean matches(final T target) {\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")) {\n+                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3ODM0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446778342", "bodyText": "this was not changed in this PR, but class loaders are listed in here so that java-classloader instrumentation will not be skipped. the way these are caught and added here is that AgentTestRunner does not use AdditionalLibraryIgnoresMatcher, and then it validates that there are no classes that were instrumented that would have been skipped by AdditionalLibraryIgnoresMatcher, and so the test fails, and then you add suppress the class from being skipped in here", "author": "trask", "createdAt": "2020-06-29T05:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446335146", "bodyText": "What is the motivation of this optimisation?", "author": "iNikem", "createdAt": "2020-06-26T18:08:25Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -293,4 +300,19 @@ private static boolean matchesPrimitive(String longName, String shortName) {\n     }\n     return null;\n   }\n+\n+  private static List<Mismatch> lazyAdd(List<Mismatch> mismatches, Mismatch mismatch) {", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NTU1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446355551", "bodyText": "I suggest you review the original PR.", "author": "tylerbenson", "createdAt": "2020-06-26T18:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTE3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446581172", "bodyText": "added comment", "author": "trask", "createdAt": "2020-06-28T00:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNjY1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446336652", "bodyText": "By committing this file you leave a developer without any way to configure his own pre-commit hooks. I think this is a very bad idea.", "author": "iNikem", "createdAt": "2020-06-26T18:11:36Z", "path": ".githooks/pre-commit", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash\n+# http://redsymbol.net/articles/unofficial-bash-strict-mode/\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+if ! ./gradlew spotlessCheck; then", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NTMxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446355314", "bodyText": "how do you suggest providing this kind of functionality then?  I feel if we don't provide it, 99% of people won't automatically run it before commit, get a failure in CI, have to recommit due to failures.", "author": "tylerbenson", "createdAt": "2020-06-26T18:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNjY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4MjE5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446482196", "bodyText": "We currently provide an example script and a suggestion in CONTRIBUTING to symlink it here. I think this is enough. If a developer frequently have to recommit due to formatting issues, they will remember to actually use this hook.\nI don't think we have to force all developers to use exactly one pre-commit hook blessed by us. Especially if this is \"for their benefit\".", "author": "iNikem", "createdAt": "2020-06-27T04:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNjY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3NjExOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446576118", "bodyText": "@iNikem did u notice this file is under .githooks/pre-commit and not .git/hooks/pre-commit? does that change your opinion on this?", "author": "trask", "createdAt": "2020-06-27T22:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNjY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTE1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446651152", "bodyText": "A. I wonder, how many developers will be confused by this name similarity. IMO from this POV old location, buildscripts was less confusing. But let it be.", "author": "iNikem", "createdAt": "2020-06-28T13:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNjY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzAxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337017", "bodyText": "Why extract this to a field? It is still used only inside one method, no?", "author": "iNikem", "createdAt": "2020-06-26T18:12:14Z", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/AgentClassLoader.java", "diffHunk": "@@ -36,11 +36,14 @@\n \n   private static final String AGENT_INITIALIZER_JAR = System.getProperty(\"ota.initializer.jar\", \"\");\n \n+  protected final InternalJarURLHandler internalJarURLHandler;", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDQ1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446584454", "bodyText": "updated", "author": "trask", "createdAt": "2020-06-28T00:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzI0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337247", "bodyText": "btw, why do we have/need this?", "author": "iNikem", "createdAt": "2020-06-26T18:12:46Z", "path": "gradle.properties", "diffHunk": "@@ -1 +1,4 @@\n+org.gradle.parallel=true\n+org.gradle.caching=true\n+\n org.gradle.jvmargs=-XX:MaxMetaspaceSize=1g", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTY2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446581664", "bodyText": "good question, created #590 to remove", "author": "trask", "createdAt": "2020-06-28T00:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzU2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337566", "bodyText": "which one?", "author": "iNikem", "createdAt": "2020-06-26T18:13:23Z", "path": "gradle/spotless.gradle", "diffHunk": "@@ -2,16 +2,36 @@ apply plugin: 'com.diffplug.gradle.spotless'\n \n spotless {\n   java {\n+    googleJavaFormat()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n     target 'src/**/*.java'\n   }\n   groovy {\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|class)'\n   }\n   scala {\n+    scalafmt()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n   }\n   kotlin {\n+    // ktfmt() // Requires newer version of java", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDU1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446584552", "bodyText": "is requires Java 11, which is fine for us, so i tried it, but it only supports 4-space indent, i updated comment", "author": "trask", "createdAt": "2020-06-28T00:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzc3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337776", "bodyText": "Does not work above but works here?", "author": "iNikem", "createdAt": "2020-06-26T18:13:50Z", "path": "gradle/spotless.gradle", "diffHunk": "@@ -2,16 +2,36 @@ apply plugin: 'com.diffplug.gradle.spotless'\n \n spotless {\n   java {\n+    googleJavaFormat()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n     target 'src/**/*.java'\n   }\n   groovy {\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|class)'\n   }\n   scala {\n+    scalafmt()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n   }\n   kotlin {\n+    // ktfmt() // Requires newer version of java\n+    ktlint().userData(['indent_size': '2', 'continuation_indent_size': '2'])\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n   }\n+  groovyGradle {\n+    greclipse().configFile(rootProject.rootDir.path + '/gradle/enforcement/spotless-groovy.properties')\n+  }\n+  kotlinGradle {\n+    ktfmt()", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDU3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446584577", "bodyText": "removed gradle auto-formatting now", "author": "trask", "createdAt": "2020-06-28T00:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzOTg1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446339859", "bodyText": "These are generated files and should be excluded from format check.", "author": "iNikem", "createdAt": "2020-06-26T18:18:27Z", "path": "instrumentation/jdbc/jdbc.gradle", "diffHunk": "@@ -21,9 +21,6 @@ javacc {\n   }\n }\n \n-tasks.withType(com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat).configureEach {", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTkxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446581913", "bodyText": "spotless appears to be smarter and excludes files under build/generated, so this isn't needed anymore", "author": "trask", "createdAt": "2020-06-28T00:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzOTg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446340583", "bodyText": "This attribute is certainly not from semantic convention. Why should we want this into Otel?", "author": "iNikem", "createdAt": "2020-06-26T18:19:59Z", "path": "instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafkaclients/KafkaProducerInstrumentation.java", "diffHunk": "@@ -93,6 +93,11 @@ public static SpanWithScope onEnter(\n \n       callback = new ProducerCallback(callback, span);\n \n+      boolean isTombstone = record.value() == null && !record.headers().iterator().hasNext();\n+      if (isTombstone) {\n+        span.setAttribute(\"tombstone\", true);", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5NjMyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446596328", "bodyText": "we (currently at least) capture lots of span attributes that are not defined by semantic conventions\nmaybe better if we prefixed this, e.g. kafka.tombstone, so it doesn't look like a semantic attribute?", "author": "trask", "createdAt": "2020-06-28T03:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTQyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446651427", "bodyText": "\"We are already doing strange things, let us do more strange things\" is not exactly good reason :) We already have unanswered questions \"why do we have this attribute here\", such as dispatcher.target or servlet.origin. I am hesitant to add more.", "author": "iNikem", "createdAt": "2020-06-28T13:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NjY5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446686695", "bodyText": "i created #602 to track and make decision about this", "author": "trask", "createdAt": "2020-06-28T19:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MTc4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446341787", "bodyText": "Not sure new format is better :)", "author": "iNikem", "createdAt": "2020-06-26T18:22:47Z", "path": "instrumentation/spring-webmvc-3.1/spring-webmvc-3.1.gradle", "diffHunk": "@@ -5,7 +5,11 @@ muzzle {\n     group = 'org.springframework'\n     module = 'spring-webmvc'\n     versions = \"[3.1.0.RELEASE,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += [", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MTg2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446351867", "bodyText": "yeah, I agree... Intellij does a better job at formatting these, but unfortunately doesn't have a command line tool, so no validation of proper formatting.  If you have a better configuration please suggest.", "author": "tylerbenson", "createdAt": "2020-06-26T18:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDE1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446484150", "bodyText": "I would lean towards not auto formatting Gradle files if the formatter doesn't give a result we're happy with, they're a very small part of this repo, compared to Java.", "author": "anuraaga", "createdAt": "2020-06-27T04:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDY1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446584654", "bodyText": "reverted auto-formatting of gradle files for now", "author": "trask", "createdAt": "2020-06-28T00:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MTc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0Mjc1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446342750", "bodyText": "This will benefit from documentation. This is a good place to document how different instrumentation coordinate with each other and for what purpose.", "author": "iNikem", "createdAt": "2020-06-26T18:25:02Z", "path": "instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/WebApplicationContextInstrumentation.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+\n+@AutoService(Instrumenter.class)", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDI3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446344273", "bodyText": "Why this change?", "author": "iNikem", "createdAt": "2020-06-26T18:28:32Z", "path": "java-agent/java-agent.gradle", "diffHunk": "@@ -22,14 +22,14 @@ jar {\n       \"Premain-Class\": \"io.opentelemetry.auto.bootstrap.AgentBootstrap\",\n       \"Can-Redefine-Classes\": true,\n       \"Can-Retransform-Classes\": true,\n-    )\n+      )\n   }\n }\n \n CopySpec isolateSpec(Collection<Task> sourceTasks) {\n   return copySpec {\n     from(sourceTasks.collect { zipTree(it.archiveFile) }) {\n-      into 'auto-tooling-and-instrumentation.isolated'\n+      into 'inst'", "originalCommit": "d446f389332bd616d5f97612e1e68385851f8bf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MjE3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446352179", "bodyText": "I suggest you review the original PR.", "author": "tylerbenson", "createdAt": "2020-06-26T18:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NDA2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446354064", "bodyText": "Link? :)", "author": "iNikem", "createdAt": "2020-06-26T18:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQ2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446582460", "bodyText": "i added comment\nalso, the original PRs are all linked in the corresponding commit messages", "author": "trask", "createdAt": "2020-06-28T00:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDI3Mw=="}], "type": "inlineReview"}, {"oid": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "message": "Add comment", "committedDate": "2020-06-29T05:55:53Z", "type": "forcePushed"}, {"oid": "9c0cb20ef66cb32eceeedf0c1b4547f2b4c03a0c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c0cb20ef66cb32eceeedf0c1b4547f2b4c03a0c", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-29T05:58:04Z", "type": "forcePushed"}, {"oid": "0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-29T16:31:08Z", "type": "forcePushed"}, {"oid": "6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "message": "Shorten jar names (prefixes of runtime classnames) (DataDog/dd-trace-java#1592)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "abd9744accf0f57e7c6fa58355eedc790e228449", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/abd9744accf0f57e7c6fa58355eedc790e228449", "message": "Route classloads to classloader by package (DataDog/dd-trace-java#1598)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "dfa000d92ce4f3fff4273513d9d7923ea871bae5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dfa000d92ce4f3fff4273513d9d7923ea871bae5", "message": "Do not eagerly load classfiles at startup (DataDog/dd-trace-java#1606)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "45dc02d9649bddd18342fd1141b676fc301474a7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/45dc02d9649bddd18342fd1141b676fc301474a7", "message": "Fix Spring handler mapping affecting character encoding (DataDog/dd-trace-java#1595)", "committedDate": "2020-06-30T18:13:20Z", "type": "commit"}, {"oid": "d2e6c62a8de64e12c4b1ae275964f7d5ee188eac", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d2e6c62a8de64e12c4b1ae275964f7d5ee188eac", "message": "Enable build cache (DataDog/dd-trace-java#1607)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "cab03e058024a2a94eba372cd101d9ca630d0c3d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cab03e058024a2a94eba372cd101d9ca630d0c3d", "message": "Remove anonymous class from spring webmvc-3.1 (DataDog/dd-trace-java#1611)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "6b0ee86c99897bafd1b16f2d22967ae2fcdb5e5e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6b0ee86c99897bafd1b16f2d22967ae2fcdb5e5e", "message": "Exclude JDK class references at build time, reduce allocation in ReferenceMatcher (DataDog/dd-trace-java#1613)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "de1aa4bf9bcb42a82ae284922095675ff6911020", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/de1aa4bf9bcb42a82ae284922095675ff6911020", "message": "Remove noisy logging in InternalJarURLHandler (DataDog/dd-trace-java#1609)", "committedDate": "2020-06-30T18:13:21Z", "type": "commit"}, {"oid": "b558c5022925dcbfe71cba756f37ce4de5507b64", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b558c5022925dcbfe71cba756f37ce4de5507b64", "message": "Add missing classloader matchers for expensive matchers (DataDog/dd-trace-java#1617)", "committedDate": "2020-06-30T18:13:22Z", "type": "commit"}, {"oid": "4a943c8411127c4b3bf702e6e4d1ee3f5377f8a7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4a943c8411127c4b3bf702e6e4d1ee3f5377f8a7", "message": "Use Spotless for formatting (DataDog/dd-trace-java#1619)", "committedDate": "2020-06-30T18:15:48Z", "type": "commit"}, {"oid": "9e28828cb5d4769562af7a0e77ce91a0ca43dea0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e28828cb5d4769562af7a0e77ce91a0ca43dea0", "message": "Handle kafka tombstones (DataDog/dd-trace-java#1622)", "committedDate": "2020-06-30T18:15:50Z", "type": "commit"}, {"oid": "91ad9965d3f7d2bd21e59beff4662431b390c5d6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91ad9965d3f7d2bd21e59beff4662431b390c5d6", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-30T18:15:50Z", "type": "commit"}, {"oid": "91ad9965d3f7d2bd21e59beff4662431b390c5d6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91ad9965d3f7d2bd21e59beff4662431b390c5d6", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)", "committedDate": "2020-06-30T18:15:50Z", "type": "forcePushed"}]}