{"pr_number": 825, "pr_title": "Tests for spring-boot-autoconfigure", "pr_createdAt": "2020-07-28T22:08:06Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825", "timeline": [{"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "message": "otlp draft", "committedDate": "2020-07-28T22:44:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzA5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007093", "bodyText": "Sorry I think I missed it in the previous test PR - can you use assertj? Otherwise you should definitely use the jupiter assertions instead of junit4, but assertj is even better", "author": "anuraaga", "createdAt": "2020-07-29T02:53:06Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;", "originalCommit": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzEzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007133", "bodyText": "With jupiter, class / methods are generally not public", "author": "anuraaga", "createdAt": "2020-07-29T02:53:16Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {", "originalCommit": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007294", "bodyText": "Would probably use a simpler, more java-idiomatic method name and DisplayName annotation instead\nhttps://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html", "author": "anuraaga", "createdAt": "2020-07-29T02:53:53Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {", "originalCommit": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzQ1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007452", "bodyText": "(I had these two comments as draft comments on the other PR ><)", "author": "anuraaga", "createdAt": "2020-07-29T02:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMzUzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462403535", "bodyText": "I'll create another pull request to make these changes in the other tests", "author": "mabdinur", "createdAt": "2020-07-29T15:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzgwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007806", "bodyText": "I think this test is only really checking JaegerGrpcSpanExporterProperties, not that the properties are actually applied, which is probably not really possible. So can update the naming", "author": "anuraaga", "createdAt": "2020-07-29T02:55:35Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertNotNull(\n+                  \"Application Context contains JaegerGrpcSpanExporter bean\",\n+                  context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class));\n+            });\n+  }\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_with_property_values() {", "originalCommit": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d4ada011030cfa6352094e7dd6fb2971ab480515", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4ada011030cfa6352094e7dd6fb2971ab480515", "message": "add logging otlp and zpikin tests", "committedDate": "2020-07-29T14:42:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjA3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682077", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n          \n          \n            \n              void exportersEnabled() {\n          \n      \n    \n    \n  \n\nI'd find a short method name that captures as much intent when adding a longer display name", "author": "anuraaga", "createdAt": "2020-07-30T01:32:29Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {", "originalCommit": "78be5c58f61a8bf989879fa992acefedce3c106f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjI4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682285", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n          \n          \n            \n              void handlesProperties() {", "author": "anuraaga", "createdAt": "2020-07-30T01:32:48Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {", "originalCommit": "78be5c58f61a8bf989879fa992acefedce3c106f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjQxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {\n          \n          \n            \n              void disabledProperty() {", "author": "anuraaga", "createdAt": "2020-07-30T01:33:01Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\"when exporters are DISABLED should NOT initialize JaegerGrpcSpanExporter bean\")\n+  void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {", "originalCommit": "78be5c58f61a8bf989879fa992acefedce3c106f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjYwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682603", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWhenJaegerEnabledPropertyIsMissing() {\n          \n          \n            \n              void noProperty() {", "author": "anuraaga", "createdAt": "2020-07-30T01:33:47Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\"when exporters are DISABLED should NOT initialize JaegerGrpcSpanExporter bean\")\n+  void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporter.jaeger.enabled=false\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.containsBean(\"otelJaegerSpanExporter\")).isFalse();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when jaeger enabled property is MISSING should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenJaegerEnabledPropertyIsMissing() {", "originalCommit": "78be5c58f61a8bf989879fa992acefedce3c106f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MzAyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462683024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n          \n          \n            \n                              .isEqualTo(Duration.ofMillis(420));\n          \n          \n            \n                          assertThat(jaegerSpanExporterProperties.getSpanTimeout()).hasMillis(420);", "author": "anuraaga", "createdAt": "2020-07-30T01:35:11Z", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));", "originalCommit": "78be5c58f61a8bf989879fa992acefedce3c106f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92c632ef3a2299ed9dea5956619d8efbec2c8699", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/92c632ef3a2299ed9dea5956619d8efbec2c8699", "message": "test for jaeger exporter", "committedDate": "2020-07-31T01:47:58Z", "type": "commit"}, {"oid": "fe2ae8cf5c3402a218a44aecd7bc404befcfe671", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fe2ae8cf5c3402a218a44aecd7bc404befcfe671", "message": "otlp draft", "committedDate": "2020-07-31T01:47:58Z", "type": "commit"}, {"oid": "0056aa223e52374e66c1ea33246a345e5e32f8db", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0056aa223e52374e66c1ea33246a345e5e32f8db", "message": "add logging otlp and zpikin tests", "committedDate": "2020-07-31T01:47:58Z", "type": "commit"}, {"oid": "827dfd58e565c28c5aeeb9bb2af16126aec93c16", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/827dfd58e565c28c5aeeb9bb2af16126aec93c16", "message": "fix for zipkin test", "committedDate": "2020-07-31T01:47:58Z", "type": "commit"}, {"oid": "f1c4b95142cedf9d5d55319c09819e2b351a2afb", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f1c4b95142cedf9d5d55319c09819e2b351a2afb", "message": "use assertj with exporters and fix method names", "committedDate": "2020-07-31T01:47:58Z", "type": "commit"}, {"oid": "9b618695a87ac3ea0a956dbd1a5b7b16c1a0a90b", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9b618695a87ac3ea0a956dbd1a5b7b16c1a0a90b", "message": "make methods package private", "committedDate": "2020-07-31T01:47:58Z", "type": "commit"}, {"oid": "8e8283a2c5a3dd70a963241355e7e6d0177530dd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e8283a2c5a3dd70a963241355e7e6d0177530dd", "message": "format", "committedDate": "2020-07-31T01:47:58Z", "type": "commit"}, {"oid": "ccad73dacfcb7ac2c85f2941b8e389dfb36bbf15", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ccad73dacfcb7ac2c85f2941b8e389dfb36bbf15", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-31T01:47:59Z", "type": "commit"}, {"oid": "a3a575bb2ef8fade129e86b40dd03c62c7bd61e8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a3a575bb2ef8fade129e86b40dd03c62c7bd61e8", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-31T01:47:59Z", "type": "commit"}, {"oid": "6026c5d4a90a2ea833a2d978a50774e8e4b458d9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6026c5d4a90a2ea833a2d978a50774e8e4b458d9", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-31T01:47:59Z", "type": "commit"}, {"oid": "61b09e87c4881ec1d7c22f9d6f83e948ee4eb368", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61b09e87c4881ec1d7c22f9d6f83e948ee4eb368", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-31T01:47:59Z", "type": "commit"}, {"oid": "bff2608821eeffd5be144d44ea0f200ab1ea01f9", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bff2608821eeffd5be144d44ea0f200ab1ea01f9", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-31T01:47:59Z", "type": "commit"}, {"oid": "2e3d97f8ee3d07e099e82b7596c1c79f5a5b12c1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e3d97f8ee3d07e099e82b7596c1c79f5a5b12c1", "message": "new method names", "committedDate": "2020-07-31T01:47:59Z", "type": "forcePushed"}, {"oid": "842dc2dd649f688e9d8fc7d400a4fce3cbf612cd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/842dc2dd649f688e9d8fc7d400a4fce3cbf612cd", "message": "new method names", "committedDate": "2020-07-31T02:24:07Z", "type": "forcePushed"}, {"oid": "38b29ac0d8474916428ec747996dc99db462864f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38b29ac0d8474916428ec747996dc99db462864f", "message": "new method names", "committedDate": "2020-07-31T02:27:33Z", "type": "commit"}, {"oid": "38b29ac0d8474916428ec747996dc99db462864f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38b29ac0d8474916428ec747996dc99db462864f", "message": "new method names", "committedDate": "2020-07-31T02:27:33Z", "type": "forcePushed"}, {"oid": "86f89a0e4e5bb98cf354fd696f90849b4267649e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86f89a0e4e5bb98cf354fd696f90849b4267649e", "message": "fix otlp test", "committedDate": "2020-07-31T03:38:12Z", "type": "commit"}]}