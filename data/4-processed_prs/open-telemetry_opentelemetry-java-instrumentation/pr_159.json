{"pr_number": 159, "pr_title": "Third-party exporter loading framework", "pr_createdAt": "2020-02-12T22:30:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159", "timeline": [{"oid": "468f55e92bed4f5dc53f0529b9758c9226c1560c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/468f55e92bed4f5dc53f0529b9758c9226c1560c", "message": "Classloader done. Still needs shading", "committedDate": "2020-02-08T01:46:45Z", "type": "commit"}, {"oid": "d93b9eed41e5851e70434e53b1287ac8c5ba00a4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d93b9eed41e5851e70434e53b1287ac8c5ba00a4", "message": "First working version", "committedDate": "2020-02-10T16:27:59Z", "type": "commit"}, {"oid": "b7bbcfd19df1c0e4a4c50321f65ca8738cc90b0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b7bbcfd19df1c0e4a4c50321f65ca8738cc90b0f", "message": "Made the dummy exporter slightly less stupid", "committedDate": "2020-02-10T18:33:36Z", "type": "commit"}, {"oid": "b40c68f60ef6be8d77d80462effc3a24eb637401", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b40c68f60ef6be8d77d80462effc3a24eb637401", "message": "Use SPI pattern for loading. Added runtime shader", "committedDate": "2020-02-11T04:03:40Z", "type": "commit"}, {"oid": "e3ae2f524764636d859c2ae81db0fe2e64c9e3bc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3ae2f524764636d859c2ae81db0fe2e64c9e3bc", "message": "Changed to do shading on binary stream instead of loading the class first", "committedDate": "2020-02-11T14:44:24Z", "type": "commit"}, {"oid": "7a827279a5de8fdca26e93fe799c619217be6af2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7a827279a5de8fdca26e93fe799c619217be6af2", "message": "Protected the runtime shader from having its internals shaded", "committedDate": "2020-02-12T15:52:12Z", "type": "commit"}, {"oid": "4934e259a5d45c8154c5e7f2b4f3b2b137254529", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4934e259a5d45c8154c5e7f2b4f3b2b137254529", "message": "Cleaned up code and naming", "committedDate": "2020-02-12T22:25:54Z", "type": "commit"}, {"oid": "223c561024cbf4b39ece218df920474d7be9ce7c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/223c561024cbf4b39ece218df920474d7be9ce7c", "message": "Cleaned up", "committedDate": "2020-02-13T01:27:39Z", "type": "commit"}, {"oid": "ced5de1f2e8d5f56629b6ee64df6da6c7ca38f84", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ced5de1f2e8d5f56629b6ee64df6da6c7ca38f84", "message": "Merge remote-tracking branch 'upstream/master' into prydin-exporter-experiment", "committedDate": "2020-02-13T01:27:42Z", "type": "commit"}, {"oid": "a2371bdf9fa27b312eff388255a9492c089054b8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a2371bdf9fa27b312eff388255a9492c089054b8", "message": "Cleaned up and fixed test issues", "committedDate": "2020-02-13T04:05:49Z", "type": "commit"}, {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1d2f7532728ed3131f29474662b58fafb277c7ec", "message": "Merge branch 'master' into prydin-exporter-experiment", "committedDate": "2020-02-13T04:16:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODQzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378578432", "bodyText": "it doesn't look like this field is needed?", "author": "trask", "createdAt": "2020-02-12T23:48:44Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -1,37 +1,86 @@\n package io.opentelemetry.auto.tooling;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n import io.opentelemetry.auto.tooling.exporter.ExporterConfigException;\n import io.opentelemetry.auto.tooling.exporter.ExporterRegistry;\n-import io.opentelemetry.auto.tooling.exporter.SpanExporterFactory;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import java.util.jar.Manifest;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class TracerInstaller {\n+  private static ExporterClassLoader exporterLoader;", "originalCommit": "4934e259a5d45c8154c5e7f2b4f3b2b137254529", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDc1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378894757", "bodyText": "Not it's not. Removed.", "author": "prydin", "createdAt": "2020-02-13T14:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODgzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378578831", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Manifest mf;", "author": "trask", "createdAt": "2020-02-12T23:50:03Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -1,37 +1,86 @@\n package io.opentelemetry.auto.tooling;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n import io.opentelemetry.auto.tooling.exporter.ExporterConfigException;\n import io.opentelemetry.auto.tooling.exporter.ExporterRegistry;\n-import io.opentelemetry.auto.tooling.exporter.SpanExporterFactory;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import java.util.jar.Manifest;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class TracerInstaller {\n+  private static ExporterClassLoader exporterLoader;\n \n   /** Register agent tracer if no agent tracer is already registered. */\n   public static synchronized void installAgentTracer() {\n     if (Config.get().isTraceEnabled()) {\n \n       // Try to create an exporter\n-      final String exporter = Config.get().getExporter();\n-      if (exporter != null) {\n+      SpanExporter exporter = null;\n+      final String expName = Config.get().getExporter();\n+      if (expName != null) {\n         try {\n-          final SpanExporterFactory f = ExporterRegistry.getInstance().getFactory(exporter);\n-          OpenTelemetrySdk.getTracerFactory()\n-              .addSpanProcessor(SimpleSpansProcessor.newBuilder(f.newExporter()).build());\n-          log.info(\"Loaded span exporter: \" + exporter);\n+          final io.opentelemetry.auto.tooling.exporter.SpanExporterFactory f =\n+              ExporterRegistry.getInstance().getFactory(expName);\n+          exporter = f.newExporter();\n+          log.info(\"Loaded span exporter: \" + expName);\n         } catch (final ExporterConfigException e) {\n           log.warn(\"Error loading exporter. Spans will be dropped\", e);\n         }\n+      } else {\n+        final String exporterJar = Config.get().getExporterJar();\n+        if (exporterJar != null) {\n+          exporter = loadFromJar(exporterJar);\n+        }\n+      }\n+      if (exporter != null) {\n+        OpenTelemetrySdk.getTracerFactory()\n+            .addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+        log.info(\"Installed span exporter: \" + exporter.getClass().getCanonicalName());\n       } else {\n         log.warn(\"No exporter is specified. Tracing will run but spans are dropped\");\n       }\n     } else {\n-      log.debug(\"Tracing is disabled.\");\n+      log.info(\"Tracing is disabled.\");\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  private static synchronized SpanExporter loadFromJar(final String exporterJar) {\n+    final URL url;\n+    try {\n+      url = new File(exporterJar).toURI().toURL();\n+    } catch (final MalformedURLException e) {\n+      log.warn(\"Filename could not be parsed: \" + exporterJar + \". Exporter is not installed\");\n+      return null;\n+    }\n+\n+    // Locate the name of the bootstrap class and try to load it\n+    final Manifest mf;", "originalCommit": "4934e259a5d45c8154c5e7f2b4f3b2b137254529", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0Mzk1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378643958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "author": "trask", "createdAt": "2020-02-13T04:19:22Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override\n+  @Override\n+  public int getInt(final String key, final int defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Integer.parseInt(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override", "originalCommit": "1d2f7532728ed3131f29474662b58fafb277c7ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0Mzk4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378643988", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "author": "trask", "createdAt": "2020-02-13T04:19:33Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override\n+  @Override\n+  public int getInt(final String key, final int defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Integer.parseInt(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override\n+  @Override\n+  public long getLong(final String key, final long defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Long.parseLong(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override", "originalCommit": "1d2f7532728ed3131f29474662b58fafb277c7ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDAwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "author": "trask", "createdAt": "2020-02-13T04:19:41Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override\n+  @Override\n+  public int getInt(final String key, final int defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Integer.parseInt(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override\n+  @Override\n+  public long getLong(final String key, final long defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Long.parseLong(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override\n+  @Override\n+  public boolean getBoolean(final String key, final boolean defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Boolean.parseBoolean(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override", "originalCommit": "1d2f7532728ed3131f29474662b58fafb277c7ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDA0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644049", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "author": "trask", "createdAt": "2020-02-13T04:19:54Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override", "originalCommit": "1d2f7532728ed3131f29474662b58fafb277c7ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDA2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "author": "trask", "createdAt": "2020-02-13T04:20:02Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override", "originalCommit": "1d2f7532728ed3131f29474662b58fafb277c7ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDIzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644237", "bodyText": "\ud83d\udc4d I've never seen floorEntry() before, was wondering why TreeMap above", "author": "trask", "createdAt": "2020-02-13T04:20:57Z", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/ShadingRemapper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import net.bytebuddy.jar.asm.commons.Remapper;\n+\n+public class ShadingRemapper extends Remapper {\n+  public static class Rule {\n+    private final String from;\n+    private final String to;\n+\n+    public Rule(String from, String to) {\n+      // Strip prefix added to prevent the build-time relocation from changing the names\n+      if (from.startsWith(\"#\")) {\n+        from = from.substring(1);\n+      }\n+      if (to.startsWith(\"#\")) {\n+        to = to.substring(1);\n+      }\n+      this.from = from.replace('.', '/');\n+      this.to = to.replace('.', '/');\n+    }\n+  }\n+\n+  public static Rule rule(final String from, final String to) {\n+    return new Rule(from, to);\n+  }\n+\n+  private final TreeMap<String, String> map = new TreeMap<>();\n+\n+  public ShadingRemapper(final Rule... rules) {\n+    for (final Rule rule : rules) {\n+      map.put(rule.from, rule.to);\n+    }\n+  }\n+\n+  @Override\n+  public String map(final String internalName) {\n+    final Map.Entry<String, String> e = map.floorEntry(internalName);", "originalCommit": "1d2f7532728ed3131f29474662b58fafb277c7ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NTc3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378895777", "bodyText": "Yeah, that's a great trick for checking if a string with a common prefix exists in a list. Probably a bit overkill for the small list we have now, but you never know if it's going to grow...", "author": "prydin", "createdAt": "2020-02-13T14:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDYzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644638", "bodyText": "\ud83d\udc4d", "author": "trask", "createdAt": "2020-02-13T04:23:27Z", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/tooling/ExporterLoaderTest.groovy", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.opentelemetry.auto.tooling\n+\n+\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+import io.opentelemetry.sdk.OpenTelemetrySdk\n+\n+class ExporterLoaderTest extends AgentSpecification {", "originalCommit": "1d2f7532728ed3131f29474662b58fafb277c7ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f3ad858bd931d0645f16f0ce436dacfcce1098f1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f3ad858bd931d0645f16f0ce436dacfcce1098f1", "message": "Minor fixes from code review", "committedDate": "2020-02-13T13:33:17Z", "type": "commit"}, {"oid": "3b0e247749554f5bb44f5d890f034e69417080aa", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b0e247749554f5bb44f5d890f034e69417080aa", "message": "Merge from upstream", "committedDate": "2020-02-13T14:14:52Z", "type": "commit"}, {"oid": "cf5a9db69bb5e2ab7a91d0bca1e5387855ee1fd7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf5a9db69bb5e2ab7a91d0bca1e5387855ee1fd7", "message": "Merge branch 'prydin-exporter-experiment' of https://github.com/prydin/opentelemetry-auto-instr-java into prydin-exporter-experiment", "committedDate": "2020-02-13T14:19:32Z", "type": "commit"}, {"oid": "09c7dd3ca2c645e6fc04ee28ec51a64396bbdbcd", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/09c7dd3ca2c645e6fc04ee28ec51a64396bbdbcd", "message": "Merge branch 'master' into prydin-exporter-experiment", "committedDate": "2020-02-13T20:52:32Z", "type": "commit"}]}