{"pr_number": 1533, "pr_title": "Simplify JDBC span names", "pr_createdAt": "2020-10-30T14:43:21Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533", "timeline": [{"oid": "d69c6a3db69452fe8ee31e11d968d3188cb1d5a6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d69c6a3db69452fe8ee31e11d968d3188cb1d5a6", "message": "Use SqlStatementInfo to generate JDBC span name", "committedDate": "2020-11-09T15:30:42Z", "type": "forcePushed"}, {"oid": "b4d836fe2ce31fc00c58ccc7306a3ca9a8912129", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b4d836fe2ce31fc00c58ccc7306a3ca9a8912129", "message": "Use SqlStatementInfo to generate JDBC span name", "committedDate": "2020-11-09T15:31:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4NzEwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r519987108", "bodyText": "Maybe add a comment one just to document the known edge case (unless I'm misreading the code and this actually works)?\n'/*comment*/ select * from table1' -> null/null", "author": "johnbley", "createdAt": "2020-11-09T17:24:23Z", "path": "javaagent-api/src/test/groovy/io/opentelemetry/javaagent/instrumentation/api/db/normalizer/SqlStatementInfoExtractorTest.groovy", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.SqlStatementInfo\n+import spock.lang.Specification\n+import spock.lang.Unroll\n+\n+class SqlStatementInfoExtractorTest extends Specification {\n+\n+  @Unroll\n+  def \"should simplify #sql\"() {\n+    expect:\n+    SqlStatementInfoExtractor.extract(sql) == expected\n+\n+    where:\n+    sql                                                               | expected\n+    // Select\n+    'SELECT x, y, z FROM schema.table'                                | new SqlStatementInfo(sql, 'SELECT', 'schema.table')\n+    'WITH subquery as (select a from b) SELECT x, y, z FROM table'    | new SqlStatementInfo(sql, 'SELECT', null)\n+    'SELECT x, y, (select a from b) as z FROM table'                  | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select delete, insert into, merge, update from table'            | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col /* from table2 */ from table'                         | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col from table join anotherTable'                         | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from (select * from anotherTable)'                    | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from (select * from anotherTable) alias'              | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 union select col from table2'             | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table where col in (select * from anotherTable)' | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1, table2'                                  | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 t1, table2 t2'                            | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 as t1, table2 as t2'                      | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table where col in (1, 2, 3)'                    | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col from table order by col, col2'                        | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select \u0105\u015b\u2202\u0144\u00a9 from \u017a\u0107\u013c\u0144\u0136 order by col, col2'                      | new SqlStatementInfo(sql, 'SELECT', '\u017a\u0107\u013c\u0144\u0136')\n+    'select 12345678'                                                 | new SqlStatementInfo(sql, 'SELECT', null)\n+    // Insert\n+    ' insert into table where lalala'                                 | new SqlStatementInfo(sql.trim(), 'INSERT', 'table')\n+    'insert insert into table where lalala'                           | new SqlStatementInfo(sql, 'INSERT', 'table')\n+    'insert into db.table where lalala'                               | new SqlStatementInfo(sql, 'INSERT', 'db.table')\n+    'insert without i-n-t-o'                                          | new SqlStatementInfo(sql, 'INSERT', null)\n+    // Delete\n+    'delete from table where something something'                     | new SqlStatementInfo(sql, 'DELETE', 'table')\n+    'delete from 12345678'                                            | new SqlStatementInfo(sql, 'DELETE', null)\n+    'delete   ((('                                                    | new SqlStatementInfo(sql, 'DELETE', null)\n+    // Update\n+    'update table set answer=42'                                      | new SqlStatementInfo(sql, 'UPDATE', 'table')\n+    'update /*table'                                                  | new SqlStatementInfo(sql, 'UPDATE', null)\n+    // Merge\n+    'merge into table'                                                | new SqlStatementInfo(sql, 'MERGE', 'table')\n+    'merge table (into is optional in some dbs)'                      | new SqlStatementInfo(sql, 'MERGE', 'table')\n+    'merge (into )))'                                                 | new SqlStatementInfo(sql, 'MERGE', null)\n+    // Unknown operation\n+    'and now for something completely different'                      | new SqlStatementInfo(sql, null, null)\n+    ''                                                                | new SqlStatementInfo(sql, null, null)\n+    null                                                              | new SqlStatementInfo(sql, null, null)\n+  }", "originalCommit": "d53e1f759ce08246c4642a6d7014b2b7e0ea8024", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5MzMyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r519993329", "bodyText": "This actually works, but I'll add a test case for that anyway.", "author": "mateuszrzeszutek", "createdAt": "2020-11-09T17:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4NzEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1NjUzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r520156534", "bodyText": "can query.getOperation() be null here?\nmaybe a unit test for this method to test the different combinations?", "author": "trask", "createdAt": "2020-11-09T22:18:10Z", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java", "diffHunk": "@@ -69,19 +71,44 @@ public Span startSpan(PreparedStatement statement) {\n   }\n \n   public Span startSpan(Statement statement, String query) {\n+    return startSpan(statement, normalizeAndExtractInfo(query));\n+  }\n+\n+  public Span startSpan(Statement statement, SqlStatementInfo queryInfo) {\n     Connection connection = connectionFromStatement(statement);\n     if (connection == null) {\n       return null;\n     }\n \n     DBInfo dbInfo = extractDbInfo(connection);\n \n-    return startSpan(dbInfo, query);\n+    return startSpan(dbInfo, queryInfo);\n+  }\n+\n+  @Override\n+  protected String normalizeQuery(SqlStatementInfo query) {\n+    return query.getFullStatement();\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n-    return JDBCUtils.normalizeSql(query);\n+  protected String spanName(DBInfo connection, SqlStatementInfo query, String normalizedQuery) {\n+    String dbName = dbName(connection);\n+    if (query.getOperation() == null && query.getTable() == null) {\n+      return dbName == null ? DB_QUERY : dbName;\n+    }\n+\n+    StringBuilder name = new StringBuilder();\n+    name.append(query.getOperation()).append(' ');", "originalCommit": "9974a9c95ba3970b95ecfa28d0687cae105f379a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NDc3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r520484774", "bodyText": "It can't - the only possible options are null, null, operation, null, operation, table.\nI'll add more unit tests anyway.", "author": "mateuszrzeszutek", "createdAt": "2020-11-10T11:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1NjUzNA=="}], "type": "inlineReview"}, {"oid": "b02af97eecb87b1c12c99ad3f78251619e0b7b25", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b02af97eecb87b1c12c99ad3f78251619e0b7b25", "message": "Simplify JDBC span names", "committedDate": "2020-11-10T11:08:24Z", "type": "commit"}, {"oid": "d9f4148a96a3be2af7d1fb271bd6b024a50dae96", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d9f4148a96a3be2af7d1fb271bd6b024a50dae96", "message": "Simplify JDBC span names", "committedDate": "2020-11-10T11:08:24Z", "type": "commit"}, {"oid": "987b786f354151d79c177f32943662c3326edfcc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/987b786f354151d79c177f32943662c3326edfcc", "message": "Updated to reflect spec discussion", "committedDate": "2020-11-10T11:08:24Z", "type": "commit"}, {"oid": "283808eaa60de0013c88933f716e054b2c49fa14", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/283808eaa60de0013c88933f716e054b2c49fa14", "message": "Simplify JDBC span names\n\n* Refactor to state machine\n* Implement accurate db.sql.table", "committedDate": "2020-11-10T11:08:24Z", "type": "commit"}, {"oid": "94f90906beb254f4641aad99af5c50fe13465585", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/94f90906beb254f4641aad99af5c50fe13465585", "message": "Use SqlStatementInfo to generate JDBC span name", "committedDate": "2020-11-10T11:09:02Z", "type": "commit"}, {"oid": "531dffed9aa674332d5d67836e6a3338e0dcf517", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/531dffed9aa674332d5d67836e6a3338e0dcf517", "message": "fix tests", "committedDate": "2020-11-10T11:09:02Z", "type": "commit"}, {"oid": "fa551e5fe97761389218d1c2483fcde3c6858c8c", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa551e5fe97761389218d1c2483fcde3c6858c8c", "message": "Fix Hibernate tests", "committedDate": "2020-11-10T11:09:02Z", "type": "commit"}, {"oid": "3302748bb752991a5efaa1c1755ef469ac8bf770", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3302748bb752991a5efaa1c1755ef469ac8bf770", "message": "Fix spring-data tests", "committedDate": "2020-11-10T11:09:02Z", "type": "commit"}, {"oid": "afd0fb2f02e6c019fe5ce32ed055f8523d45d681", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/afd0fb2f02e6c019fe5ce32ed055f8523d45d681", "message": "spotless", "committedDate": "2020-11-10T11:09:02Z", "type": "commit"}, {"oid": "01146aa9712335685e9206df9af089caf362856d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/01146aa9712335685e9206df9af089caf362856d", "message": "Fix comments & parens edge case, add test cases", "committedDate": "2020-11-10T11:09:02Z", "type": "commit"}, {"oid": "8e48efac99207694d7af05591e5b19b466c7936a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e48efac99207694d7af05591e5b19b466c7936a", "message": "Add span name test case", "committedDate": "2020-11-10T13:01:21Z", "type": "commit"}, {"oid": "8e48efac99207694d7af05591e5b19b466c7936a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e48efac99207694d7af05591e5b19b466c7936a", "message": "Add span name test case", "committedDate": "2020-11-10T13:01:21Z", "type": "forcePushed"}, {"oid": "0526c6565b4861e13be508e23506d69a6143160a", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0526c6565b4861e13be508e23506d69a6143160a", "message": "Fixed tests", "committedDate": "2020-11-10T13:52:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MzI3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r520743271", "bodyText": "I think this makes more clear that query.getOperation() can't be null below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (query.getOperation() == null && query.getTable() == null) {\n          \n          \n            \n                if (query.getOperation() == null) {", "author": "trask", "createdAt": "2020-11-10T17:31:38Z", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java", "diffHunk": "@@ -69,19 +71,44 @@ public Span startSpan(PreparedStatement statement) {\n   }\n \n   public Span startSpan(Statement statement, String query) {\n+    return startSpan(statement, normalizeAndExtractInfo(query));\n+  }\n+\n+  public Span startSpan(Statement statement, SqlStatementInfo queryInfo) {\n     Connection connection = connectionFromStatement(statement);\n     if (connection == null) {\n       return null;\n     }\n \n     DBInfo dbInfo = extractDbInfo(connection);\n \n-    return startSpan(dbInfo, query);\n+    return startSpan(dbInfo, queryInfo);\n+  }\n+\n+  @Override\n+  protected String normalizeQuery(SqlStatementInfo query) {\n+    return query.getFullStatement();\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n-    return JDBCUtils.normalizeSql(query);\n+  protected String spanName(DBInfo connection, SqlStatementInfo query, String normalizedQuery) {\n+    String dbName = dbName(connection);\n+    if (query.getOperation() == null && query.getTable() == null) {", "originalCommit": "0526c6565b4861e13be508e23506d69a6143160a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9823a719d009bbc3606e23bd0333b7a7cb3487b2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9823a719d009bbc3606e23bd0333b7a7cb3487b2", "message": "Update instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>", "committedDate": "2020-11-10T17:38:42Z", "type": "commit"}]}